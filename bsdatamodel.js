(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"), require("./bscore"), require("re-reselect"), require("reselect"), require("redux"), require("base64-js"), require("redux-thunk"), require("uuid"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash", "./bscore", "re-reselect", "reselect", "redux", "base64-js", "redux-thunk", "uuid"], factory);
	else if(typeof exports === 'object')
		exports["bsDataModel"] = factory(require("lodash"), require("./bscore"), require("re-reselect"), require("reselect"), require("redux"), require("base64-js"), require("redux-thunk"), require("uuid"));
	else
		root["bsDataModel"] = factory(root["lodash"], root["./bscore"], root["re-reselect"], root["reselect"], root["redux"], root["base64-js"], root["redux-thunk"], root["uuid"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_27__, __WEBPACK_EXTERNAL_MODULE_30__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_110__, __WEBPACK_EXTERNAL_MODULE_111__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 73);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("./bscore");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RssTextElementName = exports.LiveTextEntityType = exports.LiveTextItemType = exports.DmPartnerCommandLibraryType = exports.DmTapProtocolType = exports.SerialConnectedDeviceType = exports.SerialEol = exports.SerialProtocol = exports.SerialParity = exports.DmDefaultFontName = exports.DmInvisibleLayerId = exports.DmAudioLayerId = exports.DmGraphicsLayerId = exports.DmVideoLayer2Id = exports.DmVideoLayer1Id = exports.DmVideoLayerId = exports.MediaStateContainerType = exports.DmParameterizedNumberCommandPropertyNames = exports.DmParameterizedStringCommandPropertyNames = exports.DmTimeClockEventType = exports.DmKeyboardEventSpecialCharCodeSet = exports.DmKeyboardEventSpecialCharCodes = exports.DmSuperStateContentItemDataNameArray = exports.DmLiveTextContentItemDataNameArray = exports.DmEventHandlerContentItemDataNameArray = exports.DmPlayFileItemDataNameArray = exports.DmPlayFileContentItemDataNameArray = exports.DmLocalPlaylistItemDataNameArray = exports.DmLocalPlaylistContentItemDataNameArray = exports.DmMediaListContentItemDataNameArray = exports.DmMjpegStreamContentItemDataNameArray = exports.DmStreamContentItemDataNameArray = exports.DmLiveVideoContentItemDataNameArray = exports.DmTwitterFeedContentItemDataNameArray = exports.DmMrssDataFeedContentItemDataNameArray = exports.DmHtmlContentItemDataNameArray = exports.DmImageContentItemDataNameArray = exports.DmAudioContentItemDataNameArray = exports.DmVideoContentItemDataNameArray = exports.DmCopySetContentType = exports.DmEntityContainerType = exports.DmEntityType = exports.BsDmStateVersion = exports.BsDmIdNone = void 0;
var bsDmVersion_1 = __webpack_require__(58);
exports.BsDmIdNone = '0';
exports.BsDmStateVersion = bsDmVersion_1.version;
var DmEntityType;
(function (DmEntityType) {
    DmEntityType["Sign"] = "Sign";
    DmEntityType["Zone"] = "Zone";
    DmEntityType["MediaState"] = "MediaState";
    DmEntityType["Event"] = "Event";
    DmEntityType["Transition"] = "Transition";
    DmEntityType["Command"] = "Command";
    DmEntityType["DataFeed"] = "DataFeed";
    DmEntityType["DataFeedSource"] = "DataFeedSource";
    DmEntityType["HtmlSite"] = "HtmlSite";
    DmEntityType["NodeApp"] = "NodeApp";
    DmEntityType["UserVariable"] = "UserVariable";
    DmEntityType["LiveText"] = "LiveText";
    DmEntityType["Plugin"] = "Plugin";
    DmEntityType["ScriptPlugin"] = "ScriptPlugin";
    DmEntityType["ParserPlugin"] = "ParserPlugin";
    DmEntityType["DeviceWebPage"] = "DeviceWebPage";
    DmEntityType["LinkedPresentation"] = "LinkedPresentation";
    DmEntityType["AuxiliaryFile"] = "AuxiliaryFile";
    DmEntityType["PartnerProduct"] = "PartnerProduct";
    DmEntityType["LiveTextItem"] = "LiveTextItem";
})(DmEntityType = exports.DmEntityType || (exports.DmEntityType = {}));
var DmEntityContainerType;
(function (DmEntityContainerType) {
    DmEntityContainerType["ZoneSet"] = "ZoneSet";
    DmEntityContainerType["MediaStateSet"] = "MSSet";
    DmEntityContainerType["MediaStateItemSet"] = "ItemSet";
    DmEntityContainerType["EventSet"] = "EvSet";
    DmEntityContainerType["TransitionSequence"] = "TranS";
    DmEntityContainerType["CommandSequence"] = "CmdS";
    DmEntityContainerType["CommandSequenceStateEntry"] = "CmdSEntry";
    DmEntityContainerType["CommandSequenceStateExit"] = "CmdSExit";
    DmEntityContainerType["CommandSequenceItemEntry"] = "CmdSItemEntry";
    DmEntityContainerType["CommandSequenceItemExit"] = "CmdSItemExit";
    DmEntityContainerType["LiveTextItemSet"] = "LiveTextSet";
    DmEntityContainerType["UserVariableSet"] = "UserVariableSet";
    DmEntityContainerType["ScriptPluginSet"] = "ScriptPluginSet";
    DmEntityContainerType["ParserPluginSet"] = "ParserPluginSet";
    DmEntityContainerType["LinkedPresentationSet"] = "LinkedPresSet";
    DmEntityContainerType["SystemDataFeedSet"] = "SysDataFeeds";
    DmEntityContainerType["AuxiliaryFileSet"] = "AuxFiles";
    DmEntityContainerType["NodeAppSet"] = "NodeAppSet";
})(DmEntityContainerType = exports.DmEntityContainerType || (exports.DmEntityContainerType = {}));
var DmCopySetContentType;
(function (DmCopySetContentType) {
    DmCopySetContentType["Playlist"] = "Playlist";
    DmCopySetContentType["Interactive"] = "Interactive";
    DmCopySetContentType["MediaItemList"] = "MediaItemList";
    DmCopySetContentType["LiveText"] = "LiveText";
    DmCopySetContentType["Command"] = "Command";
    DmCopySetContentType["UserVariable"] = "UserVariable";
})(DmCopySetContentType = exports.DmCopySetContentType || (exports.DmCopySetContentType = {}));
exports.DmVideoContentItemDataNameArray = ['volume', 'videoDisplayMode', 'automaticallyLoop'];
exports.DmAudioContentItemDataNameArray = ['volume'];
exports.DmImageContentItemDataNameArray = [
    'useImageBuffer', 'videoPlayerRequired', 'defaultTransition', 'transitionDuration'
];
exports.DmHtmlContentItemDataNameArray = [
    'enableBrightSignJavascriptObjects',
    'enableCrossDomainPolicyChecks',
    'ignoreHttpsCertificateErrors',
    'enableCamera',
    'enableMouseEvents', 'displayCursor', 'hwzOn',
    'useUserStylesheet', 'userStylesheetAssetId', 'customFonts',
];
exports.DmMrssDataFeedContentItemDataNameArray = ['videoPlayerRequired'];
exports.DmTwitterFeedContentItemDataNameArray = [
    'userName', 'authToken', 'encryptedTwitterSecrets',
    'updateInterval', 'restrictNumberOfTweets', 'numberOfTweetsToShow', 'numberOfRecentDaysForTweets',
];
exports.DmLiveVideoContentItemDataNameArray = ['volume', 'overscan'];
exports.DmStreamContentItemDataNameArray = ['volume', 'url'];
exports.DmMjpegStreamContentItemDataNameArray = ['rotation', 'url'];
exports.DmMediaListContentItemDataNameArray = ['playbackType', 'shuffle', 'support4KImage',
    'sendMediaZoneMessage', 'transition', 'transitionDuration', 'autoTransitions',
    'inactivityTimeout', 'inactivityTime',
    'startIndex', 'useDataFeed', 'dataFeedId'];
exports.DmLocalPlaylistContentItemDataNameArray = ['defaultDataFeedId'];
exports.DmLocalPlaylistItemDataNameArray = ['serialNumber'];
exports.DmPlayFileContentItemDataNameArray = ['triggerType', 'useDefaultMedia',
    'userVariableIdOrName', 'useDataFeed', 'dataFeedId'];
exports.DmPlayFileItemDataNameArray = ['name', 'key', 'exportKey'];
exports.DmEventHandlerContentItemDataNameArray = ['stopPlayback'];
exports.DmLiveTextContentItemDataNameArray = ['canvasId'];
exports.DmSuperStateContentItemDataNameArray = ['initialMediaStateId'];
exports.DmKeyboardEventSpecialCharCodes = [
    'bs', 'sp', 'tb', 'rn', 'en', 'es', 'de', 'la', 'ra', 'ua', 'da', 'pu', 'pd',
    'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'ps', 'sl', 'pb',
    'in', 'ho', 'ed', 'cl', 'mu', 'vd', 'vu', 'nt', 'pt', 'pp', 'sm', 'sb', 'pwr', 'bk', 'fw', 'rf', 'any',
];
exports.DmKeyboardEventSpecialCharCodeSet = new Set(exports.DmKeyboardEventSpecialCharCodes);
var DmTimeClockEventType;
(function (DmTimeClockEventType) {
    DmTimeClockEventType["DateTime"] = "timeClockDateTime";
    DmTimeClockEventType["ByUserVariable"] = "timeClockDateTimeByUserVariable";
    DmTimeClockEventType["DailyOnce"] = "timeClockDailyOnce";
    DmTimeClockEventType["DailyPeriodic"] = "timeClockDailyPeriodic";
})(DmTimeClockEventType = exports.DmTimeClockEventType || (exports.DmTimeClockEventType = {}));
exports.DmParameterizedStringCommandPropertyNames = ['messageData', 'beaconName', 'userVariableValue', 'hexString'];
exports.DmParameterizedNumberCommandPropertyNames = ['volume', 'pauseTime'];
var MediaStateContainerType;
(function (MediaStateContainerType) {
    MediaStateContainerType[MediaStateContainerType["Zone"] = 0] = "Zone";
    MediaStateContainerType[MediaStateContainerType["MediaList"] = 1] = "MediaList";
    MediaStateContainerType[MediaStateContainerType["PlayFile"] = 2] = "PlayFile";
    MediaStateContainerType[MediaStateContainerType["SuperState"] = 3] = "SuperState";
    MediaStateContainerType[MediaStateContainerType["LocalPlaylist"] = 4] = "LocalPlaylist";
})(MediaStateContainerType = exports.MediaStateContainerType || (exports.MediaStateContainerType = {}));
exports.DmVideoLayerId = 'videoLayerId';
exports.DmVideoLayer1Id = 'videoLayer1Id';
exports.DmVideoLayer2Id = 'videoLayer2Id';
exports.DmGraphicsLayerId = 'graphicsLayerId';
exports.DmAudioLayerId = 'audioLayerId';
exports.DmInvisibleLayerId = 'invisibleLayerId';
exports.DmDefaultFontName = 'System';
var SerialParity;
(function (SerialParity) {
    SerialParity["None"] = "N";
    SerialParity["Even"] = "E";
    SerialParity["Odd"] = "O";
})(SerialParity = exports.SerialParity || (exports.SerialParity = {}));
var SerialProtocol;
(function (SerialProtocol) {
    SerialProtocol["Ascii"] = "ASCII";
    SerialProtocol["Binary"] = "Binary";
})(SerialProtocol = exports.SerialProtocol || (exports.SerialProtocol = {}));
var SerialEol;
(function (SerialEol) {
    SerialEol["CR"] = "CR";
    SerialEol["LF"] = "LF";
    SerialEol["CRLF"] = "CRLF";
})(SerialEol = exports.SerialEol || (exports.SerialEol = {}));
var SerialConnectedDeviceType;
(function (SerialConnectedDeviceType) {
    SerialConnectedDeviceType["None"] = "None";
    SerialConnectedDeviceType["Gps"] = "GPS";
})(SerialConnectedDeviceType = exports.SerialConnectedDeviceType || (exports.SerialConnectedDeviceType = {}));
var DmTapProtocolType;
(function (DmTapProtocolType) {
    DmTapProtocolType["Serial"] = "Serial";
    DmTapProtocolType["Cdc"] = "CDC";
    DmTapProtocolType["Hid"] = "HID";
})(DmTapProtocolType = exports.DmTapProtocolType || (exports.DmTapProtocolType = {}));
var DmPartnerCommandLibraryType;
(function (DmPartnerCommandLibraryType) {
    DmPartnerCommandLibraryType["None"] = "None";
    DmPartnerCommandLibraryType["Riviera"] = "Riviera";
})(DmPartnerCommandLibraryType = exports.DmPartnerCommandLibraryType || (exports.DmPartnerCommandLibraryType = {}));
var LiveTextItemType;
(function (LiveTextItemType) {
    LiveTextItemType["StaticText"] = "StaticText";
    LiveTextItemType["SystemVariable"] = "SystemVariable";
    LiveTextItemType["MediaCounter"] = "MediaCounter";
    LiveTextItemType["UserVariable"] = "UserVariable";
    LiveTextItemType["SimpleRss"] = "SimpleRss";
    LiveTextItemType["MediaRssText"] = "MediaRssText";
    LiveTextItemType["MediaRssMedia"] = "MediaRssMedia";
    LiveTextItemType["Image"] = "Image";
    LiveTextItemType["IndexedDataFeed"] = "IndexedDataFeed";
    LiveTextItemType["TitledDataFeed"] = "TitledDataFeed";
})(LiveTextItemType = exports.LiveTextItemType || (exports.LiveTextItemType = {}));
var LiveTextEntityType;
(function (LiveTextEntityType) {
    LiveTextEntityType["StaticText"] = "StaticText";
    LiveTextEntityType["SystemVariable"] = "SystemVariable";
    LiveTextEntityType["MediaCounter"] = "MediaCounter";
    LiveTextEntityType["UserVariable"] = "UserVariable";
    LiveTextEntityType["Image"] = "Image";
    LiveTextEntityType["SimpleRss"] = "SimpleRss";
    LiveTextEntityType["MediaRss"] = "MediaRss";
    LiveTextEntityType["DataFeed"] = "DataFeed";
})(LiveTextEntityType = exports.LiveTextEntityType || (exports.LiveTextEntityType = {}));
var RssTextElementName;
(function (RssTextElementName) {
    RssTextElementName["Title"] = "Title";
    RssTextElementName["Description"] = "Description";
    RssTextElementName["Custom"] = "Custom";
})(RssTextElementName = exports.RssTextElementName || (exports.RssTextElementName = {}));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.audioOutputAssignmentsHaveActiveAudio = exports.getUniqueNameForNameMap = exports.reSequenceIds = exports.moveIdsInSequence = exports.deepUpdate = exports.isValidHexString = exports.isValidBsDmIdValue = exports.isValidGuidBsDmId = exports.isValidBsDmId = exports.newBsDmId = void 0;
var uuid_1 = __webpack_require__(111);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var lodash_1 = __webpack_require__(0);
var newBsDmId = function () { return uuid_1.v4(); };
exports.newBsDmId = newBsDmId;
var reValidId = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
var isValidBsDmId = function (id) {
    return !lodash_1.isNil(id) && id !== bsDmInterfaces_1.BsDmIdNone && id !== '';
};
exports.isValidBsDmId = isValidBsDmId;
var isValidGuidBsDmId = function (id) {
    if (lodash_1.isString(id)) {
        var ret = id.match(reValidId);
        return !lodash_1.isNil(ret) && id === ret[0];
    }
    return false;
};
exports.isValidGuidBsDmId = isValidGuidBsDmId;
var isValidBsDmIdValue = function (id) {
    if (lodash_1.isString(id)) {
        if (id === bsDmInterfaces_1.BsDmIdNone) {
            return true;
        }
        var ret = id.match(reValidId);
        return !lodash_1.isNil(ret) && id === ret[0];
    }
    return false;
};
exports.isValidBsDmIdValue = isValidBsDmIdValue;
var reValidHexString = /^[0-9a-f]+$/i;
var isValidHexString = function (val) {
    if (lodash_1.isString(val)) {
        var ret = val.match(reValidHexString);
        return !lodash_1.isNil(ret) && val === ret[0];
    }
    return false;
};
exports.isValidHexString = isValidHexString;
var deepUpdate = function (target, partial) {
    var updatedTarget = __assign({}, target);
    Object.keys(partial).forEach(function (propName) {
        if (!lodash_1.isNil(partial[propName]) && typeof partial[propName] === 'object') {
            updatedTarget[propName] = exports.deepUpdate(updatedTarget[propName], partial[propName]);
        }
        else {
            updatedTarget[propName] = partial[propName];
        }
    });
    return updatedTarget;
};
exports.deepUpdate = deepUpdate;
var moveIdsInSequence = function (sequence, indices, targetIndex) {
    if (targetIndex < 0 || targetIndex >= sequence.length) {
        targetIndex = sequence.length - 1;
    }
    var tempIndices = indices
        .filter(function (index) { return index >= 0 && index < sequence.length; })
        .sort(function (a, b) { return a - b; });
    var movedIds = [];
    var unmovedIds = [];
    sequence.forEach(function (id, index) {
        if (index === tempIndices[0]) {
            movedIds.push(id);
            tempIndices.shift();
        }
        else {
            unmovedIds.push(id);
        }
    });
    if (movedIds.length > 0) {
        return __spreadArrays(unmovedIds.slice(0, targetIndex), movedIds, unmovedIds.slice(targetIndex));
    }
    return sequence;
};
exports.moveIdsInSequence = moveIdsInSequence;
var reSequenceIds = function (sequence, indices) {
    var filteredIndices = lodash_1.uniq(indices)
        .filter(function (index) { return index >= 0 && index < sequence.length; });
    return filteredIndices.map(function (index) { return sequence[index]; });
};
exports.reSequenceIds = reSequenceIds;
var reNameParts = /^(.+?)(?: \((\d+)\))?$/i;
function getUniqueNameForNameMap(proposedName, nameMap) {
    var uniqueName = proposedName;
    var nameParts = reNameParts.exec(proposedName);
    if (!lodash_1.isNil(nameParts)) {
        var baseName = nameParts[1];
        var num = lodash_1.isNil(nameParts[2]) ? 1 : Number(nameParts[2]);
        while (!lodash_1.isNil(nameMap[uniqueName])) {
            uniqueName = baseName + ' (' + num + ')';
            num = num + 1;
        }
    }
    return uniqueName;
}
exports.getUniqueNameForNameMap = getUniqueNameForNameMap;
function audioOutputAssignmentsHaveActiveAudio(outputAssignments) {
    return Object.keys(outputAssignments)
        .some(function (outputName) { return outputAssignments[outputName] !== bscore_1.AudioOutputType.None; });
}
exports.audioOutputAssignmentsHaveActiveAudio = audioOutputAssignmentsHaveActiveAudio;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmInitializeValidationResult = exports.dmIsBsDmError = exports.BsDmError = exports.dmGetErrorMessage = exports.DmErrorType = void 0;
var lodash_1 = __webpack_require__(0);
var DmErrorType;
(function (DmErrorType) {
    DmErrorType[DmErrorType["unknownError"] = 0] = "unknownError";
    DmErrorType[DmErrorType["unexpectedError"] = 1] = "unexpectedError";
    DmErrorType[DmErrorType["invalidParameters"] = 2] = "invalidParameters";
    DmErrorType[DmErrorType["invalidOperation"] = 3] = "invalidOperation";
    DmErrorType[DmErrorType["apiError"] = 4] = "apiError";
    DmErrorType[DmErrorType["invalidSign"] = 5] = "invalidSign";
    DmErrorType[DmErrorType["pluginNameInUse"] = 6] = "pluginNameInUse";
    DmErrorType[DmErrorType["parserPluginFunctionNameInUse"] = 7] = "parserPluginFunctionNameInUse";
    DmErrorType[DmErrorType["userVariableNameNotFound"] = 8] = "userVariableNameNotFound";
    DmErrorType[DmErrorType["assetNotFound"] = 9] = "assetNotFound";
    DmErrorType[DmErrorType["eventNotCompatibleWithContentType"] = 10] = "eventNotCompatibleWithContentType";
    DmErrorType[DmErrorType["eventNotAllowedWithTarget"] = 11] = "eventNotAllowedWithTarget";
    DmErrorType[DmErrorType["eventDuplicated"] = 12] = "eventDuplicated";
    DmErrorType[DmErrorType["eventNotCompatibleWithPlayerModel"] = 13] = "eventNotCompatibleWithPlayerModel";
    DmErrorType[DmErrorType["eventCannotBeAddedToMediaSequenceItem"] = 14] = "eventCannotBeAddedToMediaSequenceItem";
    DmErrorType[DmErrorType["eventActionIsIncompatible"] = 15] = "eventActionIsIncompatible";
    DmErrorType[DmErrorType["synchronizeEventNotCompatibleWithContentType"] = 16] = "synchronizeEventNotCompatibleWithContentType";
    DmErrorType[DmErrorType["synchronizeEventNotCompatibleWithPlayFileWhenEnhancedSynchronizationDisabled"] = 17] = "synchronizeEventNotCompatibleWithPlayFileWhenEnhancedSynchronizationDisabled";
    DmErrorType[DmErrorType["pluginEventRequiresDefinedPlugins"] = 18] = "pluginEventRequiresDefinedPlugins";
    DmErrorType[DmErrorType["gpioEventRequiresGpioInput"] = 19] = "gpioEventRequiresGpioInput";
    DmErrorType[DmErrorType["commandNotCompatibleWithPlayerModel"] = 20] = "commandNotCompatibleWithPlayerModel";
    DmErrorType[DmErrorType["gpioCommandRequiresGpioOutput"] = 21] = "gpioCommandRequiresGpioOutput";
    DmErrorType[DmErrorType["gpioConfigurationChangeCreatesInvalidEventsOrCommands"] = 22] = "gpioConfigurationChangeCreatesInvalidEventsOrCommands";
    DmErrorType[DmErrorType["irRemoteChangeCreatesInvalidEventsOrCommands"] = 23] = "irRemoteChangeCreatesInvalidEventsOrCommands";
    DmErrorType[DmErrorType["nameNotSpecified"] = 24] = "nameNotSpecified";
    DmErrorType[DmErrorType["valueNotSpecifiedOrInvalid"] = 25] = "valueNotSpecifiedOrInvalid";
    DmErrorType[DmErrorType["duplicateNameNotAllowed"] = 26] = "duplicateNameNotAllowed";
    DmErrorType[DmErrorType["eventDataMissing"] = 27] = "eventDataMissing";
    DmErrorType[DmErrorType["stringDataValueIsEmpty"] = 28] = "stringDataValueIsEmpty";
    DmErrorType[DmErrorType["keyboardEventDataFormatIsIncorrect"] = 29] = "keyboardEventDataFormatIsIncorrect";
    DmErrorType[DmErrorType["remoteEventDataFormatIsIncorrect"] = 30] = "remoteEventDataFormatIsIncorrect";
    DmErrorType[DmErrorType["byteStringCommandDataIsIncorrect"] = 31] = "byteStringCommandDataIsIncorrect";
    DmErrorType[DmErrorType["userVariableNotSpecified"] = 32] = "userVariableNotSpecified";
    DmErrorType[DmErrorType["userVariableIdInvalid"] = 33] = "userVariableIdInvalid";
    DmErrorType[DmErrorType["userVariableNameNotDefined"] = 34] = "userVariableNameNotDefined";
    DmErrorType[DmErrorType["userVariableInputStringFormatIsIncorrect"] = 35] = "userVariableInputStringFormatIsIncorrect";
    DmErrorType[DmErrorType["switchPresentationTargetNotSpecified"] = 36] = "switchPresentationTargetNotSpecified";
    DmErrorType[DmErrorType["dataFeedNotSpecified"] = 37] = "dataFeedNotSpecified";
    DmErrorType[DmErrorType["invalidDataFeedSource"] = 38] = "invalidDataFeedSource";
    DmErrorType[DmErrorType["invalidHexString"] = 39] = "invalidHexString";
    DmErrorType[DmErrorType["invalidUrlString"] = 40] = "invalidUrlString";
    DmErrorType[DmErrorType["linkedPresentationIdInvalid"] = 41] = "linkedPresentationIdInvalid";
    DmErrorType[DmErrorType["invalidContainerForPaste"] = 42] = "invalidContainerForPaste";
    DmErrorType[DmErrorType["invalidPlugin"] = 43] = "invalidPlugin";
    DmErrorType[DmErrorType["invalidCustomPresentationWebPage"] = 44] = "invalidCustomPresentationWebPage";
    DmErrorType[DmErrorType["superStateInitialStateInvalid"] = 45] = "superStateInitialStateInvalid";
    DmErrorType[DmErrorType["superStateInitialStateCannotBeOnDemand"] = 46] = "superStateInitialStateCannotBeOnDemand";
    DmErrorType[DmErrorType["noAudioDecodersAvailable"] = 47] = "noAudioDecodersAvailable";
    DmErrorType[DmErrorType["contentTypeNotCompatibleWithZone"] = 48] = "contentTypeNotCompatibleWithZone";
    DmErrorType[DmErrorType["irRemoteEventRequiresIrInSource"] = 49] = "irRemoteEventRequiresIrInSource";
    DmErrorType[DmErrorType["videoModePluginFunctionNameInUse"] = 50] = "videoModePluginFunctionNameInUse";
    DmErrorType[DmErrorType["nodeAppNameInUse"] = 51] = "nodeAppNameInUse";
    DmErrorType[DmErrorType["invalidNodeApp"] = 52] = "invalidNodeApp";
    DmErrorType[DmErrorType["invalidVolume"] = 53] = "invalidVolume";
})(DmErrorType = exports.DmErrorType || (exports.DmErrorType = {}));
var bsnErrorMessage = (_a = {},
    _a[DmErrorType.unknownError] = 'Unknown error',
    _a[DmErrorType.unexpectedError] = 'Unexpected error',
    _a[DmErrorType.invalidParameters] = 'Invalid parameters',
    _a[DmErrorType.invalidOperation] = 'Invalid operation attempt',
    _a[DmErrorType.apiError] = 'API error',
    _a[DmErrorType.invalidSign] = 'Invalid presentation',
    _a[DmErrorType.pluginNameInUse] = 'Script plugin file name can only be used once',
    _a[DmErrorType.parserPluginFunctionNameInUse] = 'Parser plugin function name can only be used once',
    _a[DmErrorType.invalidPlugin] = 'The script plugin is not valid',
    _a[DmErrorType.userVariableNameNotFound] = 'User variable name is not defined',
    _a[DmErrorType.assetNotFound] = 'The asset was not found in the asset list',
    _a[DmErrorType.eventNotCompatibleWithContentType] = 'The event type is not compatible with the media state content',
    _a[DmErrorType.eventNotAllowedWithTarget] = 'For time code events, target state is not allowed',
    _a[DmErrorType.eventDuplicated] = 'The event is a duplicate of another event already assigned to the media state',
    _a[DmErrorType.eventNotCompatibleWithPlayerModel] = 'The event is not compatible with the current BrightSign player model',
    _a[DmErrorType.eventCannotBeAddedToMediaSequenceItem] = 'Events cannot be added to MediaList or PlayFile items',
    _a[DmErrorType.eventActionIsIncompatible] = 'The event action is not compatible with the intended event use',
    _a[DmErrorType.synchronizeEventNotCompatibleWithContentType] = 'The Synchronize event is only supported when the target is an Image or a Video',
    _a[DmErrorType.synchronizeEventNotCompatibleWithPlayFileWhenEnhancedSynchronizationDisabled] = 'Synchronizing to an On Demand state is only permitted when using Enhanced Synchronization.',
    _a[DmErrorType.pluginEventRequiresDefinedPlugins] = 'Add a Script Plugin using Presentation Setting -> Support Content',
    _a[DmErrorType.gpioEventRequiresGpioInput] = 'A GPIO event can only be specified for a GPIO that is configured as an input',
    _a[DmErrorType.commandNotCompatibleWithPlayerModel] = 'The command is not compatible with the current BrightSign player model',
    _a[DmErrorType.gpioCommandRequiresGpioOutput] = 'A GPIO command can only be specified for a GPIO that is configured as an output',
    _a[DmErrorType.gpioConfigurationChangeCreatesInvalidEventsOrCommands] = 'The changes made to GPIO configuration will make some events or commands invalid',
    _a[DmErrorType.irRemoteChangeCreatesInvalidEventsOrCommands] = 'The changes made to IR Remote will make some events or commands invalid',
    _a[DmErrorType.nameNotSpecified] = 'A valid name must be specified',
    _a[DmErrorType.valueNotSpecifiedOrInvalid] = 'Value entered is missing or invalid',
    _a[DmErrorType.duplicateNameNotAllowed] = 'Duplicate name is not allowed',
    _a[DmErrorType.eventDataMissing] = 'Event data is missing or blank',
    _a[DmErrorType.stringDataValueIsEmpty] = 'String data value cannot be empty',
    _a[DmErrorType.keyboardEventDataFormatIsIncorrect] = 'Data format is incorrect for keyboard event',
    _a[DmErrorType.remoteEventDataFormatIsIncorrect] = 'Data format is incorrect for remote event',
    _a[DmErrorType.byteStringCommandDataIsIncorrect] = 'Command data must be a string representing a byte sequence',
    _a[DmErrorType.userVariableNotSpecified] = 'A user variable must be specified',
    _a[DmErrorType.userVariableIdInvalid] = 'Invalid user variable ID',
    _a[DmErrorType.userVariableNameNotDefined] = 'User variable name does not refer to a valid user variable',
    _a[DmErrorType.userVariableInputStringFormatIsIncorrect] = 'User variable input string format must be "<variableName>:<value>"',
    _a[DmErrorType.switchPresentationTargetNotSpecified] = 'Target presentation not specified for SwitchPresentation',
    _a[DmErrorType.dataFeedNotSpecified] = 'DataFeed source for content is not properly specified',
    _a[DmErrorType.invalidDataFeedSource] = 'DataFeed source reference is invalid',
    _a[DmErrorType.invalidHexString] = 'Invalid Hex string',
    _a[DmErrorType.invalidUrlString] = 'Invalid URL string',
    _a[DmErrorType.linkedPresentationIdInvalid] = 'Invalid linked presentation ID',
    _a[DmErrorType.invalidContainerForPaste] = 'Paste action cannot be carried out for the specified container',
    _a[DmErrorType.invalidCustomPresentationWebPage] = 'Custom presentation web page specification is invalid',
    _a[DmErrorType.noAudioDecodersAvailable] = 'No audio decoders are available for zone audio',
    _a[DmErrorType.contentTypeNotCompatibleWithZone] = 'ContentType is not compatible with the specified zone.',
    _a[DmErrorType.irRemoteEventRequiresIrInSource] = 'An IR Remote input source must be specified',
    _a[DmErrorType.videoModePluginFunctionNameInUse] = 'Video Mode plugin function name can only be used once',
    _a[DmErrorType.nodeAppNameInUse] = 'Node.js file name can only be used once',
    _a[DmErrorType.invalidNodeApp] = 'The Node.js App is not valid',
    _a[DmErrorType.invalidVolume] = 'Invalid volume range',
    _a);
function dmGetErrorMessage(type) {
    return bsnErrorMessage[type];
}
exports.dmGetErrorMessage = dmGetErrorMessage;
var BsDmError = (function (_super) {
    __extends(BsDmError, _super);
    function BsDmError(type, reason, details) {
        var _this = _super.call(this) || this;
        _this.name = 'BsDmError';
        _this.type = type;
        if (reason) {
            _this.message = bsnErrorMessage[type] + ': ' + reason;
        }
        else {
            _this.message = bsnErrorMessage[type];
        }
        if (!lodash_1.isNil(details)) {
            _this.details = details;
            if (!lodash_1.isNil(details.action)) {
                _this.details.action = __assign(__assign({}, details.action), { error: true, meta: { reason: _this.message } });
            }
        }
        else {
            _this.details = {};
        }
        Object.setPrototypeOf(_this, BsDmError.prototype);
        return _this;
    }
    Object.defineProperty(BsDmError.prototype, "action", {
        get: function () {
            return lodash_1.isNil(this.details.action) ? null : this.details.action;
        },
        set: function (value) {
            this.attachAction(value);
        },
        enumerable: false,
        configurable: true
    });
    BsDmError.prototype.attachAction = function (action) {
        this.details.action = lodash_1.isNil(action) ? null : __assign(__assign({}, action), { error: true, meta: { reason: this.message } });
    };
    return BsDmError;
}(Error));
exports.BsDmError = BsDmError;
function dmIsBsDmError(error) {
    return error instanceof BsDmError;
}
exports.dmIsBsDmError = dmIsBsDmError;
function dmInitializeValidationResult(entityType, entityId) {
    return {
        ok: true,
        entityId: entityId,
        entityType: entityType,
        errorList: [],
        componentErrors: null,
    };
}
exports.dmInitializeValidationResult = dmInitializeValidationResult;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCheckForInvalidDmSignState = exports.dmFilterDmState = exports.dmIsDmState = void 0;
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
function dmIsDmState(value) {
    return !lodash_1.isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('sign')
        && value.hasOwnProperty('zones')
        && value.hasOwnProperty('mediaStates')
        && value.hasOwnProperty('events')
        && value.hasOwnProperty('transitions')
        && value.hasOwnProperty('commands')
        && value.hasOwnProperty('htmlSites')
        && value.hasOwnProperty('nodeApps')
        && value.hasOwnProperty('dataFeeds')
        && value.hasOwnProperty('userVariables')
        && value.hasOwnProperty('liveText')
        && value.hasOwnProperty('deviceWebPages')
        && value.hasOwnProperty('scriptPlugins')
        && value.hasOwnProperty('parserPlugins')
        && value.hasOwnProperty('videoModePlugins')
        && value.hasOwnProperty('auxiliaryFiles')
        && value.hasOwnProperty('linkedPresentations')
        && value.hasOwnProperty('partnerProducts')
        && value.hasOwnProperty('customAutorun')
        && value.hasOwnProperty('assetMap')
        && value.hasOwnProperty('thumbnail');
}
exports.dmIsDmState = dmIsDmState;
function dmFilterDmState(state) {
    if (state.hasOwnProperty('bsdm')) {
        return state.bsdm;
    }
    return state;
}
exports.dmFilterDmState = dmFilterDmState;
var isValidSignMetadataState = function (state) {
    return typeof state === 'object'
        && state.hasOwnProperty('properties')
        && state.properties.hasOwnProperty('version')
        && state.properties.hasOwnProperty('name')
        && state.properties.hasOwnProperty('videoMode')
        && state.properties.hasOwnProperty('model')
        && state.properties.hasOwnProperty('monitorOrientation')
        && state.properties.hasOwnProperty('videoConnector')
        && state.properties.hasOwnProperty('deviceWebPageDisplay')
        && state.properties.hasOwnProperty('backgroundScreenColor')
        && state.properties.hasOwnProperty('forceResolution')
        && state.properties.hasOwnProperty('tenBitColorEnabled')
        && state.properties.hasOwnProperty('htmlEnableJavascriptConsole')
        && state.properties.hasOwnProperty('alphabetizeVariableNames')
        && state.properties.hasOwnProperty('autoCreateMediaCounterVariables')
        && state.properties.hasOwnProperty('resetVariablesOnPresentationStart')
        && state.properties.hasOwnProperty('networkedVariablesUpdateInterval')
        && state.properties.hasOwnProperty('delayScheduleChangeUntilMediaEndEvent')
        && state.properties.hasOwnProperty('language')
        && state.properties.hasOwnProperty('languageKey')
        && state.properties.hasOwnProperty('flipCoordinates')
        && state.properties.hasOwnProperty('inactivityTimeout')
        && state.properties.hasOwnProperty('inactivityTime')
        && state.properties.hasOwnProperty('touchCursorDisplayMode')
        && state.properties.hasOwnProperty('udpDestinationAddressType')
        && state.properties.hasOwnProperty('udpDestinationAddress')
        && state.properties.hasOwnProperty('udpDestinationPort')
        && state.properties.hasOwnProperty('udpReceiverPort')
        && state.hasOwnProperty('serialPortConfigurations')
        && state.hasOwnProperty('gpio')
        && state.hasOwnProperty('buttonPanels')
        && state.hasOwnProperty('audioSignPropertyMap');
};
var isValidZoneState = function (state) {
    return typeof state === 'object'
        && state.hasOwnProperty('zonesById')
        && typeof state.zonesById === 'object'
        && state.hasOwnProperty('allZones')
        && Array.isArray(state.allZones)
        && state.allZones.length === Object.keys(state.zonesById).length;
};
var isValidMediaStateState = function (state) {
    return typeof state === 'object';
};
var isValidEventState = function (state) {
    return typeof state === 'object';
};
var isValidTransitionState = function (state) {
    return typeof state === 'object';
};
var isValidAssetMapState = function (state) {
    return typeof state === 'object';
};
function dmCheckForInvalidDmSignState(state) {
    if (typeof state === 'object'
        && state.hasOwnProperty('sign')
        && isValidSignMetadataState(state.sign)
        && state.hasOwnProperty('zones')
        && isValidZoneState(state.zones)
        && state.hasOwnProperty('mediaStates')
        && isValidMediaStateState(state.mediaStates)
        && state.hasOwnProperty('events')
        && isValidEventState(state.events)
        && state.hasOwnProperty('transitions')
        && isValidTransitionState(state.transitions)
        && state.hasOwnProperty('assetMap')
        && isValidAssetMapState(state.assetMap)) {
        return null;
    }
    else {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidSign, 'DmState structure is invalid');
    }
}
exports.dmCheckForInvalidDmSignState = dmCheckForInvalidDmSignState;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(39), exports);
__exportStar(__webpack_require__(67), exports);
__exportStar(__webpack_require__(26), exports);
__exportStar(__webpack_require__(106), exports);
__exportStar(__webpack_require__(35), exports);
__exportStar(__webpack_require__(68), exports);
__exportStar(__webpack_require__(40), exports);
__exportStar(__webpack_require__(59), exports);
__exportStar(__webpack_require__(60), exports);
__exportStar(__webpack_require__(61), exports);
__exportStar(__webpack_require__(47), exports);
__exportStar(__webpack_require__(74), exports);
__exportStar(__webpack_require__(62), exports);
__exportStar(__webpack_require__(63), exports);
__exportStar(__webpack_require__(107), exports);
__exportStar(__webpack_require__(69), exports);
__exportStar(__webpack_require__(48), exports);
__exportStar(__webpack_require__(49), exports);
__exportStar(__webpack_require__(108), exports);
__exportStar(__webpack_require__(109), exports);
__exportStar(__webpack_require__(41), exports);
__exportStar(__webpack_require__(36), exports);
__exportStar(__webpack_require__(17), exports);
__exportStar(__webpack_require__(70), exports);
__exportStar(__webpack_require__(42), exports);
__exportStar(__webpack_require__(105), exports);


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmUpdateVideoMode = exports.dmScaleSignRectangles = exports.dmVerifyAndOpenSign = exports.dmOpenSign = exports.dmClearSignWssDeviceSpec = exports.dmUpdateSignWssDeviceSpec = exports.dmUpdateSignAudioPropertyMap = exports.dmUpdateSignIrRemoteControl = exports.dmUpdateSignIrOutConfiguration = exports.dmUpdateSignIrInConfiguration = exports.dmUpdateSignButtonPanelMap = exports.dmUpdateSignGpio = exports.dmUpdateSignSerialPorts = exports.dmUpdateSignProperties = exports.dmNewSign = exports.SCALE_RECTANGLES = exports.OPEN_SIGN = exports.CLEAR_SIGN_WSS_DEVICE_SPEC = exports.UPDATE_SIGN_WSS_DEVICE_SPEC = exports.UPDATE_SIGN_AUDIO_CONFIG = exports.UPDATE_SIGN_IR_REMOTE_CONTROL = exports.UPDATE_SIGN_IR_OUT_CONFIG = exports.UPDATE_SIGN_IR_IN_CONFIG = exports.UPDATE_SIGN_BPMAP = exports.UPDATE_SIGN_GPIO = exports.UPDATE_SIGN_SERIAL_PORTS = exports.UPDATE_SIGN_PROPS = exports.NEW_SIGN = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmSign_1 = __webpack_require__(57);
var bsDmZone_1 = __webpack_require__(31);
var bsDmValidate_1 = __webpack_require__(50);
var bsDmStateUpdate_1 = __webpack_require__(83);
var actionBase_1 = __webpack_require__(8);
var actionCommand_1 = __webpack_require__(33);
var actionEvent_1 = __webpack_require__(20);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var main_1 = __webpack_require__(73);
var actionZone_1 = __webpack_require__(14);
exports.NEW_SIGN = 'DM_NEW_SIGN';
exports.UPDATE_SIGN_PROPS = 'DM_UPDATE_SIGN_PROPS';
exports.UPDATE_SIGN_SERIAL_PORTS = 'DM_UPDATE_SIGN_SERIAL_PORTS';
exports.UPDATE_SIGN_GPIO = 'DM_UPDATE_SIGN_GPIO';
exports.UPDATE_SIGN_BPMAP = 'DM_UPDATE_SIGN_BPMAP';
exports.UPDATE_SIGN_IR_IN_CONFIG = 'UPDATE_SIGN_IR_IN_CONFIG';
exports.UPDATE_SIGN_IR_OUT_CONFIG = 'UPDATE_SIGN_IR_OUT_CONFIG';
exports.UPDATE_SIGN_IR_REMOTE_CONTROL = 'UPDATE_SIGN_IR_REMOTE_CONTROL';
exports.UPDATE_SIGN_AUDIO_CONFIG = 'DM_UPDATE_SIGN_AUDIO_CONFIG';
exports.UPDATE_SIGN_WSS_DEVICE_SPEC = 'DM_UPDATE_SIGN_WSS_DEVICE_SPEC';
exports.CLEAR_SIGN_WSS_DEVICE_SPEC = 'DM_CLEAR_SIGN_WSS_DEVICE_SPEC';
exports.OPEN_SIGN = 'DM_OPEN_SIGN';
exports.SCALE_RECTANGLES = 'DM_SCALE_RECTANGLES';
function dmNewSign(name, mode, model) {
    var zoneLayerMap = bsDmZone_1.dmCreateDefaultSignZoneLayerMap(model, mode);
    return {
        type: exports.NEW_SIGN,
        payload: {
            signMetadata: bsDmSign_1.createDefaultSignState(utils_1.newBsDmId(), name.trim(), mode, model),
            zoneLayerMap: zoneLayerMap,
            zoneLayerSequence: bsDmZone_1.dmCreateDefaultSignZoneLayerSequence(zoneLayerMap),
        },
    };
}
exports.dmNewSign = dmNewSign;
function dmUpdateSignProperties(params) {
    if (!lodash_1.isNil(params.name)) {
        params.name = params.name.trim();
    }
    var payload = params;
    if (params.hasOwnProperty('id') && !utils_1.isValidGuidBsDmId(params.id)) {
        payload = __assign(__assign({}, params), { id: utils_1.newBsDmId() });
    }
    return {
        type: exports.UPDATE_SIGN_PROPS,
        payload: payload,
    };
}
exports.dmUpdateSignProperties = dmUpdateSignProperties;
function dmUpdateSignSerialPorts(params) {
    return {
        type: exports.UPDATE_SIGN_SERIAL_PORTS,
        payload: params,
    };
}
exports.dmUpdateSignSerialPorts = dmUpdateSignSerialPorts;
function dmUpdateSignGpio(params) {
    return function (dispatch, getState) {
        var _a;
        var isEventDeleteParams = function (deleteParams) {
            return deleteParams.hasOwnProperty('eventIds');
        };
        var mainAction = {
            type: exports.UPDATE_SIGN_GPIO,
            payload: params,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var invalidEventsAndCommands = bsDmValidate_1.dmGetGpioListIncompatibleEventsAndCommands(dmState, params.gpioList);
        if (invalidEventsAndCommands.eventIds.length > 0 || invalidEventsAndCommands.commandIds.length > 0) {
            var deleteParams = void 0;
            if (invalidEventsAndCommands.eventIds.length > 0) {
                deleteParams = actionEvent_1.dmGetEventDeleteParams(dmState, invalidEventsAndCommands.eventIds);
            }
            else {
                deleteParams = { commandIds: [] };
            }
            if (invalidEventsAndCommands.commandIds.length > 0) {
                (_a = deleteParams.commandIds).push.apply(_a, invalidEventsAndCommands.commandIds);
                deleteParams.commandIds = lodash_1.uniq(deleteParams.commandIds);
            }
            if (isEventDeleteParams(deleteParams)) {
                batchedActions.push(actionEvent_1.dmDeleteEventWithParams(deleteParams));
            }
            else {
                batchedActions.push(actionCommand_1.dmDeleteCommand(deleteParams.commandIds));
            }
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateSignGpio = dmUpdateSignGpio;
function dmUpdateSignButtonPanelMap(params) {
    return {
        type: exports.UPDATE_SIGN_BPMAP,
        payload: params,
    };
}
exports.dmUpdateSignButtonPanelMap = dmUpdateSignButtonPanelMap;
function dmUpdateSignIrInConfiguration(irInConfiguration) {
    return function (dispatch, getState) {
        var isEventDeleteParams = function (deleteParams) {
            return deleteParams.hasOwnProperty('eventIds');
        };
        var mainAction = {
            type: exports.UPDATE_SIGN_IR_IN_CONFIG,
            payload: irInConfiguration,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var invalidEventIds = bsDmValidate_1.dmGetIrRemoteInConfigurationIncompatibleEvents(dmState, irInConfiguration);
        if (invalidEventIds.length > 0) {
            var deleteParams = void 0;
            deleteParams = actionEvent_1.dmGetEventDeleteParams(dmState, invalidEventIds);
            if (isEventDeleteParams(deleteParams)) {
                batchedActions.push(actionEvent_1.dmDeleteEventWithParams(deleteParams));
            }
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateSignIrInConfiguration = dmUpdateSignIrInConfiguration;
function dmUpdateSignIrOutConfiguration(irOutConfiguration) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_SIGN_IR_OUT_CONFIG,
            payload: irOutConfiguration,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var invalidCommandIds = bsDmValidate_1.dmGetIrRemoteOutConfigurationIncompatibleCommands(dmState, irOutConfiguration);
        if (invalidCommandIds.length > 0) {
            batchedActions.push(actionCommand_1.dmDeleteCommand(invalidCommandIds));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateSignIrOutConfiguration = dmUpdateSignIrOutConfiguration;
function dmUpdateSignIrRemoteControl(irRemoteConfiguration) {
    return function (dispatch, getState) {
        var isEventDeleteParams = function (deleteParams) {
            return deleteParams.hasOwnProperty('eventIds');
        };
        var mainAction = {
            type: exports.UPDATE_SIGN_IR_REMOTE_CONTROL,
            payload: irRemoteConfiguration,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var invalidEventIds = bsDmValidate_1.dmGetIrRemoteIncompatibleEvents(dmState, irRemoteConfiguration);
        if (invalidEventIds.length > 0) {
            var deleteParams = void 0;
            deleteParams = actionEvent_1.dmGetEventDeleteParams(dmState, invalidEventIds);
            if (isEventDeleteParams(deleteParams)) {
                batchedActions.push(actionEvent_1.dmDeleteEventWithParams(deleteParams));
            }
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateSignIrRemoteControl = dmUpdateSignIrRemoteControl;
function dmUpdateSignAudioPropertyMap(params) {
    return {
        type: exports.UPDATE_SIGN_AUDIO_CONFIG,
        payload: params,
    };
}
exports.dmUpdateSignAudioPropertyMap = dmUpdateSignAudioPropertyMap;
function dmUpdateSignWssDeviceSpec(wssDeviceSpec) {
    return {
        type: exports.UPDATE_SIGN_WSS_DEVICE_SPEC,
        payload: wssDeviceSpec,
    };
}
exports.dmUpdateSignWssDeviceSpec = dmUpdateSignWssDeviceSpec;
function dmClearSignWssDeviceSpec() {
    return {
        type: exports.CLEAR_SIGN_WSS_DEVICE_SPEC,
        payload: null,
    };
}
exports.dmClearSignWssDeviceSpec = dmClearSignWssDeviceSpec;
function dmOpenSign(newState) {
    return {
        type: exports.OPEN_SIGN,
        payload: { newState: bsDmStateUpdate_1.dmUpdateSignStateForVersionChanges(newState) },
    };
}
exports.dmOpenSign = dmOpenSign;
function dmVerifyAndOpenSign(newState) {
    return function (dispatch) {
        var stateError = bsDmState_1.dmCheckForInvalidDmSignState(newState);
        if (!lodash_1.isNil(stateError)) {
            stateError.attachAction({ type: exports.OPEN_SIGN, payload: { newState: newState } });
            throw stateError;
        }
        return dispatch(dmOpenSign(newState));
    };
}
exports.dmVerifyAndOpenSign = dmVerifyAndOpenSign;
function dmScaleSignRectangles(increase, scaleFactorX, scaleFactorY) {
    return {
        type: exports.SCALE_RECTANGLES,
        payload: {
            increase: increase,
            scaleFactorX: scaleFactorX,
            scaleFactorY: lodash_1.isNil(scaleFactorY) ? scaleFactorX : scaleFactorY,
        },
    };
}
exports.dmScaleSignRectangles = dmScaleSignRectangles;
function dmUpdateVideoMode(targetVideoMode) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var model = main_1.dmGetSignPlayerModel(dmState);
        if (main_1.dmCanChangeVideoMode(dmState, { videoMode: targetVideoMode })) {
            var batchedActions = [];
            var zoneUpdateAction = actionZone_1.dmGetZoneUpdateVideoModeAction(targetVideoMode, dmState);
            if (!lodash_1.isNil(zoneUpdateAction)) {
                batchedActions.push(zoneUpdateAction);
            }
            var fullResGraphicsEnabled = main_1.dmIsFullResGraphicsEnabled(dmState);
            if (!bscore_1.bscIsFullResGraphicsSupported(model, targetVideoMode)) {
                fullResGraphicsEnabled = false;
            }
            var mainAction = dmUpdateSignProperties({ id: bsDmInterfaces_1.BsDmIdNone, videoMode: targetVideoMode, fullResGraphicsEnabled: fullResGraphicsEnabled });
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
        }
        else {
            throw new main_1.BsDmError(main_1.DmErrorType.invalidOperation, "UpdateVideoMode: Cannot update video mode for this model");
        }
    };
}
exports.dmUpdateVideoMode = dmUpdateVideoMode;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetActionDispatchList = exports.dmBatchActions = exports.BSDM_BATCH = exports.bsdmThunk = void 0;
var redux_thunk_1 = __webpack_require__(110);
var lodash_1 = __webpack_require__(0);
exports.bsdmThunk = redux_thunk_1.default;
exports.BSDM_BATCH = 'BSDM_BATCH';
function dmBatchActions(actions) {
    return { type: exports.BSDM_BATCH, payload: actions };
}
exports.dmBatchActions = dmBatchActions;
function dmGetActionDispatchList(action) {
    if (!lodash_1.isNil(action.meta) && !lodash_1.isNil(action.meta.dispatchList)) {
        return action.meta.dispatchList;
    }
    return [action];
}
exports.dmGetActionDispatchList = dmGetActionDispatchList;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCreateLiveTextContentItem = exports.dmContentItemIsEventHandlerContentItem = exports.dmCreateEventHandlerContentItem = exports.dmContentItemIsMediaListOrPlayFileContentItem = exports.dmContentItemIsPlayFileContentItem = exports.dmCreatePlayFileContentItem = exports.dmContentItemIsLocalPlaylistItem = exports.dmContentItemIsLocalPlaylistContentItem = exports.dmCreateLocalPlaylistContentItem = exports.dmCreateLocalPlaylistItem = exports.dmContentItemIsMediaListContentItem = exports.dmCreateMediaListContentItem = exports.dmContentItemIsStreamContentItem = exports.dmContentItemIsMjpegStreamContentItem = exports.dmCreateMjpegStreamContentItem = exports.dmContentItemIsAudioStreamContentItem = exports.dmCreateAudioStreamContentItem = exports.dmContentItemIsVideoStreamContentItem = exports.dmCreateVideoStreamContentItem = exports.dmContentItemIsUserVariableContentItem = exports.dmCreateUserVariableContentItem = exports.dmContentItemIsTwitterFeedContentItem = exports.dmCreateTwitterFeedContentItem = exports.dmContentItemIsAnyDataFeedContentItem = exports.dmContentItemIsMrssDataFeedContentItem = exports.dmCreateMrssDataFeedContentItem = exports.dmContentItemIsTextFeedContentItem = exports.dmCreateDataFeedContentItem = exports.dmContentItemIsLiveVideoContentItem = exports.dmCreateLiveVideoContentItem = exports.dmContentItemIsHtmlContentItem = exports.dmCreateHtmlContentItem = exports.dmContentItemIsImageContentItem = exports.dmCreateImageContentItem = exports.dmContentItemIsAudioContentItem = exports.dmCreateAudioContentItem = exports.dmContentItemIsVideoContentItem = exports.dmCreateVideoContentItem = exports.dmContentItemIsMediaSequenceContentItem = exports.dmContentItemIsMediaContentItem = exports.MediaContentItemTypeSet = exports.dmCreatePlayFileItemFromMediaContentItem = exports.dmCreateMediaContentItem = exports.dmIsContentItem = exports.dmGetWidgetCustomFontAssetId = exports.dmCreateAssetItemFromLocalFile = exports.dmIsMediaStateBasedContainer = exports.dmIsMediaSequenceContainer = exports.dmGetMediaStateContainer = exports.dmGetZoneMediaStateContainer = void 0;
exports.dmFilterPlayFileItemContentItemData = exports.dmFilterContentItemData = exports.dmIsValidContentItemTypeForPlaylistChangeZoneType = exports.dmIsValidContentItemTypeForMediaListOrPlayFile = exports.dmIsValidContentItemTypeForPlaylist = exports.dmIsValidContentItemForPlaylist = exports.dmIsValidContentItemTypeForMosaicZone = exports.dmIsValidContentItemTypeForZone = exports.dmIsValidContentItemForZone = exports.dmContentItemIsSuperStateContentItem = exports.dmCreateSuperStateContentItem = exports.dmContentItemIsDateContentItem = exports.dmCreateDateContentItem = exports.dmContentItemIsTimeContentItem = exports.dmCreateTimeContentItem = exports.dmContentItemIsLiveTextContentItem = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmDefaults_1 = __webpack_require__(19);
var lodash_1 = __webpack_require__(0);
function dmGetZoneMediaStateContainer(zoneId) {
    return {
        id: zoneId,
        type: bsDmInterfaces_1.MediaStateContainerType.Zone,
    };
}
exports.dmGetZoneMediaStateContainer = dmGetZoneMediaStateContainer;
function dmGetMediaStateContainer(id, type) {
    return { id: id, type: type };
}
exports.dmGetMediaStateContainer = dmGetMediaStateContainer;
function dmIsMediaSequenceContainer(container) {
    return container.type === bsDmInterfaces_1.MediaStateContainerType.MediaList
        || container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile
        || container.type === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist;
}
exports.dmIsMediaSequenceContainer = dmIsMediaSequenceContainer;
function dmIsMediaStateBasedContainer(container) {
    return container.type === bsDmInterfaces_1.MediaStateContainerType.MediaList
        || container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile
        || container.type === bsDmInterfaces_1.MediaStateContainerType.SuperState
        || container.type === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist;
}
exports.dmIsMediaStateBasedContainer = dmIsMediaStateBasedContainer;
function dmCreateAssetItemFromLocalFile(fullPath, id, mediaType, assetType) {
    if (id === void 0) { id = bscore_1.BsAssetIdNone; }
    if (mediaType === void 0) { mediaType = null; }
    if (assetType === void 0) { assetType = null; }
    var name = fullPath.replace(/^.*[\\\/]/, '');
    var path = fullPath.substr(0, fullPath.length - name.length);
    var fileTypeInfo;
    if (mediaType) {
        fileTypeInfo = { assetType: bscore_1.AssetType.Content, mediaType: mediaType };
    }
    else {
        fileTypeInfo = bscore_1.bscGetBscFileTypeInfo(name);
    }
    var assetItem = {
        id: id,
        name: name,
        path: path,
        networkId: 0,
        location: bscore_1.AssetLocation.Local,
        locator: bscore_1.bscGetLocalAssetLocatorKey(fullPath),
        assetType: assetType ? assetType : fileTypeInfo.assetType,
        scope: '',
    };
    if (assetItem.assetType === bscore_1.AssetType.Content) {
        assetItem.mediaType = fileTypeInfo.mediaType;
    }
    return assetItem;
}
exports.dmCreateAssetItemFromLocalFile = dmCreateAssetItemFromLocalFile;
function dmGetWidgetCustomFontAssetId(widget) {
    return !lodash_1.isNil(widget) && !lodash_1.isNil(widget.font)
        && widget.font !== bsDmInterfaces_1.DmDefaultFontName && bscore_1.bscIsValidAssetId(widget.font) ? widget.font : null;
}
exports.dmGetWidgetCustomFontAssetId = dmGetWidgetCustomFontAssetId;
function dmIsContentItem(value) {
    return typeof value === 'object'
        && value.hasOwnProperty('name')
        && value.hasOwnProperty('type');
}
exports.dmIsContentItem = dmIsContentItem;
function dmCreateMediaContentItem(name, assetId, mediaType, props) {
    switch (mediaType) {
        case bscore_1.MediaType.Video:
            return dmCreateVideoContentItem(name, assetId, props);
        case bscore_1.MediaType.Audio:
            return dmCreateAudioContentItem(name, assetId, props);
        case bscore_1.MediaType.Image:
            return dmCreateImageContentItem(name, assetId, props);
        case bscore_1.MediaType.Text:
            return {
                name: name,
                type: bscore_1.ContentItemType.Text,
                assetId: assetId,
            };
        default:
            return null;
    }
}
exports.dmCreateMediaContentItem = dmCreateMediaContentItem;
function dmCreatePlayFileItemFromMediaContentItem(mediaContentItem, key, exportKey, name) {
    if (key === void 0) { key = null; }
    if (exportKey === void 0) { exportKey = true; }
    if (!lodash_1.isNil(mediaContentItem)) {
        if (lodash_1.isNil(key)) {
            key = bscore_1.bscStripFileExtension(mediaContentItem.name);
        }
        var label = lodash_1.isNil(name) ? mediaContentItem.name : name;
        switch (mediaContentItem.type) {
            case bscore_1.ContentItemType.Video:
                return __assign(__assign({}, mediaContentItem), { key: key, exportKey: exportKey, name: label });
            case bscore_1.ContentItemType.Image:
                return __assign(__assign({}, mediaContentItem), { key: key, exportKey: exportKey, name: label });
            case bscore_1.ContentItemType.Audio:
                return __assign(__assign({}, mediaContentItem), { key: key, exportKey: exportKey, name: label });
        }
    }
    return null;
}
exports.dmCreatePlayFileItemFromMediaContentItem = dmCreatePlayFileItemFromMediaContentItem;
exports.MediaContentItemTypeSet = new Set([
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.Image, bscore_1.ContentItemType.Audio, bscore_1.ContentItemType.Text
]);
function dmContentItemIsMediaContentItem(contentItem) {
    return !lodash_1.isNil(contentItem)
        && contentItem.hasOwnProperty('assetId')
        && exports.MediaContentItemTypeSet.has(contentItem.type);
}
exports.dmContentItemIsMediaContentItem = dmContentItemIsMediaContentItem;
function dmContentItemIsMediaSequenceContentItem(contentItem) {
    return !lodash_1.isNil(contentItem)
        && (contentItem.type === bscore_1.ContentItemType.MediaList || contentItem.type === bscore_1.ContentItemType.PlayFile);
}
exports.dmContentItemIsMediaSequenceContentItem = dmContentItemIsMediaSequenceContentItem;
function dmCreateVideoContentItem(name, assetId, props) {
    if (props === void 0) { props = {}; }
    var defaults = bsDmDefaults_1.dmGetDefaultVideoContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.Video,
        assetId: assetId,
        volume: (props.volume === undefined ? defaults.volume : props.volume),
        videoDisplayMode: (props.videoDisplayMode === undefined ? defaults.videoDisplayMode : props.videoDisplayMode),
        automaticallyLoop: (props.automaticallyLoop === undefined ? defaults.automaticallyLoop : props.automaticallyLoop),
    };
}
exports.dmCreateVideoContentItem = dmCreateVideoContentItem;
function dmContentItemIsVideoContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Video;
}
exports.dmContentItemIsVideoContentItem = dmContentItemIsVideoContentItem;
function dmCreateAudioContentItem(name, assetId, props) {
    if (props === void 0) { props = {}; }
    var defaults = bsDmDefaults_1.dmGetDefaultAudioContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.Audio,
        assetId: assetId,
        volume: (props.volume === undefined ? defaults.volume : props.volume),
    };
}
exports.dmCreateAudioContentItem = dmCreateAudioContentItem;
function dmContentItemIsAudioContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Audio;
}
exports.dmContentItemIsAudioContentItem = dmContentItemIsAudioContentItem;
function dmCreateImageContentItem(name, assetId, props) {
    if (props === void 0) { props = {}; }
    var defaults = bsDmDefaults_1.dmGetDefaultImageContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.Image,
        assetId: assetId,
        useImageBuffer: (props.useImageBuffer === undefined ? defaults.useImageBuffer : props.useImageBuffer),
        videoPlayerRequired: (props.videoPlayerRequired === undefined ?
            defaults.videoPlayerRequired : props.videoPlayerRequired),
        defaultTransition: (props.defaultTransition === undefined ? defaults.defaultTransition : props.defaultTransition),
        transitionDuration: (props.transitionDuration === undefined ?
            defaults.transitionDuration : props.transitionDuration),
    };
}
exports.dmCreateImageContentItem = dmCreateImageContentItem;
function dmContentItemIsImageContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Image;
}
exports.dmContentItemIsImageContentItem = dmContentItemIsImageContentItem;
function dmCreateHtmlContentItem(name, siteId) {
    var params = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        params[_i - 2] = arguments[_i];
    }
    var props = params.length === 0 || lodash_1.isNil(params[0]) || typeof params[0] === 'boolean' ?
        {} : params[0];
    if (params.length > 0 && typeof params[0] === 'boolean') {
        params.forEach(function (param, index) { return props[bsDmInterfaces_1.DmHtmlContentItemDataNameArray[index]] = param; });
    }
    var defaults = bsDmDefaults_1.dmGetDefaultHtmlContentItemData();
    var contentItemData = {
        enableBrightSignJavascriptObjects: (lodash_1.isNil(props.enableBrightSignJavascriptObjects) ?
            defaults.enableBrightSignJavascriptObjects : props.enableBrightSignJavascriptObjects),
        enableCrossDomainPolicyChecks: (lodash_1.isNil(props.enableCrossDomainPolicyChecks) ?
            defaults.enableCrossDomainPolicyChecks : props.enableCrossDomainPolicyChecks),
        ignoreHttpsCertificateErrors: (lodash_1.isNil(props.ignoreHttpsCertificateErrors) ?
            defaults.ignoreHttpsCertificateErrors : props.ignoreHttpsCertificateErrors),
        enableCamera: (lodash_1.isNil(props.enableCamera) ? defaults.enableCamera : props.enableCamera),
        enableMouseEvents: (lodash_1.isNil(props.enableMouseEvents) ? defaults.enableMouseEvents : props.enableMouseEvents),
        displayCursor: (lodash_1.isNil(props.displayCursor) ? defaults.displayCursor : props.displayCursor),
        hwzOn: (lodash_1.isNil(props.hwzOn) ? defaults.hwzOn : props.hwzOn),
        useUserStylesheet: (lodash_1.isNil(props.userStylesheetAssetId) ?
            defaults.useUserStylesheet : (lodash_1.isNil(props.useUserStylesheet) ? false : props.useUserStylesheet)),
    };
    if (contentItemData.useUserStylesheet) {
        contentItemData.userStylesheetAssetId = !lodash_1.isNil(props.userStylesheetAssetId) ?
            props.userStylesheetAssetId : bscore_1.BsAssetIdNone;
    }
    if (!lodash_1.isNil(props.customFonts)) {
        contentItemData.customFonts = props.customFonts;
    }
    return Object.assign({ name: name, type: bscore_1.ContentItemType.Html, siteId: siteId }, contentItemData);
}
exports.dmCreateHtmlContentItem = dmCreateHtmlContentItem;
function dmContentItemIsHtmlContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Html;
}
exports.dmContentItemIsHtmlContentItem = dmContentItemIsHtmlContentItem;
function dmCreateLiveVideoContentItem(name) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    var props = params.length === 0 || lodash_1.isNil(params[0]) || typeof params[0] === 'number' ?
        {} : params[0];
    if (params.length > 0 && typeof params[0] === 'number') {
        params.forEach(function (param, index) { return props[bsDmInterfaces_1.DmLiveVideoContentItemDataNameArray[index]] = param; });
    }
    var defaults = bsDmDefaults_1.dmGetDefaultLiveVideoContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.LiveVideo,
        volume: (props.volume === undefined ? defaults.volume : props.volume),
        overscan: (props.overscan === undefined ? defaults.overscan : props.overscan),
    };
}
exports.dmCreateLiveVideoContentItem = dmCreateLiveVideoContentItem;
function dmContentItemIsLiveVideoContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.LiveVideo;
}
exports.dmContentItemIsLiveVideoContentItem = dmContentItemIsLiveVideoContentItem;
function dmCreateDataFeedContentItem(name, dataFeedId) {
    return {
        name: name,
        type: bscore_1.ContentItemType.DataFeed,
        dataFeedId: dataFeedId,
    };
}
exports.dmCreateDataFeedContentItem = dmCreateDataFeedContentItem;
function dmContentItemIsTextFeedContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.DataFeed;
}
exports.dmContentItemIsTextFeedContentItem = dmContentItemIsTextFeedContentItem;
function dmCreateMrssDataFeedContentItem(name, dataFeedId, videoPlayerRequired) {
    var defaults = bsDmDefaults_1.dmGetDefaultMrssDataFeedContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.MrssFeed,
        dataFeedId: dataFeedId,
        videoPlayerRequired: (videoPlayerRequired === undefined ? defaults.videoPlayerRequired : videoPlayerRequired),
    };
}
exports.dmCreateMrssDataFeedContentItem = dmCreateMrssDataFeedContentItem;
function dmContentItemIsMrssDataFeedContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.MrssFeed;
}
exports.dmContentItemIsMrssDataFeedContentItem = dmContentItemIsMrssDataFeedContentItem;
function dmContentItemIsAnyDataFeedContentItem(contentItem) {
    return !lodash_1.isNil(contentItem)
        && (contentItem.type === bscore_1.ContentItemType.DataFeed
            || contentItem.type === bscore_1.ContentItemType.MrssFeed
            || contentItem.type === bscore_1.ContentItemType.LocalPlaylistItem);
}
exports.dmContentItemIsAnyDataFeedContentItem = dmContentItemIsAnyDataFeedContentItem;
function dmCreateTwitterFeedContentItem(name, props) {
    var defaults = bsDmDefaults_1.dmGetDefaultTwitterFeedContentItemData();
    return {
        name: lodash_1.isNil(name) ? '' : name,
        type: bscore_1.ContentItemType.TwitterFeed,
        userName: (props.userName === undefined ? defaults.userName : props.userName),
        updateInterval: (props.updateInterval === undefined ? defaults.updateInterval : props.updateInterval),
        restrictNumberOfTweets: (props.restrictNumberOfTweets === undefined ? defaults.restrictNumberOfTweets : props.restrictNumberOfTweets),
        numberOfTweetsToShow: (props.numberOfTweetsToShow === undefined ? defaults.numberOfTweetsToShow : props.numberOfTweetsToShow),
        numberOfRecentDaysForTweets: (props.numberOfRecentDaysForTweets === undefined ?
            defaults.numberOfRecentDaysForTweets : props.numberOfRecentDaysForTweets),
        authToken: props.authToken,
        encryptedTwitterSecrets: props.encryptedTwitterSecrets,
    };
}
exports.dmCreateTwitterFeedContentItem = dmCreateTwitterFeedContentItem;
function dmContentItemIsTwitterFeedContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.TwitterFeed;
}
exports.dmContentItemIsTwitterFeedContentItem = dmContentItemIsTwitterFeedContentItem;
function dmCreateUserVariableContentItem(name, userVariableId) {
    return {
        name: lodash_1.isNil(name) ? '' : name,
        type: bscore_1.ContentItemType.UserVariable,
        userVariableId: userVariableId,
    };
}
exports.dmCreateUserVariableContentItem = dmCreateUserVariableContentItem;
function dmContentItemIsUserVariableContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.UserVariable;
}
exports.dmContentItemIsUserVariableContentItem = dmContentItemIsUserVariableContentItem;
function dmCreateVideoStreamContentItem(name, url, param) {
    var defaults = bsDmDefaults_1.dmGetDefaultVideoStreamContentItemData();
    var volume = lodash_1.isNil(param) ? defaults.volume :
        (typeof param === 'number' ? param : (lodash_1.isNil(param.volume) ? defaults.volume : param.volume));
    return {
        name: name,
        type: bscore_1.ContentItemType.VideoStream,
        url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(url),
        volume: volume,
    };
}
exports.dmCreateVideoStreamContentItem = dmCreateVideoStreamContentItem;
function dmContentItemIsVideoStreamContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.VideoStream;
}
exports.dmContentItemIsVideoStreamContentItem = dmContentItemIsVideoStreamContentItem;
function dmCreateAudioStreamContentItem(name, url, param) {
    var defaults = bsDmDefaults_1.dmGetDefaultAudioStreamContentItemData();
    var volume = lodash_1.isNil(param) ? defaults.volume :
        (typeof param === 'number' ? param : (lodash_1.isNil(param.volume) ? defaults.volume : param.volume));
    return {
        name: name,
        type: bscore_1.ContentItemType.AudioStream,
        url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(url),
        volume: volume,
    };
}
exports.dmCreateAudioStreamContentItem = dmCreateAudioStreamContentItem;
function dmContentItemIsAudioStreamContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.AudioStream;
}
exports.dmContentItemIsAudioStreamContentItem = dmContentItemIsAudioStreamContentItem;
function dmCreateMjpegStreamContentItem(name, url, rotation) {
    var defaults = bsDmDefaults_1.dmGetDefaultMjpegStreamContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.MjpegStream,
        url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(url),
        rotation: (rotation === undefined ? defaults.rotation : rotation),
    };
}
exports.dmCreateMjpegStreamContentItem = dmCreateMjpegStreamContentItem;
function dmContentItemIsMjpegStreamContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.MjpegStream;
}
exports.dmContentItemIsMjpegStreamContentItem = dmContentItemIsMjpegStreamContentItem;
function dmContentItemIsStreamContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) &&
        (contentItem.type === bscore_1.ContentItemType.VideoStream
            || contentItem.type === bscore_1.ContentItemType.AudioStream
            || contentItem.type === bscore_1.ContentItemType.MjpegStream);
}
exports.dmContentItemIsStreamContentItem = dmContentItemIsStreamContentItem;
function dmCreateMediaListContentItem(name, props) {
    if (props === void 0) { props = {}; }
    var defaults = bsDmDefaults_1.dmGetDefaultMediaListContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.MediaList,
        playbackType: lodash_1.isUndefined(props.playbackType) ? defaults.playbackType : props.playbackType,
        startIndex: lodash_1.isUndefined(props.startIndex) ? 0 : props.startIndex,
        shuffle: lodash_1.isUndefined(props.shuffle) ? defaults.shuffle : props.shuffle,
        support4KImage: lodash_1.isUndefined(props.support4KImage) ? defaults.support4KImage : props.support4KImage,
        sendMediaZoneMessage: lodash_1.isUndefined(props.sendMediaZoneMessage) ?
            defaults.sendMediaZoneMessage : props.sendMediaZoneMessage,
        useDataFeed: lodash_1.isUndefined(props.useDataFeed) ? false : props.useDataFeed,
        dataFeedId: bsDmInterfaces_1.BsDmIdNone,
        transition: lodash_1.isUndefined(props.transition) ? defaults.transition : props.transition,
        transitionDuration: lodash_1.isUndefined(props.transitionDuration) ? defaults.transitionDuration : props.transitionDuration,
        autoTransitions: lodash_1.isUndefined(props.autoTransitions) ? defaults.autoTransitions : props.autoTransitions,
        inactivityTimeout: lodash_1.isUndefined(props.inactivityTimeout) ? defaults.inactivityTimeout : props.inactivityTimeout,
        inactivityTime: lodash_1.isUndefined(props.inactivityTime) ? defaults.inactivityTime : props.inactivityTime,
    };
}
exports.dmCreateMediaListContentItem = dmCreateMediaListContentItem;
function dmContentItemIsMediaListContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.MediaList;
}
exports.dmContentItemIsMediaListContentItem = dmContentItemIsMediaListContentItem;
function dmCreateLocalPlaylistItem(contentItem, contentData) {
    var serialNumber = lodash_1.isNil(contentData) ? '' : contentData.serialNumber;
    return {
        name: contentItem.name + '-' + serialNumber,
        type: bscore_1.ContentItemType.LocalPlaylistItem,
        serialNumber: serialNumber,
        dataFeedId: contentItem.defaultDataFeedId,
        videoPlayerRequired: true,
    };
}
exports.dmCreateLocalPlaylistItem = dmCreateLocalPlaylistItem;
function dmCreateLocalPlaylistContentItem(name) {
    return {
        name: name,
        type: bscore_1.ContentItemType.LocalPlaylist,
        defaultDataFeedId: bsDmInterfaces_1.BsDmIdNone,
    };
}
exports.dmCreateLocalPlaylistContentItem = dmCreateLocalPlaylistContentItem;
function dmContentItemIsLocalPlaylistContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.LocalPlaylist;
}
exports.dmContentItemIsLocalPlaylistContentItem = dmContentItemIsLocalPlaylistContentItem;
function dmContentItemIsLocalPlaylistItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.LocalPlaylistItem;
}
exports.dmContentItemIsLocalPlaylistItem = dmContentItemIsLocalPlaylistItem;
function dmCreatePlayFileContentItem(name, props) {
    if (props === void 0) { props = {}; }
    var defaults = bsDmDefaults_1.dmGetDefaultPlayFileContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.PlayFile,
        triggerType: lodash_1.isUndefined(props.triggerType) ? defaults.triggerType : props.triggerType,
        useDefaultMedia: lodash_1.isUndefined(props.useDefaultMedia) ? defaults.useDefaultMedia : props.useDefaultMedia,
        defaultMediaId: bscore_1.BsAssetIdNone,
        userVariableIdOrName: lodash_1.isUndefined(props.userVariableIdOrName) ? '' : props.userVariableIdOrName,
        useDataFeed: lodash_1.isUndefined(props.useDataFeed) ? false : props.useDataFeed,
        dataFeedId: bsDmInterfaces_1.BsDmIdNone,
    };
}
exports.dmCreatePlayFileContentItem = dmCreatePlayFileContentItem;
function dmContentItemIsPlayFileContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.PlayFile;
}
exports.dmContentItemIsPlayFileContentItem = dmContentItemIsPlayFileContentItem;
function dmContentItemIsMediaListOrPlayFileContentItem(contentItem) {
    return !lodash_1.isNil(contentItem)
        && (contentItem.type === bscore_1.ContentItemType.MediaList
            || contentItem.type === bscore_1.ContentItemType.PlayFile);
}
exports.dmContentItemIsMediaListOrPlayFileContentItem = dmContentItemIsMediaListOrPlayFileContentItem;
function dmCreateEventHandlerContentItem(name, stopPlayback) {
    var defaults = bsDmDefaults_1.dmGetDefaultEventHandlerContentItemData();
    return {
        name: name,
        type: bscore_1.ContentItemType.EventHandler,
        stopPlayback: stopPlayback === undefined ? defaults.stopPlayback : stopPlayback,
    };
}
exports.dmCreateEventHandlerContentItem = dmCreateEventHandlerContentItem;
function dmContentItemIsEventHandlerContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.EventHandler;
}
exports.dmContentItemIsEventHandlerContentItem = dmContentItemIsEventHandlerContentItem;
function dmCreateLiveTextContentItem(name, canvasId) {
    return {
        name: name,
        type: bscore_1.ContentItemType.LiveText,
        canvasId: canvasId,
    };
}
exports.dmCreateLiveTextContentItem = dmCreateLiveTextContentItem;
function dmContentItemIsLiveTextContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.LiveText;
}
exports.dmContentItemIsLiveTextContentItem = dmContentItemIsLiveTextContentItem;
function dmCreateTimeContentItem(name) {
    return { name: name, type: bscore_1.ContentItemType.Time };
}
exports.dmCreateTimeContentItem = dmCreateTimeContentItem;
function dmContentItemIsTimeContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Time;
}
exports.dmContentItemIsTimeContentItem = dmContentItemIsTimeContentItem;
function dmCreateDateContentItem(name) {
    return { name: name, type: bscore_1.ContentItemType.Date };
}
exports.dmCreateDateContentItem = dmCreateDateContentItem;
function dmContentItemIsDateContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.Date;
}
exports.dmContentItemIsDateContentItem = dmContentItemIsDateContentItem;
function dmCreateSuperStateContentItem(name) {
    return {
        name: name,
        type: bscore_1.ContentItemType.SuperState,
        initialMediaStateId: bsDmInterfaces_1.BsDmIdNone,
    };
}
exports.dmCreateSuperStateContentItem = dmCreateSuperStateContentItem;
function dmContentItemIsSuperStateContentItem(contentItem) {
    return !lodash_1.isNil(contentItem) && contentItem.type === bscore_1.ContentItemType.SuperState;
}
exports.dmContentItemIsSuperStateContentItem = dmContentItemIsSuperStateContentItem;
var VideoOrImagesZoneContentTypeArray = [
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.Image, bscore_1.ContentItemType.Audio,
    bscore_1.ContentItemType.Html, bscore_1.ContentItemType.MrssFeed, bscore_1.ContentItemType.LiveVideo,
    bscore_1.ContentItemType.VideoStream, bscore_1.ContentItemType.AudioStream, bscore_1.ContentItemType.MjpegStream,
    bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile, bscore_1.ContentItemType.EventHandler,
    bscore_1.ContentItemType.LiveText, bscore_1.ContentItemType.SuperState,
    bscore_1.ContentItemType.LocalPlaylist, bscore_1.ContentItemType.LocalPlaylistItem,
];
var VideoOrImagesZoneContentTypes = new Set(VideoOrImagesZoneContentTypeArray);
var VideoOnlyZoneContentTypeArray = [
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.LiveVideo,
    bscore_1.ContentItemType.VideoStream, bscore_1.ContentItemType.MjpegStream, bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile,
    bscore_1.ContentItemType.EventHandler, bscore_1.ContentItemType.SuperState,
];
var VideoOnlyZoneContentTypes = new Set(VideoOnlyZoneContentTypeArray);
var ImagesZoneContentTypeArray = [
    bscore_1.ContentItemType.Image, bscore_1.ContentItemType.Html, bscore_1.ContentItemType.MrssFeed,
    bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile, bscore_1.ContentItemType.EventHandler,
    bscore_1.ContentItemType.LiveText, bscore_1.ContentItemType.SuperState,
    bscore_1.ContentItemType.LocalPlaylist, bscore_1.ContentItemType.LocalPlaylistItem,
];
var ImagesZoneContentTypes = new Set(ImagesZoneContentTypeArray);
var AudioZoneContentTypeArray = [
    bscore_1.ContentItemType.Audio, bscore_1.ContentItemType.AudioStream, bscore_1.ContentItemType.MrssFeed,
    bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile, bscore_1.ContentItemType.EventHandler,
    bscore_1.ContentItemType.SuperState,
];
var AudioZoneContentTypes = new Set(AudioZoneContentTypeArray);
var EnhancedAudioZoneContentTypeArray = [
    bscore_1.ContentItemType.Audio, bscore_1.ContentItemType.MrssFeed, bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile,
    bscore_1.ContentItemType.EventHandler, bscore_1.ContentItemType.SuperState,
];
var EnhancedAudioZoneContentTypes = new Set(EnhancedAudioZoneContentTypeArray);
var TickerZoneContentTypeArray = [
    bscore_1.ContentItemType.Text, bscore_1.ContentItemType.DataFeed, bscore_1.ContentItemType.TwitterFeed, bscore_1.ContentItemType.UserVariable,
];
var TickerZoneContentTypes = new Set(TickerZoneContentTypeArray);
var ClockZoneContentTypeArray = [
    bscore_1.ContentItemType.Time, bscore_1.ContentItemType.Date,
];
var ClockZoneContentTypes = new Set(ClockZoneContentTypeArray);
var ControlZoneContentTypeArray = [
    bscore_1.ContentItemType.EventHandler, bscore_1.ContentItemType.SuperState,
];
var ControlZoneContentTypes = new Set(ControlZoneContentTypeArray);
function dmIsValidContentItemForZone(contentItem, zoneType) {
    return dmIsValidContentItemTypeForZone(contentItem.type, zoneType);
}
exports.dmIsValidContentItemForZone = dmIsValidContentItemForZone;
function dmIsValidContentItemTypeForZone(contentItemType, zoneType) {
    switch (zoneType) {
        case bscore_1.ZoneType.VideoOrImages:
            return VideoOrImagesZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.VideoOnly:
            return VideoOnlyZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Images:
            return ImagesZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.AudioOnly:
            return AudioZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.EnhancedAudio:
            return EnhancedAudioZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Ticker:
            return TickerZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Clock:
            return ClockZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.BackgroundImage:
            return contentItemType === bscore_1.ContentItemType.Image;
        case bscore_1.ZoneType.Control:
            return ControlZoneContentTypes.has(contentItemType);
    }
    return false;
}
exports.dmIsValidContentItemTypeForZone = dmIsValidContentItemTypeForZone;
function dmIsValidContentItemTypeForMosaicZone(contentItemType) {
    return VideoOrImagesZoneContentTypes.has(contentItemType) && contentItemType !== bscore_1.ContentItemType.LiveVideo;
}
exports.dmIsValidContentItemTypeForMosaicZone = dmIsValidContentItemTypeForMosaicZone;
var VideoOrImagesPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.Image, bscore_1.ContentItemType.Audio,
    bscore_1.ContentItemType.Html, bscore_1.ContentItemType.MrssFeed, bscore_1.ContentItemType.LiveVideo,
    bscore_1.ContentItemType.VideoStream, bscore_1.ContentItemType.AudioStream, bscore_1.ContentItemType.MjpegStream,
    bscore_1.ContentItemType.LocalPlaylist, bscore_1.ContentItemType.LocalPlaylistItem,
];
var VideoOrImagesPlaylistContentTypes = new Set(VideoOrImagesPlaylistContentTypeArray);
var VideoOnlyPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.LiveVideo,
    bscore_1.ContentItemType.VideoStream, bscore_1.ContentItemType.MjpegStream,
];
var VideoOnlyPlaylistContentTypes = new Set(VideoOnlyPlaylistContentTypeArray);
var ImagesPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Image, bscore_1.ContentItemType.Html, bscore_1.ContentItemType.MrssFeed,
    bscore_1.ContentItemType.LocalPlaylist, bscore_1.ContentItemType.LocalPlaylistItem,
];
var ImagesPlaylistContentTypes = new Set(ImagesPlaylistContentTypeArray);
var AudioPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Audio, bscore_1.ContentItemType.AudioStream, bscore_1.ContentItemType.MrssFeed,
];
var AudioPlaylistContentTypes = new Set(AudioPlaylistContentTypeArray);
var EnhancedAudioPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Audio, bscore_1.ContentItemType.MrssFeed,
];
var EnhancedAudioPlaylistContentTypes = new Set(EnhancedAudioPlaylistContentTypeArray);
var TickerPlaylistContentTypeArray = [
    bscore_1.ContentItemType.Text, bscore_1.ContentItemType.DataFeed, bscore_1.ContentItemType.TwitterFeed,
    bscore_1.ContentItemType.MrssFeed, bscore_1.ContentItemType.UserVariable,
];
var TickerPlaylistContentTypes = new Set(TickerPlaylistContentTypeArray);
function dmIsValidContentItemForPlaylist(contentItem, zoneType) {
    return dmIsValidContentItemTypeForPlaylist(contentItem.type, zoneType);
}
exports.dmIsValidContentItemForPlaylist = dmIsValidContentItemForPlaylist;
function dmIsValidContentItemTypeForPlaylist(contentItemType, zoneType) {
    switch (zoneType) {
        case bscore_1.ZoneType.VideoOrImages:
            return VideoOrImagesPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.VideoOnly:
            return VideoOnlyPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Images:
            return ImagesPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.AudioOnly:
            return AudioPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.EnhancedAudio:
            return EnhancedAudioPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Ticker:
            return TickerPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Clock:
            return ClockZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.BackgroundImage:
            return contentItemType === bscore_1.ContentItemType.Image;
        case bscore_1.ZoneType.Control:
            return false;
    }
    return false;
}
exports.dmIsValidContentItemTypeForPlaylist = dmIsValidContentItemTypeForPlaylist;
function dmIsValidContentItemTypeForMediaListOrPlayFile(contentItemType, zoneType) {
    return false;
}
exports.dmIsValidContentItemTypeForMediaListOrPlayFile = dmIsValidContentItemTypeForMediaListOrPlayFile;
function dmIsValidContentItemTypeForPlaylistChangeZoneType(contentItemType, zoneType, currentZoneType) {
    var noTickerZoneMrssFeed = true;
    if (currentZoneType === bscore_1.ZoneType.Ticker && contentItemType === bscore_1.ContentItemType.MrssFeed) {
        noTickerZoneMrssFeed = false;
    }
    switch (zoneType) {
        case bscore_1.ZoneType.VideoOrImages: {
            return VideoOrImagesPlaylistContentTypes.has(contentItemType) && noTickerZoneMrssFeed;
        }
        case bscore_1.ZoneType.VideoOnly: {
            return VideoOnlyPlaylistContentTypes.has(contentItemType) && noTickerZoneMrssFeed;
        }
        case bscore_1.ZoneType.Images: {
            return ImagesPlaylistContentTypes.has(contentItemType) && noTickerZoneMrssFeed;
        }
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            return AudioPlaylistContentTypes.has(contentItemType);
        case bscore_1.ZoneType.Ticker:
            return TickerPlaylistContentTypes.has(contentItemType) && contentItemType !== bscore_1.ContentItemType.MrssFeed;
        case bscore_1.ZoneType.Clock:
            return ClockZoneContentTypes.has(contentItemType);
        case bscore_1.ZoneType.BackgroundImage:
            return contentItemType === bscore_1.ContentItemType.Image;
        case bscore_1.ZoneType.Control:
            return ControlZoneContentTypes.has(contentItemType);
    }
    return false;
}
exports.dmIsValidContentItemTypeForPlaylistChangeZoneType = dmIsValidContentItemTypeForPlaylistChangeZoneType;
function dmFilterContentItemData(contentItemType, contentItemData) {
    if (!lodash_1.isNil(contentItemData)) {
        switch (contentItemType) {
            case bscore_1.ContentItemType.Video:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmVideoContentItemDataNameArray);
            case bscore_1.ContentItemType.Image:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmImageContentItemDataNameArray);
            case bscore_1.ContentItemType.Audio:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmAudioContentItemDataNameArray);
            case bscore_1.ContentItemType.Html:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmHtmlContentItemDataNameArray);
            case bscore_1.ContentItemType.LiveVideo:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmLiveVideoContentItemDataNameArray);
            case bscore_1.ContentItemType.MrssFeed:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmMrssDataFeedContentItemDataNameArray);
            case bscore_1.ContentItemType.TwitterFeed:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmTwitterFeedContentItemDataNameArray);
            case bscore_1.ContentItemType.VideoStream:
            case bscore_1.ContentItemType.AudioStream:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmStreamContentItemDataNameArray);
            case bscore_1.ContentItemType.MjpegStream:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmMjpegStreamContentItemDataNameArray);
            case bscore_1.ContentItemType.MediaList:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmMediaListContentItemDataNameArray);
            case bscore_1.ContentItemType.PlayFile:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmPlayFileContentItemDataNameArray);
            case bscore_1.ContentItemType.EventHandler:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmEventHandlerContentItemDataNameArray);
            case bscore_1.ContentItemType.LiveText:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmLiveTextContentItemDataNameArray);
            case bscore_1.ContentItemType.SuperState:
                return lodash_1.pick(contentItemData, bsDmInterfaces_1.DmSuperStateContentItemDataNameArray);
        }
    }
    return null;
}
exports.dmFilterContentItemData = dmFilterContentItemData;
var VideoPlayFileDataNameArray = bsDmInterfaces_1.DmVideoContentItemDataNameArray.concat(bsDmInterfaces_1.DmPlayFileItemDataNameArray);
var ImagePlayFileDataNameArray = bsDmInterfaces_1.DmImageContentItemDataNameArray.concat(bsDmInterfaces_1.DmPlayFileItemDataNameArray);
var AudioPlayFileDataNameArray = bsDmInterfaces_1.DmAudioContentItemDataNameArray.concat(bsDmInterfaces_1.DmPlayFileItemDataNameArray);
function dmFilterPlayFileItemContentItemData(contentItemType, contentItemData) {
    if (contentItemData) {
        switch (contentItemType) {
            case bscore_1.ContentItemType.Video:
                return lodash_1.pick(contentItemData, VideoPlayFileDataNameArray);
            case bscore_1.ContentItemType.Image:
                return lodash_1.pick(contentItemData, ImagePlayFileDataNameArray);
            case bscore_1.ContentItemType.Audio:
                return lodash_1.pick(contentItemData, AudioPlayFileDataNameArray);
        }
    }
    return null;
}
exports.dmFilterPlayFileItemContentItemData = dmFilterPlayFileItemContentItemData;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmUpdateDeviceWebPageAssetLocation = exports.dmUpdateAssetLocation = exports.dmUpdateAssetItem = exports.dmRemoveDuplicateAssetItems = exports.dmRemoveAssetItems = exports.dmPutAssetItem = exports.UPDATE_ASSET_ITEM = exports.REMOVE_ASSET_ITEMS = exports.REMOVE_DUPLICATE_ASSET_ITEMS = exports.PUT_ASSET_ITEM = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmHtmlSite_1 = __webpack_require__(37);
var bsDmLiveText_1 = __webpack_require__(28);
var selectors_1 = __webpack_require__(6);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionHtmlSite_1 = __webpack_require__(32);
var actionDeviceWebPage_1 = __webpack_require__(52);
var actionDataFeed_1 = __webpack_require__(21);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionNodeApp_1 = __webpack_require__(45);
var actionLiveText_1 = __webpack_require__(29);
var actionScriptPlugin_1 = __webpack_require__(46);
var actionParserPlugin_1 = __webpack_require__(54);
var actionVideoModePlugin_1 = __webpack_require__(56);
var actionLinkedPresentation_1 = __webpack_require__(53);
var actionAuxiliaryFile_1 = __webpack_require__(51);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
exports.PUT_ASSET_ITEM = 'DM_PUT_ASSET_ITEM';
exports.REMOVE_DUPLICATE_ASSET_ITEMS = 'DM_REMOVE_DUPLICATE_ASSET_ITEMS';
exports.REMOVE_ASSET_ITEMS = 'DM_REMOVE_ASSET_ITEMS';
exports.UPDATE_ASSET_ITEM = 'DM_UPDATE_ASSET_ITEM';
function dmPutAssetItem(assetItem) {
    var putAction = {
        type: exports.PUT_ASSET_ITEM,
        payload: __assign({}, assetItem),
    };
    if (!putAction.payload.locator) {
        putAction.payload.locator = bscore_1.bscGenerateAssetLocatorKey(assetItem);
    }
    if (!putAction.payload.id || putAction.payload.id === bscore_1.BsAssetIdNone) {
        putAction.payload.id = utils_1.newBsDmId();
    }
    if (putAction.payload.location === bscore_1.AssetLocation.Local && putAction.payload.assetType === bscore_1.AssetType.DeviceHtmlSite) {
        putAction.payload.assetType = bscore_1.AssetType.HtmlSite;
    }
    return putAction;
}
exports.dmPutAssetItem = dmPutAssetItem;
function dmRemoveAssetItems(id) {
    var assetIds = typeof id === 'string' ? [id] : id;
    return {
        type: exports.REMOVE_ASSET_ITEMS,
        payload: { assetIds: assetIds },
    };
}
exports.dmRemoveAssetItems = dmRemoveAssetItems;
function dmRemoveDuplicateAssetItems(id) {
    var assetIds = typeof id === 'string' ? [id] : id;
    return {
        type: exports.REMOVE_DUPLICATE_ASSET_ITEMS,
        payload: { assetIds: assetIds },
    };
}
exports.dmRemoveDuplicateAssetItems = dmRemoveDuplicateAssetItems;
function dmUpdateAssetItem(currentAsset, newAssetItem) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var currentAssetId = dmGetAssetIdForAsset(dmState, currentAsset);
        var existingAsset = selectors_1.dmGetAssetItemById(dmState, { id: currentAssetId });
        if (newAssetItem.location === bscore_1.AssetLocation.Local
            && (existingAsset.assetType === bscore_1.AssetType.DeviceHtmlSite || newAssetItem.assetType === bscore_1.AssetType.DeviceHtmlSite)) {
            newAssetItem.assetType = bscore_1.AssetType.HtmlSite;
        }
        else if (existingAsset.assetType !== newAssetItem.assetType) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'dmUpdateAssetItem: New AssetItem must have the same AssetType');
        }
        if (existingAsset.assetType === bscore_1.AssetType.Content) {
            if (existingAsset.mediaType !== newAssetItem.mediaType) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'dmUpdateAssetItem: New AssetItem must have the same MediaType');
            }
        }
        var newLocatorKey = bscore_1.bscGenerateAssetLocatorKey(newAssetItem);
        if (!newLocatorKey) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmUpdateAssetItem: New AssetLocator does not contain valid locator information');
        }
        var batchedActions = [];
        var filteredAssetItem = actionAssetHelper_1.dmGetFilteredAssetItem(newAssetItem);
        var assetItem = __assign(__assign({}, filteredAssetItem), { id: currentAssetId, locator: newLocatorKey, refCount: existingAsset.refCount });
        var dupAssetItemId = selectors_1.dmGetAssetIdByLocator(dmState, { locator: newLocatorKey });
        if (!lodash_1.isNil(dupAssetItemId) && dupAssetItemId !== currentAssetId) {
            batchedActions.push(dmRemoveDuplicateAssetItems(dupAssetItemId));
            var contentMediaStateIds = selectors_1.dmGetMediaStateIdsForProps(dmState, { contentItemType: Array.from(bsDmContentItems_1.MediaContentItemTypeSet) });
            contentMediaStateIds.forEach(function (id) {
                var mediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: id });
                if (bsDmContentItems_1.dmContentItemIsMediaContentItem(mediaStateState.contentItem)
                    && mediaStateState.contentItem.assetId === dupAssetItemId) {
                    batchedActions.push(actionMediaState_1.dmUpdateMediaStateContentItem(id, __assign(__assign({}, mediaStateState.contentItem), { assetId: currentAssetId })));
                    assetItem.refCount += 1;
                }
            });
            var playFileMediaStateIds = selectors_1.dmGetMediaStateIdsForProps(dmState, { contentItemType: bscore_1.ContentItemType.PlayFile });
            playFileMediaStateIds.forEach(function (id) {
                var mediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: id });
                if (mediaStateState.contentItem.defaultMediaId === dupAssetItemId) {
                    batchedActions.push(actionMediaState_1.dmUpdateMediaStateContentItem(id, __assign(__assign({}, mediaStateState.contentItem), { assetId: currentAssetId })));
                    assetItem.refCount += 1;
                }
            });
            var liveTextCanvasIds = selectors_1.dmGetLiveTextCanvasIdsForSign(dmState);
            liveTextCanvasIds.forEach(function (id) {
                var liveTextCanvasState = selectors_1.dmGetLiveTextCanvasStateById(dmState, { id: id });
                if (liveTextCanvasState.backgroundImageId === dupAssetItemId) {
                    batchedActions.push(actionLiveText_1.dmUpdateLiveTextCanvasBackgroundImageId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var liveTextItemIds = selectors_1.dmGetAllLiveTextItemIdsForSign(dmState);
            liveTextItemIds.forEach(function (id) {
                var liveTextItemState = selectors_1.dmGetLiveTextItemStateById(dmState, { id: id });
                if ((bsDmLiveText_1.dmIsLiveTextDataImageContent(liveTextItemState) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(liveTextItemState))
                    && liveTextItemState.assetId === dupAssetItemId) {
                    var data = { type: liveTextItemState.type, assetId: currentAssetId };
                    batchedActions.push(actionLiveText_1.dmDoUpdateLiveTextItem({ id: id, canvasId: liveTextItemState.canvasId, data: data }));
                    assetItem.refCount += 1;
                }
                if (bsDmLiveText_1.dmIsLiveTextDataTextContent(liveTextItemState)
                    && (liveTextItemState.widget.font === dupAssetItemId
                        || liveTextItemState.widget.backgroundBitmapAssetId === dupAssetItemId)) {
                    var widget = __assign({}, liveTextItemState.widget);
                    if (widget.font === dupAssetItemId) {
                        widget.font = currentAssetId;
                    }
                    else {
                        widget.backgroundBitmapAssetId = currentAssetId;
                    }
                    batchedActions.push(actionLiveText_1.dmDoUpdateLiveTextItem({ id: id, canvasId: liveTextItemState.canvasId, textProperties: { widget: widget } }));
                    assetItem.refCount += 1;
                }
            });
            var zoneIds = selectors_1.dmGetZonesForSign(dmState);
            zoneIds.forEach(function (id) {
                var zoneType = selectors_1.dmGetZoneTypeById(dmState, { id: id });
                if (zoneType === bscore_1.ZoneType.Ticker || zoneType === bscore_1.ZoneType.Clock) {
                    var currentProperties = selectors_1.dmGetZonePropertiesById(dmState, { id: id });
                    var widget = __assign({}, currentProperties.widget);
                    if (widget.backgroundBitmapAssetId === dupAssetItemId || widget.font === dupAssetItemId) {
                        if (widget.font === dupAssetItemId) {
                            widget.font = currentAssetId;
                        }
                        else {
                            widget.backgroundBitmapAssetId = currentAssetId;
                        }
                        batchedActions.push(actionZone_1.dmUpdateClockOrTickerZoneWidget(id, zoneType, widget));
                        assetItem.refCount += 1;
                    }
                }
            });
            var htmlSiteIds = selectors_1.dmGetHtmlSiteIdsForSign(dmState);
            htmlSiteIds.forEach(function (id) {
                var htmlSiteState = selectors_1.dmGetHtmlSiteStateById(dmState, { id: id });
                if (bsDmHtmlSite_1.dmHtmlSiteIsHostedHtmlSite(htmlSiteState) && htmlSiteState.indexAssetId === dupAssetItemId) {
                    batchedActions.push(actionHtmlSite_1.dmUpdateHtmlSiteWithoutAssetProcessing({ id: id, indexAssetId: currentAssetId }));
                    assetItem.refCount += 1;
                }
            });
            var nodeAppIds = selectors_1.dmGetNodeAppIdsForSign(dmState);
            nodeAppIds.forEach(function (id) {
                var nodeAppState = selectors_1.dmGetNodeAppStateById(dmState, { id: id });
                if (nodeAppState && nodeAppState.indexAssetId === dupAssetItemId) {
                    batchedActions.push(actionNodeApp_1.dmUpdateNodeAppWithoutAssetProcessing({ id: id, indexAssetId: currentAssetId }));
                    assetItem.refCount += 1;
                }
            });
            var deviceWebPageIds = selectors_1.dmGetDeviceWebPageIds(dmState);
            deviceWebPageIds.forEach(function (id) {
                var deviceWebPageState = selectors_1.dmGetDeviceWebPageStateById(dmState, { id: id });
                if (deviceWebPageState.indexAssetId === dupAssetItemId) {
                    batchedActions.push(actionDeviceWebPage_1.dmUpdateDeviceWebPageIndexAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var dataFeedSourceIds = selectors_1.dmGetDataFeedSourceIdsForSign(dmState);
            dataFeedSourceIds.forEach(function (id) {
                var feedSource = selectors_1.dmGetDataFeedSourceForFeedSourceId(dmState, { id: id });
                if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource) && feedSource.dataFeedAssetId === dupAssetItemId) {
                    batchedActions.push(actionDataFeed_1.dmUpdateDataFeedSource({ id: id, dataFeedAssetId: currentAssetId }));
                    assetItem.refCount += 1;
                }
            });
            var scriptPluginIds = selectors_1.dmGetScriptPluginIds(dmState);
            scriptPluginIds.forEach(function (id) {
                var plugin = selectors_1.dmGetScriptPluginStateById(dmState, { id: id });
                if (plugin.assetId === dupAssetItemId) {
                    batchedActions.push(actionScriptPlugin_1.dmUpdateBrightScriptPluginAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var parserPluginIds = selectors_1.dmGetParserPluginIds(dmState);
            parserPluginIds.forEach(function (id) {
                var plugin = selectors_1.dmGetParserPluginStateById(dmState, { id: id });
                if (plugin.assetId === dupAssetItemId) {
                    batchedActions.push(actionParserPlugin_1.dmUpdateParserBrightScriptPluginAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var videoModePluginIds = selectors_1.dmGetVideoModePluginIds(dmState);
            videoModePluginIds.forEach(function (id) {
                var plugin = selectors_1.dmGetVideoModePluginStateById(dmState, { id: id });
                if (plugin.assetId === dupAssetItemId) {
                    batchedActions.push(actionVideoModePlugin_1.dmUpdateVideoModeBrightScriptPluginAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var linkedPresentationIds = selectors_1.dmGetLinkedPresentationIds(dmState);
            linkedPresentationIds.forEach(function (id) {
                var presentation = selectors_1.dmGetLinkedPresentationStateById(dmState, { id: id });
                if (presentation.assetId === dupAssetItemId) {
                    batchedActions.push(actionLinkedPresentation_1.dmUpdateLinkedPresentationAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
            var auxFileIds = selectors_1.dmGetAuxiliaryFileIds(dmState);
            auxFileIds.forEach(function (id) {
                var auxFile = selectors_1.dmGetAuxiliaryFileStateById(dmState, { id: id });
                if (auxFile.assetId === dupAssetItemId) {
                    batchedActions.push(actionAuxiliaryFile_1.dmUpdateAuxiliaryFileAssetId(id, currentAssetId));
                    assetItem.refCount += 1;
                }
            });
        }
        var updateAction = {
            type: exports.UPDATE_ASSET_ITEM,
            payload: { assetItem: assetItem },
        };
        batchedActions.push(updateAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, updateAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateAssetItem = dmUpdateAssetItem;
exports.dmUpdateAssetLocation = dmUpdateAssetItem;
function dmUpdateDeviceWebPageAssetLocation(currentAsset, deviceWebPageAssetItem) {
    return function (dispatch, getState) {
        var updateAction = {
            type: exports.UPDATE_ASSET_ITEM,
            payload: { assetItem: deviceWebPageAssetItem },
        };
        if (deviceWebPageAssetItem.assetType !== bscore_1.AssetType.DeviceHtmlSite) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmUpdateDeviceWebPageAssetLocation: New AssetItem must be type DeviceHtmlSite', { action: updateAction });
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (currentAsset.assetType === bscore_1.AssetType.HtmlSite) {
            batchedActions.push(dmRemoveAssetItems(currentAsset.id));
        }
        deviceWebPageAssetItem.id = bscore_1.BsAssetIdNone;
        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, deviceWebPageAssetItem);
        batchedActions.push(dmPutAssetItem(assetItem));
        updateAction.payload.assetItem = assetItem;
        var deviceWebPageId = selectors_1.dmGetDeviceWebPageIdByAssetId(dmState, { id: currentAsset.id });
        if (!lodash_1.isNil(deviceWebPageId)) {
            batchedActions.push(actionDeviceWebPage_1.dmUpdateDeviceWebPageIndexAssetId(deviceWebPageId, assetItem.id));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, updateAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateDeviceWebPageAssetLocation = dmUpdateDeviceWebPageAssetLocation;
var dmGetAssetIdForAsset = function (dmState, asset) {
    var locator;
    if (bscore_1.bscIsAssetItem(asset) && lodash_1.isString(asset.locator) && asset.locator.length > 0) {
        locator = asset.locator;
    }
    else {
        locator = bscore_1.bscGenerateAssetLocatorKey(asset);
    }
    var assetId = selectors_1.dmGetAssetIdByLocator(dmState, { locator: locator });
    if (lodash_1.isNil(assetId)) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.assetNotFound, 'dmUpdateAssetItem: ' + locator);
    }
    return assetId;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmPasteMediaStateCopySet = exports.dmPreparePasteMediaStateAction = exports.dmDeleteMediaState = exports.dmDeleteMediaStateWithParams = exports.dmGetMediaStateDeleteParams = exports.dmUpdateMediaStatesContainers = exports.dmUpdateMediaStateContentItem = exports.doUpdateMediaState = exports.dmUpdateMediaState = exports.dmAddSequencedMediaStates = exports.dmAddLiveTextMediaState = exports.dmAddMediaState = exports.dmAddMediaStateWithContentItem = exports.dmContentIsAssetItem = exports.PASTE_MEDIA_STATES = exports.DELETE_MEDIA_STATE = exports.UPDATE_MEDIA_STATES_CONTAINERS = exports.UPDATE_MEDIA_STATE = exports.ADD_MEDIA_STATE_SEQUENCE = exports.ADD_SEQUENCED_MEDIA_STATE = exports.ADD_MEDIA_STATE = void 0;
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionEvent_1 = __webpack_require__(20);
var actionTransition_1 = __webpack_require__(25);
var actionHtmlSite_1 = __webpack_require__(32);
var actionDataFeed_1 = __webpack_require__(21);
var actionLiveText_1 = __webpack_require__(29);
var actionUserVariable_1 = __webpack_require__(34);
var actionZone_1 = __webpack_require__(14);
var bsDmCommands_1 = __webpack_require__(22);
exports.ADD_MEDIA_STATE = 'DM_ADD_MEDIA_STATE';
exports.ADD_SEQUENCED_MEDIA_STATE = 'DM_ADD_SEQUENCED_MEDIA_STATE';
exports.ADD_MEDIA_STATE_SEQUENCE = 'DM_ADD_MEDIA_STATE_SEQUENCE';
exports.UPDATE_MEDIA_STATE = 'DM_UPDATE_MEDIA_STATE';
exports.UPDATE_MEDIA_STATES_CONTAINERS = 'DM_UPDATE_MEDIA_STATES_CONTAINERS';
exports.DELETE_MEDIA_STATE = 'DM_DELETE_MEDIA_STATE';
exports.PASTE_MEDIA_STATES = 'DM_PASTE_MEDIA_STATES';
var dmContentIsAssetItem = function (content) {
    return bscore_1.bscIsAssetItem(content);
};
exports.dmContentIsAssetItem = dmContentIsAssetItem;
function dmAddMediaStateWithContentItem(name, container, contentItem, zoneId, tag, index) {
    if (tag === void 0) { tag = null; }
    var isSequenced = !lodash_1.isNil(index);
    var action = {
        type: isSequenced ? exports.ADD_SEQUENCED_MEDIA_STATE : exports.ADD_MEDIA_STATE,
        payload: {
            id: utils_1.newBsDmId(),
            name: name ? name : contentItem.name,
            tag: lodash_1.isNil(tag) ? '' : tag,
            container: container,
            contentItem: contentItem,
            zoneId: zoneId,
        },
    };
    if (isSequenced) {
        action.payload.index = index;
    }
    return action;
}
exports.dmAddMediaStateWithContentItem = dmAddMediaStateWithContentItem;
function dmAddMediaState(name, container, content, contentData, index, contentAdditionalAsset) {
    if (contentData === void 0) { contentData = null; }
    if (index === void 0) { index = null; }
    return function (dispatch, getState) {
        var isSequenced = !lodash_1.isNil(index) || bsDmContentItems_1.dmIsMediaSequenceContainer(container);
        if (isSequenced && lodash_1.isNil(index)) {
            index = -1;
        }
        if (lodash_1.isNil(name)) {
            name = '';
        }
        var mainAction = {
            type: isSequenced ? exports.ADD_SEQUENCED_MEDIA_STATE : exports.ADD_MEDIA_STATE,
            payload: {
                id: utils_1.newBsDmId(),
                name: name,
                container: container,
            },
        };
        if (isSequenced) {
            mainAction.payload.index = lodash_1.isNil(index) ? -1 : index;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var containingZone = selectors_1.dmGetZoneStateForContainer(dmState, container);
        if (lodash_1.isNil(containingZone)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddMediaState: Invalid container', { functionName: 'dmAddMediaState', action: mainAction });
        }
        mainAction.payload.zoneId = containingZone.id;
        var zoneType = containingZone.type;
        if (container.type === bsDmInterfaces_1.MediaStateContainerType.Zone
            && !(zoneType === bscore_1.ZoneType.BackgroundImage || zoneType === bscore_1.ZoneType.Clock)
            && selectors_1.dmGetZoneNonInteractiveById(dmState, { id: container.id })) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddMediaState: Use PlaylistAddMediaState to add mediaStates in nonInteractive zones', { functionName: 'dmAddMediaState', action: mainAction });
        }
        var tagIndex = selectors_1.dmGetNextMediaStateTagIndexForZone(dmState, { id: containingZone.id });
        mainAction.payload.tag = tagIndex.toString();
        var assetItem;
        var contentItem;
        if (exports.dmContentIsAssetItem(content)) {
            if (bscore_1.bscIsAssetItemPlayableContent(content)) {
                assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, content, mainAction);
                contentItem = bsDmContentItems_1.dmCreateMediaContentItem(assetItem.name, assetItem.id, assetItem.mediaType);
                var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
                batchedActions.push(assetAction);
            }
            else if (content.assetType === bscore_1.AssetType.HtmlSite) {
                assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, content, mainAction);
                var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
                batchedActions.push(assetAction);
                var htmlSiteAction = actionHtmlSite_1.dmAddHostedHtmlSiteWithoutAssetProcessing(assetItem.name, assetItem.id);
                var htmlSiteId = htmlSiteAction.payload.id;
                batchedActions.push(htmlSiteAction);
                contentItem = bsDmContentItems_1.dmCreateHtmlContentItem(assetItem.name, htmlSiteId);
            }
            else {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddMediaState: Unsupported BsAssetItem assetType', { functionName: 'dmAddMediaState', action: mainAction });
            }
        }
        else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(content)) {
            if (zoneType === bscore_1.ZoneType.Ticker) {
                content.usage = bscore_1.DataFeedUsageType.Text;
            }
            var dataFeedName = bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(content) ? content.assetItem.name : name;
            var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, dataFeedName, content);
            batchedActions.push.apply(batchedActions, actionListParams.actions);
            var dataFeedParams = actionListParams.mainAction.payload;
            var contentName = lodash_1.isNil(dataFeedParams.name) ? '' : dataFeedParams.name;
            contentItem = content.usage === bscore_1.DataFeedUsageType.Text ?
                bsDmContentItems_1.dmCreateDataFeedContentItem(contentName, dataFeedParams.id) :
                bsDmContentItems_1.dmCreateMrssDataFeedContentItem(contentName, dataFeedParams.id);
        }
        else if (bsDmContentItems_1.dmIsContentItem(content)) {
            if (bsDmContentItems_1.dmContentItemIsMediaContentItem(content)) {
                mainAction.payload.contentItem = content;
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddMediaState: MediaContentItems must be specified by AssetItem parameters', { functionName: 'dmAddMediaState', action: mainAction });
            }
            else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(content)) {
                var dataFeed = selectors_1.dmGetDataFeedStateById(dmState, { id: content.dataFeedId });
                if (!lodash_1.isNil(dataFeed) && dataFeed.isSystemFeed) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddMediaState: System dataFeed cannot be used in a dataFeed contentItem', { functionName: 'dmAddMediaState', action: mainAction });
                }
            }
            contentItem = __assign({}, content);
            if (!lodash_1.isNil(contentAdditionalAsset)) {
                if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(contentItem)) {
                    var dataFeedSpec = contentAdditionalAsset.dataFeedSpec;
                    if (!lodash_1.isNil(dataFeedSpec)) {
                        dataFeedSpec.usage = bscore_1.DataFeedUsageType.Mrss;
                        var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
                        batchedActions.push.apply(batchedActions, actionListParams.actions);
                        contentItem.defaultDataFeedId = actionListParams.mainAction.payload.id;
                    }
                }
                else if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(contentItem)) {
                    var dataFeedSpec = contentAdditionalAsset.dataFeedSpec;
                    if (contentItem.useDataFeed && !lodash_1.isNil(dataFeedSpec)) {
                        dataFeedSpec.usage = bscore_1.DataFeedUsageType.Content;
                        var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
                        batchedActions.push.apply(batchedActions, actionListParams.actions);
                        contentItem.dataFeedId = actionListParams.mainAction.payload.id;
                    }
                    if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(contentItem)) {
                        var defaultMedia = contentAdditionalAsset.defaultMedia;
                        if (contentItem.useDefaultMedia && !lodash_1.isNil(defaultMedia)) {
                            var defaultMediaAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, defaultMedia, mainAction);
                            batchedActions.push(actionAssetMap_1.dmPutAssetItem(defaultMediaAssetItem));
                            contentItem.defaultMediaId = defaultMediaAssetItem.id;
                        }
                    }
                }
            }
        }
        var contentItemData = bsDmContentItems_1.dmFilterContentItemData(contentItem.type, contentData);
        if (!lodash_1.isNil(contentItemData)) {
            contentItem = __assign(__assign({}, contentItem), contentItemData);
        }
        if (!mainAction.payload.name) {
            mainAction.payload.name = contentItem.name ? contentItem.name : 'State' + tagIndex;
        }
        if (!bsDmContentItems_1.dmIsMediaSequenceContainer(container)) {
            var zoneId = selectors_1.dmGetZoneIdForContainer(dmState, container);
            if (!lodash_1.isNil(zoneId)) {
                mainAction.payload.name =
                    selectors_1.dmGetUniqueMediaStateNameForBaseNameInZone(dmState, { id: zoneId, name: mainAction.payload.name });
            }
        }
        if (zoneType === bscore_1.ZoneType.BackgroundImage) {
            var backgroundStates = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: container.id });
            if (backgroundStates.length >= 1) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddMediaState: BackgroundImage can accept only one media state', { functionName: 'dmAddMediaState', action: mainAction });
            }
        }
        if (!bsDmContentItems_1.dmIsValidContentItemForZone(contentItem, zoneType)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddMediaState: Content item type "' + contentItem.type + '" cannot be added to "' + zoneType + '" zone', { functionName: 'dmAddMediaState', action: mainAction });
        }
        mainAction.payload.contentItem = contentItem;
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddMediaState = dmAddMediaState;
function dmAddLiveTextMediaState(name, container, backgroundImage, backgroundColor, backgroundWidth, backgroundHeight) {
    if (backgroundWidth === void 0) { backgroundWidth = 0; }
    if (backgroundHeight === void 0) { backgroundHeight = 0; }
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var containingZone = selectors_1.dmGetZoneStateForContainer(dmState, container);
        if (lodash_1.isNil(containingZone)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextMediaState: Invalid container', { functionName: 'dmAddLiveTextMediaState' });
        }
        var liveTextActionListParams = actionLiveText_1.dmGetAddLiveTextCanvasActionList(dmState, backgroundImage, backgroundColor, backgroundWidth, backgroundHeight);
        var batchedActions = liveTextActionListParams.actions;
        var canvasId = liveTextActionListParams.mainAction.payload.id;
        var tagIndex = selectors_1.dmGetNextMediaStateTagIndexForZone(dmState, { id: containingZone.id });
        var liveTextCanvasName = lodash_1.isNil(name) ? '' : name;
        var contentItem = bsDmContentItems_1.dmCreateLiveTextContentItem(liveTextCanvasName, canvasId);
        var mainAction = {
            type: exports.ADD_MEDIA_STATE,
            payload: {
                id: utils_1.newBsDmId(),
                name: liveTextCanvasName.length > 0 ? liveTextCanvasName : 'State' + tagIndex,
                tag: tagIndex.toString(),
                container: container,
                contentItem: contentItem,
                zoneId: containingZone.id,
            },
        };
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddLiveTextMediaState = dmAddLiveTextMediaState;
function dmAddSequencedMediaStates(ids, container) {
    return {
        type: exports.ADD_MEDIA_STATE_SEQUENCE,
        payload: { ids: ids, container: container },
    };
}
exports.dmAddSequencedMediaStates = dmAddSequencedMediaStates;
function dmUpdateMediaState(params) {
    return function (dispatch, getState) {
        return doUpdateMediaState(params, dispatch, getState);
    };
}
exports.dmUpdateMediaState = dmUpdateMediaState;
function doUpdateMediaState(params, dispatch, getState) {
    var mainAction = {
        type: exports.UPDATE_MEDIA_STATE,
        payload: lodash_1.pick(params, ['id', 'name']),
    };
    var batchedActions = [];
    var dmState = bsDmState_1.dmFilterDmState(getState());
    var currentMediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: params.id });
    if (!currentMediaStateState) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Cannot update mediaState: Invalid mediaState ID');
    }
    var existingContentItem = currentMediaStateState.contentItem;
    var contentItem;
    if (params.content) {
        var assetItem = void 0;
        if (exports.dmContentIsAssetItem(params.content)) {
            assetItem = params.content;
            var newContentItemType = bscore_1.bscGetContentItemTypeForMediaType(assetItem.mediaType);
            var incompatibleEventIds = selectors_1.dmGetIncompatibleMediaStateEventIdsForContentItemType(dmState, { id: params.id, type: newContentItemType });
            if (incompatibleEventIds.length > 0) {
                batchedActions.push(actionEvent_1.dmDeleteEventWithParams(actionEvent_1.dmGetEventDeleteParams(dmState, incompatibleEventIds)));
            }
            if (bscore_1.bscIsAssetItemPlayableContent(assetItem)) {
                assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.content, mainAction);
                var useExistingProps = false;
                if (bsDmContentItems_1.dmContentItemIsMediaContentItem(existingContentItem)) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingContentItem.assetId));
                    useExistingProps = newContentItemType === existingContentItem.type;
                }
                if (useExistingProps) {
                    contentItem = __assign(__assign({}, existingContentItem), { name: assetItem.name, assetId: assetItem.id });
                }
                else {
                    contentItem = bsDmContentItems_1.dmCreateMediaContentItem(assetItem.name, assetItem.id, assetItem.mediaType);
                }
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
            }
            else {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaState: only MediaContentItems can be updated using an AssetItem');
            }
        }
        else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(params.content)) {
            if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(existingContentItem)) {
                var currentZoneType = selectors_1.dmGetZoneTypeForMediaStateId(dmState, { id: currentMediaStateState.id });
                if (currentZoneType === bscore_1.ZoneType.Ticker) {
                    params.content.usage = bscore_1.DataFeedUsageType.Text;
                }
                var dataFeedUpdateParams = {
                    id: existingContentItem.dataFeedId,
                    feedSpec: params.content,
                };
                if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(params.content)) {
                    dataFeedUpdateParams.name = params.content.assetItem.name;
                }
                var actionListParams = actionDataFeed_1.dmGetUpdateDataFeedActionList(dmState, dataFeedUpdateParams);
                batchedActions.push.apply(batchedActions, actionListParams.actions);
                var dataFeedParams = actionListParams.mainAction.payload;
                var contentName = lodash_1.isNil(dataFeedParams.name) ? '' : dataFeedParams.name;
                contentItem = params.content.usage === bscore_1.DataFeedUsageType.Text ?
                    bsDmContentItems_1.dmCreateDataFeedContentItem(contentName, dataFeedParams.id) :
                    bsDmContentItems_1.dmCreateMrssDataFeedContentItem(contentName, dataFeedParams.id);
            }
            else {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaState: cannot change ContentItem to a DataFeed ContentItem');
            }
        }
        else if (bsDmContentItems_1.dmIsContentItem(params.content)) {
            if (bsDmContentItems_1.dmContentItemIsMediaContentItem(params.content)) {
                mainAction.payload.contentItem = params.content;
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaState: MediaContentItems must be specified by AssetItem parameters', { action: mainAction });
            }
            else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(params.content)) {
                var dataFeed = selectors_1.dmGetDataFeedStateById(dmState, { id: params.content.dataFeedId });
                if (!lodash_1.isNil(dataFeed) && dataFeed.isSystemFeed) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaState: system dataFeed cannot be used in a dataFeed contentItem', { action: mainAction });
                }
            }
            if (bsDmContentItems_1.dmContentItemIsMediaContentItem(existingContentItem)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingContentItem.assetId));
            }
            contentItem = __assign({}, params.content);
        }
        var contentItemData = bsDmContentItems_1.dmFilterContentItemData(contentItem.type, params.contentData);
        if (contentItemData) {
            contentItem = __assign(__assign({}, contentItem), contentItemData);
        }
        var zoneId = selectors_1.dmGetZoneIdForMediaStateId(dmState, { id: currentMediaStateState.id });
        var zoneType = selectors_1.dmGetZoneTypeById(dmState, { id: zoneId });
        var isNonInteractiveZone = selectors_1.dmGetZoneNonInteractiveById(dmState, { id: zoneId });
        var contentItemValid = isNonInteractiveZone ?
            bsDmContentItems_1.dmIsValidContentItemForPlaylist(contentItem, zoneType) : bsDmContentItems_1.dmIsValidContentItemForZone(contentItem, zoneType);
        if (!contentItemValid) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaState: Content item type "' + contentItem.type
                + '" cannot be added to "' + zoneType + '" zone', { action: mainAction });
        }
    }
    else if (params.contentData) {
        var filteredData = bsDmContentItems_1.dmFilterContentItemData(existingContentItem.type, params.contentData);
        if (lodash_1.isNil(filteredData) || Object.keys(filteredData).length === 0) {
            contentItem = null;
        }
        else {
            contentItem = __assign(__assign({}, existingContentItem), filteredData);
        }
    }
    if ((lodash_1.isNil(contentItem) || bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(contentItem))
        && bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(existingContentItem)) {
        var dataFeedSpec = void 0;
        if (!lodash_1.isNil(params.contentAdditionalAsset)) {
            dataFeedSpec = params.contentAdditionalAsset.dataFeedSpec;
        }
        if (lodash_1.isNil(contentItem)) {
            contentItem = __assign({}, existingContentItem);
        }
        if (existingContentItem.useDataFeed !== contentItem.useDataFeed) {
            if (contentItem.useDataFeed) {
                if (!lodash_1.isNil(dataFeedSpec)) {
                    dataFeedSpec.usage = bscore_1.DataFeedUsageType.Content;
                    var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
                    batchedActions.push.apply(batchedActions, actionListParams.actions);
                    contentItem.dataFeedId = actionListParams.mainAction.payload.id;
                }
                else {
                    contentItem.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
                }
                var itemSequenceObject = selectors_1.dmGetMediaStateSequenceForContainer(dmState, { id: params.id });
                if (!lodash_1.isNil(itemSequenceObject)) {
                    var deleteParams = dmGetMediaStateDeleteParams(dmState, itemSequenceObject.sequence);
                    batchedActions.push(dmDeleteMediaStateWithParams(deleteParams));
                }
            }
            else {
                var dataFeedId = existingContentItem.dataFeedId;
                if (utils_1.isValidBsDmId(dataFeedId)) {
                    batchedActions.push(actionDataFeed_1.dmDeleteDataFeedWithParams(actionDataFeed_1.dmGetDataFeedDeleteParams(dmState, dataFeedId)));
                }
                contentItem.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
            }
        }
        else if (contentItem.useDataFeed) {
            if (!lodash_1.isNil(dataFeedSpec)) {
                dataFeedSpec.usage = bscore_1.DataFeedUsageType.Content;
                var actionListParams = void 0;
                if (utils_1.isValidBsDmId(contentItem.dataFeedId)) {
                    actionListParams = actionDataFeed_1.dmGetUpdateDataFeedActionList(dmState, { id: contentItem.dataFeedId, feedSpec: dataFeedSpec });
                }
                else {
                    actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
                    contentItem.dataFeedId = actionListParams.mainAction.payload.id;
                }
                batchedActions.push.apply(batchedActions, actionListParams.actions);
            }
        }
    }
    if (params.contentAdditionalAsset !== undefined) {
        if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(contentItem)
            || (lodash_1.isNil(contentItem) && bsDmContentItems_1.dmContentItemIsPlayFileContentItem(existingContentItem))) {
            var defaultMediaAssetItem = params.contentAdditionalAsset.defaultMedia;
            if (defaultMediaAssetItem !== undefined) {
                if (lodash_1.isNil(contentItem)) {
                    contentItem = __assign({}, existingContentItem);
                }
                if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(existingContentItem)
                    && utils_1.isValidBsDmId(existingContentItem.defaultMediaId)) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingContentItem.defaultMediaId));
                    contentItem.defaultMediaId = bscore_1.BsAssetIdNone;
                }
                if (defaultMediaAssetItem !== null) {
                    var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, defaultMediaAssetItem, mainAction);
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    contentItem.defaultMediaId = assetItem.id;
                }
            }
        }
    }
    if (lodash_1.isString(params.contentName) && lodash_1.isNil(contentItem)) {
        contentItem = __assign({}, existingContentItem);
    }
    if (!lodash_1.isNil(contentItem)) {
        if (lodash_1.isString(params.contentName)) {
            contentItem.name = params.contentName;
        }
        mainAction.payload.contentItem = contentItem;
    }
    batchedActions.push(mainAction);
    dispatch(actionBase_1.dmBatchActions(batchedActions));
    return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
}
exports.doUpdateMediaState = doUpdateMediaState;
function dmUpdateMediaStateContentItem(id, contentItem) {
    return {
        type: exports.UPDATE_MEDIA_STATE,
        payload: { id: id, contentItem: contentItem },
    };
}
exports.dmUpdateMediaStateContentItem = dmUpdateMediaStateContentItem;
function dmUpdateMediaStatesContainers(ids, container) {
    return {
        type: exports.UPDATE_MEDIA_STATES_CONTAINERS,
        payload: { ids: ids, container: container },
    };
}
exports.dmUpdateMediaStatesContainers = dmUpdateMediaStatesContainers;
function dmGetMediaStateDeleteParams(state, id, includeIncomingTransitions) {
    var _a, _b, _c, _d, _e;
    if (includeIncomingTransitions === void 0) { includeIncomingTransitions = false; }
    var deleteParams = {
        mediaStateIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        dataFeedIds: [],
        dataFeedSourceIds: [],
        assetIds: [],
        eventIds: [],
        transitionIds: [],
        commandIds: [],
        liveTextCanvasIds: [],
        liveTextItemIds: [],
        liveTextGroupIds: [],
    };
    var getContainedMediaStateIds = function (containerId) {
        if (selectors_1.dmIsMediaStateContainer(state, { id: containerId })) {
            var ids_1 = selectors_1.dmGetContainedMediaStateIdsForMediaState(state, { id: containerId });
            var outerIds = ids_1.slice();
            outerIds.forEach(function (outerId) {
                var innerIds = getContainedMediaStateIds(outerId);
                if (innerIds) {
                    ids_1.push.apply(ids_1, innerIds);
                }
            });
            if (ids_1.length) {
                return ids_1;
            }
        }
        return null;
    };
    var originalMediaStateIds = deleteParams.mediaStateIds.slice();
    var invalidMediaStateIds = [];
    originalMediaStateIds.forEach(function (mediaStateId) {
        var _a;
        var mediaStateState = selectors_1.dmGetMediaStateStateById(state, { id: mediaStateId });
        if (!lodash_1.isNil(mediaStateState)) {
            var containedMediaStateIds = getContainedMediaStateIds(mediaStateId);
            if (containedMediaStateIds) {
                (_a = deleteParams.mediaStateIds).push.apply(_a, containedMediaStateIds);
            }
        }
        else {
            invalidMediaStateIds.push(mediaStateId);
        }
    });
    if (invalidMediaStateIds.length) {
        lodash_1.pullAll(deleteParams.mediaStateIds, invalidMediaStateIds);
    }
    deleteParams.mediaStateIds.forEach(function (mediaStateId) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var mediaStateEventIds = selectors_1.dmGetAllEventIdsForMediaState(state, { id: mediaStateId });
        if (mediaStateEventIds.length) {
            (_a = deleteParams.eventIds).push.apply(_a, mediaStateEventIds);
        }
        var entryCommandIds = selectors_1.dmGetEntryCommandIdsForMediaState(state, { id: mediaStateId });
        var exitCommandIds = selectors_1.dmGetExitCommandIdsForMediaState(state, { id: mediaStateId });
        if (entryCommandIds.length || exitCommandIds.length) {
            (_b = deleteParams.commandIds).push.apply(_b, __spreadArrays(entryCommandIds, exitCommandIds));
        }
        var dataFeedIds = selectors_1.dmGetDataFeedIdsForMediaState(state, { id: mediaStateId });
        if (dataFeedIds.length) {
            (_c = deleteParams.dataFeedIds).push.apply(_c, dataFeedIds);
        }
        var mediaStateState = selectors_1.dmGetMediaStateStateById(state, { id: mediaStateId });
        var contentItem = mediaStateState.contentItem;
        if (bsDmContentItems_1.dmContentItemIsMediaContentItem(contentItem)) {
            deleteParams.assetIds.push(contentItem.assetId);
        }
        else if (bsDmContentItems_1.dmContentItemIsMediaListContentItem(contentItem)) {
            var seqNextCommandIds = selectors_1.dmGetSequenceItemNextCommandIdsForMediaState(state, { id: mediaStateId });
            var seqPrevCommandIds = selectors_1.dmGetSequenceItemPreviousCommandIdsForMediaState(state, { id: mediaStateId });
            if (seqNextCommandIds.length || seqPrevCommandIds.length) {
                (_d = deleteParams.commandIds).push.apply(_d, __spreadArrays(seqNextCommandIds, seqPrevCommandIds));
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(contentItem)) {
            var defaultMediaId = contentItem.defaultMediaId;
            if (utils_1.isValidBsDmId(defaultMediaId)) {
                deleteParams.assetIds.push(defaultMediaId);
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(contentItem)) {
            var liveTextDeleteItems = actionLiveText_1.dmGetLiveTextCanvasDeleteParams(state, contentItem.canvasId, false);
            deleteParams.liveTextCanvasIds.push(contentItem.canvasId);
            if (liveTextDeleteItems.liveTextItemIds.length) {
                (_e = deleteParams.liveTextItemIds).push.apply(_e, liveTextDeleteItems.liveTextItemIds);
            }
            if (liveTextDeleteItems.liveTextGroupIds.length) {
                (_f = deleteParams.liveTextGroupIds).push.apply(_f, liveTextDeleteItems.liveTextGroupIds);
            }
            if (liveTextDeleteItems.dataFeedIds.length) {
                (_g = deleteParams.dataFeedIds).push.apply(_g, liveTextDeleteItems.dataFeedIds);
            }
            if (liveTextDeleteItems.assetIds.length) {
                (_h = deleteParams.assetIds).push.apply(_h, liveTextDeleteItems.assetIds);
            }
        }
        if (includeIncomingTransitions) {
            var transitionIds = selectors_1.dmGetIncomingTransitionIdsForMediaState(state, { id: mediaStateId });
            if (transitionIds.length) {
                (_j = deleteParams.transitionIds).push.apply(_j, transitionIds);
                transitionIds.forEach(function (transitionId) {
                    var transitionState = selectors_1.dmGetTransitionStateById(state, { id: transitionId });
                    var event = selectors_1.dmGetEventById(state, { id: transitionState.eventId });
                    if (!lodash_1.isNil(event) && !lodash_1.isNil(event.defaultTransition)
                        && event.conditionalTransitions.length === 0
                        && event.commands.length === 0) {
                        deleteParams.eventIds.push(event.id);
                    }
                });
            }
        }
    });
    if (includeIncomingTransitions) {
        deleteParams.eventIds = lodash_1.uniq(deleteParams.eventIds);
    }
    var eventDeleteParams = actionEvent_1.dmGetEventDeleteParams(state, deleteParams.eventIds);
    (_a = deleteParams.transitionIds).push.apply(_a, eventDeleteParams.transitionIds);
    if (eventDeleteParams.commandIds.length) {
        (_b = deleteParams.commandIds).push.apply(_b, eventDeleteParams.commandIds);
    }
    if (includeIncomingTransitions) {
        deleteParams.transitionIds = lodash_1.uniq(deleteParams.transitionIds);
    }
    var transitionDeleteParams = actionTransition_1.dmGetTransitionDeleteParams(state, deleteParams.transitionIds);
    if (transitionDeleteParams.commandIds.length) {
        (_c = deleteParams.commandIds).push.apply(_c, transitionDeleteParams.commandIds);
    }
    var dataFeedDeleteParams = actionDataFeed_1.dmGetDataFeedDeleteParams(state, deleteParams.dataFeedIds);
    deleteParams.dataFeedSourceIds = dataFeedDeleteParams.dataFeedSourceIds;
    if (dataFeedDeleteParams.commandIds.length) {
        (_d = deleteParams.commandIds).push.apply(_d, dataFeedDeleteParams.commandIds);
    }
    if (dataFeedDeleteParams.assetIds.length) {
        (_e = deleteParams.assetIds).push.apply(_e, dataFeedDeleteParams.assetIds);
    }
    deleteParams.commandIds = lodash_1.uniq(deleteParams.commandIds);
    return deleteParams;
}
exports.dmGetMediaStateDeleteParams = dmGetMediaStateDeleteParams;
function dmDeleteMediaStateWithParams(params) {
    return {
        type: exports.DELETE_MEDIA_STATE,
        payload: params,
    };
}
exports.dmDeleteMediaStateWithParams = dmDeleteMediaStateWithParams;
function dmDeleteMediaState(id) {
    return function (dispatch, getState) {
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var containerDeleteListMap = new Map();
        var addToContainerMap = function (mediaStateId) {
            var mediaState = selectors_1.dmGetMediaStateStateById(dmState, { id: mediaStateId });
            if (!lodash_1.isNil(mediaState)
                && (mediaState.container.type === bsDmInterfaces_1.MediaStateContainerType.Zone
                    || mediaState.container.type === bsDmInterfaces_1.MediaStateContainerType.SuperState)) {
                var mapItem = containerDeleteListMap.get(mediaState.container.id);
                if (lodash_1.isNil(mapItem)) {
                    containerDeleteListMap.set(mediaState.container.id, { containerType: mediaState.container.type, idsToDelete: [mediaStateId] });
                }
                else {
                    mapItem.idsToDelete.push(mediaStateId);
                }
            }
        };
        if (Array.isArray(id)) {
            id.forEach(addToContainerMap);
        }
        else {
            addToContainerMap(id);
        }
        containerDeleteListMap.forEach(function (containerDeleteList, containerId) {
            if (containerDeleteList.containerType === bsDmInterfaces_1.MediaStateContainerType.Zone) {
                var currentInitialState = selectors_1.dmGetInitialMediaStateIdForZone(dmState, { id: containerId });
                if (!lodash_1.isNil(currentInitialState) && containerDeleteList.idsToDelete.indexOf(currentInitialState) >= 0) {
                    var zoneMediaStateIds = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: containerId });
                    var remainingMediaStates = lodash_1.without.apply(void 0, __spreadArrays([zoneMediaStateIds], containerDeleteList.idsToDelete));
                    var newInitialMediaStateId = remainingMediaStates.length > 0 ? remainingMediaStates[0] : bsDmInterfaces_1.BsDmIdNone;
                    batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: containerId, initialMediaStateId: newInitialMediaStateId }));
                }
            }
            else {
                var mediaState = selectors_1.dmGetMediaStateStateById(dmState, { id: containerId });
                if (!lodash_1.isNil(mediaState) && bsDmContentItems_1.dmContentItemIsSuperStateContentItem(mediaState.contentItem)) {
                    var currentInitialState = mediaState.contentItem.initialMediaStateId;
                    if (!lodash_1.isNil(currentInitialState) && containerDeleteList.idsToDelete.indexOf(currentInitialState) >= 0) {
                        var superStateMediaStateIds = selectors_1.dmGetContainedMediaStateIdsForMediaState(dmState, { id: containerId });
                        var remainingMediaStates = lodash_1.without.apply(void 0, __spreadArrays([superStateMediaStateIds], containerDeleteList.idsToDelete));
                        var initialMediaStateId = remainingMediaStates.length > 0 ? remainingMediaStates[0] : bsDmInterfaces_1.BsDmIdNone;
                        batchedActions.push(dmUpdateMediaStateContentItem(containerId, __assign(__assign({}, mediaState.contentItem), { initialMediaStateId: initialMediaStateId })));
                    }
                }
            }
        });
        var deleteParams = dmGetMediaStateDeleteParams(dmState, id, true);
        var mainAction = dmDeleteMediaStateWithParams(deleteParams);
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmDeleteMediaState = dmDeleteMediaState;
function dmPreparePasteMediaStateAction(dmState, copySet, targetZoneId, duplicateMatchedUserVariables) {
    if (duplicateMatchedUserVariables === void 0) { duplicateMatchedUserVariables = false; }
    if (!lodash_1.isNil(targetZoneId)) {
        var mergeParams = {};
        var pasteToDifferentSign = selectors_1.dmGetSignId(dmState) !== copySet.signId;
        if (pasteToDifferentSign) {
            mergeParams.assetItemMergeParams = selectors_1.dmGetMergedAssetItemCopySet(dmState, copySet.assetMap);
            mergeParams.dataFeedSourceMergeParams = selectors_1.dmGetMergedDataFeedSourceCopySet(dmState, copySet.dataFeeds.sourcesById, copySet.assetMap, copySet.userVariables);
            mergeParams.updatedCommandCollection = selectors_1.dmGetCommandCollectionForDifferentSign(dmState, copySet.commands, copySet.zoneId, Object.keys(copySet.dataFeeds.sourcesById), Object.keys(copySet.userVariables.variablesById));
        }
        var mergingUserVariables = copySet.userVariables.sequence.length > 0;
        if (mergingUserVariables) {
            mergeParams.userVariableCopySetMergeParams =
                selectors_1.dmGetMergedUserVariableCopySet(dmState, copySet.userVariables, duplicateMatchedUserVariables);
        }
        var copySetUpdateResult_1 = bsDmCopyPaste_1.dmUpdateMediaStateCopySetWithUniqueIds(copySet, mergeParams);
        if (mergingUserVariables && copySetUpdateResult_1.userVariableIdMap.size > 0) {
            selectors_1.dmVisitUserVariableReferences(dmState, copySetUpdateResult_1.copySet, function (uvId) {
                var newId = copySetUpdateResult_1.userVariableIdMap.get(uvId);
                return lodash_1.isNil(newId) ? bsDmInterfaces_1.BsDmIdNone : newId;
            });
        }
        if (pasteToDifferentSign) {
            Object.keys(copySetUpdateResult_1.copySet.commands.commandsById).forEach(function (commandId) {
                var command = copySetUpdateResult_1.copySet.commands.commandsById[commandId];
                command.operations.forEach(function (op) {
                    if (bsDmCommands_1.dmIsZoneCommandData(op.data)) {
                        op.data.zoneId = targetZoneId;
                    }
                    else if (bsDmCommands_1.dmIsDataFeedSourceCommandData(op.data)) {
                        var newId = copySetUpdateResult_1.dataFeedSourceIdMap.get(op.data.dataFeedSourceId);
                        op.data.dataFeedSourceId = lodash_1.isNil(newId) ? bsDmInterfaces_1.BsDmIdNone : newId;
                    }
                });
            });
        }
        var updatedCopySet = bsDmCopyPaste_1.dmUpdateMediaStateCopySetWithUniqueStateNamesForZone(dmState, copySetUpdateResult_1.copySet, targetZoneId);
        return {
            type: exports.PASTE_MEDIA_STATES,
            payload: {
                copySet: updatedCopySet,
                mediaStateIdMap: copySetUpdateResult_1.mediaStateIdMap,
                eventIdMap: copySetUpdateResult_1.eventIdMap,
            },
        };
    }
    else {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidContainerForPaste, 'PreparePasteMediaStateAction - target zone ID is invalid', { functionName: 'dmPreparePasteMediaStateAction' });
    }
}
exports.dmPreparePasteMediaStateAction = dmPreparePasteMediaStateAction;
function dmPasteMediaStateCopySet(copySet, container, options) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var targetZoneId = selectors_1.dmGetZoneIdForZoneOrMediaStateId(dmState, { id: container.id });
        var duplicateMatchedUserVariables = lodash_1.isNil(options) || lodash_1.isNil(options.duplicateMatchedUserVariables) ? false :
            options.duplicateMatchedUserVariables;
        var mainAction = dmPreparePasteMediaStateAction(dmState, copySet, targetZoneId, duplicateMatchedUserVariables);
        if (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Playlist) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'PasteMediaStateCopySet: Use PlaylistPasteMediaStateCopySet to paste mediaStates in nonInteractive zones', { functionName: 'dmPasteMediaStateCopySet', action: mainAction });
        }
        if (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Interactive) {
            var pasteToDifferentSign = selectors_1.dmGetSignId(dmState) !== copySet.signId;
            if (pasteToDifferentSign || copySet.zoneId !== targetZoneId) {
                var result = selectors_1.dmIsMediaStateCopySetCompatibleWithZone(dmState, { zoneId: targetZoneId, copySet: copySet });
                if (!result.ok) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidContainerForPaste, 'PasteMediaStateCopySet - the copied mediaStates are not compatible with the target zone', { functionName: 'dmPasteMediaStateCopySet', action: mainAction });
                }
            }
            if (container.type !== bsDmInterfaces_1.MediaStateContainerType.Zone) {
                var targetMediaState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
                if (lodash_1.isNil(targetMediaState) || !bsDmContentItems_1.dmContentItemIsSuperStateContentItem(targetMediaState.contentItem)) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidContainerForPaste, 'PasteMediaStateCopySet - interactive mediaStates can only be pasted to a Zone or a SuperState', { functionName: 'dmPasteMediaStateCopySet', action: mainAction });
                }
            }
        }
        var batchedActions = [mainAction];
        var updatedCopySet = mainAction.payload.copySet;
        if (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.MediaItemList) {
            var mediaSequenceContainer = selectors_1.dmGetMediaStateStateById(dmState, { id: copySet.containerId });
            if (!lodash_1.isNil(mediaSequenceContainer)
                && bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaSequenceContainer.contentItem)) {
                var mediaStateSequence = selectors_1.dmGetMediaStateSequenceForContainer(dmState, { id: copySet.containerId });
                var idsToInsert = Object.keys(updatedCopySet.mediaStates.mediaStatesById);
                var newSequence = void 0;
                if (lodash_1.isNil(mediaStateSequence)) {
                    newSequence = idsToInsert;
                }
                else {
                    if (mediaStateSequence.parentType !== container.type) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidContainerForPaste, "PasteMediaStateCopySet - " + container.type + " content items can only be pasted into " + container.type + " " +
                            'mediaStates', { functionName: 'dmPasteMediaStateCopySet', action: mainAction });
                    }
                    var index = !lodash_1.isNil(options)
                        && !lodash_1.isNil(options.targetSequenceIndex)
                        && options.targetSequenceIndex >= 0
                        && options.targetSequenceIndex <= mediaStateSequence.sequence.length ?
                        options.targetSequenceIndex : mediaStateSequence.sequence.length;
                    if (index < 0 || index >= mediaStateSequence.sequence.length) {
                        newSequence = mediaStateSequence.sequence.concat(idsToInsert);
                    }
                    else {
                        newSequence = __spreadArrays(mediaStateSequence.sequence.slice(0, index), idsToInsert, mediaStateSequence.sequence.slice(index));
                    }
                }
                mainAction.payload.copySet.mediaStates.sequencesByParentId[container.id] = {
                    id: container.id, parentType: container.type, sequence: newSequence,
                };
            }
            else {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PasteMediaStateCopySet - invalid MediaList or PlayFile ID', { functionName: 'dmPasteMediaStateCopySet', action: mainAction });
            }
        }
        else {
            if (updatedCopySet.userVariables.sequence.length) {
                batchedActions.push(actionUserVariable_1.dmGetMergeUserVariableAction(updatedCopySet.userVariables));
            }
        }
        if (copySet.containerId !== container.id) {
            bsDmCopyPaste_1.dmUpdateMediaStateCopySetForPasteTargetContainer(updatedCopySet, container);
        }
        var getNewInitialMediaStateId = function (currentInitialMediaStateId) {
            if (!utils_1.isValidBsDmId(currentInitialMediaStateId)) {
                return utils_1.isValidBsDmId(updatedCopySet.csInitialMediaStateId) ? updatedCopySet.csInitialMediaStateId :
                    Object.keys(updatedCopySet.mediaStates.mediaStatesById)[0];
            }
            return null;
        };
        if (container.type === bsDmInterfaces_1.MediaStateContainerType.Zone) {
            var newInitialMediaStateId = getNewInitialMediaStateId(selectors_1.dmGetInitialMediaStateIdForZone(dmState, { id: container.id }));
            if (!lodash_1.isNil(newInitialMediaStateId)) {
                batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaStateId }));
            }
        }
        else if (container.type === bsDmInterfaces_1.MediaStateContainerType.SuperState) {
            var superState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
            if (!lodash_1.isNil(superState) && bsDmContentItems_1.dmContentItemIsSuperStateContentItem(superState.contentItem)) {
                var newInitialMediaStateId = getNewInitialMediaStateId(superState.contentItem.initialMediaStateId);
                if (!lodash_1.isNil(newInitialMediaStateId)) {
                    batchedActions.push(dmUpdateMediaStateContentItem(container.id, __assign(__assign({}, superState.contentItem), { initialMediaStateId: newInitialMediaStateId })));
                }
            }
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmPasteMediaStateCopySet = dmPasteMediaStateCopySet;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DmcVideoModeBrightScriptPlugin = exports.DmcParserBrightScriptPlugin = exports.DmcBrightScriptPlugin = exports.DmcUserVariable = exports.DmcDataFeed = exports.DmcPresentationWebPage = exports.DmcDeviceWebPage = exports.DmcNodeApp = exports.DmcHtmlSite = exports.DmcSignMetadata = exports.DmcZone = exports.dmIsDmcVideoZoneLayer = exports.DmcVideoZoneLayer = exports.dmIsDmcZoneLayer = exports.DmcZoneLayer = exports.DmcCondition = exports.DmcCommand = exports.DmcTransition = exports.DmcEvent = exports.dmIsDmcLiveTextMediaState = exports.DmcLiveTextMediaState = exports.DmcLocalPlaylistItem = exports.dmIsDmcLocalPlaylistMediaState = exports.DmcLocalPlaylistMediaState = exports.DmcPlayFileItem = exports.dmIsDmcPlayFileMediaState = exports.DmcPlayFileMediaState = exports.DmcMediaListItem = exports.dmIsDmcMediaListMediaState = exports.DmcMediaListMediaState = exports.DmcMediaState = exports.DmcMediaStateContainer = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmCommands_1 = __webpack_require__(22);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmHtmlSite_1 = __webpack_require__(37);
var bsDmZone_1 = __webpack_require__(31);
var lodash_1 = __webpack_require__(0);
var DmcMediaStateContainer = (function () {
    function DmcMediaStateContainer(id, type) {
        if (type === void 0) { type = bsDmInterfaces_1.MediaStateContainerType.Zone; }
        this.id = id;
        this.type = type;
    }
    return DmcMediaStateContainer;
}());
exports.DmcMediaStateContainer = DmcMediaStateContainer;
var DmcMediaState = (function () {
    function DmcMediaState(mediaStateState, components) {
        this.id = mediaStateState.id;
        this.name = mediaStateState.name;
        this.tag = mediaStateState.tag;
        this.container = Object.assign({}, mediaStateState.container);
        this.contentItem = Object.assign({}, mediaStateState.contentItem);
        this.mediaAssetItem = components.mediaAssetItem ? Object.assign({}, components.mediaAssetItem) : null;
        this.eventList = [];
        this.entryCommands = [];
        this.exitCommands = [];
        if (Array.isArray(components.deNormEvents) && components.deNormEvents.length > 0) {
            this.eventList = components.deNormEvents.map(function (ev) { return new DmcEvent(ev.eventState, ev.transitionStates); });
        }
        if (Array.isArray(components.commands.entry) && components.commands.entry.length > 0) {
            this.entryCommands = components.commands.entry.map(function (cmd) { return new DmcCommand(cmd); });
        }
        if (Array.isArray(components.commands.exit) && components.commands.exit.length > 0) {
            this.exitCommands = components.commands.exit.map(function (cmd) { return new DmcCommand(cmd); });
        }
    }
    Object.defineProperty(DmcMediaState.prototype, "containerObject", {
        get: function () {
            switch (this.contentItem.type) {
                case bscore_1.ContentItemType.MediaList: return { id: this.id, type: bsDmInterfaces_1.MediaStateContainerType.MediaList };
                case bscore_1.ContentItemType.PlayFile: return { id: this.id, type: bsDmInterfaces_1.MediaStateContainerType.PlayFile };
                case bscore_1.ContentItemType.SuperState: return { id: this.id, type: bsDmInterfaces_1.MediaStateContainerType.SuperState };
                case bscore_1.ContentItemType.LocalPlaylist: return { id: this.id, type: bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist };
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcMediaState.prototype, "bpAvailability", {
        get: function () {
            if (lodash_1.isNil(this._bpAvailability)) {
                this._bpAvailability = this.getBpAvailability();
            }
            return this._bpAvailability;
        },
        enumerable: false,
        configurable: true
    });
    DmcMediaState.prototype.getEvent = function (id) {
        var event = lodash_1.find(this.eventList, ['id', id]);
        return lodash_1.isNil(event) ? null : event;
    };
    DmcMediaState.prototype.getEntryCommand = function (id) {
        var command = lodash_1.find(this.entryCommands, ['id', id]);
        return lodash_1.isNil(command) ? null : command;
    };
    DmcMediaState.prototype.getExitCommand = function (id) {
        var command = lodash_1.find(this.exitCommands, ['id', id]);
        return lodash_1.isNil(command) ? null : command;
    };
    DmcMediaState.prototype.canAddEvent = function (event) {
        return this.testEventCompatibility(event);
    };
    DmcMediaState.prototype.canUpdateEvent = function (eventId, newEvent) {
        return this.testEventCompatibility(newEvent, eventId);
    };
    DmcMediaState.prototype.getBpAvailability = function () {
        return bsDmEvents_1.dmGetBpAvailabilityForEventList(this.eventList);
    };
    DmcMediaState.prototype.testForDuplicateEvents = function (eventToTest, eventIdToIgnore) {
        return bsDmEvents_1.dmEventListHasNoDuplicateEvent(this.eventList, eventToTest, eventIdToIgnore);
    };
    DmcMediaState.prototype.testEventCompatibility = function (event, eventIdToIgnore) {
        var result;
        result = bsDmEvents_1.dmIsEventCompatibleWithContentItem(event, this.contentItem.type);
        if (result.ok) {
            result = this.testForDuplicateEvents(event, eventIdToIgnore);
        }
        return result;
    };
    return DmcMediaState;
}());
exports.DmcMediaState = DmcMediaState;
var DmcMediaListMediaState = (function (_super) {
    __extends(DmcMediaListMediaState, _super);
    function DmcMediaListMediaState(mediaStateState, components, mediaListComponents) {
        var _this = _super.call(this, mediaStateState, components) || this;
        _this.itemGlobalForwardEventList = [];
        _this.itemGlobalBackwardEventList = [];
        _this.itemGlobalPlayNextCommands = [];
        _this.itemGlobalPlayPreviousCommands = [];
        _this.sourceDataFeed = null;
        if (Array.isArray(mediaListComponents.forwardEvents) && mediaListComponents.forwardEvents.length > 0) {
            _this.itemGlobalForwardEventList = mediaListComponents.forwardEvents.map(function (state) { return new DmcEvent(state); });
        }
        if (Array.isArray(mediaListComponents.backwardEvents) && mediaListComponents.backwardEvents.length > 0) {
            _this.itemGlobalBackwardEventList = mediaListComponents.backwardEvents.map(function (state) { return new DmcEvent(state); });
        }
        if (Array.isArray(mediaListComponents.playNextCommands) && mediaListComponents.playNextCommands.length > 0) {
            _this.itemGlobalPlayNextCommands = mediaListComponents.playNextCommands.map(function (state) { return new DmcCommand(state); });
        }
        if (Array.isArray(mediaListComponents.playPreviousCommands)
            && mediaListComponents.playPreviousCommands.length > 0) {
            _this.itemGlobalPlayPreviousCommands =
                mediaListComponents.playPreviousCommands.map(function (state) { return new DmcCommand(state); });
        }
        if (!lodash_1.isNil(mediaListComponents.sourceDataFeed)) {
            _this.sourceDataFeed = new DmcDataFeed(mediaListComponents.sourceDataFeed);
        }
        return _this;
    }
    DmcMediaListMediaState.prototype.canAddGlobalEvent = function (event) {
        return this.testGlobalEventCompatibility(event);
    };
    DmcMediaListMediaState.prototype.canUpdateGlobalEvent = function (eventId, newEvent) {
        return this.testGlobalEventCompatibility(newEvent, eventId);
    };
    DmcMediaListMediaState.prototype.testForDuplicateEvents = function (eventToTest, eventIdToIgnore, isItemEvent) {
        if (lodash_1.isNil(isItemEvent)) {
            isItemEvent = false;
        }
        var consolidatedEventList;
        if (eventToTest.type === bscore_1.EventType.MediaEnd || eventToTest.type === bscore_1.EventType.Timer) {
            consolidatedEventList = isItemEvent ? __spreadArrays(this.itemGlobalForwardEventList, this.itemGlobalBackwardEventList) : this.eventList;
        }
        else {
            consolidatedEventList = __spreadArrays(this.eventList, this.itemGlobalForwardEventList, this.itemGlobalBackwardEventList);
        }
        return bsDmEvents_1.dmEventListHasNoDuplicateEvent(consolidatedEventList, eventToTest, eventIdToIgnore);
    };
    DmcMediaListMediaState.prototype.getBpAvailability = function () {
        var availability = bsDmEvents_1.dmGetBpAvailabilityForEventList(this.eventList);
        availability = bsDmEvents_1.dmGetBpAvailabilityForEventList(this.itemGlobalForwardEventList, availability);
        availability = bsDmEvents_1.dmGetBpAvailabilityForEventList(this.itemGlobalBackwardEventList, availability);
        return availability;
    };
    DmcMediaListMediaState.prototype.testGlobalEventCompatibility = function (event, eventIdToIgnore) {
        var result;
        result = bsDmEvents_1.dmIsEventCompatibleWithContentItem(event, this.contentItem.type);
        if (result.ok) {
            result = this.testForDuplicateEvents(event, eventIdToIgnore, true);
        }
        return result;
    };
    return DmcMediaListMediaState;
}(DmcMediaState));
exports.DmcMediaListMediaState = DmcMediaListMediaState;
function dmIsDmcMediaListMediaState(object) {
    return !lodash_1.isNil(object) && typeof object === 'object' && object instanceof DmcMediaListMediaState;
}
exports.dmIsDmcMediaListMediaState = dmIsDmcMediaListMediaState;
var DmcMediaListItem = (function (_super) {
    __extends(DmcMediaListItem, _super);
    function DmcMediaListItem(mediaStateState, components) {
        return _super.call(this, mediaStateState, components) || this;
    }
    Object.defineProperty(DmcMediaListItem.prototype, "forwardEvents", {
        get: function () {
            return this.eventList.filter(function (event) { return !lodash_1.isNil(event.action) && event.action === bscore_1.EventIntrinsicAction.SequenceForward; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcMediaListItem.prototype, "backwardEvents", {
        get: function () {
            return this.eventList.filter(function (event) { return !lodash_1.isNil(event.action) && event.action === bscore_1.EventIntrinsicAction.SequenceBackward; });
        },
        enumerable: false,
        configurable: true
    });
    return DmcMediaListItem;
}(DmcMediaState));
exports.DmcMediaListItem = DmcMediaListItem;
var DmcPlayFileMediaState = (function (_super) {
    __extends(DmcPlayFileMediaState, _super);
    function DmcPlayFileMediaState(mediaStateState, components, playFileComponents) {
        var _this = _super.call(this, mediaStateState, components) || this;
        _this.defaultMediaAssetItem = null;
        _this.sourceDataFeed = null;
        _this.defaultMediaAssetItem = playFileComponents.defaultMediaAssetItem;
        if (!lodash_1.isNil(playFileComponents.sourceDataFeed)) {
            _this.sourceDataFeed = new DmcDataFeed(playFileComponents.sourceDataFeed);
        }
        return _this;
    }
    return DmcPlayFileMediaState;
}(DmcMediaState));
exports.DmcPlayFileMediaState = DmcPlayFileMediaState;
function dmIsDmcPlayFileMediaState(object) {
    return !lodash_1.isNil(object) && typeof object === 'object' && object instanceof DmcPlayFileMediaState;
}
exports.dmIsDmcPlayFileMediaState = dmIsDmcPlayFileMediaState;
var DmcPlayFileItem = (function (_super) {
    __extends(DmcPlayFileItem, _super);
    function DmcPlayFileItem(mediaStateState, components) {
        return _super.call(this, mediaStateState, components) || this;
    }
    return DmcPlayFileItem;
}(DmcMediaState));
exports.DmcPlayFileItem = DmcPlayFileItem;
var DmcLocalPlaylistMediaState = (function (_super) {
    __extends(DmcLocalPlaylistMediaState, _super);
    function DmcLocalPlaylistMediaState(mediaStateState, components, localPlaylistComponents) {
        var _this = _super.call(this, mediaStateState, components) || this;
        _this.defaultDynamicPlaylistDataFeed = null;
        if (!lodash_1.isNil(localPlaylistComponents.defaultDynamicPlaylistDataFeed)) {
            _this.defaultDynamicPlaylistDataFeed = new DmcDataFeed(localPlaylistComponents.defaultDynamicPlaylistDataFeed);
        }
        return _this;
    }
    return DmcLocalPlaylistMediaState;
}(DmcMediaState));
exports.DmcLocalPlaylistMediaState = DmcLocalPlaylistMediaState;
function dmIsDmcLocalPlaylistMediaState(object) {
    return !lodash_1.isNil(object) && typeof (object) === 'object' && object instanceof DmcLocalPlaylistMediaState;
}
exports.dmIsDmcLocalPlaylistMediaState = dmIsDmcLocalPlaylistMediaState;
var DmcLocalPlaylistItem = (function (_super) {
    __extends(DmcLocalPlaylistItem, _super);
    function DmcLocalPlaylistItem(mediaStateState, components) {
        return _super.call(this, mediaStateState, components) || this;
    }
    return DmcLocalPlaylistItem;
}(DmcMediaState));
exports.DmcLocalPlaylistItem = DmcLocalPlaylistItem;
var DmcLiveTextMediaState = (function (_super) {
    __extends(DmcLiveTextMediaState, _super);
    function DmcLiveTextMediaState(mediaStateState, components, canvas) {
        var _this = _super.call(this, mediaStateState, components) || this;
        _this.canvas = canvas;
        return _this;
    }
    return DmcLiveTextMediaState;
}(DmcMediaState));
exports.DmcLiveTextMediaState = DmcLiveTextMediaState;
function dmIsDmcLiveTextMediaState(object) {
    return !lodash_1.isNil(object) && typeof object === 'object' && object instanceof DmcLiveTextMediaState;
}
exports.dmIsDmcLiveTextMediaState = dmIsDmcLiveTextMediaState;
var DmcEvent = (function () {
    function DmcEvent(eventState, transitionStates, commandSequence) {
        this.id = eventState.id;
        this.name = eventState.name;
        this.type = eventState.type;
        this.mediaStateId = eventState.mediaStateId;
        this.disabled = eventState.disabled ? eventState.disabled : false;
        this.data = eventState.data;
        this.action = lodash_1.isNil(eventState.action) ? bscore_1.EventIntrinsicAction.None : eventState.action;
        this.transitionList = [];
        this.commands = [];
        if (Array.isArray(transitionStates) && transitionStates.length > 0) {
            this.transitionList = transitionStates.map(function (state) { return new DmcTransition(state); });
        }
        if (Array.isArray(commandSequence) && commandSequence.length > 0) {
            this.commands = commandSequence.map(function (state) { return new DmcCommand(state); });
        }
    }
    Object.defineProperty(DmcEvent.prototype, "defaultTransition", {
        get: function () {
            if (this.transitionList && this.transitionList.length > 0) {
                var lastTransition = this.transitionList[this.transitionList.length - 1];
                if (lodash_1.isNil(lastTransition.condition)) {
                    return lastTransition;
                }
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcEvent.prototype, "conditionalTransitions", {
        get: function () {
            if (this.transitionList && this.transitionList.length > 0) {
                var lastTransition = this.transitionList[this.transitionList.length - 1];
                if (!lodash_1.isNil(lastTransition.condition)) {
                    return this.transitionList;
                }
                return this.transitionList.slice(0, this.transitionList.length - 1);
            }
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcEvent.prototype, "eventSpecification", {
        get: function () {
            return { type: this.type, data: lodash_1.cloneDeep(this.data), action: this.action };
        },
        enumerable: false,
        configurable: true
    });
    return DmcEvent;
}());
exports.DmcEvent = DmcEvent;
var DmcTransition = (function () {
    function DmcTransition(state, commandSequence) {
        this.id = state.id;
        this.name = state.name;
        this.eventId = state.eventId;
        this.targetMediaStateId = state.targetMediaStateId;
        this.type = state.type;
        this.duration = state.duration;
        if (!lodash_1.isNil(state.condition)) {
            this.condition = new DmcCondition(state.condition);
        }
        else {
            this.condition = null;
        }
        if (!lodash_1.isNil(state.conditionalAction)) {
            this.conditionalAction = state.conditionalAction;
        }
        else {
            this.conditionalAction = bscore_1.EventIntrinsicAction.None;
        }
        this.commands = [];
        if (Array.isArray(commandSequence) && commandSequence.length > 0) {
            this.commands = commandSequence.map(function (commandState) { return new DmcCommand(commandState); });
        }
    }
    Object.defineProperty(DmcTransition.prototype, "isDefaultTarget", {
        get: function () {
            return this.condition === null;
        },
        enumerable: false,
        configurable: true
    });
    return DmcTransition;
}());
exports.DmcTransition = DmcTransition;
var DmcCommand = (function () {
    function DmcCommand(state) {
        this.id = state.id;
        this.name = state.name;
        this.operations = lodash_1.cloneDeep(state.operations);
        this.sequenceId = state.sequenceId;
        if (bsDmCommands_1.dmIsTimedCommand(state)) {
            this.startTime = state.startTime;
        }
        else {
            this.startTime = null;
        }
    }
    Object.defineProperty(DmcCommand.prototype, "isTimedCommand", {
        get: function () {
            return (!lodash_1.isNil(this.startTime));
        },
        enumerable: false,
        configurable: true
    });
    return DmcCommand;
}());
exports.DmcCommand = DmcCommand;
var DmcCondition = (function () {
    function DmcCondition(state, userVariableState) {
        this.userVariableName = null;
        this.userVariableId = state.userVariableId;
        this.compareOperator = state.compareOperator;
        this.compareValue1 = state.compareValue1;
        this.compareValue2 = lodash_1.isNil(state.compareValue2) ? null : state.compareValue2;
        if (userVariableState) {
            this.userVariableName = userVariableState.name;
        }
        else if (!lodash_1.isNil(state.userVariableName)) {
            this.userVariableName = state.userVariableName;
        }
    }
    return DmcCondition;
}());
exports.DmcCondition = DmcCondition;
var DmcZoneLayer = (function () {
    function DmcZoneLayer(state) {
        this.id = state.id;
        this.type = state.type;
        this.zoneSequence = __spreadArrays(state.zoneSequence);
    }
    Object.defineProperty(DmcZoneLayer.prototype, "zoneCount", {
        get: function () {
            return this.zoneSequence.length;
        },
        enumerable: false,
        configurable: true
    });
    return DmcZoneLayer;
}());
exports.DmcZoneLayer = DmcZoneLayer;
function dmIsDmcZoneLayer(object) {
    return !lodash_1.isNil(object) && typeof object === 'object' && object instanceof DmcZoneLayer;
}
exports.dmIsDmcZoneLayer = dmIsDmcZoneLayer;
var DmcVideoZoneLayer = (function (_super) {
    __extends(DmcVideoZoneLayer, _super);
    function DmcVideoZoneLayer(state) {
        var _this = _super.call(this, state) || this;
        _this.zoneLayerSpecificProperties = state.zoneLayerSpecificProperties;
        _this._decoder = bsDmZone_1.dmGetVideoDecoderPropertiesForZoneLayer(state.zoneLayerSpecificProperties);
        return _this;
    }
    Object.defineProperty(DmcVideoZoneLayer.prototype, "videoZoneLayerType", {
        get: function () { return this.zoneLayerSpecificProperties.type; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "index", {
        get: function () { return this.zoneLayerSpecificProperties.index; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "enableMosaicDeinterlacer", {
        get: function () { return this.zoneLayerSpecificProperties.enableMosaicDeinterlacer; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "decoderName", {
        get: function () { return this._decoder.decoderName; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "friendlyName", {
        get: function () { return this._decoder.friendlyName; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "supportedModes", {
        get: function () { return __spreadArrays(this._decoder.supportedModes); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "maxDecoderSize", {
        get: function () { return this._decoder.maxDecoderSize; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "sharableInVideoPlanes", {
        get: function () { return this._decoder.sharableInVideoPlanes; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "canSupportMosaicMode", {
        get: function () {
            return this._decoder.supportedModes.indexOf(bscore_1.VideoDecoderMode.Mosaic) >= 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "mode", {
        get: function () {
            return this.zoneCount > 1 ? bscore_1.VideoDecoderMode.Mosaic : bscore_1.VideoDecoderMode.Regular;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcVideoZoneLayer.prototype, "configuredDecoderSize", {
        get: function () {
            return this.zoneCount > 1 ? bscore_1.VideoDecoderSize.HD : this._decoder.maxDecoderSize;
        },
        enumerable: false,
        configurable: true
    });
    return DmcVideoZoneLayer;
}(DmcZoneLayer));
exports.DmcVideoZoneLayer = DmcVideoZoneLayer;
function dmIsDmcVideoZoneLayer(object) {
    return !lodash_1.isNil(object) && typeof object === 'object' && object instanceof DmcVideoZoneLayer;
}
exports.dmIsDmcVideoZoneLayer = dmIsDmcVideoZoneLayer;
var DmcZone = (function () {
    function DmcZone(state, videoMode, zoneLayers) {
        this.id = state.id;
        this.name = state.name;
        this.type = state.type;
        this.tag = state.tag;
        this.nonInteractive = state.nonInteractive;
        this.initialMediaStateId = state.initialMediaStateId;
        this.position = Object.assign({}, state.position);
        this.properties = lodash_1.cloneDeep(state.properties);
        this.zoneLayers = zoneLayers;
        this._videoMode = videoMode;
        this._containerObject = new DmcMediaStateContainer(this.id);
        Object.freeze(this._containerObject);
    }
    Object.defineProperty(DmcZone.prototype, "containerObject", {
        get: function () {
            return this._containerObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcZone.prototype, "absolutePosition", {
        get: function () {
            return this.position.pct ? bscore_1.bscGetAbsoluteRectForVideoMode(this.position, this._videoMode) : this.position;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcZone.prototype, "percentagePosition", {
        get: function () {
            return this.position.pct ? this.position : bscore_1.bscGetPercentageRectForVideoMode(this.position, this._videoMode);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcZone.prototype, "zoneLayerCount", {
        get: function () {
            return this.zoneLayers.length;
        },
        enumerable: false,
        configurable: true
    });
    DmcZone.prototype.getContainingZoneLayerOfType = function (type) {
        var layer = lodash_1.find(this.zoneLayers, ['type', type]);
        return lodash_1.isNil(layer) ? null : layer;
    };
    return DmcZone;
}());
exports.DmcZone = DmcZone;
var DmcSignMetadata = (function () {
    function DmcSignMetadata(state) {
        this.id = state.properties.id;
        this.version = state.properties.version;
        this.name = state.properties.name;
        this.videoMode = state.properties.videoMode;
        this.model = state.properties.model;
        this.monitorOrientation = state.properties.monitorOrientation;
        this.monitorOverscan = state.properties.monitorOverscan;
        this.videoConnector = state.properties.videoConnector;
        this.deviceWebPageDisplay = state.properties.deviceWebPageDisplay;
        this.backgroundScreenColor = Object.assign({}, state.properties.backgroundScreenColor);
        this.forceResolution = state.properties.forceResolution;
        this.tenBitColorEnabled = state.properties.tenBitColorEnabled;
        this.dolbyVisionEnabled = state.properties.dolbyVisionEnabled;
        this.fullResGraphicsEnabled = state.properties.fullResGraphicsEnabled;
        this.audioConfiguration = state.properties.audioConfiguration;
        this.audioAutoLevel = state.properties.audioAutoLevel;
        this.htmlEnableJavascriptConsole = state.properties.htmlEnableJavascriptConsole;
        this.alphabetizeVariableNames = state.properties.alphabetizeVariableNames;
        this.autoCreateMediaCounterVariables = state.properties.autoCreateMediaCounterVariables;
        this.resetVariablesOnPresentationStart = state.properties.resetVariablesOnPresentationStart;
        this.networkedVariablesUpdateInterval = state.properties.networkedVariablesUpdateInterval;
        this.delayScheduleChangeUntilMediaEndEvent = state.properties.delayScheduleChangeUntilMediaEndEvent;
        this.language = state.properties.language;
        this.languageKey = state.properties.languageKey;
        this.flipCoordinates = state.properties.flipCoordinates;
        this.inactivityTimeout = state.properties.inactivityTimeout;
        this.inactivityTime = state.properties.inactivityTime;
        this.touchCursorDisplayMode = state.properties.touchCursorDisplayMode;
        this.udpDestinationAddressType = state.properties.udpDestinationAddressType;
        this.udpDestinationAddress = state.properties.udpDestinationAddress;
        this.udpDestinationPort = state.properties.udpDestinationPort;
        this.udpReceiverPort = state.properties.udpReceiverPort;
        this.serialPortConfigurations = lodash_1.cloneDeep(state.serialPortConfigurations);
        this.gpio = state.gpio.slice();
        this.buttonPanels = __assign({}, state.buttonPanels);
        this.irRemote = __assign({}, state.irRemote);
        this.audioSignPropertyMap = __assign({}, state.audioSignPropertyMap);
        this.enableEnhancedSynchronization = lodash_1.isNil(state.properties.enableEnhancedSynchronization) ? null : __assign({}, state.properties.enableEnhancedSynchronization);
    }
    return DmcSignMetadata;
}());
exports.DmcSignMetadata = DmcSignMetadata;
var DmcHtmlSite = (function () {
    function DmcHtmlSite(state, indexAssetItem) {
        if (indexAssetItem === void 0) { indexAssetItem = null; }
        this.indexAssetItem = null;
        this.indexAssetId = bscore_1.BsAssetIdNone;
        this.url = null;
        this.enableNode = false;
        this.id = state.id;
        this.name = state.name;
        this.type = state.type;
        this.queryString = state.queryString;
        if (bsDmHtmlSite_1.dmHtmlSiteIsHostedHtmlSite(state)) {
            this.indexAssetItem = indexAssetItem;
            this.indexAssetId = state.indexAssetId;
            this.enableNode = state.enableNode;
        }
        else if (bsDmHtmlSite_1.dmHtmlSiteIsRemoteHtmlSite(state)) {
            this.url = state.url;
        }
    }
    return DmcHtmlSite;
}());
exports.DmcHtmlSite = DmcHtmlSite;
var DmcNodeApp = (function () {
    function DmcNodeApp(state, indexAssetItem) {
        if (indexAssetItem === void 0) { indexAssetItem = null; }
        this.indexAssetItem = null;
        this.indexAssetId = bscore_1.BsAssetIdNone;
        this.id = state.id;
        this.name = state.name;
        this.indexAssetItem = indexAssetItem;
        this.indexAssetId = state.indexAssetId;
    }
    return DmcNodeApp;
}());
exports.DmcNodeApp = DmcNodeApp;
var DmcDeviceWebPage = (function () {
    function DmcDeviceWebPage(state, indexAssetItem) {
        if (indexAssetItem === void 0) { indexAssetItem = null; }
        this.indexAssetId = bscore_1.BsAssetIdNone;
        this.port = 0;
        this.id = state.id;
        this.name = state.name;
        this.indexAssetItem = indexAssetItem;
        this.indexAssetId = state.indexAssetId;
        this.port = state.port;
    }
    return DmcDeviceWebPage;
}());
exports.DmcDeviceWebPage = DmcDeviceWebPage;
var DmcPresentationWebPage = (function () {
    function DmcPresentationWebPage(mode, customPageState, customPageAssetItem) {
        this.customPage = null;
        this.mode = mode;
        if (!lodash_1.isNil(customPageState)) {
            this.customPage = new DmcDeviceWebPage(customPageState, customPageAssetItem);
        }
    }
    return DmcPresentationWebPage;
}());
exports.DmcPresentationWebPage = DmcPresentationWebPage;
var DmcDataFeed = (function () {
    function DmcDataFeed(params) {
        this.id = params.dataFeed.id;
        this.name = params.dataFeed.name;
        this.feedSourceId = params.dataFeed.feedSourceId;
        this._feedSource = params.feedSource;
        this.bsnAssetItem = lodash_1.isNil(params.assetItem) ? null : params.assetItem;
        this.usage = params.dataFeed.usage;
        this.parserPlugin = lodash_1.isNil(params.dataFeed.parserPlugin) ? bsDmInterfaces_1.BsDmIdNone : params.dataFeed.parserPlugin;
        this.autoGenerateUserVariables = params.dataFeed.autoGenerateUserVariables;
        this.userVariableAccess = params.dataFeed.userVariableAccess;
        this.isSystemFeed = lodash_1.isNil(params.dataFeed.isSystemFeed) ? false : params.dataFeed.isSystemFeed;
        if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(params.feedSource)) {
            this.supportsAudio = params.dataFeed.supportsAudio;
            this.playerTagMatching = params.dataFeed.playerTagMatching;
        }
        else {
            this.supportsAudio = false;
            this.playerTagMatching = bscore_1.PlayerTagMatchingType.DoNotMatchTags;
        }
    }
    Object.defineProperty(DmcDataFeed.prototype, "type", {
        get: function () {
            return this._feedSource.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcDataFeed.prototype, "isBsnDataFeed", {
        get: function () {
            return this._feedSource.type !== bscore_1.DataFeedType.URLDataFeed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcDataFeed.prototype, "updateInterval", {
        get: function () {
            return this._feedSource.updateInterval;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcDataFeed.prototype, "useHeadRequest", {
        get: function () {
            return this._feedSource.useHeadRequest;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DmcDataFeed.prototype, "url", {
        get: function () {
            return bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(this._feedSource) ? this._feedSource.url :
                (!lodash_1.isNil(this.bsnAssetItem) && !lodash_1.isNil(this.bsnAssetItem.fileUrl) ? this.bsnAssetItem.fileUrl : '');
        },
        enumerable: false,
        configurable: true
    });
    return DmcDataFeed;
}());
exports.DmcDataFeed = DmcDataFeed;
var DmcUserVariable = (function () {
    function DmcUserVariable(state) {
        this.id = state.id;
        this.name = state.name;
        this.defaultValue = state.defaultValue;
        this.isNetworked = state.isNetworked;
        this.access = state.access;
        this.dataFeedId = state.dataFeedId;
        this.systemVariable = state.systemVariable;
    }
    return DmcUserVariable;
}());
exports.DmcUserVariable = DmcUserVariable;
var DmcBrightScriptPlugin = (function () {
    function DmcBrightScriptPlugin(state, scriptAssetItem) {
        this.id = state.id;
        this.name = state.name;
        this.assetId = state.assetId;
        this.assetItem = scriptAssetItem;
    }
    return DmcBrightScriptPlugin;
}());
exports.DmcBrightScriptPlugin = DmcBrightScriptPlugin;
var DmcParserBrightScriptPlugin = (function () {
    function DmcParserBrightScriptPlugin(state, scriptAssetItem) {
        this.id = state.id;
        this.name = state.name;
        this.assetId = state.assetId;
        this.parseFeedFunctionName = state.parseFeedFunctionName;
        this.parseUVFunctionName = state.parseUVFunctionName;
        this.userAgentFunctionName = state.userAgentFunctionName;
        this.assetItem = scriptAssetItem;
    }
    return DmcParserBrightScriptPlugin;
}());
exports.DmcParserBrightScriptPlugin = DmcParserBrightScriptPlugin;
var DmcVideoModeBrightScriptPlugin = (function () {
    function DmcVideoModeBrightScriptPlugin(state, videoModeAssetItem) {
        this.id = state.id;
        this.name = state.name;
        this.assetId = state.assetId;
        this.assetItem = videoModeAssetItem;
        this.functionName = state.functionName;
    }
    return DmcVideoModeBrightScriptPlugin;
}());
exports.DmcVideoModeBrightScriptPlugin = DmcVideoModeBrightScriptPlugin;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmSetAssetId = exports.dmPrepareAssetItem = exports.dmGetFilteredAssetItem = exports.BaseAssetItemProperties = void 0;
var lodash_1 = __webpack_require__(0);
var bscore_1 = __webpack_require__(1);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
exports.BaseAssetItemProperties = [
    'id',
    'name',
    'path',
    'networkId',
    'location',
    'assetType',
    'scope',
    'origin',
    'locator',
    'mediaType',
    'fileSize',
    'fileHash',
    'fileUrl',
    'thumbUrl',
    'lastModifiedDate',
    'probeData',
    'refCount',
];
function dmGetFilteredAssetItem(assetItem) {
    return lodash_1.pick(assetItem, exports.BaseAssetItemProperties);
}
exports.dmGetFilteredAssetItem = dmGetFilteredAssetItem;
function dmPrepareAssetItem(state, assetItem, action) {
    var locator = bscore_1.bscGenerateAssetLocatorKey(assetItem);
    if (!locator) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Asset Item does not contain valid locator information', { action: action });
    }
    var preparedAssetItem = dmGetFilteredAssetItem(assetItem);
    preparedAssetItem.locator = locator;
    if (!preparedAssetItem.id || preparedAssetItem.id === bscore_1.BsAssetIdNone) {
        var assetId = selectors_1.dmGetAssetIdByLocator(state, { locator: locator });
        preparedAssetItem.id = assetId ? assetId : utils_1.newBsDmId();
    }
    return preparedAssetItem;
}
exports.dmPrepareAssetItem = dmPrepareAssetItem;
function dmSetAssetId(state, assetItem) {
    var locator = bscore_1.bscGenerateAssetLocatorKey(assetItem);
    var preparedAssetItem = dmGetFilteredAssetItem(assetItem);
    var assetId = selectors_1.dmGetAssetIdByLocator(state, { locator: locator });
    preparedAssetItem.id = assetId && assetId !== bscore_1.BsAssetIdNone ? assetId : utils_1.newBsDmId();
    preparedAssetItem.locator = locator;
    return preparedAssetItem;
}
exports.dmSetAssetId = dmSetAssetId;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetZoneUpdateVideoModeAction = exports.dmGetDeleteZoneLayerAction = exports.dmGetAddZoneLayerAction = exports.dmGetDefaultLayerIdParams = exports.dmGetUpdatedZoneLayersForChangedZoneType = exports.dmGetUpdatedZoneLayersForAddedZone = exports.dmMoveMosaicZonesAtIndices = exports.dmMoveZoneLayersAtIndices = exports.dmClearZone = exports.dmDeleteZone = exports.dmDeleteZoneWithParams = exports.dmUpdateZoneAudioOutputAssignments = exports.dmUpdateClockOrTickerZoneWidget = exports.dmUpdateZoneProperties = exports.dmUpdateZone = exports.dmUpdateZoneWithoutTest = exports.dmAddDefaultZone = exports.dmGetAddZoneAction = exports.dmAddZone = exports.getDisabledAudioOutputAssignmentMap = exports.createDefaultZoneProperties = exports.createDefaultZoneState = exports.ADD_ZONE_LAYER = exports.DELETE_ZONE_LAYER = exports.MOVE_MOSAIC_ZONES = exports.MOVE_ZONE_LAYERS = exports.DELETE_ZONE = exports.UPDATE_ZONE_PROPS = exports.UPDATE_ZONE = exports.ADD_ZONE = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmAssetItems_1 = __webpack_require__(43);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmZone_1 = __webpack_require__(31);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var selectors_1 = __webpack_require__(6);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionMediaState_1 = __webpack_require__(11);
var lodash_1 = __webpack_require__(0);
exports.ADD_ZONE = 'DM_ADD_ZONE';
exports.UPDATE_ZONE = 'DM_UPDATE_ZONE';
exports.UPDATE_ZONE_PROPS = 'DM_UPDATE_ZONE_PROPS';
exports.DELETE_ZONE = 'DM_DELETE_ZONE';
exports.MOVE_ZONE_LAYERS = 'DM_MOVE_ZONE_LAYERS';
exports.MOVE_MOSAIC_ZONES = 'DM_MOVE_MOSAIC_ZONES';
exports.DELETE_ZONE_LAYER = 'DM_DELETE_ZONE_LAYER';
exports.ADD_ZONE_LAYER = 'DM_ADD_ZONE_LAYER';
var createDefaultZoneState = function (id, name, type, tag, nonInteractive, position, disableAudio) { return ({
    id: id,
    name: name,
    type: type,
    tag: tag,
    nonInteractive: lodash_1.isNil(nonInteractive) ? true : nonInteractive,
    initialMediaStateId: bsDmInterfaces_1.BsDmIdNone,
    position: lodash_1.isNil(position) ? __assign({}, bscore_1.BsRectFull) : position,
    properties: exports.createDefaultZoneProperties(type, disableAudio),
}); };
exports.createDefaultZoneState = createDefaultZoneState;
var createDefaultZoneProperties = function (type, disableAudio) {
    switch (type) {
        case bscore_1.ZoneType.VideoOrImages:
            var viZoneProps = Object.assign(bsDmDefaults_1.dmGetDefaultVideoZoneProperties(), bsDmDefaults_1.dmGetDefaultAudioZoneProperties(), bsDmDefaults_1.dmGetDefaultImageZoneProperties());
            if (disableAudio) {
                viZoneProps.audioOutputAssignments = exports.getDisabledAudioOutputAssignmentMap();
            }
            return viZoneProps;
        case bscore_1.ZoneType.VideoOnly:
            var vZoneProps = Object.assign(bsDmDefaults_1.dmGetDefaultVideoZoneProperties(), bsDmDefaults_1.dmGetDefaultAudioZoneProperties());
            if (disableAudio) {
                vZoneProps.audioOutputAssignments = exports.getDisabledAudioOutputAssignmentMap();
            }
            return vZoneProps;
        case bscore_1.ZoneType.Images:
            return bsDmDefaults_1.dmGetDefaultImageZoneProperties();
        case bscore_1.ZoneType.AudioOnly:
            return bsDmDefaults_1.dmGetDefaultAudioZoneProperties();
        case bscore_1.ZoneType.EnhancedAudio:
            return Object.assign(bsDmDefaults_1.dmGetDefaultAudioZoneProperties(), bsDmDefaults_1.dmGetDefaultEnhancedAudioZoneProperties());
        case bscore_1.ZoneType.Ticker:
            return bsDmDefaults_1.dmGetDefaultTickerZoneProperties();
        case bscore_1.ZoneType.Clock:
            return bsDmDefaults_1.dmGetDefaultClockZoneProperties();
    }
    return {};
};
exports.createDefaultZoneProperties = createDefaultZoneProperties;
var getDisabledAudioOutputAssignmentMap = function () {
    return bscore_1.AudioOutputNameArray.reduce(function (acc, audioOutputName) {
        acc[audioOutputName] = bscore_1.AudioOutputType.None;
        return acc;
    }, {});
};
exports.getDisabledAudioOutputAssignmentMap = getDisabledAudioOutputAssignmentMap;
function dmAddZone(name, type, tag, params) {
    if (params === void 0) { params = {}; }
    return function (dispatch, getState) {
        var state = bsDmState_1.dmFilterDmState(getState());
        var zoneLayerIdParams = null;
        if (!lodash_1.isNil(params.zoneLayerIdParams)) {
            if (!dmValidZoneLayerIdParams(type, params.zoneLayerIdParams)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddZone: invalid layer id params specified');
            }
            zoneLayerIdParams = params.zoneLayerIdParams;
        }
        if (lodash_1.isNil(zoneLayerIdParams) || Object.keys(zoneLayerIdParams).length === 0) {
            zoneLayerIdParams = dmGetDefaultLayerIdParams(state, type, params.allowTransitionToMosaic);
        }
        var setZoneParams = {
            type: type,
            zoneLayerIdParams: zoneLayerIdParams,
            allowTransitionToMosaic: params.allowTransitionToMosaic,
            zoneHasAudio: !lodash_1.isNil(params.allowDisabledAudio) && !params.allowDisabledAudio,
        };
        if (!selectors_1.dmCanAddZone(state, setZoneParams)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddZone: No additional zones of type ' + type + ' can be added');
        }
        var nonInteractive = !lodash_1.isNil(params.nonInteractive) && bsDmZone_1.dmCanZoneTypeBeInteractive(type) ?
            params.nonInteractive : true;
        var disableAudio = (lodash_1.isNil(params.allowDisabledAudio) || params.allowDisabledAudio)
            && bsDmZone_1.dmIsPlayableVideoZoneType(type)
            && !selectors_1.dmAreAudioDecodersAvailableForZone(state, type);
        var action = dmGetAddZoneAction(selectors_1.dmGetSignPlayerModel(state), name, type, tag, zoneLayerIdParams, selectors_1.dmGetZoneLayerMap(state), nonInteractive, params.position, disableAudio);
        return dispatch(action);
    };
}
exports.dmAddZone = dmAddZone;
function dmGetAddZoneAction(playerModel, name, type, tag, zoneLayerIdParams, existingZoneLayerMap, nonInteractive, position, disableAudio) {
    var zone = exports.createDefaultZoneState(utils_1.newBsDmId(), name, type, tag, nonInteractive, position, disableAudio);
    if (type === bscore_1.ZoneType.Ticker) {
        var zoneProps = zone.properties;
        if (zoneProps.textWidget.scrollingMethod === bscore_1.TextScrollingMethodType.Scrolling
            && !bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.ScrollingTicker)) {
            zone.properties.textWidget.scrollingMethod = bscore_1.TextScrollingMethodType.StaticText;
        }
    }
    return {
        type: exports.ADD_ZONE,
        payload: {
            id: zone.id,
            zone: zone,
            zoneLayerMap: dmGetUpdatedZoneLayersForAddedZone(zone.id, zoneLayerIdParams, existingZoneLayerMap),
        },
    };
}
exports.dmGetAddZoneAction = dmGetAddZoneAction;
function dmAddDefaultZone(name, tag, params) {
    if (params === void 0) { params = {}; }
    return function (dispatch, getState) {
        var state = bsDmState_1.dmFilterDmState(getState());
        var type;
        var zoneLayerIdParams = dmGetDefaultLayerIdParams(state, bscore_1.ZoneType.VideoOrImages, params.allowTransitionToMosaic);
        if (selectors_1.dmCanAddZone(state, {
            type: bscore_1.ZoneType.VideoOrImages,
            zoneLayerIdParams: zoneLayerIdParams,
            allowTransitionToMosaic: params.allowTransitionToMosaic,
        })) {
            type = bscore_1.ZoneType.VideoOrImages;
        }
        else {
            zoneLayerIdParams = dmGetDefaultLayerIdParams(state, bscore_1.ZoneType.VideoOnly, params.allowTransitionToMosaic);
            if (selectors_1.dmCanAddZone(state, {
                type: bscore_1.ZoneType.VideoOnly,
                zoneLayerIdParams: zoneLayerIdParams,
                allowTransitionToMosaic: params.allowTransitionToMosaic,
            })) {
                type = bscore_1.ZoneType.VideoOnly;
            }
            else {
                zoneLayerIdParams = dmGetDefaultLayerIdParams(state, bscore_1.ZoneType.Images);
                if (selectors_1.dmCanAddZone(state, { type: bscore_1.ZoneType.Images })) {
                    type = bscore_1.ZoneType.Images;
                }
                else if (selectors_1.dmCanAddZone(state, { type: bscore_1.ZoneType.Ticker })) {
                    type = bscore_1.ZoneType.Ticker;
                }
                else {
                    zoneLayerIdParams = dmGetDefaultLayerIdParams(state, bscore_1.ZoneType.AudioOnly);
                    if (selectors_1.dmCanAddZone(state, { type: bscore_1.ZoneType.AudioOnly })) {
                        type = bscore_1.ZoneType.AudioOnly;
                    }
                    else if (selectors_1.dmCanAddZone(state, { type: bscore_1.ZoneType.EnhancedAudio })) {
                        type = bscore_1.ZoneType.EnhancedAudio;
                    }
                    else if (selectors_1.dmCanAddZone(state, { type: bscore_1.ZoneType.Control })) {
                        type = bscore_1.ZoneType.Control;
                        params.nonInteractive = false;
                    }
                    else {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'No available zone can be added');
                    }
                }
            }
        }
        var results = selectors_1.dmGetCanAddZone(state, { type: type, zoneLayerIdParams: zoneLayerIdParams, allowTransitionToMosaic: params.allowTransitionToMosaic });
        if (!results.canSetZone || lodash_1.isNil(results.zoneLayerIdParams)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Unable to add default zone.');
        }
        var action = dmGetAddZoneAction(selectors_1.dmGetSignPlayerModel(state), name, type, tag, zoneLayerIdParams, selectors_1.dmGetZoneLayerMap(state), params.nonInteractive, params.position);
        return dispatch(action);
    };
}
exports.dmAddDefaultZone = dmAddDefaultZone;
var dmUpdateZoneWithoutTest = function (zoneParams) { return ({
    type: exports.UPDATE_ZONE,
    payload: {
        zoneParams: zoneParams,
        zoneLayerMap: null,
    },
}); };
exports.dmUpdateZoneWithoutTest = dmUpdateZoneWithoutTest;
function dmUpdateZone(zoneParams, layerParams) {
    if (layerParams === void 0) { layerParams = {}; }
    return function (dispatch, getState) {
        var state = bsDmState_1.dmFilterDmState(getState());
        var existingZoneState = selectors_1.dmGetZoneStateById(state, { id: zoneParams.id });
        if (!lodash_1.isNil(existingZoneState)) {
            var action = {
                type: exports.UPDATE_ZONE,
                payload: {
                    zoneParams: zoneParams,
                    zoneLayerMap: null,
                },
            };
            if (!lodash_1.isNil(zoneParams.initialMediaStateId)) {
                var mediaStates = selectors_1.dmGetMediaStateIdsForZone(state, { id: zoneParams.id });
                if (mediaStates.indexOf(zoneParams.initialMediaStateId) < 0) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZone: Invalid initial media state', { action: action });
                }
            }
            if (action.payload.zoneParams.hasOwnProperty('properties')) {
                action.payload.zoneParams = lodash_1.omit(action.payload.zoneParams, 'properties');
            }
            if (!lodash_1.isNil(zoneParams.type) && existingZoneState.type !== zoneParams.type) {
                var zoneLayerIdParams = !lodash_1.isNil(layerParams.zoneLayerIdParams) ?
                    layerParams.zoneLayerIdParams :
                    dmGetDefaultLayerIdParams(state, zoneParams.type, layerParams.allowTransitionToMosaic);
                var allowTransitionToMosaic = !lodash_1.isNil(layerParams.allowTransitionToMosaic) && layerParams.allowTransitionToMosaic;
                var canChangeZoneTypeResults = selectors_1.dmGetCanChangeZoneType(state, { id: zoneParams.id, type: zoneParams.type, zoneLayerIdParams: zoneLayerIdParams, allowTransitionToMosaic: allowTransitionToMosaic });
                if (!canChangeZoneTypeResults.canSetZone) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZone: Zone type change not allowed.', { action: action });
                }
                zoneLayerIdParams = canChangeZoneTypeResults.zoneLayerIdParams;
                var newZoneProperties = exports.createDefaultZoneProperties(zoneParams.type);
                var carryOverProperties = lodash_1.pick(existingZoneState.properties, Object.keys(newZoneProperties));
                newZoneProperties = Object.assign(newZoneProperties, carryOverProperties);
                action.payload.zoneParams = Object.assign(zoneParams, { properties: newZoneProperties });
                if (!bsDmZone_1.dmCanZoneTypeBeInteractive(zoneParams.type)) {
                    action.payload.zoneParams.nonInteractive = true;
                }
                if (!bsDmZone_1.dmCanZoneTypeBeNonInteractive(zoneParams.type)) {
                    action.payload.zoneParams.nonInteractive = false;
                }
                action.payload.zoneLayerMap =
                    dmGetUpdatedZoneLayersForChangedZoneType(zoneParams.id, zoneLayerIdParams, selectors_1.dmGetZoneLayerMap(state));
            }
            else if (!lodash_1.isNil(zoneParams.nonInteractive) && !bsDmZone_1.dmCanZoneTypeBeInteractive(existingZoneState.type)) {
                action.payload.zoneParams.nonInteractive = true;
            }
            return dispatch(action);
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZone: invalid zone ID');
        }
    };
}
exports.dmUpdateZone = dmUpdateZone;
function dmUpdateZoneProperties(params) {
    return function (dispatch, getState) {
        return doUpdateZoneProperties(params, dispatch, getState);
    };
}
exports.dmUpdateZoneProperties = dmUpdateZoneProperties;
function doUpdateZoneProperties(params, dispatch, getState) {
    var mainAction = { type: exports.UPDATE_ZONE_PROPS, payload: params };
    var dmState = bsDmState_1.dmFilterDmState(getState());
    var zoneType = selectors_1.dmGetZoneTypeById(dmState, { id: params.id });
    if (params.type !== zoneType) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneProperties: Properties are specified for a "' + params.type + '" zone, but this zone is a "' +
            zoneType + '" zone', { action: mainAction });
    }
    else if (zoneType === bscore_1.ZoneType.BackgroundImage) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneProperties: BackgroundImage zone has no properties', { action: mainAction });
    }
    else if (zoneType === bscore_1.ZoneType.Control) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneProperties: Control zone has no properties', { action: mainAction });
    }
    var batchedActions = [];
    if (bsDmZone_1.dmIsPlayableVideoZoneType(zoneType)) {
        var audioProperties = params.properties;
        if (!lodash_1.isNil(audioProperties.audioOutputAssignments)
            && utils_1.audioOutputAssignmentsHaveActiveAudio(audioProperties.audioOutputAssignments)
            && !selectors_1.dmCanSetAudioOutputForZone(dmState, { id: params.id })) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.noAudioDecodersAvailable, 'UpdateZoneProperties: Cannot enable audio output in this zone');
        }
    }
    else if (zoneType === bscore_1.ZoneType.Ticker || zoneType === bscore_1.ZoneType.Clock) {
        var propertiesWithBkgAndFont = params.properties;
        var revisedProperties = lodash_1.omit(propertiesWithBkgAndFont, ['backgroundAsset', 'fontAsset']);
        var currentProperties = selectors_1.dmGetZonePropertiesById(dmState, { id: params.id });
        var currentZoneWidget = currentProperties.widget;
        if (propertiesWithBkgAndFont.hasOwnProperty('backgroundAsset')) {
            if (revisedProperties.widget) {
                revisedProperties.widget.backgroundBitmapAssetId = bscore_1.BsAssetIdNone;
            }
            else {
                revisedProperties.widget = { backgroundBitmapAssetId: bscore_1.BsAssetIdNone };
            }
            var assetIdToDelete = currentZoneWidget.backgroundBitmapAssetId;
            if (bscore_1.bscIsValidAssetId(assetIdToDelete)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(assetIdToDelete));
            }
            if (bscore_1.bscIsAssetItem(propertiesWithBkgAndFont.backgroundAsset)) {
                if (propertiesWithBkgAndFont.backgroundAsset.assetType !== bscore_1.AssetType.Content
                    || propertiesWithBkgAndFont.backgroundAsset.mediaType !== bscore_1.MediaType.Image) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneProperties: Background asset for Widget must be an Image');
                }
                var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, propertiesWithBkgAndFont.backgroundAsset, mainAction);
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                revisedProperties.widget.backgroundBitmapAssetId = assetItem.id;
            }
        }
        if (propertiesWithBkgAndFont.hasOwnProperty('fontAsset')) {
            if (!lodash_1.isNil(revisedProperties.widget)) {
                revisedProperties.widget.font = bsDmInterfaces_1.DmDefaultFontName;
            }
            else {
                revisedProperties.widget = { font: bsDmInterfaces_1.DmDefaultFontName };
            }
            var assetIdToDelete = bsDmContentItems_1.dmGetWidgetCustomFontAssetId(currentZoneWidget);
            if (bscore_1.bscIsValidAssetId(assetIdToDelete)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(assetIdToDelete));
            }
            if (bscore_1.bscIsAssetItem(propertiesWithBkgAndFont.fontAsset)) {
                if (bsDmAssetItems_1.dmIsFontAssetItem(propertiesWithBkgAndFont.fontAsset)) {
                    var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, propertiesWithBkgAndFont.fontAsset, mainAction);
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    revisedProperties.widget.font = assetItem.id;
                }
                else {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneProperties: invalid font assetItem for Widget');
                }
            }
        }
        mainAction.payload.properties = revisedProperties;
    }
    batchedActions.push(mainAction);
    dispatch(actionBase_1.dmBatchActions(batchedActions));
    return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
}
function dmUpdateClockOrTickerZoneWidget(id, type, widget) {
    return {
        type: exports.UPDATE_ZONE_PROPS,
        payload: {
            id: id,
            type: type,
            properties: { widget: widget },
        },
    };
}
exports.dmUpdateClockOrTickerZoneWidget = dmUpdateClockOrTickerZoneWidget;
function dmUpdateZoneAudioOutputAssignments(id, audioOutputSpec) {
    return function (dispatch, getState) {
        var zoneType = selectors_1.dmGetZoneTypeById(bsDmState_1.dmFilterDmState(getState()), { id: id });
        if (!lodash_1.isNil(zoneType)) {
            if (!bsDmZone_1.dmZoneTypeUsesAudioDecoder(zoneType)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, "UpdateZoneAudioOutputAssignments: Cannot update audio output assignments for " + zoneType + " zone");
            }
            var params = {
                id: id,
                type: zoneType,
                properties: { audioOutputAssignments: bsDmZone_1.dmGetAudioOutputAssignmentMapFromSpec(audioOutputSpec) },
            };
            return doUpdateZoneProperties(params, dispatch, getState);
        }
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateZoneAudioOutputAssignments: invalid zone ID');
    };
}
exports.dmUpdateZoneAudioOutputAssignments = dmUpdateZoneAudioOutputAssignments;
function dmDeleteZoneWithParams(params) {
    return {
        type: exports.DELETE_ZONE,
        payload: params,
    };
}
exports.dmDeleteZoneWithParams = dmDeleteZoneWithParams;
function dmDeleteZone(id) {
    return function (dispatch, getState) {
        var _a;
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaStateIds = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: id });
        var mediaStateDeleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIds);
        var zoneDeleteParams = __assign({ zoneId: id }, mediaStateDeleteParams);
        var zoneAssetIds = selectors_1.dmGetZonePropertyAssetItemIds(dmState, { id: id });
        if (zoneAssetIds.length) {
            (_a = zoneDeleteParams.assetIds).push.apply(_a, zoneAssetIds);
        }
        var zoneCommandIds = selectors_1.dmGetZoneCommandIdsForZone(dmState, { id: id });
        if (zoneCommandIds.length) {
            zoneDeleteParams.commandIds = lodash_1.uniq(__spreadArrays(zoneDeleteParams.commandIds, zoneCommandIds));
        }
        return dispatch(dmDeleteZoneWithParams(zoneDeleteParams));
    };
}
exports.dmDeleteZone = dmDeleteZone;
function dmClearZone(id) {
    return function (dispatch, getState) {
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaStateIds = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: id });
        var mediaStateDeleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIds);
        var mainAction = actionMediaState_1.dmDeleteMediaStateWithParams(mediaStateDeleteParams);
        batchedActions.push(mainAction);
        batchedActions.push(exports.dmUpdateZoneWithoutTest({ id: id, initialMediaStateId: bsDmInterfaces_1.BsDmIdNone }));
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmClearZone = dmClearZone;
function dmMoveZoneLayersAtIndices(indices, targetIndex) {
    return {
        type: exports.MOVE_ZONE_LAYERS,
        payload: {
            indices: Array.isArray(indices) ? indices : [indices],
            targetIndex: targetIndex,
        },
    };
}
exports.dmMoveZoneLayersAtIndices = dmMoveZoneLayersAtIndices;
function dmMoveMosaicZonesAtIndices(layerId, indices, targetIndex) {
    return {
        type: exports.MOVE_MOSAIC_ZONES,
        payload: {
            layerId: layerId,
            indices: Array.isArray(indices) ? indices : [indices],
            targetIndex: targetIndex,
        },
    };
}
exports.dmMoveMosaicZonesAtIndices = dmMoveMosaicZonesAtIndices;
function dmGetUpdatedZoneLayersForAddedZone(zoneId, zoneLayerIdParams, existingZoneLayerMap) {
    var changedZoneLayers = {};
    if (!lodash_1.isNil(zoneLayerIdParams)) {
        Object.keys(zoneLayerIdParams).forEach(function (layerIdKey) {
            var layerId = zoneLayerIdParams[layerIdKey];
            if (utils_1.isValidBsDmId(layerId)) {
                var revisedZoneLayer = lodash_1.cloneDeep(existingZoneLayerMap[layerId]);
                revisedZoneLayer.zoneSequence.push(zoneId);
                changedZoneLayers[layerId] = revisedZoneLayer;
            }
        });
    }
    return changedZoneLayers;
}
exports.dmGetUpdatedZoneLayersForAddedZone = dmGetUpdatedZoneLayersForAddedZone;
function dmGetUpdatedZoneLayersForChangedZoneType(zoneId, zoneLayerIdParams, existingZoneLayerMap) {
    var changedZoneLayers = {};
    if (lodash_1.isNil(zoneLayerIdParams)) {
        zoneLayerIdParams = {};
    }
    Object.keys(existingZoneLayerMap).forEach(function (layerId) {
        var existingLayer = existingZoneLayerMap[layerId];
        var layerIdEntry = lodash_1.find(zoneLayerIdParams, function (val) { return val === layerId; });
        if (lodash_1.isNil(layerIdEntry)) {
            var layerSequence = existingLayer.zoneSequence;
            var zoneIndex = layerSequence.indexOf(zoneId);
            if (zoneIndex >= 0) {
                changedZoneLayers[layerId] = __assign(__assign({}, existingLayer), { zoneSequence: lodash_1.without(layerSequence, zoneId) });
            }
        }
        else {
            var layerSequence = existingLayer.zoneSequence;
            var zoneIndex = layerSequence.indexOf(zoneId);
            if (zoneIndex < 0) {
                changedZoneLayers[layerId] = __assign(__assign({}, existingLayer), { zoneSequence: layerSequence.concat([zoneId]) });
            }
        }
    });
    return Object.keys(changedZoneLayers).length > 0 ? changedZoneLayers : null;
}
exports.dmGetUpdatedZoneLayersForChangedZoneType = dmGetUpdatedZoneLayersForChangedZoneType;
function dmGetDefaultLayerIdParams(state, type, allowTransitionToMosaic) {
    var allowMosaic = lodash_1.isNil(allowTransitionToMosaic) ? false : allowTransitionToMosaic;
    var zoneLayerIdsInSign = selectors_1.dmGetZoneLayerIdsInSign(state);
    var zoneLayerIdParams = {};
    var availableVideoLayer = null;
    switch (type) {
        case bscore_1.ZoneType.VideoOrImages:
            availableVideoLayer = selectors_1.dmGetDefaultVideoLayer(state, allowMosaic);
            if (!lodash_1.isNil(availableVideoLayer)) {
                zoneLayerIdParams.videoLayerId = availableVideoLayer.id;
            }
            zoneLayerIdParams.graphicsLayerId = zoneLayerIdsInSign.graphicsLayerId;
            break;
        case bscore_1.ZoneType.VideoOnly:
            availableVideoLayer = selectors_1.dmGetDefaultVideoLayer(state, allowMosaic);
            if (!lodash_1.isNil(availableVideoLayer)) {
                zoneLayerIdParams.videoLayerId = availableVideoLayer.id;
            }
            break;
        case bscore_1.ZoneType.Images:
        case bscore_1.ZoneType.Clock:
        case bscore_1.ZoneType.Ticker:
            zoneLayerIdParams.graphicsLayerId = zoneLayerIdsInSign.graphicsLayerId;
            break;
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            zoneLayerIdParams.audioLayerId = zoneLayerIdsInSign.audioLayerId;
            break;
        case bscore_1.ZoneType.BackgroundImage:
            if (selectors_1.dmCanAddBackgroundImageZoneToLayer(state, zoneLayerIdsInSign.videoLayer1Id)) {
                zoneLayerIdParams.videoLayerId = zoneLayerIdsInSign.videoLayer1Id;
            }
            else if (!lodash_1.isNil(zoneLayerIdsInSign.videoLayer2Id)
                && selectors_1.dmCanAddBackgroundImageZoneToLayer(state, zoneLayerIdsInSign.videoLayer2Id)) {
                zoneLayerIdParams.videoLayerId = zoneLayerIdsInSign.videoLayer2Id;
            }
            break;
    }
    return zoneLayerIdParams;
}
exports.dmGetDefaultLayerIdParams = dmGetDefaultLayerIdParams;
function dmValidZoneLayerIdParams(type, zoneLayerIdParams) {
    switch (type) {
        case bscore_1.ZoneType.VideoOrImages:
            return zoneLayerIdParams.hasOwnProperty(bsDmInterfaces_1.DmVideoLayerId) && zoneLayerIdParams.hasOwnProperty(bsDmInterfaces_1.DmGraphicsLayerId);
        case bscore_1.ZoneType.VideoOnly:
        case bscore_1.ZoneType.BackgroundImage:
            return zoneLayerIdParams.hasOwnProperty(bsDmInterfaces_1.DmVideoLayerId);
        case bscore_1.ZoneType.Images:
        case bscore_1.ZoneType.Clock:
        case bscore_1.ZoneType.Ticker:
            return zoneLayerIdParams.hasOwnProperty(bsDmInterfaces_1.DmGraphicsLayerId);
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            return zoneLayerIdParams.hasOwnProperty(bsDmInterfaces_1.DmAudioLayerId);
    }
    return false;
}
function dmGetAddZoneLayerAction(zoneLayer) {
    var _a;
    return {
        type: exports.ADD_ZONE_LAYER,
        payload: {
            zoneLayerId: zoneLayer.id,
            zoneLayerMap: (_a = {}, _a[zoneLayer.id] = zoneLayer, _a),
        },
    };
}
exports.dmGetAddZoneLayerAction = dmGetAddZoneLayerAction;
function dmGetDeleteZoneLayerAction(zoneLayerId) {
    return {
        type: exports.DELETE_ZONE_LAYER,
        payload: {
            zoneLayerId: zoneLayerId,
        },
    };
}
exports.dmGetDeleteZoneLayerAction = dmGetDeleteZoneLayerAction;
function dmGetZoneUpdateVideoModeAction(targetVideoMode, dmState) {
    var isTargetVideoModeHDOrSmaller = bscore_1.bscIsHDVideoResolutionOrSmaller(targetVideoMode);
    var currentVideoMode = selectors_1.dmGetSignVideoMode(dmState);
    var isCurrentVideModeHDOrSmaller = bscore_1.bscIsHDVideoResolutionOrSmaller(currentVideoMode);
    var playerModel = selectors_1.dmGetSignPlayerModel(dmState);
    var playerCapabilities = bscore_1.bscGetPlayerCapabilities(playerModel);
    var action = null;
    if (playerCapabilities.videoDecoder4kCount === 1
        && playerCapabilities.videoPlaneCount > 1) {
        if (isCurrentVideModeHDOrSmaller && !isTargetVideoModeHDOrSmaller) {
            var unusedVideoLayer = selectors_1.dmGetUnusedVideoLayer(dmState);
            if (!lodash_1.isNil(unusedVideoLayer)) {
                action = dmGetDeleteZoneLayerAction(unusedVideoLayer.id);
            }
        }
        else if (!isCurrentVideModeHDOrSmaller && isTargetVideoModeHDOrSmaller) {
            var videoDecoders = bsDmZone_1.dmGetVideoDecodersByModel(playerModel);
            var videoLayer = bsDmZone_1.dmCreateDefaultVideoZoneLayer(videoDecoders[0], 1, targetVideoMode);
            action = dmGetAddZoneLayerAction(videoLayer);
        }
    }
    return action;
}
exports.dmGetZoneUpdateVideoModeAction = dmGetZoneUpdateVideoModeAction;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsDataFeedSourceBsnDataFeed = exports.dmIsDataFeedSourceRemoteDataFeed = exports.dmIsDataFeedSourceSpecification = exports.dmIsRemoteDataFeedSourceSpecification = exports.dmIsBsnDataFeedSourceSpecification = exports.dmCreateBsnDataFeedSpecification = exports.dmCreateRemoteDataFeedSpecification = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var lodash_1 = __webpack_require__(0);
function dmCreateRemoteDataFeedSpecification(url, usage, updateInterval, useHeadRequest) {
    var spec = {
        type: 'URLDataFeed',
        usage: usage,
        url: url,
    };
    if (!lodash_1.isNil(updateInterval)) {
        spec.updateInterval = updateInterval;
    }
    if (!lodash_1.isNil(useHeadRequest)) {
        spec.useHeadRequest = useHeadRequest;
    }
    return spec;
}
exports.dmCreateRemoteDataFeedSpecification = dmCreateRemoteDataFeedSpecification;
function dmCreateBsnDataFeedSpecification(assetItem, usage, updateInterval, useHeadRequest) {
    var spec = {
        type: assetItem.assetType,
        usage: usage,
        assetItem: assetItem,
    };
    if (!lodash_1.isNil(updateInterval)) {
        spec.updateInterval = updateInterval;
    }
    if (!lodash_1.isNil(useHeadRequest)) {
        spec.useHeadRequest = useHeadRequest;
    }
    return spec;
}
exports.dmCreateBsnDataFeedSpecification = dmCreateBsnDataFeedSpecification;
function dmIsBsnDataFeedSourceSpecification(feedSpec) {
    return feedSpec.type !== bscore_1.DataFeedType.URLDataFeed
        && bscore_1.bscIsAssetItem(feedSpec.assetItem)
        && bscore_1.bscAssetItemIsBsnDataFeed(feedSpec.assetItem);
}
exports.dmIsBsnDataFeedSourceSpecification = dmIsBsnDataFeedSourceSpecification;
function dmIsRemoteDataFeedSourceSpecification(feedSpec) {
    return feedSpec.type === bscore_1.DataFeedType.URLDataFeed
        && (lodash_1.isString(feedSpec.url)
            || bsDmParameterizedStrings_1.dmIsValidParameterizedString(feedSpec.url));
}
exports.dmIsRemoteDataFeedSourceSpecification = dmIsRemoteDataFeedSourceSpecification;
function dmIsDataFeedSourceSpecification(feedSpec) {
    return !lodash_1.isNil(feedSpec)
        && typeof feedSpec === 'object'
        && feedSpec.hasOwnProperty('type')
        && ((feedSpec.type === bscore_1.DataFeedType.URLDataFeed && feedSpec.hasOwnProperty('url')
            || feedSpec.hasOwnProperty('assetItem') && bscore_1.bscIsAssetItem(feedSpec.assetItem)));
}
exports.dmIsDataFeedSourceSpecification = dmIsDataFeedSourceSpecification;
function dmIsDataFeedSourceRemoteDataFeed(feedSource) {
    return feedSource.type === bscore_1.DataFeedType.URLDataFeed && feedSource.hasOwnProperty('url');
}
exports.dmIsDataFeedSourceRemoteDataFeed = dmIsDataFeedSourceRemoteDataFeed;
function dmIsDataFeedSourceBsnDataFeed(feedSource) {
    return !lodash_1.isNil(feedSource)
        && feedSource.type !== bscore_1.DataFeedType.URLDataFeed
        && feedSource.hasOwnProperty('dataFeedAssetId');
}
exports.dmIsDataFeedSourceBsnDataFeed = dmIsDataFeedSourceBsnDataFeed;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetParameterizedStringTextParams = exports.dmIsEqualParameterizedString = exports.dmIsSimpleParameterizedString = exports.dmGetSimpleStringFromParameterizedString = exports.dmAreParameterizedStringUserVariablesResolved = exports.dmIsValidParameterizedString = exports.dmAppendUserVariableNameToParameterizedString = exports.dmAppendUserVariableToParameterizedString = exports.dmAppendStringToParameterizedString = exports.dmGetParameterizedStringFromUserVariableName = exports.dmGetParameterizedStringFromUserVariable = exports.dmGetPlaceholderParameterizedStringFromDisplayString = exports.dmResolveDmParameterizedString = exports.dmGetParameterizedStringFromString = exports.dmIsEmptyParameterizedString = exports.dmGetEmptyParameterizedString = exports.dmSetPsUvEndDelimiter = exports.dmSetPsUvStartDelimiter = exports.dmGetPsUvEndDelimiter = exports.dmGetPsUvStartDelimiter = void 0;
var bscore_1 = __webpack_require__(1);
var lodash_1 = __webpack_require__(0);
var PsUvStartDelimiter = '{{';
var PsUvEndDelimiter = '}}';
function dmGetPsUvStartDelimiter() { return PsUvStartDelimiter; }
exports.dmGetPsUvStartDelimiter = dmGetPsUvStartDelimiter;
function dmGetPsUvEndDelimiter() { return PsUvEndDelimiter; }
exports.dmGetPsUvEndDelimiter = dmGetPsUvEndDelimiter;
function dmSetPsUvStartDelimiter(delim) {
    PsUvStartDelimiter = delim.replace(/([$^*+?.])/g, '\\$1');
}
exports.dmSetPsUvStartDelimiter = dmSetPsUvStartDelimiter;
function dmSetPsUvEndDelimiter(delim) {
    PsUvEndDelimiter = delim.replace(/([$^*+?.])/g, '\\$1');
}
exports.dmSetPsUvEndDelimiter = dmSetPsUvEndDelimiter;
function dmGetEmptyParameterizedString() {
    return { params: [] };
}
exports.dmGetEmptyParameterizedString = dmGetEmptyParameterizedString;
function dmIsEmptyParameterizedString(ps) {
    return ps.params.length === 0
        || (ps.params.length === 1 && ps.params[0].type === bscore_1.StringParameterType.Text && ps.params[0].value.length === 0);
}
exports.dmIsEmptyParameterizedString = dmIsEmptyParameterizedString;
function dmGetParameterizedStringFromString(value) {
    return { params: [{ type: bscore_1.StringParameterType.Text, value: value }] };
}
exports.dmGetParameterizedStringFromString = dmGetParameterizedStringFromString;
function dmResolveDmParameterizedString(arg) {
    if (arg !== undefined) {
        if (typeof arg === 'string') {
            return dmGetPlaceholderParameterizedStringFromDisplayString(arg);
        }
        else if (dmIsValidParameterizedString(arg)) {
            return arg;
        }
    }
    return dmGetEmptyParameterizedString();
}
exports.dmResolveDmParameterizedString = dmResolveDmParameterizedString;
function dmGetPlaceholderParameterizedStringFromDisplayString(displayString) {
    var returnPs = dmGetEmptyParameterizedString();
    var re = new RegExp('(.*?)' + dmGetPsUvStartDelimiter() + '(.*?)' + dmGetPsUvEndDelimiter(), 'g');
    var res;
    var lastIndex = 0;
    while (res = re.exec(displayString)) {
        if (res[1]) {
            dmAppendStringToParameterizedString(returnPs, res[1]);
        }
        if (res[2]) {
            dmAppendUserVariableNameToParameterizedString(returnPs, res[2]);
        }
        lastIndex = re.lastIndex;
    }
    if (lastIndex < displayString.length) {
        dmAppendStringToParameterizedString(returnPs, displayString.substr(lastIndex));
    }
    return returnPs;
}
exports.dmGetPlaceholderParameterizedStringFromDisplayString = dmGetPlaceholderParameterizedStringFromDisplayString;
function dmGetParameterizedStringFromUserVariable(uvId) {
    return { params: [{ type: bscore_1.StringParameterType.UserVariable, value: uvId }] };
}
exports.dmGetParameterizedStringFromUserVariable = dmGetParameterizedStringFromUserVariable;
function dmGetParameterizedStringFromUserVariableName(name) {
    return { params: [{ type: bscore_1.StringParameterType.UserVariableName, value: name }] };
}
exports.dmGetParameterizedStringFromUserVariableName = dmGetParameterizedStringFromUserVariableName;
function dmAppendStringToParameterizedString(ps, value) {
    ps.params.push({ type: bscore_1.StringParameterType.Text, value: value });
    return ps;
}
exports.dmAppendStringToParameterizedString = dmAppendStringToParameterizedString;
function dmAppendUserVariableToParameterizedString(ps, value) {
    ps.params.push({ type: bscore_1.StringParameterType.UserVariable, value: value });
    return ps;
}
exports.dmAppendUserVariableToParameterizedString = dmAppendUserVariableToParameterizedString;
function dmAppendUserVariableNameToParameterizedString(ps, value) {
    ps.params.push({ type: bscore_1.StringParameterType.UserVariableName, value: value });
    return ps;
}
exports.dmAppendUserVariableNameToParameterizedString = dmAppendUserVariableNameToParameterizedString;
function dmIsValidParameterizedString(ps) {
    if (typeof ps !== 'object' || !ps.params || !Array.isArray(ps.params)) {
        return false;
    }
    var isValidDmPsComponent = function (component) {
        return typeof component === 'object'
            && component.hasOwnProperty('type')
            && component.hasOwnProperty('value')
            && (component.type === bscore_1.StringParameterType.Text
                || component.type === bscore_1.StringParameterType.UserVariable
                || component.type === bscore_1.StringParameterType.UserVariableName)
            && typeof component.value === 'string';
    };
    return ps.params.every(isValidDmPsComponent);
}
exports.dmIsValidParameterizedString = dmIsValidParameterizedString;
function dmAreParameterizedStringUserVariablesResolved(ps) {
    var undefinedNames = ps.params.reduce(function (acc, comp) {
        return comp.type === bscore_1.StringParameterType.UserVariableName ?
            acc.concat(comp.value) : acc;
    }, []);
    var ok = undefinedNames.length === 0;
    var report = { ok: ok };
    if (!report.ok) {
        report.undefinedUserVariableNames = undefinedNames;
    }
    return report;
}
exports.dmAreParameterizedStringUserVariablesResolved = dmAreParameterizedStringUserVariablesResolved;
function dmGetSimpleStringFromParameterizedString(ps) {
    var returnString = null;
    if (typeof ps === 'object' && ps.params && ps.params.length) {
        ps.params.every(function (param) {
            if (param.type === bscore_1.StringParameterType.UserVariable || param.type === bscore_1.StringParameterType.UserVariableName) {
                returnString = null;
                return false;
            }
            if (returnString) {
                returnString = returnString + param.value;
            }
            else {
                returnString = param.value;
            }
            return true;
        });
    }
    return returnString;
}
exports.dmGetSimpleStringFromParameterizedString = dmGetSimpleStringFromParameterizedString;
function dmIsSimpleParameterizedString(ps) {
    var isSimple = false;
    if (typeof ps === 'object' && ps.params && ps.params.length) {
        isSimple = lodash_1.isNil(lodash_1.find(ps.params, function (param) {
            return param.type === bscore_1.StringParameterType.UserVariable
                || param.type === bscore_1.StringParameterType.UserVariableName;
        }));
    }
    return isSimple;
}
exports.dmIsSimpleParameterizedString = dmIsSimpleParameterizedString;
function dmIsEqualParameterizedString(ps1, ps2) {
    var ps2ComponentEqual = function (comp1, index) {
        var comp2 = ps2.params[index];
        return comp2 && comp1.type === comp2.type && comp1.value === comp2.value;
    };
    return ps1 === ps2 || (ps1.params.length === ps2.params.length && ps1.params.every(ps2ComponentEqual));
}
exports.dmIsEqualParameterizedString = dmIsEqualParameterizedString;
function dmGetParameterizedStringTextParams(ps) {
    return ps.params.reduce(function (acc, param) {
        if (param.type === bscore_1.StringParameterType.Text) {
            acc.push(param.value);
        }
        return acc;
    }, []);
}
exports.dmGetParameterizedStringTextParams = dmGetParameterizedStringTextParams;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmValidateIrRemoteEventData = exports.dmValidateCustomPresentationWebPage = exports.dmValidateDmWidget = exports.dmValidateDataFeedSourceId = exports.dmValidateLinkedPresentationId = exports.dmValidateAssetId = exports.dmValidateScriptPluginId = exports.dmValidateUserVariableInputFromEventData = exports.dmValidateUserVariableName = exports.dmValidateUserVariableId = exports.dmValidateEntityHtmlSite = exports.dmValidateEntityDataFeed = exports.dmValidateEntityParameterizedVolume = exports.dmValidateEntityParameterizedNumber = exports.dmValidateEntityParameterizedHexString = exports.dmValidateEntityParameterizedHttpUrlString = exports.dmValidateEntityParameterizedString = exports.dmGetEntityError = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmParameterizedNumbers_1 = __webpack_require__(38);
var selectorAssetMap_1 = __webpack_require__(39);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmHtmlSite_1 = __webpack_require__(37);
var selectorDataFeed_1 = __webpack_require__(35);
var selectorHtmlSite_1 = __webpack_require__(59);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorScriptPlugin_1 = __webpack_require__(48);
var selectorDeviceWebPage_1 = __webpack_require__(68);
var selectorLinkedPresentation_1 = __webpack_require__(60);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var dmGetEntityError = function (type, errorDetails) {
    return new bsDmError_1.BsDmError(type, null, errorDetails);
};
exports.dmGetEntityError = dmGetEntityError;
var dmValidateEntityParameterizedString = function (state, paramString, errorDetails, cannotBeEmpty) {
    if (cannotBeEmpty === void 0) { cannotBeEmpty = false; }
    if (bsDmParameterizedStrings_1.dmIsValidParameterizedString(paramString)) {
        if (!selectorUserVariable_1.dmAreParameterizedStringUserVariablesValid(state, { paramString: paramString })) {
            return exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableNameNotDefined, errorDetails);
        }
        else if (cannotBeEmpty && bsDmParameterizedStrings_1.dmIsEmptyParameterizedString(paramString)) {
            return exports.dmGetEntityError(bsDmError_1.DmErrorType.stringDataValueIsEmpty, errorDetails);
        }
    }
    else {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidParameters, errorDetails);
    }
    return null;
};
exports.dmValidateEntityParameterizedString = dmValidateEntityParameterizedString;
var dmValidateEntityParameterizedHttpUrlString = function (state, paramString, errorDetails) {
    var error = exports.dmValidateEntityParameterizedString(state, paramString, errorDetails, true);
    if (lodash_1.isNil(error)
        && !lodash_1.isNil(paramString)
        && paramString.params.length > 0
        && paramString.params[0].type === bscore_1.StringParameterType.Text) {
        var urlRegEx = bsDmParameterizedStrings_1.dmIsSimpleParameterizedString(paramString) ?
            /^(https?):\/\/[^\s]+/ : /^(https?):\/\/[^\s]*/;
        if (!urlRegEx.test(paramString.params[0].value)) {
            error = exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidUrlString, errorDetails);
        }
    }
    return error;
};
exports.dmValidateEntityParameterizedHttpUrlString = dmValidateEntityParameterizedHttpUrlString;
var dmValidateEntityParameterizedHexString = function (state, paramString, errorDetails, cannotBeEmpty) {
    if (cannotBeEmpty === void 0) { cannotBeEmpty = false; }
    if (bsDmParameterizedStrings_1.dmIsValidParameterizedString(paramString)) {
        if (!selectorUserVariable_1.dmAreParameterizedStringUserVariablesValid(state, { paramString: paramString })) {
            return exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableNameNotDefined, errorDetails);
        }
        else if (cannotBeEmpty && bsDmParameterizedStrings_1.dmIsEmptyParameterizedString(paramString)) {
            return exports.dmGetEntityError(bsDmError_1.DmErrorType.stringDataValueIsEmpty, errorDetails);
        }
        else {
            var textParams = bsDmParameterizedStrings_1.dmGetParameterizedStringTextParams(paramString);
            var entityError_1 = null;
            textParams.some(function (param) {
                if (!utils_1.isValidHexString(param)) {
                    entityError_1 = exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidHexString, errorDetails);
                    return true;
                }
                return false;
            });
            return entityError_1;
        }
    }
    return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidParameters, errorDetails);
};
exports.dmValidateEntityParameterizedHexString = dmValidateEntityParameterizedHexString;
var dmValidateEntityParameterizedNumber = function (state, paramNumber, errorDetails) {
    if (bsDmParameterizedNumbers_1.dmIsValidParameterizedNumber(paramNumber)) {
        if (!selectorUserVariable_1.dmIsParameterizedNumberUserVariableValid(state, { paramNumber: paramNumber })) {
            return exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableNameNotDefined, errorDetails);
        }
    }
    else {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidParameters, errorDetails);
    }
    return null;
};
exports.dmValidateEntityParameterizedNumber = dmValidateEntityParameterizedNumber;
var dmValidateEntityParameterizedVolume = function (paramNumber, errorDetails) {
    if (bsDmParameterizedNumbers_1.dmIsValidParameterizedNumber(paramNumber)
        && paramNumber.type === bscore_1.NumberParameterType.Number
        && (paramNumber.value < 0 || paramNumber.value > 100)) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidVolume, errorDetails);
    }
    return null;
};
exports.dmValidateEntityParameterizedVolume = dmValidateEntityParameterizedVolume;
var dmValidateEntityDataFeed = function (state, dataFeedId, errorDetails) {
    if (!lodash_1.isNil(dataFeedId)) {
        var feedSource = selectorDataFeed_1.dmGetDataFeedSourceForFeedId(state, { id: dataFeedId });
        if (!lodash_1.isNil(feedSource) && bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(feedSource)) {
            errorDetails.entityProperty = errorDetails.entityProperty + '.url';
            if (bsDmParameterizedStrings_1.dmIsEmptyParameterizedString(feedSource.url)) {
                return exports.dmGetEntityError(bsDmError_1.DmErrorType.dataFeedNotSpecified, errorDetails);
            }
            return exports.dmValidateEntityParameterizedString(state, feedSource.url, errorDetails);
        }
    }
    else {
        errorDetails.entityProperty = errorDetails.entityProperty + '.id';
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidParameters, errorDetails);
    }
    return null;
};
exports.dmValidateEntityDataFeed = dmValidateEntityDataFeed;
var dmValidateEntityHtmlSite = function (state, htmlSiteId, errorDetails) {
    var errorList = [];
    if (!lodash_1.isNil(htmlSiteId)) {
        var htmlSite = selectorHtmlSite_1.dmGetHtmlSiteStateById(state, { id: htmlSiteId });
        if (!lodash_1.isNil(htmlSite)) {
            var entityProperty = void 0;
            if (selectorHtmlSite_1.dmHtmlSiteHasDuplicateName(state, { id: htmlSiteId })) {
                entityProperty = errorDetails.entityProperty + '.name';
                errorList.push(exports.dmGetEntityError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, __assign(__assign({}, errorDetails), { entityProperty: entityProperty })));
            }
            if (bsDmHtmlSite_1.dmHtmlSiteIsRemoteHtmlSite(htmlSite)) {
                entityProperty = errorDetails.entityProperty + '.url';
                var urlError = exports.dmValidateEntityParameterizedHttpUrlString(state, htmlSite.url, __assign(__assign({}, errorDetails), { entityProperty: entityProperty }));
                if (!lodash_1.isNil(urlError)) {
                    errorList.push(urlError);
                }
            }
            else if (bsDmHtmlSite_1.dmHtmlSiteIsHostedHtmlSite(htmlSite)) {
                entityProperty = errorDetails.entityProperty + '.indexAssetId';
                var indexAssetError = exports.dmValidateAssetId(state, htmlSite.indexAssetId, __assign(__assign({}, errorDetails), { entityProperty: entityProperty }));
                if (!lodash_1.isNil(indexAssetError)) {
                    errorList.push(indexAssetError);
                }
            }
            entityProperty = errorDetails.entityProperty + '.queryString';
            var queryStringError = exports.dmValidateEntityParameterizedString(state, htmlSite.queryString, __assign(__assign({}, errorDetails), { entityProperty: entityProperty }));
            if (!lodash_1.isNil(queryStringError)) {
                errorList.push(queryStringError);
            }
        }
    }
    return errorList.length ? errorList : null;
};
exports.dmValidateEntityHtmlSite = dmValidateEntityHtmlSite;
var dmValidateUserVariableId = function (state, userVariableId, errorDetails) {
    if (!(utils_1.isValidBsDmId(userVariableId) && !lodash_1.isNil(selectorUserVariable_1.dmGetUserVariableStateById(state, { id: userVariableId })))) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableIdInvalid, errorDetails);
    }
    return null;
};
exports.dmValidateUserVariableId = dmValidateUserVariableId;
var dmValidateUserVariableName = function (state, userVariableName, errorDetails) {
    if (!lodash_1.isString(userVariableName) || lodash_1.isNil(selectorUserVariable_1.dmGetUserVariableIdForName(state, { name: userVariableName }))) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableNameNotDefined, errorDetails);
    }
    return null;
};
exports.dmValidateUserVariableName = dmValidateUserVariableName;
var dmValidateUserVariableInputFromEventData = function (state, eventInputData, errorDetails) {
    var formatError = exports.dmGetEntityError(bsDmError_1.DmErrorType.userVariableInputStringFormatIsIncorrect, errorDetails);
    if (lodash_1.isString(eventInputData)) {
        var result_1 = null;
        if (eventInputData.trim().toLowerCase() !== '<any>') {
            var pairComponents = eventInputData.split('!!');
            pairComponents.some(function (nameValuePair) {
                var inputComponents = nameValuePair.split(':', 2);
                if (inputComponents.length === 2) {
                    result_1 = exports.dmValidateUserVariableName(state, inputComponents[0], errorDetails);
                    return !lodash_1.isNil(result_1);
                }
                result_1 = formatError;
                return true;
            });
        }
        return result_1;
    }
    return formatError;
};
exports.dmValidateUserVariableInputFromEventData = dmValidateUserVariableInputFromEventData;
var dmValidateScriptPluginId = function (state, pluginId, errorDetails) {
    if (!(utils_1.isValidBsDmId(pluginId) && !lodash_1.isNil(selectorScriptPlugin_1.dmGetScriptPluginStateById(state, { id: pluginId })))) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidPlugin, errorDetails);
    }
    return null;
};
exports.dmValidateScriptPluginId = dmValidateScriptPluginId;
var dmValidateAssetId = function (state, assetId, errorDetails) {
    var assetIdOk = bscore_1.bscIsValidAssetId(assetId);
    if (assetIdOk) {
        var assetItem = selectorAssetMap_1.dmGetAssetItemById(state, { id: assetId });
        assetIdOk = !lodash_1.isNil(assetItem) && !bscore_1.bscIsNullAssetItem(assetItem);
    }
    return assetIdOk ? null : exports.dmGetEntityError(bsDmError_1.DmErrorType.assetNotFound, errorDetails);
};
exports.dmValidateAssetId = dmValidateAssetId;
var dmValidateLinkedPresentationId = function (state, presentationId, errorDetails) {
    if (!(utils_1.isValidBsDmId(presentationId) && !lodash_1.isNil(selectorLinkedPresentation_1.dmGetLinkedPresentationStateById(state, { id: presentationId })))) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.linkedPresentationIdInvalid, errorDetails);
    }
    return null;
};
exports.dmValidateLinkedPresentationId = dmValidateLinkedPresentationId;
var dmValidateDataFeedSourceId = function (state, dataFeedSourceId, errorDetails) {
    if (!(utils_1.isValidBsDmId(dataFeedSourceId) && !lodash_1.isNil(selectorDataFeed_1.dmGetDataFeedSourceForFeedSourceId(state, { id: dataFeedSourceId })))) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidDataFeedSource, errorDetails);
    }
    return null;
};
exports.dmValidateDataFeedSourceId = dmValidateDataFeedSourceId;
var dmValidateDmWidget = function (state, widget, errorDetails) {
    if (widget.font !== bsDmInterfaces_1.DmDefaultFontName) {
        var error = exports.dmValidateAssetId(state, widget.font, errorDetails);
        if (!lodash_1.isNil(error)) {
            return error;
        }
    }
    return null;
};
exports.dmValidateDmWidget = dmValidateDmWidget;
var dmValidateCustomPresentationWebPage = function (state, errorDetails) {
    var errorList = [];
    var presentationWebPage = selectorDeviceWebPage_1.dmGetPresentationWebPage(state);
    if (presentationWebPage.mode === bscore_1.DeviceWebPageDisplay.Custom) {
        var customPage = presentationWebPage.customPage;
        if (lodash_1.isNil(customPage) || !lodash_1.isString(customPage.name) || customPage.name.length === 0) {
            errorList.push(exports.dmGetEntityError(bsDmError_1.DmErrorType.invalidCustomPresentationWebPage, errorDetails));
        }
        else {
            var duplicateHtmlSiteId = selectorHtmlSite_1.dmGetHtmlSiteIdByName(state, { name: customPage.name });
            if (!lodash_1.isNil(duplicateHtmlSiteId)) {
                errorList.push(exports.dmGetEntityError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, errorDetails));
            }
            var error = exports.dmValidateAssetId(state, customPage.indexAssetId, errorDetails);
            if (!lodash_1.isNil(error)) {
                errorList.push(error);
            }
        }
    }
    return errorList;
};
exports.dmValidateCustomPresentationWebPage = dmValidateCustomPresentationWebPage;
function dmValidateIrRemoteEventData(state, data, errorDetails) {
    if (!lodash_1.isString(data) || data.length === 0) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.eventDataMissing, errorDetails);
    }
    var irInConfiguration = state.sign.irRemote.irInConfiguration;
    if (irInConfiguration.source === bscore_1.IrReceiverSource.None) {
        return exports.dmGetEntityError(bsDmError_1.DmErrorType.irRemoteEventRequiresIrInSource, errorDetails);
    }
    var buttons = state.sign.irRemote.irRemoteControl.buttons;
    for (var _i = 0, _a = Object.keys(buttons); _i < _a.length; _i++) {
        var buttonCode = _a[_i];
        if (buttons[buttonCode].buttonDescription === data) {
            return null;
        }
    }
    return exports.dmGetEntityError(bsDmError_1.DmErrorType.remoteEventDataFormatIsIncorrect, errorDetails);
}
exports.dmValidateIrRemoteEventData = dmValidateIrRemoteEventData;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("re-reselect");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialMjpegStreamContentItemDefaults = exports.dmGetDefaultAudioStreamContentItemData = exports.dmGetDefaultVideoStreamContentItemData = exports.initialStreamContentItemDefaults = exports.dmGetDefaultLiveVideoContentItemData = exports.initialLiveVideoContentItemDefaults = exports.dmGetDefaultTwitterFeedContentItemData = exports.initialTwitterContentItemDefaults = exports.dmGetDefaultMrssDataFeedContentItemData = exports.initialMrssContentItemDefaults = exports.dmGetDefaultHtmlContentItemData = exports.initialHtmlContentItemDefaults = exports.dmGetDefaultImageContentItemData = exports.initialImageContentItemDefaults = exports.dmGetDefaultAudioContentItemData = exports.initialAudioContentItemDefaults = exports.dmGetDefaultVideoContentItemData = exports.initialVideoContentItemDefaults = exports.dmGetDefaultDataFeedSourceProperties = exports.initialDataFeedSourcePropertyDefaults = exports.dmGetDefaultLiveTextItemTextProperties = exports.initialLiveTextItemTextPropertyDefaults = exports.dmGetDefaultClockZoneProperties = exports.initialClockZonePropertyDefaults = exports.dmGetDefaultTickerZoneProperties = exports.initialTickerZonePropertyDefaults = exports.dmGetDefaultVideoZoneProperties = exports.initialVideoZonePropertyDefaults = exports.dmGetDefaultImageZoneProperties = exports.initialImageZonePropertyDefaults = exports.dmGetDefaultEnhancedAudioZoneProperties = exports.initialEnhancedAudioZonePropertyDefaults = exports.dmGetDefaultAudioZoneProperties = exports.initialAudioZonePropertyDefaults = exports.initialDefaultAudioOutputAssignmentMap = exports.dmGetDefaultAudioSignPropertyMap = exports.initialAudioSignPropertyDefaults = exports.dmGetDefaultButtonPanelMap = exports.initialButtonPanelConfigurationDefaults = exports.dmGetDefaultIrRemote = exports.initialIrRemoteDefault = exports.dmGetDefaultGpioList = exports.initialGpioListDefaults = exports.dmGetDefaultSerialPortList = exports.initialSerialPortDefaults = exports.dmGetDefaultSignPropertyData = exports.initialSignPropertyDefaults = exports.dmGetDefaultPropertyValues = exports.dmResetDefaultPropertyValues = exports.dmSetDefaultPropertyValues = void 0;
exports.DmInternal = exports.dmGetDefaultTimerEventData = exports.initialTimerEventDefaults = exports.dmGetDefaultEventHandlerContentItemData = exports.initialEventHandlerContentItemDefaults = exports.dmGetDefaultPlayFileContentItemData = exports.initialPlayFileContentItemDefaults = exports.dmGetDefaultMediaListContentItemData = exports.initialMediaListContentItemDefaults = exports.dmGetDefaultMjpegStreamContentItemData = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var lodash_1 = __webpack_require__(0);
function dmSetDefaultPropertyValues(defaults) {
    DmInternal.defaults.merge(defaults);
}
exports.dmSetDefaultPropertyValues = dmSetDefaultPropertyValues;
function dmResetDefaultPropertyValues() {
    DmInternal.defaults.reset();
}
exports.dmResetDefaultPropertyValues = dmResetDefaultPropertyValues;
function dmGetDefaultPropertyValues() {
    return DmInternal.defaults.allDefaults;
}
exports.dmGetDefaultPropertyValues = dmGetDefaultPropertyValues;
exports.initialSignPropertyDefaults = {
    videoMode: bscore_1.VideoMode.v1920x1080x60p,
    model: bscore_1.PlayerModel.XT1143,
    monitorOrientation: bscore_1.MonitorOrientationType.Landscape,
    monitorOverscan: bscore_1.MonitorOverscanType.NoOverscan,
    videoConnector: bscore_1.VideoConnectorType.Hdmi,
    deviceWebPageDisplay: bscore_1.DeviceWebPageDisplay.Standard,
    backgroundScreenColor: { a: 255, r: 0, g: 0, b: 0 },
    forceResolution: true,
    tenBitColorEnabled: false,
    dolbyVisionEnabled: false,
    fullResGraphicsEnabled: false,
    audioConfiguration: bscore_1.AudioConfiguration.MixedAudioPCMOnly,
    audioAutoLevel: false,
    htmlEnableJavascriptConsole: false,
    alphabetizeVariableNames: false,
    autoCreateMediaCounterVariables: false,
    resetVariablesOnPresentationStart: false,
    networkedVariablesUpdateInterval: 300,
    delayScheduleChangeUntilMediaEndEvent: false,
    language: bscore_1.LanguageType.English,
    languageKey: bscore_1.LanguageKeyType.English,
    flipCoordinates: false,
    inactivityTimeout: false,
    inactivityTime: 30,
    touchCursorDisplayMode: bscore_1.TouchCursorDisplayModeType.Auto,
    udpDestinationAddressType: bscore_1.UdpAddressType.IPAddress,
    udpDestinationAddress: '255.255.255.255',
    udpDestinationPort: 5000,
    udpReceiverPort: 5000,
    enableEnhancedSynchronization: null,
};
Object.freeze(exports.initialSignPropertyDefaults);
function dmGetDefaultSignPropertyData() {
    return DmInternal.defaults.signProperties;
}
exports.dmGetDefaultSignPropertyData = dmGetDefaultSignPropertyData;
exports.initialSerialPortDefaults = {
    port: '0',
    baudRate: 115200,
    dataBits: 8,
    stopBits: 1,
    parity: bsDmInterfaces_1.SerialParity.None,
    protocol: bsDmInterfaces_1.SerialProtocol.Ascii,
    sendEol: bsDmInterfaces_1.SerialEol.CR,
    receiveEol: bsDmInterfaces_1.SerialEol.CR,
    invertSignals: false,
    connectedDevice: bsDmInterfaces_1.SerialConnectedDeviceType.None,
};
Object.freeze(exports.initialSerialPortDefaults);
var createDefaultSerialPortList = function () {
    var portList = [];
    for (var port = 0; port < 8; ++port) {
        portList.push(Object.assign({}, exports.initialSerialPortDefaults, { port: port.toString() }));
    }
    return portList;
};
function dmGetDefaultSerialPortList() {
    return DmInternal.defaults.serialPortConfigurations;
}
exports.dmGetDefaultSerialPortList = dmGetDefaultSerialPortList;
exports.initialGpioListDefaults = [
    bscore_1.GpioType.Input, bscore_1.GpioType.Input, bscore_1.GpioType.Input, bscore_1.GpioType.Input,
    bscore_1.GpioType.Input, bscore_1.GpioType.Input, bscore_1.GpioType.Input, bscore_1.GpioType.Input,
];
function dmGetDefaultGpioList() {
    return DmInternal.defaults.gpio;
}
exports.dmGetDefaultGpioList = dmGetDefaultGpioList;
exports.initialIrRemoteDefault = {
    irInConfiguration: { source: bscore_1.IrReceiverSource.IrIn },
    irOutConfiguration: { destination: bscore_1.IrTransmitterDestination.None },
    irRemoteControl: bscore_1.bscGetIrRemoteControl(bscore_1.IrRemoteModel.RC1002),
};
function dmGetDefaultIrRemote() {
    return DmInternal.defaults.irRemote;
}
exports.dmGetDefaultIrRemote = dmGetDefaultIrRemote;
exports.initialButtonPanelConfigurationDefaults = {
    configureAutomatically: true,
    configuration: 0,
};
Object.freeze(exports.initialButtonPanelConfigurationDefaults);
var createDefaultButtonPanelMap = function () {
    var bpMap = {};
    bscore_1.ButtonPanelNameArray.forEach(function (bpName) {
        bpMap[bpName] = Object.assign({}, exports.initialButtonPanelConfigurationDefaults);
    });
    return bpMap;
};
function dmGetDefaultButtonPanelMap() {
    return DmInternal.defaults.buttonPanels;
}
exports.dmGetDefaultButtonPanelMap = dmGetDefaultButtonPanelMap;
exports.initialAudioSignPropertyDefaults = {
    min: 0,
    max: 100,
};
Object.freeze(exports.initialAudioSignPropertyDefaults);
var createDefaultAudioSignPropertyMap = function () {
    var audioPropertyMap = {};
    bscore_1.AudioOutputNameArray.forEach(function (audioName) {
        audioPropertyMap[audioName] = Object.assign({}, exports.initialAudioSignPropertyDefaults);
    });
    return audioPropertyMap;
};
function dmGetDefaultAudioSignPropertyMap() {
    return DmInternal.defaults.audioSignPropertyMap;
}
exports.dmGetDefaultAudioSignPropertyMap = dmGetDefaultAudioSignPropertyMap;
exports.initialDefaultAudioOutputAssignmentMap = {
    analog1: bscore_1.AudioOutputType.Pcm,
    analog2: bscore_1.AudioOutputType.None,
    analog3: bscore_1.AudioOutputType.None,
    usbA: bscore_1.AudioOutputType.None,
    usbB: bscore_1.AudioOutputType.None,
    usbC: bscore_1.AudioOutputType.None,
    usbD: bscore_1.AudioOutputType.None,
    hdmi: bscore_1.AudioOutputType.Pcm,
    spdif: bscore_1.AudioOutputType.Pcm,
    usbTypeA: bscore_1.AudioOutputType.None,
    usbTypeC: bscore_1.AudioOutputType.None,
    usb700_1: bscore_1.AudioOutputType.None,
    usb700_2: bscore_1.AudioOutputType.None,
    usb700_3: bscore_1.AudioOutputType.None,
    usb700_4: bscore_1.AudioOutputType.None,
    usb700_5: bscore_1.AudioOutputType.None,
    usb700_6: bscore_1.AudioOutputType.None,
    usb700_7: bscore_1.AudioOutputType.None,
    usb_1: bscore_1.AudioOutputType.None,
    usb_2: bscore_1.AudioOutputType.None,
    usb_3: bscore_1.AudioOutputType.None,
    usb_4: bscore_1.AudioOutputType.None,
    usb_5: bscore_1.AudioOutputType.None,
    usb_6: bscore_1.AudioOutputType.None,
};
Object.freeze(exports.initialDefaultAudioOutputAssignmentMap);
exports.initialAudioZonePropertyDefaults = {
    audioOutput: bscore_1.AudioOutputSelectionType.Analog,
    audioMode: bscore_1.AudioModeType.Stereo,
    audioMapping: bscore_1.AudioMappingType.Audio1,
    audioOutputAssignments: exports.initialDefaultAudioOutputAssignmentMap,
    audioMixMode: bscore_1.AudioMixModeType.Stereo,
    audioVolume: 100,
    minimumVolume: 0,
    maximumVolume: 100,
};
Object.freeze(exports.initialAudioZonePropertyDefaults);
function dmGetDefaultAudioZoneProperties() {
    return DmInternal.defaults.audioZoneProperties;
}
exports.dmGetDefaultAudioZoneProperties = dmGetDefaultAudioZoneProperties;
exports.initialEnhancedAudioZonePropertyDefaults = {
    fadeLength: 4,
};
Object.freeze(exports.initialEnhancedAudioZonePropertyDefaults);
function dmGetDefaultEnhancedAudioZoneProperties() {
    return DmInternal.defaults.enhancedAudioZoneProperties;
}
exports.dmGetDefaultEnhancedAudioZoneProperties = dmGetDefaultEnhancedAudioZoneProperties;
exports.initialImageZonePropertyDefaults = {
    imageMode: bscore_1.ImageModeType.ScaleToFit,
};
Object.freeze(exports.initialImageZonePropertyDefaults);
function dmGetDefaultImageZoneProperties() {
    return DmInternal.defaults.imageZoneProperties;
}
exports.dmGetDefaultImageZoneProperties = dmGetDefaultImageZoneProperties;
exports.initialVideoZonePropertyDefaults = {
    viewMode: bscore_1.ViewModeType.Letterboxed,
    videoVolume: 100,
    maxContentResolution: bscore_1.MosaicMaxContentResolutionType.HD,
};
Object.freeze(exports.initialVideoZonePropertyDefaults);
function dmGetDefaultVideoZoneProperties() {
    return DmInternal.defaults.videoZoneProperties;
}
exports.dmGetDefaultVideoZoneProperties = dmGetDefaultVideoZoneProperties;
var initialWidgetDefaults = {
    foregroundTextColor: { a: 255, r: 160, g: 160, b: 160 },
    backgroundTextColor: { a: 255, r: 0, g: 0, b: 0 },
    font: bsDmInterfaces_1.DmDefaultFontName,
    fontSize: 0,
    backgroundBitmapAssetId: bscore_1.BsAssetIdNone,
    stretchBitmapFile: false,
};
Object.freeze(initialWidgetDefaults);
var initialTextWidgetDefaults = {
    numberOfLines: 3,
    delay: 5,
    rotation: bscore_1.RotationType.rot0,
    alignment: bscore_1.TextHAlignmentType.Left,
    scrollingMethod: bscore_1.TextScrollingMethodType.Animated,
};
Object.freeze(initialTextWidgetDefaults);
exports.initialTickerZonePropertyDefaults = {
    textWidget: initialTextWidgetDefaults,
    widget: initialWidgetDefaults,
    scrollSpeed: 100,
};
Object.freeze(exports.initialTickerZonePropertyDefaults);
function dmGetDefaultTickerZoneProperties() {
    return DmInternal.defaults.tickerZoneProperties;
}
exports.dmGetDefaultTickerZoneProperties = dmGetDefaultTickerZoneProperties;
exports.initialClockZonePropertyDefaults = {
    rotation: bscore_1.RotationType.rot0,
    widget: initialWidgetDefaults,
};
Object.freeze(exports.initialClockZonePropertyDefaults);
function dmGetDefaultClockZoneProperties() {
    return DmInternal.defaults.clockZoneProperties;
}
exports.dmGetDefaultClockZoneProperties = dmGetDefaultClockZoneProperties;
exports.initialLiveTextItemTextPropertyDefaults = {
    textWidget: initialTextWidgetDefaults,
    widget: initialWidgetDefaults,
    useBackgroundColor: false,
};
Object.freeze(exports.initialLiveTextItemTextPropertyDefaults);
function dmGetDefaultLiveTextItemTextProperties() {
    return DmInternal.defaults.liveTextItemTextProperties;
}
exports.dmGetDefaultLiveTextItemTextProperties = dmGetDefaultLiveTextItemTextProperties;
exports.initialDataFeedSourcePropertyDefaults = {
    updateInterval: 300,
    useHeadRequest: true,
};
Object.freeze(exports.initialDataFeedSourcePropertyDefaults);
function dmGetDefaultDataFeedSourceProperties() {
    return DmInternal.defaults.dataFeedSourceProperties;
}
exports.dmGetDefaultDataFeedSourceProperties = dmGetDefaultDataFeedSourceProperties;
exports.initialVideoContentItemDefaults = {
    volume: 100,
    videoDisplayMode: bscore_1.VideoDisplayModeType.m2D,
    automaticallyLoop: true,
};
Object.freeze(exports.initialVideoContentItemDefaults);
function dmGetDefaultVideoContentItemData() {
    return DmInternal.defaults.videoContentItem;
}
exports.dmGetDefaultVideoContentItemData = dmGetDefaultVideoContentItemData;
exports.initialAudioContentItemDefaults = {
    volume: 100,
};
Object.freeze(exports.initialAudioContentItemDefaults);
function dmGetDefaultAudioContentItemData() {
    return DmInternal.defaults.audioContentItem;
}
exports.dmGetDefaultAudioContentItemData = dmGetDefaultAudioContentItemData;
exports.initialImageContentItemDefaults = {
    useImageBuffer: false,
    videoPlayerRequired: false,
    defaultTransition: bscore_1.TransitionType.NoEffect,
    transitionDuration: 1,
    displayDuration: 6,
};
Object.freeze(exports.initialImageContentItemDefaults);
function dmGetDefaultImageContentItemData() {
    return DmInternal.defaults.imageContentItem;
}
exports.dmGetDefaultImageContentItemData = dmGetDefaultImageContentItemData;
exports.initialHtmlContentItemDefaults = {
    enableBrightSignJavascriptObjects: false,
    enableCrossDomainPolicyChecks: true,
    ignoreHttpsCertificateErrors: false,
    enableCamera: false,
    enableMouseEvents: true,
    displayCursor: false,
    hwzOn: true,
    useUserStylesheet: false,
    displayDuration: 0,
};
Object.freeze(exports.initialHtmlContentItemDefaults);
function dmGetDefaultHtmlContentItemData() {
    return DmInternal.defaults.htmlContentItem;
}
exports.dmGetDefaultHtmlContentItemData = dmGetDefaultHtmlContentItemData;
exports.initialMrssContentItemDefaults = {
    videoPlayerRequired: false,
};
Object.freeze(exports.initialMrssContentItemDefaults);
function dmGetDefaultMrssDataFeedContentItemData() {
    return DmInternal.defaults.mrssContentItem;
}
exports.dmGetDefaultMrssDataFeedContentItemData = dmGetDefaultMrssDataFeedContentItemData;
exports.initialTwitterContentItemDefaults = {
    userName: '',
    updateInterval: 300,
    restrictNumberOfTweets: bscore_1.TwitterFeedRestrictionType.None,
    numberOfTweetsToShow: 0,
    numberOfRecentDaysForTweets: 0,
};
Object.freeze(exports.initialMrssContentItemDefaults);
function dmGetDefaultTwitterFeedContentItemData() {
    return DmInternal.defaults.twitterContentItem;
}
exports.dmGetDefaultTwitterFeedContentItemData = dmGetDefaultTwitterFeedContentItemData;
exports.initialLiveVideoContentItemDefaults = {
    volume: 100,
    overscan: false,
    displayDuration: 0,
};
Object.freeze(exports.initialLiveVideoContentItemDefaults);
function dmGetDefaultLiveVideoContentItemData() {
    return DmInternal.defaults.liveVideoContentItem;
}
exports.dmGetDefaultLiveVideoContentItemData = dmGetDefaultLiveVideoContentItemData;
exports.initialStreamContentItemDefaults = {
    volume: 100,
    displayDuration: 0,
};
Object.freeze(exports.initialStreamContentItemDefaults);
function dmGetDefaultVideoStreamContentItemData() {
    return DmInternal.defaults.videoStreamContentItem;
}
exports.dmGetDefaultVideoStreamContentItemData = dmGetDefaultVideoStreamContentItemData;
function dmGetDefaultAudioStreamContentItemData() {
    return DmInternal.defaults.audioStreamContentItem;
}
exports.dmGetDefaultAudioStreamContentItemData = dmGetDefaultAudioStreamContentItemData;
exports.initialMjpegStreamContentItemDefaults = {
    rotation: bscore_1.RotationType.rot0,
    displayDuration: 0,
};
Object.freeze(exports.initialMjpegStreamContentItemDefaults);
function dmGetDefaultMjpegStreamContentItemData() {
    return DmInternal.defaults.mjpegStreamContentItem;
}
exports.dmGetDefaultMjpegStreamContentItemData = dmGetDefaultMjpegStreamContentItemData;
exports.initialMediaListContentItemDefaults = {
    playbackType: bscore_1.MediaListPlaybackType.FromBeginning,
    shuffle: false,
    support4KImage: false,
    sendMediaZoneMessage: false,
    transition: bscore_1.TransitionType.NoEffect,
    transitionDuration: 1,
    autoTransitions: true,
    inactivityTimeout: false,
    inactivityTime: 0,
};
Object.freeze(exports.initialMediaListContentItemDefaults);
function dmGetDefaultMediaListContentItemData() {
    return DmInternal.defaults.mediaListContentItem;
}
exports.dmGetDefaultMediaListContentItemData = dmGetDefaultMediaListContentItemData;
exports.initialPlayFileContentItemDefaults = {
    triggerType: bscore_1.PlayFileTriggerType.ByEventData,
    useDefaultMedia: false,
};
Object.freeze(exports.initialPlayFileContentItemDefaults);
function dmGetDefaultPlayFileContentItemData() {
    return DmInternal.defaults.playFileContentItem;
}
exports.dmGetDefaultPlayFileContentItemData = dmGetDefaultPlayFileContentItemData;
exports.initialEventHandlerContentItemDefaults = {
    stopPlayback: false,
};
Object.freeze(exports.initialEventHandlerContentItemDefaults);
function dmGetDefaultEventHandlerContentItemData() {
    return DmInternal.defaults.eventHandlerContentItem;
}
exports.dmGetDefaultEventHandlerContentItemData = dmGetDefaultEventHandlerContentItemData;
exports.initialTimerEventDefaults = {
    interval: 6,
};
Object.freeze(exports.initialTimerEventDefaults);
function dmGetDefaultTimerEventData() {
    return DmInternal.defaults.timerEvent;
}
exports.dmGetDefaultTimerEventData = dmGetDefaultTimerEventData;
var DmInternal;
(function (DmInternal) {
    var DefaultProperties = (function () {
        function DefaultProperties() {
            this.reset();
        }
        DefaultProperties.prototype.reset = function () {
            this._signProperties = __assign({}, exports.initialSignPropertyDefaults);
            this._serialPortConfigurations = createDefaultSerialPortList();
            this._gpioList = exports.initialGpioListDefaults.slice();
            this._buttonPanels = createDefaultButtonPanelMap();
            this._irRemote = __assign({}, exports.initialIrRemoteDefault);
            this._audioSignPropertyMap = createDefaultAudioSignPropertyMap();
            this._audioZoneProperties = __assign({}, exports.initialAudioZonePropertyDefaults);
            this._enhancedAudioZoneProperties = __assign({}, exports.initialEnhancedAudioZonePropertyDefaults);
            this._imageZoneProperties = __assign({}, exports.initialImageZonePropertyDefaults);
            this._videoZoneProperties = __assign({}, exports.initialVideoZonePropertyDefaults);
            this._tickerZoneProperties = __assign({}, exports.initialTickerZonePropertyDefaults);
            this._clockZoneProperties = __assign({}, exports.initialClockZonePropertyDefaults);
            this._liveTextItemTextProperties = __assign({}, exports.initialLiveTextItemTextPropertyDefaults);
            this._dataFeedSourceProperties = __assign({}, exports.initialDataFeedSourcePropertyDefaults);
            this._videoContentItem = __assign({}, exports.initialVideoContentItemDefaults);
            this._audioContentItem = __assign({}, exports.initialAudioContentItemDefaults);
            this._imageContentItem = __assign({}, exports.initialImageContentItemDefaults);
            this._htmlContentItem = __assign({}, exports.initialHtmlContentItemDefaults);
            this._mrssContentItem = __assign({}, exports.initialMrssContentItemDefaults);
            this._twitterContentItem = __assign({}, exports.initialTwitterContentItemDefaults);
            this._liveVideoContentItem = __assign({}, exports.initialLiveVideoContentItemDefaults);
            this._videoStreamContentItem = __assign({}, exports.initialStreamContentItemDefaults);
            this._audioStreamContentItem = __assign({}, exports.initialStreamContentItemDefaults);
            this._mjpegStreamContentItem = __assign({}, exports.initialMjpegStreamContentItemDefaults);
            this._mediaListContentItem = __assign({}, exports.initialMediaListContentItemDefaults);
            this._playFileContentItem = __assign({}, exports.initialPlayFileContentItemDefaults);
            this._eventHandlerContentItem = __assign({}, exports.initialEventHandlerContentItemDefaults);
            this._timerEvent = __assign({}, exports.initialTimerEventDefaults);
        };
        DefaultProperties.prototype.merge = function (params) {
            var _this = this;
            var getNewDefaultWidget = function (existingWidgetDefault, newWidgetParams) {
                var widgetClone = lodash_1.cloneDeep(newWidgetParams);
                return __assign(__assign(__assign({}, existingWidgetDefault), widgetClone), { backgroundBitmapAssetId: bscore_1.BsAssetIdNone, font: bsDmInterfaces_1.DmDefaultFontName });
            };
            if (params.signProperties) {
                Object.assign(this._signProperties, params.signProperties);
            }
            if (params.serialPortConfigurations && Array.isArray(params.serialPortConfigurations)) {
                var updateList = params.serialPortConfigurations;
                updateList.forEach(function (portConfig) {
                    var portNum = portConfig.port;
                    if (portNum != null) {
                        _this._serialPortConfigurations[portNum] =
                            Object.assign({}, _this._serialPortConfigurations[portNum], portConfig);
                    }
                });
            }
            if (params.gpio && Array.isArray(params.gpio)) {
                this._gpioList = params.gpio.slice();
            }
            if (params.buttonPanels) {
                var updateList_1 = params.buttonPanels;
                Object.keys(updateList_1).forEach(function (bpName) {
                    _this._buttonPanels[bpName] = Object.assign({}, _this._buttonPanels[bpName], updateList_1[bpName]);
                });
            }
            if (params.irRemote) {
                Object.assign(this._irRemote, params.irRemote);
            }
            if (params.audioSignPropertyMap) {
                var updateList_2 = params.audioSignPropertyMap;
                Object.keys(updateList_2).forEach(function (audioName) {
                    _this._audioSignPropertyMap[audioName] =
                        Object.assign({}, _this._audioSignPropertyMap[audioName], updateList_2[audioName]);
                });
            }
            if (params.audioZoneProperties) {
                Object.assign(this._audioZoneProperties, params.audioZoneProperties);
            }
            if (params.enhancedAudioZoneProperties) {
                Object.assign(this._enhancedAudioZoneProperties, params.enhancedAudioZoneProperties);
            }
            if (params.imageZoneProperties) {
                Object.assign(this._imageZoneProperties, params.imageZoneProperties);
            }
            if (params.videoZoneProperties) {
                Object.assign(this._videoZoneProperties, params.videoZoneProperties);
            }
            if (params.tickerZoneProperties) {
                var newProps = __assign({}, params.tickerZoneProperties);
                if (params.tickerZoneProperties.textWidget) {
                    newProps.textWidget = __assign(__assign({}, this._tickerZoneProperties.textWidget), params.tickerZoneProperties.textWidget);
                }
                if (params.tickerZoneProperties.widget) {
                    newProps.widget = getNewDefaultWidget(this._tickerZoneProperties.widget, params.tickerZoneProperties.widget);
                }
                Object.assign(this._tickerZoneProperties, newProps);
            }
            if (params.clockZoneProperties) {
                var newProps = __assign({}, params.clockZoneProperties);
                if (params.clockZoneProperties.widget) {
                    newProps.widget = getNewDefaultWidget(this._clockZoneProperties.widget, params.clockZoneProperties.widget);
                }
                Object.assign(this._clockZoneProperties, newProps);
            }
            if (params.liveTextItemTextProperties) {
                var newProps = Object.assign({}, params.liveTextItemTextProperties);
                if (params.liveTextItemTextProperties.textWidget) {
                    newProps.textWidget = __assign(__assign({}, this._liveTextItemTextProperties.textWidget), params.liveTextItemTextProperties.textWidget);
                }
                if (params.liveTextItemTextProperties.widget) {
                    newProps.widget = getNewDefaultWidget(this._liveTextItemTextProperties.widget, params.liveTextItemTextProperties.widget);
                }
                Object.assign(this._liveTextItemTextProperties, newProps);
            }
            if (params.dataFeedSourceProperties) {
                Object.assign(this._dataFeedSourceProperties, params.dataFeedSourceProperties);
            }
            if (params.videoContentItem) {
                Object.assign(this._videoContentItem, params.videoContentItem);
            }
            if (params.audioContentItem) {
                Object.assign(this._audioContentItem, params.audioContentItem);
            }
            if (params.imageContentItem) {
                Object.assign(this._imageContentItem, params.imageContentItem);
            }
            if (params.htmlContentItem) {
                Object.assign(this._htmlContentItem, params.htmlContentItem);
            }
            if (params.mrssContentItem) {
                Object.assign(this._mrssContentItem, params.mrssContentItem);
            }
            if (params.twitterContentItem) {
                Object.assign(this._twitterContentItem, params.twitterContentItem);
            }
            if (params.liveVideoContentItem) {
                Object.assign(this._liveVideoContentItem, params.liveVideoContentItem);
            }
            if (params.videoStreamContentItem) {
                Object.assign(this._videoStreamContentItem, params.videoStreamContentItem);
            }
            if (params.audioStreamContentItem) {
                Object.assign(this._audioStreamContentItem, params.audioStreamContentItem);
            }
            if (params.mjpegStreamContentItem) {
                Object.assign(this._mjpegStreamContentItem, params.mjpegStreamContentItem);
            }
            if (params.mediaListContentItem) {
                Object.assign(this._mediaListContentItem, params.mediaListContentItem);
            }
            if (params.playFileContentItem) {
                Object.assign(this._playFileContentItem, params.playFileContentItem);
            }
            if (params.eventHandlerContentItem) {
                Object.assign(this._eventHandlerContentItem, params.eventHandlerContentItem);
            }
            if (params.timerEvent) {
                Object.assign(this._timerEvent, params.timerEvent);
            }
        };
        Object.defineProperty(DefaultProperties.prototype, "allDefaults", {
            get: function () {
                return {
                    signProperties: this.signProperties,
                    serialPortConfigurations: this.serialPortConfigurations,
                    gpio: this.gpio,
                    buttonPanels: this.buttonPanels,
                    irRemote: this.irRemote,
                    audioSignPropertyMap: this.audioSignPropertyMap,
                    audioZoneProperties: this.audioZoneProperties,
                    enhancedAudioZoneProperties: this.enhancedAudioZoneProperties,
                    imageZoneProperties: this.imageZoneProperties,
                    videoZoneProperties: this.videoZoneProperties,
                    tickerZoneProperties: this.tickerZoneProperties,
                    clockZoneProperties: this.clockZoneProperties,
                    liveTextItemTextProperties: this.liveTextItemTextProperties,
                    dataFeedSourceProperties: this.dataFeedSourceProperties,
                    videoContentItem: this.videoContentItem,
                    audioContentItem: this.audioContentItem,
                    imageContentItem: this.imageContentItem,
                    htmlContentItem: this.htmlContentItem,
                    mrssContentItem: this.mrssContentItem,
                    twitterContentItem: this.twitterContentItem,
                    liveVideoContentItem: this.liveVideoContentItem,
                    videoStreamContentItem: this.videoStreamContentItem,
                    audioStreamContentItem: this.audioStreamContentItem,
                    mjpegStreamContentItem: this.mjpegStreamContentItem,
                    mediaListContentItem: this.mediaListContentItem,
                    playFileContentItem: this.playFileContentItem,
                    eventHandlerContentItem: this.eventHandlerContentItem,
                    timerEvent: this.timerEvent,
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "signProperties", {
            get: function () { return lodash_1.cloneDeep(this._signProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "serialPortConfigurations", {
            get: function () { return lodash_1.cloneDeep(this._serialPortConfigurations); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "gpio", {
            get: function () { return lodash_1.cloneDeep(this._gpioList); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "buttonPanels", {
            get: function () { return lodash_1.cloneDeep(this._buttonPanels); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "irRemote", {
            get: function () { return lodash_1.cloneDeep(this._irRemote); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "audioSignPropertyMap", {
            get: function () { return lodash_1.cloneDeep(this._audioSignPropertyMap); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "audioZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._audioZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "enhancedAudioZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._enhancedAudioZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "imageZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._imageZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "videoZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._videoZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "tickerZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._tickerZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "clockZoneProperties", {
            get: function () { return lodash_1.cloneDeep(this._clockZoneProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "liveTextItemTextProperties", {
            get: function () { return lodash_1.cloneDeep(this._liveTextItemTextProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "dataFeedSourceProperties", {
            get: function () { return lodash_1.cloneDeep(this._dataFeedSourceProperties); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "videoContentItem", {
            get: function () { return lodash_1.cloneDeep(this._videoContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "audioContentItem", {
            get: function () { return lodash_1.cloneDeep(this._audioContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "imageContentItem", {
            get: function () { return lodash_1.cloneDeep(this._imageContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "htmlContentItem", {
            get: function () { return lodash_1.cloneDeep(this._htmlContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "mrssContentItem", {
            get: function () { return lodash_1.cloneDeep(this._mrssContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "twitterContentItem", {
            get: function () { return lodash_1.cloneDeep(this._twitterContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "liveVideoContentItem", {
            get: function () { return lodash_1.cloneDeep(this._liveVideoContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "videoStreamContentItem", {
            get: function () { return lodash_1.cloneDeep(this._videoStreamContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "audioStreamContentItem", {
            get: function () { return lodash_1.cloneDeep(this._audioStreamContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "mjpegStreamContentItem", {
            get: function () { return lodash_1.cloneDeep(this._mjpegStreamContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "mediaListContentItem", {
            get: function () { return lodash_1.cloneDeep(this._mediaListContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "playFileContentItem", {
            get: function () { return lodash_1.cloneDeep(this._playFileContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "eventHandlerContentItem", {
            get: function () { return lodash_1.cloneDeep(this._eventHandlerContentItem); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefaultProperties.prototype, "timerEvent", {
            get: function () { return lodash_1.cloneDeep(this._timerEvent); },
            enumerable: false,
            configurable: true
        });
        return DefaultProperties;
    }());
    DmInternal.DefaultProperties = DefaultProperties;
    DmInternal.defaults = new DefaultProperties();
})(DmInternal = exports.DmInternal || (exports.DmInternal = {}));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteEvent = exports.dmDeleteEventWithParams = exports.dmGetEventDeleteParams = exports.dmUpdateEventType = exports.dmUpdateEvent = exports.dmAddMultipleEvents = exports.dmAddEventFromSpecification = exports.dmAddEvent = exports.DELETE_EVENT = exports.UPDATE_EVENT = exports.ADD_MULTIPLE_EVENTS = exports.ADD_EVENT = void 0;
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var bsDmState_1 = __webpack_require__(5);
var bsDmValidate_1 = __webpack_require__(50);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var actionTransition_1 = __webpack_require__(25);
exports.ADD_EVENT = 'DM_ADD_EVENT';
exports.ADD_MULTIPLE_EVENTS = 'DM_ADD_MULTIPLE_EVENTS';
exports.UPDATE_EVENT = 'DM_UPDATE_EVENT';
exports.DELETE_EVENT = 'DM_DELETE_EVENT';
function dmAddEvent(name, type, mediaStateId, data, disabled, intrinsicAction) {
    if (data === void 0) { data = null; }
    if (disabled === void 0) { disabled = false; }
    var action = {
        type: exports.ADD_EVENT,
        payload: {
            id: utils_1.newBsDmId(),
            name: name,
            type: type,
            mediaStateId: mediaStateId,
            disabled: disabled,
            data: lodash_1.cloneDeep(data),
        },
    };
    if (intrinsicAction) {
        action.payload.action = intrinsicAction;
    }
    return action;
}
exports.dmAddEvent = dmAddEvent;
function dmAddEventFromSpecification(name, mediaStateId, event, disabled) {
    if (disabled === void 0) { disabled = false; }
    var action = {
        type: exports.ADD_EVENT,
        payload: {
            id: utils_1.newBsDmId(),
            name: name,
            type: event.type,
            mediaStateId: mediaStateId,
            disabled: disabled,
            data: lodash_1.cloneDeep(event.data),
        },
    };
    if (event.action) {
        action.payload.action = event.action;
    }
    return action;
}
exports.dmAddEventFromSpecification = dmAddEventFromSpecification;
function dmAddMultipleEvents(events) {
    var eventsToAdd = events.filter(function (evt) { return !lodash_1.isNil(evt); }).map(function (ev) {
        var event = {
            id: utils_1.isValidBsDmId(ev.id) ? ev.id : utils_1.newBsDmId(),
            name: ev.name,
            type: ev.type,
            mediaStateId: ev.mediaStateId,
            disabled: ev.disabled,
            data: lodash_1.cloneDeep(ev.data),
        };
        if (ev.action) {
            event.action = ev.action;
        }
        return event;
    });
    return {
        type: exports.ADD_MULTIPLE_EVENTS,
        payload: { events: eventsToAdd },
    };
}
exports.dmAddMultipleEvents = dmAddMultipleEvents;
function dmUpdateEvent(params) {
    return {
        type: exports.UPDATE_EVENT,
        payload: params,
    };
}
exports.dmUpdateEvent = dmUpdateEvent;
function dmUpdateEventType(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingEvent = selectors_1.dmGetEventById(dmState, { id: params.id });
        if (lodash_1.isNil(existingEvent)) {
            throw (new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateEventType: event ID is not valid'));
        }
        var testResult = bsDmValidate_1.dmCanUpdateEventToMediaState(dmState, params.eventSpec, existingEvent.mediaStateId, params.id, params.target);
        if (!testResult.ok) {
            throw testResult.error;
        }
        var _a = params.eventSpec, type = _a.type, data = _a.data, action = _a.action;
        return dispatch(dmUpdateEvent({ id: params.id, type: type, data: data, action: action }));
    };
}
exports.dmUpdateEventType = dmUpdateEventType;
function dmGetEventDeleteParams(state, id) {
    var _a;
    var deleteParams = {
        eventIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        transitionIds: [],
        commandIds: [],
    };
    deleteParams.eventIds.forEach(function (eventId) {
        var _a, _b;
        var eventTransitionIds = selectors_1.dmGetTransitionIdsForEvent(state, { id: eventId });
        if (eventTransitionIds.length) {
            (_a = deleteParams.transitionIds).splice.apply(_a, __spreadArrays([0, 0], eventTransitionIds));
        }
        var eventCommands = selectors_1.dmCommandIdsForEvent(state, { id: eventId });
        if (eventCommands.length) {
            (_b = deleteParams.commandIds).splice.apply(_b, __spreadArrays([0, 0], eventCommands));
        }
    });
    var transitionDeleteParams = actionTransition_1.dmGetTransitionDeleteParams(state, deleteParams.transitionIds);
    if (transitionDeleteParams.commandIds.length) {
        (_a = deleteParams.commandIds).splice.apply(_a, __spreadArrays([0, 0], transitionDeleteParams.commandIds));
    }
    return deleteParams;
}
exports.dmGetEventDeleteParams = dmGetEventDeleteParams;
function dmDeleteEventWithParams(params) {
    return {
        type: exports.DELETE_EVENT,
        payload: params,
    };
}
exports.dmDeleteEventWithParams = dmDeleteEventWithParams;
function dmDeleteEvent(id) {
    return function (dispatch, getState) {
        var deleteParams = dmGetEventDeleteParams(bsDmState_1.dmFilterDmState(getState()), id);
        var mainAction = dmDeleteEventWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteEvent = dmDeleteEvent;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetPasteDataFeedAction = exports.dmDeleteDataFeed = exports.dmDeleteDataFeedWithParams = exports.dmGetDataFeedDeleteParams = exports.dmUpdateDataFeedSourceProperties = exports.dmGetUpdateDataFeedActionList = exports.dmUpdateDataFeed = exports.dmPutDataFeed = exports.dmGetDataFeedSourceRemoveParams = exports.dmRemoveDataFeedSourceWithParams = exports.dmUpdateDataFeedSource = exports.dmPutDataFeedSource = exports.dmGetAddDataFeedActionList = exports.dmAddDataFeed = exports.PASTE_DATA_FEEDS = exports.REMOVE_DATA_FEED_SOURCE = exports.UPDATE_DATA_FEED_SOURCE = exports.PUT_DATA_FEED_SOURCE = exports.DELETE_DATA_FEED = exports.UPDATE_DATA_FEED = exports.ADD_DATA_FEED = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmDataFeed_1 = __webpack_require__(15);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
exports.ADD_DATA_FEED = 'DM_ADD_DATA_FEED';
exports.UPDATE_DATA_FEED = 'DM_UPDATE_DATA_FEED';
exports.DELETE_DATA_FEED = 'DM_DELETE_DATA_FEED';
exports.PUT_DATA_FEED_SOURCE = 'DM_PUT_DATA_FEED_SOURCE';
exports.UPDATE_DATA_FEED_SOURCE = 'DM_UPDATE_DATA_FEED_SOURCE';
exports.REMOVE_DATA_FEED_SOURCE = 'DM_REMOVE_DATA_FEED_SOURCE';
exports.PASTE_DATA_FEEDS = 'DM_PASTE_DATA_FEEDS';
var defaultDataFeedProperties = {
    parserPlugin: bsDmInterfaces_1.BsDmIdNone,
    autoGenerateUserVariables: false,
    userVariableAccess: bscore_1.AccessType.Private,
};
var defaultBsnDataFeedProperties = __assign(__assign({}, defaultDataFeedProperties), { supportsAudio: false, playerTagMatching: bscore_1.PlayerTagMatchingType.DoNotMatchTags });
function initDataFeedSourceFromSpec(source, callerName) {
    var defaultProps = __assign({}, bsDmDefaults_1.dmGetDefaultDataFeedSourceProperties());
    if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(source)) {
        return {
            id: utils_1.newBsDmId(),
            type: source.assetItem.assetType,
            dataFeedAssetId: source.assetItem.id,
            updateInterval: lodash_1.isNil(source.updateInterval) ? defaultProps.updateInterval : source.updateInterval,
            useHeadRequest: lodash_1.isNil(source.useHeadRequest) ? defaultProps.useHeadRequest : source.useHeadRequest,
        };
    }
    else if (bsDmDataFeed_1.dmIsRemoteDataFeedSourceSpecification(source)) {
        return {
            id: utils_1.newBsDmId(),
            type: bscore_1.DataFeedType.URLDataFeed,
            url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(source.url),
            updateInterval: lodash_1.isNil(source.updateInterval) ? defaultProps.updateInterval : source.updateInterval,
            useHeadRequest: lodash_1.isNil(source.useHeadRequest) ? defaultProps.useHeadRequest : source.useHeadRequest,
        };
    }
    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, callerName + ': invalid data feed source specification');
}
function dmAddDataFeed(name, feedSpec, properties) {
    return function (dispatch, getState) {
        var actionListParams = dmGetAddDataFeedActionList(bsDmState_1.dmFilterDmState(getState()), name, feedSpec, properties);
        if (lodash_1.isNil(actionListParams)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.unknownError, 'AddDataFeed - error in configuring data feed source');
        }
        dispatch(actionBase_1.dmBatchActions(actionListParams.actions));
        return __assign(__assign({}, actionListParams.mainAction), { meta: { dispatchList: actionListParams.actions } });
    };
}
exports.dmAddDataFeed = dmAddDataFeed;
function dmGetAddDataFeedActionList(dmState, name, feedSpec, properties) {
    if (!lodash_1.isNil(properties)) {
        if (utils_1.isValidBsDmId(properties.parserPlugin)) {
            var plugin = selectors_1.dmGetParserPluginStateById(dmState, { id: properties.parserPlugin });
            if (lodash_1.isNil(plugin)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddDataFeed - invalid parser plugin ID');
            }
        }
        else if (lodash_1.isNull(properties.parserPlugin)) {
            properties.parserPlugin = bsDmInterfaces_1.BsDmIdNone;
        }
    }
    var actions = [];
    var feedSourceId = selectors_1.dmGetDataFeedSourceIdForFeedSpec(dmState, feedSpec);
    var feedSource = lodash_1.isNil(feedSourceId) ? null :
        selectors_1.dmGetDataFeedSourceForFeedSourceId(dmState, { id: feedSourceId });
    if (lodash_1.isNil(feedSource)) {
        feedSource = initDataFeedSourceFromSpec(feedSpec, 'dmAddDataFeed');
        if (bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(feedSource)) {
            feedSource.url = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: feedSource.url });
        }
    }
    if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(feedSpec)) {
        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, feedSpec.assetItem);
        actions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
        feedSource.dataFeedAssetId = assetItem.id;
        if (!name) {
            name = assetItem.name;
        }
    }
    actions.push(dmPutDataFeedSource(feedSource));
    var defaultProperties = feedSpec.type !== bscore_1.DataFeedType.URLDataFeed ? defaultBsnDataFeedProperties : defaultDataFeedProperties;
    var mergedProperties = __assign(__assign({}, defaultProperties), properties);
    var mainAction = dmPutDataFeed(lodash_1.isNil(name) ? '' : name, feedSource, feedSpec.usage, mergedProperties);
    actions.push(mainAction);
    return { actions: actions, mainAction: mainAction };
}
exports.dmGetAddDataFeedActionList = dmGetAddDataFeedActionList;
function dmPutDataFeedSource(source) {
    return {
        type: exports.PUT_DATA_FEED_SOURCE,
        payload: source,
    };
}
exports.dmPutDataFeedSource = dmPutDataFeedSource;
function dmUpdateDataFeedSource(source) {
    return {
        type: exports.UPDATE_DATA_FEED_SOURCE,
        payload: source,
    };
}
exports.dmUpdateDataFeedSource = dmUpdateDataFeedSource;
function dmRemoveDataFeedSourceWithParams(deleteParams) {
    return {
        type: exports.REMOVE_DATA_FEED_SOURCE,
        payload: deleteParams,
    };
}
exports.dmRemoveDataFeedSourceWithParams = dmRemoveDataFeedSourceWithParams;
function dmGetDataFeedSourceRemoveParams(state, id) {
    var deleteParams = {
        dataFeedSourceIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        commandIds: [],
        assetIds: [],
    };
    deleteParams.dataFeedSourceIds.forEach(function (feedSourceId) {
        var feedSource = state.dataFeeds.sourcesById[feedSourceId];
        if (!lodash_1.isNil(feedSource) && bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource)) {
            deleteParams.assetIds.push(feedSource.dataFeedAssetId);
        }
    });
    deleteParams.commandIds = dmGetUpdateDataFeedCommandIdsForDataFeedSourceIds(state, deleteParams.dataFeedSourceIds);
    return deleteParams;
}
exports.dmGetDataFeedSourceRemoveParams = dmGetDataFeedSourceRemoveParams;
function dmPutDataFeed(name, source, usage, properties) {
    return {
        type: exports.ADD_DATA_FEED,
        payload: {
            id: utils_1.newBsDmId(),
            name: name,
            feedSourceId: source.id,
            usage: usage,
            properties: properties,
        },
    };
}
exports.dmPutDataFeed = dmPutDataFeed;
function dmUpdateDataFeed(params) {
    return function (dispatch, getState) {
        var actionListParams = dmGetUpdateDataFeedActionList(bsDmState_1.dmFilterDmState(getState()), params);
        dispatch(actionBase_1.dmBatchActions(actionListParams.actions));
        return __assign(__assign({}, actionListParams.mainAction), { meta: { dispatchList: actionListParams.actions } });
    };
}
exports.dmUpdateDataFeed = dmUpdateDataFeed;
function dmGetUpdateDataFeedActionList(dmState, params) {
    if (!lodash_1.isNil(params.properties)) {
        if (utils_1.isValidBsDmId(params.properties.parserPlugin)) {
            var plugin = selectors_1.dmGetParserPluginStateById(dmState, { id: params.properties.parserPlugin });
            if (lodash_1.isNil(plugin)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateDataFeed - invalid parser plugin ID');
            }
        }
        else if (lodash_1.isNull(params.properties.parserPlugin)) {
            params.properties.parserPlugin = bsDmInterfaces_1.BsDmIdNone;
        }
        lodash_1.omit(params.properties, 'isSystemFeed');
    }
    var actions = [];
    var feedSource;
    var usage;
    if (!lodash_1.isNil(params.feedSpec)) {
        var newFeedSourceId = selectors_1.dmGetDataFeedSourceIdForFeedSpec(dmState, params.feedSpec);
        var existingFeedSource = selectors_1.dmGetDataFeedSourceForFeedId(dmState, { id: params.id });
        var updateToSameFeedSource = !lodash_1.isNil(existingFeedSource) && !lodash_1.isNil(newFeedSourceId) && newFeedSourceId === existingFeedSource.id;
        var feedSourceProps = lodash_1.pick(params.feedSpec, ['updateInterval', 'useHeadRequest']);
        if (!updateToSameFeedSource) {
            if (!lodash_1.isNil(existingFeedSource)) {
                actions.push(dmRemoveDataFeedSourceWithParams(dmGetDataFeedSourceRemoveParams(dmState, existingFeedSource.id)));
            }
            var currentFeedSource = lodash_1.isNil(newFeedSourceId) ? null :
                selectors_1.dmGetDataFeedSourceForFeedSourceId(dmState, { id: newFeedSourceId });
            if (lodash_1.isNil(currentFeedSource)) {
                feedSource = initDataFeedSourceFromSpec(params.feedSpec, 'dmUpdateDataFeed');
                if (bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(feedSource)) {
                    feedSource.url = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: feedSource.url });
                }
                if (!lodash_1.isNil(existingFeedSource)) {
                    if (lodash_1.isNil(params.feedSpec.updateInterval)) {
                        feedSource.updateInterval = existingFeedSource.updateInterval;
                    }
                    if (lodash_1.isNil(params.feedSpec.useHeadRequest)) {
                        feedSource.useHeadRequest = existingFeedSource.useHeadRequest;
                    }
                }
            }
            else {
                feedSource = __assign(__assign({}, currentFeedSource), feedSourceProps);
            }
            if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(params.feedSpec)) {
                var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.feedSpec.assetItem);
                actions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                feedSource.dataFeedAssetId = assetItem.id;
                if (!params.name) {
                    params.name = assetItem.name;
                }
            }
            else if (lodash_1.isNil(params.name)) {
                params.name = '';
            }
            actions.push(dmPutDataFeedSource(feedSource));
        }
        else {
            if (Object.keys(feedSourceProps).length) {
                actions.push(dmUpdateDataFeedSource(__assign({ id: existingFeedSource.id }, feedSourceProps)));
            }
        }
        usage = params.feedSpec.usage;
    }
    var actionParams = lodash_1.pick(params, 'id', 'name', 'properties');
    if (!lodash_1.isNil(feedSource)) {
        actionParams.feedSourceId = feedSource.id;
    }
    if (!lodash_1.isNil(usage)) {
        actionParams.usage = usage;
    }
    var mainAction = {
        type: exports.UPDATE_DATA_FEED,
        payload: actionParams,
    };
    if (Object.keys(actionParams).length > 1 || actions.length > 0) {
        actions.push(mainAction);
    }
    return { actions: actions, mainAction: mainAction };
}
exports.dmGetUpdateDataFeedActionList = dmGetUpdateDataFeedActionList;
function dmUpdateDataFeedSourceProperties(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var dataFeedState = selectors_1.dmGetDataFeedStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(dataFeedState)) {
            var props = lodash_1.pick(params, ['updateInterval', 'useHeadRequest']);
            return dispatch(dmUpdateDataFeedSource(__assign({ id: dataFeedState.feedSourceId }, props)));
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateDataFeedSourceProperties: invalid dataFeed ID');
        }
    };
}
exports.dmUpdateDataFeedSourceProperties = dmUpdateDataFeedSourceProperties;
function dmGetDataFeedDeleteParams(state, id) {
    var deleteParams = {
        dataFeedIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        dataFeedSourceIds: [],
        commandIds: [],
        assetIds: [],
    };
    deleteParams.dataFeedIds.forEach(function (dataFeedId) {
        var dataFeed = state.dataFeeds.feedsById[dataFeedId];
        if (!lodash_1.isNil(dataFeed)) {
            deleteParams.dataFeedSourceIds.push(dataFeed.feedSourceId);
            var feedSource = selectors_1.dmGetDataFeedSourceForFeedSourceId(state, { id: dataFeed.feedSourceId });
            if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource)) {
                deleteParams.assetIds.push(feedSource.dataFeedAssetId);
            }
        }
    });
    deleteParams.commandIds = dmGetUpdateDataFeedCommandIdsForDataFeedSourceIds(state, deleteParams.dataFeedSourceIds);
    return deleteParams;
}
exports.dmGetDataFeedDeleteParams = dmGetDataFeedDeleteParams;
function dmGetUpdateDataFeedCommandIdsForDataFeedSourceIds(state, dataFeedSourceIds) {
    var commandIds = [];
    var updateDataFeedCommandIds = selectors_1.dmGetDataFeedSourceCommandIdsForDataFeedSources(state, { ids: dataFeedSourceIds });
    if (updateDataFeedCommandIds.length > 0) {
        var getUpdateDataFeedCommandIdsForSource_1 = function (feedSourceId) {
            return updateDataFeedCommandIds.filter(function (commandId) {
                var command = selectors_1.dmGetCommandStateById(state, { id: commandId });
                return command.operations[0].data.dataFeedSourceId === feedSourceId;
            });
        };
        var feedSourceDeleteCounts_1 = dataFeedSourceIds.reduce(function (countMap, feedSrcId) {
            countMap[feedSrcId] = (countMap[feedSrcId] || 0) + 1;
            return countMap;
        }, {});
        Object.keys(feedSourceDeleteCounts_1).forEach(function (feedSourceId) {
            var feedSource = selectors_1.dmGetDataFeedSourceForFeedSourceId(state, { id: feedSourceId });
            var feedSourceRefCount = lodash_1.isNil(feedSource.refCount) ? 0 : feedSource.refCount;
            if (feedSourceRefCount <= feedSourceDeleteCounts_1[feedSourceId]) {
                var updateCommandIdsForSource = getUpdateDataFeedCommandIdsForSource_1(feedSourceId);
                if (updateCommandIdsForSource.length > 0) {
                    commandIds.push.apply(commandIds, updateCommandIdsForSource);
                }
            }
        });
    }
    return commandIds;
}
function dmDeleteDataFeedWithParams(params) {
    return {
        type: exports.DELETE_DATA_FEED,
        payload: params,
    };
}
exports.dmDeleteDataFeedWithParams = dmDeleteDataFeedWithParams;
function dmDeleteDataFeed(id) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var deleteParams = dmGetDataFeedDeleteParams(dmState, id);
        var mainAction = dmDeleteDataFeedWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteDataFeed = dmDeleteDataFeed;
function dmGetPasteDataFeedAction(copySet) {
    return {
        type: exports.PASTE_DATA_FEEDS,
        payload: { copySet: copySet },
    };
}
exports.dmGetPasteDataFeedAction = dmGetPasteDataFeedAction;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsValidByteSequenceString = exports.dmIsCommandCompatibleWithPlayerModel = exports.dmIsPresentationCommandData = exports.dmIsUserVariableCommandData = exports.dmIsPluginCommandData = exports.dmIsDataFeedSourceCommandData = exports.dmIsZoneCommandData = exports.dmIsTimedCommand = exports.dmCreateTimedCommand = exports.dmCreateCommand = exports.dmCreateCommandData = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmParameterizedNumbers_1 = __webpack_require__(38);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmZone_1 = __webpack_require__(31);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
function dmCreateCommandData(type, params) {
    if (params === void 0) { params = {}; }
    switch (type) {
        case bscore_1.CommandType.SendBpOutput:
            return {
                bpType: !lodash_1.isNil(params.bpType) ? params.bpType : bscore_1.BpType.Bp200,
                bpIndex: !lodash_1.isNil(params.bpIndex) ? params.bpIndex : bscore_1.BpIndex.A,
                buttonNumber: !lodash_1.isNil(params.buttonNumber) ? params.buttonNumber : 0,
                bpAction: !lodash_1.isNil(params.bpAction) ? params.bpAction : bscore_1.BpAction.Off,
            };
        case bscore_1.CommandType.SendWss: {
            var wssCommandData = {
                wssCommandName: lodash_1.isNil(params.wssCommandName) ? '' : params.wssCommandName,
                port: lodash_1.isNil(params.port) ? '' : params.port,
            };
            if (!lodash_1.isNil(params.wssParameter)) {
                wssCommandData.wssParameter = params.wssParameter;
            }
            return wssCommandData;
        }
        case bscore_1.CommandType.SendBLC400Output: {
            var blcOutputCommandData = {
                blcIndex: !lodash_1.isNil(params.blcIndex) ? params.blcIndex : bscore_1.BlcIndex.A,
                blcEffect: !lodash_1.isNil(params.blcEffect) ? params.blcEffect : bscore_1.BlcEffect.Intensity,
                blcChannels: !lodash_1.isNil(params.blcChannels) ? params.blcChannels : 0,
            };
            if (!lodash_1.isNil(params.blcEffectTime)) {
                blcOutputCommandData.blcEffectTime = params.blcEffectTime;
            }
            if (!lodash_1.isNil(params.blcIntensity)) {
                blcOutputCommandData.blcIntensity = params.blcIntensity;
            }
            if (!lodash_1.isNil(params.blcBlink)) {
                blcOutputCommandData.blcBlink = params.blcBlink;
            }
            if (!lodash_1.isNil(params.blcBreatheMin)) {
                blcOutputCommandData.blcBreatheMin = params.blcBreatheMin;
            }
            if (!lodash_1.isNil(params.blcBreatheMax)) {
                blcOutputCommandData.blcBreatheMax = params.blcBreatheMax;
            }
            if (!lodash_1.isNil(params.blcStrobeTime)) {
                blcOutputCommandData.blcStrobeTime = params.blcStrobeTime;
            }
            if (!lodash_1.isNil(params.blcMarqueeTimeOn)) {
                blcOutputCommandData.blcMarqueeTimeOn = params.blcMarqueeTimeOn;
            }
            if (!lodash_1.isNil(params.blcMarqueeTimeOff)) {
                blcOutputCommandData.blcMarqueeTimeOff = params.blcMarqueeTimeOff;
            }
            if (!lodash_1.isNil(params.blcPlaybackMode)) {
                blcOutputCommandData.blcPlaybackMode = params.blcPlaybackMode;
            }
            if (!lodash_1.isNil(params.blcTransitionMode)) {
                blcOutputCommandData.blcTransitionMode = params.blcTransitionMode;
            }
            return blcOutputCommandData;
        }
        case bscore_1.CommandType.SetConnectorVolume: {
            var defaultZoneProperties = bsDmDefaults_1.dmGetDefaultAudioZoneProperties();
            return {
                connector: !lodash_1.isNil(params.connector) ? params.connector : bscore_1.AudioOutputName.Analog1,
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.volume) ? params.volume : defaultZoneProperties.audioVolume),
            };
        }
        case bscore_1.CommandType.IncrementConnectorVolume:
        case bscore_1.CommandType.DecrementConnectorVolume:
            return {
                connector: !lodash_1.isNil(params.connector) ? params.connector : bscore_1.AudioOutputName.Analog1,
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.volume) ? params.volume : 1),
            };
        case bscore_1.CommandType.MuteAudioOutputs:
        case bscore_1.CommandType.UnmuteAudioOutputs:
            return {
                connectorList: !lodash_1.isNil(params.connectorList) ? params.connectorList :
                    (!lodash_1.isNil(params.connector) ? [params.connector] : [bscore_1.AudioOutputName.Analog1]),
            };
        case bscore_1.CommandType.SetZoneVolume: {
            var defaultZoneProperties = bsDmDefaults_1.dmGetDefaultAudioZoneProperties();
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.volume) ? params.volume : defaultZoneProperties.audioVolume),
            };
        }
        case bscore_1.CommandType.IncrementZoneVolume:
        case bscore_1.CommandType.DecrementZoneVolume:
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.volume) ? params.volume : 1),
            };
        case bscore_1.CommandType.SetZoneChannelVolume:
        case bscore_1.CommandType.IncrementZoneChannelVolume:
        case bscore_1.CommandType.DecrementZoneChannelVolume:
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                channel: !lodash_1.isNil(params.channel) ? params.channel : 0,
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.volume) ? params.volume : 1),
            };
        case bscore_1.CommandType.SendZoneMessage:
        case bscore_1.CommandType.SendUdp:
        case bscore_1.CommandType.SendUdpBytes:
        case bscore_1.CommandType.SendIRRemote:
        case bscore_1.CommandType.SendProntoIRRemote:
        case bscore_1.CommandType.Synchronize:
        case bscore_1.CommandType.InternalSynchronize: {
            return {
                messageData: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.messageData),
            };
        }
        case bscore_1.CommandType.SendPluginMessage:
            return {
                pluginId: !lodash_1.isNil(params.pluginId) ? params.pluginId : bsDmInterfaces_1.BsDmIdNone,
                messageData: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.messageData),
            };
        case bscore_1.CommandType.SerialSendString:
        case bscore_1.CommandType.SerialSendByte:
        case bscore_1.CommandType.SerialSendBytes: {
            var data = {
                port: !lodash_1.isNil(params.port) ? params.port : '0',
                messageData: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.messageData),
            };
            if (!lodash_1.isNil(params.eol)) {
                data.eol = params.eol;
            }
            return data;
        }
        case bscore_1.CommandType.GpioOn:
        case bscore_1.CommandType.GpioOff:
            return {
                gpioNumber: !lodash_1.isNil(params.gpioNumber) ? params.gpioNumber : 0,
            };
        case bscore_1.CommandType.LightOn:
        case bscore_1.CommandType.LightOff:
            return {
                lightNumber: !lodash_1.isNil(params.lightNumber) ? params.lightNumber : 0,
            };
        case bscore_1.CommandType.SendBmap:
            var bmapData = {
                port: !lodash_1.isNil(params.port) ? params.port : '0',
                functionBlock: !lodash_1.isNil(params.functionBlock) ? params.functionBlock : '',
                function: !lodash_1.isNil(params.function) ? params.function : '',
                operator: !lodash_1.isNil(params.operator) ? params.operator : '',
                fields: !lodash_1.isNil(params.fields) ? params.fields : [],
            };
            return bmapData;
        case bscore_1.CommandType.SendBmapHex:
            var bmapHexData = {
                port: !lodash_1.isNil(params.port) ? params.port : '0',
                messageData: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.messageData),
            };
            return bmapHexData;
        case bscore_1.CommandType.GpioSetState:
            return {
                gpioState: !lodash_1.isNil(params.gpioState) ? params.gpioState : 0,
            };
        case bscore_1.CommandType.CecSendString:
            return {
                hexString: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.hexString),
                substituteSourceAddress: lodash_1.isNil(params.substituteSourceAddress) ? false : params.substituteSourceAddress,
            };
        case bscore_1.CommandType.CecPhilipsSetVolume:
            return {
                volume: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(params.volume),
            };
        case bscore_1.CommandType.BeaconStart:
        case bscore_1.CommandType.BeaconStop:
            return {
                beaconName: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.messageData),
            };
        case bscore_1.CommandType.Pause:
            return {
                pauseTime: bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(!lodash_1.isNil(params.pauseTime) ? params.pauseTime : 300),
            };
        case bscore_1.CommandType.SetVariable:
            return {
                userVariableId: !lodash_1.isNil(params.userVariableId) ? params.userVariableId : bsDmInterfaces_1.BsDmIdNone,
                userVariableValue: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(lodash_1.isNil(params.userVariableValue) ? '' : params.userVariableValue),
            };
        case bscore_1.CommandType.IncrementVariable:
        case bscore_1.CommandType.DecrementVariable:
        case bscore_1.CommandType.ResetVariable:
            return {
                userVariableId: !lodash_1.isNil(params.userVariableId) ? params.userVariableId : bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.CommandType.ResizeZone:
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                position: !lodash_1.isNil(params.position) ? params.position : bscore_1.bscCreatePercentageRect(0, 0, 100, 100),
            };
        case bscore_1.CommandType.HideZone:
        case bscore_1.CommandType.ShowZone:
        case bscore_1.CommandType.PauseZonePlayback:
        case bscore_1.CommandType.ResumeZonePlayback:
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.CommandType.SwitchPresentation:
            return {
                presentationId: lodash_1.isNil(params.presentationId) ? bsDmInterfaces_1.BsDmIdNone : params.presentationId,
                userVariableId: lodash_1.isNil(params.userVariableId) ? null : params.userVariableId,
            };
        case bscore_1.CommandType.SetAllAudioOutputs: {
            var audioOutputAssignments = lodash_1.isNil(params.audioOutputSpecification) ? __assign(__assign({}, bsDmDefaults_1.dmGetDefaultAudioZoneProperties().audioOutputAssignments), params.audioOutputAssignments) :
                bsDmZone_1.dmGetAudioOutputAssignmentMapFromSpec(params.audioOutputSpecification);
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                audioOutputAssignments: audioOutputAssignments,
            };
        }
        case bscore_1.CommandType.SetAudioMode: {
            var defaultZoneProperties = bsDmDefaults_1.dmGetDefaultAudioZoneProperties();
            return {
                zoneId: !lodash_1.isNil(params.zoneId) ? params.zoneId : bsDmInterfaces_1.BsDmIdNone,
                mode: !lodash_1.isNil(params.audioMode) ? params.audioMode : defaultZoneProperties.audioMixMode,
            };
        }
        case bscore_1.CommandType.UpdateDataFeed: {
            return {
                dataFeedSourceId: !lodash_1.isNil(params.dataFeedSourceId) ? params.dataFeedSourceId : bsDmInterfaces_1.BsDmIdNone,
            };
        }
    }
    return null;
}
exports.dmCreateCommandData = dmCreateCommandData;
function dmCreateCommand(name, type, params) {
    var operations;
    if (type === bscore_1.CommandType.SetAllAudioOutputs) {
        operations = [
            { type: bscore_1.CommandType.SetAllAudioOutputs, data: dmCreateCommandData(bscore_1.CommandType.SetAllAudioOutputs, params) },
            { type: bscore_1.CommandType.SetAudioMode, data: dmCreateCommandData(bscore_1.CommandType.SetAudioMode, params) },
            { type: bscore_1.CommandType.ConfigureAudioResources, data: null },
        ];
    }
    else {
        operations = [{ type: type, data: dmCreateCommandData(type, params) }];
    }
    return { id: bsDmInterfaces_1.BsDmIdNone, name: name, operations: operations, sequenceId: bsDmInterfaces_1.BsDmIdNone };
}
exports.dmCreateCommand = dmCreateCommand;
function dmCreateTimedCommand(name, type, startTime, params) {
    if (startTime === void 0) { startTime = 0; }
    return __assign(__assign({}, dmCreateCommand(name, type, params)), { startTime: startTime });
}
exports.dmCreateTimedCommand = dmCreateTimedCommand;
function dmIsTimedCommand(command) {
    return !lodash_1.isNil(command)
        && command.hasOwnProperty('startTime')
        && !lodash_1.isNil(command.startTime);
}
exports.dmIsTimedCommand = dmIsTimedCommand;
function dmIsZoneCommandData(data) {
    return !lodash_1.isNil(data) && data.hasOwnProperty('zoneId');
}
exports.dmIsZoneCommandData = dmIsZoneCommandData;
function dmIsDataFeedSourceCommandData(data) {
    return !lodash_1.isNil(data) && data.hasOwnProperty('dataFeedSourceId');
}
exports.dmIsDataFeedSourceCommandData = dmIsDataFeedSourceCommandData;
function dmIsPluginCommandData(data) {
    return !lodash_1.isNil(data) && data.hasOwnProperty('pluginId');
}
exports.dmIsPluginCommandData = dmIsPluginCommandData;
function dmIsUserVariableCommandData(data) {
    return !lodash_1.isNil(data) && data.hasOwnProperty('userVariableId');
}
exports.dmIsUserVariableCommandData = dmIsUserVariableCommandData;
function dmIsPresentationCommandData(data) {
    return !lodash_1.isNil(data) && data.hasOwnProperty('presentationId');
}
exports.dmIsPresentationCommandData = dmIsPresentationCommandData;
function dmIsCommandCompatibleWithPlayerModel(command, playerModel) {
    var isCommandOperationCompatible = function (operation) {
        var opResult = { ok: true };
        switch (operation.type) {
            case bscore_1.CommandType.GpioOff:
            case bscore_1.CommandType.GpioOn:
            case bscore_1.CommandType.GpioSetState:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Gpio);
                break;
            case bscore_1.CommandType.LightOff:
            case bscore_1.CommandType.LightOn:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.LightsByGpio);
                break;
            case bscore_1.CommandType.SendBpOutput:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Bp);
                break;
            case bscore_1.CommandType.SerialSendString:
            case bscore_1.CommandType.SerialSendByte:
            case bscore_1.CommandType.SerialSendBytes:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Serial) ||
                    bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.UsbTap);
                break;
            case bscore_1.CommandType.SendUdp:
            case bscore_1.CommandType.SendUdpBytes:
            case bscore_1.CommandType.Synchronize:
            case bscore_1.CommandType.InternalSynchronize:
            case bscore_1.CommandType.UpdateDataFeed:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Networking);
                break;
            case bscore_1.CommandType.SendIRRemote:
            case bscore_1.CommandType.SendProntoIRRemote:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Usb);
                break;
            case bscore_1.CommandType.BeaconStart:
            case bscore_1.CommandType.BeaconStop:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Bluetooth);
                break;
            case bscore_1.CommandType.ResizeZone:
            case bscore_1.CommandType.HideZone:
            case bscore_1.CommandType.ShowZone:
                opResult.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Video);
                break;
        }
        return opResult;
    };
    var result = { ok: true };
    command.operations.some(function (operation) {
        result = isCommandOperationCompatible(operation);
        return !result.ok;
    });
    return result;
}
exports.dmIsCommandCompatibleWithPlayerModel = dmIsCommandCompatibleWithPlayerModel;
var reByteStringSep = /\s*(?:,|$)\s*/;
function dmIsValidByteSequenceString(data, multipleBytes) {
    if (multipleBytes === void 0) { multipleBytes = true; }
    var result = { ok: lodash_1.isString(data) && data.length > 0 };
    var valueStringIllegal = function (valueString) {
        var val = Number(valueString);
        return val < 0 || val > 255;
    };
    if (result.ok) {
        var bytes = data.trim().split(reByteStringSep);
        result.ok = multipleBytes ? !bytes.some(valueStringIllegal) :
            bytes.length === 1 && !valueStringIllegal(bytes[0]);
        if (!result.ok) {
            result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.byteStringCommandDataIsIncorrect);
        }
    }
    return result;
}
exports.dmIsValidByteSequenceString = dmIsValidByteSequenceString;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fnAddCopySetDataFeed = exports.fnAddCopySetAssetItem = exports.dmUpdateUserVariableCopySetWithUniqueIds = exports.dmUpdateCommandCopySetWithUniqueIds = exports.dmUpdateMediaStateCopySetForPasteTargetContainer = exports.dmUpdateMediaStateCopySetWithUniqueStateNamesForZone = exports.dmUpdateLiveTextCopySetWithUniqueIds = exports.dmUpdateMediaStateCopySetWithUniqueIds = exports.dmIsUserVariableCopySet = exports.dmCreateNewUserVariableCopySet = exports.dmIsCommandCopySet = exports.dmCreateNewCommandCopySet = exports.dmIsLiveTextCopySet = exports.dmCreateNewLiveTextCopySet = exports.dmIsPlaylistMediaStateCopySet = exports.dmIsMediaStateCopySet = exports.dmCreateNewMediaStateCopySet = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmHtmlSite_1 = __webpack_require__(37);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmLiveText_1 = __webpack_require__(28);
var selectors_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(3);
var bsDmVersion_1 = __webpack_require__(58);
var lodash_1 = __webpack_require__(0);
function dmCreateNewMediaStateCopySet(contentType, containerId, zoneId, signId) {
    return {
        contentType: contentType,
        'version': bsDmVersion_1.version,
        containerId: containerId,
        mediaStates: {
            mediaStatesById: {},
            sequencesByParentId: {},
        },
        events: {},
        transitions: {
            transitionsById: {},
            sequencesByEventId: {},
        },
        commands: {
            commandsById: {},
            sequencesById: {},
        },
        liveText: {
            itemsById: {},
            layersByCanvasId: {},
            dataFeedsByGroupId: {},
            canvasesById: {},
        },
        htmlSites: {},
        dataFeeds: {
            feedsById: {},
            sourcesById: {},
        },
        userVariables: {
            variablesById: {},
            sequence: [],
        },
        assetMap: {},
        csInitialMediaStateId: bsDmInterfaces_1.BsDmIdNone,
        zoneId: zoneId,
        signId: signId,
        nextMediaStateTagIndex: 0,
    };
}
exports.dmCreateNewMediaStateCopySet = dmCreateNewMediaStateCopySet;
function dmIsMediaStateCopySet(copySet) {
    return !lodash_1.isNil(copySet)
        && typeof copySet === 'object'
        && copySet.hasOwnProperty('contentType')
        && (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Interactive
            || copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Playlist
            || copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.MediaItemList);
}
exports.dmIsMediaStateCopySet = dmIsMediaStateCopySet;
function dmIsPlaylistMediaStateCopySet(copySet) {
    return !lodash_1.isNil(copySet)
        && typeof copySet === 'object'
        && copySet.hasOwnProperty('contentType')
        && (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Playlist);
}
exports.dmIsPlaylistMediaStateCopySet = dmIsPlaylistMediaStateCopySet;
function dmCreateNewLiveTextCopySet(canvasId) {
    return {
        contentType: bsDmInterfaces_1.DmCopySetContentType.LiveText,
        'version': bsDmVersion_1.version,
        containerId: canvasId,
        liveText: {
            itemsById: {},
            dataFeedsByGroupId: {},
        },
        dataFeeds: {
            feedsById: {},
            sourcesById: {},
        },
        assetMap: {},
    };
}
exports.dmCreateNewLiveTextCopySet = dmCreateNewLiveTextCopySet;
function dmIsLiveTextCopySet(copySet) {
    return !lodash_1.isNil(copySet)
        && typeof copySet === 'object'
        && copySet.hasOwnProperty('contentType')
        && (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.LiveText);
}
exports.dmIsLiveTextCopySet = dmIsLiveTextCopySet;
function dmCreateNewCommandCopySet(parentId) {
    if (parentId === void 0) { parentId = bsDmInterfaces_1.BsDmIdNone; }
    return {
        contentType: bsDmInterfaces_1.DmCopySetContentType.Command,
        'version': bsDmVersion_1.version,
        containerId: parentId,
        commands: {
            commandsById: {},
            sequencesById: {},
        },
    };
}
exports.dmCreateNewCommandCopySet = dmCreateNewCommandCopySet;
function dmIsCommandCopySet(copySet) {
    return !lodash_1.isNil(copySet)
        && typeof copySet === 'object'
        && copySet.hasOwnProperty('contentType')
        && (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.Command);
}
exports.dmIsCommandCopySet = dmIsCommandCopySet;
function dmCreateNewUserVariableCopySet(signId) {
    return {
        contentType: bsDmInterfaces_1.DmCopySetContentType.UserVariable,
        'version': bsDmVersion_1.version,
        containerId: signId,
        userVariables: {
            variablesById: {},
            sequence: [],
        },
        dataFeeds: {
            feedsById: {},
            sourcesById: {},
        },
        assetMap: {},
    };
}
exports.dmCreateNewUserVariableCopySet = dmCreateNewUserVariableCopySet;
function dmIsUserVariableCopySet(copySet) {
    return !lodash_1.isNil(copySet)
        && typeof copySet === 'object'
        && copySet.hasOwnProperty('contentType')
        && (copySet.contentType === bsDmInterfaces_1.DmCopySetContentType.UserVariable);
}
exports.dmIsUserVariableCopySet = dmIsUserVariableCopySet;
var createNewMediaStateIdSubstitutionMap = function () {
    return {
        mediaStateIds: new Map(),
        eventIds: new Map(),
        transitionIds: new Map(),
        commandIds: new Map(),
        commandSequenceIds: new Map(),
        htmlSiteIds: new Map(),
        dataFeedIds: new Map(),
        dataFeedSourceIds: new Map(),
        assetIds: new Map(),
        liveTextCanvasIds: new Map(),
        liveTextItemIds: new Map(),
        liveTextGroupIds: new Map(),
        userVariableIds: new Map(),
    };
};
function dmUpdateMediaStateCopySetWithUniqueIds(copySet, mergeParams) {
    if (mergeParams === void 0) { mergeParams = {}; }
    var subMap = createNewMediaStateIdSubstitutionMap();
    var updatedCopySet = __assign(__assign({}, dmCreateNewMediaStateCopySet(copySet.contentType, copySet.containerId, copySet.zoneId, copySet.signId)), { csInitialMediaStateId: copySet.csInitialMediaStateId });
    var commands = lodash_1.isNil(mergeParams.updatedCommandCollection) ?
        copySet.commands : mergeParams.updatedCommandCollection;
    var dataFeeds = copySet.dataFeeds;
    var assetMap = copySet.assetMap;
    if (!lodash_1.isNil(mergeParams.userVariableCopySetMergeParams)) {
        var collectionMap_1 = mergeParams.userVariableCopySetMergeParams.userVariables.variablesById;
        mergeParams.userVariableCopySetMergeParams.userVariables.sequence.forEach(function (uvId) {
            var newId = utils_1.newBsDmId();
            subMap.userVariableIds.set(uvId, newId);
            updatedCopySet.userVariables.variablesById[newId] = __assign(__assign({}, collectionMap_1[uvId]), { id: newId });
            updatedCopySet.userVariables.sequence.push(newId);
        });
        mergeParams.userVariableCopySetMergeParams.matchedUserVariableIds.forEach(function (value, key) {
            subMap.userVariableIds.set(key, value);
        });
        var updatedDataFeedsAndAssets = removeDataFeedsForUserVariableIds(Array.from(mergeParams.userVariableCopySetMergeParams.matchedUserVariableIds.keys()), copySet.userVariables.variablesById, copySet.dataFeeds, copySet.assetMap);
        dataFeeds = updatedDataFeedsAndAssets.dataFeeds;
        assetMap = updatedDataFeedsAndAssets.assetMap;
    }
    updatedCopySet.mediaStates.mediaStatesById = updateCollectionIds(copySet.mediaStates.mediaStatesById, function (oldId, newId) { return subMap.mediaStateIds.set(oldId, newId); });
    updatedCopySet.events = updateCollectionIds(copySet.events, function (oldId, newId) { return subMap.eventIds.set(oldId, newId); });
    updatedCopySet.transitions.transitionsById = updateCollectionIds(copySet.transitions.transitionsById, function (oldId, newId) { return subMap.transitionIds.set(oldId, newId); });
    updatedCopySet.commands.commandsById = updateCollectionIds(commands.commandsById, function (oldId, newId) { return subMap.commandIds.set(oldId, newId); });
    updatedCopySet.commands.sequencesById = updateCollectionIds(commands.sequencesById, function (oldId, newId) { return subMap.commandSequenceIds.set(oldId, newId); });
    updatedCopySet.htmlSites = updateCollectionIds(copySet.htmlSites, function (oldId, newId) { return subMap.htmlSiteIds.set(oldId, newId); });
    updatedCopySet.dataFeeds.feedsById = updateCollectionIds(dataFeeds.feedsById, function (oldId, newId) { return subMap.dataFeedIds.set(oldId, newId); });
    updatedCopySet.liveText.canvasesById = updateCollectionIds(copySet.liveText.canvasesById, function (oldId, newId) { return subMap.liveTextCanvasIds.set(oldId, newId); });
    updatedCopySet.liveText.itemsById = updateCollectionIds(copySet.liveText.itemsById, function (oldId, newId) { return subMap.liveTextItemIds.set(oldId, newId); });
    updatedCopySet.liveText.dataFeedsByGroupId = updateCollectionIds(copySet.liveText.dataFeedsByGroupId, function (oldId, newId) { return subMap.liveTextGroupIds.set(oldId, newId); });
    var mergeAssetItems = false;
    var mergedAssetParams = mergeParams.assetItemMergeParams;
    if (!lodash_1.isNil(mergedAssetParams)) {
        mergeAssetItems = true;
        var validIds_1 = Object.keys(assetMap);
        mergedAssetParams.assetIds.forEach(function (value, key) {
            if (validIds_1.indexOf(key) >= 0) {
                updatedCopySet.assetMap[value] = mergedAssetParams.assetMap[value];
                subMap.assetIds.set(key, value);
            }
        });
    }
    else {
        updatedCopySet.assetMap = assetMap;
    }
    var substituteAssetIdIfNecessary = function (entity, propName) {
        if (mergeAssetItems && utils_1.isValidBsDmId(entity[propName])) {
            var newAssetId = subMap.assetIds.get(entity[propName]);
            if (!lodash_1.isNil(newAssetId)) {
                entity[propName] = newAssetId;
            }
        }
    };
    var mergeDataFeedSources = false;
    var mergedDataFeedSourceParams = mergeParams.dataFeedSourceMergeParams;
    if (!lodash_1.isNil(mergedDataFeedSourceParams)) {
        mergeDataFeedSources = true;
        var validIds_2 = Object.keys(dataFeeds.sourcesById);
        mergedDataFeedSourceParams.dataFeedSourceIds.forEach(function (value, key) {
            if (validIds_2.indexOf(key) >= 0) {
                updatedCopySet.dataFeeds.sourcesById[value] = mergedDataFeedSourceParams.dataFeedSources[value];
                subMap.dataFeedSourceIds.set(key, value);
            }
        });
    }
    else {
        updatedCopySet.dataFeeds.sourcesById = dataFeeds.sourcesById;
    }
    var substituteDataFeedSourceIdIfNecessary = function (entity, propName) {
        if (mergeDataFeedSources && utils_1.isValidBsDmId(entity[propName])) {
            var newAssetId = subMap.dataFeedSourceIds.get(entity[propName]);
            if (!lodash_1.isNil(newAssetId)) {
                entity[propName] = newAssetId;
            }
        }
    };
    if (dmIsPlaylistMediaStateCopySet(copySet)) {
        updatedCopySet.plStartingMediaStateId =
            subMap.mediaStateIds.get(copySet.plStartingMediaStateId);
        updatedCopySet.plLastTransitionId =
            subMap.transitionIds.get(copySet.plLastTransitionId);
    }
    Object.keys(updatedCopySet.mediaStates.mediaStatesById).forEach(function (mediaStateId) {
        var contentItem = updatedCopySet.mediaStates.mediaStatesById[mediaStateId].contentItem;
        if (bsDmContentItems_1.dmContentItemIsMediaContentItem(contentItem)) {
            substituteAssetIdIfNecessary(contentItem, 'assetId');
        }
        else if (bsDmContentItems_1.dmContentItemIsHtmlContentItem(contentItem)) {
            contentItem.siteId = subMap.htmlSiteIds.get(contentItem.siteId);
            substituteAssetIdIfNecessary(contentItem, 'userStylesheetAssetId');
        }
        else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(contentItem)) {
            contentItem.dataFeedId = subMap.dataFeedIds.get(contentItem.dataFeedId);
        }
        else if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(contentItem)) {
            contentItem.canvasId = subMap.liveTextCanvasIds.get(contentItem.canvasId);
        }
        else if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(contentItem)) {
            if (contentItem.useDataFeed) {
                contentItem.dataFeedId = subMap.dataFeedIds.get(contentItem.dataFeedId);
            }
            if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(contentItem)) {
                substituteAssetIdIfNecessary(contentItem, 'defaultMediaId');
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(contentItem)) {
            contentItem.defaultDataFeedId =
                subMap.dataFeedIds.get(contentItem.defaultDataFeedId);
        }
        else if (bsDmContentItems_1.dmContentItemIsSuperStateContentItem(contentItem)) {
            contentItem.initialMediaStateId = subMap.mediaStateIds.get(contentItem.initialMediaStateId);
        }
        var mediaStateContainer = updatedCopySet.mediaStates.mediaStatesById[mediaStateId].container;
        if (bsDmContentItems_1.dmIsMediaStateBasedContainer(mediaStateContainer)) {
            var updatedSuperStateContainerId = subMap.mediaStateIds.get(mediaStateContainer.id);
            if (!lodash_1.isNil(updatedSuperStateContainerId)) {
                mediaStateContainer.id = updatedSuperStateContainerId;
            }
        }
    });
    updatedCopySet.mediaStates.sequencesByParentId =
        Object.keys(copySet.mediaStates.sequencesByParentId).reduce(function (newMap, parentId) {
            var sequenceObject = lodash_1.cloneDeep(copySet.mediaStates.sequencesByParentId[parentId]);
            sequenceObject.sequence =
                sequenceObject.sequence.map(function (mediaStateId) { return subMap.mediaStateIds.get(mediaStateId); });
            if (sequenceObject.parentType !== bsDmInterfaces_1.MediaStateContainerType.Zone) {
                sequenceObject.id = subMap.mediaStateIds.get(parentId);
            }
            newMap[sequenceObject.id] = sequenceObject;
            return newMap;
        }, {});
    Object.keys(updatedCopySet.events).forEach(function (eventId) {
        var event = updatedCopySet.events[eventId];
        event.mediaStateId = subMap.mediaStateIds.get(event.mediaStateId);
    });
    Object.keys(updatedCopySet.transitions.transitionsById).forEach(function (transitionId) {
        var transition = updatedCopySet.transitions.transitionsById[transitionId];
        transition.eventId = subMap.eventIds.get(transition.eventId);
        if (utils_1.isValidBsDmId(transition.targetMediaStateId)) {
            transition.targetMediaStateId = subMap.mediaStateIds.get(transition.targetMediaStateId);
        }
    });
    updatedCopySet.transitions.sequencesByEventId =
        Object.keys(copySet.transitions.sequencesByEventId).reduce(function (newMap, eventId) {
            var sequenceObject = lodash_1.cloneDeep(copySet.transitions.sequencesByEventId[eventId]);
            sequenceObject.sequence =
                sequenceObject.sequence.map(function (transitionId) { return subMap.transitionIds.get(transitionId); });
            sequenceObject.id = subMap.eventIds.get(eventId);
            newMap[sequenceObject.id] = sequenceObject;
            return newMap;
        }, {});
    Object.keys(updatedCopySet.commands.commandsById).forEach(function (commandId) {
        var command = updatedCopySet.commands.commandsById[commandId];
        command.sequenceId = subMap.commandSequenceIds.get(command.sequenceId);
    });
    Object.keys(updatedCopySet.commands.sequencesById).forEach(function (sequenceId) {
        var sequenceObject = updatedCopySet.commands.sequencesById[sequenceId];
        if (sequenceObject.type === bscore_1.CommandSequenceType.Event) {
            sequenceObject.parentId = subMap.eventIds.get(sequenceObject.parentId);
        }
        else if (sequenceObject.type === bscore_1.CommandSequenceType.Transition) {
            sequenceObject.parentId = subMap.transitionIds.get(sequenceObject.parentId);
        }
        else {
            sequenceObject.parentId = subMap.mediaStateIds.get(sequenceObject.parentId);
        }
        sequenceObject.sequence =
            sequenceObject.sequence.map(function (commandId) { return subMap.commandIds.get(commandId); });
    });
    Object.keys(updatedCopySet.htmlSites).forEach(function (htmlSiteId) {
        var htmlSite = updatedCopySet.htmlSites[htmlSiteId];
        if (bsDmHtmlSite_1.dmHtmlSiteIsHostedHtmlSite(htmlSite)) {
            substituteAssetIdIfNecessary(htmlSite, 'indexAssetId');
        }
    });
    Object.keys(updatedCopySet.dataFeeds.feedsById).forEach(function (dataFeedId) {
        var dataFeed = updatedCopySet.dataFeeds.feedsById[dataFeedId];
        substituteDataFeedSourceIdIfNecessary(dataFeed, 'feedSourceId');
    });
    Object.keys(updatedCopySet.dataFeeds.sourcesById).forEach(function (feedSourceId) {
        var feedSource = updatedCopySet.dataFeeds.sourcesById[feedSourceId];
        if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource)) {
            substituteAssetIdIfNecessary(feedSource, 'dataFeedAssetId');
        }
    });
    Object.keys(updatedCopySet.liveText.canvasesById).forEach(function (canvasId) {
        var liveTextCanvas = updatedCopySet.liveText.canvasesById[canvasId];
        substituteAssetIdIfNecessary(liveTextCanvas, 'backgroundImageId');
    });
    Object.keys(updatedCopySet.liveText.itemsById).forEach(function (itemId) {
        var liveTextItem = updatedCopySet.liveText.itemsById[itemId];
        liveTextItem.canvasId = subMap.liveTextCanvasIds.get(liveTextItem.canvasId);
        if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(liveTextItem)) {
            liveTextItem.dataFeedId = subMap.dataFeedIds.get(liveTextItem.dataFeedId);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(liveTextItem)) {
            liveTextItem.groupId = subMap.liveTextGroupIds.get(liveTextItem.groupId);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataImageContent(liveTextItem) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(liveTextItem)) {
            substituteAssetIdIfNecessary(liveTextItem, 'assetId');
        }
        if (bsDmLiveText_1.dmIsLiveTextDataTextContent(liveTextItem)) {
            substituteAssetIdIfNecessary(liveTextItem.widget, 'font');
            substituteAssetIdIfNecessary(liveTextItem.widget, 'backgroundBitmapAssetId');
        }
    });
    updatedCopySet.liveText.layersByCanvasId =
        Object.keys(copySet.liveText.layersByCanvasId).reduce(function (newMap, copiedCanvasId) {
            var idSequence = copySet.liveText.layersByCanvasId[copiedCanvasId];
            newMap[subMap.liveTextCanvasIds.get(copiedCanvasId)] =
                idSequence.map(function (itemId) { return subMap.liveTextItemIds.get(itemId); });
            return newMap;
        }, {});
    Object.keys(updatedCopySet.liveText.dataFeedsByGroupId).forEach(function (groupId) {
        var groupItem = updatedCopySet.liveText.dataFeedsByGroupId[groupId];
        groupItem.canvasId = subMap.liveTextCanvasIds.get(groupItem.canvasId);
        groupItem.dataFeedIds = groupItem.dataFeedIds.map(function (dataFeedId) { return subMap.dataFeedIds.get(dataFeedId); });
    });
    Object.keys(updatedCopySet.userVariables.variablesById).forEach(function (userVarId) {
        var userVariable = updatedCopySet.userVariables.variablesById[userVarId];
        if (userVariable.isNetworked) {
            if (utils_1.isValidBsDmId(userVariable.dataFeedId) && utils_1.isValidBsDmId(subMap.dataFeedIds.get(userVariable.dataFeedId))) {
                userVariable.dataFeedId = subMap.dataFeedIds.get(userVariable.dataFeedId);
            }
            else {
                userVariable.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
            }
        }
    });
    if (utils_1.isValidBsDmId(updatedCopySet.csInitialMediaStateId)) {
        updatedCopySet.csInitialMediaStateId = subMap.mediaStateIds.get(updatedCopySet.csInitialMediaStateId);
    }
    return {
        copySet: updatedCopySet,
        mediaStateIdMap: subMap.mediaStateIds,
        eventIdMap: subMap.eventIds,
        userVariableIdMap: subMap.userVariableIds,
        dataFeedSourceIdMap: subMap.dataFeedSourceIds,
    };
}
exports.dmUpdateMediaStateCopySetWithUniqueIds = dmUpdateMediaStateCopySetWithUniqueIds;
var createNewLiveTextIdSubstitutionMap = function () {
    return {
        dataFeedIds: new Map(),
        liveTextItemIds: new Map(),
        liveTextGroupIds: new Map(),
    };
};
function updateCollectionIds(collection, mapNewId) {
    return Object.keys(collection).reduce(function (result, id) {
        var newId = utils_1.newBsDmId();
        result[newId] = lodash_1.cloneDeep(collection[id]);
        result[newId].id = newId;
        mapNewId(id, newId);
        return result;
    }, {});
}
function removeDataFeedsForUserVariableIds(inactiveUvIds, userVariableMap, originalDataFeeds, originalAssets) {
    var dataFeeds = lodash_1.cloneDeep(originalDataFeeds);
    var assetMap = lodash_1.cloneDeep(originalAssets);
    inactiveUvIds.forEach(function (key) {
        var userVariable = userVariableMap[key];
        if (utils_1.isValidBsDmId(userVariable.dataFeedId)) {
            var dataFeedState = dataFeeds.feedsById[userVariable.dataFeedId];
            if (!lodash_1.isNil(dataFeedState)) {
                var feedSourceId = dataFeedState.feedSourceId;
                delete dataFeeds.feedsById[userVariable.dataFeedId];
                var dataFeedSource = dataFeeds.sourcesById[feedSourceId];
                if (dataFeedSource.refCount > 1) {
                    dataFeedSource.refCount -= 1;
                }
                else {
                    delete dataFeeds.sourcesById[feedSourceId];
                }
                if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(dataFeedSource)) {
                    var assetId = dataFeedSource.dataFeedAssetId;
                    if (utils_1.isValidBsDmId(assetId)) {
                        var assetItem = assetMap[assetId];
                        if (!lodash_1.isNil(assetItem)) {
                            if (assetItem.refCount > 1) {
                                assetItem.refCount -= 1;
                            }
                            else {
                                delete assetMap[assetId];
                            }
                        }
                    }
                }
            }
        }
    });
    return { dataFeeds: dataFeeds, assetMap: assetMap };
}
function dmUpdateLiveTextCopySetWithUniqueIds(copySet, targetCanvasId) {
    var subMap = createNewLiveTextIdSubstitutionMap();
    var updatedCopySet = __assign(__assign({}, dmCreateNewLiveTextCopySet(copySet.containerId)), { dataFeeds: { feedsById: {}, sourcesById: copySet.dataFeeds.sourcesById }, assetMap: copySet.assetMap });
    updatedCopySet.liveText.itemsById = updateCollectionIds(copySet.liveText.itemsById, function (oldId, newId) { return subMap.liveTextItemIds.set(oldId, newId); });
    updatedCopySet.liveText.dataFeedsByGroupId = updateCollectionIds(copySet.liveText.dataFeedsByGroupId, function (oldId, newId) { return subMap.liveTextGroupIds.set(oldId, newId); });
    updatedCopySet.dataFeeds.feedsById = updateCollectionIds(copySet.dataFeeds.feedsById, function (oldId, newId) { return subMap.dataFeedIds.set(oldId, newId); });
    Object.keys(updatedCopySet.liveText.itemsById).forEach(function (itemId) {
        var liveTextItem = updatedCopySet.liveText.itemsById[itemId];
        liveTextItem.canvasId = targetCanvasId;
        if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(liveTextItem)) {
            liveTextItem.dataFeedId = subMap.dataFeedIds.get(liveTextItem.dataFeedId);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(liveTextItem)) {
            liveTextItem.groupId = subMap.liveTextGroupIds.get(liveTextItem.groupId);
        }
    });
    Object.keys(updatedCopySet.liveText.dataFeedsByGroupId).forEach(function (groupId) {
        var groupItem = updatedCopySet.liveText.dataFeedsByGroupId[groupId];
        groupItem.canvasId = targetCanvasId;
        groupItem.dataFeedIds = groupItem.dataFeedIds.map(function (dataFeedId) { return subMap.dataFeedIds.get(dataFeedId); });
    });
    return updatedCopySet;
}
exports.dmUpdateLiveTextCopySetWithUniqueIds = dmUpdateLiveTextCopySetWithUniqueIds;
function dmUpdateMediaStateCopySetWithUniqueStateNamesForZone(dmState, copySet, targetZoneId) {
    if (copySet.contentType !== bsDmInterfaces_1.DmCopySetContentType.MediaItemList) {
        var zoneNameMap_1 = selectors_1.dmGetMediaStateNameMapForZone(dmState, { id: targetZoneId });
        var nextTagIndex_1 = selectors_1.dmGetNextMediaStateTagIndexForZone(dmState, { id: targetZoneId });
        Object.keys(copySet.mediaStates.mediaStatesById).forEach(function (id) {
            var mediaState = copySet.mediaStates.mediaStatesById[id];
            if (!bsDmContentItems_1.dmIsMediaSequenceContainer(mediaState.container)) {
                mediaState.tag = nextTagIndex_1.toString();
                nextTagIndex_1 += 1;
                if (!lodash_1.isNil(zoneNameMap_1[mediaState.name])) {
                    mediaState.name = utils_1.getUniqueNameForNameMap(mediaState.name, zoneNameMap_1);
                    zoneNameMap_1[mediaState.name] = [mediaState.id];
                }
            }
        });
        copySet.nextMediaStateTagIndex = nextTagIndex_1;
    }
    return copySet;
}
exports.dmUpdateMediaStateCopySetWithUniqueStateNamesForZone = dmUpdateMediaStateCopySetWithUniqueStateNamesForZone;
function dmUpdateMediaStateCopySetForPasteTargetContainer(copySet, targetContainer) {
    Object.keys(copySet.mediaStates.mediaStatesById).forEach(function (id) {
        var mediaState = copySet.mediaStates.mediaStatesById[id];
        if (copySet.containerId === mediaState.container.id) {
            mediaState.container = __assign({}, targetContainer);
        }
    });
    copySet.containerId = targetContainer.id;
    return copySet;
}
exports.dmUpdateMediaStateCopySetForPasteTargetContainer = dmUpdateMediaStateCopySetForPasteTargetContainer;
var createNewCommandIdSubstitutionMap = function () {
    return {
        commandIds: new Map(),
    };
};
function dmUpdateCommandCopySetWithUniqueIds(copySet, targetParentId, targetCommandSequenceType, existingSequenceId) {
    var subMap = createNewCommandIdSubstitutionMap();
    var updatedCopySet = dmCreateNewCommandCopySet(targetParentId);
    var collectionMap = copySet.commands.commandsById;
    Object.keys(collectionMap).forEach(function (id) {
        var newId = utils_1.newBsDmId();
        subMap.commandIds.set(id, newId);
        updatedCopySet.commands.commandsById[newId] = lodash_1.cloneDeep(collectionMap[id]);
        updatedCopySet.commands.commandsById[newId].id = newId;
    });
    var sequenceId = lodash_1.isNil(existingSequenceId) ? utils_1.newBsDmId() : existingSequenceId;
    var copySetSequenceId = Object.keys(copySet.commands.sequencesById)[0];
    updatedCopySet.commands.sequencesById[sequenceId] = {
        id: sequenceId,
        type: targetCommandSequenceType,
        parentId: targetParentId,
        sequence: copySet.commands.sequencesById[copySetSequenceId].sequence
            .map(function (commandId) { return subMap.commandIds.get(commandId); }),
    };
    Object.keys(updatedCopySet.commands.commandsById).forEach(function (commandId) {
        var command = updatedCopySet.commands.commandsById[commandId];
        command.sequenceId = sequenceId;
    });
    return { copySet: updatedCopySet, commandIdMap: subMap.commandIds, sequenceId: sequenceId };
}
exports.dmUpdateCommandCopySetWithUniqueIds = dmUpdateCommandCopySetWithUniqueIds;
function dmUpdateUserVariableCopySetWithUniqueIds(copySet, mergeParams) {
    var updatedCopySet = dmCreateNewUserVariableCopySet(copySet.containerId);
    var userVariableIdMap = new Map();
    updatedCopySet.userVariables.variablesById = updateCollectionIds(mergeParams.userVariableMergeParams.userVariables.variablesById, function (oldId, newId) { return userVariableIdMap.set(oldId, newId); });
    updatedCopySet.userVariables.sequence =
        mergeParams.userVariableMergeParams.userVariables.sequence.map(function (id) { return userVariableIdMap.get(id); });
    mergeParams.userVariableMergeParams.matchedUserVariableIds.forEach(function (value, key) {
        userVariableIdMap.set(key, value);
    });
    if (Object.keys(copySet.dataFeeds.feedsById).length > 0) {
        var dataFeedIdMap_1 = new Map();
        var dataFeedSourceIdMap_1 = new Map();
        var assetIdMap_1 = new Map();
        var updatedDataFeedsAndAssets = removeDataFeedsForUserVariableIds(Array.from(mergeParams.userVariableMergeParams.matchedUserVariableIds.keys()), copySet.userVariables.variablesById, copySet.dataFeeds, copySet.assetMap);
        updatedCopySet.dataFeeds.feedsById = updateCollectionIds(updatedDataFeedsAndAssets.dataFeeds.feedsById, function (oldId, newId) { return dataFeedIdMap_1.set(oldId, newId); });
        var mergedDataFeedSourceParams_1 = mergeParams.dataFeedSourceMergeParams;
        if (!lodash_1.isNil(mergedDataFeedSourceParams_1)) {
            var validIds_3 = Object.keys(updatedDataFeedsAndAssets.dataFeeds.sourcesById);
            mergedDataFeedSourceParams_1.dataFeedSourceIds.forEach(function (value, key) {
                if (validIds_3.indexOf(key) >= 0) {
                    updatedCopySet.dataFeeds.sourcesById[value] = mergedDataFeedSourceParams_1.dataFeedSources[value];
                    dataFeedSourceIdMap_1.set(key, value);
                }
            });
            Object.keys(updatedCopySet.dataFeeds.feedsById).forEach(function (dataFeedId) {
                var dataFeed = updatedCopySet.dataFeeds.feedsById[dataFeedId];
                if (utils_1.isValidBsDmId(dataFeed.feedSourceId)) {
                    var newAssetId = dataFeedSourceIdMap_1.get(dataFeed.feedSourceId);
                    if (!lodash_1.isNil(newAssetId)) {
                        dataFeed.feedSourceId = newAssetId;
                    }
                }
            });
        }
        else {
            updatedCopySet.dataFeeds.sourcesById = updatedDataFeedsAndAssets.dataFeeds.sourcesById;
        }
        var mergedAssetParams_1 = mergeParams.assetItemMergeParams;
        if (!lodash_1.isNil(mergedAssetParams_1)) {
            var validIds_4 = Object.keys(updatedDataFeedsAndAssets.assetMap);
            mergedAssetParams_1.assetIds.forEach(function (value, key) {
                if (validIds_4.indexOf(key) >= 0) {
                    updatedCopySet.assetMap[value] = mergedAssetParams_1.assetMap[value];
                    assetIdMap_1.set(key, value);
                }
            });
            Object.keys(updatedCopySet.dataFeeds.sourcesById).forEach(function (feedSourceId) {
                var feedSource = updatedCopySet.dataFeeds.sourcesById[feedSourceId];
                if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource) && utils_1.isValidBsDmId(feedSource.dataFeedAssetId)) {
                    var newAssetId = assetIdMap_1.get(feedSource.dataFeedAssetId);
                    if (!lodash_1.isNil(newAssetId)) {
                        feedSource.dataFeedAssetId = newAssetId;
                    }
                }
            });
        }
        else {
            updatedCopySet.assetMap = updatedDataFeedsAndAssets.assetMap;
        }
        Object.keys(updatedCopySet.userVariables.variablesById).forEach(function (userVarId) {
            var userVariable = updatedCopySet.userVariables.variablesById[userVarId];
            if (userVariable.isNetworked) {
                if (utils_1.isValidBsDmId(userVariable.dataFeedId) && utils_1.isValidBsDmId(dataFeedIdMap_1.get(userVariable.dataFeedId))) {
                    userVariable.dataFeedId = dataFeedIdMap_1.get(userVariable.dataFeedId);
                }
                else {
                    userVariable.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
                }
            }
        });
    }
    return {
        copySet: updatedCopySet,
        userVariableIdMap: userVariableIdMap,
    };
}
exports.dmUpdateUserVariableCopySetWithUniqueIds = dmUpdateUserVariableCopySetWithUniqueIds;
function fnAddCopySetAssetItem(dmState, copySet, assetId) {
    if (lodash_1.isNil(copySet.assetMap[assetId])) {
        var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: assetId });
        if (!lodash_1.isNil(assetItem)) {
            copySet.assetMap[assetId] = lodash_1.cloneDeep(assetItem);
            copySet.assetMap[assetId].refCount = 1;
        }
    }
    else {
        copySet.assetMap[assetId].refCount += 1;
    }
}
exports.fnAddCopySetAssetItem = fnAddCopySetAssetItem;
function fnAddCopySetDataFeed(dmState, copySet, dataFeedId) {
    var entities = selectors_1.dmGetDataFeedStateEntitiesByFeedId(dmState, { id: dataFeedId });
    if (!lodash_1.isNil(entities)) {
        copySet.dataFeeds.feedsById[dataFeedId] = lodash_1.cloneDeep(entities.dataFeed);
        if (lodash_1.isNil(copySet.dataFeeds.sourcesById[entities.feedSource.id])) {
            copySet.dataFeeds.sourcesById[entities.feedSource.id] = lodash_1.cloneDeep(entities.feedSource);
            copySet.dataFeeds.sourcesById[entities.feedSource.id].refCount = 1;
        }
        else {
            copySet.dataFeeds.sourcesById[entities.feedSource.id].refCount += 1;
        }
        if (!lodash_1.isNil(entities.assetItem)) {
            fnAddCopySetAssetItem(dmState, copySet, entities.assetItem.id);
        }
    }
}
exports.fnAddCopySetDataFeed = fnAddCopySetDataFeed;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsValidKeyboardEventData = exports.dmGetGpioAvailabilityForEventList = exports.dmGetIrRemoteAvailabilityForEventList = exports.dmGetBpAvailabilityForEventList = exports.dmGetInitialBpAvailability = exports.dmIsTimeCodeEvent = exports.dmIsEventCompatibleWithPlayerModel = exports.dmIsEventCompatibleWithTargetContentItem = exports.dmIsEventCompatibleWithContentItem = exports.dmEventListHasNoDuplicateEvent = exports.dmIsDuplicateEventData = exports.dmIsDuplicateEvent = exports.dmGetDefaultEventTypeForInteractiveContentItem = exports.dmIsMediaListIntrinsicEvent = exports.dmDoEventSpecificationsMatch = exports.dmGetEventSpecificationFromEventState = exports.dmCreateDefaultEventSpecificationForEventType = exports.dmCreateEventDataForEventType = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
function dmCreateEventDataForEventType(eventType, options) {
    switch (eventType) {
        case bscore_1.EventType.Timer:
        case bscore_1.EventType.MediaEndOrTimer: {
            var duration = 0;
            if (!lodash_1.isNil(options) && options.interactive) {
                var defaults = bsDmDefaults_1.dmGetDefaultTimerEventData();
                duration = defaults.interval;
            }
            else {
                var contentItemType = lodash_1.isNil(options) || lodash_1.isNil(options.contentItemType) ?
                    bscore_1.ContentItemType.Image : options.contentItemType;
                switch (contentItemType) {
                    case bscore_1.ContentItemType.Image: {
                        var defaults = bsDmDefaults_1.dmGetDefaultImageContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                    case bscore_1.ContentItemType.Html: {
                        var defaults = bsDmDefaults_1.dmGetDefaultHtmlContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                    case bscore_1.ContentItemType.LiveVideo: {
                        var defaults = bsDmDefaults_1.dmGetDefaultLiveVideoContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                    case bscore_1.ContentItemType.VideoStream: {
                        var defaults = bsDmDefaults_1.dmGetDefaultVideoStreamContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                    case bscore_1.ContentItemType.AudioStream: {
                        var defaults = bsDmDefaults_1.dmGetDefaultAudioStreamContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                    case bscore_1.ContentItemType.MjpegStream: {
                        var defaults = bsDmDefaults_1.dmGetDefaultMjpegStreamContentItemData();
                        duration = defaults.displayDuration;
                        break;
                    }
                }
            }
            return { interval: duration };
        }
        case bscore_1.EventType.Keyboard:
        case bscore_1.EventType.Usb:
        case bscore_1.EventType.Synchronize:
        case bscore_1.EventType.ZoneMessage:
        case bscore_1.EventType.InternalSynchronize:
            return { data: '' };
        case bscore_1.EventType.Remote:
            return {
                data: '',
                buttonDirection: bscore_1.ButtonDirection.Down,
            };
        case bscore_1.EventType.Serial:
            return {
                port: '0',
                data: '',
                assignInputToUserVariable: false,
                assignWildcardToUserVariable: false,
                userVariableToAssignInput: bsDmInterfaces_1.BsDmIdNone,
                userVariableToAssignWildcard: bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.EventType.TimeClock:
            return { type: bsDmInterfaces_1.DmTimeClockEventType.DateTime, data: { dateTime: new Date() } };
        case bscore_1.EventType.Gps:
            return {
                direction: bscore_1.RegionDirection.Enter,
                radius: 1,
                distanceUnits: bscore_1.DistanceUnits.Miles,
                latitude: 0,
                longitude: 0,
            };
        case bscore_1.EventType.RectangularTouch:
            return { region: null };
        case bscore_1.EventType.Gpio:
        case bscore_1.EventType.Button:
            return {
                buttonNumber: 0,
                buttonDirection: bscore_1.ButtonDirection.Down,
                pressContinuous: null,
            };
        case bscore_1.EventType.Bp:
            return {
                bpType: bscore_1.BpType.Bp900,
                bpIndex: bscore_1.BpIndex.A,
                buttonNumber: 0,
                pressContinuous: null,
            };
        case bscore_1.EventType.PluginMessage:
            return {
                pluginId: bsDmInterfaces_1.BsDmIdNone,
                message: '',
                assignInputToUserVariable: false,
                assignWildcardToUserVariable: false,
                userVariableToAssignInput: bsDmInterfaces_1.BsDmIdNone,
                userVariableToAssignWildcard: bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.EventType.Udp:
            return {
                data: '',
                label: '',
                export: true,
                assignInputToUserVariable: false,
                assignWildcardToUserVariable: false,
                userVariableToAssignInput: bsDmInterfaces_1.BsDmIdNone,
                userVariableToAssignWildcard: bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.EventType.WssEvent:
            return {
                port: '',
                wssEventId: '',
                wssEventName: '',
                assignInputToUserVariable: false,
                assignWildcardToUserVariable: false,
                userVariableToAssignInput: bsDmInterfaces_1.BsDmIdNone,
                userVariableToAssignWildcard: bsDmInterfaces_1.BsDmIdNone,
            };
        case bscore_1.EventType.Bmap:
            return {
                port: '0',
                functionBlock: '',
                function: '',
                operator: '',
                data: '',
            };
        case bscore_1.EventType.BmapHex:
            return {
                port: '0',
                data: '',
            };
    }
    return null;
}
exports.dmCreateEventDataForEventType = dmCreateEventDataForEventType;
function dmCreateDefaultEventSpecificationForEventType(eventType, eventData, options) {
    var eventSpec = {
        type: eventType,
        data: dmCreateEventDataForEventType(eventType, options),
    };
    if (!lodash_1.isNil(eventData)) {
        eventSpec.data = Object.assign(eventSpec.data, eventData);
    }
    if (eventType === bscore_1.EventType.VideoTimeCode || eventType === bscore_1.EventType.AudioTimeCode) {
        eventSpec.action = bscore_1.EventIntrinsicAction.None;
    }
    else if (!lodash_1.isNil(options) && !lodash_1.isNil(options.action)) {
        eventSpec.action = options.action;
    }
    return eventSpec;
}
exports.dmCreateDefaultEventSpecificationForEventType = dmCreateDefaultEventSpecificationForEventType;
function dmGetEventSpecificationFromEventState(eventState) {
    return lodash_1.pick(eventState, ['type', 'data', 'action']);
}
exports.dmGetEventSpecificationFromEventState = dmGetEventSpecificationFromEventState;
function dmDoEventSpecificationsMatch(eventSpecA, eventSpecB) {
    return lodash_1.isEqual(eventSpecA, eventSpecB);
}
exports.dmDoEventSpecificationsMatch = dmDoEventSpecificationsMatch;
function dmIsMediaListIntrinsicEvent(eventSpec) {
    var action = eventSpec.action;
    return !lodash_1.isNil(action)
        && (action === bscore_1.EventIntrinsicAction.SequenceForward || action === bscore_1.EventIntrinsicAction.SequenceBackward);
}
exports.dmIsMediaListIntrinsicEvent = dmIsMediaListIntrinsicEvent;
function dmGetDefaultEventTypeForInteractiveContentItem(contentItem) {
    var eventType = bscore_1.EventType.Timer;
    if (contentItem.type === bscore_1.ContentItemType.Video
        || contentItem.type === bscore_1.ContentItemType.Audio
        || contentItem.type === bscore_1.ContentItemType.MrssFeed
        || contentItem.type === bscore_1.ContentItemType.DataFeed) {
        eventType = bscore_1.EventType.MediaEnd;
    }
    return eventType;
}
exports.dmGetDefaultEventTypeForInteractiveContentItem = dmGetDefaultEventTypeForInteractiveContentItem;
function dmIsDuplicateEvent(event1, event2) {
    var result = { ok: true };
    if (event2.type === event1.type) {
        switch (event1.type) {
            case bscore_1.EventType.MediaEnd:
            case bscore_1.EventType.MediaListEnd:
            case bscore_1.EventType.Timer:
                result.ok = false;
                break;
        }
    }
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventDuplicated);
    }
    return result;
}
exports.dmIsDuplicateEvent = dmIsDuplicateEvent;
function dmIsDuplicateEventData(event1, event2) {
    var result = { ok: true };
    if (event2.type === event1.type) {
        switch (event1.type) {
            case bscore_1.EventType.Keyboard:
            case bscore_1.EventType.Usb:
            case bscore_1.EventType.Synchronize:
            case bscore_1.EventType.ZoneMessage:
            case bscore_1.EventType.InternalSynchronize:
                result.ok = event2.data.data !== event1.data.data;
                break;
            case bscore_1.EventType.Serial:
                result.ok = event2.data.port !== event1.data.port
                    || event2.data.data !== event1.data.data;
                break;
            case bscore_1.EventType.Gpio:
                result.ok = event2.data.buttonNumber !== event1.data.buttonNumber
                    || event2.data.buttonDirection !== event1.data.buttonDirection;
                break;
            case bscore_1.EventType.Button:
                result.ok = event2.data.buttonNumber !== event1.data.buttonNumber
                    || event2.data.buttonDirection !== event1.data.buttonDirection;
                break;
            case bscore_1.EventType.Bp:
                result.ok = event2.data.buttonNumber !== event1.data.buttonNumber
                    || event2.data.bpIndex !== event1.data.bpIndex
                    || event2.data.bpType !== event1.data.bpType;
                break;
            case bscore_1.EventType.Udp:
                result.ok = event2.data.data !== event1.data.data;
                break;
            case bscore_1.EventType.Remote:
                result.ok = event2.data.data !== event1.data.data
                    || event2.data.buttonDirection !== event1.data.buttonDirection;
                break;
            case bscore_1.EventType.WssEvent:
                var event1Data = event1.data;
                var event2Data = event2.data;
                result.ok = (event2Data.port !== event1Data.port)
                    || (event2Data.wssEventName !== event1Data.wssEventName)
                    || (event2Data.wssEventId !== event1Data.wssEventId);
                if (!result.ok) {
                    if (!lodash_1.isNil(event1Data.wssEventParameter)
                        && !lodash_1.isNil(event2Data.wssEventParameter)) {
                        result.ok = (event1Data.wssEventParameter.parameterName
                            !== event2Data.wssEventParameter.parameterName)
                            || (event1Data.wssEventParameter.parameterValue
                                !== event2Data.wssEventParameter.parameterValue);
                    }
                    else if (lodash_1.isNil(event1Data.wssEventParameter)
                        !== lodash_1.isNil(event2Data.wssEventParameter)) {
                        result.ok = false;
                    }
                }
                break;
            case bscore_1.EventType.Bmap:
            case bscore_1.EventType.BmapHex:
                break;
        }
    }
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventDuplicated);
    }
    return result;
}
exports.dmIsDuplicateEventData = dmIsDuplicateEventData;
function dmEventListHasNoDuplicateEvent(eventList, eventToTest, eventIdToIgnore) {
    var result = { ok: true };
    eventList.some(function (existingEvent) {
        if (lodash_1.isNil(eventIdToIgnore) || eventIdToIgnore !== existingEvent.id) {
            var eventResult = dmIsDuplicateEvent(existingEvent, eventToTest);
            if (!eventResult.ok) {
                result = eventResult;
                return true;
            }
        }
        return false;
    });
    return result;
}
exports.dmEventListHasNoDuplicateEvent = dmEventListHasNoDuplicateEvent;
var MediaEndEventContentTypeArray = [
    bscore_1.ContentItemType.Video, bscore_1.ContentItemType.Audio,
    bscore_1.ContentItemType.DataFeed, bscore_1.ContentItemType.MrssFeed, bscore_1.ContentItemType.LiveVideo,
    bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile,
    bscore_1.ContentItemType.VideoStream, bscore_1.ContentItemType.AudioStream, bscore_1.ContentItemType.MjpegStream,
    bscore_1.ContentItemType.SuperState,
];
var MediaEndEventContentTypes = new Set(MediaEndEventContentTypeArray);
function dmIsEventCompatibleWithContentItem(event, contentItemType) {
    var result = { ok: true };
    if (contentItemType !== bscore_1.ContentItemType.MediaList && dmIsMediaListIntrinsicEvent(event)) {
        result.ok = false;
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithContentType, 'MediaList specific event action specified for ContentItemType ' + contentItemType);
        return result;
    }
    switch (event.type) {
        case bscore_1.EventType.MediaEnd:
            result.ok = MediaEndEventContentTypes.has(contentItemType);
            break;
        case bscore_1.EventType.MediaListEnd:
            result.ok = contentItemType === bscore_1.ContentItemType.MediaList;
            break;
        case bscore_1.EventType.AudioTimeCode:
            result.ok = contentItemType === bscore_1.ContentItemType.Audio;
            break;
        case bscore_1.EventType.VideoTimeCode:
            result.ok = contentItemType === bscore_1.ContentItemType.Video;
            break;
        case bscore_1.EventType.RectangularTouch:
            result.ok = contentItemType !== bscore_1.ContentItemType.EventHandler && contentItemType !== bscore_1.ContentItemType.SuperState;
            break;
    }
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithContentType);
    }
    return result;
}
exports.dmIsEventCompatibleWithContentItem = dmIsEventCompatibleWithContentItem;
function dmIsEventCompatibleWithTargetContentItem(event, contentItemType) {
    var result = { ok: true };
    var error = null;
    if (contentItemType !== bscore_1.ContentItemType.MediaList && dmIsMediaListIntrinsicEvent(event)) {
        result.ok = false;
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithContentType, 'MediaList specific event action specified for ContentItemType ' + contentItemType);
    }
    else {
        switch (event.type) {
            case bscore_1.EventType.Synchronize:
                result.ok = contentItemType === bscore_1.ContentItemType.MediaList
                    || contentItemType === bscore_1.ContentItemType.Video
                    || contentItemType === bscore_1.ContentItemType.Image
                    || contentItemType === bscore_1.ContentItemType.Audio
                    || contentItemType === bscore_1.ContentItemType.PlayFile;
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.synchronizeEventNotCompatibleWithContentType);
                break;
            case bscore_1.EventType.AudioTimeCode:
            case bscore_1.EventType.VideoTimeCode:
                result.ok = false;
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotAllowedWithTarget);
                break;
        }
    }
    if (!result.ok && !lodash_1.isNil(error)) {
        result.error = error;
    }
    return result;
}
exports.dmIsEventCompatibleWithTargetContentItem = dmIsEventCompatibleWithTargetContentItem;
function dmIsEventCompatibleWithPlayerModel(event, playerModel) {
    var result = { ok: true };
    switch (event.type) {
        case bscore_1.EventType.Gpio:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Gpio);
            break;
        case bscore_1.EventType.Button:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.ButtonsByGpio);
            break;
        case bscore_1.EventType.Remote:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Usb)
                || bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.DedicatedIr);
            break;
        case bscore_1.EventType.Bp:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Bp);
            break;
        case bscore_1.EventType.RectangularTouch:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Usb)
                && bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Video);
            break;
        case bscore_1.EventType.Keyboard:
        case bscore_1.EventType.Usb:
        case bscore_1.EventType.Gps:
        case bscore_1.EventType.Bmap:
        case bscore_1.EventType.BmapHex:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Usb);
            break;
        case bscore_1.EventType.Udp:
        case bscore_1.EventType.Synchronize:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Networking);
            break;
        case bscore_1.EventType.Serial:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Serial) ||
                bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.UsbTap);
            break;
        case bscore_1.EventType.VideoTimeCode:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Video);
            break;
        case bscore_1.EventType.InteractiveMenu:
            result.ok = bscore_1.bscPlayerModelHasFeature(playerModel, bscore_1.ModelFeature.Video);
            break;
    }
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithPlayerModel, playerModel);
    }
    return result;
}
exports.dmIsEventCompatibleWithPlayerModel = dmIsEventCompatibleWithPlayerModel;
function dmIsTimeCodeEvent(eventType) {
    return !lodash_1.isNil(eventType) && (eventType === bscore_1.EventType.VideoTimeCode || eventType === bscore_1.EventType.AudioTimeCode);
}
exports.dmIsTimeCodeEvent = dmIsTimeCodeEvent;
function dmGetInitialBpAvailability() {
    var bp900Array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var bp200Array = [0, 1, 2, 3];
    return {
        bp900: { a: __spreadArrays(bp900Array), b: __spreadArrays(bp900Array), c: __spreadArrays(bp900Array), d: __spreadArrays(bp900Array) },
        bp200: { a: __spreadArrays(bp200Array), b: __spreadArrays(bp200Array), c: __spreadArrays(bp200Array), d: __spreadArrays(bp200Array) },
    };
}
exports.dmGetInitialBpAvailability = dmGetInitialBpAvailability;
function dmGetBpAvailabilityForEventList(eventList, initialAvailability) {
    if (initialAvailability === void 0) { initialAvailability = dmGetInitialBpAvailability(); }
    var availability = initialAvailability;
    eventList.forEach(function (event) {
        if (event.type === bscore_1.EventType.Bp) {
            var eventData = event.data;
            var panelArray = availability[eventData.bpType][eventData.bpIndex];
            availability[eventData.bpType][eventData.bpIndex] =
                lodash_1.without(panelArray, eventData.buttonNumber);
        }
    });
    return availability;
}
exports.dmGetBpAvailabilityForEventList = dmGetBpAvailabilityForEventList;
function dmGetIrRemoteAvailabilityForEventList(eventList, irRemoteButtonsList) {
    var availability = irRemoteButtonsList;
    eventList.forEach(function (event) {
        if (event.type === bscore_1.EventType.Remote) {
            var eventData = event.data;
            var index = availability.indexOf(eventData.data);
            if (index !== -1) {
                availability.splice(index, 1);
            }
        }
    });
    return availability;
}
exports.dmGetIrRemoteAvailabilityForEventList = dmGetIrRemoteAvailabilityForEventList;
function dmGetGpioAvailabilityForEventList(eventList, gpioList) {
    var availability = [];
    for (var i = 0, iLen = gpioList.length; i < iLen; i++) {
        if (gpioList[i] === bscore_1.GpioType.Input) {
            availability.push(i);
        }
    }
    eventList.forEach(function (event) {
        if (event.type === bscore_1.EventType.Gpio) {
            var eventData = event.data;
            var index = availability.indexOf(eventData.buttonNumber);
            if (index !== -1) {
                availability.splice(index, 1);
            }
        }
    });
    return availability;
}
exports.dmGetGpioAvailabilityForEventList = dmGetGpioAvailabilityForEventList;
var reSpecialKey = /^<(.*)>$/;
function dmIsValidKeyboardEventData(data) {
    var result = { ok: lodash_1.isString(data) && data.length > 0 };
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventDataMissing);
    }
    else if (data.length > 1) {
        var reResult = reSpecialKey.exec(data);
        result.ok = !lodash_1.isNil(reResult) && bsDmInterfaces_1.DmKeyboardEventSpecialCharCodeSet.has(reResult[1]);
        if (!result.ok) {
            result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.keyboardEventDataFormatIsIncorrect);
        }
    }
    return result;
}
exports.dmIsValidKeyboardEventData = dmIsValidKeyboardEventData;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteTransition = exports.dmDeleteTransitionWithParams = exports.dmGetTransitionDeleteParams = exports.dmMoveTransitionConditionsAtIndices = exports.dmUpdateTransitionConditionProperty = exports.dmUpdateTransitionCondition = exports.dmUpdateTransition = exports.dmAddTransition = exports.dmAddConditionalTransition = exports.dmAddDefaultTransition = exports.DELETE_TRANSITION = exports.MOVE_TRANSITION_CONDITION = exports.UPDATE_TRANSITION_CONDITION = exports.UPDATE_TRANSITION = exports.ADD_CONDITIONAL_TRANSITION = exports.ADD_TRANSITION = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var actionBase_1 = __webpack_require__(8);
var lodash_1 = __webpack_require__(0);
exports.ADD_TRANSITION = 'DM_ADD_TRANSITION';
exports.ADD_CONDITIONAL_TRANSITION = 'DM_ADD_CONDITIONAL_TRANSITION';
exports.UPDATE_TRANSITION = 'DM_UPDATE_TRANSITION';
exports.UPDATE_TRANSITION_CONDITION = 'DM_UPDATE_TRANSITION_CONDITION';
exports.MOVE_TRANSITION_CONDITION = 'DM_MOVE_TRANSITION_CONDITION';
exports.DELETE_TRANSITION = 'DM_DELETE_TRANSITION';
function dmAddDefaultTransition(name, eventId, targetMediaStateId, type, duration) {
    if (type === void 0) { type = bscore_1.TransitionType.NoEffect; }
    if (duration === void 0) { duration = 0; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.ADD_TRANSITION,
            payload: {
                id: utils_1.newBsDmId(),
                name: name, eventId: eventId, targetMediaStateId: targetMediaStateId, type: type, duration: duration,
            },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (bsDmEvents_1.dmIsTimeCodeEvent(selectors_1.dmGetEventTypeById(dmState, { id: eventId }))) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddDefaultTransition - cannot add a transition to a TimeCode event', { action: mainAction });
        }
        var nonConditionalTransitionIds = selectors_1.dmGetNonConditionalTransitionsForEventId(dmState, { id: eventId });
        if (nonConditionalTransitionIds.length > 0) {
            var deleteParams = dmGetTransitionDeleteParams(dmState, nonConditionalTransitionIds);
            batchedActions.push(dmDeleteTransitionWithParams(deleteParams));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddDefaultTransition = dmAddDefaultTransition;
function dmAddConditionalTransition(name, eventId, targetMediaStateId, condition, conditionIndex, conditionalAction, type, duration) {
    if (conditionIndex === void 0) { conditionIndex = -1; }
    if (conditionalAction === void 0) { conditionalAction = bscore_1.EventIntrinsicAction.None; }
    if (type === void 0) { type = bscore_1.TransitionType.NoEffect; }
    if (duration === void 0) { duration = 0; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.ADD_CONDITIONAL_TRANSITION,
            payload: {
                id: utils_1.newBsDmId(),
                name: name, eventId: eventId, targetMediaStateId: targetMediaStateId, type: type, duration: duration,
                condition: null,
                conditionIndex: 0,
                conditionalAction: conditionalAction !== null ? conditionalAction : bscore_1.EventIntrinsicAction.None,
            },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (bsDmEvents_1.dmIsTimeCodeEvent(selectors_1.dmGetEventTypeById(dmState, { id: eventId }))) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'AddConditionalTransition - cannot add a transition to a TimeCode event', { action: mainAction });
        }
        mainAction.payload.condition = resolveTransitionCondition(dmState, condition);
        var count = selectors_1.dmGetConditionalTransitionCountForEvent(dmState, { id: eventId });
        if (conditionIndex < 0 || conditionIndex >= count) {
            mainAction.payload.conditionIndex = count;
        }
        else {
            mainAction.payload.conditionIndex = conditionIndex;
        }
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmAddConditionalTransition = dmAddConditionalTransition;
var resolveTransitionCondition = function (dmState, condition) {
    var resolvedCondition = lodash_1.cloneDeep(condition);
    if (utils_1.isValidBsDmId(resolvedCondition.userVariableId)) {
        var userVariable = dmState.userVariables.variablesById[resolvedCondition.userVariableId];
        if (!userVariable) {
            resolvedCondition.userVariableId = bsDmInterfaces_1.BsDmIdNone;
        }
    }
    if (!utils_1.isValidBsDmId(resolvedCondition.userVariableId)) {
        if (resolvedCondition.userVariableName) {
            var userVariableId = selectors_1.dmGetUserVariableIdForName(dmState, { name: resolvedCondition.userVariableName });
            if (userVariableId) {
                resolvedCondition.userVariableId = userVariableId;
                resolvedCondition = lodash_1.omit(resolvedCondition, ['userVariableName']);
            }
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddConditionalTransition: Transition condition must have a valid UserVariable ID or name');
        }
    }
    return resolvedCondition;
};
function dmAddTransition(name, eventId, targetMediaStateId, type, duration) {
    if (type === void 0) { type = bscore_1.TransitionType.NoEffect; }
    if (duration === void 0) { duration = 0; }
    return {
        type: exports.ADD_TRANSITION,
        payload: {
            id: utils_1.newBsDmId(),
            name: name, eventId: eventId, targetMediaStateId: targetMediaStateId, type: type, duration: duration,
        },
    };
}
exports.dmAddTransition = dmAddTransition;
function dmUpdateTransition(params) {
    return {
        type: exports.UPDATE_TRANSITION,
        payload: params,
    };
}
exports.dmUpdateTransition = dmUpdateTransition;
function dmUpdateTransitionCondition(params) {
    return function (dispatch, getState) {
        var id = params.id, condition = params.condition, conditionIndex = params.conditionIndex, conditionalAction = params.conditionalAction, targetMediaStateId = params.targetMediaStateId;
        var mainAction = {
            type: exports.UPDATE_TRANSITION_CONDITION,
            payload: {
                id: id,
                eventId: bsDmInterfaces_1.BsDmIdNone,
            },
        };
        if (!lodash_1.isNil(condition)) {
            mainAction.payload.condition = condition;
        }
        if (!lodash_1.isNil(conditionIndex)) {
            mainAction.payload.conditionIndex = conditionIndex;
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var transition = dmState.transitions.transitionsById[id];
        if (!(transition && transition.condition)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateTransitionCondition - ID does not reference a conditional transition', { action: mainAction });
        }
        mainAction.payload.eventId = transition.eventId;
        if (!lodash_1.isNil(condition)) {
            mainAction.payload.condition = resolveTransitionCondition(dmState, condition);
        }
        if (!lodash_1.isNil(conditionIndex)) {
            var count = selectors_1.dmGetConditionalTransitionCountForEvent(dmState, { id: transition.eventId });
            if (conditionIndex < 0 || conditionIndex >= count) {
                mainAction.payload.conditionIndex = count - 1;
            }
            else {
                mainAction.payload.conditionIndex = conditionIndex;
            }
        }
        if (conditionalAction !== undefined) {
            mainAction.payload.conditionalAction = conditionalAction !== null ? conditionalAction : bscore_1.EventIntrinsicAction.None;
        }
        if (targetMediaStateId !== undefined) {
            mainAction.payload.targetMediaStateId = targetMediaStateId !== null ? targetMediaStateId : bsDmInterfaces_1.BsDmIdNone;
        }
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmUpdateTransitionCondition = dmUpdateTransitionCondition;
function dmUpdateTransitionConditionProperty(id, condition) {
    return {
        type: exports.UPDATE_TRANSITION_CONDITION,
        payload: { id: id, eventId: bsDmInterfaces_1.BsDmIdNone, condition: condition },
    };
}
exports.dmUpdateTransitionConditionProperty = dmUpdateTransitionConditionProperty;
function dmMoveTransitionConditionsAtIndices(eventId, indices, targetIndex) {
    return function (dispatch, getState) {
        if (typeof indices === 'number') {
            indices = [indices];
        }
        var mainAction = {
            type: exports.MOVE_TRANSITION_CONDITION,
            payload: { eventId: eventId, indices: indices, targetIndex: targetIndex },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var transitionCount = selectors_1.dmGetConditionalTransitionCountForEvent(dmState, { id: eventId });
        if (transitionCount === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MoveConditionalTransitionsAtIndices - event does not have any conditional transitions', { action: mainAction });
        }
        if (targetIndex < 0 || targetIndex >= transitionCount) {
            mainAction.payload.targetIndex = transitionCount - 1;
        }
        mainAction.payload.indices = indices.filter(function (index) { return index >= 0 && index < transitionCount; });
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmMoveTransitionConditionsAtIndices = dmMoveTransitionConditionsAtIndices;
function dmGetTransitionDeleteParams(state, id) {
    var deleteParams = {
        transitionIds: Array.isArray(id) ? id : [id],
        commandIds: [],
    };
    deleteParams.transitionIds.forEach(function (transitionId) {
        var transitionCommands = selectors_1.dmCommandIdsForTransition(state, { id: transitionId });
        deleteParams.commandIds = deleteParams.commandIds.concat(transitionCommands);
    });
    return deleteParams;
}
exports.dmGetTransitionDeleteParams = dmGetTransitionDeleteParams;
function dmDeleteTransitionWithParams(params) {
    return {
        type: exports.DELETE_TRANSITION,
        payload: params,
    };
}
exports.dmDeleteTransitionWithParams = dmDeleteTransitionWithParams;
function dmDeleteTransition(id) {
    return function (dispatch, getState) {
        var deleteParams = dmGetTransitionDeleteParams(bsDmState_1.dmFilterDmState(getState()), id);
        var mainAction = dmDeleteTransitionWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteTransition = dmDeleteTransition;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetCommandCollectionForDifferentSign = exports.dmGetCommandCopySet = exports.dmGetCommandSequenceCopySet = exports.dmGetCommandIdsForSign = exports.dmGetCommandStatesForParentAndType = exports.fnGetCommandStatesForParentAndType = exports.fnGetCommandStatesForMediaState = exports.dmValidateCommand = exports.dmCommandIdsForTransition = exports.dmGetCommandIdsForCommandOperationTypes = exports.dmCommandIdsForEvent = exports.dmGetCommandSequenceIdsForParentId = exports.dmGetSequenceItemPreviousCommandIdsForMediaState = exports.dmGetSequenceItemNextCommandIdsForMediaState = exports.dmGetExitCommandIdsForMediaState = exports.dmGetEntryCommandIdsForMediaState = exports.dmGetCommandSequenceStateForParentAndType = exports.dmGetCommandSequenceStateById = exports.dmGetCommandSequenceIdForParentAndType = exports.dmGetCommandStateById = exports.dmGetCommandById = exports.clearCommandSelectorCaches = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmCommands_1 = __webpack_require__(22);
var selectorValidation_1 = __webpack_require__(17);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
var selGetCommandById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.commands.commandsById; }, function (cmdId, commands) {
    var commandState = commands[cmdId];
    return lodash_1.isNil(commandState) ? null : new bsDmClasses_1.DmcCommand(commandState);
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 500 }),
});
function clearCommandSelectorCaches() {
    selGetCommandById.clearCache();
}
exports.clearCommandSelectorCaches = clearCommandSelectorCaches;
function dmGetCommandById(state, props) {
    return selGetCommandById(state, props);
}
exports.dmGetCommandById = dmGetCommandById;
function dmGetCommandStateById(state, props) {
    var commandState = state.commands.commandsById[props.id];
    return lodash_1.isNil(commandState) ? null : commandState;
}
exports.dmGetCommandStateById = dmGetCommandStateById;
function dmGetCommandSequenceIdForParentAndType(state, props) {
    var sequences = state.commands.sequencesById;
    var sequenceId = lodash_1.find(Object.keys(sequences), function (id) {
        var sequence = sequences[id];
        return sequence.type === props.type && sequence.parentId === props.id;
    });
    return lodash_1.isNil(sequenceId) ? null : sequenceId;
}
exports.dmGetCommandSequenceIdForParentAndType = dmGetCommandSequenceIdForParentAndType;
function dmGetCommandSequenceStateById(state, props) {
    var commandSequence = state.commands.sequencesById[props.id];
    return lodash_1.isNil(commandSequence) ? null : commandSequence;
}
exports.dmGetCommandSequenceStateById = dmGetCommandSequenceStateById;
function dmGetCommandSequenceStateForParentAndType(state, props) {
    var sequences = state.commands.sequencesById;
    var sequenceId = lodash_1.find(Object.keys(sequences), function (id) {
        var testSequence = sequences[id];
        return testSequence.type === props.type && testSequence.parentId === props.id;
    });
    return lodash_1.isNil(sequenceId) ? null : sequences[sequenceId];
}
exports.dmGetCommandSequenceStateForParentAndType = dmGetCommandSequenceStateForParentAndType;
function dmGetEntryCommandIdsForMediaState(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.StateEntry });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmGetEntryCommandIdsForMediaState = dmGetEntryCommandIdsForMediaState;
function dmGetExitCommandIdsForMediaState(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.StateExit });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmGetExitCommandIdsForMediaState = dmGetExitCommandIdsForMediaState;
function dmGetSequenceItemNextCommandIdsForMediaState(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.SequenceItemNext });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmGetSequenceItemNextCommandIdsForMediaState = dmGetSequenceItemNextCommandIdsForMediaState;
function dmGetSequenceItemPreviousCommandIdsForMediaState(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.SequenceItemPrevious });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmGetSequenceItemPreviousCommandIdsForMediaState = dmGetSequenceItemPreviousCommandIdsForMediaState;
function dmGetCommandSequenceIdsForParentId(state, props) {
    var sequences = state.commands.sequencesById;
    return Object.keys(sequences).filter(function (id) { return sequences[id].parentId === props.id; });
}
exports.dmGetCommandSequenceIdsForParentId = dmGetCommandSequenceIdsForParentId;
function dmCommandIdsForEvent(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.Event });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmCommandIdsForEvent = dmCommandIdsForEvent;
function dmGetCommandIdsForCommandOperationTypes(state, props) {
    var commands = state.commands.commandsById;
    return Object.keys(commands).filter(function (id) { return commands[id].operations.some(function (op) { return props.types.indexOf(op.type) >= 0; }); });
}
exports.dmGetCommandIdsForCommandOperationTypes = dmGetCommandIdsForCommandOperationTypes;
function dmCommandIdsForTransition(state, props) {
    var sequence = dmGetCommandSequenceStateForParentAndType(state, { id: props.id, type: bscore_1.CommandSequenceType.Transition });
    return lodash_1.isNil(sequence) ? [] : sequence.sequence;
}
exports.dmCommandIdsForTransition = dmCommandIdsForTransition;
function dmValidateCommand(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Command, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Command, props.id);
    var validateParameterizedString = function (paramString, entityProperty, cannotBeEmpty) {
        if (cannotBeEmpty === void 0) { cannotBeEmpty = true; }
        var error = selectorValidation_1.dmValidateEntityParameterizedString(state, paramString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }), cannotBeEmpty);
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateStringData = function (data, entityProperty) {
        if (!lodash_1.isString(data) || data.length === 0) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.stringDataValueIsEmpty, __assign(__assign({}, entityDetails), { entityProperty: entityProperty })));
        }
    };
    var validateParameterizedNumber = function (paramNumber, entityProperty) {
        var error = selectorValidation_1.dmValidateEntityParameterizedNumber(state, paramNumber, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateParameterizedVolume = function (paramNumber, entityProperty) {
        var error = selectorValidation_1.dmValidateEntityParameterizedVolume(paramNumber, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableId = function (userVariableId, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableId(state, userVariableId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateLinkedPresentationId = function (presentationId, entityProperty) {
        var error = selectorValidation_1.dmValidateLinkedPresentationId(state, presentationId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateDataFeedSourceId = function (dataFeedSourceId, entityProperty) {
        var error = selectorValidation_1.dmValidateDataFeedSourceId(state, dataFeedSourceId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateByteSequenceString = function (byteString, entityProperty, allowMultipleBytes) {
        if (allowMultipleBytes === void 0) { allowMultipleBytes = true; }
        var error = selectorValidation_1.dmValidateEntityParameterizedString(state, byteString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }), true);
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
        else {
            var simpleByteString = bsDmParameterizedStrings_1.dmGetSimpleStringFromParameterizedString(byteString);
            if (!lodash_1.isNil(simpleByteString)) {
                var testResult = bsDmCommands_1.dmIsValidByteSequenceString(simpleByteString, allowMultipleBytes);
                if (!testResult.ok) {
                    result.errorList.push(testResult.error);
                }
            }
        }
    };
    var validateParameterizedHexString = function (hexString, entityProperty, cannotBeEmpty) {
        if (cannotBeEmpty === void 0) { cannotBeEmpty = true; }
        var error = selectorValidation_1.dmValidateEntityParameterizedHexString(state, hexString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }), cannotBeEmpty);
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var command = dmGetCommandById(state, props);
    if (!lodash_1.isNil(command)) {
        command.operations.forEach(function (op) {
            switch (op.type) {
                case bscore_1.CommandType.SendZoneMessage:
                case bscore_1.CommandType.SendUdp:
                case bscore_1.CommandType.SendIRRemote:
                case bscore_1.CommandType.SendProntoIRRemote:
                case bscore_1.CommandType.SendPluginMessage: {
                    validateParameterizedString(op.data.messageData, op.type + '.messageData');
                    break;
                }
                case bscore_1.CommandType.Synchronize:
                case bscore_1.CommandType.InternalSynchronize: {
                    validateParameterizedString(op.data.messageData, op.type + '.messageData', false);
                    break;
                }
                case bscore_1.CommandType.SerialSendString: {
                    var isEol = lodash_1.isBoolean(op.data.eol) ?
                        op.data.eol : false;
                    validateParameterizedString(op.data.messageData, op.type + '.messageData', !isEol);
                    break;
                }
                case bscore_1.CommandType.SerialSendByte: {
                    validateByteSequenceString(op.data.messageData, op.type + '.messageData', false);
                    break;
                }
                case bscore_1.CommandType.SerialSendBytes:
                case bscore_1.CommandType.SendUdpBytes: {
                    validateByteSequenceString(op.data.messageData, op.type + '.messageData');
                    break;
                }
                case bscore_1.CommandType.SetVariable:
                    validateParameterizedString(op.data.userVariableValue, op.type + '.userVariableValue', false);
                case bscore_1.CommandType.IncrementVariable:
                case bscore_1.CommandType.DecrementVariable:
                case bscore_1.CommandType.ResetVariable: {
                    validateUserVariableId(op.data.userVariableId, op.type + 'userVariableId');
                    break;
                }
                case bscore_1.CommandType.BeaconStart:
                case bscore_1.CommandType.BeaconStop: {
                    validateParameterizedString(op.data.beaconName, op.type + '.beaconName');
                    break;
                }
                case bscore_1.CommandType.SwitchPresentation: {
                    var presentationId = op.data.presentationId;
                    var presentationUvId = op.data.userVariableId;
                    if (utils_1.isValidBsDmId(presentationId)) {
                        validateLinkedPresentationId(presentationId, op.type + '.presentationId');
                    }
                    else if (!lodash_1.isNil(presentationUvId)) {
                        validateUserVariableId(presentationUvId, op.type + 'userVariableId');
                    }
                    else {
                        result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.switchPresentationTargetNotSpecified, __assign(__assign({}, entityDetails), { entityProperty: op.type })));
                    }
                    break;
                }
                case bscore_1.CommandType.SetConnectorVolume:
                case bscore_1.CommandType.IncrementConnectorVolume:
                case bscore_1.CommandType.DecrementConnectorVolume:
                case bscore_1.CommandType.SetZoneVolume:
                case bscore_1.CommandType.IncrementZoneVolume:
                case bscore_1.CommandType.DecrementZoneVolume:
                case bscore_1.CommandType.SetZoneChannelVolume:
                case bscore_1.CommandType.IncrementZoneChannelVolume:
                case bscore_1.CommandType.DecrementZoneChannelVolume:
                case bscore_1.CommandType.CecPhilipsSetVolume: {
                    validateParameterizedNumber(op.data.volume, op.type + '.volume');
                    validateParameterizedVolume(op.data.volume, op.type + '.volume');
                    break;
                }
                case bscore_1.CommandType.CecSendString: {
                    validateParameterizedHexString(op.data.hexString, op.type + '.hexString', false);
                    break;
                }
                case bscore_1.CommandType.Pause: {
                    validateParameterizedNumber(op.data.pauseTime, 'Pause.pauseTime');
                    break;
                }
                case bscore_1.CommandType.UpdateDataFeed: {
                    validateDataFeedSourceId(op.data.dataFeedSourceId, 'UpdateDataFeed.dataFeedSourceId');
                    break;
                }
                case bscore_1.CommandType.SendWss: {
                    var wssParameter = op.data.wssParameter;
                    if (!lodash_1.isNil(wssParameter)) {
                        validateParameterizedString(wssParameter.parameterValue, 'SendWss.param');
                    }
                    break;
                }
                case bscore_1.CommandType.SendBmap: {
                    validateStringData(op.data.port, 'Bmap.port');
                    op.data.fields.forEach(function (fieldRecord, index) {
                        validateStringData(fieldRecord.parameterName, "Bmap.field[" + index + "].parameterName");
                        validateParameterizedString(fieldRecord.parameterValue, "Bmap.field[" + fieldRecord.parameterName + "].value");
                    });
                    break;
                }
                case bscore_1.CommandType.SendBmapHex: {
                    validateStringData(op.data.port, 'BmapHex.port');
                    validateParameterizedHexString(op.data.messageData, 'BmapHex.messageData');
                    break;
                }
            }
        });
    }
    result.ok = result.errorList.length === 0;
    return result;
}
exports.dmValidateCommand = dmValidateCommand;
function fnGetCommandStatesForMediaState(commands, msId) {
    var getCommandForId = function (id) {
        return commands.commandsById[id];
    };
    var sequences = commands.sequencesById;
    var entrySequence = null;
    var exitSequence = null;
    Object.keys(sequences).some(function (id) {
        var testSequence = sequences[id];
        if (testSequence.parentId === msId) {
            if (testSequence.type === bscore_1.CommandSequenceType.StateEntry) {
                entrySequence = testSequence;
                return exitSequence != null;
            }
            else if (testSequence.type === bscore_1.CommandSequenceType.StateExit) {
                exitSequence = testSequence;
                return entrySequence != null;
            }
        }
        return false;
    });
    return {
        entry: lodash_1.isNil(entrySequence) ? [] : entrySequence.sequence.map(getCommandForId),
        exit: lodash_1.isNil(exitSequence) ? [] : exitSequence.sequence.map(getCommandForId),
    };
}
exports.fnGetCommandStatesForMediaState = fnGetCommandStatesForMediaState;
function fnGetCommandStatesForParentAndType(commands, parentId, type) {
    var getCommandForId = function (id) {
        return commands.commandsById[id];
    };
    var sequences = commands.sequencesById;
    var commandSequenceId = lodash_1.find(Object.keys(sequences), function (id) {
        var testSequence = sequences[id];
        return testSequence.type === type && testSequence.parentId === parentId;
    });
    return lodash_1.isNil(commandSequenceId) ? [] : sequences[commandSequenceId].sequence.map(getCommandForId);
}
exports.fnGetCommandStatesForParentAndType = fnGetCommandStatesForParentAndType;
function dmGetCommandStatesForParentAndType(state, props) {
    var getCommandForId = function (id) {
        return state.commands.commandsById[id];
    };
    var sequences = state.commands.sequencesById;
    var commandSequenceId = lodash_1.find(Object.keys(sequences), function (id) {
        var testSequence = sequences[id];
        return testSequence.type === props.type && testSequence.parentId === props.id;
    });
    return lodash_1.isNil(commandSequenceId) ? [] : sequences[commandSequenceId].sequence.map(getCommandForId);
}
exports.dmGetCommandStatesForParentAndType = dmGetCommandStatesForParentAndType;
function dmGetCommandIdsForSign(state) {
    return Object.keys(state.commands.commandsById);
}
exports.dmGetCommandIdsForSign = dmGetCommandIdsForSign;
function dmGetCommandSequenceCopySet(state, props) {
    var copySet = bsDmCopyPaste_1.dmCreateNewCommandCopySet(props.id);
    var commandSequence = dmGetCommandSequenceStateForParentAndType(state, props);
    if (!lodash_1.isNil(commandSequence)) {
        copySet.commands.sequencesById[commandSequence.id] = lodash_1.cloneDeep(commandSequence);
        commandSequence.sequence.forEach(function (commandId) {
            copySet.commands.commandsById[commandId] = lodash_1.cloneDeep(dmGetCommandStateById(state, { id: commandId }));
        });
    }
    return copySet;
}
exports.dmGetCommandSequenceCopySet = dmGetCommandSequenceCopySet;
function dmGetCommandCopySet(state, props) {
    var copySet = bsDmCopyPaste_1.dmCreateNewCommandCopySet();
    if (props.ids.length) {
        var firstCommand = dmGetCommandStateById(state, { id: props.ids[0] });
        if (!lodash_1.isNil(firstCommand)) {
            var sequenceId = firstCommand.sequenceId;
            var firstCommandSequenceObject = dmGetCommandSequenceStateById(state, { id: sequenceId });
            copySet.commands.sequencesById[sequenceId] = __assign(__assign({}, firstCommandSequenceObject), { sequence: [] });
            var copySequence_1 = copySet.commands.sequencesById[sequenceId].sequence;
            props.ids.forEach(function (id) {
                var commandState = dmGetCommandStateById(state, { id: id });
                if (!lodash_1.isNil(commandState)) {
                    copySet.commands.commandsById[id] = commandState;
                    copySequence_1.push(id);
                }
            });
        }
    }
    return copySet;
}
exports.dmGetCommandCopySet = dmGetCommandCopySet;
function dmGetCommandCollectionForDifferentSign(state, commandCollection, sourceZoneId, sourceDataFeedSourceIds, sourceUserVariableIds) {
    var removedCommandIds = [];
    var updatedCommands = {
        commandsById: {},
        sequencesById: {},
    };
    Object.keys(commandCollection.commandsById).forEach(function (commandId) {
        var command = commandCollection.commandsById[commandId];
        var include = true;
        command.operations.some(function (op) {
            if (op.type === bscore_1.CommandType.SwitchPresentation || op.type === bscore_1.CommandType.SendPluginMessage) {
                include = false;
            }
            else if (bsDmCommands_1.dmIsZoneCommandData(op.data)) {
                include = op.data.zoneId === sourceZoneId;
            }
            else if (bsDmCommands_1.dmIsDataFeedSourceCommandData(op.data)) {
                include = sourceDataFeedSourceIds.indexOf(op.data.dataFeedSourceId) >= 0;
            }
            else if (bsDmCommands_1.dmIsUserVariableCommandData(op.data)) {
                include = !lodash_1.isNil(op.data.userVariableId) && sourceUserVariableIds.indexOf(op.data.userVariableId) >= 0;
            }
            return !include;
        });
        if (include) {
            updatedCommands.commandsById[commandId] = command;
        }
        else {
            removedCommandIds.push(commandId);
        }
    });
    Object.keys(commandCollection.sequencesById).forEach(function (sequenceId) {
        var sequenceObject = commandCollection.sequencesById[sequenceId];
        var updatedSequence = lodash_1.without.apply(void 0, __spreadArrays([sequenceObject.sequence], removedCommandIds));
        if (updatedSequence.length > 0) {
            updatedCommands.sequencesById[sequenceId] = __assign(__assign({}, sequenceObject), { sequence: updatedSequence });
        }
    });
    return updatedCommands;
}
exports.dmGetCommandCollectionForDifferentSign = dmGetCommandCollectionForDifferentSign;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsDmcLiveTextItemMediaRssMediaItem = exports.DmcMediaRssMediaItem = exports.dmIsDmcLiveTextItemMediaRssTextItem = exports.DmcMediaRssTextItem = exports.dmIsDmcLiveTextItemSimpleRssItem = exports.DmcSimpleRssTextItem = exports.dmIsDmcLiveTextItemIndexedDataFeedItem = exports.DmcIndexedDataFeedTextItem = exports.dmIsDmcLiveTextItemTitledDataFeedItem = exports.DmcTitledDataFeedTextItem = exports.dmIsDmcLiveTextItemImageItem = exports.DmcImageLiveTextItem = exports.dmIsDmcLiveTextItemUserVariableItem = exports.DmcUserVariableLiveTextItem = exports.dmIsDmcLiveTextItemMediaCounterItem = exports.DmcMediaCounterLiveTextItem = exports.dmIsDmcLiveTextItemSystemVariableItem = exports.DmcSystemVariableLiveTextItem = exports.dmIsDmcLiveTextItemStaticTextItem = exports.DmcStaticLiveTextItem = exports.DmcLiveTextItemWithTextContent = exports.DmcLiveTextItem = exports.DmcLiveTextCanvas = exports.dmIsDmcLiveTextItemGroupedDataFeedItem = exports.dmIsLiveTextDataMediaRssMedia = exports.dmIsLiveTextDataMediaRss = exports.dmIsLiveTextDataSimpleRss = exports.dmIsLiveTextDataGroupedDataFeedItem = exports.dmIsLiveTextItemGroupedDataFeedType = exports.dmIsLiveTextDataIndexedDataFeed = exports.dmIsLiveTextDataTitledDataFeed = exports.dmIsLiveTextDataFromDataFeed = exports.dmIsLiveTextDataImageContent = exports.dmIsLiveTextDataUserVariable = exports.dmIsLiveTextDataMediaCounter = exports.dmIsLiveTextDataTextContent = exports.dmGetLiveTextItemTextProperties = exports.dmGetLiveTextItemData = exports.dmCreateLiveTextItemData = exports.DefaultLiveTextPosition = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmParameterizedNumbers_1 = __webpack_require__(38);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmClasses_1 = __webpack_require__(12);
var lodash_1 = __webpack_require__(0);
exports.DefaultLiveTextPosition = bscore_1.bscCreatePercentageRect(0, 0, 50, 10);
Object.freeze(exports.DefaultLiveTextPosition);
function dmCreateLiveTextItemData(type, params) {
    if (params === void 0) { params = {}; }
    switch (type) {
        default:
        case bsDmInterfaces_1.LiveTextItemType.StaticText:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.StaticText,
                text: lodash_1.isNil(params.text) ? '' : params.text,
            };
        case bsDmInterfaces_1.LiveTextItemType.SystemVariable:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.SystemVariable,
                variable: lodash_1.isNil(params.systemVariable) ? bscore_1.SystemVariableType.SerialNumber : params.systemVariable,
            };
        case bsDmInterfaces_1.LiveTextItemType.MediaCounter:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.MediaCounter,
                assetId: lodash_1.isNil(params.assetId) ? bscore_1.BsAssetIdNone : params.assetId,
            };
        case bsDmInterfaces_1.LiveTextItemType.UserVariable: {
            var userVariableIdOrName = lodash_1.isNil(params.userVariableId) ?
                (lodash_1.isNil(params.userVariableName) ? bsDmInterfaces_1.BsDmIdNone : params.userVariableName) :
                params.userVariableId;
            return {
                type: bsDmInterfaces_1.LiveTextItemType.UserVariable,
                userVariableIdOrName: userVariableIdOrName,
            };
        }
        case bsDmInterfaces_1.LiveTextItemType.SimpleRss:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.SimpleRss,
                element: lodash_1.isNil(params.element) ? bsDmInterfaces_1.RssTextElementName.Title : params.element,
                groupId: lodash_1.isNil(params.groupId) ? bsDmInterfaces_1.BsDmIdNone : params.groupId,
                enabled: true,
            };
        case bsDmInterfaces_1.LiveTextItemType.MediaRssText:
        case bsDmInterfaces_1.LiveTextEntityType.MediaRss:
            var mediaRssData = {
                type: bsDmInterfaces_1.LiveTextItemType.MediaRssText,
                element: lodash_1.isNil(params.element) ? bsDmInterfaces_1.RssTextElementName.Title : params.element,
                groupId: lodash_1.isNil(params.groupId) ? bsDmInterfaces_1.BsDmIdNone : params.groupId,
                enabled: true,
            };
            if (mediaRssData.element === bsDmInterfaces_1.RssTextElementName.Custom && !lodash_1.isNil(params.customFieldName)) {
                mediaRssData.customFieldName = params.customFieldName;
            }
            return mediaRssData;
        case bsDmInterfaces_1.LiveTextItemType.MediaRssMedia:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.MediaRssMedia,
                groupId: lodash_1.isNil(params.groupId) ? bsDmInterfaces_1.BsDmIdNone : params.groupId,
                enabled: true,
            };
        case bsDmInterfaces_1.LiveTextItemType.Image:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.Image,
                assetId: bscore_1.BsAssetIdNone,
            };
        case bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed,
                dataFeedId: bsDmInterfaces_1.BsDmIdNone,
                index: lodash_1.isNil(params.index) ?
                    bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromNumber(0) : bsDmParameterizedNumbers_1.dmResolveDmParameterizedNumber(params.index),
            };
        case bsDmInterfaces_1.LiveTextItemType.TitledDataFeed:
        case bsDmInterfaces_1.LiveTextEntityType.DataFeed:
            return {
                type: bsDmInterfaces_1.LiveTextItemType.TitledDataFeed,
                dataFeedId: bsDmInterfaces_1.BsDmIdNone,
                title: lodash_1.isNil(params.title) ?
                    bsDmParameterizedStrings_1.dmGetEmptyParameterizedString() : bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.title),
            };
    }
}
exports.dmCreateLiveTextItemData = dmCreateLiveTextItemData;
function dmGetLiveTextItemData(item) {
    switch (item.type) {
        case bsDmInterfaces_1.LiveTextItemType.StaticText:
            return lodash_1.pick(item, ['type', 'text']);
        case bsDmInterfaces_1.LiveTextItemType.SystemVariable:
            return lodash_1.pick(item, ['type', 'variable']);
        case bsDmInterfaces_1.LiveTextItemType.MediaCounter:
            return lodash_1.pick(item, ['type', 'assetId']);
        case bsDmInterfaces_1.LiveTextItemType.UserVariable:
            return lodash_1.pick(item, ['type', 'userVariableIdOrName']);
        case bsDmInterfaces_1.LiveTextItemType.SimpleRss:
            return lodash_1.pick(item, ['type', 'element', 'groupId', 'enabled']);
        case bsDmInterfaces_1.LiveTextItemType.MediaRssText:
            return lodash_1.pick(item, ['type', 'element', 'customFieldName', 'groupId', 'enabled']);
        case bsDmInterfaces_1.LiveTextItemType.MediaRssMedia:
            return lodash_1.pick(item, ['type', 'groupId', 'enabled']);
        case bsDmInterfaces_1.LiveTextItemType.Image:
            return lodash_1.pick(item, ['type', 'assetId']);
        case bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed:
            return lodash_1.pick(item, ['type', 'dataFeedId', 'index']);
        case bsDmInterfaces_1.LiveTextItemType.TitledDataFeed:
            return lodash_1.pick(item, ['type', 'dataFeedId', 'title']);
    }
    return undefined;
}
exports.dmGetLiveTextItemData = dmGetLiveTextItemData;
function dmGetLiveTextItemTextProperties(item) {
    if (dmIsLiveTextDataTextContent(item)) {
        return lodash_1.pick(item, ['textWidget', 'widget', 'useBackgroundColor']);
    }
    return null;
}
exports.dmGetLiveTextItemTextProperties = dmGetLiveTextItemTextProperties;
var LiveTextItemTextTypes = new Set([
    bsDmInterfaces_1.LiveTextItemType.StaticText, bsDmInterfaces_1.LiveTextItemType.SystemVariable, bsDmInterfaces_1.LiveTextItemType.MediaCounter,
    bsDmInterfaces_1.LiveTextItemType.UserVariable, bsDmInterfaces_1.LiveTextItemType.SimpleRss, bsDmInterfaces_1.LiveTextItemType.MediaRssText,
    bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed, bsDmInterfaces_1.LiveTextItemType.TitledDataFeed,
]);
function dmIsLiveTextDataTextContent(data) {
    return !lodash_1.isNil(data) && LiveTextItemTextTypes.has(data.type);
}
exports.dmIsLiveTextDataTextContent = dmIsLiveTextDataTextContent;
function dmIsLiveTextDataMediaCounter(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.MediaCounter;
}
exports.dmIsLiveTextDataMediaCounter = dmIsLiveTextDataMediaCounter;
function dmIsLiveTextDataUserVariable(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.UserVariable;
}
exports.dmIsLiveTextDataUserVariable = dmIsLiveTextDataUserVariable;
function dmIsLiveTextDataImageContent(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.Image;
}
exports.dmIsLiveTextDataImageContent = dmIsLiveTextDataImageContent;
function dmIsLiveTextDataFromDataFeed(data) {
    return !lodash_1.isNil(data)
        && (data.type === bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed || data.type === bsDmInterfaces_1.LiveTextItemType.TitledDataFeed);
}
exports.dmIsLiveTextDataFromDataFeed = dmIsLiveTextDataFromDataFeed;
function dmIsLiveTextDataTitledDataFeed(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.TitledDataFeed;
}
exports.dmIsLiveTextDataTitledDataFeed = dmIsLiveTextDataTitledDataFeed;
function dmIsLiveTextDataIndexedDataFeed(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed;
}
exports.dmIsLiveTextDataIndexedDataFeed = dmIsLiveTextDataIndexedDataFeed;
function dmIsLiveTextItemGroupedDataFeedType(type) {
    return !lodash_1.isNil(type) &&
        (type === bsDmInterfaces_1.LiveTextItemType.SimpleRss
            || type === bsDmInterfaces_1.LiveTextItemType.MediaRssText
            || type === bsDmInterfaces_1.LiveTextItemType.MediaRssMedia);
}
exports.dmIsLiveTextItemGroupedDataFeedType = dmIsLiveTextItemGroupedDataFeedType;
function dmIsLiveTextDataGroupedDataFeedItem(data) {
    return !lodash_1.isNil(data) && dmIsLiveTextItemGroupedDataFeedType(data.type);
}
exports.dmIsLiveTextDataGroupedDataFeedItem = dmIsLiveTextDataGroupedDataFeedItem;
function dmIsLiveTextDataSimpleRss(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.SimpleRss;
}
exports.dmIsLiveTextDataSimpleRss = dmIsLiveTextDataSimpleRss;
function dmIsLiveTextDataMediaRss(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.MediaRssText;
}
exports.dmIsLiveTextDataMediaRss = dmIsLiveTextDataMediaRss;
function dmIsLiveTextDataMediaRssMedia(data) {
    return !lodash_1.isNil(data) && data.type === bsDmInterfaces_1.LiveTextItemType.MediaRssMedia;
}
exports.dmIsLiveTextDataMediaRssMedia = dmIsLiveTextDataMediaRssMedia;
function dmIsDmcLiveTextItemGroupedDataFeedItem(item) {
    return !lodash_1.isNil(item) && dmIsLiveTextItemGroupedDataFeedType(item.type);
}
exports.dmIsDmcLiveTextItemGroupedDataFeedItem = dmIsDmcLiveTextItemGroupedDataFeedItem;
var DmcLiveTextCanvas = (function () {
    function DmcLiveTextCanvas(canvas, itemMap, groupedTextItemMap, groupedMediaItemMap, dataFeedMap, backgroundAssetItem) {
        this.groupedTextItemMap = {};
        this.groupedMediaItemMap = {};
        this.dataFeedMap = {};
        this.id = canvas.id;
        this.backgroundColor = canvas.backgroundColor;
        this.backgroundImageId = canvas.backgroundImageId;
        this.backgroundWidth = canvas.backgroundWidth;
        this.backgroundHeight = canvas.backgroundHeight;
        this.backgroundAssetItem = backgroundAssetItem;
        this.itemMap = itemMap;
        this.itemList = Object.keys(itemMap).reduce(function (list, itemId) {
            var item = itemMap[itemId];
            if (!lodash_1.isNil(item) && item.layerIndex >= 0) {
                list.push(item);
            }
            return list;
        }, []);
        if (!lodash_1.isNil(groupedTextItemMap)) {
            this.groupedTextItemMap = groupedTextItemMap;
        }
        if (!lodash_1.isNil(groupedMediaItemMap)) {
            this.groupedMediaItemMap = groupedMediaItemMap;
        }
        if (!lodash_1.isNil(dataFeedMap)) {
            this.dataFeedMap = dataFeedMap;
        }
    }
    Object.defineProperty(DmcLiveTextCanvas.prototype, "hasMediaRssItems", {
        get: function () {
            return Object.keys(this.groupedMediaItemMap).length > 0;
        },
        enumerable: false,
        configurable: true
    });
    return DmcLiveTextCanvas;
}());
exports.DmcLiveTextCanvas = DmcLiveTextCanvas;
var DmcLiveTextItem = (function () {
    function DmcLiveTextItem(item, layerIndex) {
        this.id = item.id;
        this.canvasId = item.canvasId;
        this.position = item.position;
        this.layerIndex = layerIndex;
        this.hasTextProperties = false;
    }
    Object.defineProperty(DmcLiveTextItem.prototype, "isGroupedDataFeedItem", {
        get: function () {
            return dmIsLiveTextItemGroupedDataFeedType(this.type);
        },
        enumerable: false,
        configurable: true
    });
    return DmcLiveTextItem;
}());
exports.DmcLiveTextItem = DmcLiveTextItem;
var DmcLiveTextItemWithTextContent = (function (_super) {
    __extends(DmcLiveTextItemWithTextContent, _super);
    function DmcLiveTextItemWithTextContent(item, layerIndex) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.widget = lodash_1.cloneDeep(item.widget);
        _this.textWidget = lodash_1.cloneDeep(item.textWidget);
        _this.useBackgroundColor = item.useBackgroundColor;
        _this.hasTextProperties = true;
        return _this;
    }
    return DmcLiveTextItemWithTextContent;
}(DmcLiveTextItem));
exports.DmcLiveTextItemWithTextContent = DmcLiveTextItemWithTextContent;
var DmcStaticLiveTextItem = (function (_super) {
    __extends(DmcStaticLiveTextItem, _super);
    function DmcStaticLiveTextItem(item, layerIndex) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.text = item.text;
        return _this;
    }
    return DmcStaticLiveTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcStaticLiveTextItem = DmcStaticLiveTextItem;
function dmIsDmcLiveTextItemStaticTextItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.StaticText;
}
exports.dmIsDmcLiveTextItemStaticTextItem = dmIsDmcLiveTextItemStaticTextItem;
var DmcSystemVariableLiveTextItem = (function (_super) {
    __extends(DmcSystemVariableLiveTextItem, _super);
    function DmcSystemVariableLiveTextItem(item, layerIndex) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.variable = item.variable;
        return _this;
    }
    return DmcSystemVariableLiveTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcSystemVariableLiveTextItem = DmcSystemVariableLiveTextItem;
function dmIsDmcLiveTextItemSystemVariableItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.SystemVariable;
}
exports.dmIsDmcLiveTextItemSystemVariableItem = dmIsDmcLiveTextItemSystemVariableItem;
var DmcMediaCounterLiveTextItem = (function (_super) {
    __extends(DmcMediaCounterLiveTextItem, _super);
    function DmcMediaCounterLiveTextItem(item, layerIndex, assetItem) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.assetId = item.assetId;
        _this.assetItem = lodash_1.isNil(assetItem) ? null : __assign({}, assetItem);
        return _this;
    }
    return DmcMediaCounterLiveTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcMediaCounterLiveTextItem = DmcMediaCounterLiveTextItem;
function dmIsDmcLiveTextItemMediaCounterItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.MediaCounter;
}
exports.dmIsDmcLiveTextItemMediaCounterItem = dmIsDmcLiveTextItemMediaCounterItem;
var DmcUserVariableLiveTextItem = (function (_super) {
    __extends(DmcUserVariableLiveTextItem, _super);
    function DmcUserVariableLiveTextItem(item, layerIndex, userVariable) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.userVariableIdOrName = item.userVariableIdOrName;
        _this.userVariable = lodash_1.isNil(userVariable) ? null : new bsDmClasses_1.DmcUserVariable(userVariable);
        return _this;
    }
    return DmcUserVariableLiveTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcUserVariableLiveTextItem = DmcUserVariableLiveTextItem;
function dmIsDmcLiveTextItemUserVariableItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.UserVariable;
}
exports.dmIsDmcLiveTextItemUserVariableItem = dmIsDmcLiveTextItemUserVariableItem;
var DmcImageLiveTextItem = (function (_super) {
    __extends(DmcImageLiveTextItem, _super);
    function DmcImageLiveTextItem(item, layerIndex, assetItem) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.assetId = item.assetId;
        _this.assetItem = lodash_1.isNil(assetItem) ? null : __assign({}, assetItem);
        return _this;
    }
    return DmcImageLiveTextItem;
}(DmcLiveTextItem));
exports.DmcImageLiveTextItem = DmcImageLiveTextItem;
function dmIsDmcLiveTextItemImageItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.Image;
}
exports.dmIsDmcLiveTextItemImageItem = dmIsDmcLiveTextItemImageItem;
var DmcTitledDataFeedTextItem = (function (_super) {
    __extends(DmcTitledDataFeedTextItem, _super);
    function DmcTitledDataFeedTextItem(item, layerIndex, dataFeedObjects) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.title = item.title;
        _this.dataFeedId = item.dataFeedId;
        _this.dataFeed = lodash_1.isNil(dataFeedObjects) ? null : new bsDmClasses_1.DmcDataFeed(dataFeedObjects);
        return _this;
    }
    return DmcTitledDataFeedTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcTitledDataFeedTextItem = DmcTitledDataFeedTextItem;
function dmIsDmcLiveTextItemTitledDataFeedItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.TitledDataFeed;
}
exports.dmIsDmcLiveTextItemTitledDataFeedItem = dmIsDmcLiveTextItemTitledDataFeedItem;
var DmcIndexedDataFeedTextItem = (function (_super) {
    __extends(DmcIndexedDataFeedTextItem, _super);
    function DmcIndexedDataFeedTextItem(item, layerIndex, dataFeedObjects) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.type = item.type;
        _this.index = item.index;
        _this.dataFeedId = item.dataFeedId;
        _this.dataFeed = lodash_1.isNil(dataFeedObjects) ? null : new bsDmClasses_1.DmcDataFeed(dataFeedObjects);
        return _this;
    }
    return DmcIndexedDataFeedTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcIndexedDataFeedTextItem = DmcIndexedDataFeedTextItem;
function dmIsDmcLiveTextItemIndexedDataFeedItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed;
}
exports.dmIsDmcLiveTextItemIndexedDataFeedItem = dmIsDmcLiveTextItemIndexedDataFeedItem;
var DmcSimpleRssTextItem = (function (_super) {
    __extends(DmcSimpleRssTextItem, _super);
    function DmcSimpleRssTextItem(item, layerIndex, displayTime) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.dataFeeds = [];
        _this.groupTextItems = [];
        _this.type = item.type;
        _this.element = item.element;
        _this.groupId = item.groupId;
        _this.displayTime = displayTime;
        _this.enabled = lodash_1.isNil(item.enabled) ? true : item.enabled;
        return _this;
    }
    DmcSimpleRssTextItem.prototype.getGroupTextItem = function (element) {
        if (element === this.element) {
            return this;
        }
        var item = lodash_1.find(this.groupTextItems, ['element', element]);
        return lodash_1.isNil(item) ? null : item;
    };
    return DmcSimpleRssTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcSimpleRssTextItem = DmcSimpleRssTextItem;
function dmIsDmcLiveTextItemSimpleRssItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.SimpleRss;
}
exports.dmIsDmcLiveTextItemSimpleRssItem = dmIsDmcLiveTextItemSimpleRssItem;
var DmcMediaRssTextItem = (function (_super) {
    __extends(DmcMediaRssTextItem, _super);
    function DmcMediaRssTextItem(item, layerIndex) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.customFieldName = null;
        _this.dataFeeds = [];
        _this.groupTextItems = [];
        _this.type = item.type;
        _this.element = item.element;
        _this.groupId = item.groupId;
        _this.enabled = lodash_1.isNil(item.enabled) ? true : item.enabled;
        if (item.element === bsDmInterfaces_1.RssTextElementName.Custom) {
            _this.customFieldName = lodash_1.isNil(item.customFieldName) ? '' : item.customFieldName;
        }
        return _this;
    }
    DmcMediaRssTextItem.prototype.getGroupTextItem = function (element, customFieldName) {
        if (element === this.element
            && (element !== bsDmInterfaces_1.RssTextElementName.Custom || customFieldName === this.customFieldName)) {
            return this;
        }
        var item = lodash_1.find(this.groupTextItems, function (textItem) {
            return element === textItem.element
                && (element !== bsDmInterfaces_1.RssTextElementName.Custom || customFieldName === textItem.customFieldName);
        });
        return lodash_1.isNil(item) ? null : item;
    };
    return DmcMediaRssTextItem;
}(DmcLiveTextItemWithTextContent));
exports.DmcMediaRssTextItem = DmcMediaRssTextItem;
function dmIsDmcLiveTextItemMediaRssTextItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.MediaRssText;
}
exports.dmIsDmcLiveTextItemMediaRssTextItem = dmIsDmcLiveTextItemMediaRssTextItem;
var DmcMediaRssMediaItem = (function (_super) {
    __extends(DmcMediaRssMediaItem, _super);
    function DmcMediaRssMediaItem(item, layerIndex) {
        var _this = _super.call(this, item, layerIndex) || this;
        _this.dataFeeds = [];
        _this.groupTextItems = [];
        _this.type = item.type;
        _this.groupId = item.groupId;
        _this.enabled = lodash_1.isNil(item.enabled) ? true : item.enabled;
        return _this;
    }
    DmcMediaRssMediaItem.prototype.getGroupTextItem = function (element, customFieldName) {
        var item = lodash_1.find(this.groupTextItems, function (textItem) {
            return element === textItem.element
                && (element !== bsDmInterfaces_1.RssTextElementName.Custom || customFieldName === textItem.customFieldName);
        });
        return lodash_1.isNil(item) ? null : item;
    };
    return DmcMediaRssMediaItem;
}(DmcLiveTextItem));
exports.DmcMediaRssMediaItem = DmcMediaRssMediaItem;
function dmIsDmcLiveTextItemMediaRssMediaItem(item) {
    return item.type === bsDmInterfaces_1.LiveTextItemType.MediaRssMedia;
}
exports.dmIsDmcLiveTextItemMediaRssMediaItem = dmIsDmcLiveTextItemMediaRssMediaItem;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteLiveTextDataFeedIdFromGroupWithParams = exports.dmDeleteDataFeedsFromLiveTextGroup = exports.dmMoveLiveTextDataFeedsInGroup = exports.dmAddLiveTextDataFeedIdToGroup = exports.dmUpdateDataFeedLiveTextGroup = exports.dmAddDataFeedToLiveTextGroup = exports.dmSetEnableForLiveTextGroupedItem = exports.dmAddLiveTextDataFeedGroup = exports.dmDeleteLiveTextItem = exports.dmDeleteLiveTextItemsWithParams = exports.dmGetLiveTextItemDeleteParams = exports.dmDoUpdateLiveTextItem = exports.dmUpdateLiveTextItem = exports.dmPutLiveTextItem = exports.dmAddLiveTextItem = exports.dmPasteLiveTextCopySet = exports.dmDeleteLiveTextCanvas = exports.dmDeleteLiveTextCanvasWithParams = exports.dmGetLiveTextCanvasDeleteParams = exports.dmUpdateLiveTextCanvasBackgroundImageId = exports.dmUpdateLiveTextCanvas = exports.dmGetAddLiveTextCanvasActionList = exports.dmAddLiveTextCanvas = exports.PASTE_LIVE_TEXT_ITEMS = exports.DELETE_LIVE_TEXT_DATA_FEED = exports.MOVE_LIVE_TEXT_DATA_FEED = exports.ADD_LIVE_TEXT_DATA_FEED = exports.UPDATE_LIVE_TEXT_DATA_FEED_GROUP = exports.ADD_LIVE_TEXT_DATA_FEED_GROUP = exports.DELETE_LIVE_TEXT_ITEM = exports.UPDATE_LIVE_TEXT_ITEM = exports.ADD_LIVE_TEXT_ITEM = exports.DELETE_LIVE_TEXT_CANVAS = exports.UPDATE_LIVE_TEXT_CANVAS = exports.ADD_LIVE_TEXT_CANVAS = void 0;
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmLiveText_1 = __webpack_require__(28);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmAssetItems_1 = __webpack_require__(43);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmError_1 = __webpack_require__(4);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionDataFeed_1 = __webpack_require__(21);
var selectors_1 = __webpack_require__(6);
exports.ADD_LIVE_TEXT_CANVAS = 'DM_ADD_LIVE_TEXT_CANVAS';
exports.UPDATE_LIVE_TEXT_CANVAS = 'DM_UPDATE_LIVE_TEXT_CANVAS';
exports.DELETE_LIVE_TEXT_CANVAS = 'DM_DELETE_LIVE_TEXT_CANVAS';
exports.ADD_LIVE_TEXT_ITEM = 'DM_ADD_LIVE_TEXT_ITEM';
exports.UPDATE_LIVE_TEXT_ITEM = 'DM_UPDATE_LIVE_TEXT_ITEM';
exports.DELETE_LIVE_TEXT_ITEM = 'DM_DELETE_LIVE_TEXT_ITEM';
exports.ADD_LIVE_TEXT_DATA_FEED_GROUP = 'DM_ADD_LIVE_TEXT_DATA_FEED_GROUP';
exports.UPDATE_LIVE_TEXT_DATA_FEED_GROUP = 'DM_UPDATE_LIVE_TEXT_DATA_FEED_GROUP';
exports.ADD_LIVE_TEXT_DATA_FEED = 'DM_ADD_LIVE_TEXT_DATA_FEED';
exports.MOVE_LIVE_TEXT_DATA_FEED = 'DM_MOVE_LIVE_TEXT_DATA_FEED';
exports.DELETE_LIVE_TEXT_DATA_FEED = 'DM_DELETE_LIVE_TEXT_DATA_FEED';
exports.PASTE_LIVE_TEXT_ITEMS = 'DM_PASTE_LIVE_TEXT_ITEMS';
function dmAddLiveTextCanvas(backgroundImage, backgroundColor, backgroundWidth, backgroundHeight) {
    if (backgroundWidth === void 0) { backgroundWidth = 0; }
    if (backgroundHeight === void 0) { backgroundHeight = 0; }
    return function (dispatch, getState) {
        var actionListParams = dmGetAddLiveTextCanvasActionList(bsDmState_1.dmFilterDmState(getState()), backgroundImage, backgroundColor, backgroundWidth, backgroundHeight);
        dispatch(actionBase_1.dmBatchActions(actionListParams.actions));
        return __assign(__assign({}, actionListParams.mainAction), { meta: { dispatchList: actionListParams.actions } });
    };
}
exports.dmAddLiveTextCanvas = dmAddLiveTextCanvas;
function dmGetAddLiveTextCanvasActionList(dmState, backgroundImage, backgroundColor, backgroundWidth, backgroundHeight) {
    if (backgroundWidth === void 0) { backgroundWidth = 0; }
    if (backgroundHeight === void 0) { backgroundHeight = 0; }
    var mainAction = {
        type: exports.ADD_LIVE_TEXT_CANVAS,
        payload: {
            id: utils_1.newBsDmId(),
            backgroundColor: lodash_1.isNil(backgroundColor) ? bscore_1.BsBlack : backgroundColor,
            backgroundImageId: bscore_1.BsAssetIdNone,
            backgroundWidth: backgroundWidth,
            backgroundHeight: backgroundHeight,
        },
    };
    var actions = [];
    if (!lodash_1.isNil(backgroundImage)) {
        if (backgroundImage.assetType !== bscore_1.AssetType.Content
            || backgroundImage.mediaType !== bscore_1.MediaType.Image) {
            throw (new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextCanvas - background asset must be an image'));
        }
        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, backgroundImage, mainAction);
        mainAction.payload.backgroundImageId = assetItem.id;
        actions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
    }
    actions.push(mainAction);
    return { actions: actions, mainAction: mainAction };
}
exports.dmGetAddLiveTextCanvasActionList = dmGetAddLiveTextCanvasActionList;
function dmUpdateLiveTextCanvas(params) {
    return function (dispatch, getState) {
        var payloadParams = lodash_1.pick(params, ['id', 'backgroundColor', 'backgroundWidth', 'backgroundHeight']);
        var mainAction = {
            type: exports.UPDATE_LIVE_TEXT_CANVAS,
            payload: payloadParams,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var canvas = selectors_1.dmGetLiveTextCanvasStateById(dmState, { id: params.id });
        if (lodash_1.isNil(canvas)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateLiveTextCanvas - invalid canvas ID');
        }
        if (!lodash_1.isUndefined(params.backgroundImage)) {
            if (utils_1.isValidBsDmId(canvas.backgroundImageId)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(canvas.backgroundImageId));
            }
            if (!lodash_1.isNull(params.backgroundImage)) {
                if (params.backgroundImage.assetType !== bscore_1.AssetType.Content
                    || params.backgroundImage.mediaType !== bscore_1.MediaType.Image) {
                    throw (new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextCanvas - background asset must be an image'));
                }
                var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.backgroundImage, mainAction);
                mainAction.payload.backgroundImageId = assetItem.id;
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
            }
            else {
                mainAction.payload.backgroundImageId = bscore_1.BsAssetIdNone;
            }
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
        }
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateLiveTextCanvas = dmUpdateLiveTextCanvas;
function dmUpdateLiveTextCanvasBackgroundImageId(id, backgroundImageId) {
    return {
        type: exports.UPDATE_LIVE_TEXT_CANVAS,
        payload: { id: id, backgroundImageId: backgroundImageId },
    };
}
exports.dmUpdateLiveTextCanvasBackgroundImageId = dmUpdateLiveTextCanvasBackgroundImageId;
function dmGetLiveTextCanvasDeleteParams(state, id, includeDataFeedDeleteParams) {
    if (includeDataFeedDeleteParams === void 0) { includeDataFeedDeleteParams = true; }
    var deleteParams = {
        liveTextCanvasIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        liveTextItemIds: [],
        liveTextGroupIds: [],
        dataFeedIds: [],
        dataFeedSourceIds: [],
        commandIds: [],
        assetIds: [],
    };
    deleteParams.liveTextCanvasIds.forEach(function (canvasId) {
        var _a, _b, _c, _d, _e, _f;
        var itemIds = selectors_1.dmGetAllLiveTextItemIdsForCanvas(state, { id: canvasId });
        if (!lodash_1.isNil(itemIds)) {
            var itemDeleteParams = dmGetLiveTextItemDeleteParams(state, itemIds, false, includeDataFeedDeleteParams);
            (_a = deleteParams.liveTextItemIds).push.apply(_a, itemDeleteParams.liveTextItemIds);
            (_b = deleteParams.liveTextGroupIds).push.apply(_b, itemDeleteParams.liveTextGroupIds);
            (_c = deleteParams.dataFeedIds).push.apply(_c, itemDeleteParams.dataFeedIds);
            if (includeDataFeedDeleteParams) {
                (_d = deleteParams.dataFeedSourceIds).push.apply(_d, itemDeleteParams.dataFeedSourceIds);
                (_e = deleteParams.commandIds).push.apply(_e, itemDeleteParams.commandIds);
            }
            (_f = deleteParams.assetIds).push.apply(_f, itemDeleteParams.assetIds);
        }
    });
    return deleteParams;
}
exports.dmGetLiveTextCanvasDeleteParams = dmGetLiveTextCanvasDeleteParams;
function dmDeleteLiveTextCanvasWithParams(params) {
    return {
        type: exports.DELETE_LIVE_TEXT_CANVAS,
        payload: params,
    };
}
exports.dmDeleteLiveTextCanvasWithParams = dmDeleteLiveTextCanvasWithParams;
function dmDeleteLiveTextCanvas(id) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var deleteParams = dmGetLiveTextCanvasDeleteParams(dmState, id);
        var mainAction = dmDeleteLiveTextCanvasWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteLiveTextCanvas = dmDeleteLiveTextCanvas;
function dmPasteLiveTextCopySet(copySet, targetCanvasId) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PASTE_LIVE_TEXT_ITEMS,
            payload: {
                copySet: bsDmCopyPaste_1.dmUpdateLiveTextCopySetWithUniqueIds(copySet, targetCanvasId),
            },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var canvas = selectors_1.dmGetLiveTextCanvasStateById(dmState, { id: targetCanvasId });
        if (lodash_1.isNil(canvas)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PasteLiveTextCopySet - invalid target canvas ID', { functionName: 'dmPasteLiveTextCopySet', action: mainAction });
        }
        return dispatch(mainAction);
    };
}
exports.dmPasteLiveTextCopySet = dmPasteLiveTextCopySet;
function dmAddLiveTextItem(canvasId, data, props) {
    if (props === void 0) { props = {}; }
    return function (dispatch, getState) {
        var position = lodash_1.isNil(props.position) ? __assign({}, bsDmLiveText_1.DefaultLiveTextPosition) : props.position;
        var textProps = bsDmLiveText_1.dmIsLiveTextDataTextContent(data) ?
            (lodash_1.isNil(props.textProperties) ? __assign({}, bsDmDefaults_1.dmGetDefaultLiveTextItemTextProperties()) : props.textProperties) :
            null;
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (!lodash_1.isNil(props.layerIndex) && props.layerIndex >= 0) {
            var activeLayerIndexArray = selectors_1.dmGetLiveTextLayerActiveIndexArrayForCanvas(dmState, { id: canvasId });
            if (!lodash_1.isNil(activeLayerIndexArray)) {
                props.layerIndex = activeLayerIndexArray.indexOf(props.layerIndex);
            }
        }
        var mainAction;
        if (bsDmLiveText_1.dmIsLiveTextDataSimpleRss(data)
            || (bsDmLiveText_1.dmIsLiveTextDataMediaRss(data) && data.element !== bsDmInterfaces_1.RssTextElementName.Custom)
            || (bsDmLiveText_1.dmIsLiveTextDataMediaRssMedia(data))) {
            var actionListParams = dmGetAddLiveTextRssGroupActionList(dmState, canvasId, data, props);
            batchedActions.push.apply(batchedActions, actionListParams.actions);
            mainAction = actionListParams.mainAction;
        }
        else {
            if (!lodash_1.isNil(textProps) && bscore_1.bscIsAssetItem(props.fontAssetItem) && bsDmAssetItems_1.dmIsFontAssetItem(props.fontAssetItem)) {
                var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, props.fontAssetItem);
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                textProps.widget.font = assetItem.id;
            }
            mainAction = dmPutLiveTextItem(canvasId, position, data, textProps, props.layerIndex);
            if (bsDmLiveText_1.dmIsLiveTextDataMediaCounter(mainAction.payload.data)) {
                if (!lodash_1.isNil(props.contentAssetItem)) {
                    if (bscore_1.bscIsMediaTypePlayable(props.contentAssetItem.mediaType)) {
                        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, props.contentAssetItem, mainAction);
                        batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                        mainAction.payload.data.assetId = assetItem.id;
                    }
                    else {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - displayable content asset must be specified for a mediaCounter LiveTextItem', { action: mainAction });
                    }
                }
                else if (utils_1.isValidBsDmId(mainAction.payload.data.assetId)) {
                    if (lodash_1.isNil(selectors_1.dmGetAssetItemById(dmState, { id: mainAction.payload.data.assetId }))) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - invalid assetId specified for a mediaCounter LiveTextItem', { action: mainAction });
                    }
                }
                else {
                    mainAction.payload.data.assetId = bsDmInterfaces_1.BsDmIdNone;
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataImageContent(mainAction.payload.data)) {
                if (!lodash_1.isNil(props.contentAssetItem)) {
                    if (props.contentAssetItem.assetType === bscore_1.AssetType.Content
                        && props.contentAssetItem.mediaType === bscore_1.MediaType.Image) {
                        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, props.contentAssetItem, mainAction);
                        batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                        mainAction.payload.data.assetId = assetItem.id;
                    }
                    else {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - image asset must be specified for an image based LiveTextItem', { action: mainAction });
                    }
                }
                else if (utils_1.isValidBsDmId(mainAction.payload.data.assetId)) {
                    var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: mainAction.payload.data.assetId });
                    if (lodash_1.isNil(assetItem)
                        || assetItem.assetType !== bscore_1.AssetType.Content
                        || assetItem.mediaType !== bscore_1.MediaType.Image) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - invalid assetId specified for an image LiveTextItem', { action: mainAction });
                    }
                }
                else {
                    mainAction.payload.data.assetId = bsDmInterfaces_1.BsDmIdNone;
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(mainAction.payload.data)) {
                if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(props.dataFeedSpec)) {
                    props.dataFeedSpec.usage = bscore_1.DataFeedUsageType.Text;
                    var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, props.dataFeedSpec);
                    batchedActions.push.apply(batchedActions, actionListParams.actions);
                    mainAction.payload.data.dataFeedId = actionListParams.mainAction.payload.id;
                }
                else if (utils_1.isValidBsDmId(mainAction.payload.data.dataFeedId)) {
                    if (lodash_1.isNil(selectors_1.dmGetDataFeedStateById(dmState, { id: mainAction.payload.data.dataFeedId }))) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - invalid dataFeedId specified for a dataFeed LiveTextItem', { action: mainAction });
                    }
                }
                else {
                    mainAction.payload.data.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataMediaRss(data) && data.element === bsDmInterfaces_1.RssTextElementName.Custom) {
                var dataFeedSequence = selectors_1.dmGetLiveTextDataFeedGroupByGroupId(dmState, { id: data.groupId });
                if (lodash_1.isNil(dataFeedSequence) || dataFeedSequence.usage !== bscore_1.DataFeedUsageType.Mrss) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddLiveTextItem - liveText group ID must reference a valid MRSS liveText group ' +
                        'to add an item for a custom data field');
                }
            }
            batchedActions.push(mainAction);
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddLiveTextItem = dmAddLiveTextItem;
function dmPutLiveTextItem(canvasId, position, data, textProps, layerIndex) {
    if (layerIndex === void 0) { layerIndex = -1; }
    return {
        type: exports.ADD_LIVE_TEXT_ITEM,
        payload: {
            id: utils_1.newBsDmId(),
            canvasId: canvasId,
            position: lodash_1.cloneDeep(position),
            data: lodash_1.cloneDeep(data),
            textProperties: lodash_1.cloneDeep(textProps),
            layerIndex: layerIndex,
        },
    };
}
exports.dmPutLiveTextItem = dmPutLiveTextItem;
function dmUpdateLiveTextItem(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (!lodash_1.isNil(params.layerIndex) && params.layerIndex >= 0) {
            var activeLayerIndexArray = selectors_1.dmGetLiveTextLayerActiveIndexArrayForCanvas(dmState, { id: params.canvasId });
            if (!lodash_1.isNil(activeLayerIndexArray)) {
                params.layerIndex = activeLayerIndexArray.indexOf(params.layerIndex);
            }
        }
        var batchedActions = [];
        var updateParams = lodash_1.pick(params, ['id', 'canvasId', 'position', 'data', 'textProperties', 'layerIndex']);
        var existingItem = selectors_1.dmGetLiveTextItemStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(existingItem)) {
            var updatedItemData = lodash_1.isNil(updateParams.data) ?
                bsDmLiveText_1.dmGetLiveTextItemData(existingItem) : updateParams.data;
            var fontAssetItem = null;
            var existingCustomFontId = null;
            var assetIdsToRemove = [];
            if (bsDmLiveText_1.dmIsLiveTextDataTextContent(updatedItemData)) {
                if (!lodash_1.isNil(params.fontAssetItem)) {
                    fontAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.fontAssetItem);
                }
                if (bsDmLiveText_1.dmIsLiveTextDataTextContent(existingItem)) {
                    if (!lodash_1.isUndefined(params.fontAssetItem)) {
                        existingCustomFontId = bsDmContentItems_1.dmGetWidgetCustomFontAssetId(existingItem.widget);
                        var widgetProps = {};
                        if (lodash_1.isNil(updateParams.textProperties)) {
                            updateParams.textProperties = {};
                        }
                        else if (!lodash_1.isNil(updateParams.textProperties.widget)) {
                            widgetProps = __assign({}, updateParams.textProperties.widget);
                        }
                        var font = lodash_1.isNull(fontAssetItem) ? bsDmInterfaces_1.DmDefaultFontName : fontAssetItem.id;
                        updateParams.textProperties.widget = __assign(__assign(__assign({}, existingItem.widget), widgetProps), { font: font });
                    }
                }
                else {
                    var defaultTextProps = bsDmDefaults_1.dmGetDefaultLiveTextItemTextProperties();
                    if (lodash_1.isNil(updateParams.textProperties)) {
                        updateParams.textProperties = __assign({}, defaultTextProps);
                    }
                    else {
                        updateParams.textProperties = __assign(__assign({}, defaultTextProps), updateParams.textProperties);
                    }
                    if (!lodash_1.isNil(fontAssetItem)) {
                        updateParams.textProperties.widget.font = fontAssetItem.id;
                    }
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataTextContent(existingItem)) {
                existingCustomFontId = bsDmContentItems_1.dmGetWidgetCustomFontAssetId(existingItem.widget);
            }
            if (!lodash_1.isNil(updatedItemData) && updatedItemData.type !== existingItem.type) {
                if (bsDmLiveText_1.dmIsLiveTextDataImageContent(existingItem) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(existingItem)) {
                    assetIdsToRemove.push(existingItem.assetId);
                }
                else if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(existingItem)) {
                    if (!bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(updatedItemData)) {
                        batchedActions.push(actionDataFeed_1.dmDeleteDataFeedWithParams(actionDataFeed_1.dmGetDataFeedDeleteParams(dmState, existingItem.dataFeedId)));
                    }
                }
                else if ((bsDmLiveText_1.dmIsLiveTextDataSimpleRss(existingItem) && !bsDmLiveText_1.dmIsLiveTextDataSimpleRss(updatedItemData))
                    || (bsDmLiveText_1.dmIsLiveTextDataMediaRss(existingItem) && !bsDmLiveText_1.dmIsLiveTextDataMediaRss(updatedItemData))) {
                    batchedActions.push(dmDeleteLiveTextItemsWithParams(dmGetLiveTextItemDeleteParams(dmState, existingItem.id, true)));
                }
            }
            if (!lodash_1.isNil(existingCustomFontId)) {
                assetIdsToRemove.push(existingCustomFontId);
            }
            var mainAction = dmDoUpdateLiveTextItem(updateParams);
            if (bsDmLiveText_1.dmIsLiveTextDataMediaCounter(updatedItemData)) {
                if (!lodash_1.isNil(params.contentAssetItem)) {
                    if (bsDmLiveText_1.dmIsLiveTextDataMediaCounter(existingItem)) {
                        assetIdsToRemove.push(existingItem.assetId);
                    }
                    var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.contentAssetItem, mainAction);
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    updatedItemData.assetId = assetItem.id;
                    mainAction.payload.data = updatedItemData;
                }
                else if (!utils_1.isValidBsDmId(updatedItemData.assetId)) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateLiveTextItem - asset must be specified for a mediaCounter LiveTextItem', { action: mainAction });
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataImageContent(updatedItemData)) {
                if (!lodash_1.isNil(params.contentAssetItem)
                    && params.contentAssetItem.assetType === bscore_1.AssetType.Content
                    && params.contentAssetItem.mediaType === bscore_1.MediaType.Image) {
                    if (bsDmLiveText_1.dmIsLiveTextDataImageContent(existingItem)) {
                        assetIdsToRemove.push(existingItem.assetId);
                    }
                    var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.contentAssetItem, mainAction);
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    updatedItemData.assetId = assetItem.id;
                    mainAction.payload.data = updatedItemData;
                }
                else if (!utils_1.isValidBsDmId(updatedItemData.assetId)) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateLiveTextItem - image asset must be specified for an image based LiveTextItem', { action: mainAction });
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(updatedItemData)) {
                if (!lodash_1.isNil(params.dataFeedSpec)) {
                    var dataFeedActionList = void 0;
                    if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(existingItem)) {
                        dataFeedActionList =
                            actionDataFeed_1.dmGetUpdateDataFeedActionList(dmState, { id: existingItem.dataFeedId, feedSpec: params.dataFeedSpec });
                    }
                    else {
                        dataFeedActionList = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, params.dataFeedSpec);
                    }
                    if (!lodash_1.isNil(dataFeedActionList) && dataFeedActionList.actions.length > 0) {
                        batchedActions.push.apply(batchedActions, dataFeedActionList.actions);
                        updatedItemData.dataFeedId = dataFeedActionList.mainAction.payload.id;
                    }
                }
                else {
                    if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(existingItem)) {
                        updatedItemData.dataFeedId = existingItem.dataFeedId;
                    }
                    else {
                        updatedItemData.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
                    }
                }
                mainAction.payload.data = updatedItemData;
            }
            else if ((bsDmLiveText_1.dmIsLiveTextDataSimpleRss(updatedItemData) && !bsDmLiveText_1.dmIsLiveTextDataSimpleRss(existingItem))
                || (bsDmLiveText_1.dmIsLiveTextDataMediaRss(updatedItemData) && !bsDmLiveText_1.dmIsLiveTextDataMediaRss(existingItem))) {
                if (!lodash_1.isNil(params.dataFeedSpec)) {
                    if (bsDmLiveText_1.dmIsLiveTextDataSimpleRss(updatedItemData)) {
                        params.dataFeedSpec.usage = bscore_1.DataFeedUsageType.Text;
                    }
                    else if (params.dataFeedSpec.usage !== bscore_1.DataFeedUsageType.Mrss) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateLiveTextItem - dataFeed usage must be MRSS for a MediaRSS LiveTextItem');
                    }
                }
                var layerIndex = params.layerIndex;
                if (lodash_1.isNil(layerIndex)) {
                    var layerSequence = selectors_1.dmGetLiveTextLayerSequenceForCanvas(dmState, { id: params.canvasId });
                    if (!lodash_1.isNil(layerSequence)) {
                        layerIndex = layerSequence.indexOf(existingItem.id);
                    }
                    else {
                        layerIndex = -1;
                    }
                }
                var textProperties = bsDmLiveText_1.dmGetLiveTextItemTextProperties(existingItem);
                if (lodash_1.isNil(textProperties)) {
                    textProperties = __assign(__assign({}, bsDmDefaults_1.dmGetDefaultLiveTextItemTextProperties()), params.textProperties);
                }
                else {
                    textProperties = __assign(__assign({}, textProperties), params.textProperties);
                }
                var props = {
                    position: lodash_1.isNil(params.position) ? existingItem.position : params.position,
                    layerIndex: layerIndex,
                    textProperties: textProperties,
                    dataFeedSpec: params.dataFeedSpec,
                    fontAssetItem: fontAssetItem,
                    rssDisplayTime: params.rssDisplayTime,
                    positionOffsetX: params.positionOffsetX,
                    positionOffsetY: params.positionOffsetY,
                };
                var actionListParams = dmGetAddLiveTextRssGroupActionList(dmState, params.canvasId, updatedItemData, props, true);
                batchedActions.push.apply(batchedActions, actionListParams.actions);
                mainAction.payload.data.groupId =
                    actionListParams.mainAction.payload.data.groupId;
            }
            if (assetIdsToRemove.length) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(assetIdsToRemove));
            }
            if (!lodash_1.isNil(fontAssetItem)) {
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(fontAssetItem));
            }
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateLiveTextItem - LiveTextItem ID does not reference a valid LiveTextItem');
        }
    };
}
exports.dmUpdateLiveTextItem = dmUpdateLiveTextItem;
function dmDoUpdateLiveTextItem(params) {
    return {
        type: exports.UPDATE_LIVE_TEXT_ITEM,
        payload: params,
    };
}
exports.dmDoUpdateLiveTextItem = dmDoUpdateLiveTextItem;
function dmGetLiveTextItemDeleteParams(state, id, retainMainLiveTextItem, includeDataFeedDeleteParams) {
    var _a, _b;
    if (retainMainLiveTextItem === void 0) { retainMainLiveTextItem = false; }
    if (includeDataFeedDeleteParams === void 0) { includeDataFeedDeleteParams = true; }
    var deleteParams = {
        liveTextItemIds: (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId),
        liveTextGroupIds: [],
        dataFeedIds: [],
        dataFeedSourceIds: [],
        commandIds: [],
        assetIds: [],
    };
    var mainLiveTextItemId = deleteParams.liveTextItemIds[0];
    var groupedItemIdsToDelete = [];
    deleteParams.liveTextItemIds.forEach(function (itemId, index) {
        var _a;
        var item = selectors_1.dmGetLiveTextItemStateById(state, { id: itemId });
        if (!lodash_1.isNil(item)) {
            if (bsDmLiveText_1.dmIsLiveTextDataImageContent(item) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(item)) {
                if (!lodash_1.isNil(item.assetId)) {
                    deleteParams.assetIds.push(item.assetId);
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(item)) {
                if (!lodash_1.isNil(item.dataFeedId)) {
                    deleteParams.dataFeedIds.push(item.dataFeedId);
                }
            }
            else if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(item)
                && (!(bsDmLiveText_1.dmIsLiveTextDataMediaRss(item) && item.element === bsDmInterfaces_1.RssTextElementName.Custom))) {
                groupedItemIdsToDelete.push.apply(groupedItemIdsToDelete, selectors_1.dmGetAllLiveTextItemIdsForGroup(state, { id: item.groupId }));
                if (!lodash_1.isNil(item.groupId) && deleteParams.liveTextGroupIds.indexOf(item.groupId) < 0) {
                    deleteParams.liveTextGroupIds.push(item.groupId);
                }
                var liveTextDataFeedSequence = selectors_1.dmGetLiveTextDataFeedGroupByGroupId(state, { id: item.groupId });
                if (!lodash_1.isNil(liveTextDataFeedSequence) && liveTextDataFeedSequence.dataFeedIds.length) {
                    (_a = deleteParams.dataFeedIds).push.apply(_a, liveTextDataFeedSequence.dataFeedIds);
                }
            }
            if (bsDmLiveText_1.dmIsLiveTextDataTextContent(item) && (!retainMainLiveTextItem || index > 0)) {
                var fontAssetId = bsDmContentItems_1.dmGetWidgetCustomFontAssetId(item.widget);
                if (!lodash_1.isNil(fontAssetId)) {
                    deleteParams.assetIds.push(fontAssetId);
                }
            }
        }
    });
    if (groupedItemIdsToDelete.length) {
        (_a = deleteParams.liveTextItemIds).push.apply(_a, groupedItemIdsToDelete);
        deleteParams.liveTextItemIds = lodash_1.uniq(deleteParams.liveTextItemIds);
    }
    if (deleteParams.dataFeedIds.length > 0) {
        deleteParams.dataFeedIds = lodash_1.uniq(deleteParams.dataFeedIds);
        if (includeDataFeedDeleteParams) {
            var dataFeedDeleteParams = actionDataFeed_1.dmGetDataFeedDeleteParams(state, deleteParams.dataFeedIds);
            deleteParams.dataFeedSourceIds = dataFeedDeleteParams.dataFeedSourceIds;
            deleteParams.commandIds = dataFeedDeleteParams.commandIds;
            if (dataFeedDeleteParams.assetIds.length > 0) {
                (_b = deleteParams.assetIds).push.apply(_b, dataFeedDeleteParams.assetIds);
            }
        }
    }
    if (retainMainLiveTextItem) {
        deleteParams.liveTextItemIds = lodash_1.without(deleteParams.liveTextItemIds, mainLiveTextItemId);
    }
    return deleteParams;
}
exports.dmGetLiveTextItemDeleteParams = dmGetLiveTextItemDeleteParams;
function dmDeleteLiveTextItemsWithParams(params) {
    return {
        type: exports.DELETE_LIVE_TEXT_ITEM,
        payload: params,
    };
}
exports.dmDeleteLiveTextItemsWithParams = dmDeleteLiveTextItemsWithParams;
function dmDeleteLiveTextItem(id) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var deleteParams = dmGetLiveTextItemDeleteParams(dmState, id);
        var mainAction = dmDeleteLiveTextItemsWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteLiveTextItem = dmDeleteLiveTextItem;
function dmGetAddLiveTextRssGroupActionList(dmState, canvasId, data, props, omitMainAction) {
    if (props === void 0) { props = {}; }
    if (omitMainAction === void 0) { omitMainAction = false; }
    var usage = bscore_1.DataFeedUsageType.Text;
    var textItemType = bsDmInterfaces_1.LiveTextItemType.SimpleRss;
    var displayTime = 5;
    if (bsDmLiveText_1.dmIsLiveTextDataMediaRss(data)) {
        usage = bscore_1.DataFeedUsageType.Mrss;
        textItemType = bsDmInterfaces_1.LiveTextItemType.MediaRssText;
    }
    else if (!lodash_1.isNil(props.rssDisplayTime)) {
        displayTime = props.rssDisplayTime;
    }
    var position = lodash_1.isNil(props.position) ? __assign({}, bsDmLiveText_1.DefaultLiveTextPosition) : __assign({}, props.position);
    var layerIndex = lodash_1.isNil(props.layerIndex) ? -1 : props.layerIndex;
    var adjustForNextItem = function () {
        if (props.positionOffsetX) {
            position.x += props.positionOffsetX;
        }
        if (props.positionOffsetY) {
            position.y += props.positionOffsetY;
        }
        if (layerIndex >= 0) {
            layerIndex += 1;
        }
    };
    var textProps = lodash_1.isNil(props.textProperties) ? __assign({}, bsDmDefaults_1.dmGetDefaultLiveTextItemTextProperties()) : props.textProperties;
    var fontAssetItem = null;
    if (bscore_1.bscIsAssetItem(props.fontAssetItem) && bsDmAssetItems_1.dmIsFontAssetItem(props.fontAssetItem)) {
        fontAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, props.fontAssetItem);
        textProps.widget.font = fontAssetItem.id;
    }
    var actions = [];
    var dataFeedIds = [];
    if (!lodash_1.isNil(props.dataFeedSpec)) {
        props.dataFeedSpec.usage = usage;
        var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, props.dataFeedSpec);
        actions.push.apply(actions, actionListParams.actions);
        dataFeedIds.push(actionListParams.mainAction.payload.id);
    }
    var groupAction = dmAddLiveTextDataFeedGroup(canvasId, usage, displayTime, dataFeedIds);
    actions.push(groupAction);
    var groupId = groupAction.payload.groupId;
    var titleItemData = bsDmLiveText_1.dmCreateLiveTextItemData(textItemType, { element: bsDmInterfaces_1.RssTextElementName.Title, groupId: groupId });
    var mainAction = dmPutLiveTextItem(canvasId, position, titleItemData, textProps, layerIndex);
    if (!omitMainAction) {
        actions.push(mainAction);
        if (!lodash_1.isNil(fontAssetItem)) {
            actions.push(actionAssetMap_1.dmPutAssetItem(fontAssetItem));
        }
    }
    adjustForNextItem();
    var descriptionItemData = bsDmLiveText_1.dmCreateLiveTextItemData(textItemType, { element: bsDmInterfaces_1.RssTextElementName.Description, groupId: groupId });
    actions.push(dmPutLiveTextItem(canvasId, position, descriptionItemData, textProps, layerIndex));
    if (!lodash_1.isNil(fontAssetItem)) {
        actions.push(actionAssetMap_1.dmPutAssetItem(fontAssetItem));
    }
    if (bsDmLiveText_1.dmIsLiveTextDataMediaRss(data)) {
        adjustForNextItem();
        var mediaItemData = bsDmLiveText_1.dmCreateLiveTextItemData(bsDmInterfaces_1.LiveTextItemType.MediaRssMedia, { groupId: groupId });
        actions.push(dmPutLiveTextItem(canvasId, position, mediaItemData, null, layerIndex));
    }
    return { actions: actions, mainAction: mainAction };
}
function dmAddLiveTextDataFeedGroup(canvasId, usage, displayTime, dataFeedIds) {
    return {
        type: exports.ADD_LIVE_TEXT_DATA_FEED_GROUP,
        payload: {
            groupId: utils_1.newBsDmId(),
            canvasId: canvasId,
            usage: usage,
            displayTime: displayTime,
            dataFeedIds: dataFeedIds,
        },
    };
}
exports.dmAddLiveTextDataFeedGroup = dmAddLiveTextDataFeedGroup;
function dmSetEnableForLiveTextGroupedItem(id, enabled) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var item = selectors_1.dmGetLiveTextItemStateById(dmState, { id: id });
        if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(item)) {
            var data = __assign(__assign({}, lodash_1.pick(item, ['type', 'element', 'groupId', 'customFieldName'])), { enabled: enabled });
            var params = {
                id: id,
                canvasId: item.canvasId,
                data: data,
            };
            return dispatch(dmDoUpdateLiveTextItem(params));
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'SetEnableForLiveTextGroupedItem - liveTextItem specified is not a grouped item');
        }
    };
}
exports.dmSetEnableForLiveTextGroupedItem = dmSetEnableForLiveTextGroupedItem;
function dmAddDataFeedToLiveTextGroup(groupId, dataFeedSpec, index) {
    if (index === void 0) { index = -1; }
    return function (dispatch, getState) {
        var mainAction = dmAddLiveTextDataFeedIdToGroup(groupId, bsDmInterfaces_1.BsDmIdNone, index);
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var batchedActions = [];
        var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
        batchedActions.push.apply(batchedActions, actionListParams.actions);
        mainAction.payload.dataFeedId = actionListParams.mainAction.payload.id;
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddDataFeedToLiveTextGroup = dmAddDataFeedToLiveTextGroup;
function dmUpdateDataFeedLiveTextGroup(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var group = selectors_1.dmGetLiveTextDataFeedGroupByGroupId(dmState, { id: params.groupId });
        if (lodash_1.isNil(group)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateDataFeedToLiveTextGroup - invalid liveText group ID');
        }
        if (group.usage !== bscore_1.DataFeedUsageType.Text) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateDataFeedToLiveTextGroup - can only set displayTime for Text data feeds');
        }
        var mainAction = {
            type: exports.UPDATE_LIVE_TEXT_DATA_FEED_GROUP,
            payload: params,
        };
        return dispatch(mainAction);
    };
}
exports.dmUpdateDataFeedLiveTextGroup = dmUpdateDataFeedLiveTextGroup;
function dmAddLiveTextDataFeedIdToGroup(groupId, dataFeedId, index) {
    if (index === void 0) { index = -1; }
    return {
        type: exports.ADD_LIVE_TEXT_DATA_FEED,
        payload: {
            groupId: groupId,
            dataFeedId: dataFeedId,
            index: index,
        },
    };
}
exports.dmAddLiveTextDataFeedIdToGroup = dmAddLiveTextDataFeedIdToGroup;
function dmMoveLiveTextDataFeedsInGroup(groupId, indices, targetIndex) {
    if (typeof indices === 'number') {
        indices = [indices];
    }
    return {
        type: exports.MOVE_LIVE_TEXT_DATA_FEED,
        payload: {
            groupId: groupId,
            indices: indices,
            targetIndex: targetIndex,
        },
    };
}
exports.dmMoveLiveTextDataFeedsInGroup = dmMoveLiveTextDataFeedsInGroup;
function dmDeleteDataFeedsFromLiveTextGroup(groupId, dataFeedIds) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var dataFeedDeleteParams = actionDataFeed_1.dmGetDataFeedDeleteParams(dmState, dataFeedIds);
        return dispatch(dmDeleteLiveTextDataFeedIdFromGroupWithParams(groupId, dataFeedDeleteParams));
    };
}
exports.dmDeleteDataFeedsFromLiveTextGroup = dmDeleteDataFeedsFromLiveTextGroup;
function dmDeleteLiveTextDataFeedIdFromGroupWithParams(groupId, dataFeedDeleteParams) {
    return {
        type: exports.DELETE_LIVE_TEXT_DATA_FEED,
        payload: __assign({ liveTextGroupIds: [groupId] }, dataFeedDeleteParams),
    };
}
exports.dmDeleteLiveTextDataFeedIdFromGroupWithParams = dmDeleteLiveTextDataFeedIdFromGroupWithParams;


/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetZoneLayerIdsByType = exports.dmCreateDefaultSignZoneLayerSequence = exports.dmCreateDefaultSignZoneLayerMap = exports.dmCreateDefaultNonVideoZoneLayer = exports.dmCreateDefaultVideoZoneLayer = exports.dmCreateDefaultVideoZoneLayerProperties = exports.dmGetMaxVideoZoneCountByDecoderByModel = exports.dmGetVideoDecodersByModel = exports.dmGetVideoDecoderPropertiesForZoneLayer = exports.hdDecoder = exports.sharableFourKDecoder = exports.secondaryFourKDecoder = exports.primaryFourKDecoder = exports.dmGetMaxDecoderSizeForVideoZoneLayer = exports.dmIsMosaicModeSupportedByVideoZoneLayer = exports.dmIsVideoZoneLayer = exports.dmCanZoneTypeBeNonInteractive = exports.dmCanZoneTypeBeInteractive = exports.dmGetAudioOutputSpecificationFromMap = exports.dmGetAudioOutputAssignmentMapFromSpec = exports.dmGetAudioDecoderCountForZoneType = exports.dmZoneTypeUsesAudioDecoder = exports.dmIsAudioZoneType = exports.dmIsPlayableVideoZoneType = exports.dmIsVideoZoneType = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmDefaults_1 = __webpack_require__(19);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
function dmIsVideoZoneType(zoneType) {
    return zoneType === bscore_1.ZoneType.VideoOrImages
        || zoneType === bscore_1.ZoneType.VideoOnly
        || zoneType === bscore_1.ZoneType.BackgroundImage;
}
exports.dmIsVideoZoneType = dmIsVideoZoneType;
function dmIsPlayableVideoZoneType(zoneType) {
    return zoneType === bscore_1.ZoneType.VideoOrImages
        || zoneType === bscore_1.ZoneType.VideoOnly;
}
exports.dmIsPlayableVideoZoneType = dmIsPlayableVideoZoneType;
function dmIsAudioZoneType(zoneType) {
    return zoneType === bscore_1.ZoneType.AudioOnly
        || zoneType === bscore_1.ZoneType.EnhancedAudio;
}
exports.dmIsAudioZoneType = dmIsAudioZoneType;
function dmZoneTypeUsesAudioDecoder(zoneType) {
    return zoneType === bscore_1.ZoneType.VideoOrImages
        || zoneType === bscore_1.ZoneType.VideoOnly
        || zoneType === bscore_1.ZoneType.AudioOnly
        || zoneType === bscore_1.ZoneType.EnhancedAudio;
}
exports.dmZoneTypeUsesAudioDecoder = dmZoneTypeUsesAudioDecoder;
function dmGetAudioDecoderCountForZoneType(zoneType) {
    if (zoneType === bscore_1.ZoneType.EnhancedAudio) {
        return 2;
    }
    else if (zoneType === bscore_1.ZoneType.VideoOrImages
        || zoneType === bscore_1.ZoneType.VideoOnly
        || zoneType === bscore_1.ZoneType.AudioOnly) {
        return 1;
    }
    return 0;
}
exports.dmGetAudioDecoderCountForZoneType = dmGetAudioDecoderCountForZoneType;
function dmGetAudioOutputAssignmentMapFromSpec(spec) {
    var map = {
        analog1: spec.analog,
        analog2: bscore_1.AudioOutputType.None,
        analog3: bscore_1.AudioOutputType.None,
        hdmi: spec.hdmi,
        spdif: spec.spdif,
        usbA: bscore_1.AudioOutputType.None,
        usbB: bscore_1.AudioOutputType.None,
        usbC: bscore_1.AudioOutputType.None,
        usbD: bscore_1.AudioOutputType.None,
        usbTypeA: bscore_1.AudioOutputType.None,
        usbTypeC: bscore_1.AudioOutputType.None,
        usb700_1: bscore_1.AudioOutputType.None,
        usb700_2: bscore_1.AudioOutputType.None,
        usb700_3: bscore_1.AudioOutputType.None,
        usb700_4: bscore_1.AudioOutputType.None,
        usb700_5: bscore_1.AudioOutputType.None,
        usb700_6: bscore_1.AudioOutputType.None,
        usb700_7: bscore_1.AudioOutputType.None,
        usb_1: bscore_1.AudioOutputType.None,
        usb_2: bscore_1.AudioOutputType.None,
        usb_3: bscore_1.AudioOutputType.None,
        usb_4: bscore_1.AudioOutputType.None,
        usb_5: bscore_1.AudioOutputType.None,
        usb_6: bscore_1.AudioOutputType.None,
    };
    if (!lodash_1.isNil(spec.enabledUsbOutputs)) {
        spec.enabledUsbOutputs.forEach(function (usbConnector) {
            map[usbConnector] = spec.usb;
        });
    }
    return map;
}
exports.dmGetAudioOutputAssignmentMapFromSpec = dmGetAudioOutputAssignmentMapFromSpec;
var usbConnectorNameSet = new Set(bscore_1.UsbConnectorNameArray);
function dmGetAudioOutputSpecificationFromMap(map) {
    var spec = {
        analog: map.analog1,
        usb: bscore_1.AudioOutputType.Pcm,
        hdmi: map.hdmi,
        spdif: map.spdif,
        enabledUsbOutputs: [],
    };
    Object.keys(map).forEach(function (connectorName) {
        if (usbConnectorNameSet.has(connectorName) && map[connectorName] !== bscore_1.AudioOutputType.None) {
            spec.usb = map[connectorName];
            spec.enabledUsbOutputs.push(connectorName);
        }
    });
    return spec;
}
exports.dmGetAudioOutputSpecificationFromMap = dmGetAudioOutputSpecificationFromMap;
function dmCanZoneTypeBeInteractive(zoneType) {
    return !(zoneType === bscore_1.ZoneType.Ticker || zoneType === bscore_1.ZoneType.Clock || zoneType === bscore_1.ZoneType.BackgroundImage);
}
exports.dmCanZoneTypeBeInteractive = dmCanZoneTypeBeInteractive;
function dmCanZoneTypeBeNonInteractive(zoneType) {
    return !(zoneType === bscore_1.ZoneType.Control);
}
exports.dmCanZoneTypeBeNonInteractive = dmCanZoneTypeBeNonInteractive;
function dmIsVideoZoneLayer(zoneLayer) {
    return (!lodash_1.isNil(zoneLayer)) && zoneLayer.type === bscore_1.ZoneLayerType.Video;
}
exports.dmIsVideoZoneLayer = dmIsVideoZoneLayer;
function dmIsMosaicModeSupportedByVideoZoneLayer(zoneLayer) {
    var decoder = dmGetVideoDecoderPropertiesForZoneLayer(zoneLayer.zoneLayerSpecificProperties);
    return decoder.supportedModes.indexOf(bscore_1.VideoDecoderMode.Mosaic) >= 0;
}
exports.dmIsMosaicModeSupportedByVideoZoneLayer = dmIsMosaicModeSupportedByVideoZoneLayer;
function dmGetMaxDecoderSizeForVideoZoneLayer(zoneLayer) {
    return dmGetVideoDecoderPropertiesForZoneLayer(zoneLayer.zoneLayerSpecificProperties).maxDecoderSize;
}
exports.dmGetMaxDecoderSizeForVideoZoneLayer = dmGetMaxDecoderSizeForVideoZoneLayer;
exports.primaryFourKDecoder = {
    supportedModes: [bscore_1.VideoDecoderMode.Mosaic, bscore_1.VideoDecoderMode.Regular],
    decoderName: bscore_1.VideoDecoderName.FourKFirstDecoder,
    friendlyName: bscore_1.VideoDecoderName.FourKFirstDecoder,
    maxDecoderSize: bscore_1.VideoDecoderSize.FourK,
    sharableInVideoPlanes: false,
};
Object.freeze(exports.primaryFourKDecoder);
exports.secondaryFourKDecoder = {
    supportedModes: [bscore_1.VideoDecoderMode.Mosaic, bscore_1.VideoDecoderMode.Regular],
    decoderName: bscore_1.VideoDecoderName.FourKSecondDecoder,
    friendlyName: bscore_1.VideoDecoderName.FourKSecondDecoder,
    maxDecoderSize: bscore_1.VideoDecoderSize.FourK,
    sharableInVideoPlanes: false,
};
Object.freeze(exports.secondaryFourKDecoder);
exports.sharableFourKDecoder = {
    supportedModes: [bscore_1.VideoDecoderMode.Mosaic, bscore_1.VideoDecoderMode.Regular],
    decoderName: bscore_1.VideoDecoderName.FourKFirstDecoder,
    friendlyName: bscore_1.VideoDecoderName.FourKFirstDecoder,
    maxDecoderSize: bscore_1.VideoDecoderSize.FourK,
    sharableInVideoPlanes: true,
};
Object.freeze(exports.sharableFourKDecoder);
exports.hdDecoder = {
    supportedModes: [bscore_1.VideoDecoderMode.Regular],
    decoderName: bscore_1.VideoDecoderName.HDDecoder,
    friendlyName: bscore_1.VideoDecoderName.HDDecoder,
    maxDecoderSize: bscore_1.VideoDecoderSize.HD,
    sharableInVideoPlanes: false,
};
Object.freeze(exports.hdDecoder);
function dmGetVideoDecoderPropertiesForZoneLayer(layerProps) {
    if (layerProps.type === bscore_1.VideoZoneLayerType.FourK) {
        return layerProps.index === 0 ? exports.primaryFourKDecoder : exports.secondaryFourKDecoder;
    }
    return exports.hdDecoder;
}
exports.dmGetVideoDecoderPropertiesForZoneLayer = dmGetVideoDecoderPropertiesForZoneLayer;
function dmGetVideoDecodersByModel(model) {
    var videoDecoders = [];
    var playerCapabilities = bscore_1.bscGetPlayerCapabilities(model);
    var decoder4KCount = playerCapabilities.videoDecoder4kCount;
    if (decoder4KCount > 0) {
        var primaryDecoder = decoder4KCount === 1 && playerCapabilities.videoPlaneCount > 1 ?
            exports.sharableFourKDecoder : exports.primaryFourKDecoder;
        videoDecoders.push(primaryDecoder);
        if (decoder4KCount > 1) {
            videoDecoders.push(exports.secondaryFourKDecoder);
        }
        else if (playerCapabilities.videoDecoderCount > 1) {
            videoDecoders.push(exports.hdDecoder);
        }
    }
    else {
        var decoderCount = playerCapabilities.videoDecoderCount;
        if (decoderCount > 0) {
            videoDecoders.push(exports.hdDecoder);
        }
    }
    return videoDecoders;
}
exports.dmGetVideoDecodersByModel = dmGetVideoDecodersByModel;
function dmGetMaxVideoZoneCountByDecoderByModel(model, zoneLayerType) {
    var playerCapabilities = bscore_1.bscGetPlayerCapabilities(model);
    if (playerCapabilities.videoDecoder4kCount > 0) {
        return zoneLayerType === bscore_1.VideoZoneLayerType.FourK ? 3 : 1;
    }
    else if (playerCapabilities.videoDecoderCount > 0) {
        return 1;
    }
    return 0;
}
exports.dmGetMaxVideoZoneCountByDecoderByModel = dmGetMaxVideoZoneCountByDecoderByModel;
function dmCreateDefaultVideoZoneLayerProperties(decoder, index, videoMode) {
    var sharedDecoder = decoder.sharableInVideoPlanes && bscore_1.bscIsHDVideoResolutionOrSmaller(videoMode);
    var type = !sharedDecoder && decoder.maxDecoderSize === bscore_1.VideoDecoderSize.FourK ?
        bscore_1.VideoZoneLayerType.FourK : bscore_1.VideoZoneLayerType.HD;
    return { type: type, index: index, sharedDecoder: sharedDecoder, enableMosaicDeinterlacer: false };
}
exports.dmCreateDefaultVideoZoneLayerProperties = dmCreateDefaultVideoZoneLayerProperties;
function dmCreateDefaultVideoZoneLayer(decoder, index, videoMode, id) {
    return {
        id: utils_1.isValidBsDmId(id) ? id : utils_1.newBsDmId(),
        type: bscore_1.ZoneLayerType.Video,
        zoneSequence: [],
        zoneLayerSpecificProperties: dmCreateDefaultVideoZoneLayerProperties(decoder, index, videoMode),
    };
}
exports.dmCreateDefaultVideoZoneLayer = dmCreateDefaultVideoZoneLayer;
function dmCreateDefaultNonVideoZoneLayer(type, id) {
    return {
        id: utils_1.isValidBsDmId(id) ? id : utils_1.newBsDmId(),
        type: type,
        zoneSequence: [],
    };
}
exports.dmCreateDefaultNonVideoZoneLayer = dmCreateDefaultNonVideoZoneLayer;
var dmCreateDefaultSignZoneLayerMap = function (model, videoMode) {
    var _a;
    if (lodash_1.isNil(model)) {
        model = bsDmDefaults_1.dmGetDefaultSignPropertyData().model;
    }
    if (lodash_1.isNil(videoMode)) {
        videoMode = bsDmDefaults_1.dmGetDefaultSignPropertyData().videoMode;
    }
    var graphicsLayer = dmCreateDefaultNonVideoZoneLayer(bscore_1.ZoneLayerType.Graphics);
    var audioLayer = dmCreateDefaultNonVideoZoneLayer(bscore_1.ZoneLayerType.Audio);
    var invisibleLayer = dmCreateDefaultNonVideoZoneLayer(bscore_1.ZoneLayerType.Invisible);
    var zoneLayerMap = (_a = {},
        _a[graphicsLayer.id] = graphicsLayer,
        _a[audioLayer.id] = audioLayer,
        _a[invisibleLayer.id] = invisibleLayer,
        _a);
    var videoDecoders = dmGetVideoDecodersByModel(model);
    videoDecoders.forEach(function (videoDecoder, index) {
        var layer = dmCreateDefaultVideoZoneLayer(videoDecoder, index, videoMode);
        zoneLayerMap[layer.id] = layer;
    });
    if (videoDecoders.length === 1
        && videoDecoders[0].sharableInVideoPlanes
        && bscore_1.bscIsHDVideoResolutionOrSmaller(videoMode)) {
        var layer = dmCreateDefaultVideoZoneLayer(videoDecoders[0], 1, videoMode);
        zoneLayerMap[layer.id] = layer;
    }
    return zoneLayerMap;
};
exports.dmCreateDefaultSignZoneLayerMap = dmCreateDefaultSignZoneLayerMap;
var dmCreateDefaultSignZoneLayerSequence = function (zoneLayerMap) {
    var zoneLayerSequence = [];
    var graphicsLayerId;
    var videoLayer1Id;
    var videoLayer2Id;
    for (var zoneLayerId in zoneLayerMap) {
        if (zoneLayerMap.hasOwnProperty(zoneLayerId)) {
            var zoneLayer = zoneLayerMap[zoneLayerId];
            if (zoneLayer.type === bscore_1.ZoneLayerType.Graphics) {
                graphicsLayerId = zoneLayerId;
            }
            else if (dmIsVideoZoneLayer(zoneLayer)) {
                if (zoneLayer.zoneLayerSpecificProperties.index === 0) {
                    videoLayer1Id = zoneLayerId;
                }
                else {
                    videoLayer2Id = zoneLayerId;
                }
            }
        }
    }
    if (!lodash_1.isNil(graphicsLayerId)) {
        zoneLayerSequence.push(graphicsLayerId);
    }
    if (!lodash_1.isNil(videoLayer1Id)) {
        zoneLayerSequence.push(videoLayer1Id);
        if (!lodash_1.isNil(videoLayer2Id)) {
            zoneLayerSequence.push(videoLayer2Id);
        }
    }
    return zoneLayerSequence;
};
exports.dmCreateDefaultSignZoneLayerSequence = dmCreateDefaultSignZoneLayerSequence;
function dmGetZoneLayerIdsByType(zoneLayersById) {
    var zoneLayerIdsInSign = {
        videoLayer1Id: bsDmInterfaces_1.BsDmIdNone,
        videoLayer2Id: bsDmInterfaces_1.BsDmIdNone,
        graphicsLayerId: bsDmInterfaces_1.BsDmIdNone,
        audioLayerId: bsDmInterfaces_1.BsDmIdNone,
        invisibleLayerId: bsDmInterfaces_1.BsDmIdNone,
    };
    for (var zoneLayerId in zoneLayersById) {
        if (zoneLayersById.hasOwnProperty(zoneLayerId)) {
            var zoneLayer = zoneLayersById[zoneLayerId];
            switch (zoneLayer.type) {
                case bscore_1.ZoneLayerType.Video:
                    var videoZoneLayerProperties = zoneLayer.zoneLayerSpecificProperties;
                    if (videoZoneLayerProperties.index === 0) {
                        zoneLayerIdsInSign.videoLayer1Id = zoneLayer.id;
                    }
                    else {
                        zoneLayerIdsInSign.videoLayer2Id = zoneLayer.id;
                    }
                    break;
                case bscore_1.ZoneLayerType.Graphics:
                    zoneLayerIdsInSign.graphicsLayerId = zoneLayer.id;
                    break;
                case bscore_1.ZoneLayerType.Audio:
                    zoneLayerIdsInSign.audioLayerId = zoneLayer.id;
                    break;
                case bscore_1.ZoneLayerType.Invisible:
                    zoneLayerIdsInSign.invisibleLayerId = zoneLayer.id;
                    break;
            }
        }
    }
    return zoneLayerIdsInSign;
}
exports.dmGetZoneLayerIdsByType = dmGetZoneLayerIdsByType;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteHtmlSite = exports.dmUpdateHtmlSiteWithoutAssetProcessing = exports.dmUpdateHtmlSite = exports.dmAddRemoteHtmlSite = exports.dmAddHostedHtmlSiteWithoutAssetProcessing = exports.dmAddHostedHtmlSite = exports.DELETE_HTML_SITE = exports.UPDATE_HTML_SITE = exports.ADD_HTML_SITE = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var lodash_1 = __webpack_require__(0);
exports.ADD_HTML_SITE = 'DM_ADD_HTML_SITE';
exports.UPDATE_HTML_SITE = 'DM_UPDATE_HTML_SITE';
exports.DELETE_HTML_SITE = 'DM_DELETE_HTML_SITE';
function dmAddHostedHtmlSite(name, indexAssetItem, queryString, enableNode) {
    return function (dispatch, getState) {
        if (!indexAssetItem) {
            indexAssetItem = bscore_1.bscGetNullAssetItem(bscore_1.AssetType.HtmlSite);
        }
        var mainAction = {
            type: exports.ADD_HTML_SITE,
            payload: {
                id: utils_1.newBsDmId(),
                type: bscore_1.HtmlSiteType.Hosted,
                name: name,
                queryString: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(queryString),
                enableNode: !lodash_1.isNil(enableNode) ? enableNode : false,
            },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, indexAssetItem, mainAction);
        var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
        batchedActions.push(assetAction);
        mainAction.payload.indexAssetId = assetItem.id;
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddHostedHtmlSite = dmAddHostedHtmlSite;
function dmAddHostedHtmlSiteWithoutAssetProcessing(name, indexAssetId, queryString, enableNode) {
    return {
        type: exports.ADD_HTML_SITE,
        payload: {
            id: utils_1.newBsDmId(),
            type: bscore_1.HtmlSiteType.Hosted,
            name: name,
            indexAssetId: indexAssetId,
            queryString: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(queryString),
            enableNode: !lodash_1.isNil(enableNode) ? enableNode : false,
        },
    };
}
exports.dmAddHostedHtmlSiteWithoutAssetProcessing = dmAddHostedHtmlSiteWithoutAssetProcessing;
function dmAddRemoteHtmlSite(name, url, queryString) {
    return {
        type: exports.ADD_HTML_SITE,
        payload: {
            id: utils_1.newBsDmId(),
            type: bscore_1.HtmlSiteType.Remote,
            name: name,
            url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(url),
            queryString: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(queryString),
        },
    };
}
exports.dmAddRemoteHtmlSite = dmAddRemoteHtmlSite;
function dmUpdateHtmlSite(params) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_HTML_SITE,
            payload: lodash_1.pick(params, ['id', 'type', 'name']),
        };
        var batchedActions = [];
        if (params.hasOwnProperty('queryString')) {
            mainAction.payload.queryString = bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.queryString);
        }
        var siteType = params.type ? params.type : null;
        if (!siteType) {
            if (params.hasOwnProperty('indexAssetItem')) {
                siteType = bscore_1.HtmlSiteType.Hosted;
            }
            else if (params.hasOwnProperty('url')) {
                siteType = bscore_1.HtmlSiteType.Remote;
            }
        }
        if (siteType === bscore_1.HtmlSiteType.Hosted && params.hasOwnProperty('indexAssetItem')) {
            var assetItem = params.indexAssetItem;
            if (assetItem === null) {
                assetItem = bscore_1.bscGetNullAssetItem(bscore_1.AssetType.HtmlSite);
            }
            if (assetItem) {
                var dmState = bsDmState_1.dmFilterDmState(getState());
                var currentHtmlSite = dmState.htmlSites[params.id];
                if (currentHtmlSite.type === bscore_1.HtmlSiteType.Hosted && currentHtmlSite.indexAssetId) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(currentHtmlSite.indexAssetId));
                }
                assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
                var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
                batchedActions.push(assetAction);
                mainAction.payload.indexAssetId = assetItem.id;
            }
        }
        else if (siteType === bscore_1.HtmlSiteType.Remote && params.hasOwnProperty('url')) {
            var dmState = bsDmState_1.dmFilterDmState(getState());
            var currentHtmlSite = dmState.htmlSites[params.id];
            if (currentHtmlSite.type === bscore_1.HtmlSiteType.Hosted && currentHtmlSite.indexAssetId) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(currentHtmlSite.indexAssetId));
            }
            mainAction.payload.url =
                bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.url);
        }
        if (siteType === bscore_1.HtmlSiteType.Hosted && params.hasOwnProperty('enableNode')) {
            mainAction.payload.enableNode = params.enableNode;
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateHtmlSite = dmUpdateHtmlSite;
function dmUpdateHtmlSiteWithoutAssetProcessing(params) {
    var localParams = params;
    if (params.hasOwnProperty('queryString')) {
        localParams = Object.assign({}, params, { queryString: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.queryString) });
    }
    if (params.hasOwnProperty('url')) {
        localParams =
            Object.assign({}, localParams, { url: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.url) });
    }
    if (params.hasOwnProperty('enableNode')) {
        localParams =
            Object.assign({}, localParams, { enableNode: params.enableNode });
    }
    return {
        type: exports.UPDATE_HTML_SITE,
        payload: localParams,
    };
}
exports.dmUpdateHtmlSiteWithoutAssetProcessing = dmUpdateHtmlSiteWithoutAssetProcessing;
function dmDeleteHtmlSite(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.DELETE_HTML_SITE,
            payload: { id: id },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var batchedActions = [];
        var htmlSite = dmState.htmlSites[id];
        if (htmlSite && htmlSite.type === bscore_1.HtmlSiteType.Hosted) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(htmlSite.indexAssetId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmDeleteHtmlSite = dmDeleteHtmlSite;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDuplicateCommand = exports.dmPasteCommandCopySet = exports.dmDeleteCommand = exports.dmMoveCommandsAtIndices = exports.dmUpdateCommandAction = exports.dmUpdateCommand = exports.dmGetAddCommandAction = exports.dmAddCommand = exports.PASTE_COMMANDS = exports.DELETE_COMMAND = exports.MOVE_COMMAND = exports.UPDATE_COMMAND = exports.ADD_COMMAND = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmCommands_1 = __webpack_require__(22);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
var selectors_1 = __webpack_require__(6);
exports.ADD_COMMAND = 'DM_ADD_COMMAND';
exports.UPDATE_COMMAND = 'DM_UPDATE_COMMAND';
exports.MOVE_COMMAND = 'DM_MOVE_COMMAND';
exports.DELETE_COMMAND = 'DM_DELETE_COMMAND';
exports.PASTE_COMMANDS = 'DM_PASTE_COMMANDS';
function dmAddCommand(sequenceType, parentId, command) {
    return function (dispatch, getState) {
        var mainAction = dmGetAddCommandAction(sequenceType, parentId, command);
        if (!command.operations || !Array.isArray(command.operations) || command.operations.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddCommand: invalid command: no operations array', { action: mainAction });
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var isTimeCodeEvent = false;
        var isTimedCommand = bsDmCommands_1.dmIsTimedCommand(command);
        if (sequenceType === bscore_1.CommandSequenceType.Event) {
            isTimeCodeEvent = bsDmEvents_1.dmIsTimeCodeEvent(selectors_1.dmGetEventTypeById(dmState, { id: parentId }));
        }
        if (isTimeCodeEvent && !isTimedCommand) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddCommand: commands added to TimeCode events must be timed commands', { action: mainAction });
        }
        else if (!isTimeCodeEvent && isTimedCommand) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'AddCommand: timed commands can only be added to TimeCode events', { action: mainAction });
        }
        var sequenceId = selectors_1.dmGetCommandSequenceIdForParentAndType(dmState, { id: parentId, type: sequenceType });
        mainAction.payload.command.sequenceId = sequenceId ? sequenceId : utils_1.newBsDmId();
        return dispatch(mainAction);
    };
}
exports.dmAddCommand = dmAddCommand;
function dmGetAddCommandAction(sequenceType, parentId, command) {
    return {
        type: exports.ADD_COMMAND,
        payload: {
            sequenceType: sequenceType,
            parentId: parentId,
            command: __assign(__assign({}, command), { id: utils_1.newBsDmId() }),
        },
    };
}
exports.dmGetAddCommandAction = dmGetAddCommandAction;
function dmUpdateCommand(params) {
    return function (dispatch, getState) {
        var mainAction = dmUpdateCommandAction(params);
        if (!lodash_1.isNil(params.startTime)) {
            var dmState = bsDmState_1.dmFilterDmState(getState());
            var existingCommand = selectors_1.dmGetCommandStateById(dmState, { id: params.id });
            if (!bsDmCommands_1.dmIsTimedCommand(existingCommand)) {
                mainAction.payload = lodash_1.omit(mainAction.payload, 'startTime');
            }
        }
        return dispatch(mainAction);
    };
}
exports.dmUpdateCommand = dmUpdateCommand;
function dmUpdateCommandAction(params) {
    return {
        type: exports.UPDATE_COMMAND,
        payload: params,
    };
}
exports.dmUpdateCommandAction = dmUpdateCommandAction;
function dmMoveCommandsAtIndices(sequenceType, parentId, indices, targetIndex) {
    return function (dispatch, getState) {
        if (typeof indices === 'number') {
            indices = [indices];
        }
        var mainAction = {
            type: exports.MOVE_COMMAND,
            payload: { sequenceId: bsDmInterfaces_1.BsDmIdNone, indices: indices, targetIndex: targetIndex },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var commandSequenceId = selectors_1.dmGetCommandSequenceIdForParentAndType(dmState, { id: parentId, type: sequenceType });
        if (lodash_1.isNil(commandSequenceId)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MoveCommandsAtIndices - command sequence not found for given parent state and sequence type', { action: mainAction });
        }
        var commandSequenceObject = selectors_1.dmGetCommandSequenceStateById(dmState, { id: commandSequenceId });
        mainAction.payload.sequenceId = commandSequenceId;
        var commandSequenceCount = commandSequenceObject.sequence.length;
        if (targetIndex < 0 || targetIndex >= commandSequenceCount) {
            mainAction.payload.targetIndex = commandSequenceCount - 1;
        }
        mainAction.payload.indices = indices.filter(function (index) { return index >= 0 && index < commandSequenceCount; });
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmMoveCommandsAtIndices = dmMoveCommandsAtIndices;
function dmDeleteCommand(ids) {
    return {
        type: exports.DELETE_COMMAND,
        payload: {
            commandIds: Array.isArray(ids) ? ids : [ids],
        },
    };
}
exports.dmDeleteCommand = dmDeleteCommand;
function dmPasteCommandCopySet(copySet, targetParentId, targetCommandSequenceType, insertionIndex) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        return dispatch(dmGetPasteCommandCopySetAction(dmState, copySet, targetParentId, targetCommandSequenceType, insertionIndex));
    };
}
exports.dmPasteCommandCopySet = dmPasteCommandCopySet;
function dmDuplicateCommand(commandId) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var command = selectors_1.dmGetCommandStateById(dmState, { id: commandId });
        if (lodash_1.isNil(command)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'DuplicateCommand - invalid command ID', { functionName: 'dmDuplicateCommand' });
        }
        else {
            var sequenceId = command.sequenceId;
            var sequenceObject = selectors_1.dmGetCommandSequenceStateById(dmState, { id: sequenceId });
            var insertionIndex = sequenceObject.sequence.indexOf(commandId);
            if (insertionIndex >= 0) {
                insertionIndex += 1;
            }
            var copySet = selectors_1.dmGetCommandCopySet(dmState, { ids: [commandId] });
            return dispatch(dmGetPasteCommandCopySetAction(dmState, copySet, sequenceObject.parentId, sequenceObject.type, insertionIndex));
        }
    };
}
exports.dmDuplicateCommand = dmDuplicateCommand;
function dmGetPasteCommandCopySetAction(dmState, copySet, targetParentId, targetCommandSequenceType, insertionIndex) {
    if (lodash_1.isNil(targetCommandSequenceType)) {
        var copySetSequenceId = Object.keys(copySet.commands.sequencesById)[0];
        targetCommandSequenceType = copySet.commands.sequencesById[copySetSequenceId].type;
    }
    var existingSequence = selectors_1.dmGetCommandSequenceStateForParentAndType(dmState, { id: targetParentId, type: targetCommandSequenceType });
    var existingSequenceId = lodash_1.isNil(existingSequence) ? null : existingSequence.id;
    var copySetUpdateResult = bsDmCopyPaste_1.dmUpdateCommandCopySetWithUniqueIds(copySet, targetParentId, targetCommandSequenceType, existingSequenceId);
    var updatedCopySet = copySetUpdateResult.copySet;
    if (!lodash_1.isNil(existingSequence)) {
        var sequenceId = copySetUpdateResult.sequenceId;
        if (lodash_1.isNil(insertionIndex) || insertionIndex < 0 || insertionIndex >= existingSequence.sequence.length) {
            updatedCopySet.commands.sequencesById[sequenceId].sequence =
                existingSequence.sequence.concat(updatedCopySet.commands.sequencesById[sequenceId].sequence);
        }
        else {
            updatedCopySet.commands.sequencesById[sequenceId].sequence = __spreadArrays(existingSequence.sequence.slice(0, insertionIndex), updatedCopySet.commands.sequencesById[sequenceId].sequence, existingSequence.sequence.slice(insertionIndex));
        }
    }
    return {
        type: exports.PASTE_COMMANDS,
        payload: {
            copySet: updatedCopySet,
            commandIdMap: copySetUpdateResult.commandIdMap,
            sequenceId: copySetUpdateResult.sequenceId,
        },
    };
}


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetMergeUserVariableAction = exports.dmMergeUserVariableCopySet = exports.dmGetResolveUserVariablePlaceholderNameActionList = exports.dmResolveUserVariablePlaceholderNames = exports.dmDeleteUserVariable = exports.dmDeleteUserVariablesWithParams = exports.dmGetUserVariableDeleteParams = exports.dmReSequenceUserVariables = exports.dmMoveUserVariablesAtIndices = exports.dmUpdateUserVariable = exports.dmGetUserVariableAddAction = exports.dmAddUserVariable = exports.RESOLVE_USER_VARIABLE_PLACEHOLDER_NAMES = exports.DELETE_USER_VARIABLE = exports.MERGE_USER_VARIABLES = exports.RESEQUENCE_USER_VARIABLES = exports.MOVE_USER_VARIABLES = exports.UPDATE_USER_VARIABLE = exports.ADD_USER_VARIABLE = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmParameterizedNumbers_1 = __webpack_require__(38);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmLiveText_1 = __webpack_require__(28);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var actionBase_1 = __webpack_require__(8);
var actionMediaState_1 = __webpack_require__(11);
var actionTransition_1 = __webpack_require__(25);
var actionCommand_1 = __webpack_require__(33);
var actionLiveText_1 = __webpack_require__(29);
var actionDataFeed_1 = __webpack_require__(21);
var actionHtmlSite_1 = __webpack_require__(32);
var lodash_1 = __webpack_require__(0);
exports.ADD_USER_VARIABLE = 'DM_ADD_USER_VARIABLE';
exports.UPDATE_USER_VARIABLE = 'DM_UPDATE_USER_VARIABLE';
exports.MOVE_USER_VARIABLES = 'DM_MOVE_USER_VARIABLES';
exports.RESEQUENCE_USER_VARIABLES = 'DM_RESEQUENCE_USER_VARIABLES';
exports.MERGE_USER_VARIABLES = 'DM_MERGE_USER_VARIABLES';
exports.DELETE_USER_VARIABLE = 'DM_DELETE_USER_VARIABLE';
exports.RESOLVE_USER_VARIABLE_PLACEHOLDER_NAMES = 'DM_RESOLVE_USER_VARIABLE_PLACEHOLDER_NAMES';
function dmAddUserVariable(name, defaultValue, access, isNetworked, dataFeedSpec, systemVariable) {
    if (access === void 0) { access = bscore_1.AccessType.Private; }
    if (isNetworked === void 0) { isNetworked = false; }
    if (dataFeedSpec === void 0) { dataFeedSpec = null; }
    if (systemVariable === void 0) { systemVariable = null; }
    return function (dispatch, getState) {
        var mainAction = dmGetUserVariableAddAction(utils_1.newBsDmId(), name, bsDmParameterizedStrings_1.dmResolveDmParameterizedString(defaultValue), access, isNetworked, bsDmInterfaces_1.BsDmIdNone, systemVariable);
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (isNetworked) {
            if (!lodash_1.isNil(dataFeedSpec)) {
                var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, dataFeedSpec);
                batchedActions.push.apply(batchedActions, actionListParams.actions);
                mainAction.payload.dataFeedId = actionListParams.mainAction.payload.id;
            }
            else {
                mainAction.payload.isNetworked = false;
            }
        }
        batchedActions.push(mainAction);
        var placeholderResolutionActions = dmGetResolveUserVariablePlaceholderNameActionList(dmState, { id: mainAction.payload.id, name: name });
        if (placeholderResolutionActions.length > 0) {
            batchedActions.push.apply(batchedActions, placeholderResolutionActions);
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddUserVariable = dmAddUserVariable;
function dmGetUserVariableAddAction(id, name, defaultValue, access, isNetworked, dataFeedId, systemVariable) {
    if (defaultValue === void 0) { defaultValue = bsDmParameterizedStrings_1.dmGetEmptyParameterizedString(); }
    if (access === void 0) { access = bscore_1.AccessType.Private; }
    if (isNetworked === void 0) { isNetworked = false; }
    if (dataFeedId === void 0) { dataFeedId = bsDmInterfaces_1.BsDmIdNone; }
    if (systemVariable === void 0) { systemVariable = null; }
    return {
        type: exports.ADD_USER_VARIABLE,
        payload: {
            id: id,
            name: name,
            defaultValue: defaultValue,
            access: access,
            isNetworked: isNetworked,
            dataFeedId: bsDmInterfaces_1.BsDmIdNone,
            systemVariable: systemVariable,
        },
    };
}
exports.dmGetUserVariableAddAction = dmGetUserVariableAddAction;
function dmUpdateUserVariable(params) {
    return function (dispatch, getState) {
        var payload = lodash_1.pick(params, ['id', 'name', 'access', 'isNetworked', 'systemVariable']);
        if (!lodash_1.isNil(params.defaultValue)) {
            payload.defaultValue = bsDmParameterizedStrings_1.dmResolveDmParameterizedString(params.defaultValue);
        }
        var mainAction = {
            type: exports.UPDATE_USER_VARIABLE,
            payload: payload,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingUserVar = dmState.userVariables.variablesById[params.id];
        if (!lodash_1.isNil(existingUserVar)) {
            if (params.isNetworked) {
                if (!lodash_1.isNil(params.dataFeedSpec)) {
                    var actionListParams = void 0;
                    if (utils_1.isValidBsDmId(existingUserVar.dataFeedId)) {
                        actionListParams = actionDataFeed_1.dmGetUpdateDataFeedActionList(dmState, { id: existingUserVar.dataFeedId, feedSpec: params.dataFeedSpec });
                    }
                    else {
                        actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, params.dataFeedSpec);
                        mainAction.payload.dataFeedId = actionListParams.mainAction.payload.id;
                    }
                    batchedActions.push.apply(batchedActions, actionListParams.actions);
                }
                else if (!existingUserVar.isNetworked) {
                    mainAction.payload.isNetworked = false;
                }
            }
            if (!lodash_1.isNil(mainAction.payload.isNetworked)
                && !mainAction.payload.isNetworked
                && utils_1.isValidBsDmId(existingUserVar.dataFeedId)) {
                batchedActions.push(actionDataFeed_1.dmDeleteDataFeedWithParams(actionDataFeed_1.dmGetDataFeedDeleteParams(dmState, existingUserVar.dataFeedId)));
                mainAction.payload.dataFeedId = bsDmInterfaces_1.BsDmIdNone;
            }
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateUserVariable - invalid ID');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateUserVariable = dmUpdateUserVariable;
function dmUpdateUserVariableDefaultValue(id, defaultValue) {
    return {
        type: exports.UPDATE_USER_VARIABLE,
        payload: { id: id, defaultValue: defaultValue },
    };
}
function dmMoveUserVariablesAtIndices(indices, targetIndex) {
    return {
        type: exports.MOVE_USER_VARIABLES,
        payload: {
            indices: Array.isArray(indices) ? indices : [indices],
            targetIndex: targetIndex,
        },
    };
}
exports.dmMoveUserVariablesAtIndices = dmMoveUserVariablesAtIndices;
function dmReSequenceUserVariables(indices) {
    return function (dispatch, getState) {
        var uvSequence = selectors_1.dmGetUserVariableIdsForSign(bsDmState_1.dmFilterDmState(getState()));
        indices = lodash_1.uniq(indices)
            .filter(function (index) { return index >= 0 && index < uvSequence.length; });
        if (indices.length !== uvSequence.length) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'ReSequenceUserVariables - invalid index array');
        }
        return dispatch({
            type: exports.RESEQUENCE_USER_VARIABLES,
            payload: { indices: indices },
        });
    };
}
exports.dmReSequenceUserVariables = dmReSequenceUserVariables;
function dmGetUserVariableDeleteParams(state, id) {
    var userVariableIds = (Array.isArray(id) ? id : [id]).filter(utils_1.isValidBsDmId);
    var deleteParams = {
        userVariableIds: userVariableIds,
        dataFeedIds: userVariableIds.reduce(function (acc, uvId) {
            var userVar = state.userVariables.variablesById[uvId];
            if (!lodash_1.isNil(userVar) && utils_1.isValidBsDmId(userVar.dataFeedId)) {
                acc.push(userVar.dataFeedId);
            }
            return acc;
        }, []),
        dataFeedSourceIds: [],
        commandIds: [],
        assetIds: [],
    };
    if (deleteParams.dataFeedIds.length) {
        var dataFeedDeleteParams = actionDataFeed_1.dmGetDataFeedDeleteParams(state, deleteParams.dataFeedIds);
        deleteParams.dataFeedSourceIds = dataFeedDeleteParams.dataFeedSourceIds;
        deleteParams.commandIds = dataFeedDeleteParams.commandIds;
        deleteParams.assetIds = dataFeedDeleteParams.assetIds;
    }
    return deleteParams;
}
exports.dmGetUserVariableDeleteParams = dmGetUserVariableDeleteParams;
function dmDeleteUserVariablesWithParams(params) {
    return {
        type: exports.DELETE_USER_VARIABLE,
        payload: params,
    };
}
exports.dmDeleteUserVariablesWithParams = dmDeleteUserVariablesWithParams;
function dmDeleteUserVariable(id) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var deleteParams = dmGetUserVariableDeleteParams(dmState, id);
        var mainAction = dmDeleteUserVariablesWithParams(deleteParams);
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmDeleteUserVariable = dmDeleteUserVariable;
function dmResolveUserVariablePlaceholderNames() {
    return function (dispatch, getState) {
        var actionList = dmGetResolveUserVariablePlaceholderNameActionList(bsDmState_1.dmFilterDmState(getState()));
        if (actionList.length > 0) {
            dispatch(actionBase_1.dmBatchActions(actionList));
        }
        return {
            type: exports.RESOLVE_USER_VARIABLE_PLACEHOLDER_NAMES,
            payload: null,
            meta: { dispatchList: actionList },
        };
    };
}
exports.dmResolveUserVariablePlaceholderNames = dmResolveUserVariablePlaceholderNames;
function dmGetResolveUserVariablePlaceholderNameActionList(dmState, newUserVariableBase) {
    var resolveUserVariableName = function (name) {
        var uvId = selectors_1.dmGetUserVariableIdForName(dmState, { name: name });
        if (lodash_1.isNil(uvId) && !lodash_1.isNil(newUserVariableBase) && name === newUserVariableBase.name) {
            uvId = newUserVariableBase.id;
        }
        return uvId;
    };
    var batchedActions = [];
    var dmPs;
    var dmPn;
    var htmlSiteIds = selectors_1.dmGetHtmlSiteIdsForSign(dmState);
    htmlSiteIds.forEach(function (htmlSiteId) {
        var htmlSiteState = dmState.htmlSites[htmlSiteId];
        var updateParams = { id: htmlSiteId };
        if (htmlSiteState.type === bscore_1.HtmlSiteType.Remote) {
            dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: htmlSiteState.url, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, htmlSiteState.url)) {
                updateParams.url = dmPs;
            }
        }
        dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: htmlSiteState.queryString, newUserVariableBase: newUserVariableBase });
        if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, htmlSiteState.queryString)) {
            updateParams.queryString = dmPs;
        }
        if (Object.keys(updateParams).length > 1) {
            batchedActions.push(actionHtmlSite_1.dmUpdateHtmlSiteWithoutAssetProcessing(updateParams));
        }
    });
    var dataFeedSourceIds = selectors_1.dmGetDataFeedSourceIdsForSign(dmState);
    dataFeedSourceIds.forEach(function (feedSourceId) {
        var feedSource = dmState.dataFeeds.sourcesById[feedSourceId];
        if (bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(feedSource)) {
            dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: feedSource.url, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, feedSource.url)) {
                batchedActions.push(actionDataFeed_1.dmUpdateDataFeedSource({ id: feedSourceId, url: dmPs }));
            }
        }
    });
    var mediaStateIds = selectors_1.dmGetMediaStateIdsForSign(dmState);
    mediaStateIds.forEach(function (mediaStateId) {
        var mediaState = dmState.mediaStates.mediaStatesById[mediaStateId];
        if (bsDmContentItems_1.dmContentItemIsStreamContentItem(mediaState.contentItem)) {
            dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: mediaState.contentItem.url, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, mediaState.contentItem.url)) {
                batchedActions.push(actionMediaState_1.dmUpdateMediaStateContentItem(mediaStateId, __assign(__assign({}, mediaState.contentItem), { url: dmPs })));
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(mediaState.contentItem)) {
            if (!utils_1.isValidGuidBsDmId(mediaState.contentItem.userVariableIdOrName)) {
                var uvId = resolveUserVariableName(mediaState.contentItem.userVariableIdOrName);
                if (!lodash_1.isNil(uvId)) {
                    batchedActions.push(actionMediaState_1.dmUpdateMediaStateContentItem(mediaStateId, __assign(__assign({}, mediaState.contentItem), { userVariableIdOrName: uvId })));
                }
            }
        }
    });
    var commandIds = selectors_1.dmGetCommandIdsForSign(dmState);
    commandIds.forEach(function (commandId) {
        var command = dmState.commands.commandsById[commandId];
        var updateParams = { id: commandId, operations: lodash_1.cloneDeep(command.operations) };
        var updateCommand = false;
        updateParams.operations.forEach(function (commandOperation) {
            if (!lodash_1.isNil(commandOperation.data)) {
                var operationData_1 = commandOperation.data;
                bsDmInterfaces_1.DmParameterizedStringCommandPropertyNames.forEach(function (propName) {
                    if (operationData_1.hasOwnProperty(propName)) {
                        dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: operationData_1[propName], newUserVariableBase: newUserVariableBase });
                        if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, operationData_1[propName])) {
                            operationData_1[propName] = dmPs;
                            updateCommand = true;
                        }
                    }
                });
                bsDmInterfaces_1.DmParameterizedNumberCommandPropertyNames.forEach(function (propName) {
                    if (operationData_1.hasOwnProperty(propName)) {
                        dmPn = selectors_1.dmResolveParameterizedNumberUserVariables(dmState, { paramNumber: operationData_1[propName], newUserVariableBase: newUserVariableBase });
                        if (!bsDmParameterizedNumbers_1.dmIsEqualParameterizedNumber(dmPn, operationData_1[propName])) {
                            operationData_1[propName] = dmPn;
                            updateCommand = true;
                        }
                    }
                });
            }
        });
        if (updateCommand) {
            batchedActions.push(actionCommand_1.dmUpdateCommandAction(updateParams));
        }
    });
    var transitionIds = selectors_1.dmGetTransitionIdsForSign(dmState);
    transitionIds.forEach(function (transitionId) {
        var transition = selectors_1.dmGetTransitionStateById(dmState, { id: transitionId });
        if (!lodash_1.isNil(transition.condition)) {
            var updateCondition = false;
            var userVariableId = transition.condition.userVariableId;
            var compareValue1 = transition.condition.compareValue1;
            var compareValue2 = transition.condition.compareValue2;
            if (!utils_1.isValidGuidBsDmId(userVariableId)
                && lodash_1.isString(transition.condition.userVariableName)) {
                var uvId = resolveUserVariableName(transition.condition.userVariableName);
                if (!lodash_1.isNil(uvId)) {
                    userVariableId = uvId;
                    updateCondition = true;
                }
            }
            dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: compareValue1, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, compareValue1)) {
                compareValue1 = dmPs;
                updateCondition = true;
            }
            if (!lodash_1.isNil(compareValue2)) {
                dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: compareValue2, newUserVariableBase: newUserVariableBase });
                if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, compareValue2)) {
                    compareValue2 = dmPs;
                    updateCondition = true;
                }
            }
            if (updateCondition) {
                var condition = {
                    userVariableId: userVariableId,
                    compareOperator: transition.condition.compareOperator,
                    compareValue1: compareValue1,
                };
                if (!lodash_1.isNil(compareValue2)) {
                    condition.compareValue2 = compareValue2;
                }
                batchedActions.push(actionTransition_1.dmUpdateTransitionConditionProperty(transitionId, condition));
            }
        }
    });
    var liveTextItemIds = selectors_1.dmGetAllLiveTextItemIdsForSign(dmState);
    liveTextItemIds.forEach(function (liveTextItemId) {
        var liveTextItem = selectors_1.dmGetLiveTextItemStateById(dmState, { id: liveTextItemId });
        var itemData = bsDmLiveText_1.dmGetLiveTextItemData(liveTextItem);
        var updatedData = null;
        if (bsDmLiveText_1.dmIsLiveTextDataUserVariable(itemData)) {
            if (!utils_1.isValidGuidBsDmId(itemData.userVariableIdOrName) && lodash_1.isString(itemData.userVariableIdOrName)) {
                var uvId = resolveUserVariableName(itemData.userVariableIdOrName);
                if (!lodash_1.isNil(uvId)) {
                    updatedData = __assign(__assign({}, itemData), { userVariableIdOrName: uvId });
                }
            }
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataTitledDataFeed(itemData)) {
            dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: itemData.title, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, itemData.title)) {
                updatedData = __assign(__assign({}, itemData), { title: dmPs });
            }
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataIndexedDataFeed(itemData)) {
            dmPn = selectors_1.dmResolveParameterizedNumberUserVariables(dmState, { paramNumber: itemData.index, newUserVariableBase: newUserVariableBase });
            if (!bsDmParameterizedNumbers_1.dmIsEqualParameterizedNumber(dmPn, itemData.index)) {
                updatedData = __assign(__assign({}, itemData), { index: dmPn });
            }
        }
        if (!lodash_1.isNil(updatedData)) {
            batchedActions.push(actionLiveText_1.dmDoUpdateLiveTextItem({ id: liveTextItemId, canvasId: liveTextItem.canvasId, data: updatedData }));
        }
    });
    var userVariableIds = selectors_1.dmGetUserVariableIdsForSign(dmState);
    userVariableIds.forEach(function (userVariableId) {
        var userVar = selectors_1.dmGetUserVariableStateById(dmState, { id: userVariableId });
        dmPs = selectors_1.dmResolveParameterizedStringUserVariables(dmState, { paramString: userVar.defaultValue, newUserVariableBase: newUserVariableBase });
        if (!bsDmParameterizedStrings_1.dmIsEqualParameterizedString(dmPs, userVar.defaultValue)) {
            batchedActions.push(dmUpdateUserVariableDefaultValue(userVariableId, dmPs));
        }
    });
    return batchedActions;
}
exports.dmGetResolveUserVariablePlaceholderNameActionList = dmGetResolveUserVariablePlaceholderNameActionList;
function dmMergeUserVariableCopySet(copySet, duplicateMatchedUserVariables) {
    if (duplicateMatchedUserVariables === void 0) { duplicateMatchedUserVariables = false; }
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var pasteToDifferentSign = selectors_1.dmGetSignId(dmState) !== copySet.containerId;
        var uvMergeParams = {
            userVariableMergeParams: selectors_1.dmGetMergedUserVariableCopySet(dmState, copySet.userVariables, duplicateMatchedUserVariables),
        };
        if (pasteToDifferentSign && Object.keys(copySet.dataFeeds.feedsById).length > 0) {
            uvMergeParams.dataFeedSourceMergeParams = selectors_1.dmGetMergedDataFeedSourceCopySet(dmState, copySet.dataFeeds.sourcesById, copySet.assetMap, copySet.userVariables);
            uvMergeParams.assetItemMergeParams = selectors_1.dmGetMergedAssetItemCopySet(dmState, copySet.assetMap);
        }
        var copySetUpdateResult = bsDmCopyPaste_1.dmUpdateUserVariableCopySetWithUniqueIds(copySet, uvMergeParams);
        var batchedActions = [];
        var mainAction = dmGetMergeUserVariableAction(copySetUpdateResult.copySet.userVariables);
        batchedActions.push(mainAction);
        if (Object.keys(copySetUpdateResult.copySet.dataFeeds.feedsById).length > 0) {
            batchedActions.push(actionDataFeed_1.dmGetPasteDataFeedAction(copySetUpdateResult.copySet));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmMergeUserVariableCopySet = dmMergeUserVariableCopySet;
function dmGetMergeUserVariableAction(userVariables) {
    return {
        type: exports.MERGE_USER_VARIABLES,
        payload: { userVariables: userVariables },
    };
}
exports.dmGetMergeUserVariableAction = dmGetMergeUserVariableAction;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetMergedDataFeedSourceCopySet = exports.dmGetDataFeedSourceCommandIdsForDataFeedSources = exports.dmCheckDataFeedValidity = exports.dmGetDataFeedSourceIdForFeedSpec = exports.dmGetDataFeedSourceForFeedSourceId = exports.dmGetDataFeedSourceForFeedId = exports.dmGetBsnDataFeedAssetLocator = exports.dmGetBsnDataFeedAssetItem = exports.dmGetDataFeedByName = exports.dmGetDataFeedNamesForSign = exports.dmGetDataFeedSourceIdsForSign = exports.dmGetDataFeedIdsForMediaState = exports.dmGetSystemDataFeedIdsForSign = exports.dmGetDataFeedIdsForSign = exports.dmGetDataFeedById = exports.dmGetDataFeedStateById = exports.dmGetDataFeedStateEntitiesByFeedId = exports.fnGetDataFeedStateEntitiesByFeedId = exports.clearDataFeedSelectorCaches = exports.dmCreateDmcDataFeed = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmCommands_1 = __webpack_require__(22);
var selectorAssetMap_1 = __webpack_require__(39);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorCommand_1 = __webpack_require__(26);
var selectorValidation_1 = __webpack_require__(17);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
function dmCreateDmcDataFeed(dataFeedState, assetMap, dataFeedId) {
    var dataFeedObjects = fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, dataFeedId);
    return lodash_1.isNil(dataFeedObjects) ? null : new bsDmClasses_1.DmcDataFeed(dataFeedObjects);
}
exports.dmCreateDmcDataFeed = dmCreateDmcDataFeed;
var selGetDataFeedStateEntitiesByFeedId = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.dataFeeds; }, function (dmState) { return dmState.assetMap; }, function (dataFeedId, dataFeedState, assetMap) {
    return fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, dataFeedId);
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 20 }),
});
var selGetDataFeedById = re_reselect_1.createCachedSelector(selGetDataFeedStateEntitiesByFeedId, function (dataFeedObjects) {
    return lodash_1.isNil(dataFeedObjects) ? null : new bsDmClasses_1.DmcDataFeed(dataFeedObjects);
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 20 }),
});
var selGetDataFeedNamesForSign = reselect_1.createSelector(function (dmState) { return dmState.dataFeeds.feedsById; }, function (dataFeeds) { return Object.keys(dataFeeds).map(function (id) { return dataFeeds[id].name; }); });
function clearDataFeedSelectorCaches() {
    selGetDataFeedStateEntitiesByFeedId.clearCache();
    selGetDataFeedById.clearCache();
}
exports.clearDataFeedSelectorCaches = clearDataFeedSelectorCaches;
function fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, dataFeedId) {
    var dataFeed = dataFeedState.feedsById[dataFeedId];
    if (!lodash_1.isNil(dataFeed)) {
        var feedSource = dataFeedState.sourcesById[dataFeed.feedSourceId];
        var assetItem = void 0;
        if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(feedSource)) {
            assetItem = assetMap[feedSource.dataFeedAssetId];
        }
        return { dataFeed: dataFeed, feedSource: feedSource, assetItem: assetItem };
    }
    return null;
}
exports.fnGetDataFeedStateEntitiesByFeedId = fnGetDataFeedStateEntitiesByFeedId;
function dmGetDataFeedStateEntitiesByFeedId(state, props) {
    return selGetDataFeedStateEntitiesByFeedId(state, props);
}
exports.dmGetDataFeedStateEntitiesByFeedId = dmGetDataFeedStateEntitiesByFeedId;
function dmGetDataFeedStateById(state, props) {
    var dataFeedState = state.dataFeeds.feedsById[props.id];
    return lodash_1.isNil(dataFeedState) ? null : dataFeedState;
}
exports.dmGetDataFeedStateById = dmGetDataFeedStateById;
function dmGetDataFeedById(state, props) {
    return selGetDataFeedById(state, props);
}
exports.dmGetDataFeedById = dmGetDataFeedById;
function dmGetDataFeedIdsForSign(state) {
    return Object.keys(state.dataFeeds.feedsById);
}
exports.dmGetDataFeedIdsForSign = dmGetDataFeedIdsForSign;
function dmGetSystemDataFeedIdsForSign(state) {
    return Object.keys(state.dataFeeds.feedsById)
        .filter(function (id) {
        var dataFeedState = state.dataFeeds.feedsById[id];
        return !lodash_1.isNil(dataFeedState) && !lodash_1.isNil(dataFeedState.isSystemFeed) && dataFeedState.isSystemFeed;
    });
}
exports.dmGetSystemDataFeedIdsForSign = dmGetSystemDataFeedIdsForSign;
function dmGetDataFeedIdsForMediaState(state, props) {
    var mediaState = state.mediaStates.mediaStatesById[props.id];
    var dataFeedIds = [];
    if (!lodash_1.isNil(mediaState)) {
        if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(mediaState.contentItem)) {
            dataFeedIds.push(mediaState.contentItem.dataFeedId);
        }
        else if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaState.contentItem)) {
            if (utils_1.isValidBsDmId(mediaState.contentItem.dataFeedId)) {
                dataFeedIds.push(mediaState.contentItem.dataFeedId);
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(mediaState.contentItem)) {
            if (utils_1.isValidBsDmId(mediaState.contentItem.defaultDataFeedId)) {
                dataFeedIds.push(mediaState.contentItem.defaultDataFeedId);
            }
        }
    }
    return dataFeedIds;
}
exports.dmGetDataFeedIdsForMediaState = dmGetDataFeedIdsForMediaState;
function dmGetDataFeedSourceIdsForSign(state) {
    return Object.keys(state.dataFeeds.sourcesById);
}
exports.dmGetDataFeedSourceIdsForSign = dmGetDataFeedSourceIdsForSign;
function dmGetDataFeedNamesForSign(state) {
    return selGetDataFeedNamesForSign(state);
}
exports.dmGetDataFeedNamesForSign = dmGetDataFeedNamesForSign;
function dmGetDataFeedByName(state, props) {
    var dataFeeds = state.dataFeeds.feedsById;
    var dataFeedId = lodash_1.find(Object.keys(dataFeeds), function (id) { return dataFeeds[id].name === props.name; });
    return lodash_1.isNil(dataFeedId) ? null : dmGetDataFeedById(state, { id: dataFeedId });
}
exports.dmGetDataFeedByName = dmGetDataFeedByName;
function dmGetBsnDataFeedAssetItem(state, props) {
    var dataFeedSource = dmGetDataFeedSourceForFeedId(state, props);
    if (!lodash_1.isNil(dataFeedSource) && bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(dataFeedSource)) {
        return selectorAssetMap_1.dmGetAssetItemById(state, { id: dataFeedSource.dataFeedAssetId });
    }
    return null;
}
exports.dmGetBsnDataFeedAssetItem = dmGetBsnDataFeedAssetItem;
function dmGetBsnDataFeedAssetLocator(state, props) {
    var assetItem = dmGetBsnDataFeedAssetItem(state, props);
    return lodash_1.isNil(assetItem) ? null : bscore_1.bscAssetLocatorFromAssetItem(assetItem);
}
exports.dmGetBsnDataFeedAssetLocator = dmGetBsnDataFeedAssetLocator;
function dmGetDataFeedSourceForFeedId(state, props) {
    var dataFeed = state.dataFeeds.feedsById[props.id];
    var dataFeedSource = lodash_1.isNil(dataFeed) ? null : state.dataFeeds.sourcesById[dataFeed.feedSourceId];
    return lodash_1.isNil(dataFeedSource) ? null : dataFeedSource;
}
exports.dmGetDataFeedSourceForFeedId = dmGetDataFeedSourceForFeedId;
function dmGetDataFeedSourceForFeedSourceId(state, props) {
    var dataFeedSource = state.dataFeeds.sourcesById[props.id];
    return lodash_1.isNil(dataFeedSource) ? null : dataFeedSource;
}
exports.dmGetDataFeedSourceForFeedSourceId = dmGetDataFeedSourceForFeedSourceId;
function dmGetDataFeedSourceIdForFeedSpec(state, feedSpec) {
    var dataFeedSources = state.dataFeeds.sourcesById;
    if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(feedSpec)) {
        var bsnSourceId = lodash_1.find(Object.keys(dataFeedSources), function (id) {
            if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(dataFeedSources[id])) {
                var assetItem = selectorAssetMap_1.dmGetAssetItemById(state, { id: dataFeedSources[id].dataFeedAssetId });
                return !lodash_1.isNil(assetItem) && feedSpec.assetItem.networkId === assetItem.networkId;
            }
            return false;
        });
        return lodash_1.isUndefined(bsnSourceId) ? null : bsnSourceId;
    }
    else if (bsDmDataFeed_1.dmIsRemoteDataFeedSourceSpecification(feedSpec)) {
        var urlString_1 = typeof feedSpec.url === 'string' ?
            feedSpec.url : selectorUserVariable_1.dmGetDisplayStringFromParameterizedString(state, { paramString: feedSpec.url });
        var remoteSourceId = lodash_1.find(Object.keys(dataFeedSources), function (id) {
            return bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(dataFeedSources[id])
                && urlString_1 === selectorUserVariable_1.dmGetDisplayStringFromParameterizedString(state, { paramString: dataFeedSources[id].url });
        });
        return lodash_1.isUndefined(remoteSourceId) ? null : remoteSourceId;
    }
    return null;
}
exports.dmGetDataFeedSourceIdForFeedSpec = dmGetDataFeedSourceIdForFeedSpec;
function dmCheckDataFeedValidity(state, props) {
    var errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.DataFeed, entityId: props.id };
    return selectorValidation_1.dmValidateEntityDataFeed(bsDmState_1.dmFilterDmState(state), props.id, errorDetails);
}
exports.dmCheckDataFeedValidity = dmCheckDataFeedValidity;
function dmGetDataFeedSourceCommandIdsForDataFeedSources(state, props) {
    return Object.keys(state.commands.commandsById).filter(function (id) {
        var command = selectorCommand_1.dmGetCommandStateById(state, { id: id });
        return command.operations.some(function (op) {
            return bsDmCommands_1.dmIsDataFeedSourceCommandData(op.data) && props.ids.indexOf(op.data.dataFeedSourceId) >= 0;
        });
    });
}
exports.dmGetDataFeedSourceCommandIdsForDataFeedSources = dmGetDataFeedSourceCommandIdsForDataFeedSources;
function dmGetMergedDataFeedSourceCopySet(state, copySetDataFeedSourceMap, copySetAssetMap, copySetUserVariableMap) {
    var initialDataFeedSourceMergeResult = {
        dataFeedSources: {},
        dataFeedSourceIds: new Map(),
    };
    return Object.keys(copySetDataFeedSourceMap).reduce(function (result, id) {
        var copySetFeedSource = copySetDataFeedSourceMap[id];
        var feedSpec;
        if (bsDmDataFeed_1.dmIsDataFeedSourceBsnDataFeed(copySetFeedSource)) {
            var assetItem = copySetAssetMap[copySetFeedSource.dataFeedAssetId];
            feedSpec = bsDmDataFeed_1.dmCreateBsnDataFeedSpecification(assetItem, bscore_1.DataFeedUsageType.Mrss);
        }
        else {
            var urlString = selectorUserVariable_1.dmConstructParameterizedDisplayString(copySetFeedSource.url, copySetUserVariableMap);
            feedSpec = bsDmDataFeed_1.dmCreateRemoteDataFeedSpecification(urlString, bscore_1.DataFeedUsageType.Mrss);
        }
        var feedSourceId = dmGetDataFeedSourceIdForFeedSpec(state, feedSpec);
        var feedSource = lodash_1.isNil(feedSourceId) ? __assign(__assign({}, copySetFeedSource), { id: utils_1.newBsDmId() }) :
            state.dataFeeds.sourcesById[feedSourceId];
        result.dataFeedSources[feedSource.id] = feedSource;
        result.dataFeedSourceIds.set(copySetFeedSource.id, feedSource.id);
        return result;
    }, initialDataFeedSourceMergeResult);
}
exports.dmGetMergedDataFeedSourceCopySet = dmGetMergedDataFeedSourceCopySet;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetMergedUserVariableCopySet = exports.dmGetUserVariableNameMap = exports.dmGetAllUserVariableCopySet = exports.dmGetUserVariableCopySet = exports.dmCheckUserVariableValidity = exports.dmIsParameterizedNumberUserVariableValid = exports.dmResolveParameterizedNumberUserVariables = exports.dmAreParameterizedStringUserVariablesValid = exports.dmResolveParameterizedStringUserVariables = exports.dmVisitUserVariableReferences = exports.dmGetActiveUserVariablesIdsForMediaStateCopySet = exports.dmGetActiveUserVariableIds = exports.dmGetParameterizedNumberFromDisplayString = exports.dmGetDisplayStringFromParameterizedNumber = exports.dmGetParameterizedStringFromDisplayString = exports.dmConstructParameterizedStringWithDefaultUserVariables = exports.dmGetParameterizedStringWithDefaultUserVariables = exports.dmConstructParameterizedNumberWithDefaultUserVariables = exports.dmGetParameterizedNumberWithDefaultUserVariables = exports.dmConstructParameterizedDisplayString = exports.dmGetDisplayStringFromParameterizedString = exports.dmGetUserVariableByName = exports.dmGetUserVariableIdForName = exports.dmGetUserVariableIdsForSign = exports.dmGetUserVariableStateById = exports.dmGetUserVariableById = exports.clearUserVariableSelectorCaches = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var bsDmError_1 = __webpack_require__(4);
var bsDmParameterizedNumbers_1 = __webpack_require__(38);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmLiveText_1 = __webpack_require__(28);
var selectorSign_1 = __webpack_require__(49);
var selectorValidation_1 = __webpack_require__(17);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
var selGetUserVariableById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.userVariables.variablesById; }, function (uvId, userVariableMap) {
    var userVariableState = userVariableMap[uvId];
    return lodash_1.isNil(userVariableState) ? null : new bsDmClasses_1.DmcUserVariable(userVariableState);
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 200 }),
});
function clearUserVariableSelectorCaches() {
    selGetUserVariableById.clearCache();
}
exports.clearUserVariableSelectorCaches = clearUserVariableSelectorCaches;
function dmGetUserVariableById(state, props) {
    return selGetUserVariableById(state, props);
}
exports.dmGetUserVariableById = dmGetUserVariableById;
function dmGetUserVariableStateById(state, props) {
    var userVariableState = state.userVariables.variablesById[props.id];
    return lodash_1.isNil(userVariableState) ? null : userVariableState;
}
exports.dmGetUserVariableStateById = dmGetUserVariableStateById;
function dmGetUserVariableIdsForSign(state) {
    return state.userVariables.sequence;
}
exports.dmGetUserVariableIdsForSign = dmGetUserVariableIdsForSign;
function dmGetUserVariableIdForName(state, props) {
    var userVariables = state.userVariables.variablesById;
    var uvId = lodash_1.find(Object.keys(userVariables), function (id) { return userVariables[id].name === props.name; });
    return lodash_1.isNil(uvId) ? null : uvId;
}
exports.dmGetUserVariableIdForName = dmGetUserVariableIdForName;
function dmGetUserVariableByName(state, props) {
    var userVariables = state.userVariables.variablesById;
    var uvId = lodash_1.find(Object.keys(userVariables), function (id) { return userVariables[id].name === props.name; });
    return lodash_1.isNil(uvId) ? null : new bsDmClasses_1.DmcUserVariable(userVariables[uvId]);
}
exports.dmGetUserVariableByName = dmGetUserVariableByName;
function dmGetDisplayStringFromParameterizedString(state, props) {
    return dmConstructParameterizedDisplayString(props.paramString, state.userVariables.variablesById);
}
exports.dmGetDisplayStringFromParameterizedString = dmGetDisplayStringFromParameterizedString;
function dmConstructParameterizedDisplayString(paramString, userVariableMap) {
    var returnString = '';
    if (typeof paramString === 'object' && paramString.params && paramString.params.length) {
        paramString.params.forEach(function (param) {
            if (param.type === bscore_1.StringParameterType.UserVariable) {
                var userVar = userVariableMap[param.value];
                var userVarName = userVar ? userVar.name : '<undefined>';
                returnString = returnString + bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + userVarName + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter();
            }
            else if (param.type === bscore_1.StringParameterType.UserVariableName) {
                returnString = returnString + bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + param.value + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter();
            }
            else {
                returnString = returnString + param.value;
            }
        });
    }
    return returnString;
}
exports.dmConstructParameterizedDisplayString = dmConstructParameterizedDisplayString;
function dmGetParameterizedNumberWithDefaultUserVariables(state, props) {
    return dmConstructParameterizedNumberWithDefaultUserVariables(props, state.userVariables.variablesById);
}
exports.dmGetParameterizedNumberWithDefaultUserVariables = dmGetParameterizedNumberWithDefaultUserVariables;
function dmConstructParameterizedNumberWithDefaultUserVariables(param, userVariableMap) {
    if (param.type === bscore_1.NumberParameterType.UserVariable) {
        var userVar = userVariableMap[param.value];
        if (!lodash_1.isNil(userVar)) {
            var dValue = Number(dmConstructParameterizedStringWithDefaultUserVariables(userVar.defaultValue, userVariableMap));
            if (!isNaN(dValue)) {
                return dValue;
            }
        }
    }
    else if (param.type === bscore_1.NumberParameterType.Number) {
        return param.value;
    }
    return -1;
}
exports.dmConstructParameterizedNumberWithDefaultUserVariables = dmConstructParameterizedNumberWithDefaultUserVariables;
function dmGetParameterizedStringWithDefaultUserVariables(state, props) {
    return dmConstructParameterizedStringWithDefaultUserVariables(props.paramString, state.userVariables.variablesById);
}
exports.dmGetParameterizedStringWithDefaultUserVariables = dmGetParameterizedStringWithDefaultUserVariables;
function dmConstructParameterizedStringWithDefaultUserVariables(paramString, userVariableMap) {
    var returnString = '';
    if (typeof paramString === 'object' && paramString.params && paramString.params.length) {
        paramString.params.forEach(function (param) {
            if (param.type === bscore_1.StringParameterType.UserVariable) {
                var userVar = userVariableMap[param.value];
                if (!lodash_1.isNil(userVar)) {
                    returnString += dmConstructParameterizedStringWithDefaultUserVariables(userVar.defaultValue, userVariableMap);
                }
            }
            else if (param.type !== bscore_1.StringParameterType.UserVariableName) {
                returnString = returnString + param.value;
            }
        });
    }
    return returnString;
}
exports.dmConstructParameterizedStringWithDefaultUserVariables = dmConstructParameterizedStringWithDefaultUserVariables;
function dmGetParameterizedStringFromDisplayString(state, props) {
    var displayString = props.value;
    var returnPs = bsDmParameterizedStrings_1.dmGetEmptyParameterizedString();
    var re = new RegExp('(.*?)' + bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + '(.*?)' + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter(), 'g');
    var res;
    var lastIndex = 0;
    while (res = re.exec(displayString)) {
        if (res[1]) {
            bsDmParameterizedStrings_1.dmAppendStringToParameterizedString(returnPs, res[1]);
        }
        if (res[2]) {
            var uvId = dmGetUserVariableIdForName(state, { name: res[2] });
            if (uvId) {
                bsDmParameterizedStrings_1.dmAppendUserVariableToParameterizedString(returnPs, uvId);
            }
            else {
                bsDmParameterizedStrings_1.dmAppendUserVariableNameToParameterizedString(returnPs, res[2]);
            }
        }
        lastIndex = re.lastIndex;
    }
    if (lastIndex < displayString.length) {
        bsDmParameterizedStrings_1.dmAppendStringToParameterizedString(returnPs, displayString.substr(lastIndex));
    }
    return returnPs;
}
exports.dmGetParameterizedStringFromDisplayString = dmGetParameterizedStringFromDisplayString;
function dmGetDisplayStringFromParameterizedNumber(state, props) {
    var userVariables = state.userVariables.variablesById;
    var pn = props.paramNumber;
    var returnString = '';
    if (typeof pn === 'object' && pn.hasOwnProperty('value') && pn.hasOwnProperty('type')) {
        if (pn.type === bscore_1.NumberParameterType.UserVariable) {
            var userVar = userVariables[pn.value];
            var userVarName = userVar ? userVar.name : '<undefined>';
            returnString = bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + userVarName + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter();
        }
        else if (pn.type === bscore_1.NumberParameterType.UserVariableName) {
            returnString = bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + pn.value + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter();
        }
        else {
            returnString = returnString + pn.value;
        }
    }
    return returnString;
}
exports.dmGetDisplayStringFromParameterizedNumber = dmGetDisplayStringFromParameterizedNumber;
function dmGetParameterizedNumberFromDisplayString(state, props) {
    var displayString = props.value;
    var re = new RegExp(bsDmParameterizedStrings_1.dmGetPsUvStartDelimiter() + '(.*?)' + bsDmParameterizedStrings_1.dmGetPsUvEndDelimiter(), 'g');
    var res = re.exec(displayString);
    if (res && res[1]) {
        var uvId = dmGetUserVariableIdForName(state, { name: res[1] });
        if (uvId) {
            return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromUserVariable(uvId);
        }
        else {
            return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromUserVariableName(res[1]);
        }
    }
    var value = parseInt(displayString, 10);
    return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromNumber(isNaN(value) ? 0 : value);
}
exports.dmGetParameterizedNumberFromDisplayString = dmGetParameterizedNumberFromDisplayString;
var selGetActiveUserVariableIds = reselect_1.createSelector(function (dmState) { return dmState; }, dmVisitUserVariableReferences);
function dmGetActiveUserVariableIds(state) {
    return selGetActiveUserVariableIds(state);
}
exports.dmGetActiveUserVariableIds = dmGetActiveUserVariableIds;
var selGetActiveUserVariableIdsInCopySet = reselect_1.createSelector(function (dmState) { return dmState; }, function (_, copySet) { return copySet; }, dmVisitUserVariableReferences);
function dmGetActiveUserVariablesIdsForMediaStateCopySet(state, props) {
    return selGetActiveUserVariableIdsInCopySet(state, props);
}
exports.dmGetActiveUserVariablesIdsForMediaStateCopySet = dmGetActiveUserVariablesIdsForMediaStateCopySet;
function dmVisitUserVariableReferences(state, copySet, replaceFunction) {
    var visitorBase = lodash_1.isNil(copySet) ? state : copySet;
    var mediaStates = visitorBase.mediaStates.mediaStatesById;
    var events = visitorBase.events;
    var transitions = visitorBase.transitions.transitionsById;
    var commands = visitorBase.commands.commandsById;
    var htmlSites = visitorBase.htmlSites;
    var liveTextItems = visitorBase.liveText.itemsById;
    var dataFeedSources = visitorBase.dataFeeds.sourcesById;
    var userVariables = lodash_1.isNil(copySet) ? state.userVariables : {};
    var result = new Set();
    var visitDirectUserVariableId = function (entity, propName) {
        if (utils_1.isValidGuidBsDmId(entity[propName])) {
            if (!lodash_1.isNil(replaceFunction)) {
                entity[propName] = replaceFunction(entity[propName]);
            }
            result.add(entity[propName]);
        }
    };
    var visitParameterizedString = function (paramString) {
        if (!lodash_1.isNil(paramString)) {
            var dmps = dmResolveParameterizedStringUserVariables(state, { paramString: paramString });
            dmps.params.forEach(function (comp) {
                if (comp.type === bscore_1.StringParameterType.UserVariable) {
                    if (!lodash_1.isNil(replaceFunction)) {
                        comp.value = replaceFunction(comp.value);
                    }
                    result.add(comp.value);
                }
            });
        }
    };
    var visitParameterizedNumber = function (paramNumber) {
        if (!lodash_1.isNil(paramNumber)) {
            var dmpn = dmResolveParameterizedNumberUserVariables(state, { paramNumber: paramNumber });
            if (dmpn.type === bscore_1.NumberParameterType.UserVariable) {
                if (!lodash_1.isNil(replaceFunction)) {
                    dmpn.value = replaceFunction(dmpn.value);
                }
                result.add(dmpn.value);
            }
        }
    };
    Object.keys(htmlSites).forEach(function (htmlSiteId) {
        var htmlSiteState = htmlSites[htmlSiteId];
        if (htmlSiteState.type === bscore_1.HtmlSiteType.Remote) {
            visitParameterizedString(htmlSiteState.url);
        }
        visitParameterizedString(htmlSiteState.queryString);
    });
    Object.keys(dataFeedSources).forEach(function (feedSourceId) {
        var dataFeedSource = dataFeedSources[feedSourceId];
        if (bsDmDataFeed_1.dmIsDataFeedSourceRemoteDataFeed(dataFeedSource)) {
            visitParameterizedString(dataFeedSource.url);
        }
    });
    Object.keys(mediaStates).forEach(function (mediaStateId) {
        var mediaState = mediaStates[mediaStateId];
        if (bsDmContentItems_1.dmContentItemIsStreamContentItem(mediaState.contentItem)) {
            visitParameterizedString(mediaState.contentItem.url);
        }
        else if (bsDmContentItems_1.dmContentItemIsUserVariableContentItem(mediaState.contentItem)) {
            visitDirectUserVariableId(mediaState.contentItem, 'userVariableId');
        }
    });
    Object.keys(events).forEach(function (eventId) {
        var event = events[eventId];
        if (event.type === bscore_1.EventType.Udp || event.type === bscore_1.EventType.PluginMessage ||
            event.type === bscore_1.EventType.Serial || event.type === bscore_1.EventType.WssEvent) {
            visitDirectUserVariableId(event.data, 'userVariableToAssignInput');
            visitDirectUserVariableId(event.data, 'userVariableToAssignWildcard');
        }
        else if (event.type === bscore_1.EventType.TimeClock
            && event.data.type === bsDmInterfaces_1.DmTimeClockEventType.ByUserVariable) {
            visitDirectUserVariableId(event.data, 'userVariableId');
        }
    });
    Object.keys(transitions).forEach(function (transitionId) {
        var transition = transitions[transitionId];
        if (!lodash_1.isNil(transition.condition)) {
            visitDirectUserVariableId(transition.condition, 'userVariableId');
            visitParameterizedString(transition.condition.compareValue1);
            visitParameterizedString(transition.condition.compareValue2);
        }
    });
    Object.keys(commands).forEach(function (commandId) {
        var command = commands[commandId];
        command.operations.forEach(function (op) {
            switch (op.type) {
                case bscore_1.CommandType.SendZoneMessage:
                case bscore_1.CommandType.SendUdp:
                case bscore_1.CommandType.SendUdpBytes:
                case bscore_1.CommandType.SendIRRemote:
                case bscore_1.CommandType.SendProntoIRRemote:
                case bscore_1.CommandType.Synchronize:
                case bscore_1.CommandType.InternalSynchronize:
                case bscore_1.CommandType.SendPluginMessage:
                case bscore_1.CommandType.SerialSendString:
                case bscore_1.CommandType.SerialSendByte:
                case bscore_1.CommandType.SerialSendBytes: {
                    visitParameterizedString(op.data.messageData);
                    break;
                }
                case bscore_1.CommandType.SetVariable:
                    visitParameterizedString(op.data.userVariableValue);
                case bscore_1.CommandType.IncrementVariable:
                case bscore_1.CommandType.DecrementVariable:
                case bscore_1.CommandType.ResetVariable: {
                    visitDirectUserVariableId(op.data, 'userVariableId');
                    break;
                }
                case bscore_1.CommandType.BeaconStart:
                case bscore_1.CommandType.BeaconStop: {
                    visitParameterizedString(op.data.beaconName);
                    break;
                }
                case bscore_1.CommandType.SwitchPresentation: {
                    visitDirectUserVariableId(op.data, 'userVariableId');
                    break;
                }
                case bscore_1.CommandType.SetConnectorVolume:
                case bscore_1.CommandType.IncrementConnectorVolume:
                case bscore_1.CommandType.DecrementConnectorVolume:
                case bscore_1.CommandType.SetZoneVolume:
                case bscore_1.CommandType.IncrementZoneVolume:
                case bscore_1.CommandType.DecrementZoneVolume:
                case bscore_1.CommandType.SetZoneChannelVolume:
                case bscore_1.CommandType.IncrementZoneChannelVolume:
                case bscore_1.CommandType.DecrementZoneChannelVolume:
                case bscore_1.CommandType.CecPhilipsSetVolume: {
                    visitParameterizedNumber(op.data.volume);
                    break;
                }
                case bscore_1.CommandType.CecSendString: {
                    visitParameterizedString(op.data.hexString);
                    break;
                }
                case bscore_1.CommandType.Pause: {
                    visitParameterizedNumber(op.data.pauseTime);
                    break;
                }
                case bscore_1.CommandType.SendWss: {
                    var wssParameter = op.data.wssParameter;
                    if (!lodash_1.isNil(wssParameter)) {
                        visitParameterizedString(wssParameter.parameterValue);
                    }
                    break;
                }
                case bscore_1.CommandType.SendBmap: {
                    var bmapFields = op.data.fields;
                    if (!lodash_1.isNil(bmapFields)) {
                        bmapFields.forEach(function (field) { return visitParameterizedString(field.parameterValue); });
                    }
                    break;
                }
                case bscore_1.CommandType.SendBmapHex: {
                    visitParameterizedString(op.data.messageData);
                    break;
                }
            }
        });
    });
    Object.keys(liveTextItems).forEach(function (itemId) {
        var liveTextItem = liveTextItems[itemId];
        if (bsDmLiveText_1.dmIsLiveTextDataUserVariable(liveTextItem)) {
            visitDirectUserVariableId(liveTextItem, 'userVariableIdOrName');
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataTitledDataFeed(liveTextItem)) {
            visitParameterizedString(liveTextItem.title);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataIndexedDataFeed(liveTextItem)) {
            visitParameterizedNumber(liveTextItem.index);
        }
    });
    var userVariableIds = Object.keys(userVariables);
    if (userVariableIds.length === 0 && result.size > 0) {
        userVariableIds = Array.from(result);
        userVariables = state.userVariables.variablesById;
    }
    userVariableIds.forEach(function (uvId) {
        var userVariable = userVariables[uvId];
        if (!lodash_1.isNil(userVariable)) {
            visitParameterizedString(userVariable.defaultValue);
        }
    });
    return Array.from(result);
}
exports.dmVisitUserVariableReferences = dmVisitUserVariableReferences;
function dmResolveParameterizedStringUserVariables(state, props) {
    var ps = props.paramString;
    if (lodash_1.isNil(ps)) {
        return bsDmParameterizedStrings_1.dmGetEmptyParameterizedString();
    }
    if (bsDmParameterizedStrings_1.dmAreParameterizedStringUserVariablesResolved(ps).ok) {
        return ps;
    }
    var returnPs = bsDmParameterizedStrings_1.dmGetEmptyParameterizedString();
    ps.params.forEach(function (param) {
        if (param.type === bscore_1.StringParameterType.UserVariable) {
            bsDmParameterizedStrings_1.dmAppendUserVariableToParameterizedString(returnPs, param.value);
        }
        else if (param.type === bscore_1.StringParameterType.UserVariableName) {
            var uvId = dmGetUserVariableIdForName(state, { name: param.value });
            if (!lodash_1.isNil(uvId)) {
                bsDmParameterizedStrings_1.dmAppendUserVariableToParameterizedString(returnPs, uvId);
            }
            else if (!lodash_1.isNil(props.newUserVariableBase) && props.newUserVariableBase.name === param.value) {
                bsDmParameterizedStrings_1.dmAppendUserVariableToParameterizedString(returnPs, props.newUserVariableBase.id);
            }
            else {
                bsDmParameterizedStrings_1.dmAppendUserVariableNameToParameterizedString(returnPs, param.value);
            }
        }
        else {
            bsDmParameterizedStrings_1.dmAppendStringToParameterizedString(returnPs, param.value);
        }
    });
    return returnPs;
}
exports.dmResolveParameterizedStringUserVariables = dmResolveParameterizedStringUserVariables;
function dmAreParameterizedStringUserVariablesValid(state, props) {
    var ps = props.paramString;
    if (!lodash_1.isNil(ps)) {
        var isValid_1 = true;
        ps.params.some(function (param) {
            if (param.type === bscore_1.StringParameterType.UserVariableName) {
                var uvId = dmGetUserVariableIdForName(state, { name: param.value });
                if (lodash_1.isNil(uvId)) {
                    isValid_1 = false;
                    return true;
                }
            }
            return false;
        });
        return isValid_1;
    }
    return false;
}
exports.dmAreParameterizedStringUserVariablesValid = dmAreParameterizedStringUserVariablesValid;
function dmResolveParameterizedNumberUserVariables(state, props) {
    var pn = props.paramNumber;
    if (lodash_1.isNil(pn)) {
        return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromNumber(0);
    }
    if (bsDmParameterizedNumbers_1.dmIsParameterizedNumberUserVariableResolved(pn).ok) {
        return pn;
    }
    var uvId = dmGetUserVariableIdForName(state, { name: pn.value });
    if (!lodash_1.isNil(uvId)) {
        return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromUserVariable(uvId);
    }
    else if (!lodash_1.isNil(props.newUserVariableBase) && props.newUserVariableBase.name === pn.value) {
        return bsDmParameterizedNumbers_1.dmGetParameterizedNumberFromUserVariable(props.newUserVariableBase.id);
    }
    return pn;
}
exports.dmResolveParameterizedNumberUserVariables = dmResolveParameterizedNumberUserVariables;
function dmIsParameterizedNumberUserVariableValid(state, props) {
    var pn = props.paramNumber;
    if (!lodash_1.isNil(pn)) {
        var isValid = true;
        if (pn.type === bscore_1.NumberParameterType.UserVariableName) {
            var uvId = dmGetUserVariableIdForName(state, { name: pn.value });
            isValid = !lodash_1.isNil(uvId);
        }
        return isValid;
    }
    return false;
}
exports.dmIsParameterizedNumberUserVariableValid = dmIsParameterizedNumberUserVariableValid;
function dmCheckUserVariableValidity(state, userVariableId, errorDetails) {
    var errorList = [];
    if (!lodash_1.isNil(userVariableId)) {
        if (lodash_1.isNil(errorDetails)) {
            errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.Plugin, entityId: userVariableId, entityProperty: 'userVariables' };
        }
        var dmState = bsDmState_1.dmFilterDmState(state);
        var userVariable = dmGetUserVariableById(dmState, { id: userVariableId });
        if (!lodash_1.isNull(userVariable)) {
            if (!lodash_1.isString(userVariable.name) || userVariable.name.length === 0) {
                errorList.push(new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.nameNotSpecified, 'The user variable name is invalid', errorDetails));
            }
            else {
                var nameMap = dmGetUserVariableNameMap(dmState);
                var mapEntry = nameMap[userVariable.name];
                if (!lodash_1.isNil(mapEntry) && mapEntry.length > 1) {
                    errorList.push(new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, 'The user variable name duplicates the name of another user variable', errorDetails));
                }
            }
            var error = selectorValidation_1.dmValidateEntityParameterizedString(dmState, userVariable.defaultValue, __assign(__assign({}, errorDetails), { entityProperty: 'defaultValue' }), false);
            if (!lodash_1.isNil(error)) {
                errorList.push(error);
            }
        }
    }
    return errorList;
}
exports.dmCheckUserVariableValidity = dmCheckUserVariableValidity;
function dmGetUserVariableCopySet(state, props) {
    var userVariableIdsToCopy = new Set(props.ids);
    var copySet = bsDmCopyPaste_1.dmCreateNewUserVariableCopySet(selectorSign_1.dmGetSignId(state));
    copySet.userVariables.sequence = state.userVariables.sequence.filter(function (id) { return userVariableIdsToCopy.has(id); });
    copySet.userVariables.variablesById = state.userVariables.sequence.reduce(function (copyMap, id) {
        if (userVariableIdsToCopy.has(id)) {
            copyMap[id] = lodash_1.cloneDeep(state.userVariables.variablesById[id]);
        }
        return copyMap;
    }, {});
    Object.keys(copySet.userVariables.variablesById).forEach(function (uvId) {
        var userVariable = copySet.userVariables.variablesById[uvId];
        if (userVariable.isNetworked && utils_1.isValidBsDmId(userVariable.dataFeedId)) {
            bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, userVariable.dataFeedId);
        }
    });
    return copySet;
}
exports.dmGetUserVariableCopySet = dmGetUserVariableCopySet;
function dmGetAllUserVariableCopySet(state) {
    var copySet = bsDmCopyPaste_1.dmCreateNewUserVariableCopySet(selectorSign_1.dmGetSignId(state));
    copySet.userVariables.sequence = state.userVariables.sequence.slice();
    copySet.userVariables.variablesById = lodash_1.cloneDeep(state.userVariables.variablesById);
    Object.keys(copySet.userVariables.variablesById).forEach(function (uvId) {
        var userVariable = copySet.userVariables.variablesById[uvId];
        if (userVariable.isNetworked && utils_1.isValidBsDmId(userVariable.dataFeedId)) {
            bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, userVariable.dataFeedId);
        }
    });
    return copySet;
}
exports.dmGetAllUserVariableCopySet = dmGetAllUserVariableCopySet;
var selGetUserVariableNameMap = reselect_1.createSelector(function (dmState) { return dmState.userVariables.variablesById; }, function (userVariableMap) {
    return Object.keys(userVariableMap).reduce(function (acc, id) {
        var userVariable = userVariableMap[id];
        if (userVariable.name) {
            if (lodash_1.isNil(acc[userVariable.name])) {
                acc[userVariable.name] = [id];
            }
            else {
                acc[userVariable.name].push(id);
            }
        }
        return acc;
    }, {});
});
function dmGetUserVariableNameMap(state) {
    return selGetUserVariableNameMap(state);
}
exports.dmGetUserVariableNameMap = dmGetUserVariableNameMap;
function dmGetMergedUserVariableCopySet(state, copySetCollection, duplicateMatchedUserVariables) {
    if (duplicateMatchedUserVariables === void 0) { duplicateMatchedUserVariables = false; }
    var userVariableNameMap = dmGetUserVariableNameMap(state);
    var initialUVMergeResult = {
        userVariables: { variablesById: {}, sequence: [] },
        matchedUserVariableIds: new Map(),
    };
    return copySetCollection.sequence.reduce(function (result, id) {
        var userVariable = copySetCollection.variablesById[id];
        var includeUV = lodash_1.isNil(userVariableNameMap[userVariable.name]);
        if (!includeUV && duplicateMatchedUserVariables) {
            var newName = utils_1.getUniqueNameForNameMap(userVariable.name, userVariableNameMap);
            userVariable = __assign(__assign({}, userVariable), { name: newName });
            includeUV = true;
        }
        if (includeUV) {
            result.userVariables.variablesById[id] = userVariable;
            result.userVariables.sequence.push(id);
            userVariableNameMap[userVariable.name] = [id];
        }
        else {
            result.matchedUserVariableIds.set(userVariable.id, userVariableNameMap[userVariable.name][0]);
        }
        return result;
    }, initialUVMergeResult);
}
exports.dmGetMergedUserVariableCopySet = dmGetMergedUserVariableCopySet;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmHtmlSiteIsRemoteHtmlSite = exports.dmHtmlSiteIsHostedHtmlSite = void 0;
var bscore_1 = __webpack_require__(1);
var lodash_1 = __webpack_require__(0);
function dmHtmlSiteIsHostedHtmlSite(htmlSite) {
    return !lodash_1.isNil(htmlSite) && htmlSite.type === bscore_1.HtmlSiteType.Hosted;
}
exports.dmHtmlSiteIsHostedHtmlSite = dmHtmlSiteIsHostedHtmlSite;
function dmHtmlSiteIsRemoteHtmlSite(htmlSite) {
    return !lodash_1.isNil(htmlSite) && htmlSite.type === bscore_1.HtmlSiteType.Remote;
}
exports.dmHtmlSiteIsRemoteHtmlSite = dmHtmlSiteIsRemoteHtmlSite;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsEqualParameterizedNumber = exports.dmIsSimpleParameterizedNumber = exports.dmGetNumberFromParameterizedNumber = exports.dmIsParameterizedNumberUserVariableResolved = exports.dmIsValidParameterizedNumber = exports.dmGetParameterizedNumberFromUserVariableName = exports.dmGetParameterizedNumberFromUserVariable = exports.dmResolveDmParameterizedNumber = exports.dmGetParameterizedNumberFromNumber = void 0;
var bscore_1 = __webpack_require__(1);
var lodash_1 = __webpack_require__(0);
function dmGetParameterizedNumberFromNumber(value) {
    return { type: bscore_1.NumberParameterType.Number, value: value };
}
exports.dmGetParameterizedNumberFromNumber = dmGetParameterizedNumberFromNumber;
function dmResolveDmParameterizedNumber(arg) {
    if (arg !== undefined) {
        if (typeof arg === 'number') {
            return dmGetParameterizedNumberFromNumber(arg);
        }
        else if (dmIsValidParameterizedNumber(arg)) {
            return arg;
        }
    }
    return dmGetParameterizedNumberFromNumber(0);
}
exports.dmResolveDmParameterizedNumber = dmResolveDmParameterizedNumber;
function dmGetParameterizedNumberFromUserVariable(uvId) {
    return { type: bscore_1.NumberParameterType.UserVariable, value: uvId };
}
exports.dmGetParameterizedNumberFromUserVariable = dmGetParameterizedNumberFromUserVariable;
function dmGetParameterizedNumberFromUserVariableName(uvName) {
    return { type: bscore_1.NumberParameterType.UserVariableName, value: uvName };
}
exports.dmGetParameterizedNumberFromUserVariableName = dmGetParameterizedNumberFromUserVariableName;
function dmIsValidParameterizedNumber(pn) {
    return !lodash_1.isNil(pn)
        && typeof pn === 'object'
        && pn.hasOwnProperty('type')
        && pn.hasOwnProperty('value')
        && ((pn.type === bscore_1.NumberParameterType.Number && typeof pn.value === 'number')
            || ((pn.type === bscore_1.NumberParameterType.UserVariable || pn.type === bscore_1.NumberParameterType.UserVariableName)
                && typeof pn.value === 'string'));
}
exports.dmIsValidParameterizedNumber = dmIsValidParameterizedNumber;
function dmIsParameterizedNumberUserVariableResolved(pn) {
    if (pn.type === bscore_1.NumberParameterType.UserVariableName) {
        return { ok: false, undefinedUserVariableNames: [pn.value] };
    }
    return { ok: true };
}
exports.dmIsParameterizedNumberUserVariableResolved = dmIsParameterizedNumberUserVariableResolved;
function dmGetNumberFromParameterizedNumber(pn) {
    return pn.type === bscore_1.NumberParameterType.Number ? pn.value : null;
}
exports.dmGetNumberFromParameterizedNumber = dmGetNumberFromParameterizedNumber;
function dmIsSimpleParameterizedNumber(pn) {
    return pn.type === bscore_1.NumberParameterType.Number;
}
exports.dmIsSimpleParameterizedNumber = dmIsSimpleParameterizedNumber;
function dmIsEqualParameterizedNumber(pn1, pn2) {
    return pn1.type === pn2.type && pn1.value === pn2.value;
}
exports.dmIsEqualParameterizedNumber = dmIsEqualParameterizedNumber;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetMergedAssetItemCopySet = exports.dmGetBsnPresentationAssetItemSpecification = exports.dmGetBlobAssetItemList = exports.dmGetLocalAssetLocatorList = exports.dmGetBsnAssetLocatorList = exports.dmGetAssetItemListForFileName = exports.dmGetMediaContentAssetItemList = exports.dmHasLocalAssetItems = exports.dmGetAssetItemIdsForSign = exports.dmGetAssetItemByLocator = exports.dmGetAssetIdByLocator = exports.dmGetAssetItemById = void 0;
var bscore_1 = __webpack_require__(1);
var selectorDeviceWebPage_1 = __webpack_require__(68);
var selectorZone_1 = __webpack_require__(42);
var lodash_1 = __webpack_require__(0);
var utils_1 = __webpack_require__(3);
function dmGetAssetItemById(state, props) {
    var asset = state.assetMap[props.id];
    return asset ? __assign({}, asset) : null;
}
exports.dmGetAssetItemById = dmGetAssetItemById;
function dmGetAssetIdByLocator(state, props) {
    var assetMap = state.assetMap;
    var assetId = lodash_1.find(Object.keys(assetMap), function (id) { return assetMap[id].locator === props.locator; });
    return lodash_1.isNil(assetId) ? null : assetId;
}
exports.dmGetAssetIdByLocator = dmGetAssetIdByLocator;
function dmGetAssetItemByLocator(state, props) {
    var assetMap = state.assetMap;
    var assetId = lodash_1.find(Object.keys(assetMap), function (id) { return assetMap[id].locator === props.locator; });
    return lodash_1.isNil(assetId) ? null : assetMap[assetId];
}
exports.dmGetAssetItemByLocator = dmGetAssetItemByLocator;
function dmGetAssetItemIdsForSign(state) {
    return Object.keys(state.assetMap);
}
exports.dmGetAssetItemIdsForSign = dmGetAssetItemIdsForSign;
function dmHasLocalAssetItems(state) {
    var assetId = lodash_1.find(Object.keys(state.assetMap), function (id) { return state.assetMap[id].location === bscore_1.AssetLocation.Local; });
    return !lodash_1.isNil(assetId);
}
exports.dmHasLocalAssetItems = dmHasLocalAssetItems;
var MediaContentTypes = new Set([bscore_1.MediaType.Video, bscore_1.MediaType.Image, bscore_1.MediaType.Audio]);
function dmGetMediaContentAssetItemList(state) {
    return Object.keys(state.assetMap).reduce(function (acc, assetId) {
        var assetItem = state.assetMap[assetId];
        if (assetItem.assetType === bscore_1.AssetType.Content && MediaContentTypes.has(assetItem.mediaType)) {
            acc.push(assetItem);
        }
        return acc;
    }, []);
}
exports.dmGetMediaContentAssetItemList = dmGetMediaContentAssetItemList;
function dmGetAssetItemListForFileName(state, props) {
    return Object.keys(state.assetMap).reduce(function (acc, assetId) {
        var assetItem = state.assetMap[assetId];
        if (assetItem.name.toUpperCase() === props.name.toUpperCase()) {
            acc.push(assetItem);
        }
        return acc;
    }, []);
}
exports.dmGetAssetItemListForFileName = dmGetAssetItemListForFileName;
function dmGetBsnAssetLocatorList(state) {
    return Object.keys(state.assetMap).reduce(function (acc, assetId) {
        var assetItem = state.assetMap[assetId];
        if (assetItem.location === bscore_1.AssetLocation.Bsn) {
            acc.push(bscore_1.bscAssetLocatorFromAssetItem(assetItem));
        }
        return acc;
    }, []);
}
exports.dmGetBsnAssetLocatorList = dmGetBsnAssetLocatorList;
function dmGetLocalAssetLocatorList(state) {
    return Object.keys(state.assetMap).reduce(function (acc, assetId) {
        var assetItem = state.assetMap[assetId];
        if (assetItem.location === bscore_1.AssetLocation.Local) {
            acc.push(bscore_1.bscAssetLocatorFromAssetItem(assetItem));
        }
        return acc;
    }, []);
}
exports.dmGetLocalAssetLocatorList = dmGetLocalAssetLocatorList;
function dmGetBlobAssetItemList(state) {
    return Object.keys(state.assetMap).reduce(function (acc, assetId) {
        var assetItem = state.assetMap[assetId];
        if (assetItem.location === bscore_1.AssetLocation.Blob) {
            acc.push(assetItem);
        }
        return acc;
    }, []);
}
exports.dmGetBlobAssetItemList = dmGetBlobAssetItemList;
function dmGetBsnPresentationAssetItemSpecification(state) {
    var assetItemSpec = {};
    var hasLocalAsset = false;
    Object.keys(state.assetMap).some(function (id) {
        var assetItem = state.assetMap[id];
        if (assetItem.location !== bscore_1.AssetLocation.Bsn && assetItem.assetType !== bscore_1.AssetType.Project) {
            hasLocalAsset = true;
            return true;
        }
        var arrayName = null;
        switch (assetItem.assetType) {
            case bscore_1.AssetType.Content:
                arrayName = 'mediaFiles';
                break;
            case bscore_1.AssetType.HtmlSite:
                arrayName = 'webPages';
                break;
            case bscore_1.AssetType.BSNDataFeed:
                arrayName = 'liveTextFeeds';
                break;
            case bscore_1.AssetType.BSNMediaFeed:
                arrayName = 'liveMediaFeeds';
                break;
            case bscore_1.AssetType.BSNDynamicPlaylist:
                arrayName = 'dynamicPlaylists';
                break;
            case bscore_1.AssetType.BSNTaggedPlaylist:
                arrayName = 'taggedPlaylists';
                break;
            case bscore_1.AssetType.BrightScript:
                arrayName = 'autorunPlugins';
                break;
        }
        if (!lodash_1.isNil(arrayName)) {
            if (!assetItemSpec[arrayName] || !Array.isArray(assetItemSpec[arrayName])) {
                assetItemSpec[arrayName] = [];
            }
            assetItemSpec[arrayName].push(assetItem);
        }
        return false;
    });
    if (!hasLocalAsset) {
        assetItemSpec.useStandardDeviceWebPage = false;
        var presentationWebPageMode = selectorDeviceWebPage_1.dmGetSignPresentationWebPageDisplayMode(state);
        var deviceWebPage = selectorDeviceWebPage_1.dmGetDeviceWebPageForPort(state, { port: 0 });
        if (presentationWebPageMode === bscore_1.DeviceWebPageDisplay.Custom && !lodash_1.isNil(deviceWebPage)) {
            var assetItem = state.assetMap[deviceWebPage.indexAssetId];
            if (!lodash_1.isNil(assetItem)) {
                assetItemSpec.deviceWebPage = assetItem;
            }
        }
        else {
            assetItemSpec.useStandardDeviceWebPage = presentationWebPageMode === bscore_1.DeviceWebPageDisplay.Standard;
        }
        var clockZoneCount = selectorZone_1.dmGetZoneCountByZoneType(state, bscore_1.ZoneType.Clock);
        assetItemSpec.useClockZoneWebPage = clockZoneCount > 0;
        return assetItemSpec;
    }
    return null;
}
exports.dmGetBsnPresentationAssetItemSpecification = dmGetBsnPresentationAssetItemSpecification;
function dmGetMergedAssetItemCopySet(state, copySetAssetMap) {
    var initialAssetMergeResult = {
        assetMap: {},
        assetIds: new Map(),
    };
    return Object.keys(copySetAssetMap).reduce(function (result, id) {
        var copySetAssetItem = copySetAssetMap[id];
        var assetItem = dmGetAssetItemByLocator(state, { locator: copySetAssetItem.locator });
        if (lodash_1.isNil(assetItem)) {
            assetItem = __assign(__assign({}, copySetAssetItem), { id: utils_1.newBsDmId() });
        }
        result.assetMap[assetItem.id] = assetItem;
        result.assetIds.set(copySetAssetItem.id, assetItem.id);
        return result;
    }, initialAssetMergeResult);
}
exports.dmGetMergedAssetItemCopySet = dmGetMergedAssetItemCopySet;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetEventIdsForSign = exports.dmValidateEvent = exports.dmIsEventCompatibleWithContentItemType = exports.dmGetAllEventStatesForEventType = exports.dmGetAllEventIdsForEventType = exports.dmGetEventTypeById = exports.dmGetEventById = exports.dmGetEventStateById = exports.clearEventSelectorCaches = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var selectorTransition_1 = __webpack_require__(41);
var selectorCommand_1 = __webpack_require__(26);
var selectorValidation_1 = __webpack_require__(17);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
var selGetEventById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (evId, events, transitions, commands) {
    var eventState = events[evId];
    if (eventState) {
        var transitionStates = selectorTransition_1.fnGetSortedTransitionStatesForEventId(transitions, evId);
        var evCommands = selectorCommand_1.fnGetCommandStatesForParentAndType(commands, evId, bscore_1.CommandSequenceType.Event);
        return new bsDmClasses_1.DmcEvent(eventState, transitionStates, evCommands);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 500 }),
});
function clearEventSelectorCaches() {
    selGetEventById.clearCache();
}
exports.clearEventSelectorCaches = clearEventSelectorCaches;
function dmGetEventStateById(state, props) {
    var eventState = state.events[props.id];
    return lodash_1.isNil(eventState) ? null : eventState;
}
exports.dmGetEventStateById = dmGetEventStateById;
function dmGetEventById(state, props) {
    return selGetEventById(state, props);
}
exports.dmGetEventById = dmGetEventById;
function dmGetEventTypeById(state, props) {
    var eventState = state.events[props.id];
    return lodash_1.isNil(eventState) ? null : eventState.type;
}
exports.dmGetEventTypeById = dmGetEventTypeById;
function dmGetAllEventIdsForEventType(state, props) {
    return Object.keys(state.events).filter(function (id) { return state.events[id].type === props.type; });
}
exports.dmGetAllEventIdsForEventType = dmGetAllEventIdsForEventType;
function dmGetAllEventStatesForEventType(state, props) {
    return Object.keys(state.events).reduce(function (list, id) {
        if (state.events[id].type === props.type) {
            list.push(state.events[id]);
        }
        return list;
    }, []);
}
exports.dmGetAllEventStatesForEventType = dmGetAllEventStatesForEventType;
function dmIsEventCompatibleWithContentItemType(state, props) {
    var eventState = state.events[props.id];
    return lodash_1.isNil(eventState) ? false : bsDmEvents_1.dmIsEventCompatibleWithContentItem(eventState, props.type).ok;
}
exports.dmIsEventCompatibleWithContentItemType = dmIsEventCompatibleWithContentItemType;
function dmValidateEvent(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Event, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Event, props.id);
    var validateStringData = function (data, entityProperty) {
        if (!lodash_1.isString(data) || data.length === 0) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.eventDataMissing, __assign(__assign({}, entityDetails), { entityProperty: entityProperty })));
        }
    };
    var validateHexStringData = function (data, entityProperty) {
        if (!utils_1.isValidHexString(data)) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.invalidHexString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty })));
        }
    };
    var validateKeyboardStringData = function (data, entityProperty) {
        var kbdResult = bsDmEvents_1.dmIsValidKeyboardEventData(data);
        if (!kbdResult.ok) {
            kbdResult.error.details = __assign(__assign({}, entityDetails), { entityProperty: entityProperty });
            result.errorList.push(kbdResult.error);
        }
    };
    var validateIrRemoteStringData = function (data, entityProperty) {
        var error = selectorValidation_1.dmValidateIrRemoteEventData(state, data, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableId = function (userVariableId, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableId(state, userVariableId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validatePluginId = function (pluginId, entityProperty) {
        var error = selectorValidation_1.dmValidateScriptPluginId(state, pluginId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableInputFromEventData = function (dataString, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableInputFromEventData(state, dataString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var event = dmGetEventStateById(state, props);
    if (!lodash_1.isNil(event)) {
        switch (event.type) {
            case bscore_1.EventType.Serial:
                validateStringData(event.data.port, event.type + '.port');
            case bscore_1.EventType.Usb:
            case bscore_1.EventType.Synchronize:
            case bscore_1.EventType.ZoneMessage:
            case bscore_1.EventType.InternalSynchronize:
                validateStringData(event.data.data, event.type + '.data');
                break;
            case bscore_1.EventType.Keyboard:
                validateKeyboardStringData(event.data.data, event.type + '.data');
                break;
            case bscore_1.EventType.Remote:
                validateIrRemoteStringData(event.data.data, event.type + '.data');
                break;
            case bscore_1.EventType.Udp:
                validateStringData(event.data.data, event.type + '.data');
                validateStringData(event.data.label, event.type + '.label');
                break;
            case bscore_1.EventType.PluginMessage:
                validatePluginId(event.data.pluginId, event.type + '.pluginId');
                validateStringData(event.data.message, event.type + '.message');
                break;
            case bscore_1.EventType.WssEvent:
                var wssEventData = event.data;
                if (!lodash_1.isNil(wssEventData.wssEventParameter)) {
                    validateStringData(wssEventData.wssEventParameter.parameterValue, event.type + '.wssEventParameter.parameterValue');
                }
                break;
            case bscore_1.EventType.Bmap:
                validateStringData(event.data.port, event.type + '.port');
                validateStringData(event.data.data, event.type + '.data');
                break;
            case bscore_1.EventType.BmapHex:
                validateStringData(event.data.port, event.type + '.port');
                validateHexStringData(event.data.data, event.type + '.data');
        }
        if (event.type === bscore_1.EventType.Serial || event.type === bscore_1.EventType.Udp ||
            event.type === bscore_1.EventType.PluginMessage || event.type === bscore_1.EventType.WssEvent) {
            var uvAssign = event.data;
            if (uvAssign.assignInputToUserVariable) {
                var entityProperty = event.type + '.userVariableToAssignInput';
                if (utils_1.isValidBsDmId(uvAssign.userVariableToAssignInput)) {
                    validateUserVariableId(uvAssign.userVariableToAssignInput, entityProperty);
                }
                else {
                    var dataString = void 0;
                    if (event.type === bscore_1.EventType.PluginMessage) {
                        dataString = uvAssign.message;
                    }
                    else if (event.type === bscore_1.EventType.WssEvent) {
                        var wssEventParameter = uvAssign.wssEventParameter;
                        if (!lodash_1.isNil(wssEventParameter)) {
                            dataString = wssEventParameter.parameterValue;
                        }
                    }
                    else {
                        dataString = uvAssign.data;
                    }
                    validateUserVariableInputFromEventData(dataString, entityProperty);
                }
            }
            if (uvAssign.assignWildcardToUserVariable) {
                validateUserVariableId(uvAssign.userVariableToAssignWildcard, event.type + '.userVariableToAssignWildcard');
            }
        }
        var transitionIds = selectorTransition_1.dmGetTransitionIdsForEvent(state, props);
        var componentErrors = transitionIds.reduce(function (acc, transitionId) {
            var cmdResult = selectorTransition_1.dmValidateTransition(state, { id: transitionId });
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, []);
        var commandIds = selectorCommand_1.dmCommandIdsForEvent(state, props);
        componentErrors = commandIds.reduce(function (acc, commandId) {
            var cmdResult = selectorCommand_1.dmValidateCommand(state, { id: commandId });
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, componentErrors);
        if (componentErrors.length) {
            result.componentErrors = componentErrors;
            result.ok = false;
        }
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateEvent = dmValidateEvent;
function dmGetEventIdsForSign(state) {
    return Object.keys(state.events);
}
exports.dmGetEventIdsForSign = dmGetEventIdsForSign;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetTransitionIdsForSign = exports.fnGetSortedTransitionStatesForEventId = exports.dmGetConditionalTransitionIdsForEventFromTransitionState = exports.dmGetNonConditionalTransitionsForEventId = exports.dmGetNonConditionalTransitionsForEventIdFromTransitionState = exports.dmValidateTransition = exports.dmGetConditionalTransitionCountForEvent = exports.dmGetConditionalTransitionIdsForEvent = exports.dmGetConditionalTransitionSequenceForEvent = exports.dmGetIncomingTransitionIdsForMediaState = exports.dmGetTransitionIdsForEvent = exports.dmGetTransitionById = exports.dmGetTransitionStateById = exports.clearTransitionSelectorCaches = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var selectorCommand_1 = __webpack_require__(26);
var selectorValidation_1 = __webpack_require__(17);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
var selGetTransitionById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.transitions.transitionsById; }, function (dmState) { return dmState.commands; }, function (trnId, transitions, commandState) {
    var transitionState = transitions[trnId];
    if (!lodash_1.isNil(transitionState)) {
        var commands = selectorCommand_1.fnGetCommandStatesForParentAndType(commandState, trnId, bscore_1.CommandSequenceType.Transition);
        return new bsDmClasses_1.DmcTransition(transitionState, commands);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 500 }),
});
function clearTransitionSelectorCaches() {
    selGetTransitionById.clearCache();
}
exports.clearTransitionSelectorCaches = clearTransitionSelectorCaches;
function dmGetTransitionStateById(state, props) {
    var transitionState = state.transitions.transitionsById[props.id];
    return transitionState ? transitionState : null;
}
exports.dmGetTransitionStateById = dmGetTransitionStateById;
function dmGetTransitionById(state, props) {
    return selGetTransitionById(state, props);
}
exports.dmGetTransitionById = dmGetTransitionById;
function dmGetTransitionIdsForEvent(state, props) {
    var transitions = state.transitions.transitionsById;
    return Object.keys(transitions).filter(function (id) { return transitions[id].eventId === props.id; });
}
exports.dmGetTransitionIdsForEvent = dmGetTransitionIdsForEvent;
function dmGetIncomingTransitionIdsForMediaState(state, props) {
    var transitions = state.transitions.transitionsById;
    return Object.keys(transitions).filter(function (id) { return transitions[id].targetMediaStateId === props.id; });
}
exports.dmGetIncomingTransitionIdsForMediaState = dmGetIncomingTransitionIdsForMediaState;
function dmGetConditionalTransitionSequenceForEvent(state, props) {
    var sequence = state.transitions.sequencesByEventId[props.id];
    return lodash_1.isNil(sequence) ? null : sequence;
}
exports.dmGetConditionalTransitionSequenceForEvent = dmGetConditionalTransitionSequenceForEvent;
function dmGetConditionalTransitionIdsForEvent(state, props) {
    return exports.dmGetConditionalTransitionIdsForEventFromTransitionState(state.transitions, props.id);
}
exports.dmGetConditionalTransitionIdsForEvent = dmGetConditionalTransitionIdsForEvent;
function dmGetConditionalTransitionCountForEvent(state, props) {
    var ids = dmGetConditionalTransitionIdsForEvent(state, props);
    return ids.length;
}
exports.dmGetConditionalTransitionCountForEvent = dmGetConditionalTransitionCountForEvent;
function dmValidateTransition(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Transition, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Transition, props.id);
    var validateParameterizedString = function (paramString, entityProperty) {
        var error = selectorValidation_1.dmValidateEntityParameterizedString(state, paramString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableId = function (userVariableId, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableId(state, userVariableId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableName = function (userVariableName, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableName(state, userVariableName, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var transition = dmGetTransitionStateById(state, props);
    if (!lodash_1.isNil(transition) && !lodash_1.isNil(transition.condition)) {
        if (utils_1.isValidBsDmId(transition.condition.userVariableId)) {
            validateUserVariableId(transition.condition.userVariableId, 'condition.userVariableId');
        }
        else if (transition.condition.userVariableName) {
            validateUserVariableName(transition.condition.userVariableName, 'condition.userVariableName');
        }
        else {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.userVariableNotSpecified, __assign(__assign({}, entityDetails), { entityProperty: 'condition.userVariable' })));
        }
        validateParameterizedString(transition.condition.compareValue1, 'condition.compareValue1');
        if (transition.condition.compareOperator === bscore_1.CompareOperator.BTW) {
            validateParameterizedString(transition.condition.compareValue2, 'condition.compareValue2');
        }
        var commandIds = selectorCommand_1.dmCommandIdsForTransition(state, props);
        var commandErrors = commandIds.reduce(function (acc, commandId) {
            var cmdResult = selectorCommand_1.dmValidateCommand(state, { id: commandId });
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, []);
        if (commandErrors.length) {
            result.componentErrors = commandErrors;
            result.ok = false;
        }
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateTransition = dmValidateTransition;
var dmGetNonConditionalTransitionsForEventIdFromTransitionState = function (transitionState, eventId) {
    var transitionsById = transitionState.transitionsById;
    return Object.keys(transitionsById).filter(function (id) {
        var transition = transitionsById[id];
        return transition.eventId === eventId && lodash_1.isNil(transition.condition);
    });
};
exports.dmGetNonConditionalTransitionsForEventIdFromTransitionState = dmGetNonConditionalTransitionsForEventIdFromTransitionState;
var dmGetNonConditionalTransitionsForEventId = function (state, props) {
    return exports.dmGetNonConditionalTransitionsForEventIdFromTransitionState(state.transitions, props.id);
};
exports.dmGetNonConditionalTransitionsForEventId = dmGetNonConditionalTransitionsForEventId;
var dmGetConditionalTransitionIdsForEventFromTransitionState = function (transitionState, eventId) {
    var sequence = transitionState.sequencesByEventId[eventId];
    if (sequence) {
        var transitions_1 = transitionState.transitionsById;
        var transitionSequence = sequence.sequence;
        return transitionSequence.filter(function (id) { return !lodash_1.isNil(transitions_1[id].condition); });
    }
    return [];
};
exports.dmGetConditionalTransitionIdsForEventFromTransitionState = dmGetConditionalTransitionIdsForEventFromTransitionState;
var fnGetSortedTransitionStatesForEventId = function (transitionState, eventId) {
    var defaultTransitionId = exports.dmGetNonConditionalTransitionsForEventIdFromTransitionState(transitionState, eventId)
        .slice(0, 1);
    var transitionIds = __spreadArrays(exports.dmGetConditionalTransitionIdsForEventFromTransitionState(transitionState, eventId), defaultTransitionId);
    if (transitionIds.length > 0) {
        return transitionIds.map(function (id) { return transitionState.transitionsById[id]; });
    }
    return null;
};
exports.fnGetSortedTransitionStatesForEventId = fnGetSortedTransitionStatesForEventId;
function dmGetTransitionIdsForSign(state) {
    return Object.keys(state.transitions.transitionsById);
}
exports.dmGetTransitionIdsForSign = dmGetTransitionIdsForSign;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetZoneLayerSequence = exports.dmGetZonesForLayer = exports.dmGetZoneLayersForZoneId = exports.dmGetZoneLayerIdsForZoneId = exports.dmGetZoneLayerById = exports.dmGetZoneLayerStateById = exports.dmGetNextMediaStateTagIndexForZone = exports.dmGetNonContainedZoneCommandIdsForZone = exports.dmGetZoneCommandIdsForZone = exports.dmGetZoneTagMap = exports.dmGetZoneIdsForZoneType = exports.dmGetZoneCount = exports.dmGetZonesForSign = exports.dmValidateZone = exports.dmIsValidContentItemTypeForContainer = exports.dmIsValidAssetTypeForContainer = exports.dmGetZoneAudioOutputSpecificationById = exports.dmGetZonePropertiesByTag = exports.dmGetZonePropertiesByName = exports.dmGetZonePropertiesById = exports.dmIsZoneNonInteractiveCompatible = exports.dmIsZoneInteractiveCompatible = exports.dmIsZoneContentNonInteractive = exports.dmGetZoneNonInteractiveById = exports.dmGetZoneTypeById = exports.dmGetZoneIdForCommandId = exports.dmGetZoneIdForTransitionId = exports.dmGetZoneIdForEventId = exports.dmGetZoneTypeForMediaStateId = exports.dmGetZoneForMediaStateId = exports.dmGetZoneStateForContainer = exports.dmGetZoneIdForContainer = exports.dmGetZoneIdForZoneOrMediaStateId = exports.dmGetZoneIdForMediaStateId = exports.dmGetEventIdsForZone = exports.dmGetAllTargetableMediaStateIdsForContainer = exports.fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap = exports.dmGetMediaStateIdsForZone = exports.dmGetZoneByTag = exports.dmIsAudioEnabledInZone = exports.dmCanSetAudioOutputForZone = exports.dmGetAvailableAudioDecoderCount = exports.dmGetAudioDecoderCountForSign = exports.dmGetAudioDecoderCountForZone = exports.dmGetVideoZoneCount = exports.dmGetZoneCountByZoneType = exports.dmGetZoneByName = exports.dmGetZoneStateById = exports.dmGetZoneById = exports.clearZoneSelectorCaches = void 0;
exports.dmAreAudioDecodersAvailableForZone = exports.dmGetZoneLayerIdsForZone = exports.dmGetZoneLayerMap = exports.dmGetDefaultVideoLayer = exports.dmGetAvailableVideoLayer = exports.dmGetUnusedVideoLayer = exports.dmCanAddBackgroundImageZoneToLayer = exports.dmCanAddBackgroundImageZone = exports.dmGetInvisibleZoneLayerIdInSign = exports.dmGetAudioZoneLayerIdInSign = exports.dmGetGraphicsZoneLayerIdInSign = exports.dmGetVideoZoneLayerIdsInSign = exports.dmGetZoneLayerIdsInSign = exports.dmGetZonePropertyAssetItemIds = exports.dmGetCanChangeZoneType = exports.dmCanChangeZoneType = exports.dmGetCanAddZone = exports.dmCanAddZone = exports.dmGetZoneLayerByTypeAndIndex = exports.dmGetZoneLayerIdByTypeAndIndex = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmZone_1 = __webpack_require__(31);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmAssetItems_1 = __webpack_require__(43);
var bsDmCommands_1 = __webpack_require__(22);
var bsDmError_1 = __webpack_require__(4);
var selectorSign_1 = __webpack_require__(49);
var selectorPlaylist_1 = __webpack_require__(69);
var selectorMediaState_1 = __webpack_require__(47);
var selectorEvent_1 = __webpack_require__(40);
var selectorTransition_1 = __webpack_require__(41);
var selectorCommand_1 = __webpack_require__(26);
var selectorValidation_1 = __webpack_require__(17);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
function fnGetZoneLayerById(layerId, zoneLayerMap) {
    var zoneLayer = zoneLayerMap[layerId];
    return lodash_1.isNil(zoneLayer) ? null :
        zoneLayer.type === bscore_1.ZoneLayerType.Video ? new bsDmClasses_1.DmcVideoZoneLayer(zoneLayer) : new bsDmClasses_1.DmcZoneLayer(zoneLayer);
}
var selGetZoneLayerById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.zones.zoneLayersById; }, fnGetZoneLayerById)(function (_, props) { return props.id; });
function fnGetZoneLayerIdsForZoneId(zoneId, zoneLayerMap) {
    return Object.keys(zoneLayerMap)
        .filter(function (layerId) { return zoneLayerMap[layerId].zoneSequence.indexOf(zoneId) >= 0; });
}
var selGetZoneLayerIdsForZoneId = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.zones.zoneLayersById; }, fnGetZoneLayerIdsForZoneId)({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
function fnGetZoneLayersForZoneId(zoneId, zoneLayerMap) {
    return fnGetZoneLayerIdsForZoneId(zoneId, zoneLayerMap)
        .map(function (layerId) { return fnGetZoneLayerById(layerId, zoneLayerMap); });
}
var selGetZoneLayersForZoneId = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.zones.zoneLayersById; }, fnGetZoneLayersForZoneId)({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
var selGetZoneById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.zones.zonesById; }, function (dmState) { return dmState.sign.properties.videoMode; }, selGetZoneLayersForZoneId, function (zoneId, zoneMap, videoMode, zoneLayers) {
    var zoneState = zoneMap[zoneId];
    if (!lodash_1.isNil(zoneState)) {
        return new bsDmClasses_1.DmcZone(zoneState, videoMode, zoneLayers);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
function clearZoneSelectorCaches() {
    selGetZoneLayerById.clearCache();
    selGetZoneLayerIdsForZoneId.clearCache();
    selGetZoneLayersForZoneId.clearCache();
    selGetZoneById.clearCache();
}
exports.clearZoneSelectorCaches = clearZoneSelectorCaches;
function dmGetZoneById(state, props) {
    return selGetZoneById(state, props);
}
exports.dmGetZoneById = dmGetZoneById;
function dmGetZoneStateById(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? null : zoneState;
}
exports.dmGetZoneStateById = dmGetZoneStateById;
function dmGetZoneByName(state, props) {
    var zones = state.zones.zonesById;
    var zoneId = lodash_1.find(Object.keys(zones), function (id) { return zones[id].name === props.name; });
    return lodash_1.isNil(zoneId) ? null : selGetZoneById(state, { id: zoneId });
}
exports.dmGetZoneByName = dmGetZoneByName;
function dmGetZoneCountByZoneType(state, type) {
    var zones = state.zones.zonesById;
    return state.zones.allZones.reduce(function (acc, zoneId) {
        if (zones[zoneId].type === type) {
            acc = acc + 1;
        }
        return acc;
    }, 0);
}
exports.dmGetZoneCountByZoneType = dmGetZoneCountByZoneType;
var VideoZoneSet = new Set([bscore_1.ZoneType.VideoOnly, bscore_1.ZoneType.VideoOrImages, bscore_1.ZoneType.BackgroundImage]);
function dmGetVideoZoneCount(state) {
    var zones = state.zones.zonesById;
    return state.zones.allZones.reduce(function (acc, zoneId) {
        if (VideoZoneSet.has(zones[zoneId].type)) {
            acc = acc + 1;
        }
        return acc;
    }, 0);
}
exports.dmGetVideoZoneCount = dmGetVideoZoneCount;
function dmGetAudioDecoderCountForZone(state, props) {
    var decoderCount = 0;
    var zoneType = dmGetZoneTypeById(state, props);
    if (!lodash_1.isNil(zoneType)
        && (bsDmZone_1.dmIsAudioZoneType(zoneType) || dmIsAudioEnabledInZone(state, props))) {
        decoderCount = bsDmZone_1.dmGetAudioDecoderCountForZoneType(state.zones.zonesById[props.id].type);
    }
    return decoderCount;
}
exports.dmGetAudioDecoderCountForZone = dmGetAudioDecoderCountForZone;
function dmGetAudioDecoderCountForSign(state) {
    return state.zones.allZones.reduce(function (acc, zoneId) {
        acc += dmGetAudioDecoderCountForZone(state, { id: zoneId });
        return acc;
    }, 0);
}
exports.dmGetAudioDecoderCountForSign = dmGetAudioDecoderCountForSign;
function dmGetAvailableAudioDecoderCount(state) {
    var audioDecoderLimit = bscore_1.bscGetPlayerCapabilities(selectorSign_1.dmGetSignPlayerModel(state)).audioDecoderCount;
    return audioDecoderLimit - dmGetAudioDecoderCountForSign(state);
}
exports.dmGetAvailableAudioDecoderCount = dmGetAvailableAudioDecoderCount;
function dmCanSetAudioOutputForZone(state, props) {
    var canSet = false;
    var zoneState = dmGetZoneStateById(state, props);
    if (!lodash_1.isNil(zoneState)) {
        canSet = bsDmZone_1.dmIsAudioZoneType(zoneState.type)
            || dmIsAudioEnabledInZone(state, props)
            || (bsDmZone_1.dmZoneTypeUsesAudioDecoder(zoneState.type)
                && dmGetAvailableAudioDecoderCount(state) >= bsDmZone_1.dmGetAudioDecoderCountForZoneType(zoneState.type));
    }
    return canSet;
}
exports.dmCanSetAudioOutputForZone = dmCanSetAudioOutputForZone;
function dmIsAudioEnabledInZone(state, props) {
    var enabled = false;
    var zoneState = state.zones.zonesById[props.id];
    if (!lodash_1.isNil(zoneState) && bsDmZone_1.dmZoneTypeUsesAudioDecoder(zoneState.type)) {
        enabled = utils_1.audioOutputAssignmentsHaveActiveAudio(zoneState.properties.audioOutputAssignments);
    }
    return enabled;
}
exports.dmIsAudioEnabledInZone = dmIsAudioEnabledInZone;
function dmGetZoneByTag(state, props) {
    var zones = state.zones.zonesById;
    var zoneId = lodash_1.find(Object.keys(zones), function (id) { return zones[id].tag === props.tag; });
    return lodash_1.isNil(zoneId) ? null : selGetZoneById(state, { id: zoneId });
}
exports.dmGetZoneByTag = dmGetZoneByTag;
function dmGetMediaStateIdsForZone(state, props) {
    var mediaStates = state.mediaStates.mediaStatesById;
    return Object.keys(mediaStates).filter(function (id) {
        var mediaState = mediaStates[id];
        return mediaState.container.type === bsDmInterfaces_1.MediaStateContainerType.Zone && mediaState.container.id === props.id;
    });
}
exports.dmGetMediaStateIdsForZone = dmGetMediaStateIdsForZone;
var fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap = function (containerId, mediaStateMap) {
    var getContainedMediaStateIds = function (ctrId) {
        return Object.keys(mediaStateMap).filter(function (id) { return mediaStateMap[id].container.id === ctrId; });
    };
    var getSuperStateIds = function (mediaStateIds) {
        return mediaStateIds.filter(function (id) { return mediaStateMap[id].contentItem.type === bscore_1.ContentItemType.SuperState; });
    };
    var targetableMediaStateIds = getContainedMediaStateIds(containerId);
    var superStateIds = getSuperStateIds(targetableMediaStateIds);
    while (superStateIds.length) {
        var superStateId = superStateIds.shift();
        var containedIds = getContainedMediaStateIds(superStateId);
        targetableMediaStateIds.push.apply(targetableMediaStateIds, containedIds);
        superStateIds.push.apply(superStateIds, getSuperStateIds(containedIds));
    }
    return targetableMediaStateIds;
};
exports.fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap = fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap;
var selGetTargetableMediaStateIdsForContainer = reselect_1.createSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, exports.fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap);
function dmGetAllTargetableMediaStateIdsForContainer(state, props) {
    return selGetTargetableMediaStateIdsForContainer(state, props);
}
exports.dmGetAllTargetableMediaStateIdsForContainer = dmGetAllTargetableMediaStateIdsForContainer;
function dmGetEventIdsForZone(state, props) {
    var events = state.events;
    var mediaStateIdSet = new Set(dmGetMediaStateIdsForZone(state, props));
    return Object.keys(events)
        .filter(function (id) { return mediaStateIdSet.has(events[id].mediaStateId)
        && !selectorMediaState_1.dmIsMediaListGlobalIntrinsicEvent(state, props.id, events[id]); });
}
exports.dmGetEventIdsForZone = dmGetEventIdsForZone;
function dmGetZoneIdForMediaStateId(state, props) {
    var mediaState = state.mediaStates.mediaStatesById[props.id];
    if (!lodash_1.isNil(mediaState)) {
        var containerType = mediaState.container.type;
        while (containerType !== bsDmInterfaces_1.MediaStateContainerType.Zone) {
            mediaState = state.mediaStates.mediaStatesById[mediaState.container.id];
            if (!lodash_1.isNil(mediaState)) {
                containerType = mediaState.container.type;
            }
            else {
                return null;
            }
        }
        return mediaState.container.id;
    }
    return null;
}
exports.dmGetZoneIdForMediaStateId = dmGetZoneIdForMediaStateId;
function dmGetZoneIdForZoneOrMediaStateId(state, props) {
    return state.zones.allZones.indexOf(props.id) >= 0 ? props.id : dmGetZoneIdForMediaStateId(state, props);
}
exports.dmGetZoneIdForZoneOrMediaStateId = dmGetZoneIdForZoneOrMediaStateId;
function dmGetZoneIdForContainer(state, props) {
    var zoneId = props.type === bsDmInterfaces_1.MediaStateContainerType.Zone ? props.id : dmGetZoneIdForMediaStateId(state, props);
    return lodash_1.isNil(zoneId) ? null : zoneId;
}
exports.dmGetZoneIdForContainer = dmGetZoneIdForContainer;
function dmGetZoneStateForContainer(state, props) {
    var zoneId = dmGetZoneIdForContainer(state, props);
    return lodash_1.isNil(zoneId) ? null : dmGetZoneStateById(state, { id: zoneId });
}
exports.dmGetZoneStateForContainer = dmGetZoneStateForContainer;
function dmGetZoneForMediaStateId(state, props) {
    var zoneId = dmGetZoneIdForMediaStateId(state, props);
    return lodash_1.isNil(zoneId) ? null : dmGetZoneById(state, { id: zoneId });
}
exports.dmGetZoneForMediaStateId = dmGetZoneForMediaStateId;
function dmGetZoneTypeForMediaStateId(state, props) {
    var zoneId = dmGetZoneIdForMediaStateId(state, props);
    return lodash_1.isNil(zoneId) ? null : dmGetZoneTypeById(state, { id: zoneId });
}
exports.dmGetZoneTypeForMediaStateId = dmGetZoneTypeForMediaStateId;
function dmGetZoneIdForEventId(state, props) {
    var eventState = selectorEvent_1.dmGetEventStateById(state, props);
    if (!lodash_1.isNil(eventState)) {
        return dmGetZoneIdForMediaStateId(state, { id: eventState.mediaStateId });
    }
    return null;
}
exports.dmGetZoneIdForEventId = dmGetZoneIdForEventId;
function dmGetZoneIdForTransitionId(state, props) {
    var transitionState = selectorTransition_1.dmGetTransitionStateById(state, props);
    if (!lodash_1.isNil(transitionState)) {
        return dmGetZoneIdForEventId(state, { id: transitionState.eventId });
    }
    return null;
}
exports.dmGetZoneIdForTransitionId = dmGetZoneIdForTransitionId;
function dmGetZoneIdForCommandId(state, props) {
    var commandState = selectorCommand_1.dmGetCommandStateById(state, props);
    if (!lodash_1.isNil(commandState)) {
        var commandSequenceObject = selectorCommand_1.dmGetCommandSequenceStateById(state, { id: commandState.sequenceId });
        if (!lodash_1.isNil(commandSequenceObject)) {
            switch (commandSequenceObject.type) {
                case bscore_1.CommandSequenceType.StateEntry:
                case bscore_1.CommandSequenceType.StateExit:
                case bscore_1.CommandSequenceType.SequenceItemNext:
                case bscore_1.CommandSequenceType.SequenceItemPrevious:
                    return dmGetZoneIdForMediaStateId(state, { id: commandSequenceObject.parentId });
                case bscore_1.CommandSequenceType.Event:
                    return dmGetZoneIdForEventId(state, { id: commandSequenceObject.parentId });
                case bscore_1.CommandSequenceType.Transition:
                    return dmGetZoneIdForTransitionId(state, { id: commandSequenceObject.parentId });
            }
        }
    }
    return null;
}
exports.dmGetZoneIdForCommandId = dmGetZoneIdForCommandId;
function dmGetZoneTypeById(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? null : zoneState.type;
}
exports.dmGetZoneTypeById = dmGetZoneTypeById;
function dmGetZoneNonInteractiveById(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? false : zoneState.nonInteractive;
}
exports.dmGetZoneNonInteractiveById = dmGetZoneNonInteractiveById;
function dmIsZoneContentNonInteractive(state, props) {
    return !lodash_1.isNil(selectorPlaylist_1.dmGetZoneSimplePlaylist(state, props));
}
exports.dmIsZoneContentNonInteractive = dmIsZoneContentNonInteractive;
function dmIsZoneInteractiveCompatible(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? false : bsDmZone_1.dmCanZoneTypeBeInteractive(zoneState.type);
}
exports.dmIsZoneInteractiveCompatible = dmIsZoneInteractiveCompatible;
function dmIsZoneNonInteractiveCompatible(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? false : bsDmZone_1.dmCanZoneTypeBeNonInteractive(zoneState.type);
}
exports.dmIsZoneNonInteractiveCompatible = dmIsZoneNonInteractiveCompatible;
function dmGetZonePropertiesById(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    return lodash_1.isNil(zoneState) ? null : lodash_1.cloneDeep(zoneState.properties);
}
exports.dmGetZonePropertiesById = dmGetZonePropertiesById;
function dmGetZonePropertiesByName(state, props) {
    var zones = state.zones.zonesById;
    var zoneId = lodash_1.find(Object.keys(zones), function (id) { return zones[id].name === props.name; });
    return lodash_1.isNil(zoneId) ? null : lodash_1.cloneDeep(zones[zoneId].properties);
}
exports.dmGetZonePropertiesByName = dmGetZonePropertiesByName;
function dmGetZonePropertiesByTag(state, props) {
    var zones = state.zones.zonesById;
    var zoneId = lodash_1.find(Object.keys(zones), function (id) { return zones[id].tag === props.tag; });
    return lodash_1.isNil(zoneId) ? null : lodash_1.cloneDeep(zones[zoneId].properties);
}
exports.dmGetZonePropertiesByTag = dmGetZonePropertiesByTag;
function dmGetZoneAudioOutputSpecificationById(state, props) {
    var zoneState = state.zones.zonesById[props.id];
    if (!lodash_1.isNil(zoneState) && bsDmZone_1.dmZoneTypeUsesAudioDecoder(zoneState.type)) {
        return bsDmZone_1.dmGetAudioOutputSpecificationFromMap(zoneState.properties.audioOutputAssignments);
    }
    return null;
}
exports.dmGetZoneAudioOutputSpecificationById = dmGetZoneAudioOutputSpecificationById;
function dmIsValidAssetTypeForContainer(state, props) {
    var zoneId = dmGetZoneIdForZoneOrMediaStateId(state, { id: props.container.id });
    if (!lodash_1.isNil(zoneId)) {
        var zoneType = dmGetZoneTypeById(state, { id: zoneId });
        if (bsDmContentItems_1.dmIsMediaSequenceContainer(props.container)) {
            return bsDmAssetItems_1.dmIsValidAssetInfoForMediaListOrPlayFile(props.assetInfo, zoneType);
        }
        var zone = dmGetZoneStateById(state, { id: zoneId });
        if (!lodash_1.isNil(zone) && zone.nonInteractive) {
            return bsDmAssetItems_1.dmIsValidAssetInfoForPlaylist(props.assetInfo, zoneType);
        }
        else {
            return bsDmAssetItems_1.dmIsValidAssetInfoForZone(props.assetInfo, zoneType);
        }
    }
    return false;
}
exports.dmIsValidAssetTypeForContainer = dmIsValidAssetTypeForContainer;
function dmIsValidContentItemTypeForContainer(state, props) {
    var zoneId = dmGetZoneIdForZoneOrMediaStateId(state, { id: props.container.id });
    if (!lodash_1.isNil(zoneId)) {
        var zoneType = dmGetZoneTypeById(state, { id: zoneId });
        if (bsDmContentItems_1.dmIsMediaSequenceContainer(props.container)) {
            return bsDmContentItems_1.dmIsValidContentItemTypeForMediaListOrPlayFile(props.contentItemType, zoneType);
        }
        var zone = dmGetZoneStateById(state, { id: zoneId });
        if (!lodash_1.isNil(zone) && zone.nonInteractive) {
            return bsDmContentItems_1.dmIsValidContentItemTypeForPlaylist(props.contentItemType, zoneType);
        }
        else {
            return bsDmContentItems_1.dmIsValidContentItemTypeForZone(props.contentItemType, zoneType);
        }
    }
    return false;
}
exports.dmIsValidContentItemTypeForContainer = dmIsValidContentItemTypeForContainer;
function dmValidateZone(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Zone, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Zone, props.id);
    var zoneState = dmGetZoneStateById(state, props);
    if (!lodash_1.isNil(zoneState)) {
        if (zoneState.type === bscore_1.ZoneType.Ticker || zoneState.type === bscore_1.ZoneType.Clock) {
            var zoneProperties = zoneState.properties;
            var error = selectorValidation_1.dmValidateDmWidget(state, zoneProperties.widget, __assign(__assign({}, entityDetails), { entityProperty: 'widget' }));
            if (!lodash_1.isNil(error)) {
                result.errorList.push(error);
            }
        }
        var mediaStateIds = dmGetMediaStateIdsForZone(state, props);
        var componentErrors = mediaStateIds.reduce(function (acc, mediaStateId) {
            var cmdResult = selectorMediaState_1.dmDoValidateMediaState(state, { id: mediaStateId }, true);
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, []);
        if (componentErrors.length) {
            result.componentErrors = componentErrors;
            result.ok = false;
        }
        result.ok = result.ok && result.errorList.length === 0;
    }
    return result;
}
exports.dmValidateZone = dmValidateZone;
function dmGetZonesForSign(state) {
    return state.zones.allZones;
}
exports.dmGetZonesForSign = dmGetZonesForSign;
function dmGetZoneCount(state) {
    return state.zones.allZones.length;
}
exports.dmGetZoneCount = dmGetZoneCount;
function dmGetZoneIdsForZoneType(state, props) {
    var zones = state.zones.zonesById;
    return state.zones.allZones.filter(function (id) { return zones[id].type === props.type; });
}
exports.dmGetZoneIdsForZoneType = dmGetZoneIdsForZoneType;
var selGetZoneTagMap = reselect_1.createSelector(function (dmState) { return dmState.zones.zonesById; }, function (zones) {
    var tagMap = {};
    Object.keys(zones).forEach(function (id) {
        var zone = zones[id];
        if (zone.tag) {
            tagMap[zone.tag] = id;
        }
    });
    return tagMap;
});
function dmGetZoneTagMap(state) {
    return selGetZoneTagMap(state);
}
exports.dmGetZoneTagMap = dmGetZoneTagMap;
function dmGetZoneCommandIdsForZone(state, props) {
    return Object.keys(state.commands.commandsById).filter(function (id) {
        var command = selectorCommand_1.dmGetCommandStateById(state, { id: id });
        return command.operations
            .some(function (op) { return bsDmCommands_1.dmIsZoneCommandData(op.data) && op.data.zoneId === props.id; });
    });
}
exports.dmGetZoneCommandIdsForZone = dmGetZoneCommandIdsForZone;
function dmGetNonContainedZoneCommandIdsForZone(state, props) {
    return dmGetZoneCommandIdsForZone(state, props)
        .filter(function (id) { return dmGetZoneIdForCommandId(state, { id: id }) !== props.id; });
}
exports.dmGetNonContainedZoneCommandIdsForZone = dmGetNonContainedZoneCommandIdsForZone;
function dmGetNextMediaStateTagIndexForZone(state, props) {
    var indexValue = state.zones.zoneTagIndices[props.id];
    return lodash_1.isNil(indexValue) ? 0 : indexValue;
}
exports.dmGetNextMediaStateTagIndexForZone = dmGetNextMediaStateTagIndexForZone;
function dmGetZoneLayerStateById(state, props) {
    var zoneLayer = state.zones.zoneLayersById[props.id];
    return lodash_1.isNil(zoneLayer) ? null : zoneLayer;
}
exports.dmGetZoneLayerStateById = dmGetZoneLayerStateById;
function dmGetZoneLayerById(state, props) {
    return selGetZoneLayerById(state, props);
}
exports.dmGetZoneLayerById = dmGetZoneLayerById;
function dmGetZoneLayerIdsForZoneId(state, props) {
    return selGetZoneLayerIdsForZoneId(state, props);
}
exports.dmGetZoneLayerIdsForZoneId = dmGetZoneLayerIdsForZoneId;
function dmGetZoneLayersForZoneId(state, props) {
    return selGetZoneLayersForZoneId(state, props);
}
exports.dmGetZoneLayersForZoneId = dmGetZoneLayersForZoneId;
function dmGetZonesForLayer(state, layerId) {
    return state.zones.zoneLayersById[layerId].zoneSequence;
}
exports.dmGetZonesForLayer = dmGetZonesForLayer;
function dmGetZoneLayerSequence(state) {
    return state.zones.zoneLayerSequence;
}
exports.dmGetZoneLayerSequence = dmGetZoneLayerSequence;
function dmGetZoneLayerIdByTypeAndIndex(state, props) {
    return dmGetZoneLayerInSignByLayerType(state.zones.zoneLayersById, props.type, lodash_1.isNil(props.index) ? 0 : props.index);
}
exports.dmGetZoneLayerIdByTypeAndIndex = dmGetZoneLayerIdByTypeAndIndex;
function dmGetZoneLayerByTypeAndIndex(state, props) {
    var zoneLayerId = dmGetZoneLayerIdByTypeAndIndex(state, props);
    return lodash_1.isNil(zoneLayerId) ? null : dmGetZoneLayerById(state, { id: zoneLayerId });
}
exports.dmGetZoneLayerByTypeAndIndex = dmGetZoneLayerByTypeAndIndex;
function dmCanAddZone(state, props) {
    switch (props.type) {
        case bscore_1.ZoneType.Images:
        case bscore_1.ZoneType.Ticker:
        case bscore_1.ZoneType.Clock:
            return bscore_1.bscPlayerModelHasFeature(selectorSign_1.dmGetSignPlayerModel(state), bscore_1.ModelFeature.Images);
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            return dmAreAudioDecodersAvailableForZone(state, props.type);
        case bscore_1.ZoneType.BackgroundImage:
            return dmCanAddBackgroundImageZone(state);
        case bscore_1.ZoneType.VideoOnly:
        case bscore_1.ZoneType.VideoOrImages: {
            return !lodash_1.isNil(dmGetAvailableVideoZoneLayer(state, props))
                && (!dmIsAudioSpecifiedBySetZoneParams(props) || dmAreAudioDecodersAvailableForZone(state, props.type));
        }
        case bscore_1.ZoneType.Control:
            return true;
    }
    return false;
}
exports.dmCanAddZone = dmCanAddZone;
function dmGetCanAddZone(state, props) {
    var result = {
        canSetZone: true,
        zoneLayerIdParams: {},
    };
    switch (props.type) {
        case bscore_1.ZoneType.Images:
        case bscore_1.ZoneType.Ticker:
        case bscore_1.ZoneType.Clock:
            if (bscore_1.bscPlayerModelHasFeature(selectorSign_1.dmGetSignPlayerModel(state), bscore_1.ModelFeature.Images)) {
                result.zoneLayerIdParams.graphicsLayerId = dmGetGraphicsZoneLayerIdInSign(state);
            }
            else {
                result.canSetZone = false;
            }
            break;
        case bscore_1.ZoneType.EnhancedAudio:
            if (!bscore_1.bscPlayerModelHasFeature(selectorSign_1.dmGetSignPlayerModel(state), bscore_1.ModelFeature.EnhancedAudio)) {
                result.canSetZone = false;
                break;
            }
        case bscore_1.ZoneType.AudioOnly:
            if (dmAreAudioDecodersAvailableForZone(state, props.type)) {
                result.zoneLayerIdParams.audioLayerId = dmGetAudioZoneLayerIdInSign(state);
            }
            else {
                result.canSetZone = false;
            }
            break;
        case bscore_1.ZoneType.VideoOrImages:
            result.zoneLayerIdParams.graphicsLayerId = dmGetGraphicsZoneLayerIdInSign(state);
        case bscore_1.ZoneType.VideoOnly:
        case bscore_1.ZoneType.BackgroundImage: {
            if (props.type !== bscore_1.ZoneType.BackgroundImage
                && dmIsAudioSpecifiedBySetZoneParams(props)
                && !dmAreAudioDecodersAvailableForZone(state, props.type)) {
                result.canSetZone = false;
            }
            else {
                var videoLayerId = dmGetAvailableVideoZoneLayer(state, props);
                if (!lodash_1.isNil(videoLayerId)) {
                    result.zoneLayerIdParams.videoLayerId = videoLayerId;
                }
                else {
                    result.canSetZone = false;
                }
            }
            break;
        }
        case bscore_1.ZoneType.Control:
            result.canSetZone = true;
            break;
        default:
            result.canSetZone = false;
            break;
    }
    return result;
}
exports.dmGetCanAddZone = dmGetCanAddZone;
function dmCanChangeZoneType(state, props) {
    return dmGetCanChangeZoneType(state, props).canSetZone;
}
exports.dmCanChangeZoneType = dmCanChangeZoneType;
function dmGetCanChangeZoneType(state, props) {
    var result = { canSetZone: false };
    var currentZone = dmGetZoneStateById(state, props);
    if (!lodash_1.isNil(currentZone)) {
        var targetZoneType = props.type;
        if (dmIsContentValidOnZoneTypeChange(state, currentZone, targetZoneType)) {
            if (currentZone.type !== targetZoneType) {
                if (!bsDmZone_1.dmIsVideoZoneType(targetZoneType)) {
                    if (bsDmZone_1.dmIsAudioZoneType(targetZoneType)) {
                        result.canSetZone = dmAreAudioDecodersAvailableForZone(state, targetZoneType, currentZone.type);
                        if (result.canSetZone && targetZoneType === bscore_1.ZoneType.EnhancedAudio) {
                            result.canSetZone = bscore_1.bscPlayerModelHasFeature(selectorSign_1.dmGetSignPlayerModel(state), bscore_1.ModelFeature.EnhancedAudio);
                        }
                    }
                    else {
                        result.canSetZone = targetZoneType === bscore_1.ZoneType.Control ||
                            bscore_1.bscPlayerModelHasFeature(selectorSign_1.dmGetSignPlayerModel(state), bscore_1.ModelFeature.Images);
                    }
                    if (result.canSetZone) {
                        result.zoneLayerIdParams = dmGetNonVideoZoneLayerIdsForZoneType(state, targetZoneType);
                    }
                }
                else {
                    if (targetZoneType === bscore_1.ZoneType.BackgroundImage) {
                        return dmGetCanChangeZoneTypeToBackgroundImage(state, props.id);
                    }
                    else {
                        if (!dmIsAudioSpecifiedBySetZoneParams(props)
                            || dmAreAudioDecodersAvailableForZone(state, targetZoneType, currentZone.type)) {
                            if (!bsDmZone_1.dmIsVideoZoneType(currentZone.type)) {
                                return dmGetCanChangeZoneTypeFromNonVideoToVideo(state, props);
                            }
                            else {
                                return dmGetCanChangeZoneTypeFromVideoToVideo(state, props);
                            }
                        }
                    }
                }
            }
            else {
                if (props.type === bscore_1.ZoneType.VideoOrImages || props.type === bscore_1.ZoneType.VideoOnly) {
                    return dmGetCanChangeZoneTypeFromVideoToVideo(state, props);
                }
                else {
                    result.canSetZone = true;
                    result.zoneLayerIdParams = dmGetZoneLayerIdsForZone(state, props.id);
                }
            }
        }
    }
    return result;
}
exports.dmGetCanChangeZoneType = dmGetCanChangeZoneType;
function dmIsContentValidOnZoneTypeChange(state, zone, targetZoneType) {
    var mediaStates = state.mediaStates.mediaStatesById;
    return !Object.keys(mediaStates).some(function (mediaStateId) {
        var mediaState = mediaStates[mediaStateId];
        var containerZoneId = dmGetZoneIdForZoneOrMediaStateId(state, { id: mediaState.container.id });
        return containerZoneId === zone.id
            && !(zone.nonInteractive ?
                bsDmContentItems_1.dmIsValidContentItemTypeForPlaylistChangeZoneType(mediaState.contentItem.type, targetZoneType, zone.type) :
                bsDmContentItems_1.dmIsValidContentItemTypeForZone(mediaState.contentItem.type, targetZoneType));
    });
}
function dmIsAudioSpecifiedBySetZoneParams(params) {
    return lodash_1.isNil(params.zoneHasAudio) || params.zoneHasAudio;
}
function dmGetCanChangeZoneTypeToBackgroundImage(state, zoneId) {
    var result = { canSetZone: false };
    if (!selectorSign_1.dmIsDolbyVisionEnabled(state) && dmGetMediaStateIdsForZone(state, { id: zoneId }).length <= 1) {
        var currentZoneType = dmGetZoneTypeById(state, { id: zoneId });
        if (!lodash_1.isNil(currentZoneType)) {
            if (bsDmZone_1.dmIsVideoZoneType(currentZoneType)) {
                var videoZoneLayer = dmGetVideoZoneLayerForVideoZone(state, zoneId);
                if (!lodash_1.isNil(videoZoneLayer)) {
                    if (videoZoneLayer.zoneSequence.length === 1) {
                        return {
                            canSetZone: true,
                            zoneLayerIdParams: { videoLayerId: videoZoneLayer.id },
                        };
                    }
                }
            }
            else {
                var unusedVideoZoneLayer = dmGetUnusedVideoLayer(state);
                if (!lodash_1.isNil(unusedVideoZoneLayer)) {
                    return {
                        canSetZone: true,
                        zoneLayerIdParams: { videoLayerId: unusedVideoZoneLayer.id },
                    };
                }
            }
        }
    }
    return result;
}
function dmGetCanChangeZoneTypeFromNonVideoToVideo(state, targetParams) {
    var result = { canSetZone: false };
    var unusedVideoZoneLayer = dmGetUnusedVideoLayer(state);
    var targetZoneLayerIdParams = lodash_1.isNil(targetParams.zoneLayerIdParams) ? {} : targetParams.zoneLayerIdParams;
    if (!lodash_1.isNil(unusedVideoZoneLayer)
        && (lodash_1.isNil(targetZoneLayerIdParams.videoLayerId)
            || (targetZoneLayerIdParams.videoLayerId === unusedVideoZoneLayer.id))) {
        result.canSetZone = true;
        result.zoneLayerIdParams = { videoLayerId: unusedVideoZoneLayer.id };
    }
    else {
        var availableVideoZoneLayer = dmGetAvailableVideoLayer(state, targetParams.allowTransitionToMosaic);
        if (!lodash_1.isNil(availableVideoZoneLayer)
            && (lodash_1.isNil(targetZoneLayerIdParams.videoLayerId)
                || (targetZoneLayerIdParams.videoLayerId === availableVideoZoneLayer.id))) {
            result.canSetZone = true;
            result.zoneLayerIdParams = { videoLayerId: availableVideoZoneLayer.id };
        }
    }
    if (result.canSetZone && targetParams.type === bscore_1.ZoneType.VideoOrImages) {
        result.zoneLayerIdParams.graphicsLayerId = dmGetGraphicsZoneLayerIdInSign(state);
    }
    return result;
}
function dmGetCanChangeZoneTypeFromVideoToVideo(state, props) {
    var result = { canSetZone: false };
    var existingLayers = dmGetZoneLayerIdsForZone(state, props.id);
    if (!lodash_1.isNil(props.zoneLayerIdParams)
        && !lodash_1.isNil(props.zoneLayerIdParams.videoLayerId)
        && props.zoneLayerIdParams.videoLayerId !== existingLayers.videoLayerId) {
        if (dmCanAddVideoZoneToZoneLayer(state, props.zoneLayerIdParams.videoLayerId, props.type, props.allowTransitionToMosaic)) {
            result.canSetZone = true;
            result.zoneLayerIdParams = { videoLayerId: props.zoneLayerIdParams.videoLayerId };
        }
    }
    else {
        result.canSetZone = true;
        result.zoneLayerIdParams = { videoLayerId: existingLayers.videoLayerId };
    }
    if (result.canSetZone && props.type === bscore_1.ZoneType.VideoOrImages) {
        result.zoneLayerIdParams.graphicsLayerId = dmGetGraphicsZoneLayerIdInSign(state);
    }
    return result;
}
function dmGetZonePropertyAssetItemIds(state, props) {
    var assetIds = [];
    var zoneState = state.zones.zonesById[props.id];
    if (!lodash_1.isNil(zoneState)
        && (zoneState.type === bscore_1.ZoneType.Ticker || zoneState.type === bscore_1.ZoneType.Clock)) {
        var zoneProperties = zoneState.properties;
        if (bscore_1.bscIsValidAssetId(zoneProperties.widget.backgroundBitmapAssetId)) {
            assetIds.push(zoneProperties.widget.backgroundBitmapAssetId);
        }
        var fontAssetId = bsDmContentItems_1.dmGetWidgetCustomFontAssetId(zoneProperties.widget);
        if (!lodash_1.isNil(fontAssetId)) {
            assetIds.push(fontAssetId);
        }
    }
    return assetIds;
}
exports.dmGetZonePropertyAssetItemIds = dmGetZonePropertyAssetItemIds;
function dmGetAvailableVideoZoneLayer(state, props) {
    if (dmGetVideoZoneCount(state) > 0 && selectorSign_1.dmIsDolbyVisionEnabled(state)) {
        return null;
    }
    var videoLayerIdsToTry = [];
    if (!lodash_1.isNil(props.zoneLayerIdParams) && !lodash_1.isNil(props.zoneLayerIdParams.videoLayerId)) {
        videoLayerIdsToTry.push(props.zoneLayerIdParams.videoLayerId);
    }
    if (videoLayerIdsToTry.length === 0) {
        videoLayerIdsToTry = dmGetVideoZoneLayerIdsInSign(state);
    }
    for (var _i = 0, videoLayerIdsToTry_1 = videoLayerIdsToTry; _i < videoLayerIdsToTry_1.length; _i++) {
        var videoLayerId = videoLayerIdsToTry_1[_i];
        if (dmCanAddVideoZoneToZoneLayer(state, videoLayerId, props.type, props.allowTransitionToMosaic)) {
            return videoLayerId;
        }
    }
    return null;
}
function dmCanAddVideoZoneToZoneLayer(state, zoneLayerId, type, allowTransitionToMosaic) {
    var zoneLayer = dmGetZoneLayerStateById(state, { id: zoneLayerId });
    if (bsDmZone_1.dmIsVideoZoneLayer(zoneLayer)) {
        var numberOfZonesInLayer = zoneLayer.zoneSequence.length;
        if (numberOfZonesInLayer === 0) {
            return true;
        }
        if (selectorSign_1.dmIsDolbyVisionEnabled(state)) {
            return false;
        }
        if (lodash_1.isNil(allowTransitionToMosaic) || !allowTransitionToMosaic) {
            return false;
        }
        if (type === bscore_1.ZoneType.BackgroundImage) {
            return false;
        }
        var zoneId = zoneLayer.zoneSequence[0];
        var zoneState = dmGetZoneStateById(state, { id: zoneId });
        if (zoneState.type === bscore_1.ZoneType.BackgroundImage) {
            return false;
        }
        if (bsDmZone_1.dmIsMosaicModeSupportedByVideoZoneLayer(zoneLayer)) {
            var maxZonesInLayer = bsDmZone_1.dmGetMaxVideoZoneCountByDecoderByModel(selectorSign_1.dmGetSignPlayerModel(state), zoneLayer.zoneLayerSpecificProperties.type);
            return numberOfZonesInLayer < maxZonesInLayer;
        }
    }
    return false;
}
function dmGetZoneLayerIdsInSign(state) {
    return bsDmZone_1.dmGetZoneLayerIdsByType(state.zones.zoneLayersById);
}
exports.dmGetZoneLayerIdsInSign = dmGetZoneLayerIdsInSign;
function dmGetVideoZoneLayerIdsInSign(state) {
    return Object.keys(state.zones.zoneLayersById)
        .filter(function (id) { return state.zones.zoneLayersById[id].type === bscore_1.ZoneLayerType.Video; });
}
exports.dmGetVideoZoneLayerIdsInSign = dmGetVideoZoneLayerIdsInSign;
function dmGetGraphicsZoneLayerIdInSign(state) {
    return dmGetZoneLayerInSignByLayerType(state.zones.zoneLayersById, bscore_1.ZoneLayerType.Graphics);
}
exports.dmGetGraphicsZoneLayerIdInSign = dmGetGraphicsZoneLayerIdInSign;
function dmGetAudioZoneLayerIdInSign(state) {
    return dmGetZoneLayerInSignByLayerType(state.zones.zoneLayersById, bscore_1.ZoneLayerType.Audio);
}
exports.dmGetAudioZoneLayerIdInSign = dmGetAudioZoneLayerIdInSign;
function dmGetInvisibleZoneLayerIdInSign(state) {
    return dmGetZoneLayerInSignByLayerType(state.zones.zoneLayersById, bscore_1.ZoneLayerType.Invisible);
}
exports.dmGetInvisibleZoneLayerIdInSign = dmGetInvisibleZoneLayerIdInSign;
function dmGetZoneLayerInSignByLayerType(zoneLayerMap, type, index) {
    if (index === void 0) { index = 0; }
    var zoneLayerId = lodash_1.find(Object.keys(zoneLayerMap), function (id) {
        var zoneLayer = zoneLayerMap[id];
        return (type === zoneLayer.type
            && (!bsDmZone_1.dmIsVideoZoneLayer(zoneLayer) || zoneLayer.zoneLayerSpecificProperties.index === index));
    });
    return lodash_1.isNil(zoneLayerId) ? null : zoneLayerId;
}
function dmCanAddBackgroundImageZone(state) {
    var zoneLayerIdsInSign = dmGetZoneLayerIdsInSign(state);
    if (dmCanAddBackgroundImageZoneToLayer(state, zoneLayerIdsInSign.videoLayer1Id)) {
        return true;
    }
    else if (!lodash_1.isNil(zoneLayerIdsInSign.videoLayer2Id)) {
        return dmCanAddBackgroundImageZoneToLayer(state, zoneLayerIdsInSign.videoLayer2Id);
    }
    return false;
}
exports.dmCanAddBackgroundImageZone = dmCanAddBackgroundImageZone;
function dmCanAddBackgroundImageZoneToLayer(state, videoLayerId) {
    if (dmGetZoneCountByZoneType(state, bscore_1.ZoneType.BackgroundImage) > 0) {
        return false;
    }
    if (selectorSign_1.dmIsDolbyVisionEnabled(state)) {
        return false;
    }
    if (lodash_1.isString(videoLayerId)) {
        if (state.zones.zoneLayersById.hasOwnProperty(videoLayerId)) {
            var zoneLayer = state.zones.zoneLayersById[videoLayerId];
            return (zoneLayer.type === bscore_1.ZoneLayerType.Video && zoneLayer.zoneSequence.length === 0);
        }
    }
    return false;
}
exports.dmCanAddBackgroundImageZoneToLayer = dmCanAddBackgroundImageZoneToLayer;
function dmGetUnusedVideoLayer(state) {
    var unusedVideoZoneLayer = lodash_1.find(state.zones.zoneLayersById, function (zoneLayer) {
        return bsDmZone_1.dmIsVideoZoneLayer(zoneLayer) && zoneLayer.zoneSequence.length === 0;
    });
    return lodash_1.isNil(unusedVideoZoneLayer) ? null : unusedVideoZoneLayer;
}
exports.dmGetUnusedVideoLayer = dmGetUnusedVideoLayer;
function dmGetAvailableVideoLayer(state, allowTransitionToMosaic) {
    var availableVideoZoneLayer = lodash_1.find(Object.keys(state.zones.zoneLayersById), function (id) {
        return dmCanAddVideoZoneToZoneLayer(state, id, bscore_1.ZoneType.VideoOnly, allowTransitionToMosaic);
    });
    return lodash_1.isNil(availableVideoZoneLayer) ? null : state.zones.zoneLayersById[availableVideoZoneLayer];
}
exports.dmGetAvailableVideoLayer = dmGetAvailableVideoLayer;
function dmGetDefaultVideoLayer(state, allowTransitionToMosaic) {
    if (allowTransitionToMosaic === void 0) { allowTransitionToMosaic = false; }
    var availableZoneLayer = dmGetUnusedVideoLayer(state);
    if (lodash_1.isNil(availableZoneLayer) && allowTransitionToMosaic && !selectorSign_1.dmIsDolbyVisionEnabled(state)) {
        availableZoneLayer = dmGetAvailableVideoLayer(state, allowTransitionToMosaic);
    }
    return availableZoneLayer;
}
exports.dmGetDefaultVideoLayer = dmGetDefaultVideoLayer;
function dmGetVideoZoneLayerForVideoZone(state, zoneId) {
    var videoZoneLayer = lodash_1.find(state.zones.zoneLayersById, function (zoneLayer) {
        return zoneLayer.type === bscore_1.ZoneLayerType.Video && zoneLayer.zoneSequence.indexOf(zoneId) >= 0;
    });
    return lodash_1.isNil(videoZoneLayer) ? null : videoZoneLayer;
}
function dmGetZoneLayerMap(state) {
    return state.zones.zoneLayersById;
}
exports.dmGetZoneLayerMap = dmGetZoneLayerMap;
function dmGetZoneLayerIdsForZone(state, zoneId) {
    var zoneLayerMap = state.zones.zoneLayersById;
    var zoneLayerIdParams = {};
    for (var zoneLayerId in zoneLayerMap) {
        if (zoneLayerMap.hasOwnProperty(zoneLayerId)) {
            var zoneLayer = zoneLayerMap[zoneLayerId];
            if (zoneLayer.zoneSequence.indexOf(zoneId) >= 0) {
                switch (zoneLayer.type) {
                    case bscore_1.ZoneLayerType.Video:
                        zoneLayerIdParams.videoLayerId = zoneLayerId;
                        break;
                    case bscore_1.ZoneLayerType.Graphics:
                        zoneLayerIdParams.graphicsLayerId = zoneLayerId;
                        break;
                    case bscore_1.ZoneLayerType.Audio:
                        zoneLayerIdParams.audioLayerId = zoneLayerId;
                        break;
                    case bscore_1.ZoneLayerType.Invisible:
                        zoneLayerIdParams.invisibleLayerId = zoneLayerId;
                        break;
                }
            }
        }
    }
    return zoneLayerIdParams;
}
exports.dmGetZoneLayerIdsForZone = dmGetZoneLayerIdsForZone;
function dmGetNonVideoZoneLayerIdsForZoneType(state, type) {
    var zoneLayerIds = dmGetZoneLayerIdsInSign(state);
    var zoneLayerIdParams = {};
    switch (type) {
        case bscore_1.ZoneType.VideoOrImages:
        case bscore_1.ZoneType.Images:
        case bscore_1.ZoneType.Clock:
        case bscore_1.ZoneType.Ticker:
            zoneLayerIdParams.graphicsLayerId = zoneLayerIds.graphicsLayerId;
            break;
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            zoneLayerIdParams.audioLayerId = zoneLayerIds.audioLayerId;
            break;
        case bscore_1.ZoneType.Control:
            break;
    }
    return zoneLayerIdParams;
}
function dmAreAudioDecodersAvailableForZone(state, targetType, removedType) {
    var decodersReleased = lodash_1.isNil(removedType) ? 0 : bsDmZone_1.dmGetAudioDecoderCountForZoneType(removedType);
    var decodersAdded = bsDmZone_1.dmGetAudioDecoderCountForZoneType(targetType);
    return dmGetAvailableAudioDecoderCount(state) >= decodersAdded - decodersReleased;
}
exports.dmAreAudioDecodersAvailableForZone = dmAreAudioDecodersAvailableForZone;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsValidAssetItemForZone = exports.dmIsValidAssetInfoForZone = exports.dmIsValidAssetInfoForMediaListOrPlayFile = exports.dmIsValidAssetTypeForLiveText = exports.dmIsValidAssetItemForPlaylist = exports.dmIsValidAssetInfoForPlaylist = exports.dmIsFontAssetItem = void 0;
var bscore_1 = __webpack_require__(1);
var lodash_1 = __webpack_require__(0);
function dmIsFontAssetItem(assetItem) {
    return assetItem.assetType === bscore_1.AssetType.Content && assetItem.mediaType === bscore_1.MediaType.Font;
}
exports.dmIsFontAssetItem = dmIsFontAssetItem;
var VideoOrImagesPlaylistAssetTypeArray = [
    bscore_1.AssetType.HtmlSite, bscore_1.AssetType.BSNMediaFeed,
    bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var VideoOrImagesPlaylistAssetTypes = new Set(VideoOrImagesPlaylistAssetTypeArray);
var VideoOrImagesPlaylistMediaTypeArray = [
    bscore_1.MediaType.Video, bscore_1.MediaType.Audio, bscore_1.MediaType.Image,
];
var VideoOrImagesPlaylistMediaTypes = new Set(VideoOrImagesPlaylistMediaTypeArray);
var VideoOnlyPlaylistAssetTypeArray = [];
var VideoOnlyPlaylistAssetTypes = new Set(VideoOnlyPlaylistAssetTypeArray);
var VideoOnlyPlaylistMediaTypeArray = [
    bscore_1.MediaType.Video,
];
var VideoOnlyPlaylistMediaTypes = new Set(VideoOnlyPlaylistMediaTypeArray);
var ImagesPlaylistAssetTypeArray = [
    bscore_1.AssetType.HtmlSite, bscore_1.AssetType.BSNDataFeed, bscore_1.AssetType.BSNMediaFeed,
    bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var ImagesPlaylistAssetTypes = new Set(ImagesPlaylistAssetTypeArray);
var ImagesPlaylistMediaTypeArray = [
    bscore_1.MediaType.Image,
];
var ImagesPlaylistMediaTypes = new Set(ImagesPlaylistMediaTypeArray);
var AudioPlaylistAssetTypeArray = [
    bscore_1.AssetType.BSNMediaFeed, bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var AudioPlaylistAssetTypes = new Set(AudioPlaylistAssetTypeArray);
var AudioPlaylistMediaTypeArray = [
    bscore_1.MediaType.Audio,
];
var AudioPlaylistMediaTypes = new Set(AudioPlaylistMediaTypeArray);
var TickerPlaylistAssetTypeArray = [
    bscore_1.AssetType.BSNDataFeed, bscore_1.AssetType.BSNMediaFeed, bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var TickerPlaylistAssetTypes = new Set(TickerPlaylistAssetTypeArray);
var TickerPlaylistMediaTypeArray = [
    bscore_1.MediaType.Text,
];
var TickerPlaylistMediaTypes = new Set(TickerPlaylistMediaTypeArray);
var BackgroundImagePlaylistMediaTypeArray = [
    bscore_1.MediaType.Image,
];
var BackgroundImagePlaylistMediaTypes = new Set(BackgroundImagePlaylistMediaTypeArray);
function dmIsValidAssetInfoForPlaylist(assetInfo, zoneType) {
    if (lodash_1.isNil(zoneType)) {
        return false;
    }
    var mediaType = lodash_1.isNil(assetInfo.mediaType) ? bscore_1.MediaType.Other : assetInfo.mediaType;
    switch (zoneType) {
        case bscore_1.ZoneType.VideoOrImages:
            return VideoOrImagesPlaylistAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && VideoOrImagesPlaylistMediaTypes.has(mediaType));
        case bscore_1.ZoneType.VideoOnly:
            return VideoOnlyPlaylistAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && VideoOnlyPlaylistMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Images:
            return ImagesPlaylistAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && ImagesPlaylistMediaTypes.has(mediaType));
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            return AudioPlaylistAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && AudioPlaylistMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Ticker:
            return TickerPlaylistAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && TickerPlaylistMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Clock:
        case bscore_1.ZoneType.Control:
            return false;
        case bscore_1.ZoneType.BackgroundImage:
            return assetInfo.assetType === bscore_1.AssetType.Content && BackgroundImagePlaylistMediaTypes.has(mediaType);
    }
    return false;
}
exports.dmIsValidAssetInfoForPlaylist = dmIsValidAssetInfoForPlaylist;
function dmIsValidAssetItemForPlaylist(assetItem, zoneType) {
    if (lodash_1.isNil(assetItem) || lodash_1.isNil(zoneType)) {
        return false;
    }
    var fileTypeInfo = bscore_1.bscGetAssetItemFileTypeInfo(assetItem);
    return dmIsValidAssetInfoForPlaylist(fileTypeInfo, zoneType);
}
exports.dmIsValidAssetItemForPlaylist = dmIsValidAssetItemForPlaylist;
var VideoOrImagesZoneAssetTypeArray = [
    bscore_1.AssetType.HtmlSite, bscore_1.AssetType.BSNMediaFeed,
    bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var VideoOrImagesZoneAssetTypes = new Set(VideoOrImagesZoneAssetTypeArray);
var VideoOrImagesZoneMediaTypeArray = [
    bscore_1.MediaType.Video, bscore_1.MediaType.Audio, bscore_1.MediaType.Image,
];
var VideoOrImagesZoneMediaTypes = new Set(VideoOrImagesZoneMediaTypeArray);
var VideoOnlyZoneAssetTypeArray = [];
var VideoOnlyZoneAssetTypes = new Set(VideoOnlyZoneAssetTypeArray);
var VideoOnlyZoneMediaTypeArray = [
    bscore_1.MediaType.Video,
];
var VideoOnlyZoneMediaTypes = new Set(VideoOnlyZoneMediaTypeArray);
var ImagesZoneAssetTypeArray = [
    bscore_1.AssetType.HtmlSite, bscore_1.AssetType.BSNDataFeed, bscore_1.AssetType.BSNMediaFeed,
    bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var ImagesZoneAssetTypes = new Set(ImagesZoneAssetTypeArray);
var ImagesZoneMediaTypeArray = [
    bscore_1.MediaType.Image,
];
var ImagesZoneMediaTypes = new Set(ImagesZoneMediaTypeArray);
var AudioZoneAssetTypeArray = [
    bscore_1.AssetType.BSNMediaFeed, bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var AudioZoneAssetTypes = new Set(AudioZoneAssetTypeArray);
var AudioZoneMediaTypeArray = [
    bscore_1.MediaType.Audio,
];
var AudioZoneMediaTypes = new Set(AudioZoneMediaTypeArray);
var TickerZoneAssetTypeArray = [
    bscore_1.AssetType.BSNDataFeed, bscore_1.AssetType.BSNMediaFeed, bscore_1.AssetType.BSNDynamicPlaylist, bscore_1.AssetType.BSNTaggedPlaylist,
];
var TickerZoneAssetTypes = new Set(TickerZoneAssetTypeArray);
var TickerZoneMediaTypeArray = [
    bscore_1.MediaType.Text,
];
var TickerZoneMediaTypes = new Set(TickerZoneMediaTypeArray);
var BackgroundImageZoneMediaTypeArray = [
    bscore_1.MediaType.Image,
];
var BackgroundImageZoneMediaTypes = new Set(BackgroundImageZoneMediaTypeArray);
function dmIsValidAssetTypeForLiveText(assetInfo) {
    var mediaType = lodash_1.isNil(assetInfo.mediaType) ? bscore_1.MediaType.Other : assetInfo.mediaType;
    return assetInfo.assetType === bscore_1.AssetType.Content && ImagesZoneMediaTypes.has(mediaType);
}
exports.dmIsValidAssetTypeForLiveText = dmIsValidAssetTypeForLiveText;
function dmIsValidAssetInfoForMediaListOrPlayFile(assetInfo, zoneType) {
    if (assetInfo.assetType === bscore_1.AssetType.Content) {
        var mediaListOrPlayFileMediaTypes = new Set(__spreadArrays(Array.from(VideoOrImagesZoneMediaTypes), Array.from(AudioZoneMediaTypes)));
        var mediaType = lodash_1.isNil(assetInfo.mediaType) ? bscore_1.MediaType.Other : assetInfo.mediaType;
        return dmIsValidAssetInfoForZone(assetInfo, zoneType) && mediaListOrPlayFileMediaTypes.has(mediaType);
    }
    return false;
}
exports.dmIsValidAssetInfoForMediaListOrPlayFile = dmIsValidAssetInfoForMediaListOrPlayFile;
function dmIsValidAssetInfoForZone(assetInfo, zoneType) {
    if (lodash_1.isNil(zoneType)) {
        return false;
    }
    var mediaType = lodash_1.isNil(assetInfo.mediaType) ? bscore_1.MediaType.Other : assetInfo.mediaType;
    switch (zoneType) {
        case bscore_1.ZoneType.VideoOrImages:
            return VideoOrImagesZoneAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && VideoOrImagesZoneMediaTypes.has(mediaType));
        case bscore_1.ZoneType.VideoOnly:
            return VideoOnlyZoneAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && VideoOnlyZoneMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Images:
            return ImagesZoneAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && ImagesZoneMediaTypes.has(mediaType));
        case bscore_1.ZoneType.AudioOnly:
        case bscore_1.ZoneType.EnhancedAudio:
            return AudioZoneAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && AudioZoneMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Ticker:
            return TickerZoneAssetTypes.has(assetInfo.assetType)
                || (assetInfo.assetType === bscore_1.AssetType.Content && TickerZoneMediaTypes.has(mediaType));
        case bscore_1.ZoneType.Clock:
        case bscore_1.ZoneType.Control:
            return false;
        case bscore_1.ZoneType.BackgroundImage:
            return assetInfo.assetType === bscore_1.AssetType.Content && BackgroundImageZoneMediaTypes.has(mediaType);
    }
    return false;
}
exports.dmIsValidAssetInfoForZone = dmIsValidAssetInfoForZone;
function dmIsValidAssetItemForZone(assetItem, zoneType) {
    if (lodash_1.isNil(assetItem) || lodash_1.isNil(zoneType)) {
        return false;
    }
    var fileTypeInfo = bscore_1.bscGetAssetItemFileTypeInfo(assetItem);
    return dmIsValidAssetInfoForZone(fileTypeInfo, zoneType);
}
exports.dmIsValidAssetItemForZone = dmIsValidAssetItemForZone;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCheckNewVideoModePluginFunctionValidity = exports.dmCheckNewParserPluginFunctionValidity = exports.dmCheckNewScriptPluginFileValidity = exports.dmCheckVideoModePluginValidity = exports.dmCheckParserPluginValidity = exports.dmCheckScriptPluginValidity = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
function dmCheckScriptPluginValidity(state, pluginId, errorDetails) {
    if (!lodash_1.isNil(pluginId)) {
        if (lodash_1.isNil(errorDetails)) {
            errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.Plugin, entityId: pluginId, entityProperty: 'scriptPlugins' };
        }
        var dmState = bsDmState_1.dmFilterDmState(state);
        var plugin = selectors_1.dmGetScriptPluginStateById(dmState, { id: pluginId });
        var error = checkBasicScriptPluginData(dmState, plugin, errorDetails);
        if (lodash_1.isNull(error)) {
            var nameMap = selectors_1.dmGetScriptPluginNameMap(dmState);
            var mapEntry = nameMap[plugin.name];
            if (!lodash_1.isNil(mapEntry) && mapEntry.length > 1) {
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.pluginNameInUse, 'The script plugin name duplicates the name of another plugin', errorDetails);
            }
        }
        if (lodash_1.isNull(error)) {
            var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: plugin.assetId });
            error = dmCheckNewScriptPluginFileValidity(dmState, assetItem, plugin.assetId, errorDetails);
        }
        return error;
    }
    return null;
}
exports.dmCheckScriptPluginValidity = dmCheckScriptPluginValidity;
function dmCheckParserPluginValidity(state, pluginId, errorDetails) {
    if (!lodash_1.isNil(pluginId)) {
        if (lodash_1.isNil(errorDetails)) {
            errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.Plugin, entityId: pluginId, entityProperty: 'parserPlugins' };
        }
        var dmState = bsDmState_1.dmFilterDmState(state);
        var plugin = selectors_1.dmGetParserPluginStateById(dmState, { id: pluginId });
        var error = checkBasicScriptPluginData(dmState, plugin, errorDetails);
        if (lodash_1.isNull(error)) {
            var nameMap = selectors_1.dmGetParserPluginNameMap(dmState);
            var mapEntry = nameMap[plugin.name];
            if (!lodash_1.isNil(mapEntry) && mapEntry.length > 1) {
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.pluginNameInUse, 'The parser plugin name duplicates the name of another plugin', errorDetails);
            }
        }
        if (lodash_1.isNull(error)) {
            if (!(plugin.parseFeedFunctionName || plugin.parseUVFunctionName || plugin.userAgentFunctionName)) {
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidPlugin, 'At least one function must be defined in parser plugin', errorDetails);
            }
        }
        if (lodash_1.isNull(error)) {
            var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: plugin.assetId });
            error = dmCheckNewScriptPluginFileValidity(dmState, assetItem, plugin.assetId, errorDetails);
        }
        if (lodash_1.isNull(error)) {
            error = dmCheckNewParserPluginFunctionValidity(dmState, plugin.parseFeedFunctionName, plugin.parseUVFunctionName, plugin.userAgentFunctionName, pluginId, errorDetails);
        }
        return error;
    }
    return null;
}
exports.dmCheckParserPluginValidity = dmCheckParserPluginValidity;
function dmCheckVideoModePluginValidity(state, pluginId, errorDetails) {
    if (!lodash_1.isNil(pluginId)) {
        if (lodash_1.isNil(errorDetails)) {
            errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.Plugin, entityId: pluginId, entityProperty: 'videoModePlugins' };
        }
        var dmState = bsDmState_1.dmFilterDmState(state);
        var plugin = selectors_1.dmGetVideoModePluginStateById(dmState, { id: pluginId });
        var error = checkBasicScriptPluginData(dmState, plugin, errorDetails);
        if (lodash_1.isNull(error)) {
            var nameMap = selectors_1.dmGetVideoModePluginNameMap(dmState);
            var mapEntry = nameMap[plugin.name];
            if (!lodash_1.isNil(mapEntry) && mapEntry.length > 1) {
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.pluginNameInUse, 'The videoMode plugin name duplicates the name of another plugin', errorDetails);
            }
        }
        if (lodash_1.isNull(error)) {
            if (!(plugin.functionName)) {
                error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidPlugin, 'A function must be defined in a videoMode plugin', errorDetails);
            }
        }
        if (lodash_1.isNull(error)) {
            var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: plugin.assetId });
            error = dmCheckNewScriptPluginFileValidity(dmState, assetItem, plugin.assetId, errorDetails);
        }
        if (lodash_1.isNull(error)) {
            error = dmCheckNewVideoModePluginFunctionValidity(dmState, plugin.functionName, pluginId, errorDetails);
        }
        return error;
    }
    return null;
}
exports.dmCheckVideoModePluginValidity = dmCheckVideoModePluginValidity;
function checkBasicScriptPluginData(dmState, plugin, errorDetails) {
    if (lodash_1.isNil(plugin)) {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'The plugin ID does not specify a valid plugin', errorDetails);
    }
    if (!lodash_1.isString(plugin.name) || plugin.name.length === 0) {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.nameNotSpecified, 'The plugin name is invalid', errorDetails);
    }
    if (plugin.name.indexOf(' ') >= 0) {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.valueNotSpecifiedOrInvalid, 'The plugin name cannot contain a space', errorDetails);
    }
    if (!utils_1.isValidBsDmId(plugin.assetId)) {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidPlugin, 'The plugin asset ID is invalid', errorDetails);
    }
    var assetItem = selectors_1.dmGetAssetItemById(dmState, { id: plugin.assetId });
    if (lodash_1.isNil(assetItem)) {
        return new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.assetNotFound, 'The asset ID was not found in the asset map', errorDetails);
    }
    return null;
}
function dmCheckNewScriptPluginFileValidity(state, newPluginAssetItem, ignoreId, errorDetails) {
    var error = null;
    if (!lodash_1.isNil(newPluginAssetItem) && !bscore_1.bscIsNullAssetItem(newPluginAssetItem)) {
        if (newPluginAssetItem.assetType !== bscore_1.AssetType.BrightScript) {
            error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CheckNewScriptPluginFileValidity: A BrightScript file asset must be specified', errorDetails);
        }
        else {
            var dmState_1 = bsDmState_1.dmFilterDmState(state);
            var scriptPluginAssetIds = selectors_1.dmGetScriptPluginAssetIds(dmState_1);
            var parserPluginAssetIds = selectors_1.dmGetParserPluginAssetIds(dmState_1);
            var videoModePluginAssetIds = selectors_1.dmGetVideoModePluginAssetIds(dmState_1);
            var pluginAssetIds = scriptPluginAssetIds.concat(parserPluginAssetIds, videoModePluginAssetIds);
            pluginAssetIds.some(function (id) {
                if (!(ignoreId && id === ignoreId)) {
                    var assetItem = selectors_1.dmGetAssetItemById(dmState_1, { id: id });
                    if (assetItem && assetItem.name.toUpperCase() === newPluginAssetItem.name.toUpperCase()) {
                        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.pluginNameInUse, newPluginAssetItem.name, errorDetails);
                        return true;
                    }
                }
                return false;
            });
        }
    }
    else {
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.assetNotFound, 'CheckNewScriptPluginFileValidity: Plugin assetItem is not valid', errorDetails);
    }
    return error;
}
exports.dmCheckNewScriptPluginFileValidity = dmCheckNewScriptPluginFileValidity;
function dmCheckNewParserPluginFunctionValidity(state, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName, ignoreParserPluginId, errorDetails) {
    if (parseFeedFunctionName === void 0) { parseFeedFunctionName = null; }
    if (parseUVFunctionName === void 0) { parseUVFunctionName = null; }
    if (userAgentFunctionName === void 0) { userAgentFunctionName = null; }
    if (ignoreParserPluginId === void 0) { ignoreParserPluginId = null; }
    var error = null;
    var dmState = bsDmState_1.dmFilterDmState(state);
    var functionNames = [];
    var parserPluginIds = selectors_1.dmGetParserPluginIds(dmState);
    parserPluginIds.forEach(function (id) {
        if (!(ignoreParserPluginId && id === ignoreParserPluginId)) {
            var plugin = selectors_1.dmGetParserPluginStateById(dmState, { id: id });
            if (!lodash_1.isNil(plugin)) {
                if (plugin.parseFeedFunctionName) {
                    functionNames.push(plugin.parseFeedFunctionName.toUpperCase());
                }
                if (plugin.parseUVFunctionName) {
                    functionNames.push(plugin.parseUVFunctionName.toUpperCase());
                }
                if (plugin.userAgentFunctionName) {
                    functionNames.push(plugin.userAgentFunctionName.toUpperCase());
                }
            }
        }
    });
    if (parseFeedFunctionName && functionNames.indexOf(parseFeedFunctionName.toUpperCase()) >= 0) {
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.parserPluginFunctionNameInUse, parseFeedFunctionName, errorDetails);
    }
    else if (parseUVFunctionName && functionNames.indexOf(parseUVFunctionName.toUpperCase()) >= 0) {
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.parserPluginFunctionNameInUse, parseUVFunctionName, errorDetails);
    }
    else if (userAgentFunctionName && functionNames.indexOf(userAgentFunctionName.toUpperCase()) >= 0) {
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.parserPluginFunctionNameInUse, userAgentFunctionName, errorDetails);
    }
    return error;
}
exports.dmCheckNewParserPluginFunctionValidity = dmCheckNewParserPluginFunctionValidity;
function dmCheckNewVideoModePluginFunctionValidity(state, functionName, ignoreVideoModePluginId, errorDetails) {
    if (functionName === void 0) { functionName = null; }
    if (ignoreVideoModePluginId === void 0) { ignoreVideoModePluginId = null; }
    var error = null;
    var dmState = bsDmState_1.dmFilterDmState(state);
    var functionNames = [];
    var videoModePluginIds = selectors_1.dmGetVideoModePluginIds(dmState);
    videoModePluginIds.forEach(function (id) {
        if (!(ignoreVideoModePluginId && id === ignoreVideoModePluginId)) {
            var plugin = selectors_1.dmGetVideoModePluginStateById(dmState, { id: id });
            if (!lodash_1.isNil(plugin)) {
                if (plugin.functionName) {
                    functionNames.push(plugin.functionName.toUpperCase());
                }
            }
        }
    });
    if (functionName && functionNames.indexOf(functionName.toUpperCase()) >= 0) {
        error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.videoModePluginFunctionNameInUse, functionName, errorDetails);
    }
    return error;
}
exports.dmCheckNewVideoModePluginFunctionValidity = dmCheckNewVideoModePluginFunctionValidity;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteNodeApp = exports.dmUpdateNodeAppWithoutAssetProcessing = exports.dmUpdateNodeApp = exports.dmAddNodeAppWithoutAssetProcessing = exports.dmAddNodeAppWithoutValidation = exports.dmAddNodeApp = exports.DELETE_NODE_APP = exports.UPDATE_NODE_APP = exports.ADD_NODE_APP = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var lodash_1 = __webpack_require__(0);
var bsDmError_1 = __webpack_require__(4);
exports.ADD_NODE_APP = 'DM_ADD_NODE_APP';
exports.UPDATE_NODE_APP = 'DM_UPDATE_NODE_APP';
exports.DELETE_NODE_APP = 'DM_DELETE_NODE_APP';
function dmAddNodeApp(name, indexAssetItem, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.ADD_NODE_APP,
            payload: {
                id: utils_1.newBsDmId(),
                name: lodash_1.isNil(name) ? '' : name,
            },
        };
        if (validate) {
            if (lodash_1.isNil(name) || name.length === 0) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Node app name cannot be empty');
            }
        }
        var batchedActions = [];
        if (lodash_1.isNil(indexAssetItem) && !validate) {
            indexAssetItem = bscore_1.bscGetNullAssetItem(bscore_1.AssetType.HtmlSite);
        }
        if (bscore_1.bscIsAssetItem(indexAssetItem)) {
            var dmState = bsDmState_1.dmFilterDmState(getState());
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, indexAssetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.indexAssetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'NodeApp AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddNodeApp = dmAddNodeApp;
function dmAddNodeAppWithoutValidation(name, indexAssetItem) {
    return dmAddNodeApp(name, indexAssetItem, false);
}
exports.dmAddNodeAppWithoutValidation = dmAddNodeAppWithoutValidation;
function dmAddNodeAppWithoutAssetProcessing(name, indexAssetId) {
    return {
        type: exports.ADD_NODE_APP,
        payload: {
            id: utils_1.newBsDmId(),
            name: lodash_1.isNil(name) ? '' : name,
            indexAssetId: indexAssetId,
        },
    };
}
exports.dmAddNodeAppWithoutAssetProcessing = dmAddNodeAppWithoutAssetProcessing;
function dmUpdateNodeApp(params) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_NODE_APP,
            payload: lodash_1.pick(params, ['id', 'name']),
        };
        var batchedActions = [];
        if (params.hasOwnProperty('indexAssetItem')) {
            var assetItem = params.indexAssetItem;
            if (assetItem === null) {
                assetItem = bscore_1.bscGetNullAssetItem(bscore_1.AssetType.HtmlSite);
            }
            if (assetItem) {
                var dmState = bsDmState_1.dmFilterDmState(getState());
                var currentNodeApp = dmState.nodeApps[params.id];
                if (currentNodeApp.indexAssetId) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(currentNodeApp.indexAssetId));
                }
                assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
                var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
                batchedActions.push(assetAction);
                mainAction.payload.indexAssetId = assetItem.id;
            }
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateNodeApp = dmUpdateNodeApp;
function dmUpdateNodeAppWithoutAssetProcessing(params) {
    return {
        type: exports.UPDATE_NODE_APP,
        payload: params,
    };
}
exports.dmUpdateNodeAppWithoutAssetProcessing = dmUpdateNodeAppWithoutAssetProcessing;
function dmDeleteNodeApp(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.DELETE_NODE_APP,
            payload: { id: id },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var batchedActions = [];
        var nodeApp = dmState.nodeApps[id];
        if (nodeApp) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(nodeApp.indexAssetId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmDeleteNodeApp = dmDeleteNodeApp;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmRemoveBrightScriptPlugin = exports.dmUpdateBrightScriptPluginAssetId = exports.dmUpdateBrightScriptPluginWithoutValidation = exports.dmUpdateBrightScriptPlugin = exports.dmGetPutBrightScriptPluginAction = exports.dmAddBrightScriptPluginWithoutValidation = exports.dmAddBrightScriptPlugin = exports.REMOVE_SCRIPT_PLUGIN = exports.UPDATE_SCRIPT_PLUGIN = exports.ADD_SCRIPT_PLUGIN = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmPlugins_1 = __webpack_require__(44);
var bsDmError_1 = __webpack_require__(4);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionCommand_1 = __webpack_require__(33);
var actionEvent_1 = __webpack_require__(20);
var selectors_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
exports.ADD_SCRIPT_PLUGIN = 'DM_ADD_SCRIPT_PLUGIN';
exports.UPDATE_SCRIPT_PLUGIN = 'DM_UPDATE_SCRIPT_PLUGIN';
exports.REMOVE_SCRIPT_PLUGIN = 'DM_REMOVE_SCRIPT_PLUGIN';
function dmAddBrightScriptPlugin(name, assetItem, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = dmGetPutBrightScriptPluginAction(name);
        if (validate) {
            if (lodash_1.isNil(name) || name.length === 0) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin name cannot be empty');
            }
            var validityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(getState(), assetItem);
            if (validityError) {
                validityError.attachAction(mainAction);
                throw validityError;
            }
        }
        var batchedActions = [];
        if (bscore_1.bscIsAssetItem(assetItem)) {
            var dmState = bsDmState_1.dmFilterDmState(getState());
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddBrightScriptPlugin = dmAddBrightScriptPlugin;
function dmAddBrightScriptPluginWithoutValidation(name, assetItem) {
    return dmAddBrightScriptPlugin(name, assetItem, false);
}
exports.dmAddBrightScriptPluginWithoutValidation = dmAddBrightScriptPluginWithoutValidation;
function dmGetPutBrightScriptPluginAction(name, assetId) {
    if (assetId === void 0) { assetId = bsDmInterfaces_1.BsDmIdNone; }
    return {
        type: exports.ADD_SCRIPT_PLUGIN,
        payload: {
            id: utils_1.newBsDmId(),
            name: name != null ? name : '',
            assetId: assetId,
        },
    };
}
exports.dmGetPutBrightScriptPluginAction = dmGetPutBrightScriptPluginAction;
function dmUpdateBrightScriptPlugin(params, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_SCRIPT_PLUGIN,
            payload: { id: params.id },
        };
        if (!lodash_1.isNil(params.name)) {
            mainAction.payload.name = params.name;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingPlugin = selectors_1.dmGetScriptPluginStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(existingPlugin)) {
            var existingAssetItem = selectors_1.dmGetAssetItemById(dmState, { id: existingPlugin.assetId });
            if (params.assetItem && (lodash_1.isNil(existingAssetItem) || params.assetItem.locator !== existingAssetItem.locator)) {
                if (validate) {
                    var validityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(getState(), params.assetItem, existingPlugin.assetId);
                    if (validityError) {
                        validityError.attachAction(mainAction);
                        throw validityError;
                    }
                }
                if (existingAssetItem) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingPlugin.assetId));
                }
                var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
                mainAction.payload.assetId = preparedAssetItem.id;
            }
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateBrightScriptPlugin - plugin ID is invalid');
        }
    };
}
exports.dmUpdateBrightScriptPlugin = dmUpdateBrightScriptPlugin;
function dmUpdateBrightScriptPluginWithoutValidation(params) {
    return dmUpdateBrightScriptPlugin(params, false);
}
exports.dmUpdateBrightScriptPluginWithoutValidation = dmUpdateBrightScriptPluginWithoutValidation;
function dmUpdateBrightScriptPluginAssetId(id, assetId) {
    return {
        type: exports.UPDATE_SCRIPT_PLUGIN,
        payload: { id: id, assetId: assetId },
    };
}
exports.dmUpdateBrightScriptPluginAssetId = dmUpdateBrightScriptPluginAssetId;
function dmRemoveBrightScriptPlugin(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.REMOVE_SCRIPT_PLUGIN,
            payload: { id: id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var plugin = dmState.scriptPlugins[id];
        if (utils_1.isValidBsDmId(plugin.assetId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(plugin.assetId));
        }
        var pluginCommandIds = selectors_1.dmGetPluginCommandIdsForPlugin(dmState, { id: id });
        if (pluginCommandIds.length > 0) {
            batchedActions.push(actionCommand_1.dmDeleteCommand(pluginCommandIds));
        }
        var pluginEventIds = selectors_1.dmGetPluginEventIdsForPluginId(dmState, { id: id });
        if (pluginEventIds.length > 0) {
            var deleteParams = actionEvent_1.dmGetEventDeleteParams(dmState, pluginEventIds);
            batchedActions.push(actionEvent_1.dmDeleteEventWithParams(deleteParams));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmRemoveBrightScriptPlugin = dmRemoveBrightScriptPlugin;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsMediaStateCopySetCompatibleWithZone = exports.dmGetMediaStateCopySet = exports.dmDoValidatePlayFileItem = exports.dmDoValidateMediaStateEvents = exports.dmDoValidateMediaState = exports.dmValidateMediaStateEvents = exports.dmValidateMediaState = exports.dmGetIncompatibleMediaStateEventIdsForContentItemType = exports.dmGpioEventAvailabilityForMediaStateEvents = exports.dmIrRemoteEventAvailabilityForMediaStateEvents = exports.dmBpEventAvailabilityForMediaStateEvents = exports.dmGetPlayFileItemByIndex = exports.dmGetLocalPlaylistItemById = exports.dmGetPlayFileItemById = exports.dmIsMediaListGlobalIntrinsicEvent = exports.dmGetMediaListGlobalEventIds = exports.dmGetMediaListItemByIndex = exports.dmGetMediaListItemById = exports.dmGetMediaSequenceByMediaStateId = exports.dmGetMediaStateSequenceForContainer = exports.dmGetInitialMediaStateIdForSuperState = exports.dmGetInitialMediaStateForZone = exports.dmGetInitialMediaStateIdForZone = exports.dmGetMediaAssetItemForMediaStateId = exports.dmGetAllEventIdsForMediaState = exports.dmGetEventIdsForMediaState = exports.dmGetEventStatesForMediaStateId = exports.dmGetContentItemTypeForMediaStateId = exports.dmIsMediaStateContainer = exports.dmGetContainedMediaStateIdsForMediaState = exports.dmGetMediaStateIdsForSign = exports.dmGetMediaStateContainerById = exports.dmGetUniqueMediaStateNameForBaseNameInSign = exports.dmGetUniqueMediaStateNameForBaseNameInZone = exports.dmGetMediaStateNameMapForSign = exports.dmGetMediaStateNameMapForZone = exports.dmGetMediaStateByName = exports.dmGetMediaStateIdsForProps = exports.dmGetMediaStateStateByName = exports.dmGetMediaStateStateById = exports.dmGetMediaStateById = exports.clearMediaStateSelectorCaches = exports.fnGetMediaStateComponents = exports.fnGetDeNormalizedEventsForMediaState = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmHtmlSite_1 = __webpack_require__(37);
var bsDmLiveText_1 = __webpack_require__(28);
var bsDmCopyPaste_1 = __webpack_require__(23);
var selectorSign_1 = __webpack_require__(49);
var selectorZone_1 = __webpack_require__(42);
var selectorEvent_1 = __webpack_require__(40);
var selectorTransition_1 = __webpack_require__(41);
var selectorCommand_1 = __webpack_require__(26);
var selectorMediaSequence_1 = __webpack_require__(74);
var selectorHtmlSite_1 = __webpack_require__(59);
var selectorDataFeed_1 = __webpack_require__(35);
var selectorLiveText_1 = __webpack_require__(61);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorValidation_1 = __webpack_require__(17);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
function fnGetEventIdsForMediaState(mediaStateMap, eventMap, msId) {
    return Object.keys(eventMap)
        .filter(function (id) { return eventMap[id].mediaStateId === msId
        && !lodash_1.isNil(mediaStateMap[msId])
        && !(mediaStateMap[msId].contentItem.type === bscore_1.ContentItemType.MediaList
            && bsDmEvents_1.dmIsMediaListIntrinsicEvent(eventMap[id])); });
}
function fnGetEventStatesForMediaStateId(mediaStateMap, eventMap, msId) {
    return fnGetEventIdsForMediaState(mediaStateMap, eventMap, msId).map(function (id) { return eventMap[id]; });
}
function fnGetDeNormalizedEventsForMediaState(mediaStateMap, eventMap, transitionState, msId) {
    var events = fnGetEventStatesForMediaStateId(mediaStateMap, eventMap, msId);
    return events.map(function (eventState) {
        var deNormEvent = { eventState: eventState };
        var transitionStates = selectorTransition_1.fnGetSortedTransitionStatesForEventId(transitionState, eventState.id);
        if (!lodash_1.isNil(transitionStates)) {
            deNormEvent.transitionStates = transitionStates;
        }
        return deNormEvent;
    });
}
exports.fnGetDeNormalizedEventsForMediaState = fnGetDeNormalizedEventsForMediaState;
function fnGetMediaAssetItemForMediaStateId(mediaStateMap, assetMap, msId) {
    var mediaState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaState) && bsDmContentItems_1.dmContentItemIsMediaContentItem(mediaState.contentItem)) {
        return assetMap[mediaState.contentItem.assetId];
    }
    return null;
}
function fnGetMediaStateComponents(mediaStateMap, eventMap, transitionState, commandMap, assetMap, msId) {
    return {
        deNormEvents: fnGetDeNormalizedEventsForMediaState(mediaStateMap, eventMap, transitionState, msId),
        commands: selectorCommand_1.fnGetCommandStatesForMediaState(commandMap, msId),
        mediaAssetItem: fnGetMediaAssetItemForMediaStateId(mediaStateMap, assetMap, msId),
    };
}
exports.fnGetMediaStateComponents = fnGetMediaStateComponents;
function fnGetMediaListGlobalSequenceEvents(mediaStateMap, eventMap, action, msId) {
    var mediaStateState = mediaStateMap[msId];
    if (mediaStateState.contentItem.type === bscore_1.ContentItemType.MediaList) {
        return Object.keys(eventMap)
            .filter(function (id) { return eventMap[id].mediaStateId === msId && eventMap[id].action === action; })
            .map(function (id) { return eventMap[id]; });
    }
    return [];
}
function fnGetMediaListComponents(mediaStateMap, eventMap, commandState, dataFeedState, assetMap, msId) {
    var sourceDataFeed = selectorMediaSequence_1.fnGetMediaSequenceSourceDataFeed(mediaStateMap, dataFeedState.feedsById, msId);
    return {
        forwardEvents: fnGetMediaListGlobalSequenceEvents(mediaStateMap, eventMap, bscore_1.EventIntrinsicAction.SequenceForward, msId),
        backwardEvents: fnGetMediaListGlobalSequenceEvents(mediaStateMap, eventMap, bscore_1.EventIntrinsicAction.SequenceBackward, msId),
        playNextCommands: selectorCommand_1.fnGetCommandStatesForParentAndType(commandState, msId, bscore_1.CommandSequenceType.SequenceItemNext),
        playPreviousCommands: selectorCommand_1.fnGetCommandStatesForParentAndType(commandState, msId, bscore_1.CommandSequenceType.SequenceItemPrevious),
        sourceDataFeed: lodash_1.isNil(sourceDataFeed) ? null :
            selectorDataFeed_1.fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, sourceDataFeed.id),
    };
}
function fnGetPlayFileComponents(mediaStateMap, dataFeedState, assetMap, msId) {
    var sourceDataFeed = selectorMediaSequence_1.fnGetMediaSequenceSourceDataFeed(mediaStateMap, dataFeedState.feedsById, msId);
    return {
        defaultMediaAssetItem: selectorMediaSequence_1.fnGetPlayFileDefaultMediaAssetItem(mediaStateMap, assetMap, msId),
        sourceDataFeed: lodash_1.isNil(sourceDataFeed) ? null :
            selectorDataFeed_1.fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, sourceDataFeed.id),
    };
}
function fnGetLocalPlaylistComponents(mediaStateMap, dataFeedState, assetMap, msId) {
    var defaultDynamicPlaylistDataFeed = selectorMediaSequence_1.fnGetMediaSequenceSourceDataFeed(mediaStateMap, dataFeedState.feedsById, msId);
    return {
        defaultDynamicPlaylistDataFeed: lodash_1.isNil(defaultDynamicPlaylistDataFeed) ? null :
            selectorDataFeed_1.fnGetDataFeedStateEntitiesByFeedId(dataFeedState, assetMap, defaultDynamicPlaylistDataFeed.id),
    };
}
var selGetMediaStateById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        return new bsDmClasses_1.DmcMediaState(mediaStateState, components);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 200 }),
});
var selGetMediaListMediaStateById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.dataFeeds; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, dataFeeds, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        var mediaListComponents = fnGetMediaListComponents(mediaStateMap, eventMap, commands, dataFeeds, assetMap, msId);
        return new bsDmClasses_1.DmcMediaListMediaState(mediaStateState, components, mediaListComponents);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 50 }),
});
var selGetMediaItemById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState) && mediaStateState.container.type === bsDmInterfaces_1.MediaStateContainerType.MediaList) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        return new bsDmClasses_1.DmcMediaListItem(mediaStateState, components);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 100 }),
});
var selGetPlayFileMediaStateById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.dataFeeds; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, dataFeeds, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        var playFileComponents = fnGetPlayFileComponents(mediaStateMap, dataFeeds, assetMap, msId);
        return new bsDmClasses_1.DmcPlayFileMediaState(mediaStateState, components, playFileComponents);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 50 }),
});
var selGetPlayFileItemById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState) && mediaStateState.container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        return new bsDmClasses_1.DmcPlayFileItem(mediaStateState, components);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 100 }),
});
var selGetLocalPlaylistMediaStateById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.dataFeeds; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, dataFeeds, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        var localPlaylistComponents = fnGetLocalPlaylistComponents(mediaStateMap, dataFeeds, assetMap, msId);
        return new bsDmClasses_1.DmcLocalPlaylistMediaState(mediaStateState, components, localPlaylistComponents);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 50 }),
});
var selGetLocalPlaylistItemById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.assetMap; }, function (msId, mediaStateMap, eventMap, transitions, commands, assetMap) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState) && mediaStateState.container.type === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        return new bsDmClasses_1.DmcLocalPlaylistItem(mediaStateState, components);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 100 }),
});
var selGetLiveTextMediaStateById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions; }, function (dmState) { return dmState.commands; }, function (dmState) { return dmState.assetMap; }, function (_, props) { return props.canvas; }, function (msId, mediaStateMap, eventMap, transitions, commands, assetMap, liveTextCanvas) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var components = fnGetMediaStateComponents(mediaStateMap, eventMap, transitions, commands, assetMap, msId);
        return new bsDmClasses_1.DmcLiveTextMediaState(mediaStateState, components, liveTextCanvas);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
var selGetNameMapForZone = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (zoneId, mediaStateMap) {
    var mediaStateIds = selectorZone_1.fnGetTargetableMediaStateIdsFromContainerFromMediaStateMap(zoneId, mediaStateMap);
    var mediaStateMapForZone = mediaStateIds.reduce(function (acc, id) {
        acc[id] = mediaStateMap[id];
        return acc;
    }, {});
    return fnGetNameMapForMediaStates(mediaStateMapForZone);
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 20 }),
});
function clearMediaStateSelectorCaches() {
    selGetMediaStateById.clearCache();
    selGetMediaListMediaStateById.clearCache();
    selGetMediaItemById.clearCache();
    selGetPlayFileMediaStateById.clearCache();
    selGetPlayFileItemById.clearCache();
    selGetLocalPlaylistMediaStateById.clearCache();
    selGetLocalPlaylistItemById.clearCache();
    selGetLiveTextMediaStateById.clearCache();
    selGetNameMapForZone.clearCache();
}
exports.clearMediaStateSelectorCaches = clearMediaStateSelectorCaches;
function dmGetMediaStateById(state, props) {
    var mediaState = null;
    var mediaStateState = state.mediaStates.mediaStatesById[props.id];
    if (!lodash_1.isNil(mediaStateState)) {
        if (bsDmContentItems_1.dmContentItemIsMediaListContentItem(mediaStateState.contentItem)) {
            mediaState = selGetMediaListMediaStateById(state, props);
        }
        else if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(mediaStateState.contentItem)) {
            mediaState = selGetPlayFileMediaStateById(state, props);
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(mediaStateState.contentItem)) {
            mediaState = selGetLocalPlaylistMediaStateById(state, props);
        }
        else if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(mediaStateState.contentItem)) {
            var canvas = selectorLiveText_1.dmGetLiveTextCanvasById(state, { id: mediaStateState.contentItem.canvasId });
            mediaState = selGetLiveTextMediaStateById(state, { id: props.id, canvas: canvas });
        }
        else {
            mediaState = selGetMediaStateById(state, props);
        }
    }
    return mediaState;
}
exports.dmGetMediaStateById = dmGetMediaStateById;
function dmGetMediaStateStateById(state, props) {
    var mediaState = state.mediaStates.mediaStatesById[props.id];
    return mediaState ? mediaState : null;
}
exports.dmGetMediaStateStateById = dmGetMediaStateStateById;
function dmGetMediaStateStateByName(state, props) {
    var mediaStates = state.mediaStates.mediaStatesById;
    var mediaStateId = lodash_1.find(Object.keys(mediaStates), function (id) { return mediaStates[id].name === props.name; });
    return mediaStateId ? mediaStates[mediaStateId] : null;
}
exports.dmGetMediaStateStateByName = dmGetMediaStateStateByName;
function dmGetMediaStateIdsForProps(state, props) {
    var ignoreName = lodash_1.isNil(props.name);
    var ignoreContainerType = lodash_1.isNil(props.containerType);
    var ignoreContentItemType = lodash_1.isNil(props.contentItemType);
    var contentTypeSet = Array.isArray(props.contentItemType) ?
        new Set(props.contentItemType) : new Set([props.contentItemType]);
    var doSearch = function (containerIds) {
        var ignoreContainerIds = containerIds.length === 0;
        var containerIdSet = new Set(containerIds);
        return Object.keys(state.mediaStates.mediaStatesById).filter(function (id) {
            var mediaState = state.mediaStates.mediaStatesById[id];
            return (ignoreName || props.name === mediaState.name)
                && (ignoreContainerIds || containerIdSet.has(mediaState.container.id))
                && (ignoreContainerType || props.containerType === mediaState.container.type)
                && (ignoreContentItemType || contentTypeSet.has(mediaState.contentItem.type));
        });
    };
    var getContainedSuperStateIds = function (containerIds) {
        var containerIdSet = new Set(containerIds);
        var containedSuperStateIds = Object.keys(state.mediaStates.mediaStatesById)
            .filter(function (id) {
            var mediaState = state.mediaStates.mediaStatesById[id];
            return containerIdSet.has(mediaState.container.id)
                && mediaState.contentItem.type === bscore_1.ContentItemType.SuperState;
        });
        if (containedSuperStateIds.length > 0) {
            return containedSuperStateIds.concat(getContainedSuperStateIds(containedSuperStateIds));
        }
        return [];
    };
    if (!lodash_1.isNil(props.searchContainedSuperStates)
        && props.searchContainedSuperStates
        && !lodash_1.isNil(props.containerId)) {
        var searchContainerIds = getContainedSuperStateIds([props.containerId]);
        searchContainerIds.unshift(props.containerId);
        return doSearch(searchContainerIds);
    }
    return doSearch(lodash_1.isNil(props.containerId) ? [] : [props.containerId]);
}
exports.dmGetMediaStateIdsForProps = dmGetMediaStateIdsForProps;
function dmGetMediaStateByName(state, props) {
    var mediaStates = state.mediaStates.mediaStatesById;
    var mediaStateId = lodash_1.find(Object.keys(mediaStates), function (id) { return mediaStates[id].name === props.name; });
    return lodash_1.isNil(mediaStateId) ? null : dmGetMediaStateById(state, { id: mediaStateId });
}
exports.dmGetMediaStateByName = dmGetMediaStateByName;
var fnGetNameMapForMediaStates = function (mediaStateMap, containerIds) {
    var containerIdSet = lodash_1.isNil(containerIds) ? null : new Set(containerIds);
    return Object.keys(mediaStateMap).reduce(function (acc, id) {
        var mediaState = mediaStateMap[id];
        if (!lodash_1.isNil(mediaState) && (lodash_1.isNil(containerIdSet) || containerIdSet.has(mediaState.container.id))) {
            if (lodash_1.isNil(acc[mediaState.name])) {
                acc[mediaState.name] = [id];
            }
            else {
                acc[mediaState.name].push(id);
            }
        }
        return acc;
    }, {});
};
function dmGetMediaStateNameMapForZone(state, props) {
    return selGetNameMapForZone(state, props);
}
exports.dmGetMediaStateNameMapForZone = dmGetMediaStateNameMapForZone;
var selGetNameMapForSign = reselect_1.createSelector(function (dmState) { return dmState.mediaStates.mediaStatesById; }, fnGetNameMapForMediaStates);
function dmGetMediaStateNameMapForSign(state) {
    return selGetNameMapForSign(state);
}
exports.dmGetMediaStateNameMapForSign = dmGetMediaStateNameMapForSign;
function dmGetUniqueMediaStateNameForBaseNameInZone(state, props) {
    var proposedName = lodash_1.isString(props.name) && props.name.length ? props.name : 'State';
    return utils_1.getUniqueNameForNameMap(proposedName, dmGetMediaStateNameMapForZone(state, props));
}
exports.dmGetUniqueMediaStateNameForBaseNameInZone = dmGetUniqueMediaStateNameForBaseNameInZone;
function dmGetUniqueMediaStateNameForBaseNameInSign(state, props) {
    var proposedName = lodash_1.isString(props.name) && props.name.length ? props.name : 'State';
    return utils_1.getUniqueNameForNameMap(proposedName, dmGetMediaStateNameMapForSign(state));
}
exports.dmGetUniqueMediaStateNameForBaseNameInSign = dmGetUniqueMediaStateNameForBaseNameInSign;
function dmGetMediaStateContainerById(state, props) {
    var mediaState = state.mediaStates.mediaStatesById[props.id];
    return lodash_1.isNil(mediaState) ? null : new bsDmClasses_1.DmcMediaStateContainer(mediaState.container.id, mediaState.container.type);
}
exports.dmGetMediaStateContainerById = dmGetMediaStateContainerById;
function dmGetMediaStateIdsForSign(state) {
    return Object.keys(state.mediaStates.mediaStatesById);
}
exports.dmGetMediaStateIdsForSign = dmGetMediaStateIdsForSign;
function dmGetContainedMediaStateIdsForMediaState(state, props) {
    var mediaStates = state.mediaStates.mediaStatesById;
    return Object.keys(mediaStates).filter(function (id) {
        var mediaState = mediaStates[id];
        return mediaState.container.type !== bsDmInterfaces_1.MediaStateContainerType.Zone && mediaState.container.id === props.id;
    });
}
exports.dmGetContainedMediaStateIdsForMediaState = dmGetContainedMediaStateIdsForMediaState;
var containerContentItemTypes = [bscore_1.ContentItemType.MediaList, bscore_1.ContentItemType.PlayFile, bscore_1.ContentItemType.LocalPlaylist, bscore_1.ContentItemType.SuperState];
function dmIsMediaStateContainer(state, props) {
    var mediaState = state.mediaStates.mediaStatesById[props.id];
    return mediaState ? containerContentItemTypes.indexOf(mediaState.contentItem.type) >= 0 : false;
}
exports.dmIsMediaStateContainer = dmIsMediaStateContainer;
function dmGetContentItemTypeForMediaStateId(state, props) {
    var mediaStateState = state.mediaStates.mediaStatesById[props.id];
    return lodash_1.isNil(mediaStateState) ? null : mediaStateState.contentItem.type;
}
exports.dmGetContentItemTypeForMediaStateId = dmGetContentItemTypeForMediaStateId;
function dmGetEventStatesForMediaStateId(state, props) {
    return fnGetEventStatesForMediaStateId(state.mediaStates.mediaStatesById, state.events, props.id);
}
exports.dmGetEventStatesForMediaStateId = dmGetEventStatesForMediaStateId;
function dmGetEventIdsForMediaState(state, props) {
    return fnGetEventIdsForMediaState(state.mediaStates.mediaStatesById, state.events, props.id);
}
exports.dmGetEventIdsForMediaState = dmGetEventIdsForMediaState;
function dmGetAllEventIdsForMediaState(state, props) {
    var events = state.events;
    return Object.keys(events).filter(function (id) { return events[id].mediaStateId === props.id; });
}
exports.dmGetAllEventIdsForMediaState = dmGetAllEventIdsForMediaState;
function dmGetMediaAssetItemForMediaStateId(state, props) {
    return fnGetMediaAssetItemForMediaStateId(state.mediaStates.mediaStatesById, state.assetMap, props.id);
}
exports.dmGetMediaAssetItemForMediaStateId = dmGetMediaAssetItemForMediaStateId;
function dmGetInitialMediaStateIdForZone(state, props) {
    var zone = state.zones.zonesById[props.id];
    return zone ? zone.initialMediaStateId : null;
}
exports.dmGetInitialMediaStateIdForZone = dmGetInitialMediaStateIdForZone;
function dmGetInitialMediaStateForZone(state, props) {
    var zone = state.zones.zonesById[props.id];
    return zone ? dmGetMediaStateById(state, { id: zone.initialMediaStateId }) : null;
}
exports.dmGetInitialMediaStateForZone = dmGetInitialMediaStateForZone;
function dmGetInitialMediaStateIdForSuperState(state, props) {
    var superState = dmGetMediaStateStateById(state, { id: props.id });
    if (!lodash_1.isNil(superState) && bsDmContentItems_1.dmContentItemIsSuperStateContentItem(superState.contentItem)) {
        return superState.contentItem.initialMediaStateId;
    }
    return null;
}
exports.dmGetInitialMediaStateIdForSuperState = dmGetInitialMediaStateIdForSuperState;
function dmGetMediaStateSequenceForContainer(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    return lodash_1.isNil(mediaStateSequence) ? null : mediaStateSequence;
}
exports.dmGetMediaStateSequenceForContainer = dmGetMediaStateSequenceForContainer;
exports.dmGetMediaSequenceByMediaStateId = dmGetMediaStateSequenceForContainer;
function dmGetMediaListItemById(state, props) {
    return selGetMediaItemById(state, props);
}
exports.dmGetMediaListItemById = dmGetMediaListItemById;
function dmGetMediaListItemByIndex(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    if (mediaStateSequence && mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.MediaList) {
        var index = props.index;
        if (index >= 0 && index < mediaStateSequence.sequence.length) {
            var mediaStateState = state.mediaStates.mediaStatesById[mediaStateSequence.sequence[index]];
            if (!lodash_1.isNil(mediaStateState)) {
                return selGetMediaItemById(state, { id: mediaStateState.id });
            }
        }
    }
    return null;
}
exports.dmGetMediaListItemByIndex = dmGetMediaListItemByIndex;
function dmGetMediaListGlobalEventIds(state, props) {
    var events = state.events;
    if (dmGetContentItemTypeForMediaStateId(state, props) === bscore_1.ContentItemType.MediaList) {
        return Object.keys(events)
            .filter(function (id) {
            return events[id].mediaStateId === props.id
                && dmIsMediaListGlobalIntrinsicEvent(state, props.id, events[id]);
        });
    }
    return [];
}
exports.dmGetMediaListGlobalEventIds = dmGetMediaListGlobalEventIds;
function dmIsMediaListGlobalIntrinsicEvent(state, mediaStateId, eventSpec) {
    var contentItemType = dmGetContentItemTypeForMediaStateId(state, { id: mediaStateId });
    return contentItemType === bscore_1.ContentItemType.MediaList && bsDmEvents_1.dmIsMediaListIntrinsicEvent(eventSpec);
}
exports.dmIsMediaListGlobalIntrinsicEvent = dmIsMediaListGlobalIntrinsicEvent;
function dmGetPlayFileItemById(state, props) {
    return selGetPlayFileItemById(state, props);
}
exports.dmGetPlayFileItemById = dmGetPlayFileItemById;
function dmGetLocalPlaylistItemById(state, props) {
    return selGetLocalPlaylistItemById(state, props);
}
exports.dmGetLocalPlaylistItemById = dmGetLocalPlaylistItemById;
function dmGetPlayFileItemByIndex(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    if (mediaStateSequence && mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
        var index = props.index;
        if (index >= 0 && index < mediaStateSequence.sequence.length) {
            var mediaStateState = state.mediaStates.mediaStatesById[mediaStateSequence.sequence[index]];
            if (!lodash_1.isNil(mediaStateState)) {
                return selGetPlayFileItemById(state, { id: mediaStateState.id });
            }
        }
    }
    return null;
}
exports.dmGetPlayFileItemByIndex = dmGetPlayFileItemByIndex;
function dmBpEventAvailabilityForMediaStateEvents(state, props) {
    var events = state.events;
    var eventList = Object.keys(events).reduce(function (list, eventId) {
        var event = events[eventId];
        if (event.mediaStateId === props.id) {
            list.push(event);
        }
        return list;
    }, []);
    return bsDmEvents_1.dmGetBpAvailabilityForEventList(eventList);
}
exports.dmBpEventAvailabilityForMediaStateEvents = dmBpEventAvailabilityForMediaStateEvents;
function dmIrRemoteEventAvailabilityForMediaStateEvents(state, props) {
    var events = state.events;
    var eventList = dmGetAllEventIdsForMediaState(state, props).map(function (id) { return events[id]; });
    return bsDmEvents_1.dmGetIrRemoteAvailabilityForEventList(eventList, selectorSign_1.dmGetSignIrRemoteButtonDescriptions(state));
}
exports.dmIrRemoteEventAvailabilityForMediaStateEvents = dmIrRemoteEventAvailabilityForMediaStateEvents;
function dmGpioEventAvailabilityForMediaStateEvents(state, props) {
    var events = state.events;
    var eventList = Object.keys(events).reduce(function (list, eventId) {
        var event = events[eventId];
        if (event.mediaStateId === props.id) {
            list.push(event);
        }
        return list;
    }, []);
    return bsDmEvents_1.dmGetGpioAvailabilityForEventList(eventList, selectorSign_1.dmGetSignGpioList(state));
}
exports.dmGpioEventAvailabilityForMediaStateEvents = dmGpioEventAvailabilityForMediaStateEvents;
function dmGetIncompatibleMediaStateEventIdsForContentItemType(state, props) {
    var eventIds = dmGetEventIdsForMediaState(state, props);
    return eventIds.filter(function (id) { return !selectorEvent_1.dmIsEventCompatibleWithContentItemType(state, { id: id, type: props.type }); });
}
exports.dmGetIncompatibleMediaStateEventIdsForContentItemType = dmGetIncompatibleMediaStateEventIdsForContentItemType;
function dmValidateMediaState(state, props) {
    var mediaState = dmGetMediaStateStateById(state, props);
    if (!lodash_1.isNil(mediaState) && mediaState.container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
        return dmDoValidatePlayFileItem(state, props);
    }
    return dmDoValidateMediaState(state, props, false);
}
exports.dmValidateMediaState = dmValidateMediaState;
function dmValidateMediaStateEvents(state, props) {
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.MediaState, props.id);
    var eventComponentErrors = dmDoValidateMediaStateEvents(state, props);
    if (eventComponentErrors.length) {
        result.componentErrors = eventComponentErrors;
        result.ok = false;
    }
    return result;
}
exports.dmValidateMediaStateEvents = dmValidateMediaStateEvents;
function dmDoValidateMediaState(state, props, includeEvents) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.MediaState, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.MediaState, props.id);
    var validateParameterizedString = function (paramString, entityProperty, cannotBeEmpty) {
        var error = selectorValidation_1.dmValidateEntityParameterizedString(state, paramString, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }), cannotBeEmpty);
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateUserVariableId = function (userVariableId, entityProperty) {
        var error = selectorValidation_1.dmValidateUserVariableId(state, userVariableId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateDataFeed = function (dataFeedId, entityProperty) {
        var error = selectorValidation_1.dmValidateEntityDataFeed(state, dataFeedId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var validateHtmlSite = function (htmlSiteId, entityProperty) {
        var _a;
        var errorList = selectorValidation_1.dmValidateEntityHtmlSite(state, htmlSiteId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(errorList)) {
            (_a = result.errorList).push.apply(_a, errorList);
        }
    };
    var validateAssetItem = function (assetId, entityProperty) {
        var error = selectorValidation_1.dmValidateAssetId(state, assetId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    var mediaState = dmGetMediaStateStateById(state, props);
    if (!lodash_1.isNil(mediaState)) {
        if (!lodash_1.isString(mediaState.name) || mediaState.name.length === 0) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.nameNotSpecified, __assign(__assign({}, entityDetails), { entityProperty: 'name' })));
        }
        else if (!bsDmContentItems_1.dmIsMediaSequenceContainer(mediaState.container)) {
            var zoneId = selectorZone_1.dmGetZoneIdForMediaStateId(state, props);
            var zoneNameMap = dmGetMediaStateNameMapForZone(state, { id: zoneId });
            if (zoneNameMap[mediaState.name].length > 1) {
                result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, __assign(__assign({}, entityDetails), { entityProperty: 'name' })));
            }
        }
        if (bsDmContentItems_1.dmContentItemIsMediaContentItem(mediaState.contentItem)) {
            validateAssetItem(mediaState.contentItem.assetId, 'contentItem.assetId');
        }
        else if (bsDmContentItems_1.dmContentItemIsStreamContentItem(mediaState.contentItem)) {
            validateParameterizedString(mediaState.contentItem.url, 'contentItem.url', true);
        }
        else if (bsDmContentItems_1.dmContentItemIsHtmlContentItem(mediaState.contentItem)) {
            validateHtmlSite(mediaState.contentItem.siteId, 'contentItem.htmlSite');
        }
        else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(mediaState.contentItem)) {
            validateDataFeed(mediaState.contentItem.dataFeedId, 'contentItem.dataFeed');
        }
        else if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaState.contentItem)) {
            if (mediaState.contentItem.useDataFeed) {
                validateDataFeed(mediaState.contentItem.dataFeedId, 'contentItem.dataFeed');
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(mediaState.contentItem)) {
            validateDataFeed(mediaState.contentItem.defaultDataFeedId, 'contentItem.defaultDataFeedId');
        }
        else if (bsDmContentItems_1.dmContentItemIsUserVariableContentItem(mediaState.contentItem)) {
            validateUserVariableId(mediaState.contentItem.userVariableId, 'contentItem.userVariableId');
        }
        var componentErrors_1 = [];
        if (includeEvents) {
            componentErrors_1 = dmDoValidateMediaStateEvents(state, props);
        }
        var commandIds = selectorCommand_1.dmGetEntryCommandIdsForMediaState(state, props).slice();
        commandIds.push.apply(commandIds, selectorCommand_1.dmGetExitCommandIdsForMediaState(state, props));
        if (bsDmContentItems_1.dmContentItemIsMediaListContentItem(mediaState.contentItem)) {
            commandIds.push.apply(commandIds, selectorCommand_1.dmGetSequenceItemNextCommandIdsForMediaState(state, props));
            commandIds.push.apply(commandIds, selectorCommand_1.dmGetSequenceItemPreviousCommandIdsForMediaState(state, props));
        }
        componentErrors_1 = commandIds.reduce(function (acc, commandId) {
            var cmdResult = selectorCommand_1.dmValidateCommand(state, { id: commandId });
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, componentErrors_1);
        if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(mediaState.contentItem)) {
            var liveTextErrors = selectorLiveText_1.dmValidateLiveTextCanvas(state, { id: mediaState.contentItem.canvasId });
            if (!liveTextErrors.ok) {
                componentErrors_1.push(liveTextErrors);
            }
        }
        if (bsDmContentItems_1.dmContentItemIsSuperStateContentItem(mediaState.contentItem)) {
            var containedMediaStateIds = dmGetContainedMediaStateIdsForMediaState(state, props);
            if (containedMediaStateIds.length > 0) {
                var initialStateErrorType = null;
                if (utils_1.isValidBsDmId(mediaState.contentItem.initialMediaStateId)) {
                    var initialMediaState = dmGetMediaStateStateById(state, { id: mediaState.contentItem.initialMediaStateId });
                    if (!lodash_1.isNil(initialMediaState)) {
                        if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(initialMediaState.contentItem)) {
                            initialStateErrorType = bsDmError_1.DmErrorType.superStateInitialStateCannotBeOnDemand;
                        }
                    }
                    else {
                        initialStateErrorType = bsDmError_1.DmErrorType.superStateInitialStateInvalid;
                    }
                }
                else {
                    initialStateErrorType = bsDmError_1.DmErrorType.superStateInitialStateInvalid;
                }
                if (!lodash_1.isNil(initialStateErrorType)) {
                    result.errorList.push(selectorValidation_1.dmGetEntityError(initialStateErrorType, __assign(__assign({}, entityDetails), { entityProperty: 'superState.initialMediaState' })));
                }
                containedMediaStateIds.forEach(function (containedStateId) {
                    var containedStateErrors = dmDoValidateMediaState(state, { id: containedStateId }, true);
                    if (!containedStateErrors.ok) {
                        componentErrors_1.push(containedStateErrors);
                    }
                });
            }
        }
        if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(mediaState.contentItem)
            && !mediaState.contentItem.useDataFeed) {
            var playFileItems = dmGetContainedMediaStateIdsForMediaState(state, props);
            playFileItems.forEach(function (itemId) {
                var containedItemErrors = dmDoValidatePlayFileItem(state, { id: itemId });
                if (!containedItemErrors.ok) {
                    componentErrors_1.push(containedItemErrors);
                }
            });
        }
        if (componentErrors_1.length) {
            result.componentErrors = componentErrors_1;
            result.ok = false;
        }
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmDoValidateMediaState = dmDoValidateMediaState;
function dmDoValidateMediaStateEvents(state, props) {
    var componentErrors = [];
    var getEventListComponentErrors = function (eventList) {
        return eventList.reduce(function (acc, event, index) {
            var cmdResult = selectorEvent_1.dmValidateEvent(state, { id: event.id });
            for (var i = 0; i < eventList.length; i++) {
                if (i !== index) {
                    var dupCheckResult = bsDmEvents_1.dmIsDuplicateEventData(event, eventList[i]);
                    if (!dupCheckResult.ok) {
                        dupCheckResult.error.details = {
                            entityType: bsDmInterfaces_1.DmEntityType.Event, entityId: event.id, entityProperty: event.type + '.data',
                        };
                        cmdResult.errorList.push(dupCheckResult.error);
                    }
                }
            }
            if (cmdResult.errorList.length > 0) {
                cmdResult.ok = false;
            }
            if (!cmdResult.ok) {
                acc.push(cmdResult);
            }
            return acc;
        }, componentErrors);
    };
    var eventIds = dmGetAllEventIdsForMediaState(state, props);
    componentErrors = getEventListComponentErrors(eventIds.map(function (id) { return selectorEvent_1.dmGetEventStateById(state, { id: id }); }));
    return componentErrors;
}
exports.dmDoValidateMediaStateEvents = dmDoValidateMediaStateEvents;
function dmDoValidatePlayFileItem(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.MediaState, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.MediaState, props.id);
    var validateNonEmptyString = function (value, errorType, entityProperty) {
        if (!lodash_1.isString(value) || value.length === 0) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(errorType, __assign(__assign({}, entityDetails), { entityProperty: entityProperty })));
        }
    };
    var playFileItem = dmGetMediaStateStateById(state, props);
    if (!lodash_1.isNil(playFileItem) && playFileItem.container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
        var contentItem_1 = playFileItem.contentItem;
        validateNonEmptyString(contentItem_1.name, bsDmError_1.DmErrorType.valueNotSpecifiedOrInvalid, 'label');
        validateNonEmptyString(contentItem_1.key, bsDmError_1.DmErrorType.valueNotSpecifiedOrInvalid, 'key');
        var itemStateIds = dmGetContainedMediaStateIdsForMediaState(state, { id: playFileItem.container.id });
        var hasDuplicateKey = itemStateIds.some(function (id) {
            if (id !== props.id) {
                var itemStateToCheck = dmGetMediaStateStateById(state, { id: id });
                return contentItem_1.key.toUpperCase() ===
                    itemStateToCheck.contentItem.key.toUpperCase();
            }
            return false;
        });
        if (hasDuplicateKey) {
            result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, __assign(__assign({}, entityDetails), { entityProperty: 'key' })));
        }
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmDoValidatePlayFileItem = dmDoValidatePlayFileItem;
function dmGetMediaStateCopySet(state, props) {
    var mediaStateIdsToCopy = lodash_1.uniq(props.ids);
    var contentType = bsDmInterfaces_1.DmCopySetContentType.Interactive;
    var containerId = bsDmInterfaces_1.BsDmIdNone;
    var containerType = bsDmInterfaces_1.MediaStateContainerType.Zone;
    var zoneId = containerId;
    var initialState = null;
    if (mediaStateIdsToCopy.length > 0) {
        initialState = dmGetMediaStateStateById(state, { id: mediaStateIdsToCopy[0] });
        if (!lodash_1.isNil(initialState)) {
            containerId = initialState.container.id;
            containerType = initialState.container.type;
            zoneId = selectorZone_1.dmGetZoneIdForMediaStateId(state, { id: initialState.id });
            if (bsDmContentItems_1.dmIsMediaSequenceContainer(initialState.container)) {
                contentType = bsDmInterfaces_1.DmCopySetContentType.MediaItemList;
            }
            else if (selectorZone_1.dmGetZoneNonInteractiveById(state, { id: initialState.container.id })) {
                contentType = bsDmInterfaces_1.DmCopySetContentType.Playlist;
            }
        }
    }
    var copySet = bsDmCopyPaste_1.dmCreateNewMediaStateCopySet(contentType, containerId, zoneId, selectorSign_1.dmGetSignId(state));
    if (mediaStateIdsToCopy.length === 0) {
        return copySet;
    }
    if (bsDmCopyPaste_1.dmIsPlaylistMediaStateCopySet(copySet)) {
        copySet.plStartingMediaStateId = mediaStateIdsToCopy[0];
    }
    var addHtmlSite = function (htmlSiteId) {
        var htmlSite = selectorHtmlSite_1.dmGetHtmlSiteStateById(state, { id: htmlSiteId });
        if (!lodash_1.isNil(htmlSite)) {
            copySet.htmlSites[htmlSiteId] = lodash_1.cloneDeep(htmlSite);
            if (bsDmHtmlSite_1.dmHtmlSiteIsHostedHtmlSite(htmlSite)) {
                bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, htmlSite.indexAssetId);
            }
        }
    };
    var addLiveTextCanvas = function (canvasId) {
        var canvas = selectorLiveText_1.dmGetLiveTextCanvasStateById(state, { id: canvasId });
        if (!lodash_1.isNil(canvas)) {
            copySet.liveText.canvasesById[canvasId] = lodash_1.cloneDeep(canvas);
            var itemIdSequence = selectorLiveText_1.dmGetLiveTextLayerSequenceForCanvas(state, { id: canvasId });
            if (!lodash_1.isNil(itemIdSequence)) {
                copySet.liveText.layersByCanvasId[canvasId] = lodash_1.cloneDeep(itemIdSequence);
                itemIdSequence.forEach(function (itemId) {
                    var liveTextItem = selectorLiveText_1.dmGetLiveTextItemStateById(state, { id: itemId });
                    copySet.liveText.itemsById[itemId] = lodash_1.cloneDeep(liveTextItem);
                    if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(liveTextItem)) {
                        bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, liveTextItem.dataFeedId);
                    }
                    else if (bsDmLiveText_1.dmIsLiveTextDataImageContent(liveTextItem) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(liveTextItem)) {
                        bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, liveTextItem.assetId);
                    }
                });
            }
            var groupIds = selectorLiveText_1.dmGetAllLiveTextGroupIdsForCanvas(state, { id: canvasId });
            groupIds.forEach(function (groupId) {
                var dataFeedSequence = selectorLiveText_1.dmGetLiveTextDataFeedGroupByGroupId(state, { id: groupId });
                copySet.liveText.dataFeedsByGroupId[groupId] = lodash_1.cloneDeep(dataFeedSequence);
                dataFeedSequence.dataFeedIds.forEach(function (dataFeedId) { return bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, dataFeedId); });
            });
            if (utils_1.isValidBsDmId(canvas.backgroundImageId)) {
                bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, canvas.backgroundImageId);
            }
        }
    };
    var addCommandSequences = function (parentId) {
        var commandSequenceIds = selectorCommand_1.dmGetCommandSequenceIdsForParentId(state, { id: parentId });
        commandSequenceIds.forEach(function (cmdSeqId) {
            var commandSequence = selectorCommand_1.dmGetCommandSequenceStateById(state, { id: cmdSeqId });
            if (!lodash_1.isNil(commandSequence)) {
                copySet.commands.sequencesById[cmdSeqId] = lodash_1.cloneDeep(commandSequence);
                commandSequence.sequence.forEach(function (cmdId) {
                    copySet.commands.commandsById[cmdId] = lodash_1.cloneDeep(selectorCommand_1.dmGetCommandStateById(state, { id: cmdId }));
                });
            }
        });
    };
    var addMediaState = function (mediaState) {
        copySet.mediaStates.mediaStatesById[mediaState.id] = lodash_1.cloneDeep(mediaState);
        addCommandSequences(mediaState.id);
        var deNormEvents = fnGetDeNormalizedEventsForMediaState(state.mediaStates.mediaStatesById, state.events, state.transitions, mediaState.id);
        deNormEvents.forEach(function (deNormEvent) {
            copySet.events[deNormEvent.eventState.id] = lodash_1.cloneDeep(deNormEvent.eventState);
            addCommandSequences(deNormEvent.eventState.id);
            var conditionalSequence = selectorTransition_1.dmGetConditionalTransitionSequenceForEvent(state, { id: deNormEvent.eventState.id });
            if (!lodash_1.isNil(conditionalSequence)) {
                copySet.transitions.sequencesByEventId[deNormEvent.eventState.id] = lodash_1.cloneDeep(conditionalSequence);
            }
            if (!lodash_1.isNil(deNormEvent.transitionStates)) {
                deNormEvent.transitionStates.forEach(function (transitionState) {
                    copySet.transitions.transitionsById[transitionState.id] = lodash_1.cloneDeep(transitionState);
                    addCommandSequences(transitionState.id);
                });
            }
        });
        var contentItem = mediaState.contentItem;
        if (bsDmContentItems_1.dmContentItemIsMediaContentItem(contentItem)) {
            bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, contentItem.assetId);
        }
        else if (bsDmContentItems_1.dmContentItemIsHtmlContentItem(contentItem)) {
            addHtmlSite(contentItem.siteId);
        }
        else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(contentItem)) {
            bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, contentItem.dataFeedId);
        }
        else if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(contentItem)) {
            addLiveTextCanvas(contentItem.canvasId);
        }
        else if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(contentItem)) {
            if (contentItem.useDataFeed) {
                bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, contentItem.dataFeedId);
            }
            else {
                var listItemSequence = dmGetMediaStateSequenceForContainer(state, { id: mediaState.id });
                if (!lodash_1.isNil(listItemSequence)) {
                    copySet.mediaStates.sequencesByParentId[mediaState.id] = listItemSequence;
                    listItemSequence.sequence.forEach(function (itemId) {
                        addMediaState(dmGetMediaStateStateById(state, { id: itemId }));
                    });
                }
            }
            if (bsDmContentItems_1.dmContentItemIsPlayFileContentItem(contentItem) && !lodash_1.isNil(contentItem.defaultMediaId)) {
                bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, contentItem.defaultMediaId);
            }
            var mediaListGlobalEventIds = dmGetMediaListGlobalEventIds(state, { id: mediaState.id });
            mediaListGlobalEventIds.forEach(function (eventId) {
                copySet.events[eventId] = lodash_1.cloneDeep(selectorEvent_1.dmGetEventStateById(state, { id: eventId }));
            });
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(contentItem)) {
            if (utils_1.isValidBsDmId(contentItem.defaultDataFeedId)) {
                bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, contentItem.defaultDataFeedId);
            }
            var localPlaylistItemSequence = dmGetMediaStateSequenceForContainer(state, { id: mediaState.id });
            if (!lodash_1.isNil(localPlaylistItemSequence)) {
                copySet.mediaStates.sequencesByParentId[mediaState.id] = localPlaylistItemSequence;
                localPlaylistItemSequence.sequence.forEach(function (localPlaylistItemId) {
                    var localPlaylistItem = dmGetMediaStateStateById(state, { id: localPlaylistItemId });
                    if (!lodash_1.isNil(localPlaylistItem)) {
                        addMediaState(dmGetMediaStateStateById(state, { id: localPlaylistItemId }));
                    }
                });
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsSuperStateContentItem(contentItem)) {
            var containedMediaStateIds = dmGetContainedMediaStateIdsForMediaState(state, { id: mediaState.id });
            containedMediaStateIds.forEach(function (mediaStateId) {
                addMediaState(dmGetMediaStateStateById(state, { id: mediaStateId }));
            });
        }
    };
    var checkContainer = function (mediaState) {
        if (copySet.containerId === bsDmInterfaces_1.BsDmIdNone) {
            copySet.containerId = mediaState.container.id;
            return true;
        }
        return copySet.containerId === mediaState.container.id;
    };
    mediaStateIdsToCopy.forEach(function (id, index) {
        var mediaState = dmGetMediaStateStateById(state, { id: id });
        if (!lodash_1.isNil(mediaState) && checkContainer(mediaState)) {
            addMediaState(mediaState);
            if (bsDmCopyPaste_1.dmIsPlaylistMediaStateCopySet(copySet)) {
                var targetMediaStateId = index < mediaStateIdsToCopy.length - 1 ? mediaStateIdsToCopy[index + 1] : bsDmInterfaces_1.BsDmIdNone;
                var eventId_1 = lodash_1.find(Object.keys(copySet.events), function (evId) { return copySet.events[evId].mediaStateId === id; });
                if (!lodash_1.isNil(eventId_1)) {
                    var transitionId = lodash_1.find(Object.keys(copySet.transitions.transitionsById), function (trId) { return copySet.transitions.transitionsById[trId].eventId === eventId_1; });
                    if (!lodash_1.isNil(transitionId)) {
                        copySet.transitions.transitionsById[transitionId].targetMediaStateId = targetMediaStateId;
                        if (targetMediaStateId === bsDmInterfaces_1.BsDmIdNone) {
                            copySet.plLastTransitionId = transitionId;
                        }
                    }
                }
            }
        }
    });
    if (contentType === bsDmInterfaces_1.DmCopySetContentType.Interactive) {
        var mediaStateIdSet_1 = new Set(Object.keys(copySet.mediaStates.mediaStatesById));
        copySet.transitions.transitionsById = lodash_1.pickBy(copySet.transitions.transitionsById, function (transition) {
            return !utils_1.isValidBsDmId(transition.targetMediaStateId) || mediaStateIdSet_1.has(transition.targetMediaStateId);
        });
        var remainingTransitionIds_1 = Object.keys(copySet.transitions.transitionsById);
        Object.keys(copySet.transitions.sequencesByEventId).forEach(function (eventId) {
            var transitionSequence = copySet.transitions.sequencesByEventId[eventId];
            transitionSequence.sequence = lodash_1.intersection(transitionSequence.sequence, remainingTransitionIds_1);
        });
        copySet.transitions.sequencesByEventId = lodash_1.pickBy(copySet.transitions.sequencesByEventId, function (transitionSequence) { return transitionSequence.sequence.length > 0; });
        var transitionIdSet_1 = new Set(remainingTransitionIds_1);
        var sequenceIdsToRemove = Object.keys(copySet.commands.sequencesById).filter(function (sequenceId) {
            var commandSequence = copySet.commands.sequencesById[sequenceId];
            return commandSequence.type === bscore_1.CommandSequenceType.Transition && !transitionIdSet_1.has(commandSequence.parentId);
        });
        var sequenceIdToRemoveSet_1 = new Set(sequenceIdsToRemove);
        copySet.commands.commandsById = lodash_1.pickBy(copySet.commands.commandsById, function (command) { return !sequenceIdToRemoveSet_1.has(command.sequenceId); });
        copySet.commands.sequencesById = lodash_1.pickBy(copySet.commands.sequencesById, function (commandSequence) { return !sequenceIdToRemoveSet_1.has(commandSequence.id); });
    }
    var referencedUserVarIds = selectorUserVariable_1.dmGetActiveUserVariablesIdsForMediaStateCopySet(state, copySet);
    if (referencedUserVarIds.length > 0) {
        var signUserVars = selectorUserVariable_1.dmGetUserVariableIdsForSign(state);
        var uvIdSet_1 = new Set(referencedUserVarIds);
        copySet.userVariables = signUserVars.reduce(function (uvState, uvId) {
            if (uvIdSet_1.has(uvId)) {
                var userVariable = lodash_1.cloneDeep(selectorUserVariable_1.dmGetUserVariableStateById(state, { id: uvId }));
                uvState.variablesById[uvId] = userVariable;
                uvState.sequence.push(uvId);
                if (userVariable.isNetworked && utils_1.isValidBsDmId(userVariable.dataFeedId)) {
                    bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, userVariable.dataFeedId);
                }
            }
            return uvState;
        }, copySet.userVariables);
    }
    var initialMediaStateId = null;
    if (containerType === bsDmInterfaces_1.MediaStateContainerType.Zone) {
        initialMediaStateId = dmGetInitialMediaStateIdForZone(state, { id: containerId });
    }
    else if (containerType === bsDmInterfaces_1.MediaStateContainerType.SuperState) {
        initialMediaStateId = dmGetInitialMediaStateIdForSuperState(state, { id: containerId });
    }
    if (utils_1.isValidBsDmId(initialMediaStateId) && mediaStateIdsToCopy.indexOf(initialMediaStateId) >= 0) {
        copySet.csInitialMediaStateId = initialMediaStateId;
    }
    return copySet;
}
exports.dmGetMediaStateCopySet = dmGetMediaStateCopySet;
function dmIsMediaStateCopySetCompatibleWithZone(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.MediaState };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Zone, props.zoneId);
    var zoneType = selectorZone_1.dmGetZoneTypeById(state, { id: props.zoneId });
    if (!lodash_1.isNil(zoneType)) {
        var isContentItemValid_1 = selectorZone_1.dmGetZoneNonInteractiveById(state, { id: props.zoneId }) ?
            bsDmContentItems_1.dmIsValidContentItemForPlaylist : bsDmContentItems_1.dmIsValidContentItemForZone;
        var mediaStateIds = Object.keys(props.copySet.mediaStates.mediaStatesById);
        mediaStateIds.forEach(function (id) {
            var mediaStateState = props.copySet.mediaStates.mediaStatesById[id];
            if (!isContentItemValid_1(mediaStateState.contentItem, zoneType)) {
                result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.contentTypeNotCompatibleWithZone, __assign(__assign({}, entityDetails), { entityId: id, entityProperty: 'contentItem' })));
            }
        });
    }
    else {
        result.errorList.push(selectorValidation_1.dmGetEntityError(bsDmError_1.DmErrorType.invalidParameters, { entityType: bsDmInterfaces_1.DmEntityType.Zone, entityId: props.zoneId, entityProperty: 'id' }));
    }
    result.ok = result.errorList.length === 0;
    return result;
}
exports.dmIsMediaStateCopySetCompatibleWithZone = dmIsMediaStateCopySetCompatibleWithZone;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetPluginEventIdsForPlugin = exports.dmGetPluginEventIdsForPluginId = exports.dmGetPluginCommandIdsForPlugin = exports.dmGetScriptPluginNameMap = exports.dmGetScriptPluginAssetIds = exports.dmGetScriptPluginIds = exports.dmGetScriptPluginByName = exports.dmGetScriptPluginStateByName = exports.dmGetScriptPluginIdForName = exports.dmGetScriptPluginById = exports.dmGetScriptPluginStateById = exports.clearScriptPluginSelectorCaches = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmCommands_1 = __webpack_require__(22);
var selectorCommand_1 = __webpack_require__(26);
var selectorEvent_1 = __webpack_require__(40);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
var selGetScriptPluginById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.scriptPlugins; }, function (dmState) { return dmState.assetMap; }, function (pluginId, scriptPlugins, assetMap) {
    var pluginState = scriptPlugins[pluginId];
    if (!lodash_1.isNil(pluginState)) {
        return new bsDmClasses_1.DmcBrightScriptPlugin(pluginState, assetMap[pluginState.assetId]);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 10 }),
});
function clearScriptPluginSelectorCaches() {
    selGetScriptPluginById.clearCache();
}
exports.clearScriptPluginSelectorCaches = clearScriptPluginSelectorCaches;
function dmGetScriptPluginStateById(state, props) {
    var plugin = state.scriptPlugins[props.id];
    return plugin ? plugin : null;
}
exports.dmGetScriptPluginStateById = dmGetScriptPluginStateById;
function dmGetScriptPluginById(state, props) {
    return selGetScriptPluginById(state, props);
}
exports.dmGetScriptPluginById = dmGetScriptPluginById;
function dmGetScriptPluginIdForName(state, props) {
    var plugins = state.scriptPlugins;
    var pluginId = lodash_1.find(Object.keys(plugins), function (id) { return plugins[id].name === props.name; });
    return lodash_1.isNil(pluginId) ? null : pluginId;
}
exports.dmGetScriptPluginIdForName = dmGetScriptPluginIdForName;
function dmGetScriptPluginStateByName(state, props) {
    var pluginId = dmGetScriptPluginIdForName(state, props);
    return lodash_1.isNil(pluginId) ? null : state.scriptPlugins[pluginId];
}
exports.dmGetScriptPluginStateByName = dmGetScriptPluginStateByName;
function dmGetScriptPluginByName(state, props) {
    var pluginId = dmGetScriptPluginIdForName(state, props);
    return lodash_1.isNil(pluginId) ? null : selGetScriptPluginById(state, { id: pluginId });
}
exports.dmGetScriptPluginByName = dmGetScriptPluginByName;
function dmGetScriptPluginIds(state) {
    return Object.keys(state.scriptPlugins);
}
exports.dmGetScriptPluginIds = dmGetScriptPluginIds;
function dmGetScriptPluginAssetIds(state) {
    var plugins = state.scriptPlugins;
    return Object.keys(plugins).map(function (pluginId) { return plugins[pluginId].assetId; });
}
exports.dmGetScriptPluginAssetIds = dmGetScriptPluginAssetIds;
var selGetScriptPluginNameMap = reselect_1.createSelector(function (dmState) { return dmState.scriptPlugins; }, function (pluginMap) {
    return Object.keys(pluginMap).reduce(function (acc, id) {
        var plugin = pluginMap[id];
        if (plugin.name) {
            if (lodash_1.isNil(acc[plugin.name])) {
                acc[plugin.name] = [id];
            }
            else {
                acc[plugin.name].push(id);
            }
        }
        return acc;
    }, {});
});
function dmGetScriptPluginNameMap(state) {
    return selGetScriptPluginNameMap(state);
}
exports.dmGetScriptPluginNameMap = dmGetScriptPluginNameMap;
function dmGetPluginCommandIdsForPlugin(state, props) {
    return Object.keys(state.commands.commandsById).filter(function (id) {
        var command = selectorCommand_1.dmGetCommandStateById(state, { id: id });
        return command.operations.some(function (op) { return bsDmCommands_1.dmIsPluginCommandData(op.data) && op.data.pluginId === props.id; });
    });
}
exports.dmGetPluginCommandIdsForPlugin = dmGetPluginCommandIdsForPlugin;
function dmGetPluginEventIdsForPluginId(state, props) {
    return Object.keys(state.events).filter(function (id) {
        var event = selectorEvent_1.dmGetEventStateById(state, { id: id });
        return event.type === bscore_1.EventType.PluginMessage && event.data.pluginId === props.id;
    });
}
exports.dmGetPluginEventIdsForPluginId = dmGetPluginEventIdsForPluginId;
function dmGetPluginEventIdsForPlugin(state, props) {
    var pluginId = dmGetScriptPluginIdForName(state, props);
    return lodash_1.isNil(pluginId) ? [] : dmGetPluginEventIdsForPluginId(state, { id: pluginId });
}
exports.dmGetPluginEventIdsForPlugin = dmGetPluginEventIdsForPlugin;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCanChangeVideoMode = exports.dmValidateSign = exports.dmGetSignLastModifiedTime = exports.dmGetSignWssDeviceSpec = exports.dmGetSignAudioPropertyMap = exports.dmGetSignIrRemoteButtonDescriptions = exports.dmGetSignIrRemoteControl = exports.dmGetSignIrOutConfiguration = exports.dmGetSignIrInConfiguration = exports.dmGetSignIrRemote = exports.dmGetSignButtonPanelMap = exports.dmGetSignGpioList = exports.dmGetSignSerialPortConfigurations = exports.dmGetEnhancedSynchronization = exports.dmIsDolbyVisionEnabled = exports.dmIsFullResGraphicsEnabled = exports.dmGetSignMonitorOrientation = exports.dmGetSignPlayerModel = exports.dmGetSignVideoMode = exports.dmGetSignName = exports.dmGetSignId = exports.dmGetSignMetaData = exports.dmGetSignState = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmPlugins_1 = __webpack_require__(44);
var bsDmNodeApp_1 = __webpack_require__(71);
var bsDmError_1 = __webpack_require__(4);
var selectorZone_1 = __webpack_require__(42);
var selectorDataFeed_1 = __webpack_require__(35);
var selectorScriptPlugin_1 = __webpack_require__(48);
var selectorParserPlugin_1 = __webpack_require__(63);
var selectorVideoModePlugin_1 = __webpack_require__(70);
var selectorNodeApp_1 = __webpack_require__(62);
var selectorLinkedPresentation_1 = __webpack_require__(60);
var selectorAuxiliaryFile_1 = __webpack_require__(67);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorValidation_1 = __webpack_require__(17);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
function dmGetSignState(state) {
    return state;
}
exports.dmGetSignState = dmGetSignState;
var selGetMetadata = reselect_1.createSelector(function (state) { return state.sign; }, function (metadata) { return new bsDmClasses_1.DmcSignMetadata(metadata); });
function dmGetSignMetaData(state) {
    return selGetMetadata(state);
}
exports.dmGetSignMetaData = dmGetSignMetaData;
function dmGetSignId(state) {
    return state.sign.properties.id;
}
exports.dmGetSignId = dmGetSignId;
function dmGetSignName(state) {
    return state.sign.properties.name;
}
exports.dmGetSignName = dmGetSignName;
function dmGetSignVideoMode(state) {
    return state.sign.properties.videoMode;
}
exports.dmGetSignVideoMode = dmGetSignVideoMode;
function dmGetSignPlayerModel(state) {
    return state.sign.properties.model;
}
exports.dmGetSignPlayerModel = dmGetSignPlayerModel;
function dmGetSignMonitorOrientation(state) {
    return state.sign.properties.monitorOrientation;
}
exports.dmGetSignMonitorOrientation = dmGetSignMonitorOrientation;
function dmIsFullResGraphicsEnabled(state) {
    return state.sign.properties.fullResGraphicsEnabled;
}
exports.dmIsFullResGraphicsEnabled = dmIsFullResGraphicsEnabled;
function dmIsDolbyVisionEnabled(state) {
    return state.sign.properties.dolbyVisionEnabled
        && bscore_1.bscPlayerModelHasFeature(state.sign.properties.model, bscore_1.ModelFeature.DolbyVision);
}
exports.dmIsDolbyVisionEnabled = dmIsDolbyVisionEnabled;
function dmGetEnhancedSynchronization(state) {
    var es = state.sign.properties.enableEnhancedSynchronization;
    return lodash_1.isNil(es) ? null : __assign({}, es);
}
exports.dmGetEnhancedSynchronization = dmGetEnhancedSynchronization;
function dmGetSignSerialPortConfigurations(state) {
    return state.sign.serialPortConfigurations;
}
exports.dmGetSignSerialPortConfigurations = dmGetSignSerialPortConfigurations;
function dmGetSignGpioList(state) {
    return state.sign.gpio;
}
exports.dmGetSignGpioList = dmGetSignGpioList;
function dmGetSignButtonPanelMap(state) {
    return state.sign.buttonPanels;
}
exports.dmGetSignButtonPanelMap = dmGetSignButtonPanelMap;
function dmGetSignIrRemote(state) {
    return state.sign.irRemote;
}
exports.dmGetSignIrRemote = dmGetSignIrRemote;
function dmGetSignIrInConfiguration(state) {
    return state.sign.irRemote.irInConfiguration;
}
exports.dmGetSignIrInConfiguration = dmGetSignIrInConfiguration;
function dmGetSignIrOutConfiguration(state) {
    return state.sign.irRemote.irOutConfiguration;
}
exports.dmGetSignIrOutConfiguration = dmGetSignIrOutConfiguration;
function dmGetSignIrRemoteControl(state) {
    return state.sign.irRemote.irRemoteControl;
}
exports.dmGetSignIrRemoteControl = dmGetSignIrRemoteControl;
function dmGetSignIrRemoteButtonDescriptions(state) {
    var buttonDescriptions = [];
    if (!lodash_1.isNil(state.sign.irRemote) && !lodash_1.isNil(state.sign.irRemote.irRemoteControl)) {
        var buttons = state.sign.irRemote.irRemoteControl.buttons;
        for (var buttonCode in buttons) {
            if (buttons.hasOwnProperty(buttonCode)) {
                buttonDescriptions.push(buttons[buttonCode].buttonDescription);
            }
        }
    }
    return buttonDescriptions;
}
exports.dmGetSignIrRemoteButtonDescriptions = dmGetSignIrRemoteButtonDescriptions;
function dmGetSignAudioPropertyMap(state) {
    return state.sign.audioSignPropertyMap;
}
exports.dmGetSignAudioPropertyMap = dmGetSignAudioPropertyMap;
function dmGetSignWssDeviceSpec(state) {
    return state.sign.wssDeviceSpec;
}
exports.dmGetSignWssDeviceSpec = dmGetSignWssDeviceSpec;
function dmGetSignLastModifiedTime(state) {
    return state.sign.lastModifiedTime !== undefined ? new Date(state.sign.lastModifiedTime) : new Date(2019);
}
exports.dmGetSignLastModifiedTime = dmGetSignLastModifiedTime;
function dmValidateSign(state) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Sign, entityId: state.sign.properties.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Sign, state.sign.properties.id);
    var dataFeedIds = selectorDataFeed_1.dmGetSystemDataFeedIdsForSign(state);
    dataFeedIds.forEach(function (dataFeedId) {
        var error = selectorValidation_1.dmValidateEntityDataFeed(state, dataFeedId, __assign(__assign({}, entityDetails), { entityProperty: 'systemDataFeeds' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    var nodeAppIds = selectorNodeApp_1.dmGetNodeAppIdsForSign(state);
    nodeAppIds.forEach(function (nodeAppId) {
        var error = bsDmNodeApp_1.dmCheckNodeAppValidity(state, nodeAppId, __assign(__assign({}, entityDetails), { entityProperty: 'nodeApps' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    var pluginIds = selectorScriptPlugin_1.dmGetScriptPluginIds(state);
    pluginIds.forEach(function (pluginId) {
        var error = bsDmPlugins_1.dmCheckScriptPluginValidity(state, pluginId, __assign(__assign({}, entityDetails), { entityProperty: 'scriptPlugins' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    pluginIds = selectorParserPlugin_1.dmGetParserPluginIds(state);
    pluginIds.forEach(function (pluginId) {
        var error = bsDmPlugins_1.dmCheckParserPluginValidity(state, pluginId, __assign(__assign({}, entityDetails), { entityProperty: 'parserPlugins' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    pluginIds = selectorVideoModePlugin_1.dmGetVideoModePluginIds(state);
    pluginIds.forEach(function (pluginId) {
        var error = bsDmPlugins_1.dmCheckVideoModePluginValidity(state, pluginId, __assign(__assign({}, entityDetails), { entityProperty: 'videoModePlugins' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    var userVariables = selectorUserVariable_1.dmGetUserVariableIdsForSign(state);
    userVariables.forEach(function (id) {
        var errorList = selectorUserVariable_1.dmCheckUserVariableValidity(state, id, __assign(__assign({}, entityDetails), { entityProperty: 'userVariables' }));
        result.errorList = result.errorList.concat(errorList);
    });
    var linkedPresentations = selectorLinkedPresentation_1.dmGetLinkedPresentationIds(state);
    linkedPresentations.forEach(function (id) {
        var lp = selectorLinkedPresentation_1.dmGetLinkedPresentationStateById(state, { id: id });
        var error = selectorValidation_1.dmValidateAssetId(state, lp.assetId, __assign(__assign({}, entityDetails), { entityProperty: 'linkedPresentation' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    var auxiliaryFiles = selectorAuxiliaryFile_1.dmGetAuxiliaryFileIds(state);
    auxiliaryFiles.forEach(function (id) {
        var af = selectorAuxiliaryFile_1.dmGetAuxiliaryFileStateById(state, { id: id });
        var error = selectorValidation_1.dmValidateAssetId(state, af.assetId, __assign(__assign({}, entityDetails), { entityProperty: 'auxiliaryFile' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    var deviceWebPageErrorList = selectorValidation_1.dmValidateCustomPresentationWebPage(state, __assign(__assign({}, entityDetails), { entityProperty: 'deviceWebPage' }));
    result.errorList = result.errorList.concat(deviceWebPageErrorList);
    var componentErrors = selectorZone_1.dmGetZonesForSign(state).reduce(function (acc, zoneId) {
        var cmdResult = selectorZone_1.dmValidateZone(state, { id: zoneId });
        if (!cmdResult.ok) {
            acc.push(cmdResult);
        }
        return acc;
    }, []);
    if (componentErrors.length) {
        result.componentErrors = componentErrors;
        result.ok = false;
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateSign = dmValidateSign;
function dmCanChangeVideoMode(state, props) {
    var isTargetVideoModeHDOrSmaller = bscore_1.bscIsHDVideoResolutionOrSmaller(props.videoMode);
    var currentVideMode = dmGetSignVideoMode(state);
    var isCurrentVideModeHDOrSmaller = bscore_1.bscIsHDVideoResolutionOrSmaller(currentVideMode);
    var model = dmGetSignPlayerModel(state);
    var playerCapabilities = bscore_1.bscGetPlayerCapabilities(model);
    var canChange = true;
    if ((playerCapabilities.videoDecoder4kCount === 1 && playerCapabilities.videoPlaneCount > 1)
        && (isCurrentVideModeHDOrSmaller && !isTargetVideoModeHDOrSmaller && lodash_1.isNil(selectorZone_1.dmGetAvailableVideoLayer(state)))) {
        canChange = false;
    }
    return canChange;
}
exports.dmCanChangeVideoMode = dmCanChangeVideoMode;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetIrRemoteOutConfigurationIncompatibleCommands = exports.dmIsIrRemoteOutConfigurationCompatibleWithCommands = exports.dmGetIrRemoteInConfigurationIncompatibleEvents = exports.dmIsIrRemoteInConfigurationCompatibleWithEvents = exports.dmGetIrRemoteIncompatibleEvents = exports.dmIsIrRemoteControlCompatibleWithEvents = exports.dmGetGpioListIncompatibleEventsAndCommands = exports.dmIsGpioListCompatibleWithEventsAndCommands = exports.dmCanAddOrUpdateCommand = exports.dmIsCommandCompatibleWithSignState = exports.dmCanUpdateGlobalEventToMediaList = exports.dmCanAddGlobalEventToMediaList = exports.dmCanUpdateEventToMediaState = exports.dmCanAddEventToMediaState = exports.dmIsEventCompatibleWithSignState = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmCommands_1 = __webpack_require__(22);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
function dmIsEventCompatibleWithSignState(dmState, event, targetMediaStateId) {
    var result = bsDmEvents_1.dmIsEventCompatibleWithPlayerModel(event, selectors_1.dmGetSignPlayerModel(dmState));
    if (result.ok) {
        switch (event.type) {
            case bscore_1.EventType.PluginMessage:
                var pluginItems = selectors_1.dmGetScriptPluginIds(dmState);
                result.ok = !lodash_1.isNil(pluginItems) && pluginItems.length > 0;
                if (!result.ok) {
                    result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.pluginEventRequiresDefinedPlugins);
                }
                break;
            case bscore_1.EventType.Gpio:
                var gpioList = selectors_1.dmGetSignGpioList(dmState);
                var buttonNumber = event.data.buttonNumber;
                result.ok = !lodash_1.isNil(buttonNumber) && gpioList[buttonNumber] === bscore_1.GpioType.Input;
                if (!result.ok) {
                    result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.gpioEventRequiresGpioInput);
                }
                break;
            case bscore_1.EventType.Remote:
                var irInConfiguration = dmState.sign.irRemote.irInConfiguration;
                if (irInConfiguration.source === bscore_1.IrReceiverSource.None) {
                    result.ok = false;
                    result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.irRemoteEventRequiresIrInSource);
                }
                else {
                    var irRemoteButton = event.data.data;
                    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Event, entityId: '' };
                    var errorResult = selectors_1.dmValidateIrRemoteEventData(dmState, irRemoteButton, __assign(__assign({}, entityDetails), { entityProperty: event.type + '.data' }));
                    if (!lodash_1.isNil(errorResult)) {
                        result.ok = false;
                        result.error = errorResult;
                    }
                }
                break;
            case bscore_1.EventType.Synchronize:
                if (lodash_1.isNil(selectors_1.dmGetEnhancedSynchronization(dmState)) && utils_1.isValidBsDmId(targetMediaStateId)) {
                    var targetMediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: targetMediaStateId });
                    if (!lodash_1.isNil(targetMediaStateState)) {
                        result.ok = targetMediaStateState.contentItem.type !== bscore_1.ContentItemType.PlayFile;
                        if (!result.ok) {
                            result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.synchronizeEventNotCompatibleWithPlayFileWhenEnhancedSynchronizationDisabled);
                        }
                    }
                }
                break;
        }
    }
    return result;
}
exports.dmIsEventCompatibleWithSignState = dmIsEventCompatibleWithSignState;
function dmCanAddEventToMediaState(dmState, event, mediaStateId, targetMediaStateId) {
    var result;
    var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: mediaStateId });
    if (!lodash_1.isNil(mediaState)) {
        result = mediaState.canAddEvent(event);
        if (result.ok) {
            if ((event.type === bscore_1.EventType.Synchronize) && !utils_1.isValidBsDmId(targetMediaStateId)) {
                result = {
                    ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.synchronizeEventNotCompatibleWithContentType, 'CanAddEventToMediaState: invalid targetMediaState ID'),
                };
            }
            else if (utils_1.isValidBsDmId(targetMediaStateId)) {
                var targetMediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: targetMediaStateId });
                if (!lodash_1.isNil(targetMediaStateState)) {
                    result = bsDmEvents_1.dmIsEventCompatibleWithTargetContentItem(event, targetMediaStateState.contentItem.type);
                }
                else {
                    result = {
                        ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CanAddEventToMediaState: invalid targetMediaState ID'),
                    };
                }
            }
        }
        if (result.ok) {
            result = dmIsEventCompatibleWithSignState(dmState, event, targetMediaStateId);
        }
    }
    else {
        result = {
            ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CanAddEventToMediaState: invalid mediaState ID'),
        };
    }
    return result;
}
exports.dmCanAddEventToMediaState = dmCanAddEventToMediaState;
function dmCanUpdateEventToMediaState(dmState, newEvent, mediaStateId, eventId, targetMediaStateId) {
    var result;
    var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: mediaStateId });
    if (!lodash_1.isNil(mediaState)) {
        result = mediaState.canUpdateEvent(eventId, newEvent);
        if (result.ok && utils_1.isValidBsDmId(targetMediaStateId)) {
            var targetMediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: targetMediaStateId });
            if (!lodash_1.isNil(targetMediaStateState)) {
                result = bsDmEvents_1.dmIsEventCompatibleWithTargetContentItem(newEvent, targetMediaStateState.contentItem.type);
            }
            else {
                result = {
                    ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CanUpdateEventToMediaState: invalid targetMediaState ID'),
                };
            }
        }
        else if (!utils_1.isValidBsDmId(targetMediaStateId) && newEvent.type === bscore_1.EventType.Synchronize) {
            result = {
                ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CanUpdateEventToMediaState: invalid targetMediaState ID'),
            };
        }
        if (result.ok) {
            result = dmIsEventCompatibleWithSignState(dmState, newEvent, targetMediaStateId);
        }
    }
    else {
        result = {
            ok: false, error: new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'CanUpdateEventToMediaState: invalid mediaState ID'),
        };
    }
    return result;
}
exports.dmCanUpdateEventToMediaState = dmCanUpdateEventToMediaState;
function dmCanAddGlobalEventToMediaList(dmState, event, mediaListStateId) {
    var result = { ok: true };
    var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: mediaListStateId });
    if (bsDmClasses_1.dmIsDmcMediaListMediaState(mediaState)) {
        result = mediaState.canAddGlobalEvent(event);
        if (result.ok) {
            result = dmIsEventCompatibleWithSignState(dmState, event);
        }
    }
    else {
        result.ok = false;
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithContentType, 'Global events can be added only to MediaList media states');
    }
    return result;
}
exports.dmCanAddGlobalEventToMediaList = dmCanAddGlobalEventToMediaList;
function dmCanUpdateGlobalEventToMediaList(dmState, newEvent, mediaListStateId, eventId) {
    var result = { ok: true };
    var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: mediaListStateId });
    if (bsDmClasses_1.dmIsDmcMediaListMediaState(mediaState)) {
        result = mediaState.canUpdateGlobalEvent(eventId, newEvent);
        if (result.ok) {
            result = dmIsEventCompatibleWithSignState(dmState, newEvent);
        }
    }
    else {
        result.ok = false;
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.eventNotCompatibleWithContentType, 'Global events can be updated only on MediaList media states');
    }
    return result;
}
exports.dmCanUpdateGlobalEventToMediaList = dmCanUpdateGlobalEventToMediaList;
function dmIsCommandCompatibleWithSignState(dmState, command) {
    var isCommandOperationCompatible = function (operation) {
        var opResult = { ok: true };
        var gpioList = selectors_1.dmGetSignGpioList(dmState);
        switch (operation.type) {
            case bscore_1.CommandType.GpioOff:
            case bscore_1.CommandType.GpioOn:
                var gpioNumber = operation.data.gpioNumber;
                opResult.ok = !lodash_1.isNil(gpioNumber) && gpioList[gpioNumber] === bscore_1.GpioType.Output;
                if (!result.ok) {
                    opResult.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.gpioCommandRequiresGpioOutput);
                }
                break;
            case bscore_1.CommandType.GpioSetState:
                opResult.ok = dmIsGpioStateCompatibleWithConfiguration(operation.data.gpioState, gpioList);
                if (!result.ok) {
                    opResult.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.gpioCommandRequiresGpioOutput);
                }
                break;
        }
        return opResult;
    };
    var result = bsDmCommands_1.dmIsCommandCompatibleWithPlayerModel(command, selectors_1.dmGetSignPlayerModel(dmState));
    if (result.ok) {
        command.operations.some(function (operation) {
            result = isCommandOperationCompatible(operation);
            return !result.ok;
        });
    }
    return result;
}
exports.dmIsCommandCompatibleWithSignState = dmIsCommandCompatibleWithSignState;
function dmCanAddOrUpdateCommand(dmState, command) {
    return dmIsCommandCompatibleWithSignState(dmState, command);
}
exports.dmCanAddOrUpdateCommand = dmCanAddOrUpdateCommand;
function dmIsGpioListCompatibleWithEventsAndCommands(dmState, gpioList) {
    var result = { ok: true };
    selectors_1.dmGetEventIdsForSign(dmState).some(function (id) {
        var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
        result.ok = eventState.type !== bscore_1.EventType.Gpio
            || gpioList[eventState.data.buttonNumber] === bscore_1.GpioType.Input;
        return !result.ok;
    });
    if (result.ok) {
        result.ok = !selectors_1.dmGetCommandIdsForSign(dmState)
            .some(function (id) {
            return !dmIsCommandCompatibleWithGpioList(selectors_1.dmGetCommandStateById(dmState, { id: id }), gpioList);
        });
    }
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.gpioConfigurationChangeCreatesInvalidEventsOrCommands);
    }
    return result;
}
exports.dmIsGpioListCompatibleWithEventsAndCommands = dmIsGpioListCompatibleWithEventsAndCommands;
function dmIsGpioStateCompatibleWithConfiguration(gpioState, gpioList) {
    var isCompatible = true;
    [0, 1, 2, 3, 4, 5, 6, 7].some(function (gpioNumber) {
        if (((gpioState & (1 << gpioNumber)) !== 0) && gpioList[gpioNumber] !== bscore_1.GpioType.Output) {
            isCompatible = false;
        }
        return !isCompatible;
    });
    return isCompatible;
}
function dmIsCommandCompatibleWithGpioList(command, gpioList) {
    var isCompatible = true;
    if (!lodash_1.isNil(command) && !lodash_1.isNil(gpioList)) {
        command.operations.some(function (operation) {
            if (operation.type === bscore_1.CommandType.GpioOn || operation.type === bscore_1.CommandType.GpioOff) {
                isCompatible = gpioList[operation.data.gpioNumber] === bscore_1.GpioType.Output;
            }
            else if (operation.type === bscore_1.CommandType.GpioSetState) {
                isCompatible =
                    dmIsGpioStateCompatibleWithConfiguration(operation.data.gpioState, gpioList);
            }
            return !isCompatible;
        });
    }
    return isCompatible;
}
function dmGetGpioListIncompatibleEventsAndCommands(dmState, gpioList) {
    var getIncompatibleEventIds = function () {
        return selectors_1.dmGetEventIdsForSign(dmState).filter(function (id) {
            var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
            return eventState.type === bscore_1.EventType.Gpio
                && gpioList[eventState.data.buttonNumber] !== bscore_1.GpioType.Input;
        });
    };
    var getIncompatibleCommandIds = function () {
        return selectors_1.dmGetCommandIdsForSign(dmState)
            .filter(function (id) {
            return !dmIsCommandCompatibleWithGpioList(selectors_1.dmGetCommandStateById(dmState, { id: id }), gpioList);
        });
    };
    return {
        eventIds: getIncompatibleEventIds(),
        commandIds: getIncompatibleCommandIds(),
    };
}
exports.dmGetGpioListIncompatibleEventsAndCommands = dmGetGpioListIncompatibleEventsAndCommands;
function createButtonDescriptionsMap(irRemoteConfiguration) {
    var irRemoteButtons = irRemoteConfiguration.buttons;
    var buttonDescriptionsMap = {};
    for (var _i = 0, _a = Object.keys(irRemoteButtons); _i < _a.length; _i++) {
        var buttonCode = _a[_i];
        buttonDescriptionsMap[irRemoteButtons[buttonCode].buttonDescription] = true;
    }
    return buttonDescriptionsMap;
}
function dmIsIrRemoteControlCompatibleWithEvents(dmState, irRemoteConfiguration) {
    var result = { ok: true };
    var buttonDescriptionsMap = createButtonDescriptionsMap(irRemoteConfiguration);
    selectors_1.dmGetEventIdsForSign(dmState).some(function (id) {
        var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
        if (eventState.type === bscore_1.EventType.Remote) {
            var eventButtonDescription = eventState.data.data;
            if (!buttonDescriptionsMap.hasOwnProperty(eventButtonDescription)) {
                result.ok = false;
                return true;
            }
        }
    });
    if (!result.ok) {
        result.error = new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.irRemoteChangeCreatesInvalidEventsOrCommands);
    }
    return result;
}
exports.dmIsIrRemoteControlCompatibleWithEvents = dmIsIrRemoteControlCompatibleWithEvents;
function dmGetIrRemoteIncompatibleEvents(dmState, irRemoteConfiguration) {
    var buttonDescriptionsMap = createButtonDescriptionsMap(irRemoteConfiguration);
    var getIncompatibleEventIds = function () {
        return selectors_1.dmGetEventIdsForSign(dmState).filter(function (id) {
            var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
            if (eventState.type === bscore_1.EventType.Remote) {
                var eventButtonDescription = eventState.data.data;
                if (!buttonDescriptionsMap.hasOwnProperty(eventButtonDescription)) {
                    return true;
                }
            }
            else {
                return false;
            }
        });
    };
    return getIncompatibleEventIds();
}
exports.dmGetIrRemoteIncompatibleEvents = dmGetIrRemoteIncompatibleEvents;
function dmIsIrRemoteInConfigurationCompatibleWithEvents(dmState, irInConfiguration) {
    var result = { ok: true };
    if (irInConfiguration.source === bscore_1.IrReceiverSource.None) {
        var eventIds = selectors_1.dmGetEventIdsForSign(dmState);
        for (var _i = 0, eventIds_1 = eventIds; _i < eventIds_1.length; _i++) {
            var id = eventIds_1[_i];
            var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
            if (eventState.type === bscore_1.EventType.Remote) {
                result.ok = false;
                break;
            }
        }
    }
    return result;
}
exports.dmIsIrRemoteInConfigurationCompatibleWithEvents = dmIsIrRemoteInConfigurationCompatibleWithEvents;
function dmGetIrRemoteInConfigurationIncompatibleEvents(dmState, irRemoteInConfiguration) {
    if (irRemoteInConfiguration.irInConfiguration.source !== bscore_1.IrReceiverSource.None) {
        return [];
    }
    var getIncompatibleEventIds = function () {
        return selectors_1.dmGetEventIdsForSign(dmState).filter(function (id) {
            var eventState = selectors_1.dmGetEventStateById(dmState, { id: id });
            return (eventState.type === bscore_1.EventType.Remote);
        });
    };
    return getIncompatibleEventIds();
}
exports.dmGetIrRemoteInConfigurationIncompatibleEvents = dmGetIrRemoteInConfigurationIncompatibleEvents;
function dmIsIrRemoteOutConfigurationCompatibleWithCommands(dmState, irOutConfiguration) {
    var result = { ok: true };
    if (irOutConfiguration.destination === bscore_1.IrTransmitterDestination.None) {
        var commandIds = selectors_1.dmGetCommandIdsForSign(dmState);
        for (var _i = 0, commandIds_1 = commandIds; _i < commandIds_1.length; _i++) {
            var id = commandIds_1[_i];
            var commandState = selectors_1.dmGetCommandStateById(dmState, { id: id });
            for (var _a = 0, _b = commandState.operations; _a < _b.length; _a++) {
                var operation = _b[_a];
                var commandType = operation.type;
                if (commandType === bscore_1.CommandType.SendIRRemote || commandType === bscore_1.CommandType.SendProntoIRRemote) {
                    result.ok = false;
                    return result;
                }
            }
        }
    }
    return result;
}
exports.dmIsIrRemoteOutConfigurationCompatibleWithCommands = dmIsIrRemoteOutConfigurationCompatibleWithCommands;
function dmGetIrRemoteOutConfigurationIncompatibleCommands(dmState, irRemoteOutConfiguration) {
    if (irRemoteOutConfiguration.irOutConfiguration.destination !== bscore_1.IrTransmitterDestination.None) {
        return [];
    }
    var getIncompatibleCommandIds = function () {
        return selectors_1.dmGetCommandIdsForSign(dmState)
            .filter(function (id) {
            var commandState = selectors_1.dmGetCommandStateById(dmState, { id: id });
            for (var _i = 0, _a = commandState.operations; _i < _a.length; _i++) {
                var operation = _a[_i];
                var commandType = operation.type;
                return (commandType === bscore_1.CommandType.SendIRRemote || commandType === bscore_1.CommandType.SendProntoIRRemote);
            }
        });
    };
    return getIncompatibleCommandIds();
}
exports.dmGetIrRemoteOutConfigurationIncompatibleCommands = dmGetIrRemoteOutConfigurationIncompatibleCommands;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmRemoveAuxiliaryFiles = exports.dmUpdateAuxiliaryFileAssetId = exports.dmUpdateAuxiliaryFileWithoutValidation = exports.dmUpdateAuxiliaryFile = exports.dmPutAuxiliaryFileWithoutValidation = exports.dmPutAuxiliaryFile = exports.REMOVE_AUX_FILES = exports.UPDATE_AUX_FILE = exports.PUT_AUX_FILE = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var bsDmInterfaces_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(3);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var lodash_1 = __webpack_require__(0);
exports.PUT_AUX_FILE = 'DM_PUT_AUX_FILE';
exports.UPDATE_AUX_FILE = 'DM_UPDATE_AUX_FILE';
exports.REMOVE_AUX_FILES = 'DM_REMOVE_AUX_FILES';
function dmPutAuxiliaryFile(name, assetItem, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PUT_AUX_FILE,
            payload: {
                id: utils_1.newBsDmId(),
                name: name != null ? name : '',
                assetId: bsDmInterfaces_1.BsDmIdNone,
            },
        };
        if (validate) {
            if (!name) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'File component name cannot be empty');
            }
        }
        var batchedActions = [];
        if (bscore_1.bscIsAssetItem(assetItem)) {
            var dmState = bsDmState_1.dmFilterDmState(getState());
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'File AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmPutAuxiliaryFile = dmPutAuxiliaryFile;
function dmPutAuxiliaryFileWithoutValidation(name, assetItem) {
    return dmPutAuxiliaryFile(name, assetItem, false);
}
exports.dmPutAuxiliaryFileWithoutValidation = dmPutAuxiliaryFileWithoutValidation;
function dmUpdateAuxiliaryFile(params, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_AUX_FILE,
            payload: { id: params.id },
        };
        if (params.name) {
            mainAction.payload.name = params.name;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingFile = selectors_1.dmGetAuxiliaryFileStateById(dmState, { id: params.id });
        var existingAssetItem = lodash_1.isNil(existingFile) ? null : selectors_1.dmGetAssetItemById(dmState, { id: existingFile.assetId });
        if (params.assetItem && (lodash_1.isNil(existingAssetItem) || params.assetItem.locator !== existingAssetItem.locator)) {
            if (!lodash_1.isNil(existingFile)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingFile.assetId));
            }
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
            batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateAuxiliaryFile = dmUpdateAuxiliaryFile;
function dmUpdateAuxiliaryFileWithoutValidation(params) {
    return dmUpdateAuxiliaryFile(params, false);
}
exports.dmUpdateAuxiliaryFileWithoutValidation = dmUpdateAuxiliaryFileWithoutValidation;
function dmUpdateAuxiliaryFileAssetId(id, assetId) {
    return {
        type: exports.UPDATE_AUX_FILE,
        payload: { id: id, assetId: assetId },
    };
}
exports.dmUpdateAuxiliaryFileAssetId = dmUpdateAuxiliaryFileAssetId;
function dmRemoveAuxiliaryFiles(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.REMOVE_AUX_FILES,
            payload: { id: id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var file = dmState.auxiliaryFiles[id];
        if (utils_1.isValidBsDmId(file.assetId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(file.assetId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmRemoveAuxiliaryFiles = dmRemoveAuxiliaryFiles;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetDeleteDeviceWebPageActions = exports.dmDeleteDeviceWebPage = exports.dmUpdateDeviceWebPageIndexAssetId = exports.doUpdateDeviceWebPage = exports.dmUpdateDeviceWebPage = exports.dmPutDeviceWebPage = exports.dmAddDeviceWebPage = exports.dmSetPresentationWebPage = exports.DefaultPresentationWebPagePort = exports.DELETE_DEVICE_WEB_PAGE = exports.UPDATE_DEVICE_WEB_PAGE = exports.SET_PRESENTATION_WEB_PAGE = exports.ADD_DEVICE_WEB_PAGE = void 0;
var utils_1 = __webpack_require__(3);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionSign_1 = __webpack_require__(7);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
var lodash_1 = __webpack_require__(0);
exports.ADD_DEVICE_WEB_PAGE = 'DM_ADD_DEVICE_WEB_PAGE';
exports.SET_PRESENTATION_WEB_PAGE = 'DM_SET_PRESENTATION_WEB_PAGE';
exports.UPDATE_DEVICE_WEB_PAGE = 'DM_UPDATE_DEVICE_WEB_PAGE';
exports.DELETE_DEVICE_WEB_PAGE = 'DM_DELETE_DEVICE_WEB_PAGE';
exports.DefaultPresentationWebPagePort = 8008;
function dmSetPresentationWebPage(mode, customIndexAssetItem, customName) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.SET_PRESENTATION_WEB_PAGE,
            payload: {
                mode: mode,
                customPageId: bsDmInterfaces_1.BsDmIdNone,
            },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var batchedActions = [];
        var existingCustomPage = selectors_1.dmGetDeviceWebPageForPort(dmState, { port: 0 });
        if (!lodash_1.isNil(existingCustomPage)) {
            if (mode !== bscore_1.DeviceWebPageDisplay.Custom || !lodash_1.isNil(customIndexAssetItem)) {
                var deleteActions = dmGetDeleteDeviceWebPageActions(dmState, existingCustomPage.id);
                batchedActions.push.apply(batchedActions, deleteActions.actions);
            }
        }
        if (mode === bscore_1.DeviceWebPageDisplay.Custom) {
            if (!lodash_1.isNil(customIndexAssetItem)) {
                if (lodash_1.isNil(customName)) {
                    customName = selectors_1.dmGetSignName(dmState) + '-WebPage';
                }
                mainAction.payload.customName = customName;
                var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, customIndexAssetItem, mainAction);
                mainAction.payload.customIndexAssetId = assetItem.id;
                var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
                batchedActions.push(assetAction);
                var deviceWebPageAction = dmPutDeviceWebPage(customName, assetItem.id);
                mainAction.payload.customPageId = deviceWebPageAction.payload.id;
                batchedActions.push(deviceWebPageAction);
            }
        }
        batchedActions.push(actionSign_1.dmUpdateSignProperties({ id: bsDmInterfaces_1.BsDmIdNone, deviceWebPageDisplay: mode }));
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmSetPresentationWebPage = dmSetPresentationWebPage;
function dmAddDeviceWebPage(name, indexAssetItem, port) {
    if (port === void 0) { port = 0; }
    return function (dispatch, getState) {
        if (port === exports.DefaultPresentationWebPagePort) {
            port = 0;
        }
        if (!indexAssetItem) {
            indexAssetItem = bscore_1.bscGetNullAssetItem(bscore_1.AssetType.DeviceHtmlSite);
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingWebPage = selectors_1.dmGetDeviceWebPageForPort(dmState, { port: port });
        if (existingWebPage) {
            return doUpdateDeviceWebPage({ id: existingWebPage.id, name: name, indexAssetItem: indexAssetItem, port: port }, dispatch, getState);
        }
        var batchedActions = [];
        var mainAction = dmPutDeviceWebPage(name, bscore_1.BsAssetIdNone, port);
        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, indexAssetItem, mainAction);
        var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
        batchedActions.push(assetAction);
        mainAction.payload.indexAssetId = assetItem.id;
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddDeviceWebPage = dmAddDeviceWebPage;
function dmPutDeviceWebPage(name, indexAssetId, port) {
    if (port === void 0) { port = 0; }
    return {
        type: exports.ADD_DEVICE_WEB_PAGE,
        payload: {
            id: utils_1.newBsDmId(),
            name: name,
            indexAssetId: indexAssetId,
            port: port,
        },
    };
}
exports.dmPutDeviceWebPage = dmPutDeviceWebPage;
function dmUpdateDeviceWebPage(params) {
    return function (dispatch, getState) {
        return doUpdateDeviceWebPage(params, dispatch, getState);
    };
}
exports.dmUpdateDeviceWebPage = dmUpdateDeviceWebPage;
function doUpdateDeviceWebPage(params, dispatch, getState) {
    if (lodash_1.isNil(params.port) || params.port === exports.DefaultPresentationWebPagePort) {
        params.port = 0;
    }
    var mainAction = {
        type: exports.UPDATE_DEVICE_WEB_PAGE,
        payload: lodash_1.pick(params, ['id', 'name', 'port']),
    };
    var dmState = bsDmState_1.dmFilterDmState(getState());
    if (mainAction.payload.hasOwnProperty('port')) {
        var deviceWebpageToUpdate = selectors_1.dmGetDeviceWebPageById(dmState, { id: params.id });
        if (deviceWebpageToUpdate && deviceWebpageToUpdate.port !== mainAction.payload.port) {
            var existingDeviceWebPage = selectors_1.dmGetDeviceWebPageForPort(dmState, { port: mainAction.payload.port });
            if (existingDeviceWebPage) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, ' Cannot change port to one already in use');
            }
        }
    }
    var batchedActions = [];
    if (!lodash_1.isUndefined(params.indexAssetItem)) {
        var assetItem = lodash_1.isNull(params.indexAssetItem) ? bscore_1.bscGetNullAssetItem(bscore_1.AssetType.DeviceHtmlSite) : params.indexAssetItem;
        var currentDeviceWebPage = dmState.deviceWebPages[params.id];
        if (currentDeviceWebPage.indexAssetId) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(currentDeviceWebPage.indexAssetId));
        }
        assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
        var assetAction = actionAssetMap_1.dmPutAssetItem(assetItem);
        batchedActions.push(assetAction);
        mainAction.payload.indexAssetId = assetItem.id;
    }
    batchedActions.push(mainAction);
    dispatch(actionBase_1.dmBatchActions(batchedActions));
    return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
}
exports.doUpdateDeviceWebPage = doUpdateDeviceWebPage;
function dmUpdateDeviceWebPageIndexAssetId(id, newAssetId) {
    return {
        type: exports.UPDATE_DEVICE_WEB_PAGE,
        payload: { id: id, indexAssetId: newAssetId },
    };
}
exports.dmUpdateDeviceWebPageIndexAssetId = dmUpdateDeviceWebPageIndexAssetId;
function dmDeleteDeviceWebPage(id) {
    return function (dispatch, getState) {
        var deleteActions = dmGetDeleteDeviceWebPageActions(bsDmState_1.dmFilterDmState(getState()), id);
        dispatch(actionBase_1.dmBatchActions(deleteActions.actions));
        return __assign(__assign({}, deleteActions.mainAction), { meta: { dispatchList: deleteActions.actions } });
    };
}
exports.dmDeleteDeviceWebPage = dmDeleteDeviceWebPage;
function dmGetDeleteDeviceWebPageActions(dmState, id) {
    var mainAction = {
        type: exports.DELETE_DEVICE_WEB_PAGE,
        payload: { id: id },
    };
    var actions = [];
    var deviceWebPage = dmState.deviceWebPages[id];
    if (deviceWebPage) {
        actions.push(actionAssetMap_1.dmRemoveAssetItems(deviceWebPage.indexAssetId));
    }
    actions.push(mainAction);
    return { actions: actions, mainAction: mainAction };
}
exports.dmGetDeleteDeviceWebPageActions = dmGetDeleteDeviceWebPageActions;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmRemoveLinkedPresentation = exports.dmUpdateLinkedPresentationAssetId = exports.dmUpdateLinkedPresentationWithoutValidation = exports.dmUpdateLinkedPresentation = exports.dmGetPutLinkedPresentationAction = exports.dmPutLinkedPresentationWithoutValidation = exports.dmPutLinkedPresentation = exports.REMOVE_LINKED_PRESENTATION = exports.UPDATE_LINKED_PRESENTATION = exports.PUT_LINKED_PRESENTATION = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var bsDmInterfaces_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(3);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var lodash_1 = __webpack_require__(0);
var actionCommand_1 = __webpack_require__(33);
exports.PUT_LINKED_PRESENTATION = 'DM_PUT_LINKED_PRESENTATION';
exports.UPDATE_LINKED_PRESENTATION = 'DM_UPDATE_LINKED_PRESENTATION';
exports.REMOVE_LINKED_PRESENTATION = 'DM_REMOVE_LINKED_PRESENTATION';
function dmPutLinkedPresentation(name, assetItem, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mainAction = dmGetPutLinkedPresentationAction(name);
        var existingLp = selectors_1.dmGetLinkedPresentationForAssetLocator(dmState, assetItem);
        if (validate) {
            if (!lodash_1.isNil(existingLp)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmPutLinkedPresentation: LinkedPresentation is already defined for the given presentation');
            }
            if (!name) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmPutLinkedPresentation: Presentation name cannot be empty');
            }
            if (name.toLowerCase() === selectors_1.dmGetSignName(dmState).toLowerCase()) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmPutLinkedPresentation: LinkedPresentation name cannot be same as the current presentation');
            }
        }
        else if (!lodash_1.isNil(existingLp)) {
            mainAction.payload = existingLp;
            return mainAction;
        }
        var batchedActions = [];
        if (bscore_1.bscIsAssetItem(assetItem) && assetItem.assetType === bscore_1.AssetType.Project) {
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmPutLinkedPresentation: Presentation AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmPutLinkedPresentation = dmPutLinkedPresentation;
function dmPutLinkedPresentationWithoutValidation(name, assetItem) {
    return dmPutLinkedPresentation(name, assetItem, false);
}
exports.dmPutLinkedPresentationWithoutValidation = dmPutLinkedPresentationWithoutValidation;
function dmGetPutLinkedPresentationAction(name, assetId) {
    if (assetId === void 0) { assetId = bsDmInterfaces_1.BsDmIdNone; }
    return {
        type: exports.PUT_LINKED_PRESENTATION,
        payload: {
            id: utils_1.newBsDmId(),
            name: name != null ? name : '',
            assetId: assetId,
        },
    };
}
exports.dmGetPutLinkedPresentationAction = dmGetPutLinkedPresentationAction;
function dmUpdateLinkedPresentation(params, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_LINKED_PRESENTATION,
            payload: { id: params.id },
        };
        if (params.name) {
            mainAction.payload.name = params.name;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingFile = selectors_1.dmGetLinkedPresentationStateById(dmState, { id: params.id });
        var existingAssetItem = lodash_1.isNil(existingFile) ? null : selectors_1.dmGetAssetItemById(dmState, { id: existingFile.assetId });
        if (params.assetItem
            && ((lodash_1.isNil(existingAssetItem) || params.assetItem.locator !== existingAssetItem.locator))) {
            if (!lodash_1.isNil(existingFile)) {
                batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingFile.assetId));
            }
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
            batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmUpdateLinkedPresentation = dmUpdateLinkedPresentation;
function dmUpdateLinkedPresentationWithoutValidation(params) {
    return dmUpdateLinkedPresentation(params, false);
}
exports.dmUpdateLinkedPresentationWithoutValidation = dmUpdateLinkedPresentationWithoutValidation;
function dmUpdateLinkedPresentationAssetId(id, assetId) {
    return {
        type: exports.UPDATE_LINKED_PRESENTATION,
        payload: { id: id, assetId: assetId },
    };
}
exports.dmUpdateLinkedPresentationAssetId = dmUpdateLinkedPresentationAssetId;
function dmRemoveLinkedPresentation(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.REMOVE_LINKED_PRESENTATION,
            payload: { id: id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var presentation = dmState.linkedPresentations[id];
        if (utils_1.isValidBsDmId(presentation.assetId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(presentation.assetId));
        }
        var presentationCommandIds = selectors_1.dmGetLinkedPresentationCommandIdsForLinkedPresentation(dmState, { id: id });
        if (presentationCommandIds.length > 0) {
            batchedActions.push(actionCommand_1.dmDeleteCommand(presentationCommandIds));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmRemoveLinkedPresentation = dmRemoveLinkedPresentation;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmRemoveParserBrightScriptPlugin = exports.dmUpdateParserBrightScriptPluginAssetId = exports.dmUpdateParserBrightScriptPluginWithoutValidation = exports.dmUpdateParserBrightScriptPlugin = exports.dmGetPutParserBrightScriptPluginAction = exports.dmAddParserBrightScriptPluginWithoutValidation = exports.dmAddParserBrightScriptPlugin = exports.REMOVE_PARSER_PLUGIN = exports.UPDATE_PARSER_PLUGIN = exports.ADD_PARSER_PLUGIN = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmPlugins_1 = __webpack_require__(44);
var bsDmError_1 = __webpack_require__(4);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var selectors_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
exports.ADD_PARSER_PLUGIN = 'DM_ADD_PARSER_PLUGIN';
exports.UPDATE_PARSER_PLUGIN = 'DM_UPDATE_PARSER_PLUGIN';
exports.REMOVE_PARSER_PLUGIN = 'DM_REMOVE_PARSER_PLUGIN';
function dmAddParserBrightScriptPlugin(name, assetItem, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName, validate) {
    if (parseFeedFunctionName === void 0) { parseFeedFunctionName = ''; }
    if (parseUVFunctionName === void 0) { parseUVFunctionName = ''; }
    if (userAgentFunctionName === void 0) { userAgentFunctionName = ''; }
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = dmGetPutParserBrightScriptPluginAction(name, bsDmInterfaces_1.BsDmIdNone, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName);
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (validate) {
            if (lodash_1.isNil(name) || name.length === 0) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin name cannot be empty');
            }
            var validityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(dmState, assetItem);
            if (!validityError) {
                validityError = bsDmPlugins_1.dmCheckNewParserPluginFunctionValidity(dmState, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName);
            }
            if (validityError) {
                validityError.attachAction(mainAction);
                throw validityError;
            }
        }
        var batchedActions = [];
        if (bscore_1.bscIsAssetItem(assetItem)) {
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmAddParserBrightScriptPlugin = dmAddParserBrightScriptPlugin;
function dmAddParserBrightScriptPluginWithoutValidation(name, assetItem, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName) {
    if (parseFeedFunctionName === void 0) { parseFeedFunctionName = ''; }
    if (parseUVFunctionName === void 0) { parseUVFunctionName = ''; }
    if (userAgentFunctionName === void 0) { userAgentFunctionName = ''; }
    return dmAddParserBrightScriptPlugin(name, assetItem, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName, false);
}
exports.dmAddParserBrightScriptPluginWithoutValidation = dmAddParserBrightScriptPluginWithoutValidation;
function dmGetPutParserBrightScriptPluginAction(name, assetId, parseFeedFunctionName, parseUVFunctionName, userAgentFunctionName) {
    if (assetId === void 0) { assetId = bsDmInterfaces_1.BsDmIdNone; }
    if (parseFeedFunctionName === void 0) { parseFeedFunctionName = ''; }
    if (parseUVFunctionName === void 0) { parseUVFunctionName = ''; }
    if (userAgentFunctionName === void 0) { userAgentFunctionName = ''; }
    return {
        type: exports.ADD_PARSER_PLUGIN,
        payload: {
            id: utils_1.newBsDmId(),
            name: name != null ? name : '',
            assetId: assetId,
            parseFeedFunctionName: parseFeedFunctionName != null ? parseFeedFunctionName : '',
            parseUVFunctionName: parseUVFunctionName != null ? parseUVFunctionName : '',
            userAgentFunctionName: userAgentFunctionName != null ? userAgentFunctionName : '',
        },
    };
}
exports.dmGetPutParserBrightScriptPluginAction = dmGetPutParserBrightScriptPluginAction;
function dmUpdateParserBrightScriptPlugin(params, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_PARSER_PLUGIN,
            payload: { id: params.id },
        };
        if (!lodash_1.isNil(params.name)) {
            mainAction.payload.name = params.name;
        }
        if (params.parseFeedFunctionName != null) {
            mainAction.payload.parseFeedFunctionName = params.parseFeedFunctionName;
        }
        if (params.parseUVFunctionName != null) {
            mainAction.payload.parseUVFunctionName = params.parseUVFunctionName;
        }
        if (params.userAgentFunctionName != null) {
            mainAction.payload.userAgentFunctionName = params.userAgentFunctionName;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (validate) {
            var functionValidityError = bsDmPlugins_1.dmCheckNewParserPluginFunctionValidity(dmState, params.parseFeedFunctionName, params.parseUVFunctionName, params.userAgentFunctionName, params.id);
            if (functionValidityError) {
                functionValidityError.attachAction(mainAction);
                throw functionValidityError;
            }
        }
        var existingPlugin = selectors_1.dmGetParserPluginStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(existingPlugin)) {
            var existingAssetItem = selectors_1.dmGetAssetItemById(dmState, { id: existingPlugin.assetId });
            if (params.assetItem && (!existingAssetItem || params.assetItem.locator !== existingAssetItem.locator)) {
                if (validate) {
                    var fileValidityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(dmState, params.assetItem, existingPlugin.assetId);
                    if (fileValidityError) {
                        fileValidityError.attachAction(mainAction);
                        throw fileValidityError;
                    }
                }
                if (existingAssetItem) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingPlugin.assetId));
                }
                var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
                mainAction.payload.assetId = preparedAssetItem.id;
            }
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateParserBrightScriptPlugin - plugin ID is invalid');
        }
    };
}
exports.dmUpdateParserBrightScriptPlugin = dmUpdateParserBrightScriptPlugin;
function dmUpdateParserBrightScriptPluginWithoutValidation(params) {
    return dmUpdateParserBrightScriptPlugin(params, false);
}
exports.dmUpdateParserBrightScriptPluginWithoutValidation = dmUpdateParserBrightScriptPluginWithoutValidation;
function dmUpdateParserBrightScriptPluginAssetId(id, assetId) {
    return {
        type: exports.UPDATE_PARSER_PLUGIN,
        payload: { id: id, assetId: assetId },
    };
}
exports.dmUpdateParserBrightScriptPluginAssetId = dmUpdateParserBrightScriptPluginAssetId;
function dmRemoveParserBrightScriptPlugin(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.REMOVE_PARSER_PLUGIN,
            payload: { id: id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var plugin = dmState.parserPlugins[id];
        if (utils_1.isValidBsDmId(plugin.assetId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(plugin.assetId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmRemoveParserBrightScriptPlugin = dmRemoveParserBrightScriptPlugin;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeleteThumbnail = exports.dmSetThumbnail = exports.SET_THUMBNAIL = void 0;
var bsDmError_1 = __webpack_require__(4);
var base64 = __webpack_require__(75);
var lodash_1 = __webpack_require__(0);
exports.SET_THUMBNAIL = 'DM_SET_THUMBNAIL';
function dmSetThumbnail(assetThumbnail) {
    if (!(assetThumbnail.data && assetThumbnail.type)) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'SetThumbnail - thumbnail data and type must be specified');
    }
    var action = {
        type: exports.SET_THUMBNAIL,
        payload: {
            type: assetThumbnail.type,
            data: base64.fromByteArray(assetThumbnail.data),
            size: assetThumbnail.size ? assetThumbnail.size : { width: 0, height: 0 },
        },
    };
    if (!lodash_1.isNil(assetThumbnail.hash)) {
        action.payload.hash = assetThumbnail.hash.toLowerCase();
    }
    return action;
}
exports.dmSetThumbnail = dmSetThumbnail;
function dmDeleteThumbnail() {
    return {
        type: exports.SET_THUMBNAIL,
        payload: null,
    };
}
exports.dmDeleteThumbnail = dmDeleteThumbnail;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmRemoveVideoModeBrightScriptPlugin = exports.dmUpdateVideoModeBrightScriptPluginAssetId = exports.dmUpdateVideoModeBrightScriptPluginWithoutValidation = exports.dmUpdateVideoModeBrightScriptPlugin = exports.dmGetPutVideoModeBrightScriptPluginAction = exports.dmAddVideoModeBrightScriptPluginWithoutValidation = exports.dmAddVideoModeBrightScriptPlugin = exports.REMOVE_VIDEOMODE_PLUGIN = exports.UPDATE_VIDEOMODE_PLUGIN = exports.ADD_VIDEOMODE_PLUGIN = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmPlugins_1 = __webpack_require__(44);
var bsDmError_1 = __webpack_require__(4);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var selectors_1 = __webpack_require__(6);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
exports.ADD_VIDEOMODE_PLUGIN = 'DM_ADD_VIDEOMODE_PLUGIN';
exports.UPDATE_VIDEOMODE_PLUGIN = 'DM_UPDATE_VIDEOMODE_PLUGIN';
exports.REMOVE_VIDEOMODE_PLUGIN = 'DM_REMOVE_VIDEOMODE_PLUGIN';
function dmAddVideoModeBrightScriptPlugin(name, assetItem, functionName, validate) {
    if (functionName === void 0) { functionName = ''; }
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = dmGetPutVideoModeBrightScriptPluginAction(name, bsDmInterfaces_1.BsDmIdNone, functionName);
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (validate) {
            if (lodash_1.isNil(name) || name.length === 0) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin name cannot be empty');
            }
            var validityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(dmState, assetItem);
            if (!validityError) {
                validityError = bsDmPlugins_1.dmCheckNewVideoModePluginFunctionValidity(dmState, functionName);
            }
            if (validityError) {
                validityError.attachAction(mainAction);
                throw validityError;
            }
        }
        var batchedActions = [];
        if (bscore_1.bscIsAssetItem(assetItem)) {
            var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
            var assetAction = actionAssetMap_1.dmPutAssetItem(preparedAssetItem);
            batchedActions.push(assetAction);
            mainAction.payload.assetId = preparedAssetItem.id;
        }
        else if (validate) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Plugin AssetItem is not valid');
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return mainAction;
    };
}
exports.dmAddVideoModeBrightScriptPlugin = dmAddVideoModeBrightScriptPlugin;
function dmAddVideoModeBrightScriptPluginWithoutValidation(name, assetItem, functionName) {
    if (functionName === void 0) { functionName = ''; }
    return dmAddVideoModeBrightScriptPlugin(name, assetItem, functionName, false);
}
exports.dmAddVideoModeBrightScriptPluginWithoutValidation = dmAddVideoModeBrightScriptPluginWithoutValidation;
function dmGetPutVideoModeBrightScriptPluginAction(name, assetId, functionName) {
    if (assetId === void 0) { assetId = bsDmInterfaces_1.BsDmIdNone; }
    if (functionName === void 0) { functionName = ''; }
    return {
        type: exports.ADD_VIDEOMODE_PLUGIN,
        payload: {
            id: utils_1.newBsDmId(),
            name: name != null ? name : '',
            assetId: assetId,
            functionName: functionName != null ? functionName : '',
        },
    };
}
exports.dmGetPutVideoModeBrightScriptPluginAction = dmGetPutVideoModeBrightScriptPluginAction;
function dmUpdateVideoModeBrightScriptPlugin(params, validate) {
    if (validate === void 0) { validate = true; }
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.UPDATE_VIDEOMODE_PLUGIN,
            payload: { id: params.id },
        };
        if (!lodash_1.isNil(params.name)) {
            mainAction.payload.name = params.name;
        }
        if (params.functionName != null) {
            mainAction.payload.functionName = params.functionName;
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        if (validate) {
            var functionValidityError = bsDmPlugins_1.dmCheckNewVideoModePluginFunctionValidity(dmState, params.functionName, params.id);
            if (functionValidityError) {
                functionValidityError.attachAction(mainAction);
                throw functionValidityError;
            }
        }
        var existingPlugin = selectors_1.dmGetVideoModePluginStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(existingPlugin)) {
            var existingAssetItem = selectors_1.dmGetAssetItemById(dmState, { id: existingPlugin.assetId });
            if (params.assetItem && (!existingAssetItem || params.assetItem.locator !== existingAssetItem.locator)) {
                if (validate) {
                    var fileValidityError = bsDmPlugins_1.dmCheckNewScriptPluginFileValidity(dmState, params.assetItem, existingPlugin.assetId);
                    if (fileValidityError) {
                        fileValidityError.attachAction(mainAction);
                        throw fileValidityError;
                    }
                }
                if (existingAssetItem) {
                    batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(existingPlugin.assetId));
                }
                var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
                mainAction.payload.assetId = preparedAssetItem.id;
            }
            batchedActions.push(mainAction);
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return mainAction;
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateVideoModeBrightScriptPlugin - plugin ID is invalid');
        }
    };
}
exports.dmUpdateVideoModeBrightScriptPlugin = dmUpdateVideoModeBrightScriptPlugin;
function dmUpdateVideoModeBrightScriptPluginWithoutValidation(params) {
    return dmUpdateVideoModeBrightScriptPlugin(params, false);
}
exports.dmUpdateVideoModeBrightScriptPluginWithoutValidation = dmUpdateVideoModeBrightScriptPluginWithoutValidation;
function dmUpdateVideoModeBrightScriptPluginAssetId(id, assetId) {
    return {
        type: exports.UPDATE_VIDEOMODE_PLUGIN,
        payload: { id: id, assetId: assetId },
    };
}
exports.dmUpdateVideoModeBrightScriptPluginAssetId = dmUpdateVideoModeBrightScriptPluginAssetId;
function dmRemoveVideoModeBrightScriptPlugin(id) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.REMOVE_VIDEOMODE_PLUGIN,
            payload: { id: id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var plugin = dmState.videoModePlugins[id];
        if (utils_1.isValidBsDmId(plugin.assetId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(plugin.assetId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return mainAction;
    };
}
exports.dmRemoveVideoModeBrightScriptPlugin = dmRemoveVideoModeBrightScriptPlugin;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCreateSignTreeNode = exports.createIrRemoteControl = exports.createDefaultIrRemote = exports.createDefaultSignProperties = exports.createDefaultSignState = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmVersion_1 = __webpack_require__(58);
var createDefaultSignState = function (id, name, videoMode, model) {
    return ({
        properties: exports.createDefaultSignProperties(id, name, videoMode, model),
        serialPortConfigurations: bsDmDefaults_1.dmGetDefaultSerialPortList(),
        gpio: bsDmDefaults_1.dmGetDefaultGpioList(),
        buttonPanels: bsDmDefaults_1.dmGetDefaultButtonPanelMap(),
        irRemote: exports.createDefaultIrRemote(model),
        audioSignPropertyMap: bsDmDefaults_1.dmGetDefaultAudioSignPropertyMap(),
        wssDeviceSpec: {},
        lastModifiedTime: (new Date()).toISOString(),
    });
};
exports.createDefaultSignState = createDefaultSignState;
var createDefaultSignProperties = function (id, name, videoMode, model) {
    var optionals = videoMode !== undefined ? { videoMode: videoMode } : {};
    if (model !== undefined) {
        Object.assign(optionals, { model: model });
    }
    return Object.assign({ id: id, version: bsDmVersion_1.version, name: name }, bsDmDefaults_1.dmGetDefaultSignPropertyData(), optionals);
};
exports.createDefaultSignProperties = createDefaultSignProperties;
var createDefaultIrRemote = function (model) {
    var irInConfiguration = { source: bscore_1.IrReceiverSource.IrIn };
    var irOutConfiguration = { destination: bscore_1.IrTransmitterDestination.Iguana };
    if (model !== undefined) {
        if (!bscore_1.bscPlayerModelHasFeature(model, bscore_1.ModelFeature.DedicatedIr)) {
            if (bscore_1.bscPlayerModelHasFeature(model, bscore_1.ModelFeature.Usb)) {
                irInConfiguration.source = bscore_1.IrReceiverSource.Iguana;
            }
            else {
                irInConfiguration.source = bscore_1.IrReceiverSource.None;
                irOutConfiguration.destination = bscore_1.IrTransmitterDestination.None;
            }
        }
    }
    var irRemoteControl = bscore_1.bscGetIrRemoteControl(bscore_1.IrRemoteModel.RC1002);
    return {
        irInConfiguration: irInConfiguration,
        irOutConfiguration: irOutConfiguration,
        irRemoteControl: irRemoteControl,
    };
};
exports.createDefaultIrRemote = createDefaultIrRemote;
var createIrRemoteControl = function (id, encoding, manufacturerCode, buttons) { return ({
    id: id,
    encoding: encoding,
    manufacturerCode: manufacturerCode,
    buttons: buttons,
}); };
exports.createIrRemoteControl = createIrRemoteControl;
function dmCreateSignTreeNode(id, type, parentId) {
    if (parentId === void 0) { parentId = bsDmInterfaces_1.BsDmIdNone; }
    return { id: id, type: type, parentId: parentId, children: [] };
}
exports.dmCreateSignTreeNode = dmCreateSignTreeNode;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.version = void 0;
exports.version = '1.2.1';


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmHtmlSiteHasDuplicateName = exports.dmGetHtmlSiteIdByAssetId = exports.dmGetHtmlSiteByName = exports.dmGetHtmlSiteIdByName = exports.dmGetHtmlSiteIdsForSign = exports.dmGetHtmlSiteStateById = exports.dmGetHtmlSiteById = exports.clearHtmlSiteSelectorCaches = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmClasses_1 = __webpack_require__(12);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
var selGetHtmlSiteById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.htmlSites; }, function (dmState) { return dmState.assetMap; }, function (siteId, htmlSites, assetMap) {
    var htmlSiteState = htmlSites[siteId];
    if (!lodash_1.isNil(htmlSiteState)) {
        return new bsDmClasses_1.DmcHtmlSite(htmlSiteState, assetMap[htmlSiteState.indexAssetId]);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
function clearHtmlSiteSelectorCaches() {
    selGetHtmlSiteById.clearCache();
}
exports.clearHtmlSiteSelectorCaches = clearHtmlSiteSelectorCaches;
function dmGetHtmlSiteById(state, props) {
    return selGetHtmlSiteById(state, props);
}
exports.dmGetHtmlSiteById = dmGetHtmlSiteById;
function dmGetHtmlSiteStateById(state, props) {
    var htmlSiteState = state.htmlSites[props.id];
    return lodash_1.isNil(htmlSiteState) ? null : htmlSiteState;
}
exports.dmGetHtmlSiteStateById = dmGetHtmlSiteStateById;
function dmGetHtmlSiteIdsForSign(state) {
    return Object.keys(state.htmlSites);
}
exports.dmGetHtmlSiteIdsForSign = dmGetHtmlSiteIdsForSign;
function dmGetHtmlSiteIdByName(state, props) {
    var htmlSites = state.htmlSites;
    var id = lodash_1.find(Object.keys(htmlSites), function (siteId) { return htmlSites[siteId].name === props.name; });
    return lodash_1.isNil(id) ? null : id;
}
exports.dmGetHtmlSiteIdByName = dmGetHtmlSiteIdByName;
function dmGetHtmlSiteByName(state, props) {
    var id = dmGetHtmlSiteIdByName(state, props);
    return lodash_1.isNil(id) ? null : dmGetHtmlSiteById(state, { id: id });
}
exports.dmGetHtmlSiteByName = dmGetHtmlSiteByName;
function dmGetHtmlSiteIdByAssetId(state, props) {
    var htmlSites = state.htmlSites;
    var htmlSiteId = lodash_1.find(Object.keys(htmlSites), function (id) { return htmlSites[id].type === 'Hosted' && htmlSites[id].indexAssetId === props.id; });
    return lodash_1.isNil(htmlSiteId) ? bsDmInterfaces_1.BsDmIdNone : htmlSiteId;
}
exports.dmGetHtmlSiteIdByAssetId = dmGetHtmlSiteIdByAssetId;
function dmHtmlSiteHasDuplicateName(state, props) {
    var htmlSites = state.htmlSites;
    var nodeApps = state.nodeApps;
    var htmlSitesAndNodeApps = __assign(__assign({}, htmlSites), nodeApps);
    var htmlSiteAssetTypeState = htmlSitesAndNodeApps[props.id];
    if (!lodash_1.isNil(htmlSiteAssetTypeState)) {
        var stateName_1 = htmlSiteAssetTypeState.name.toUpperCase();
        return Object.keys(htmlSitesAndNodeApps).some(function (id) {
            return id !== props.id && htmlSitesAndNodeApps[id].name.toUpperCase() === stateName_1;
        });
    }
    return false;
}
exports.dmHtmlSiteHasDuplicateName = dmHtmlSiteHasDuplicateName;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmValidateLinkedPresentations = exports.dmGetLinkedPresentationCommandIdsForLinkedPresentation = exports.dmGetLinkedPresentationStateByName = exports.dmGetLinkedPresentationCount = exports.dmGetLinkedPresentationForAssetLocator = exports.dmGetBsnLinkedPresentationAssetLocatorList = exports.dmGetLinkedPresentationAssetLocatorList = exports.dmGetLinkedPresentationAssetIds = exports.dmGetLinkedPresentationAssetIdList = exports.dmGetLinkedPresentationIds = exports.dmGetLinkedPresentationNameForId = exports.dmGetLinkedPresentationStateById = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmCommands_1 = __webpack_require__(22);
var selectorAssetMap_1 = __webpack_require__(39);
var selectorCommand_1 = __webpack_require__(26);
var lodash_1 = __webpack_require__(0);
var bsDmError_1 = __webpack_require__(4);
var selectorValidation_1 = __webpack_require__(17);
function dmGetLinkedPresentationStateById(state, props) {
    var file = state.linkedPresentations[props.id];
    return file ? file : null;
}
exports.dmGetLinkedPresentationStateById = dmGetLinkedPresentationStateById;
function dmGetLinkedPresentationNameForId(state, props) {
    var file = state.linkedPresentations[props.id];
    return file ? file.name : null;
}
exports.dmGetLinkedPresentationNameForId = dmGetLinkedPresentationNameForId;
function dmGetLinkedPresentationIds(state) {
    return state.linkedPresentations !== null ? Object.keys(state.linkedPresentations) : [];
}
exports.dmGetLinkedPresentationIds = dmGetLinkedPresentationIds;
exports.dmGetLinkedPresentationAssetIdList = dmGetLinkedPresentationIds;
function dmGetLinkedPresentationAssetIds(state) {
    var linkedPresentationIds = dmGetLinkedPresentationIds(state);
    return linkedPresentationIds.map(function (id) { return state.linkedPresentations[id].assetId; });
}
exports.dmGetLinkedPresentationAssetIds = dmGetLinkedPresentationAssetIds;
function dmGetLinkedPresentationAssetLocatorList(state) {
    var linkedPresentationIds = dmGetLinkedPresentationIds(state);
    return linkedPresentationIds.reduce(function (assetIdList, id) {
        var lp = dmGetLinkedPresentationStateById(state, { id: id });
        if (!lodash_1.isNil(lp) && bscore_1.bscIsValidAssetId(lp.assetId)) {
            var assetItem = selectorAssetMap_1.dmGetAssetItemById(state, { id: lp.assetId });
            if (!lodash_1.isNil(assetItem)) {
                assetIdList.push(bscore_1.bscAssetLocatorFromAssetItem(assetItem));
            }
        }
        return assetIdList;
    }, []);
}
exports.dmGetLinkedPresentationAssetLocatorList = dmGetLinkedPresentationAssetLocatorList;
function dmGetBsnLinkedPresentationAssetLocatorList(state) {
    return dmGetLinkedPresentationAssetLocatorList(state).filter(function (locator) { return locator.location === bscore_1.AssetLocation.Bsn; });
}
exports.dmGetBsnLinkedPresentationAssetLocatorList = dmGetBsnLinkedPresentationAssetLocatorList;
function dmGetLinkedPresentationForAssetLocator(state, props) {
    var locatorKey = bscore_1.bscGenerateAssetLocatorKey(props);
    var assetId = selectorAssetMap_1.dmGetAssetIdByLocator(state, { locator: locatorKey });
    if (!lodash_1.isNil(assetId)) {
        var linkedPresentations_1 = state.linkedPresentations;
        var lp = lodash_1.find(Object.keys(linkedPresentations_1), function (id) { return linkedPresentations_1[id].assetId === assetId; });
        if (!lodash_1.isNil(lp)) {
            return linkedPresentations_1[lp];
        }
    }
    return null;
}
exports.dmGetLinkedPresentationForAssetLocator = dmGetLinkedPresentationForAssetLocator;
function dmGetLinkedPresentationCount(state) {
    return state.linkedPresentations !== null ? Object.keys(state.linkedPresentations).length : 0;
}
exports.dmGetLinkedPresentationCount = dmGetLinkedPresentationCount;
function dmGetLinkedPresentationStateByName(state, props) {
    var presentations = state.linkedPresentations;
    var fileId = lodash_1.find(Object.keys(presentations), function (id) { return presentations[id].name === props.name; });
    return lodash_1.isNil(fileId) ? null : presentations[fileId];
}
exports.dmGetLinkedPresentationStateByName = dmGetLinkedPresentationStateByName;
function dmGetLinkedPresentationCommandIdsForLinkedPresentation(state, props) {
    return Object.keys(state.commands.commandsById).filter(function (id) {
        var command = selectorCommand_1.dmGetCommandStateById(state, { id: id });
        return command.operations.some(function (op) {
            return bsDmCommands_1.dmIsPresentationCommandData(op.data) && op.data.presentationId === props.id;
        });
    });
}
exports.dmGetLinkedPresentationCommandIdsForLinkedPresentation = dmGetLinkedPresentationCommandIdsForLinkedPresentation;
function dmValidateLinkedPresentations(state) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Sign, entityId: state.sign.properties.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Sign, state.sign.properties.id);
    var linkedPresentations = dmGetLinkedPresentationIds(state);
    linkedPresentations.forEach(function (id) {
        var lp = dmGetLinkedPresentationStateById(state, { id: id });
        var error = selectorValidation_1.dmValidateAssetId(state, lp.assetId, __assign(__assign({}, entityDetails), { entityId: id, entityProperty: "linkedPresentation " + lp.name }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateLinkedPresentations = dmValidateLinkedPresentations;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetLiveTextCopySet = exports.dmValidateLiveTextCanvas = exports.dmValidateLiveTextItem = exports.dmGetLiveTextDataFeedGroupByGroupId = exports.dmGetLiveTextItemGroupDataFeedMapForCanvas = exports.dmGetAllNonCustomLiveTextItemIdsForGroup = exports.dmGetAllLiveTextItemIdsForGroup = exports.dmGetCanvasMediaRssGroupIds = exports.dmGetAllLiveTextItemIdsForSign = exports.dmGetAllLiveTextGroupIdsForCanvas = exports.dmGetAllLiveTextItemIdsForCanvas = exports.dmGetLiveTextItemStateById = exports.dmGetLiveTextLayerActiveIndexArrayForCanvas = exports.dmGetLiveTextLayerSequenceForCanvas = exports.dmGetLiveTextCanvasIdsForSign = exports.dmGetLiveTextCanvasById = exports.dmGetLiveTextCanvasStateById = exports.clearLiveTextSelectorCaches = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var selectorValidation_1 = __webpack_require__(17);
var bsDmLiveText_1 = __webpack_require__(28);
var bsDmCopyPaste_1 = __webpack_require__(23);
var selectorDataFeed_1 = __webpack_require__(35);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
function fnCreateDmcLiveTextItem(liveTextItem, dataFeedSequences, dataFeeds, assetMap, userVariableMap, itemIndex) {
    switch (liveTextItem.type) {
        case bsDmInterfaces_1.LiveTextItemType.StaticText: {
            return new bsDmLiveText_1.DmcStaticLiveTextItem(liveTextItem, itemIndex);
        }
        case bsDmInterfaces_1.LiveTextItemType.SystemVariable: {
            return new bsDmLiveText_1.DmcSystemVariableLiveTextItem(liveTextItem, itemIndex);
        }
        case bsDmInterfaces_1.LiveTextItemType.MediaCounter: {
            var assetId = liveTextItem.assetId;
            var assetItem = lodash_1.isNil(assetId) ? null : assetMap[assetId];
            return new bsDmLiveText_1.DmcMediaCounterLiveTextItem(liveTextItem, itemIndex, assetItem);
        }
        case bsDmInterfaces_1.LiveTextItemType.UserVariable: {
            var uvIdOrName = liveTextItem.userVariableIdOrName;
            var userVariable = null;
            if (utils_1.isValidBsDmId(uvIdOrName)) {
                userVariable = userVariableMap[uvIdOrName];
            }
            return new bsDmLiveText_1.DmcUserVariableLiveTextItem(liveTextItem, itemIndex, userVariable);
        }
        case bsDmInterfaces_1.LiveTextItemType.Image: {
            var assetId = liveTextItem.assetId;
            var assetItem = lodash_1.isNil(assetId) ? null : assetMap[assetId];
            return new bsDmLiveText_1.DmcImageLiveTextItem(liveTextItem, itemIndex, assetItem);
        }
        case bsDmInterfaces_1.LiveTextItemType.TitledDataFeed:
        case bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed: {
            var dataFeedObjects = selectorDataFeed_1.fnGetDataFeedStateEntitiesByFeedId(dataFeeds, assetMap, liveTextItem.dataFeedId);
            if (liveTextItem.type === bsDmInterfaces_1.LiveTextItemType.TitledDataFeed) {
                return new bsDmLiveText_1.DmcTitledDataFeedTextItem(liveTextItem, itemIndex, dataFeedObjects);
            }
            else {
                return new bsDmLiveText_1.DmcIndexedDataFeedTextItem(liveTextItem, itemIndex, dataFeedObjects);
            }
        }
        case bsDmInterfaces_1.LiveTextItemType.SimpleRss: {
            var dataFeedGroup = dataFeedSequences[liveTextItem.groupId];
            var displayTime = lodash_1.isNil(dataFeedGroup) ? 5 : dataFeedGroup.displayTime;
            return new bsDmLiveText_1.DmcSimpleRssTextItem(liveTextItem, itemIndex, displayTime);
        }
        case bsDmInterfaces_1.LiveTextItemType.MediaRssText: {
            return new bsDmLiveText_1.DmcMediaRssTextItem(liveTextItem, itemIndex);
        }
        case bsDmInterfaces_1.LiveTextItemType.MediaRssMedia: {
            return new bsDmLiveText_1.DmcMediaRssMediaItem(liveTextItem, itemIndex);
        }
    }
    return null;
}
function fnGetLiveTextItemGroupDataFeedMapForCanvas(dataFeedSequences, dataFeedState, assetMap, canvasId) {
    return Object.keys(dataFeedSequences).reduce(function (map, groupId) {
        var sequenceObject = dataFeedSequences[groupId];
        if (sequenceObject.canvasId === canvasId) {
            map[groupId] = sequenceObject.dataFeedIds.map(function (id) { return selectorDataFeed_1.dmCreateDmcDataFeed(dataFeedState, assetMap, id); });
        }
        return map;
    }, {});
}
var selGetLiveTextCanvas = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.liveText; }, function (dmState) { return dmState.dataFeeds; }, function (dmState) { return dmState.userVariables.variablesById; }, function (dmState) { return dmState.assetMap; }, function (canvasId, liveText, dataFeeds, userVariableMap, assetMap) {
    var canvas = liveText.canvasesById[canvasId];
    if (!lodash_1.isNil(canvas)) {
        var sequence = liveText.layersByCanvasId[canvasId];
        var itemIdList = lodash_1.isNil(sequence) ? [] : sequence;
        var layerIndexArray_1 = fnGetLiveTextLayerActiveIndexArray(liveText.itemsById, liveText.layersByCanvasId[canvasId]);
        var itemMap_1 = lodash_1.isNil(sequence) ? {} :
            sequence.reduce(function (map, itemId, index) {
                var item = liveText.itemsById[itemId];
                if (!lodash_1.isNil(item)) {
                    var itemIndex = lodash_1.isNil(layerIndexArray_1) ? index :
                        layerIndexArray_1[index] >= 0 ? layerIndexArray_1[index] + 1 : -1;
                    map[itemId] = fnCreateDmcLiveTextItem(item, liveText.dataFeedsByGroupId, dataFeeds, assetMap, userVariableMap, itemIndex);
                }
                return map;
            }, {});
        var groupedTextItemMap_1 = itemIdList.reduce(function (map, itemId) {
            var item = itemMap_1[itemId];
            if (bsDmLiveText_1.dmIsDmcLiveTextItemGroupedDataFeedItem(item) && item.type !== bsDmInterfaces_1.LiveTextItemType.MediaRssMedia) {
                if (lodash_1.isNil(map[item.groupId])) {
                    map[item.groupId] = [item];
                }
                else {
                    map[item.groupId].push(item);
                }
            }
            return map;
        }, {});
        var groupedMediaItemMap_1 = itemIdList.reduce(function (map, itemId) {
            var item = itemMap_1[itemId];
            if (bsDmLiveText_1.dmIsDmcLiveTextItemMediaRssMediaItem(item)) {
                map[item.groupId] = item;
            }
            return map;
        }, {});
        var dataFeedMap_1 = fnGetLiveTextItemGroupDataFeedMapForCanvas(liveText.dataFeedsByGroupId, dataFeeds, assetMap, canvasId);
        itemIdList.forEach(function (itemId) {
            var item = itemMap_1[itemId];
            if (bsDmLiveText_1.dmIsDmcLiveTextItemGroupedDataFeedItem(item)) {
                var groupId = item.groupId;
                var groupIds = groupedTextItemMap_1[groupId];
                if (bsDmLiveText_1.dmIsDmcLiveTextItemSimpleRssItem(item)) {
                    item.groupTextItems = lodash_1.without(groupIds, item);
                }
                else if (bsDmLiveText_1.dmIsDmcLiveTextItemMediaRssTextItem(item)) {
                    item.groupTextItems = lodash_1.without(groupIds, item);
                    item.mediaItem = groupedMediaItemMap_1[groupId];
                }
                else if (bsDmLiveText_1.dmIsDmcLiveTextItemMediaRssMediaItem(item)) {
                    item.groupTextItems = groupIds;
                }
                item.dataFeeds = dataFeedMap_1[groupId];
            }
        });
        var backgroundImageAsset = utils_1.isValidBsDmId(canvas.backgroundImageId) ? assetMap[canvas.backgroundImageId] : null;
        return new bsDmLiveText_1.DmcLiveTextCanvas(canvas, itemMap_1, groupedTextItemMap_1, groupedMediaItemMap_1, dataFeedMap_1, backgroundImageAsset);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 20 }),
});
function clearLiveTextSelectorCaches() {
    selGetLiveTextCanvas.clearCache();
}
exports.clearLiveTextSelectorCaches = clearLiveTextSelectorCaches;
function dmGetLiveTextCanvasStateById(state, props) {
    var liveTextCanvasState = state.liveText.canvasesById[props.id];
    return lodash_1.isNil(liveTextCanvasState) ? null : liveTextCanvasState;
}
exports.dmGetLiveTextCanvasStateById = dmGetLiveTextCanvasStateById;
function dmGetLiveTextCanvasById(state, props) {
    return selGetLiveTextCanvas(state, props);
}
exports.dmGetLiveTextCanvasById = dmGetLiveTextCanvasById;
function dmGetLiveTextCanvasIdsForSign(state) {
    return Object.keys(state.liveText.canvasesById);
}
exports.dmGetLiveTextCanvasIdsForSign = dmGetLiveTextCanvasIdsForSign;
function dmGetLiveTextLayerSequenceForCanvas(state, props) {
    var layerSequence = state.liveText.layersByCanvasId[props.id];
    return lodash_1.isNil(layerSequence) ? null : layerSequence;
}
exports.dmGetLiveTextLayerSequenceForCanvas = dmGetLiveTextLayerSequenceForCanvas;
function fnGetLiveTextLayerActiveIndexArray(itemsById, layerSequence) {
    var layerIndex = 0;
    if (!lodash_1.isNil(layerSequence)) {
        return layerSequence.map(function (id) {
            var item = itemsById[id];
            var itemIndex = -1;
            if (!lodash_1.isNil(item)) {
                var itemEnabled = bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(item) ? item.enabled : true;
                if (itemEnabled) {
                    itemIndex = layerIndex;
                    layerIndex += 1;
                }
            }
            return itemIndex;
        });
    }
    return null;
}
function dmGetLiveTextLayerActiveIndexArrayForCanvas(state, props) {
    var layerSequence = state.liveText.layersByCanvasId[props.id];
    return fnGetLiveTextLayerActiveIndexArray(state.liveText.itemsById, layerSequence);
}
exports.dmGetLiveTextLayerActiveIndexArrayForCanvas = dmGetLiveTextLayerActiveIndexArrayForCanvas;
function dmGetLiveTextItemStateById(state, props) {
    var liveTextItemState = state.liveText.itemsById[props.id];
    return lodash_1.isNil(liveTextItemState) ? null : liveTextItemState;
}
exports.dmGetLiveTextItemStateById = dmGetLiveTextItemStateById;
function dmGetAllLiveTextItemIdsForCanvas(state, props) {
    var items = state.liveText.itemsById;
    return Object.keys(items)
        .filter(function (id) { return items[id].canvasId === props.id; });
}
exports.dmGetAllLiveTextItemIdsForCanvas = dmGetAllLiveTextItemIdsForCanvas;
function dmGetAllLiveTextGroupIdsForCanvas(state, props) {
    var dataFeedSequences = state.liveText.dataFeedsByGroupId;
    return Object.keys(dataFeedSequences)
        .filter(function (id) { return dataFeedSequences[id].canvasId === props.id; });
}
exports.dmGetAllLiveTextGroupIdsForCanvas = dmGetAllLiveTextGroupIdsForCanvas;
function dmGetAllLiveTextItemIdsForSign(state) {
    return Object.keys(state.liveText.itemsById);
}
exports.dmGetAllLiveTextItemIdsForSign = dmGetAllLiveTextItemIdsForSign;
function dmGetCanvasMediaRssGroupIds(state, props) {
    var dataFeedSequences = state.liveText.dataFeedsByGroupId;
    return Object.keys(dataFeedSequences)
        .filter(function (id) { return dataFeedSequences[id].canvasId === props.id
        && dataFeedSequences[id].usage === bscore_1.DataFeedUsageType.Mrss; });
}
exports.dmGetCanvasMediaRssGroupIds = dmGetCanvasMediaRssGroupIds;
function dmGetAllLiveTextItemIdsForGroup(state, props) {
    var items = state.liveText.itemsById;
    return Object.keys(items)
        .filter(function (id) {
        var item = items[id];
        return bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(item) && item.groupId === props.id;
    });
}
exports.dmGetAllLiveTextItemIdsForGroup = dmGetAllLiveTextItemIdsForGroup;
function dmGetAllNonCustomLiveTextItemIdsForGroup(state, props) {
    var items = state.liveText.itemsById;
    return Object.keys(items)
        .filter(function (id) {
        var item = items[id];
        return (bsDmLiveText_1.dmIsLiveTextDataSimpleRss(item)
            || bsDmLiveText_1.dmIsLiveTextDataMediaRssMedia(item)
            || (bsDmLiveText_1.dmIsLiveTextDataMediaRss(item) && item.element !== bsDmInterfaces_1.RssTextElementName.Custom))
            && item.groupId === props.id;
    });
}
exports.dmGetAllNonCustomLiveTextItemIdsForGroup = dmGetAllNonCustomLiveTextItemIdsForGroup;
function dmGetLiveTextItemGroupDataFeedMapForCanvas(state, props) {
    return fnGetLiveTextItemGroupDataFeedMapForCanvas(state.liveText.dataFeedsByGroupId, state.dataFeeds, state.assetMap, props.id);
}
exports.dmGetLiveTextItemGroupDataFeedMapForCanvas = dmGetLiveTextItemGroupDataFeedMapForCanvas;
function dmGetLiveTextDataFeedGroupByGroupId(state, props) {
    var dataFeedSequence = state.liveText.dataFeedsByGroupId[props.id];
    return lodash_1.isNil(dataFeedSequence) ? null : dataFeedSequence;
}
exports.dmGetLiveTextDataFeedGroupByGroupId = dmGetLiveTextDataFeedGroupByGroupId;
function dmValidateLiveTextItem(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.LiveTextItem, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.LiveTextItem, props.id);
    var itemState = dmGetLiveTextItemStateById(state, { id: props.id });
    var validateAssetId = function (assetId, entityProperty, entityInfo) {
        var error = selectorValidation_1.dmValidateAssetId(state, assetId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            if (!lodash_1.isNil(entityInfo)) {
                error.details.entityInfo = entityInfo;
            }
            result.errorList.push(error);
        }
    };
    var validateDataFeed = function (dataFeedId, entityProperty) {
        var error = selectorValidation_1.dmValidateEntityDataFeed(state, dataFeedId, __assign(__assign({}, entityDetails), { entityProperty: entityProperty }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    };
    switch (itemState.type) {
        case bsDmInterfaces_1.LiveTextItemType.MediaCounter:
            validateAssetId(itemState.assetId, 'asset', 'mediaCounter');
            break;
        case bsDmInterfaces_1.LiveTextItemType.Image:
            validateAssetId(itemState.assetId, 'asset', 'image');
            break;
        case bsDmInterfaces_1.LiveTextItemType.TitledDataFeed: {
            var error = selectorValidation_1.dmValidateEntityParameterizedString(state, itemState.title, __assign(__assign({}, entityDetails), { entityProperty: bsDmInterfaces_1.DmEntityType.LiveTextItem }), true);
            if (!lodash_1.isNil(error)) {
                result.errorList.push(error);
            }
            validateDataFeed(itemState.dataFeedId, 'dataFeed');
            break;
        }
        case bsDmInterfaces_1.LiveTextItemType.IndexedDataFeed: {
            var error = selectorValidation_1.dmValidateEntityParameterizedNumber(state, itemState.index, __assign(__assign({}, entityDetails), { entityProperty: bsDmInterfaces_1.DmEntityType.LiveTextItem }));
            if (!lodash_1.isNil(error)) {
                result.errorList.push(error);
            }
            validateDataFeed(itemState.dataFeedId, 'dataFeed');
            break;
        }
        case bsDmInterfaces_1.LiveTextItemType.SimpleRss:
        case bsDmInterfaces_1.LiveTextItemType.MediaRssText:
        case bsDmInterfaces_1.LiveTextItemType.MediaRssMedia: {
            var dataFeedSequence = dmGetLiveTextDataFeedGroupByGroupId(state, { id: itemState.groupId });
            if (!lodash_1.isNil(dataFeedSequence)) {
                dataFeedSequence.dataFeedIds.forEach(function (dataFeedId, index) {
                    validateDataFeed(dataFeedId, 'dataFeeds');
                });
            }
            break;
        }
    }
    if (bsDmLiveText_1.dmIsLiveTextDataTextContent(itemState)) {
        var error = selectorValidation_1.dmValidateDmWidget(state, itemState.widget, __assign(__assign({}, entityDetails), { entityProperty: 'font.assetId' }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    }
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateLiveTextItem = dmValidateLiveTextItem;
function dmValidateLiveTextCanvas(state, props) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.LiveText, entityId: props.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.LiveText, props.id);
    var liveTextCanvasState = dmGetLiveTextCanvasStateById(state, props);
    if (!lodash_1.isNil(liveTextCanvasState) && utils_1.isValidBsDmId(liveTextCanvasState.backgroundImageId)) {
        var error = selectorValidation_1.dmValidateAssetId(state, liveTextCanvasState.backgroundImageId, __assign(__assign({}, entityDetails), { entityProperty: "backgroundImage" }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    }
    var liveTextItemIds = dmGetAllLiveTextItemIdsForCanvas(state, props);
    liveTextItemIds.forEach(function (itemId) {
        var itemResult = dmValidateLiveTextItem(state, { id: itemId });
        if (!itemResult.ok) {
            if (!lodash_1.isArray(result.componentErrors)) {
                result.componentErrors = [];
            }
            result.componentErrors.push(itemResult);
        }
    });
    result.ok = result.ok && result.errorList.length === 0
        && (!lodash_1.isArray(result.componentErrors) || result.componentErrors.length === 0);
    return result;
}
exports.dmValidateLiveTextCanvas = dmValidateLiveTextCanvas;
function dmGetLiveTextCopySet(state, props) {
    var liveTextItemIdsToCopy = lodash_1.uniq(props.ids).filter(function (id) { return !lodash_1.isNil(dmGetLiveTextItemStateById(state, { id: id })); });
    var canvasId = liveTextItemIdsToCopy.length > 0 ?
        dmGetLiveTextItemStateById(state, { id: liveTextItemIdsToCopy[0] }).canvasId : bsDmInterfaces_1.BsDmIdNone;
    var additionalGroupedItemIds = [];
    var checkedGroups = new Set();
    liveTextItemIdsToCopy.forEach(function (id) {
        var item = dmGetLiveTextItemStateById(state, { id: id });
        if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(item) && !checkedGroups.has(item.groupId)) {
            checkedGroups.add(item.groupId);
            var groupItemIds = dmGetAllNonCustomLiveTextItemIdsForGroup(state, { id: item.groupId });
            groupItemIds.forEach(function (groupItemId) {
                if (groupItemId !== id && liveTextItemIdsToCopy.indexOf(groupItemId) < 0) {
                    additionalGroupedItemIds.push(groupItemId);
                }
            });
        }
    });
    if (additionalGroupedItemIds.length) {
        liveTextItemIdsToCopy.push.apply(liveTextItemIdsToCopy, additionalGroupedItemIds);
    }
    var copySet = bsDmCopyPaste_1.dmCreateNewLiveTextCopySet(canvasId);
    var addLiveTextItem = function (liveTextItem) {
        copySet.liveText.itemsById[liveTextItem.id] = lodash_1.cloneDeep(liveTextItem);
        if (bsDmLiveText_1.dmIsLiveTextDataFromDataFeed(liveTextItem)) {
            bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, liveTextItem.dataFeedId);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataImageContent(liveTextItem) || bsDmLiveText_1.dmIsLiveTextDataMediaCounter(liveTextItem)) {
            bsDmCopyPaste_1.fnAddCopySetAssetItem(state, copySet, liveTextItem.assetId);
        }
        else if (bsDmLiveText_1.dmIsLiveTextDataGroupedDataFeedItem(liveTextItem)) {
            var groupId = liveTextItem.groupId;
            if (lodash_1.isNil(copySet.liveText.dataFeedsByGroupId[groupId])) {
                var dataFeedSequence = dmGetLiveTextDataFeedGroupByGroupId(state, { id: groupId });
                copySet.liveText.dataFeedsByGroupId[groupId] = lodash_1.cloneDeep(dataFeedSequence);
                dataFeedSequence.dataFeedIds.forEach(function (dataFeedId) { return bsDmCopyPaste_1.fnAddCopySetDataFeed(state, copySet, dataFeedId); });
            }
        }
    };
    var checkCanvas = function (liveTextItem) {
        if (copySet.containerId === bsDmInterfaces_1.BsDmIdNone) {
            copySet.containerId = liveTextItem.canvasId;
            return true;
        }
        return copySet.containerId === liveTextItem.canvasId;
    };
    liveTextItemIdsToCopy.forEach(function (id) {
        var liveTextItem = dmGetLiveTextItemStateById(state, { id: id });
        if (!lodash_1.isNil(liveTextItem) && checkCanvas(liveTextItem)) {
            addLiveTextItem(liveTextItem);
        }
    });
    return copySet;
}
exports.dmGetLiveTextCopySet = dmGetLiveTextCopySet;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetNodeAppByName = exports.dmGetNodeAppIdByName = exports.dmGetNodeAppIdsForSign = exports.dmGetNodeAppStateById = exports.dmGetNodeAppById = exports.clearNodeAppSelectorCaches = void 0;
var bsDmClasses_1 = __webpack_require__(12);
var lodash_1 = __webpack_require__(0);
var re_reselect_1 = __webpack_require__(18);
var selGetNodeAppById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.nodeApps; }, function (dmState) { return dmState.assetMap; }, function (siteId, nodeApps, assetMap) {
    var nodeAppState = nodeApps[siteId];
    if (!lodash_1.isNil(nodeAppState)) {
        return new bsDmClasses_1.DmcNodeApp(nodeAppState, assetMap[nodeAppState.indexAssetId]);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 40 }),
});
function clearNodeAppSelectorCaches() {
    selGetNodeAppById.clearCache();
}
exports.clearNodeAppSelectorCaches = clearNodeAppSelectorCaches;
function dmGetNodeAppById(state, props) {
    return selGetNodeAppById(state, props);
}
exports.dmGetNodeAppById = dmGetNodeAppById;
function dmGetNodeAppStateById(state, props) {
    var nodeAppState = state.nodeApps[props.id];
    return lodash_1.isNil(nodeAppState) ? null : nodeAppState;
}
exports.dmGetNodeAppStateById = dmGetNodeAppStateById;
function dmGetNodeAppIdsForSign(state) {
    return Object.keys(state.nodeApps);
}
exports.dmGetNodeAppIdsForSign = dmGetNodeAppIdsForSign;
function dmGetNodeAppIdByName(state, props) {
    var nodeApps = state.nodeApps;
    var id = lodash_1.find(Object.keys(nodeApps), function (nodeAppId) { return nodeApps[nodeAppId].name === props.name; });
    return lodash_1.isNil(id) ? null : id;
}
exports.dmGetNodeAppIdByName = dmGetNodeAppIdByName;
function dmGetNodeAppByName(state, props) {
    var id = dmGetNodeAppIdByName(state, props);
    return lodash_1.isNil(id) ? null : selGetNodeAppById(state, { id: id });
}
exports.dmGetNodeAppByName = dmGetNodeAppByName;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetParserPluginNameMap = exports.dmGetActiveParserPluginWithDataFeedMap = exports.dmGetParserPluginAssetIds = exports.dmGetParserPluginIds = exports.dmGetParserPluginByName = exports.dmGetParserPluginStateByName = exports.dmGetParserPluginIdForName = exports.dmGetParserPluginById = exports.dmGetParserPluginStateById = exports.clearParserPluginSelectorCaches = void 0;
var bsDmClasses_1 = __webpack_require__(12);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
var selGetParserPluginById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.parserPlugins; }, function (dmState) { return dmState.assetMap; }, function (pluginId, parserPlugins, assetMap) {
    var pluginState = parserPlugins[pluginId];
    if (!lodash_1.isNil(pluginState)) {
        return new bsDmClasses_1.DmcParserBrightScriptPlugin(pluginState, assetMap[pluginState.assetId]);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 10 }),
});
function clearParserPluginSelectorCaches() {
    selGetParserPluginById.clearCache();
}
exports.clearParserPluginSelectorCaches = clearParserPluginSelectorCaches;
function dmGetParserPluginStateById(state, props) {
    var plugin = state.parserPlugins[props.id];
    return plugin ? plugin : null;
}
exports.dmGetParserPluginStateById = dmGetParserPluginStateById;
function dmGetParserPluginById(state, props) {
    return selGetParserPluginById(state, props);
}
exports.dmGetParserPluginById = dmGetParserPluginById;
function dmGetParserPluginIdForName(state, props) {
    var plugins = state.parserPlugins;
    var pluginId = lodash_1.find(Object.keys(plugins), function (id) { return plugins[id].name === props.name; });
    return lodash_1.isNil(pluginId) ? null : pluginId;
}
exports.dmGetParserPluginIdForName = dmGetParserPluginIdForName;
function dmGetParserPluginStateByName(state, props) {
    var plugins = state.parserPlugins;
    var pluginId = lodash_1.find(Object.keys(plugins), function (id) { return plugins[id].name === props.name; });
    return lodash_1.isNil(pluginId) ? null : plugins[pluginId];
}
exports.dmGetParserPluginStateByName = dmGetParserPluginStateByName;
function dmGetParserPluginByName(state, props) {
    var pluginId = dmGetParserPluginIdForName(state, props);
    return lodash_1.isNil(pluginId) ? null : selGetParserPluginById(state, { id: pluginId });
}
exports.dmGetParserPluginByName = dmGetParserPluginByName;
function dmGetParserPluginIds(state) {
    return Object.keys(state.parserPlugins);
}
exports.dmGetParserPluginIds = dmGetParserPluginIds;
function dmGetParserPluginAssetIds(state) {
    var plugins = state.parserPlugins;
    return Object.keys(plugins).map(function (pluginId) { return plugins[pluginId].assetId; });
}
exports.dmGetParserPluginAssetIds = dmGetParserPluginAssetIds;
var selGetActiveParserPluginWithDataFeedMap = reselect_1.createSelector(function (dmState) { return dmState.dataFeeds.feedsById; }, function (dataFeeds) {
    var result = {};
    Object.keys(dataFeeds).forEach(function (dataFeedId) {
        var pluginId = dataFeeds[dataFeedId].parserPlugin;
        if (utils_1.isValidBsDmId(pluginId)) {
            var pluginEntry = result[pluginId];
            if (lodash_1.isNil(pluginEntry)) {
                result[pluginId] = [dataFeedId];
            }
            else {
                pluginEntry.push(dataFeedId);
            }
        }
    });
    return result;
});
function dmGetActiveParserPluginWithDataFeedMap(state) {
    return selGetActiveParserPluginWithDataFeedMap(state);
}
exports.dmGetActiveParserPluginWithDataFeedMap = dmGetActiveParserPluginWithDataFeedMap;
var selGetParserPluginNameMap = reselect_1.createSelector(function (dmState) { return dmState.parserPlugins; }, function (pluginMap) {
    return Object.keys(pluginMap).reduce(function (acc, id) {
        var plugin = pluginMap[id];
        if (plugin.name) {
            if (lodash_1.isNil(acc[plugin.name])) {
                acc[plugin.name] = [id];
            }
            else {
                acc[plugin.name].push(id);
            }
        }
        return acc;
    }, {});
});
function dmGetParserPluginNameMap(state) {
    return selGetParserPluginNameMap(state);
}
exports.dmGetParserPluginNameMap = dmGetParserPluginNameMap;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmSetEmptyCustomAutorun = exports.dmResetCustomAutorun = exports.dmSetCustomAutorun = exports.SET_CUSTOM_AUTORUN = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmState_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(3);
var actionBase_1 = __webpack_require__(8);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
exports.SET_CUSTOM_AUTORUN = 'DM_SET_CUSTOM_AUTORUN';
function dmSetCustomAutorun(assetItem) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.SET_CUSTOM_AUTORUN,
            payload: bscore_1.BsAssetIdNone,
        };
        if (!(bscore_1.bscIsAssetItem(assetItem) && assetItem.assetType === bscore_1.AssetType.BrightScript)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Custom Autorun file must be a BrightScript file.');
        }
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var customAutorunId = selectors_1.dmGetCustomAutorunId(dmState);
        if (utils_1.isValidBsDmId(customAutorunId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(customAutorunId));
        }
        var preparedAssetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, assetItem, mainAction);
        batchedActions.push(actionAssetMap_1.dmPutAssetItem(preparedAssetItem));
        mainAction.payload = preparedAssetItem.id;
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmSetCustomAutorun = dmSetCustomAutorun;
function dmResetCustomAutorun() {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.SET_CUSTOM_AUTORUN,
            payload: bscore_1.BsAssetIdNone,
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var customAutorunId = selectors_1.dmGetCustomAutorunId(dmState);
        if (utils_1.isValidBsDmId(customAutorunId)) {
            batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(customAutorunId));
        }
        batchedActions.push(mainAction);
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmResetCustomAutorun = dmResetCustomAutorun;
function dmSetEmptyCustomAutorun() {
    return {
        type: exports.SET_CUSTOM_AUTORUN,
        payload: '',
    };
}
exports.dmSetEmptyCustomAutorun = dmSetEmptyCustomAutorun;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmMediaListAddGlobalEvent = exports.dmGetMediaSequenceDeleteAction = exports.dmMediaSequenceDeleteItemsAtIndices = exports.dmMediaSequenceDeleteItemRange = exports.dmMediaSequenceMoveItemsAtIndices = exports.dmMediaSequenceUpdateItem = exports.dmMediaSequenceAddItemRange = exports.MEDIASEQUENCE_DELETE_ITEMS = exports.MEDIASEQUENCE_MOVE_ITEM_INDICES = exports.MEDIASEQUENCE_ADD_ITEM_RANGE_AT_INDEX = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmAssetItems_1 = __webpack_require__(43);
var bsDmError_1 = __webpack_require__(4);
var actionBase_1 = __webpack_require__(8);
var actionMediaState_1 = __webpack_require__(11);
var actionEvent_1 = __webpack_require__(20);
var actionAssetMap_1 = __webpack_require__(10);
var actionAssetHelper_1 = __webpack_require__(13);
var selectors_1 = __webpack_require__(6);
var lodash_1 = __webpack_require__(0);
var actionDataFeed_1 = __webpack_require__(21);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmContentItems_2 = __webpack_require__(9);
exports.MEDIASEQUENCE_ADD_ITEM_RANGE_AT_INDEX = 'DM_MEDIASEQUENCE_ADD_ITEM_RANGE_AT_INDEX';
exports.MEDIASEQUENCE_MOVE_ITEM_INDICES = 'DM_MEDIASEQUENCE_MOVE_ITEM_INDICES';
exports.MEDIASEQUENCE_DELETE_ITEMS = 'DM_MEDIASEQUENCE_DELETE_ITEMS';
function dmMediaSequenceAddItemRange(index, container, contentItems, contentData) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.MEDIASEQUENCE_ADD_ITEM_RANGE_AT_INDEX,
            payload: {
                index: index,
                container: container,
                id: [],
                contentItems: [],
            },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaSequenceState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
        if (!bsDmContentItems_1.dmIsMediaSequenceContainer(container)
            || lodash_1.isNil(mediaSequenceState)
            || (!bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaSequenceState.contentItem)
                && !bsDmContentItems_2.dmContentItemIsLocalPlaylistContentItem(mediaSequenceState.contentItem))) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaSequenceAddItemRange: container must be a MediaList, PlayFile, or LocalPlaylist state', { action: mainAction });
        }
        if (!contentItems || contentItems.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaSequenceAddItemRange: no items provided', { action: mainAction });
        }
        var containingZone = selectors_1.dmGetZoneStateForContainer(dmState, container);
        if (lodash_1.isNil(containingZone)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaSequenceAddItemRange: Invalid container', { functionName: 'dmMediaSequenceAddItemRange', action: mainAction });
        }
        var zoneType = containingZone.type;
        contentItems.forEach(function (item) {
            if (actionMediaState_1.dmContentIsAssetItem(item)) {
                if (!bscore_1.bscIsAssetItemPlayableContent(item)) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Invalid assetItem for MediaSequence: asset must be a media file', { action: mainAction });
                }
                else if (!bsDmAssetItems_1.dmIsValidAssetItemForZone(item, zoneType)) {
                    var reason = 'MediaSequenceAddItemRange: Invalid assetItem for MediaSequence: '
                        + item.mediaType + ' cannot be used in ' + zoneType + ' zone.';
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, reason, { action: mainAction });
                }
            }
            else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(item)) {
                if (item.type !== 'BSNDynamicPlaylist') {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Invalid data feed for MediaSequence: data feed must be a Dynamic Playlist', { action: mainAction });
                }
                if (container.type !== bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Invalid data feed for MediaSequence: container must be a LocalPlaylist', { action: mainAction });
                }
            }
        });
        var itemSequenceObject = selectors_1.dmGetMediaStateSequenceForContainer(dmState, { id: mediaSequenceState.id });
        var itemSequence = itemSequenceObject ? itemSequenceObject.sequence : null;
        var itemCount = itemSequence ? itemSequence.length : 0;
        if (index === undefined || index > itemCount || index < 0) {
            index = itemCount;
        }
        var batchedActions = [];
        var addedAssets = new Map();
        var mediaSequenceContentItem = mediaSequenceState.contentItem;
        if (bsDmContentItems_1.dmContentItemIsMediaListContentItem(mediaSequenceContentItem) && mediaSequenceContentItem.autoTransitions) {
            var autoAdvanceEventSpec = bsDmEvents_1.dmCreateDefaultEventSpecificationForEventType(bscore_1.EventType.MediaEndOrTimer, null, { contentItemType: bscore_1.ContentItemType.Image, action: bscore_1.EventIntrinsicAction.SequenceForward });
            batchedActions.push(actionEvent_1.dmAddEventFromSpecification(mediaSequenceState.name + '_auto_evf', container.id, autoAdvanceEventSpec));
        }
        contentItems.forEach(function (item, itemIndex) {
            var contentItem;
            var name = '';
            if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(item)) {
                var localPlaylistContentItemData = (lodash_1.isArray(contentData) && contentData.length > itemIndex)
                    ? contentData[itemIndex]
                    : null;
                contentItem =
                    bsDmContentItems_1.dmCreateLocalPlaylistItem(mediaSequenceState.contentItem, localPlaylistContentItemData);
                if (!lodash_1.isNil(contentItem)) {
                    contentItem.name = contentItem.serialNumber;
                    var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, null, item);
                    var dataFeedParams = actionListParams.mainAction.payload;
                    batchedActions.push.apply(batchedActions, actionListParams.actions);
                    contentItem.dataFeedId = dataFeedParams.id;
                    mainAction.payload.contentItems.push(contentItem);
                }
                name = contentItem.name;
            }
            else if (bscore_1.bscIsAssetItem(item) && bscore_1.bscIsAssetItemPlayableContent(item)) {
                var assetItem = __assign({}, item);
                assetItem = actionAssetHelper_1.dmSetAssetId(dmState, assetItem);
                var addedAssetItemId = addedAssets.get(assetItem.locator);
                if (!lodash_1.isNil(addedAssetItemId)) {
                    assetItem.id = addedAssetItemId;
                }
                else {
                    addedAssets.set(assetItem.locator, assetItem.id);
                }
                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                contentItem = bsDmContentItems_1.dmCreateMediaContentItem(assetItem.name, assetItem.id, assetItem.mediaType);
                if (mediaSequenceState.contentItem.type === bscore_1.ContentItemType.PlayFile) {
                    contentItem = bsDmContentItems_1.dmCreatePlayFileItemFromMediaContentItem(contentItem);
                }
                if (!lodash_1.isNil(contentItem)) {
                    if (!lodash_1.isNil(contentData) && !lodash_1.isNil(contentData[itemIndex])) {
                        var contentItemData = void 0;
                        if (container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
                            contentItemData = bsDmContentItems_1.dmFilterPlayFileItemContentItemData(contentItem.type, contentData[itemIndex]);
                        }
                        else {
                            contentItemData =
                                bsDmContentItems_1.dmFilterContentItemData(contentItem.type, contentData[itemIndex]);
                        }
                        if (contentItemData) {
                            contentItem = Object.assign({}, contentItem, contentItemData);
                        }
                    }
                    mainAction.payload.contentItems.push(contentItem);
                }
                name = assetItem.name;
            }
            mainAction.payload.contentItems.push(contentItem);
            var addMediaStateAction = actionMediaState_1.dmAddMediaStateWithContentItem(name, container, contentItem, containingZone.id, null, index + itemIndex);
            mainAction.payload.id.push(addMediaStateAction.payload.id);
            batchedActions.push(addMediaStateAction);
        });
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmMediaSequenceAddItemRange = dmMediaSequenceAddItemRange;
function dmMediaSequenceUpdateItem(params) {
    return function (dispatch, getState) {
        var mainAction = {
            type: actionMediaState_1.UPDATE_MEDIA_STATE,
            payload: { id: params.id },
        };
        var batchedActions = [];
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var currentItemState = selectors_1.dmGetMediaStateStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(currentItemState)) {
            var sequenceContainerState = selectors_1.dmGetMediaStateStateById(dmState, { id: currentItemState.container.id });
            if (!lodash_1.isNil(sequenceContainerState)) {
                var zoneType = selectors_1.dmGetZoneTypeForMediaStateId(dmState, { id: sequenceContainerState.id });
                var existingContentItem = currentItemState.contentItem;
                var contentItem = void 0;
                if (!lodash_1.isNil(params.assetItem)) {
                    if (bscore_1.bscIsAssetItemPlayableContent(params.assetItem)) {
                        if (!bsDmAssetItems_1.dmIsValidAssetItemForZone(params.assetItem, zoneType)) {
                            var reason = 'UpdateMediaSequenceItem: Invalid assetItem for MediaSequence: '
                                + params.assetItem.mediaType + ' cannot be used in ' + zoneType + ' zone.';
                            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, reason, { action: mainAction });
                        }
                        var assetItem = actionAssetHelper_1.dmPrepareAssetItem(dmState, params.assetItem, mainAction);
                        var assetId = existingContentItem.assetId;
                        batchedActions.push(actionAssetMap_1.dmRemoveAssetItems(assetId));
                        batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                        mainAction.payload.name = assetItem.name;
                        contentItem = bsDmContentItems_1.dmCreateMediaContentItem(assetItem.name, assetItem.id, assetItem.mediaType);
                        if (currentItemState.container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
                            var _a = existingContentItem, key = _a.key, exportKey = _a.exportKey;
                            contentItem = __assign(__assign({}, contentItem), { key: key, exportKey: exportKey });
                        }
                    }
                    else {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaSequenceItem: only Media AssetItems can be used in a MediaSequence', { action: mainAction });
                    }
                }
                else {
                    contentItem = existingContentItem;
                }
                if (!lodash_1.isNil(contentItem)) {
                    if (params.contentData) {
                        var contentItemData = void 0;
                        if (currentItemState.container.type === bsDmInterfaces_1.MediaStateContainerType.PlayFile) {
                            contentItemData = bsDmContentItems_1.dmFilterPlayFileItemContentItemData(contentItem.type, params.contentData);
                        }
                        else {
                            contentItemData =
                                bsDmContentItems_1.dmFilterContentItemData(contentItem.type, params.contentData);
                        }
                        if (!lodash_1.isNil(contentItemData)) {
                            contentItem = __assign(__assign({}, contentItem), contentItemData);
                        }
                    }
                    mainAction.payload.contentItem = contentItem;
                }
                batchedActions.push(mainAction);
                dispatch(actionBase_1.dmBatchActions(batchedActions));
                return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
            }
            else {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaSequenceItem: invalid mediaSequence container (mediaState) ID');
            }
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateMediaSequenceItem: invalid item (mediaState) ID');
        }
    };
}
exports.dmMediaSequenceUpdateItem = dmMediaSequenceUpdateItem;
function dmMediaSequenceMoveItemsAtIndices(container, indices, targetIndex) {
    return function (dispatch, getState) {
        if (typeof indices === 'number') {
            indices = [indices];
        }
        var mainAction = {
            type: exports.MEDIASEQUENCE_MOVE_ITEM_INDICES,
            payload: { container: container, indices: indices, targetIndex: targetIndex },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaListState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
        if (!bsDmContentItems_1.dmIsMediaSequenceContainer(container)
            || lodash_1.isNil(mediaListState)
            || !bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaListState.contentItem)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaSequenceMoveItems: container must be a MediaList or PlayFile state', { action: mainAction });
        }
        var mediaSequenceCount = selectors_1.dmGetMediaSequenceItemCount(dmState, { id: container.id });
        if (targetIndex < 0 || targetIndex >= mediaSequenceCount) {
            mainAction.payload.targetIndex = mediaSequenceCount - 1;
        }
        mainAction.payload.indices = indices.filter(function (index) { return index >= 0 && index < mediaSequenceCount; });
        dispatch(mainAction);
        return mainAction;
    };
}
exports.dmMediaSequenceMoveItemsAtIndices = dmMediaSequenceMoveItemsAtIndices;
function dmMediaSequenceDeleteItemRange(container, startingIndex, count) {
    return function (dispatch, getState) {
        if (count === undefined) {
            count = 1;
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var itemSequenceObject = selectors_1.dmGetMediaStateSequenceForContainer(dmState, { id: container.id });
        var itemSequence = itemSequenceObject ? itemSequenceObject.sequence : [];
        if (startingIndex >= itemSequence.length
            || count === 0
            || startingIndex + count > itemSequence.length) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaListDeleteItemRange: Invalid index/count for MediaSequence item deletion range');
        }
        var endingIndex = startingIndex + count;
        var mediaStateIdsToDelete = itemSequence.slice(startingIndex, endingIndex);
        var mainAction = dmGetMediaSequenceDeleteAction(dmState, container, mediaStateIdsToDelete);
        dispatch(actionMediaState_1.dmDeleteMediaStateWithParams(mainAction.payload.deleteParams));
        return mainAction;
    };
}
exports.dmMediaSequenceDeleteItemRange = dmMediaSequenceDeleteItemRange;
function dmMediaSequenceDeleteItemsAtIndices(container, indices) {
    return function (dispatch, getState) {
        if (!Array.isArray(indices) || indices.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaListDeleteItemsAtIndices: no media item indices were specified');
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var itemSequenceObject = selectors_1.dmGetMediaStateSequenceForContainer(dmState, { id: container.id });
        var itemSequence = itemSequenceObject ? itemSequenceObject.sequence : [];
        var mediaStateIdsToDelete = indices.map(function (index) { return itemSequence[index]; });
        var mainAction = dmGetMediaSequenceDeleteAction(dmState, container, mediaStateIdsToDelete);
        dispatch(actionMediaState_1.dmDeleteMediaStateWithParams(mainAction.payload.deleteParams));
        return mainAction;
    };
}
exports.dmMediaSequenceDeleteItemsAtIndices = dmMediaSequenceDeleteItemsAtIndices;
function dmGetMediaSequenceDeleteAction(dmState, container, mediaStateItemIds) {
    var mainAction = {
        type: exports.MEDIASEQUENCE_DELETE_ITEMS,
        payload: {
            containerId: container.id,
            deleteParams: {
                mediaStateIds: [],
                dataFeedIds: [],
                dataFeedSourceIds: [],
                assetIds: [],
                eventIds: [],
                transitionIds: [],
                commandIds: [],
                liveTextCanvasIds: [],
                liveTextItemIds: [],
                liveTextGroupIds: [],
            },
        },
    };
    var mediaListState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
    if (!bsDmContentItems_1.dmIsMediaSequenceContainer(container)
        || lodash_1.isNil(mediaListState)
        || !bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaListState.contentItem)) {
        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaListDeleteItems: container must be a MediaList or PlayFile state', { action: mainAction });
    }
    mainAction.payload.deleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateItemIds);
    return mainAction;
}
exports.dmGetMediaSequenceDeleteAction = dmGetMediaSequenceDeleteAction;
function dmMediaListAddGlobalEvent(name, container, eventSpec, sequenceBackward) {
    if (sequenceBackward === void 0) { sequenceBackward = false; }
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaListState = selectors_1.dmGetMediaStateStateById(dmState, { id: container.id });
        if (container.type !== bsDmInterfaces_1.MediaStateContainerType.MediaList
            || lodash_1.isNil(mediaListState)
            || mediaListState.contentItem.type !== bscore_1.ContentItemType.MediaList) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'MediaListAddGlobalEvent: container must be a MediaList');
        }
        var finalEventSpec = __assign(__assign({}, eventSpec), { action: sequenceBackward ? bscore_1.EventIntrinsicAction.SequenceBackward : bscore_1.EventIntrinsicAction.SequenceForward });
        return dispatch(actionEvent_1.dmAddEventFromSpecification(name, container.id, finalEventSpec));
    };
}
exports.dmMediaListAddGlobalEvent = dmMediaListAddGlobalEvent;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmDeletePartnerProduct = exports.dmUpdatePartnerProduct = exports.dmAddPartnerProduct = exports.DELETE_PARTNER_PRODUCT = exports.UPDATE_PARTNER_PRODUCT = exports.ADD_PARTNER_PRODUCT = void 0;
var utils_1 = __webpack_require__(3);
exports.ADD_PARTNER_PRODUCT = 'DM_ADD_PARTNER_PRODUCT';
exports.UPDATE_PARTNER_PRODUCT = 'DM_UPDATE_PARTNER_PRODUCT';
exports.DELETE_PARTNER_PRODUCT = 'DM_DELETE_PARTNER_PRODUCT';
function dmAddPartnerProduct(port, partnerName, productName) {
    return {
        type: exports.ADD_PARTNER_PRODUCT,
        payload: {
            id: utils_1.newBsDmId(),
            port: port,
            partnerName: partnerName,
            productName: productName,
        },
    };
}
exports.dmAddPartnerProduct = dmAddPartnerProduct;
function dmUpdatePartnerProduct(params) {
    return {
        type: exports.UPDATE_PARTNER_PRODUCT,
        payload: params,
    };
}
exports.dmUpdatePartnerProduct = dmUpdatePartnerProduct;
function dmDeletePartnerProduct(id) {
    var ids = Array.isArray(id) ? id : [id];
    return {
        type: exports.DELETE_PARTNER_PRODUCT,
        payload: { ids: ids },
    };
}
exports.dmDeletePartnerProduct = dmDeletePartnerProduct;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmValidateAuxiliaryFiles = exports.dmGetAuxiliaryFileStateByName = exports.dmGetAuxiliaryFileCount = exports.dmGetAuxiliaryFileAssetNames = exports.dmGetAuxiliaryFileAssetIds = exports.dmGetAuxiliaryFileList = exports.dmGetAuxiliaryFileIds = exports.dmGetAuxiliaryFileStateById = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmError_1 = __webpack_require__(4);
var selectorValidation_1 = __webpack_require__(17);
var lodash_1 = __webpack_require__(0);
function dmGetAuxiliaryFileStateById(state, props) {
    var file = state.auxiliaryFiles[props.id];
    return file ? file : null;
}
exports.dmGetAuxiliaryFileStateById = dmGetAuxiliaryFileStateById;
function dmGetAuxiliaryFileIds(state) {
    return state.auxiliaryFiles !== null ? Object.keys(state.auxiliaryFiles) : [];
}
exports.dmGetAuxiliaryFileIds = dmGetAuxiliaryFileIds;
exports.dmGetAuxiliaryFileList = dmGetAuxiliaryFileIds;
function dmGetAuxiliaryFileAssetIds(state) {
    var auxFileIds = dmGetAuxiliaryFileIds(state);
    return auxFileIds.map(function (id) { return state.auxiliaryFiles[id].assetId; });
}
exports.dmGetAuxiliaryFileAssetIds = dmGetAuxiliaryFileAssetIds;
function dmGetAuxiliaryFileAssetNames(state) {
    var auxFileIds = dmGetAuxiliaryFileIds(state);
    return auxFileIds.reduce(function (fileNames, id) {
        var assetId = state.auxiliaryFiles[id].assetId;
        if (!lodash_1.isNil(assetId)) {
            fileNames.push(state.assetMap[assetId].name);
        }
        return fileNames;
    }, []);
}
exports.dmGetAuxiliaryFileAssetNames = dmGetAuxiliaryFileAssetNames;
function dmGetAuxiliaryFileCount(state) {
    return state.auxiliaryFiles !== null ? Object.keys(state.auxiliaryFiles).length : 0;
}
exports.dmGetAuxiliaryFileCount = dmGetAuxiliaryFileCount;
function dmGetAuxiliaryFileStateByName(state, props) {
    var auxFiles = state.auxiliaryFiles;
    var fileId = lodash_1.find(Object.keys(auxFiles), function (id) { return auxFiles[id].name === props.name; });
    return lodash_1.isNil(fileId) ? null : auxFiles[fileId];
}
exports.dmGetAuxiliaryFileStateByName = dmGetAuxiliaryFileStateByName;
function dmValidateAuxiliaryFiles(state) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Sign, entityId: state.sign.properties.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Sign, state.sign.properties.id);
    var auxiliaryFiles = dmGetAuxiliaryFileIds(state);
    auxiliaryFiles.forEach(function (id) {
        var af = dmGetAuxiliaryFileStateById(state, { id: id });
        var error = selectorValidation_1.dmValidateAssetId(state, af.assetId, __assign(__assign({}, entityDetails), { entityId: id, entityProperty: "auxiliaryFile " + af.name }));
        if (!lodash_1.isNil(error)) {
            result.errorList.push(error);
        }
    });
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidateAuxiliaryFiles = dmValidateAuxiliaryFiles;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmValidatePresentationWebPage = exports.dmGetPresentationWebPage = exports.dmGetSignPresentationWebPageDisplayMode = exports.dmGetDeviceWebPageIdByAssetId = exports.dmGetDeviceWebPageForPort = exports.dmGetDeviceWebPageByName = exports.dmGetDeviceWebPageIdByName = exports.dmGetDeviceWebPageIds = exports.dmGetDeviceWebPageById = exports.dmGetDeviceWebPageStateById = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bscore_1 = __webpack_require__(1);
var bsDmClasses_1 = __webpack_require__(12);
var bsDmError_1 = __webpack_require__(4);
var selectorAssetMap_1 = __webpack_require__(39);
var selectorValidation_1 = __webpack_require__(17);
var lodash_1 = __webpack_require__(0);
function dmCreateDmcDeviceWebPage(state, props) {
    var deviceWebPageState = state.deviceWebPages[props.id];
    if (!lodash_1.isNil(deviceWebPageState)) {
        return new bsDmClasses_1.DmcDeviceWebPage(deviceWebPageState, selectorAssetMap_1.dmGetAssetItemById(state, { id: deviceWebPageState.indexAssetId }));
    }
    return null;
}
function dmGetDeviceWebPageStateById(state, props) {
    var deviceWebPageState = state.deviceWebPages[props.id];
    return lodash_1.isNil(deviceWebPageState) ? null : deviceWebPageState;
}
exports.dmGetDeviceWebPageStateById = dmGetDeviceWebPageStateById;
function dmGetDeviceWebPageById(state, props) {
    return dmCreateDmcDeviceWebPage(state, props);
}
exports.dmGetDeviceWebPageById = dmGetDeviceWebPageById;
function dmGetDeviceWebPageIds(state) {
    return Object.keys(state.deviceWebPages);
}
exports.dmGetDeviceWebPageIds = dmGetDeviceWebPageIds;
function dmGetDeviceWebPageIdByName(state, props) {
    var deviceWebPageState = state.deviceWebPages;
    var id = lodash_1.find(Object.keys(deviceWebPageState), function (siteId) { return deviceWebPageState[siteId].name === props.name; });
    return lodash_1.isNil(id) ? null : id;
}
exports.dmGetDeviceWebPageIdByName = dmGetDeviceWebPageIdByName;
function dmGetDeviceWebPageByName(state, props) {
    var id = dmGetDeviceWebPageIdByName(state, props);
    return id ? dmCreateDmcDeviceWebPage(state, { id: id }) : null;
}
exports.dmGetDeviceWebPageByName = dmGetDeviceWebPageByName;
function dmGetDeviceWebPageForPort(state, props) {
    var deviceWebPageState = state.deviceWebPages;
    var id = lodash_1.find(Object.keys(deviceWebPageState), function (siteId) { return deviceWebPageState[siteId].port === props.port; });
    return id ? dmCreateDmcDeviceWebPage(state, { id: id }) : null;
}
exports.dmGetDeviceWebPageForPort = dmGetDeviceWebPageForPort;
function dmGetDeviceWebPageIdByAssetId(state, props) {
    var deviceWebPageState = state.deviceWebPages;
    var deviceWebPageId = lodash_1.find(Object.keys(deviceWebPageState), function (id) { return deviceWebPageState[id].indexAssetId === props.id; });
    return lodash_1.isNil(deviceWebPageId) ? bsDmInterfaces_1.BsDmIdNone : deviceWebPageId;
}
exports.dmGetDeviceWebPageIdByAssetId = dmGetDeviceWebPageIdByAssetId;
function dmGetSignPresentationWebPageDisplayMode(state) {
    return state.sign.properties.deviceWebPageDisplay;
}
exports.dmGetSignPresentationWebPageDisplayMode = dmGetSignPresentationWebPageDisplayMode;
function dmGetPresentationWebPage(state) {
    var mode = state.sign.properties.deviceWebPageDisplay;
    if (mode === bscore_1.DeviceWebPageDisplay.Custom) {
        var deviceWebPageState_1 = state.deviceWebPages;
        var id = lodash_1.find(Object.keys(deviceWebPageState_1), function (siteId) { return deviceWebPageState_1[siteId].port === 0; });
        if (id) {
            var deviceWebPageItem = deviceWebPageState_1[id];
            var assetItem = selectorAssetMap_1.dmGetAssetItemById(state, { id: deviceWebPageItem.indexAssetId });
            return new bsDmClasses_1.DmcPresentationWebPage(mode, deviceWebPageItem, assetItem);
        }
        mode = bscore_1.DeviceWebPageDisplay.None;
    }
    return new bsDmClasses_1.DmcPresentationWebPage(mode);
}
exports.dmGetPresentationWebPage = dmGetPresentationWebPage;
function dmValidatePresentationWebPage(state) {
    var entityDetails = { entityType: bsDmInterfaces_1.DmEntityType.Sign, entityId: state.sign.properties.id };
    var result = bsDmError_1.dmInitializeValidationResult(bsDmInterfaces_1.DmEntityType.Sign, state.sign.properties.id);
    var presentationWebPageErrorList = selectorValidation_1.dmValidateCustomPresentationWebPage(state, __assign(__assign({}, entityDetails), { entityProperty: 'deviceWebPage' }));
    result.errorList = result.errorList.concat(presentationWebPageErrorList);
    result.ok = result.ok && result.errorList.length === 0;
    return result;
}
exports.dmValidatePresentationWebPage = dmValidatePresentationWebPage;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetZoneSimplePlaylist = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmContentItems_1 = __webpack_require__(9);
var reselect_1 = __webpack_require__(27);
var lodash_1 = __webpack_require__(0);
var getOrderedMediaStateIdsForPlaylistInZone = function (zoneId, zoneType, initialMediaStateId, mediaStates, events, transitions) {
    var mediaStateIds = Object.keys(mediaStates).filter(function (id) { return mediaStates[id].container.id === zoneId; });
    var sortedMediaStateIds = [];
    var nextMediaStateId = initialMediaStateId;
    if (nextMediaStateId !== bsDmInterfaces_1.BsDmIdNone && mediaStateIds.length > 0) {
        var _loop_1 = function () {
            var index = mediaStateIds.indexOf(nextMediaStateId);
            if (index > -1) {
                mediaStateIds.splice(index, 1);
            }
            var mediaStateState = mediaStates[nextMediaStateId];
            if (!mediaStateState || !bsDmContentItems_1.dmIsValidContentItemForPlaylist(mediaStateState.contentItem, zoneType)) {
                return { value: null };
            }
            var eventListIds = Object.keys(events).filter(function (id) { return events[id].mediaStateId === nextMediaStateId; });
            if (!eventListIds || eventListIds.length !== 1) {
                return { value: null };
            }
            if (mediaStateState.contentItem.type === bscore_1.ContentItemType.Video
                || mediaStateState.contentItem.type === bscore_1.ContentItemType.Audio) {
                var eventState = events[eventListIds[0]];
                if (!lodash_1.isNil(eventState) && eventState.type !== bscore_1.EventType.MediaEnd) {
                    return { value: null };
                }
            }
            var transitionIds = Object.keys(transitions).filter(function (id) { return transitions[id].eventId === eventListIds[0]; });
            if (!transitionIds || transitionIds.length !== 1) {
                return { value: null };
            }
            var transitionState = transitions[transitionIds[0]];
            if (nextMediaStateId === transitionState.targetMediaStateId
                && (nextMediaStateId !== initialMediaStateId || mediaStateIds.length > 0)) {
                return { value: null };
            }
            sortedMediaStateIds.push(nextMediaStateId);
            nextMediaStateId = transitionState.targetMediaStateId;
            if (nextMediaStateId === initialMediaStateId) {
                if (mediaStateIds.length > 0) {
                    return { value: null };
                }
                return "break";
            }
        };
        while (true) {
            var state_1 = _loop_1();
            if (typeof state_1 === "object")
                return state_1.value;
            if (state_1 === "break")
                break;
        }
    }
    return sortedMediaStateIds;
};
var selGetZoneSimplePlaylist = reselect_1.createSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.zones.zonesById; }, function (dmState) { return dmState.mediaStates.mediaStatesById; }, function (dmState) { return dmState.events; }, function (dmState) { return dmState.transitions.transitionsById; }, function (zoneId, zoneMap, mediaStates, events, transitions) {
    var zone = zoneMap[zoneId];
    return lodash_1.isNil(zone) ? null :
        getOrderedMediaStateIdsForPlaylistInZone(zoneId, zone.type, zone.initialMediaStateId, mediaStates, events, transitions);
});
function dmGetZoneSimplePlaylist(state, props) {
    return selGetZoneSimplePlaylist(state, props);
}
exports.dmGetZoneSimplePlaylist = dmGetZoneSimplePlaylist;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetVideoModePluginNameMap = exports.dmGetVideoModePluginAssetIds = exports.dmGetVideoModePluginIds = exports.dmGetVideoModePluginByName = exports.dmGetVideoModePluginStateByName = exports.dmGetVideoModePluginIdForName = exports.dmGetVideoModePluginById = exports.dmGetVideoModePluginStateById = exports.clearVideoModePluginSelectorCaches = void 0;
var bsDmClasses_1 = __webpack_require__(12);
var lodash_1 = __webpack_require__(0);
var reselect_1 = __webpack_require__(27);
var re_reselect_1 = __webpack_require__(18);
var selGetVideoModePluginById = re_reselect_1.createCachedSelector(function (_, props) { return props.id; }, function (dmState) { return dmState.videoModePlugins; }, function (dmState) { return dmState.assetMap; }, function (pluginId, videoModePlugins, assetMap) {
    var pluginState = videoModePlugins[pluginId];
    if (!lodash_1.isNil(pluginState)) {
        return new bsDmClasses_1.DmcVideoModeBrightScriptPlugin(pluginState, assetMap[pluginState.assetId]);
    }
    return null;
})({
    keySelector: function (_, props) { return props.id; },
    cacheObject: new re_reselect_1.LruObjectCache({ cacheSize: 10 }),
});
function clearVideoModePluginSelectorCaches() {
    selGetVideoModePluginById.clearCache();
}
exports.clearVideoModePluginSelectorCaches = clearVideoModePluginSelectorCaches;
function dmGetVideoModePluginStateById(state, props) {
    var plugin = state.videoModePlugins[props.id];
    return plugin ? plugin : null;
}
exports.dmGetVideoModePluginStateById = dmGetVideoModePluginStateById;
function dmGetVideoModePluginById(state, props) {
    return selGetVideoModePluginById(state, props);
}
exports.dmGetVideoModePluginById = dmGetVideoModePluginById;
function dmGetVideoModePluginIdForName(state, props) {
    var plugins = state.videoModePlugins;
    var pluginId = lodash_1.find(Object.keys(plugins), function (id) { return plugins[id].name === props.name; });
    return lodash_1.isNil(pluginId) ? null : pluginId;
}
exports.dmGetVideoModePluginIdForName = dmGetVideoModePluginIdForName;
function dmGetVideoModePluginStateByName(state, props) {
    var plugins = state.videoModePlugins;
    var pluginId = lodash_1.find(Object.keys(plugins), function (id) { return plugins[id].name === props.name; });
    return lodash_1.isNil(pluginId) ? null : plugins[pluginId];
}
exports.dmGetVideoModePluginStateByName = dmGetVideoModePluginStateByName;
function dmGetVideoModePluginByName(state, props) {
    var pluginId = dmGetVideoModePluginIdForName(state, props);
    return lodash_1.isNil(pluginId) ? null : selGetVideoModePluginById(state, { id: pluginId });
}
exports.dmGetVideoModePluginByName = dmGetVideoModePluginByName;
function dmGetVideoModePluginIds(state) {
    return Object.keys(state.videoModePlugins);
}
exports.dmGetVideoModePluginIds = dmGetVideoModePluginIds;
function dmGetVideoModePluginAssetIds(state) {
    var plugins = state.videoModePlugins;
    return Object.keys(plugins).map(function (pluginId) { return plugins[pluginId].assetId; });
}
exports.dmGetVideoModePluginAssetIds = dmGetVideoModePluginAssetIds;
var selGetVideoModePluginNameMap = reselect_1.createSelector(function (dmState) { return dmState.videoModePlugins; }, function (pluginMap) {
    return Object.keys(pluginMap).reduce(function (acc, id) {
        var plugin = pluginMap[id];
        if (plugin.name) {
            if (lodash_1.isNil(acc[plugin.name])) {
                acc[plugin.name] = [id];
            }
            else {
                acc[plugin.name].push(id);
            }
        }
        return acc;
    }, {});
});
function dmGetVideoModePluginNameMap(state) {
    return selGetVideoModePluginNameMap(state);
}
exports.dmGetVideoModePluginNameMap = dmGetVideoModePluginNameMap;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCheckNodeAppValidity = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var lodash_1 = __webpack_require__(0);
function dmCheckNodeAppValidity(state, nodeAppId, errorDetails) {
    if (!lodash_1.isNil(nodeAppId)) {
        if (lodash_1.isNil(errorDetails)) {
            errorDetails = { entityType: bsDmInterfaces_1.DmEntityType.NodeApp, entityId: nodeAppId, entityProperty: 'nodeApps' };
        }
        var dmState = bsDmState_1.dmFilterDmState(state);
        var nodeApp = selectors_1.dmGetNodeAppStateById(dmState, { id: nodeAppId });
        if (!lodash_1.isNil(nodeApp)) {
            var entityProperty = void 0;
            if (selectors_1.dmHtmlSiteHasDuplicateName(dmState, { id: nodeAppId })) {
                entityProperty = errorDetails.entityProperty + '.name';
                return selectors_1.dmGetEntityError(bsDmError_1.DmErrorType.duplicateNameNotAllowed, __assign(__assign({}, errorDetails), { entityProperty: entityProperty }));
            }
            entityProperty = errorDetails.entityProperty + '.indexAssetId';
            var indexAssetError = selectors_1.dmValidateAssetId(dmState, nodeApp.indexAssetId, __assign(__assign({}, errorDetails), { entityProperty: entityProperty }));
            if (!lodash_1.isNil(indexAssetError)) {
                return indexAssetError;
            }
        }
    }
    return null;
}
exports.dmCheckNodeAppValidity = dmCheckNodeAppValidity;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmIsRemoteHtmlSiteTemplate = exports.dmIsHostedHtmlSiteTemplate = void 0;
var bscore_1 = __webpack_require__(1);
function dmIsHostedHtmlSiteTemplate(base) {
    return base.type === bscore_1.HtmlSiteType.Hosted;
}
exports.dmIsHostedHtmlSiteTemplate = dmIsHostedHtmlSiteTemplate;
function dmIsRemoteHtmlSiteTemplate(base) {
    return base.type === bscore_1.HtmlSiteType.Remote;
}
exports.dmIsRemoteHtmlSiteTemplate = dmIsRemoteHtmlSiteTemplate;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetDefaultEventHandlerContentItemData = exports.dmGetDefaultPlayFileContentItemData = exports.dmGetDefaultMediaListContentItemData = exports.dmGetDefaultMjpegStreamContentItemData = exports.dmGetDefaultAudioStreamContentItemData = exports.dmGetDefaultVideoStreamContentItemData = exports.dmGetDefaultLiveVideoContentItemData = exports.dmGetDefaultTwitterFeedContentItemData = exports.dmGetDefaultMrssDataFeedContentItemData = exports.dmGetDefaultHtmlContentItemData = exports.dmGetDefaultImageContentItemData = exports.dmGetDefaultAudioContentItemData = exports.dmGetDefaultVideoContentItemData = exports.dmGetDefaultDataFeedSourceProperties = exports.dmGetDefaultLiveTextItemTextProperties = exports.dmGetDefaultClockZoneProperties = exports.dmGetDefaultTickerZoneProperties = exports.dmGetDefaultVideoZoneProperties = exports.dmGetDefaultImageZoneProperties = exports.dmGetDefaultEnhancedAudioZoneProperties = exports.dmGetDefaultAudioZoneProperties = exports.dmGetDefaultAudioSignPropertyMap = exports.dmGetDefaultButtonPanelMap = exports.dmGetDefaultGpioList = exports.dmGetDefaultSerialPortList = exports.dmGetDefaultSignPropertyData = exports.dmGetDefaultPropertyValues = exports.dmResetDefaultPropertyValues = exports.dmSetDefaultPropertyValues = void 0;
__exportStar(__webpack_require__(78), exports);
__exportStar(__webpack_require__(76), exports);
__exportStar(__webpack_require__(6), exports);
__exportStar(__webpack_require__(2), exports);
__exportStar(__webpack_require__(5), exports);
__exportStar(__webpack_require__(12), exports);
__exportStar(__webpack_require__(43), exports);
__exportStar(__webpack_require__(9), exports);
__exportStar(__webpack_require__(31), exports);
__exportStar(__webpack_require__(24), exports);
__exportStar(__webpack_require__(77), exports);
__exportStar(__webpack_require__(22), exports);
__exportStar(__webpack_require__(23), exports);
__exportStar(__webpack_require__(50), exports);
__exportStar(__webpack_require__(15), exports);
__exportStar(__webpack_require__(37), exports);
__exportStar(__webpack_require__(71), exports);
__exportStar(__webpack_require__(28), exports);
__exportStar(__webpack_require__(16), exports);
__exportStar(__webpack_require__(38), exports);
__exportStar(__webpack_require__(44), exports);
__exportStar(__webpack_require__(72), exports);
__exportStar(__webpack_require__(4), exports);
var bsDmDefaults_1 = __webpack_require__(19);
Object.defineProperty(exports, "dmSetDefaultPropertyValues", { enumerable: true, get: function () { return bsDmDefaults_1.dmSetDefaultPropertyValues; } });
Object.defineProperty(exports, "dmResetDefaultPropertyValues", { enumerable: true, get: function () { return bsDmDefaults_1.dmResetDefaultPropertyValues; } });
Object.defineProperty(exports, "dmGetDefaultPropertyValues", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultPropertyValues; } });
Object.defineProperty(exports, "dmGetDefaultSignPropertyData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultSignPropertyData; } });
Object.defineProperty(exports, "dmGetDefaultSerialPortList", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultSerialPortList; } });
Object.defineProperty(exports, "dmGetDefaultGpioList", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultGpioList; } });
Object.defineProperty(exports, "dmGetDefaultButtonPanelMap", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultButtonPanelMap; } });
Object.defineProperty(exports, "dmGetDefaultAudioSignPropertyMap", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultAudioSignPropertyMap; } });
Object.defineProperty(exports, "dmGetDefaultAudioZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultAudioZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultEnhancedAudioZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultEnhancedAudioZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultImageZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultImageZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultVideoZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultVideoZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultTickerZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultTickerZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultClockZoneProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultClockZoneProperties; } });
Object.defineProperty(exports, "dmGetDefaultLiveTextItemTextProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultLiveTextItemTextProperties; } });
Object.defineProperty(exports, "dmGetDefaultDataFeedSourceProperties", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultDataFeedSourceProperties; } });
Object.defineProperty(exports, "dmGetDefaultVideoContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultVideoContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultAudioContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultAudioContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultImageContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultImageContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultHtmlContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultHtmlContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultMrssDataFeedContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultMrssDataFeedContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultTwitterFeedContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultTwitterFeedContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultLiveVideoContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultLiveVideoContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultVideoStreamContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultVideoStreamContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultAudioStreamContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultAudioStreamContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultMjpegStreamContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultMjpegStreamContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultMediaListContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultMediaListContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultPlayFileContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultPlayFileContentItemData; } });
Object.defineProperty(exports, "dmGetDefaultEventHandlerContentItemData", { enumerable: true, get: function () { return bsDmDefaults_1.dmGetDefaultEventHandlerContentItemData; } });


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCanConvertMediaStateListToMediaList = exports.dmGetMediaSequenceItemIdByIndex = exports.dmGetPlayFileDefaultMediaAssetItem = exports.fnGetPlayFileDefaultMediaAssetItem = exports.dmGetMediaSequenceSourceDataFeed = exports.fnGetMediaSequenceSourceDataFeed = exports.dmGetMediaSequenceItemCount = exports.dmGetMediaSequenceItemListIds = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmContentItems_1 = __webpack_require__(9);
var lodash_1 = __webpack_require__(0);
var selectorMediaState_1 = __webpack_require__(47);
var selectorTransition_1 = __webpack_require__(41);
var selectorEvent_1 = __webpack_require__(40);
function dmGetMediaSequenceItemListIds(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    if (mediaStateSequence
        && (mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.MediaList
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.PlayFile
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist)) {
        return mediaStateSequence.sequence;
    }
    return [];
}
exports.dmGetMediaSequenceItemListIds = dmGetMediaSequenceItemListIds;
function dmGetMediaSequenceItemCount(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    if (mediaStateSequence
        && (mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.MediaList
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.PlayFile
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist)) {
        return mediaStateSequence.sequence.length;
    }
    return 0;
}
exports.dmGetMediaSequenceItemCount = dmGetMediaSequenceItemCount;
function fnGetMediaSequenceSourceDataFeed(mediaStateMap, dataFeedMap, msId) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState)) {
        var dataFeedState = void 0;
        if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaStateState.contentItem)) {
            dataFeedState = dataFeedMap[mediaStateState.contentItem.dataFeedId];
        }
        else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(mediaStateState.contentItem)) {
            dataFeedState = dataFeedMap[mediaStateState.contentItem.defaultDataFeedId];
        }
        return lodash_1.isNil(dataFeedState) ? null : dataFeedState;
    }
    return null;
}
exports.fnGetMediaSequenceSourceDataFeed = fnGetMediaSequenceSourceDataFeed;
function dmGetMediaSequenceSourceDataFeed(state, props) {
    return fnGetMediaSequenceSourceDataFeed(state.mediaStates.mediaStatesById, state.dataFeeds.feedsById, props.id);
}
exports.dmGetMediaSequenceSourceDataFeed = dmGetMediaSequenceSourceDataFeed;
function fnGetPlayFileDefaultMediaAssetItem(mediaStateMap, assetMap, msId) {
    var mediaStateState = mediaStateMap[msId];
    if (!lodash_1.isNil(mediaStateState) && bsDmContentItems_1.dmContentItemIsPlayFileContentItem(mediaStateState.contentItem)) {
        var defaultAssetId = mediaStateState.contentItem.defaultMediaId;
        if (!lodash_1.isNil(defaultAssetId)) {
            var assetItem = assetMap[defaultAssetId];
            return lodash_1.isNil(assetItem) ? null : assetItem;
        }
    }
    return null;
}
exports.fnGetPlayFileDefaultMediaAssetItem = fnGetPlayFileDefaultMediaAssetItem;
function dmGetPlayFileDefaultMediaAssetItem(state, props) {
    return fnGetPlayFileDefaultMediaAssetItem(state.mediaStates.mediaStatesById, state.assetMap, props.id);
}
exports.dmGetPlayFileDefaultMediaAssetItem = dmGetPlayFileDefaultMediaAssetItem;
function dmGetMediaSequenceItemIdByIndex(state, props) {
    var mediaStateSequence = state.mediaStates.sequencesByParentId[props.id];
    var index = props.index;
    if (mediaStateSequence
        && (mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.MediaList
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.PlayFile
            || mediaStateSequence.parentType === bsDmInterfaces_1.MediaStateContainerType.LocalPlaylist)
        && index >= 0 && index < mediaStateSequence.sequence.length) {
        return mediaStateSequence.sequence[index];
    }
    return null;
}
exports.dmGetMediaSequenceItemIdByIndex = dmGetMediaSequenceItemIdByIndex;
function dmCanConvertMediaStateListToMediaList(state, props) {
    var isValid = true;
    var initialMediaStateId = props.ids[0];
    var lastMediaStateId = props.ids[props.ids.length - 1];
    var nextMediaStateId = initialMediaStateId;
    for (var _i = 0, _a = props.ids; _i < _a.length; _i++) {
        var id = _a[_i];
        var mediaStateState = selectorMediaState_1.dmGetMediaStateStateById(state, { id: id });
        if (!mediaStateState || !bsDmContentItems_1.dmContentItemIsMediaContentItem(mediaStateState.contentItem)) {
            isValid = false;
            break;
        }
        var eventListIds = selectorMediaState_1.dmGetEventIdsForMediaState(state, { id: id });
        if (!eventListIds || eventListIds.length !== 1) {
            isValid = false;
            break;
        }
        var contentItemType = selectorMediaState_1.dmGetContentItemTypeForMediaStateId(state, { id: id });
        if (contentItemType === bscore_1.ContentItemType.Video
            || contentItemType === bscore_1.ContentItemType.Audio) {
            var eventState = selectorEvent_1.dmGetEventStateById(state, { id: eventListIds[0] });
            if (!lodash_1.isNil(eventState) && eventState.type !== bscore_1.EventType.MediaEnd) {
                isValid = false;
                break;
            }
        }
        var transitionIds = selectorTransition_1.dmGetTransitionIdsForEvent(state, { id: eventListIds[0] });
        if (!transitionIds || transitionIds.length !== 1) {
            isValid = false;
            break;
        }
        var transitionState = selectorTransition_1.dmGetTransitionStateById(state, { id: transitionIds[0] });
        if (nextMediaStateId === (transitionState === null || transitionState === void 0 ? void 0 : transitionState.targetMediaStateId)) {
            isValid = false;
            break;
        }
        nextMediaStateId = transitionState.targetMediaStateId;
        if (nextMediaStateId === lastMediaStateId) {
            break;
        }
    }
    return isValid;
}
exports.dmCanConvertMediaStateListToMediaList = dmCanConvertMediaStateListToMediaList;


/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = require("base64-js");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmPlaylistAddMediaState = exports.dmDuplicateCommand = exports.dmPasteCommandCopySet = exports.dmDeleteCommand = exports.dmMoveCommandsAtIndices = exports.dmUpdateCommand = exports.dmAddCommand = exports.dmDeleteTransition = exports.dmMoveTransitionConditionsAtIndices = exports.dmUpdateTransitionCondition = exports.dmUpdateTransition = exports.dmAddConditionalTransition = exports.dmAddDefaultTransition = exports.dmDeleteEvent = exports.dmUpdateEventType = exports.dmUpdateEvent = exports.dmAddMultipleEvents = exports.dmAddEventFromSpecification = exports.dmAddEvent = exports.dmPasteMediaStateCopySet = exports.dmDeleteMediaState = exports.dmUpdateMediaState = exports.dmAddLiveTextMediaState = exports.dmAddMediaState = exports.dmMoveZoneLayersAtIndices = exports.dmMoveMosaicZonesAtIndices = exports.dmClearZone = exports.dmDeleteZone = exports.dmUpdateZoneAudioOutputAssignments = exports.dmUpdateZoneProperties = exports.dmUpdateZone = exports.dmAddDefaultZone = exports.dmAddZone = exports.dmNewSignFromTemplateSpecification = exports.dmUpdateVideoMode = exports.dmClearSignWssDeviceSpec = exports.dmUpdateSignWssDeviceSpec = exports.dmUpdateSignIrRemoteControl = exports.dmScaleSignRectangles = exports.dmUpdateSignAudioPropertyMap = exports.dmUpdateSignIrOutConfiguration = exports.dmUpdateSignIrInConfiguration = exports.dmUpdateSignButtonPanelMap = exports.dmUpdateSignGpio = exports.dmUpdateSignSerialPorts = exports.dmUpdateSignProperties = exports.dmVerifyAndOpenSign = exports.dmOpenSign = exports.dmNewSign = exports.dmGetActionDispatchList = void 0;
exports.dmDeleteUserVariable = exports.dmMergeUserVariableCopySet = exports.dmReSequenceUserVariables = exports.dmMoveUserVariablesAtIndices = exports.dmUpdateUserVariable = exports.dmAddUserVariable = exports.dmDeleteNodeApp = exports.dmUpdateNodeApp = exports.dmAddNodeAppWithoutValidation = exports.dmAddNodeApp = exports.dmDeleteHtmlSite = exports.dmUpdateHtmlSite = exports.dmAddRemoteHtmlSite = exports.dmAddHostedHtmlSite = exports.dmDeleteDataFeed = exports.dmUpdateDataFeedSourceProperties = exports.dmUpdateDataFeed = exports.dmAddDataFeed = exports.dmSetEnableForLiveTextGroupedItem = exports.dmDeleteDataFeedsFromLiveTextGroup = exports.dmMoveLiveTextDataFeedsInGroup = exports.dmUpdateDataFeedLiveTextGroup = exports.dmAddDataFeedToLiveTextGroup = exports.dmPasteLiveTextCopySet = exports.dmDeleteLiveTextItem = exports.dmUpdateLiveTextItem = exports.dmAddLiveTextItem = exports.dmDeleteLiveTextCanvas = exports.dmUpdateLiveTextCanvas = exports.dmAddLiveTextCanvas = exports.dmMediaListAddGlobalEvent = exports.dmMediaSequenceDeleteItemsAtIndices = exports.dmMediaSequenceDeleteItemRange = exports.dmMediaSequenceMoveItemsAtIndices = exports.dmMediaSequenceUpdateItem = exports.dmMediaSequenceAddItemRange = exports.dmConvertMediaStatesToMediaList = exports.dmChangeNonInteractiveZoneToInteractive = exports.dmUpdateEventAndDefaultTransition = exports.dmInteractiveAddTransitionForEventSpecification = exports.dmInteractiveAddTransitionForEventType = exports.dmChangeInteractiveZoneToNonInteractive = exports.dmPlaylistPasteMediaStateCopySet = exports.dmPlaylistMoveMediaStatesAtIndices = exports.dmPlaylistMoveMediaStateRange = exports.dmPlaylistDeleteMediaStatesAtIndices = exports.dmPlaylistDeleteMediaStateRange = exports.dmPlaylistUpdateMediaState = exports.dmPlaylistAddMediaStateRange = exports.dmPlaylistAppendMediaState = void 0;
exports.dmDeleteThumbnail = exports.dmSetThumbnail = exports.dmUpdateDeviceWebPageAssetLocation = exports.dmUpdateAssetLocation = exports.dmUpdateAssetItem = exports.dmSetEmptyCustomAutorun = exports.dmResetCustomAutorun = exports.dmSetCustomAutorun = exports.dmDeleteDeviceWebPage = exports.dmUpdateDeviceWebPage = exports.dmAddDeviceWebPage = exports.dmSetPresentationWebPage = exports.dmDeletePartnerProduct = exports.dmUpdatePartnerProduct = exports.dmAddPartnerProduct = exports.dmRemoveLinkedPresentation = exports.dmUpdateLinkedPresentationWithoutValidation = exports.dmUpdateLinkedPresentation = exports.dmPutLinkedPresentationWithoutValidation = exports.dmPutLinkedPresentation = exports.dmRemoveAuxiliaryFiles = exports.dmUpdateAuxiliaryFileWithoutValidation = exports.dmUpdateAuxiliaryFile = exports.dmPutAuxiliaryFileWithoutValidation = exports.dmPutAuxiliaryFile = exports.dmRemoveVideoModeBrightScriptPlugin = exports.dmUpdateVideoModeBrightScriptPluginWithoutValidation = exports.dmUpdateVideoModeBrightScriptPlugin = exports.dmAddVideoModeBrightScriptPluginWithoutValidation = exports.dmAddVideoModeBrightScriptPlugin = exports.dmRemoveParserBrightScriptPlugin = exports.dmUpdateParserBrightScriptPluginWithoutValidation = exports.dmUpdateParserBrightScriptPlugin = exports.dmAddParserBrightScriptPluginWithoutValidation = exports.dmAddParserBrightScriptPlugin = exports.dmRemoveBrightScriptPlugin = exports.dmUpdateBrightScriptPluginWithoutValidation = exports.dmUpdateBrightScriptPlugin = exports.dmAddBrightScriptPluginWithoutValidation = exports.dmAddBrightScriptPlugin = exports.dmResolveUserVariablePlaceholderNames = void 0;
var actionBase_1 = __webpack_require__(8);
Object.defineProperty(exports, "dmGetActionDispatchList", { enumerable: true, get: function () { return actionBase_1.dmGetActionDispatchList; } });
var actionSign_1 = __webpack_require__(7);
Object.defineProperty(exports, "dmNewSign", { enumerable: true, get: function () { return actionSign_1.dmNewSign; } });
Object.defineProperty(exports, "dmOpenSign", { enumerable: true, get: function () { return actionSign_1.dmOpenSign; } });
Object.defineProperty(exports, "dmVerifyAndOpenSign", { enumerable: true, get: function () { return actionSign_1.dmVerifyAndOpenSign; } });
Object.defineProperty(exports, "dmUpdateSignProperties", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignProperties; } });
Object.defineProperty(exports, "dmUpdateSignSerialPorts", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignSerialPorts; } });
Object.defineProperty(exports, "dmUpdateSignGpio", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignGpio; } });
Object.defineProperty(exports, "dmUpdateSignButtonPanelMap", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignButtonPanelMap; } });
Object.defineProperty(exports, "dmUpdateSignIrInConfiguration", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignIrInConfiguration; } });
Object.defineProperty(exports, "dmUpdateSignIrOutConfiguration", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignIrOutConfiguration; } });
Object.defineProperty(exports, "dmUpdateSignAudioPropertyMap", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignAudioPropertyMap; } });
Object.defineProperty(exports, "dmScaleSignRectangles", { enumerable: true, get: function () { return actionSign_1.dmScaleSignRectangles; } });
Object.defineProperty(exports, "dmUpdateSignIrRemoteControl", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignIrRemoteControl; } });
Object.defineProperty(exports, "dmUpdateSignWssDeviceSpec", { enumerable: true, get: function () { return actionSign_1.dmUpdateSignWssDeviceSpec; } });
Object.defineProperty(exports, "dmClearSignWssDeviceSpec", { enumerable: true, get: function () { return actionSign_1.dmClearSignWssDeviceSpec; } });
Object.defineProperty(exports, "dmUpdateVideoMode", { enumerable: true, get: function () { return actionSign_1.dmUpdateVideoMode; } });
var actionSignTemplate_1 = __webpack_require__(82);
Object.defineProperty(exports, "dmNewSignFromTemplateSpecification", { enumerable: true, get: function () { return actionSignTemplate_1.dmNewSignFromTemplateSpecification; } });
var actionZone_1 = __webpack_require__(14);
Object.defineProperty(exports, "dmAddZone", { enumerable: true, get: function () { return actionZone_1.dmAddZone; } });
Object.defineProperty(exports, "dmAddDefaultZone", { enumerable: true, get: function () { return actionZone_1.dmAddDefaultZone; } });
Object.defineProperty(exports, "dmUpdateZone", { enumerable: true, get: function () { return actionZone_1.dmUpdateZone; } });
Object.defineProperty(exports, "dmUpdateZoneProperties", { enumerable: true, get: function () { return actionZone_1.dmUpdateZoneProperties; } });
Object.defineProperty(exports, "dmUpdateZoneAudioOutputAssignments", { enumerable: true, get: function () { return actionZone_1.dmUpdateZoneAudioOutputAssignments; } });
Object.defineProperty(exports, "dmDeleteZone", { enumerable: true, get: function () { return actionZone_1.dmDeleteZone; } });
Object.defineProperty(exports, "dmClearZone", { enumerable: true, get: function () { return actionZone_1.dmClearZone; } });
Object.defineProperty(exports, "dmMoveMosaicZonesAtIndices", { enumerable: true, get: function () { return actionZone_1.dmMoveMosaicZonesAtIndices; } });
Object.defineProperty(exports, "dmMoveZoneLayersAtIndices", { enumerable: true, get: function () { return actionZone_1.dmMoveZoneLayersAtIndices; } });
var actionMediaState_1 = __webpack_require__(11);
Object.defineProperty(exports, "dmAddMediaState", { enumerable: true, get: function () { return actionMediaState_1.dmAddMediaState; } });
Object.defineProperty(exports, "dmAddLiveTextMediaState", { enumerable: true, get: function () { return actionMediaState_1.dmAddLiveTextMediaState; } });
Object.defineProperty(exports, "dmUpdateMediaState", { enumerable: true, get: function () { return actionMediaState_1.dmUpdateMediaState; } });
Object.defineProperty(exports, "dmDeleteMediaState", { enumerable: true, get: function () { return actionMediaState_1.dmDeleteMediaState; } });
Object.defineProperty(exports, "dmPasteMediaStateCopySet", { enumerable: true, get: function () { return actionMediaState_1.dmPasteMediaStateCopySet; } });
var actionEvent_1 = __webpack_require__(20);
Object.defineProperty(exports, "dmAddEvent", { enumerable: true, get: function () { return actionEvent_1.dmAddEvent; } });
Object.defineProperty(exports, "dmAddEventFromSpecification", { enumerable: true, get: function () { return actionEvent_1.dmAddEventFromSpecification; } });
Object.defineProperty(exports, "dmAddMultipleEvents", { enumerable: true, get: function () { return actionEvent_1.dmAddMultipleEvents; } });
Object.defineProperty(exports, "dmUpdateEvent", { enumerable: true, get: function () { return actionEvent_1.dmUpdateEvent; } });
Object.defineProperty(exports, "dmUpdateEventType", { enumerable: true, get: function () { return actionEvent_1.dmUpdateEventType; } });
Object.defineProperty(exports, "dmDeleteEvent", { enumerable: true, get: function () { return actionEvent_1.dmDeleteEvent; } });
var actionTransition_1 = __webpack_require__(25);
Object.defineProperty(exports, "dmAddDefaultTransition", { enumerable: true, get: function () { return actionTransition_1.dmAddDefaultTransition; } });
Object.defineProperty(exports, "dmAddConditionalTransition", { enumerable: true, get: function () { return actionTransition_1.dmAddConditionalTransition; } });
Object.defineProperty(exports, "dmUpdateTransition", { enumerable: true, get: function () { return actionTransition_1.dmUpdateTransition; } });
Object.defineProperty(exports, "dmUpdateTransitionCondition", { enumerable: true, get: function () { return actionTransition_1.dmUpdateTransitionCondition; } });
Object.defineProperty(exports, "dmMoveTransitionConditionsAtIndices", { enumerable: true, get: function () { return actionTransition_1.dmMoveTransitionConditionsAtIndices; } });
Object.defineProperty(exports, "dmDeleteTransition", { enumerable: true, get: function () { return actionTransition_1.dmDeleteTransition; } });
var actionCommand_1 = __webpack_require__(33);
Object.defineProperty(exports, "dmAddCommand", { enumerable: true, get: function () { return actionCommand_1.dmAddCommand; } });
Object.defineProperty(exports, "dmUpdateCommand", { enumerable: true, get: function () { return actionCommand_1.dmUpdateCommand; } });
Object.defineProperty(exports, "dmMoveCommandsAtIndices", { enumerable: true, get: function () { return actionCommand_1.dmMoveCommandsAtIndices; } });
Object.defineProperty(exports, "dmDeleteCommand", { enumerable: true, get: function () { return actionCommand_1.dmDeleteCommand; } });
Object.defineProperty(exports, "dmPasteCommandCopySet", { enumerable: true, get: function () { return actionCommand_1.dmPasteCommandCopySet; } });
Object.defineProperty(exports, "dmDuplicateCommand", { enumerable: true, get: function () { return actionCommand_1.dmDuplicateCommand; } });
var actionPlaylist_1 = __webpack_require__(81);
Object.defineProperty(exports, "dmPlaylistAddMediaState", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistAddMediaState; } });
Object.defineProperty(exports, "dmPlaylistAppendMediaState", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistAppendMediaState; } });
Object.defineProperty(exports, "dmPlaylistAddMediaStateRange", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistAddMediaStateRange; } });
Object.defineProperty(exports, "dmPlaylistUpdateMediaState", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistUpdateMediaState; } });
Object.defineProperty(exports, "dmPlaylistDeleteMediaStateRange", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistDeleteMediaStateRange; } });
Object.defineProperty(exports, "dmPlaylistDeleteMediaStatesAtIndices", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistDeleteMediaStatesAtIndices; } });
Object.defineProperty(exports, "dmPlaylistMoveMediaStateRange", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistMoveMediaStateRange; } });
Object.defineProperty(exports, "dmPlaylistMoveMediaStatesAtIndices", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistMoveMediaStatesAtIndices; } });
Object.defineProperty(exports, "dmPlaylistPasteMediaStateCopySet", { enumerable: true, get: function () { return actionPlaylist_1.dmPlaylistPasteMediaStateCopySet; } });
Object.defineProperty(exports, "dmChangeInteractiveZoneToNonInteractive", { enumerable: true, get: function () { return actionPlaylist_1.dmChangeInteractiveZoneToNonInteractive; } });
var actionInteractive_1 = __webpack_require__(79);
Object.defineProperty(exports, "dmInteractiveAddTransitionForEventType", { enumerable: true, get: function () { return actionInteractive_1.dmInteractiveAddTransitionForEventType; } });
Object.defineProperty(exports, "dmInteractiveAddTransitionForEventSpecification", { enumerable: true, get: function () { return actionInteractive_1.dmInteractiveAddTransitionForEventSpecification; } });
Object.defineProperty(exports, "dmUpdateEventAndDefaultTransition", { enumerable: true, get: function () { return actionInteractive_1.dmUpdateEventAndDefaultTransition; } });
Object.defineProperty(exports, "dmChangeNonInteractiveZoneToInteractive", { enumerable: true, get: function () { return actionInteractive_1.dmChangeNonInteractiveZoneToInteractive; } });
Object.defineProperty(exports, "dmConvertMediaStatesToMediaList", { enumerable: true, get: function () { return actionInteractive_1.dmConvertMediaStatesToMediaList; } });
var actionMediaSequence_1 = __webpack_require__(65);
Object.defineProperty(exports, "dmMediaSequenceAddItemRange", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaSequenceAddItemRange; } });
Object.defineProperty(exports, "dmMediaSequenceUpdateItem", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaSequenceUpdateItem; } });
Object.defineProperty(exports, "dmMediaSequenceMoveItemsAtIndices", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaSequenceMoveItemsAtIndices; } });
Object.defineProperty(exports, "dmMediaSequenceDeleteItemRange", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaSequenceDeleteItemRange; } });
Object.defineProperty(exports, "dmMediaSequenceDeleteItemsAtIndices", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaSequenceDeleteItemsAtIndices; } });
Object.defineProperty(exports, "dmMediaListAddGlobalEvent", { enumerable: true, get: function () { return actionMediaSequence_1.dmMediaListAddGlobalEvent; } });
var actionLiveText_1 = __webpack_require__(29);
Object.defineProperty(exports, "dmAddLiveTextCanvas", { enumerable: true, get: function () { return actionLiveText_1.dmAddLiveTextCanvas; } });
Object.defineProperty(exports, "dmUpdateLiveTextCanvas", { enumerable: true, get: function () { return actionLiveText_1.dmUpdateLiveTextCanvas; } });
Object.defineProperty(exports, "dmDeleteLiveTextCanvas", { enumerable: true, get: function () { return actionLiveText_1.dmDeleteLiveTextCanvas; } });
Object.defineProperty(exports, "dmAddLiveTextItem", { enumerable: true, get: function () { return actionLiveText_1.dmAddLiveTextItem; } });
Object.defineProperty(exports, "dmUpdateLiveTextItem", { enumerable: true, get: function () { return actionLiveText_1.dmUpdateLiveTextItem; } });
Object.defineProperty(exports, "dmDeleteLiveTextItem", { enumerable: true, get: function () { return actionLiveText_1.dmDeleteLiveTextItem; } });
Object.defineProperty(exports, "dmPasteLiveTextCopySet", { enumerable: true, get: function () { return actionLiveText_1.dmPasteLiveTextCopySet; } });
Object.defineProperty(exports, "dmAddDataFeedToLiveTextGroup", { enumerable: true, get: function () { return actionLiveText_1.dmAddDataFeedToLiveTextGroup; } });
Object.defineProperty(exports, "dmUpdateDataFeedLiveTextGroup", { enumerable: true, get: function () { return actionLiveText_1.dmUpdateDataFeedLiveTextGroup; } });
Object.defineProperty(exports, "dmMoveLiveTextDataFeedsInGroup", { enumerable: true, get: function () { return actionLiveText_1.dmMoveLiveTextDataFeedsInGroup; } });
Object.defineProperty(exports, "dmDeleteDataFeedsFromLiveTextGroup", { enumerable: true, get: function () { return actionLiveText_1.dmDeleteDataFeedsFromLiveTextGroup; } });
Object.defineProperty(exports, "dmSetEnableForLiveTextGroupedItem", { enumerable: true, get: function () { return actionLiveText_1.dmSetEnableForLiveTextGroupedItem; } });
var actionDataFeed_1 = __webpack_require__(21);
Object.defineProperty(exports, "dmAddDataFeed", { enumerable: true, get: function () { return actionDataFeed_1.dmAddDataFeed; } });
Object.defineProperty(exports, "dmUpdateDataFeed", { enumerable: true, get: function () { return actionDataFeed_1.dmUpdateDataFeed; } });
Object.defineProperty(exports, "dmUpdateDataFeedSourceProperties", { enumerable: true, get: function () { return actionDataFeed_1.dmUpdateDataFeedSourceProperties; } });
Object.defineProperty(exports, "dmDeleteDataFeed", { enumerable: true, get: function () { return actionDataFeed_1.dmDeleteDataFeed; } });
var actionHtmlSite_1 = __webpack_require__(32);
Object.defineProperty(exports, "dmAddHostedHtmlSite", { enumerable: true, get: function () { return actionHtmlSite_1.dmAddHostedHtmlSite; } });
Object.defineProperty(exports, "dmAddRemoteHtmlSite", { enumerable: true, get: function () { return actionHtmlSite_1.dmAddRemoteHtmlSite; } });
Object.defineProperty(exports, "dmUpdateHtmlSite", { enumerable: true, get: function () { return actionHtmlSite_1.dmUpdateHtmlSite; } });
Object.defineProperty(exports, "dmDeleteHtmlSite", { enumerable: true, get: function () { return actionHtmlSite_1.dmDeleteHtmlSite; } });
var actionNodeApp_1 = __webpack_require__(45);
Object.defineProperty(exports, "dmAddNodeApp", { enumerable: true, get: function () { return actionNodeApp_1.dmAddNodeApp; } });
Object.defineProperty(exports, "dmAddNodeAppWithoutValidation", { enumerable: true, get: function () { return actionNodeApp_1.dmAddNodeAppWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateNodeApp", { enumerable: true, get: function () { return actionNodeApp_1.dmUpdateNodeApp; } });
Object.defineProperty(exports, "dmDeleteNodeApp", { enumerable: true, get: function () { return actionNodeApp_1.dmDeleteNodeApp; } });
var actionUserVariable_1 = __webpack_require__(34);
Object.defineProperty(exports, "dmAddUserVariable", { enumerable: true, get: function () { return actionUserVariable_1.dmAddUserVariable; } });
Object.defineProperty(exports, "dmUpdateUserVariable", { enumerable: true, get: function () { return actionUserVariable_1.dmUpdateUserVariable; } });
Object.defineProperty(exports, "dmMoveUserVariablesAtIndices", { enumerable: true, get: function () { return actionUserVariable_1.dmMoveUserVariablesAtIndices; } });
Object.defineProperty(exports, "dmReSequenceUserVariables", { enumerable: true, get: function () { return actionUserVariable_1.dmReSequenceUserVariables; } });
Object.defineProperty(exports, "dmMergeUserVariableCopySet", { enumerable: true, get: function () { return actionUserVariable_1.dmMergeUserVariableCopySet; } });
Object.defineProperty(exports, "dmDeleteUserVariable", { enumerable: true, get: function () { return actionUserVariable_1.dmDeleteUserVariable; } });
Object.defineProperty(exports, "dmResolveUserVariablePlaceholderNames", { enumerable: true, get: function () { return actionUserVariable_1.dmResolveUserVariablePlaceholderNames; } });
var actionScriptPlugin_1 = __webpack_require__(46);
Object.defineProperty(exports, "dmAddBrightScriptPlugin", { enumerable: true, get: function () { return actionScriptPlugin_1.dmAddBrightScriptPlugin; } });
Object.defineProperty(exports, "dmAddBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionScriptPlugin_1.dmAddBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateBrightScriptPlugin", { enumerable: true, get: function () { return actionScriptPlugin_1.dmUpdateBrightScriptPlugin; } });
Object.defineProperty(exports, "dmUpdateBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionScriptPlugin_1.dmUpdateBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmRemoveBrightScriptPlugin", { enumerable: true, get: function () { return actionScriptPlugin_1.dmRemoveBrightScriptPlugin; } });
var actionParserPlugin_1 = __webpack_require__(54);
Object.defineProperty(exports, "dmAddParserBrightScriptPlugin", { enumerable: true, get: function () { return actionParserPlugin_1.dmAddParserBrightScriptPlugin; } });
Object.defineProperty(exports, "dmAddParserBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionParserPlugin_1.dmAddParserBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateParserBrightScriptPlugin", { enumerable: true, get: function () { return actionParserPlugin_1.dmUpdateParserBrightScriptPlugin; } });
Object.defineProperty(exports, "dmUpdateParserBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionParserPlugin_1.dmUpdateParserBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmRemoveParserBrightScriptPlugin", { enumerable: true, get: function () { return actionParserPlugin_1.dmRemoveParserBrightScriptPlugin; } });
var actionVideoModePlugin_1 = __webpack_require__(56);
Object.defineProperty(exports, "dmAddVideoModeBrightScriptPlugin", { enumerable: true, get: function () { return actionVideoModePlugin_1.dmAddVideoModeBrightScriptPlugin; } });
Object.defineProperty(exports, "dmAddVideoModeBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionVideoModePlugin_1.dmAddVideoModeBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateVideoModeBrightScriptPlugin", { enumerable: true, get: function () { return actionVideoModePlugin_1.dmUpdateVideoModeBrightScriptPlugin; } });
Object.defineProperty(exports, "dmUpdateVideoModeBrightScriptPluginWithoutValidation", { enumerable: true, get: function () { return actionVideoModePlugin_1.dmUpdateVideoModeBrightScriptPluginWithoutValidation; } });
Object.defineProperty(exports, "dmRemoveVideoModeBrightScriptPlugin", { enumerable: true, get: function () { return actionVideoModePlugin_1.dmRemoveVideoModeBrightScriptPlugin; } });
var actionAuxiliaryFile_1 = __webpack_require__(51);
Object.defineProperty(exports, "dmPutAuxiliaryFile", { enumerable: true, get: function () { return actionAuxiliaryFile_1.dmPutAuxiliaryFile; } });
Object.defineProperty(exports, "dmPutAuxiliaryFileWithoutValidation", { enumerable: true, get: function () { return actionAuxiliaryFile_1.dmPutAuxiliaryFileWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateAuxiliaryFile", { enumerable: true, get: function () { return actionAuxiliaryFile_1.dmUpdateAuxiliaryFile; } });
Object.defineProperty(exports, "dmUpdateAuxiliaryFileWithoutValidation", { enumerable: true, get: function () { return actionAuxiliaryFile_1.dmUpdateAuxiliaryFileWithoutValidation; } });
Object.defineProperty(exports, "dmRemoveAuxiliaryFiles", { enumerable: true, get: function () { return actionAuxiliaryFile_1.dmRemoveAuxiliaryFiles; } });
var actionLinkedPresentation_1 = __webpack_require__(53);
Object.defineProperty(exports, "dmPutLinkedPresentation", { enumerable: true, get: function () { return actionLinkedPresentation_1.dmPutLinkedPresentation; } });
Object.defineProperty(exports, "dmPutLinkedPresentationWithoutValidation", { enumerable: true, get: function () { return actionLinkedPresentation_1.dmPutLinkedPresentationWithoutValidation; } });
Object.defineProperty(exports, "dmUpdateLinkedPresentation", { enumerable: true, get: function () { return actionLinkedPresentation_1.dmUpdateLinkedPresentation; } });
Object.defineProperty(exports, "dmUpdateLinkedPresentationWithoutValidation", { enumerable: true, get: function () { return actionLinkedPresentation_1.dmUpdateLinkedPresentationWithoutValidation; } });
Object.defineProperty(exports, "dmRemoveLinkedPresentation", { enumerable: true, get: function () { return actionLinkedPresentation_1.dmRemoveLinkedPresentation; } });
var actionPartnerProduct_1 = __webpack_require__(66);
Object.defineProperty(exports, "dmAddPartnerProduct", { enumerable: true, get: function () { return actionPartnerProduct_1.dmAddPartnerProduct; } });
Object.defineProperty(exports, "dmUpdatePartnerProduct", { enumerable: true, get: function () { return actionPartnerProduct_1.dmUpdatePartnerProduct; } });
Object.defineProperty(exports, "dmDeletePartnerProduct", { enumerable: true, get: function () { return actionPartnerProduct_1.dmDeletePartnerProduct; } });
var actionDeviceWebPage_1 = __webpack_require__(52);
Object.defineProperty(exports, "dmSetPresentationWebPage", { enumerable: true, get: function () { return actionDeviceWebPage_1.dmSetPresentationWebPage; } });
Object.defineProperty(exports, "dmAddDeviceWebPage", { enumerable: true, get: function () { return actionDeviceWebPage_1.dmAddDeviceWebPage; } });
Object.defineProperty(exports, "dmUpdateDeviceWebPage", { enumerable: true, get: function () { return actionDeviceWebPage_1.dmUpdateDeviceWebPage; } });
Object.defineProperty(exports, "dmDeleteDeviceWebPage", { enumerable: true, get: function () { return actionDeviceWebPage_1.dmDeleteDeviceWebPage; } });
var actionCustomAutorun_1 = __webpack_require__(64);
Object.defineProperty(exports, "dmSetCustomAutorun", { enumerable: true, get: function () { return actionCustomAutorun_1.dmSetCustomAutorun; } });
Object.defineProperty(exports, "dmResetCustomAutorun", { enumerable: true, get: function () { return actionCustomAutorun_1.dmResetCustomAutorun; } });
Object.defineProperty(exports, "dmSetEmptyCustomAutorun", { enumerable: true, get: function () { return actionCustomAutorun_1.dmSetEmptyCustomAutorun; } });
var actionAssetMap_1 = __webpack_require__(10);
Object.defineProperty(exports, "dmUpdateAssetItem", { enumerable: true, get: function () { return actionAssetMap_1.dmUpdateAssetItem; } });
Object.defineProperty(exports, "dmUpdateAssetLocation", { enumerable: true, get: function () { return actionAssetMap_1.dmUpdateAssetLocation; } });
Object.defineProperty(exports, "dmUpdateDeviceWebPageAssetLocation", { enumerable: true, get: function () { return actionAssetMap_1.dmUpdateDeviceWebPageAssetLocation; } });
var actionThumbnail_1 = __webpack_require__(55);
Object.defineProperty(exports, "dmSetThumbnail", { enumerable: true, get: function () { return actionThumbnail_1.dmSetThumbnail; } });
Object.defineProperty(exports, "dmDeleteThumbnail", { enumerable: true, get: function () { return actionThumbnail_1.dmDeleteThumbnail; } });


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmCreateTransitionCondition = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
function dmCreateTransitionCondition(userVariableName, compareOperator, compareValue1, compareValue2) {
    var condition = {
        userVariableId: bsDmInterfaces_1.BsDmIdNone,
        userVariableName: userVariableName,
        compareOperator: compareOperator,
        compareValue1: bsDmParameterizedStrings_1.dmResolveDmParameterizedString(compareValue1),
    };
    if (compareValue2) {
        condition.compareValue2 = bsDmParameterizedStrings_1.dmResolveDmParameterizedString(compareValue2);
    }
    return condition;
}
exports.dmCreateTransitionCondition = dmCreateTransitionCondition;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bsDmReducer = void 0;
var redux_1 = __webpack_require__(30);
var reducerSign_1 = __webpack_require__(99);
var reducerZone_1 = __webpack_require__(104);
var reducerMediaState_1 = __webpack_require__(94);
var reducerEvent_1 = __webpack_require__(90);
var reducerTransition_1 = __webpack_require__(101);
var reducerCommand_1 = __webpack_require__(86);
var reducerAssetMap_1 = __webpack_require__(84);
var reducerHtmlSite_1 = __webpack_require__(91);
var reducerNodeApp_1 = __webpack_require__(95);
var reducerDataFeed_1 = __webpack_require__(88);
var reducerUserVariable_1 = __webpack_require__(102);
var reducerLiveText_1 = __webpack_require__(93);
var reducerDeviceWebPage_1 = __webpack_require__(89);
var reducerScriptPlugin_1 = __webpack_require__(98);
var reducerParserPlugin_1 = __webpack_require__(96);
var reducerVideoModePlugin_1 = __webpack_require__(103);
var reducerAuxiliaryFile_1 = __webpack_require__(85);
var reducerLinkedPresentation_1 = __webpack_require__(92);
var reducerPartnerProduct_1 = __webpack_require__(97);
var reducerCustomAutorun_1 = __webpack_require__(87);
var reducerThumbnail_1 = __webpack_require__(100);
var actionBase_1 = __webpack_require__(8);
function enableBatching(reduce) {
    return function batchingReducer(state, action) {
        switch (action.type) {
            case actionBase_1.BSDM_BATCH:
                return action.payload.reduce(batchingReducer, state);
            default:
                return reduce(state, action);
        }
    };
}
exports.bsDmReducer = enableBatching(redux_1.combineReducers({
    sign: reducerSign_1.default,
    zones: reducerZone_1.default,
    mediaStates: reducerMediaState_1.default,
    events: reducerEvent_1.default,
    transitions: reducerTransition_1.default,
    commands: reducerCommand_1.default,
    htmlSites: reducerHtmlSite_1.default,
    nodeApps: reducerNodeApp_1.default,
    dataFeeds: reducerDataFeed_1.default,
    userVariables: reducerUserVariable_1.default,
    liveText: reducerLiveText_1.default,
    deviceWebPages: reducerDeviceWebPage_1.default,
    scriptPlugins: reducerScriptPlugin_1.default,
    parserPlugins: reducerParserPlugin_1.default,
    videoModePlugins: reducerVideoModePlugin_1.default,
    auxiliaryFiles: reducerAuxiliaryFile_1.default,
    linkedPresentations: reducerLinkedPresentation_1.default,
    partnerProducts: reducerPartnerProduct_1.default,
    customAutorun: reducerCustomAutorun_1.default,
    assetMap: reducerAssetMap_1.default,
    thumbnail: reducerThumbnail_1.default,
}));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmConvertMediaStatesToMediaList = exports.dmChangeNonInteractiveZoneToInteractive = exports.dmUpdateEventAndDefaultTransition = exports.dmInteractiveAddTransitionForEventSpecification = exports.dmInteractiveAddTransitionForEventType = exports.CONVERT_MEDIASTATES_TO_MEDIALIST = exports.CHANGE_TO_INTERACTIVE = exports.INTERACTIVE_UPDATE_EVENT_TRANSITION_LINK = exports.INTERACTIVE_ADD_EVENT_TRANSITION_LINK = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmValidate_1 = __webpack_require__(50);
var bsDmState_1 = __webpack_require__(5);
var actionBase_1 = __webpack_require__(8);
var actionEvent_1 = __webpack_require__(20);
var actionTransition_1 = __webpack_require__(25);
var actionZone_1 = __webpack_require__(14);
var selectors_1 = __webpack_require__(6);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var actionMediaState_1 = __webpack_require__(11);
var bsDmContentItems_1 = __webpack_require__(9);
exports.INTERACTIVE_ADD_EVENT_TRANSITION_LINK = 'DM_INTERACTIVE_ADD_EVENT_TRANSITION_LINK';
exports.INTERACTIVE_UPDATE_EVENT_TRANSITION_LINK = 'DM_INTERACTIVE_UPDATE_EVENT_TRANSITION_LINK';
exports.CHANGE_TO_INTERACTIVE = 'DM_INTERACTIVE_CHANGE_TO_INTERACTIVE';
exports.CONVERT_MEDIASTATES_TO_MEDIALIST = 'DM_CONVERT_MEDIASTATES_TO_MEDIALIST';
function dmInteractiveAddTransitionForEventType(nameBase, source, target, eventType, eventData, action) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        return doInteractiveAddTransitionForEventSpecification(nameBase, source, target, bsDmEvents_1.dmCreateDefaultEventSpecificationForEventType(eventType, eventData, { action: action, interactive: true }), dispatch, getState);
    };
}
exports.dmInteractiveAddTransitionForEventType = dmInteractiveAddTransitionForEventType;
function dmInteractiveAddTransitionForEventSpecification(nameBase, source, target, eventSpec) {
    return function (dispatch, getState) {
        return doInteractiveAddTransitionForEventSpecification(nameBase, source, target, eventSpec, dispatch, getState);
    };
}
exports.dmInteractiveAddTransitionForEventSpecification = dmInteractiveAddTransitionForEventSpecification;
function doInteractiveAddTransitionForEventSpecification(nameBase, source, target, eventSpec, dispatch, getState) {
    var dmState = bsDmState_1.dmFilterDmState(getState());
    var testResult = bsDmValidate_1.dmCanAddEventToMediaState(dmState, eventSpec, source, target);
    if (!testResult.ok) {
        throw testResult.error;
    }
    var batchedActions = [];
    var targetSpecified = !lodash_1.isNil(target) && utils_1.isValidBsDmId(target);
    if (targetSpecified && eventSpec.action !== undefined) {
        eventSpec.action = bscore_1.EventIntrinsicAction.None;
    }
    var eventName = nameBase ? nameBase + '_ev' : '';
    var eventAction = actionEvent_1.dmAddEventFromSpecification(eventName, source, eventSpec);
    batchedActions.push(eventAction);
    var transitionId = bsDmInterfaces_1.BsDmIdNone;
    if (targetSpecified) {
        var transitionName = nameBase ? nameBase + '_tr' : '';
        var transitionAction = actionTransition_1.dmAddTransition(transitionName, eventAction.payload.id, target);
        transitionId = transitionAction.payload.id;
        batchedActions.push(transitionAction);
    }
    dispatch(actionBase_1.dmBatchActions(batchedActions));
    return {
        type: exports.INTERACTIVE_ADD_EVENT_TRANSITION_LINK,
        payload: {
            nameBase: nameBase,
            eventId: eventAction.payload.id,
            transitionId: transitionId,
            sourceMediaStateId: source,
            targetMediaStateId: target,
            eventSpec: eventSpec,
        },
        meta: { dispatchList: batchedActions },
    };
}
function dmUpdateEventAndDefaultTransition(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var existingEvent = selectors_1.dmGetEventById(dmState, { id: params.eventId });
        if (lodash_1.isNil(existingEvent)) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'UpdateEventAndDefaultTransition - no matching event');
        }
        if (!lodash_1.isNil(params.eventSpec)) {
            var testResult = bsDmValidate_1.dmCanUpdateEventToMediaState(dmState, params.eventSpec, existingEvent.mediaStateId, params.eventId, params.target);
            if (!testResult.ok) {
                throw testResult.error;
            }
        }
        var targetSpecified = !lodash_1.isNil(params.target) && utils_1.isValidBsDmId(params.target);
        var batchedActions = [];
        var eventParams = { id: params.eventId };
        var updateEvent = false;
        if (!lodash_1.isNil(params.nameBase)) {
            eventParams.name = params.nameBase ? params.nameBase + '_ev' : '';
            updateEvent = true;
        }
        if (!lodash_1.isNil(params.eventSpec)) {
            if (targetSpecified && params.eventSpec.action !== undefined) {
                params.eventSpec.action = bscore_1.EventIntrinsicAction.None;
            }
            eventParams.type = params.eventSpec.type;
            eventParams.data = params.eventSpec.data;
            if (params.eventSpec.action !== undefined) {
                eventParams.action = params.eventSpec.action;
            }
            updateEvent = true;
        }
        if (updateEvent) {
            var eventAction = actionEvent_1.dmUpdateEvent(eventParams);
            batchedActions.push(eventAction);
        }
        var removeTarget = !lodash_1.isNil(params.target) && params.target === bsDmInterfaces_1.BsDmIdNone;
        var existingTransition = existingEvent.defaultTransition;
        if (removeTarget && !lodash_1.isNil(existingTransition)) {
            var transitionDeleteParams = actionTransition_1.dmGetTransitionDeleteParams(dmState, existingTransition.id);
            batchedActions.push(actionTransition_1.dmDeleteTransitionWithParams(transitionDeleteParams));
        }
        else if (targetSpecified) {
            if (lodash_1.isNil(existingTransition)) {
                var transitionName = existingEvent.name.replace('_ev', '_tr');
                var transitionAction = actionTransition_1.dmAddTransition(transitionName, params.eventId, params.target);
                batchedActions.push(transitionAction);
            }
            else {
                batchedActions.push(actionTransition_1.dmUpdateTransition({ id: existingTransition.id, targetMediaStateId: params.target }));
            }
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return {
            type: exports.INTERACTIVE_UPDATE_EVENT_TRANSITION_LINK,
            payload: params,
            meta: { dispatchList: batchedActions },
        };
    };
}
exports.dmUpdateEventAndDefaultTransition = dmUpdateEventAndDefaultTransition;
function dmChangeNonInteractiveZoneToInteractive(zoneId) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mainAction = {
            type: exports.CHANGE_TO_INTERACTIVE,
            payload: { zoneId: zoneId },
        };
        var batchedActions = [];
        var zoneState = selectors_1.dmGetZoneStateById(dmState, { id: zoneId });
        if (!lodash_1.isNil(zoneState)) {
            if (zoneState.nonInteractive) {
                batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: zoneId, nonInteractive: false }));
                var mediaStateIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: zoneId });
                if (!lodash_1.isNil(mediaStateIds) && mediaStateIds.length === 1) {
                    var eventStates = selectors_1.dmGetEventStatesForMediaStateId(dmState, { id: mediaStateIds[0] });
                    if (eventStates.length >= 1 && eventStates[0].disabled) {
                        batchedActions.push(actionEvent_1.dmDeleteEventWithParams(actionEvent_1.dmGetEventDeleteParams(dmState, eventStates[0].id)));
                    }
                }
                dispatch(actionBase_1.dmBatchActions(batchedActions));
            }
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'ChangeNonInteractiveZoneToInteractive - invalid zone ID', { action: mainAction });
        }
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmChangeNonInteractiveZoneToInteractive = dmChangeNonInteractiveZoneToInteractive;
function dmConvertMediaStatesToMediaList(mediaStateIds) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var invalidIds = [];
        var invalidContainerIds = new Set();
        var zoneSet = new Set();
        mediaStateIds.forEach(function (id) {
            var mediaStateState = selectors_1.dmGetMediaStateStateById(dmState, { id: id });
            if (!mediaStateState) {
                invalidIds.push(id);
            }
            else {
                var container = mediaStateState.container;
                if (container.type === bsDmInterfaces_1.MediaStateContainerType.Zone) {
                    var zoneState = selectors_1.dmGetZoneStateById(dmState, { id: container.id });
                    if (!(zoneState === null || zoneState === void 0 ? void 0 : zoneState.nonInteractive)) {
                        zoneSet.add(container.id);
                    }
                    else {
                        invalidContainerIds.add(container.id);
                    }
                }
            }
        });
        if (invalidIds.length > 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, "dmConvertMediaStatesToMediaList - invalid ids:" + invalidIds.join(','));
        }
        if (invalidContainerIds.size > 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, "dmConvertMediaStatesToMediaList - invalid container ids:" + Array.from(invalidContainerIds).join(',') + ". Containers should be interactive");
        }
        if (zoneSet.size !== 1) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, "dmConvertMediaStatesToMediaList - mediaStateIds should belong to same zone");
        }
        if (!selectors_1.dmCanConvertMediaStateListToMediaList(dmState, { ids: mediaStateIds })) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, "dmConvertMediaStatesToMediaList - mediaStateIds should form a linked playlist for interactive zones");
        }
        var zoneId = Array.from(zoneSet)[0];
        var mediaListStateName = selectors_1.dmGetUniqueMediaStateNameForBaseNameInZone(dmState, { id: zoneId, name: 'MediaList1' });
        var mediaListContentItem = bsDmContentItems_1.dmCreateMediaListContentItem(mediaListStateName);
        var mediaListContainer = selectors_1.dmGetMediaStateContainerById(dmState, { id: mediaStateIds[0] });
        var batchedActions = [];
        var addMediaListAction = actionMediaState_1.dmAddMediaStateWithContentItem(mediaListStateName, mediaListContainer, mediaListContentItem, zoneId, '1');
        var mediaListStateId = addMediaListAction.payload.id;
        batchedActions.push(addMediaListAction);
        var mediaStatesContainer = bsDmContentItems_1.dmGetMediaStateContainer(mediaListStateId, bsDmInterfaces_1.MediaStateContainerType.MediaList);
        batchedActions.push(actionMediaState_1.dmUpdateMediaStatesContainers(mediaStateIds, mediaStatesContainer));
        batchedActions.push(actionMediaState_1.dmAddSequencedMediaStates(mediaStateIds, mediaStatesContainer));
        var deleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIds, true);
        deleteParams.mediaStateIds = [];
        deleteParams.assetIds = [];
        batchedActions.push(actionMediaState_1.dmDeleteMediaStateWithParams(deleteParams));
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        var mainAction = {
            type: exports.CONVERT_MEDIASTATES_TO_MEDIALIST,
            payload: { mediaListId: mediaListStateId },
        };
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmConvertMediaStatesToMediaList = dmConvertMediaStatesToMediaList;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmActionModifiesDmState = void 0;
var actionAssetMap_1 = __webpack_require__(10);
var actionAuxiliaryFile_1 = __webpack_require__(51);
var actionCustomAutorun_1 = __webpack_require__(64);
var actionDataFeed_1 = __webpack_require__(21);
var actionDeviceWebPage_1 = __webpack_require__(52);
var actionEvent_1 = __webpack_require__(20);
var actionHtmlSite_1 = __webpack_require__(32);
var actionNodeApp_1 = __webpack_require__(45);
var actionMediaState_1 = __webpack_require__(11);
var actionMediaSequence_1 = __webpack_require__(65);
var actionPartnerProduct_1 = __webpack_require__(66);
var actionParserPlugin_1 = __webpack_require__(54);
var actionVideoModePlugin_1 = __webpack_require__(56);
var actionScriptPlugin_1 = __webpack_require__(46);
var actionSign_1 = __webpack_require__(7);
var actionTransition_1 = __webpack_require__(25);
var actionCommand_1 = __webpack_require__(33);
var actionUserVariable_1 = __webpack_require__(34);
var actionLiveText_1 = __webpack_require__(29);
var actionZone_1 = __webpack_require__(14);
var actionThumbnail_1 = __webpack_require__(55);
var modifyingActionTypesArray = [
    actionAssetMap_1.PUT_ASSET_ITEM, actionAssetMap_1.REMOVE_ASSET_ITEMS, actionAssetMap_1.UPDATE_ASSET_ITEM,
    actionAuxiliaryFile_1.PUT_AUX_FILE, actionAuxiliaryFile_1.UPDATE_AUX_FILE, actionAuxiliaryFile_1.REMOVE_AUX_FILES,
    actionCustomAutorun_1.SET_CUSTOM_AUTORUN,
    actionDataFeed_1.ADD_DATA_FEED, actionDataFeed_1.UPDATE_DATA_FEED, actionDataFeed_1.DELETE_DATA_FEED,
    actionDataFeed_1.PUT_DATA_FEED_SOURCE, actionDataFeed_1.UPDATE_DATA_FEED_SOURCE, actionDataFeed_1.REMOVE_DATA_FEED_SOURCE, actionDataFeed_1.PASTE_DATA_FEEDS,
    actionDeviceWebPage_1.ADD_DEVICE_WEB_PAGE, actionDeviceWebPage_1.UPDATE_DEVICE_WEB_PAGE, actionDeviceWebPage_1.DELETE_DEVICE_WEB_PAGE,
    actionEvent_1.ADD_EVENT, actionEvent_1.ADD_MULTIPLE_EVENTS, actionEvent_1.UPDATE_EVENT, actionEvent_1.DELETE_EVENT,
    actionHtmlSite_1.ADD_HTML_SITE, actionHtmlSite_1.UPDATE_HTML_SITE, actionHtmlSite_1.DELETE_HTML_SITE,
    actionNodeApp_1.ADD_NODE_APP, actionNodeApp_1.UPDATE_NODE_APP, actionNodeApp_1.DELETE_NODE_APP,
    actionLiveText_1.ADD_LIVE_TEXT_CANVAS, actionLiveText_1.UPDATE_LIVE_TEXT_CANVAS, actionLiveText_1.DELETE_LIVE_TEXT_CANVAS,
    actionLiveText_1.ADD_LIVE_TEXT_ITEM, actionLiveText_1.UPDATE_LIVE_TEXT_ITEM, actionLiveText_1.DELETE_LIVE_TEXT_ITEM,
    actionLiveText_1.ADD_LIVE_TEXT_DATA_FEED_GROUP, actionLiveText_1.UPDATE_LIVE_TEXT_DATA_FEED_GROUP,
    actionLiveText_1.ADD_LIVE_TEXT_DATA_FEED, actionLiveText_1.MOVE_LIVE_TEXT_DATA_FEED, actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED, actionLiveText_1.PASTE_LIVE_TEXT_ITEMS,
    actionMediaState_1.ADD_MEDIA_STATE, actionMediaState_1.ADD_SEQUENCED_MEDIA_STATE, actionMediaState_1.ADD_MEDIA_STATE_SEQUENCE, actionMediaState_1.UPDATE_MEDIA_STATE,
    actionMediaState_1.UPDATE_MEDIA_STATES_CONTAINERS, actionMediaState_1.DELETE_MEDIA_STATE, actionMediaState_1.PASTE_MEDIA_STATES, actionMediaSequence_1.MEDIASEQUENCE_MOVE_ITEM_INDICES,
    actionPartnerProduct_1.ADD_PARTNER_PRODUCT, actionPartnerProduct_1.UPDATE_PARTNER_PRODUCT, actionPartnerProduct_1.DELETE_PARTNER_PRODUCT,
    actionParserPlugin_1.ADD_PARSER_PLUGIN, actionParserPlugin_1.UPDATE_PARSER_PLUGIN, actionParserPlugin_1.REMOVE_PARSER_PLUGIN,
    actionVideoModePlugin_1.ADD_VIDEOMODE_PLUGIN, actionVideoModePlugin_1.UPDATE_VIDEOMODE_PLUGIN, actionVideoModePlugin_1.REMOVE_VIDEOMODE_PLUGIN,
    actionScriptPlugin_1.ADD_SCRIPT_PLUGIN, actionScriptPlugin_1.UPDATE_SCRIPT_PLUGIN, actionScriptPlugin_1.REMOVE_SCRIPT_PLUGIN,
    actionTransition_1.ADD_TRANSITION, actionTransition_1.ADD_CONDITIONAL_TRANSITION, actionTransition_1.UPDATE_TRANSITION,
    actionTransition_1.UPDATE_TRANSITION_CONDITION, actionTransition_1.MOVE_TRANSITION_CONDITION, actionTransition_1.DELETE_TRANSITION,
    actionCommand_1.ADD_COMMAND, actionCommand_1.UPDATE_COMMAND, actionCommand_1.MOVE_COMMAND, actionCommand_1.DELETE_COMMAND, actionCommand_1.PASTE_COMMANDS,
    actionUserVariable_1.ADD_USER_VARIABLE, actionUserVariable_1.UPDATE_USER_VARIABLE, actionUserVariable_1.MOVE_USER_VARIABLES,
    actionUserVariable_1.RESEQUENCE_USER_VARIABLES, actionUserVariable_1.MERGE_USER_VARIABLES, actionUserVariable_1.DELETE_USER_VARIABLE,
    actionZone_1.ADD_ZONE, actionZone_1.UPDATE_ZONE, actionZone_1.UPDATE_ZONE_PROPS, actionZone_1.DELETE_ZONE,
    actionSign_1.NEW_SIGN, actionSign_1.UPDATE_SIGN_PROPS, actionSign_1.UPDATE_SIGN_SERIAL_PORTS,
    actionSign_1.UPDATE_SIGN_GPIO, actionSign_1.UPDATE_SIGN_BPMAP, actionSign_1.UPDATE_SIGN_AUDIO_CONFIG,
    actionThumbnail_1.SET_THUMBNAIL, actionSign_1.SCALE_RECTANGLES, actionSign_1.UPDATE_SIGN_IR_IN_CONFIG, actionSign_1.UPDATE_SIGN_IR_OUT_CONFIG,
    actionSign_1.UPDATE_SIGN_IR_REMOTE_CONTROL, actionSign_1.UPDATE_SIGN_WSS_DEVICE_SPEC, actionSign_1.CLEAR_SIGN_WSS_DEVICE_SPEC,
];
var modifyingActionTypesSet = new Set(modifyingActionTypesArray);
function dmActionModifiesDmState(action) {
    return modifyingActionTypesSet.has(action.type);
}
exports.dmActionModifiesDmState = dmActionModifiesDmState;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmChangeInteractiveZoneToNonInteractive = exports.dmPlaylistPasteMediaStateCopySet = exports.dmPlaylistMoveMediaStatesAtIndices = exports.dmPlaylistMoveMediaStateRange = exports.dmPlaylistDeleteMediaStatesAtIndices = exports.dmPlaylistDeleteMediaStateRange = exports.dmPlaylistUpdateMediaState = exports.dmPlaylistAddMediaStateRange = exports.dmPlaylistAppendMediaState = exports.dmPlaylistAddMediaState = exports.CHANGE_TO_NON_INTERACTIVE = exports.PLAYLIST_MOVE_MEDIA_STATE_INDICES_TO_INDEX = exports.PLAYLIST_MOVE_MEDIA_STATE_RANGE_TO_INDEX = exports.PLAYLIST_DELETE_MEDIA_STATE_AT_INDICES = exports.PLAYLIST_DELETE_MEDIA_STATE_RANGE = exports.PLAYLIST_ADD_MEDIA_STATE_RANGE_AT_INDEX = exports.PLAYLIST_ADD_MEDIA_STATE_AT_INDEX = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmState_1 = __webpack_require__(5);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmEvents_1 = __webpack_require__(24);
var bsDmDataFeed_1 = __webpack_require__(15);
var bsDmCopyPaste_1 = __webpack_require__(23);
var bsDmError_1 = __webpack_require__(4);
var selectors_1 = __webpack_require__(6);
var actionMediaState_1 = __webpack_require__(11);
var actionEvent_1 = __webpack_require__(20);
var actionTransition_1 = __webpack_require__(25);
var actionZone_1 = __webpack_require__(14);
var actionHtmlSite_1 = __webpack_require__(32);
var actionDataFeed_1 = __webpack_require__(21);
var actionAssetMap_1 = __webpack_require__(10);
var actionAssetHelper_1 = __webpack_require__(13);
var actionBase_1 = __webpack_require__(8);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
exports.PLAYLIST_ADD_MEDIA_STATE_AT_INDEX = 'DM_PLAYLIST_ADD_MEDIA_STATE_AT_INDEX';
exports.PLAYLIST_ADD_MEDIA_STATE_RANGE_AT_INDEX = 'DM_PLAYLIST_ADD_MEDIA_STATE_RANGE_AT_INDEX';
exports.PLAYLIST_DELETE_MEDIA_STATE_RANGE = 'DM_PLAYLIST_DELETE_MEDIA_STATE_RANGE';
exports.PLAYLIST_DELETE_MEDIA_STATE_AT_INDICES = 'DM_PLAYLIST_DELETE_MEDIA_STATE_AT_INDICES';
exports.PLAYLIST_MOVE_MEDIA_STATE_RANGE_TO_INDEX = 'DM_PLAYLIST_MOVE_MEDIA_STATE_RANGE_TO_INDEX';
exports.PLAYLIST_MOVE_MEDIA_STATE_INDICES_TO_INDEX = 'DM_PLAYLIST_MOVE_MEDIA_STATE_INDICES_TO_INDEX';
exports.CHANGE_TO_NON_INTERACTIVE = 'DM_PLAYLIST_CHANGE_TO_NON_INTERACTIVE';
var getDefaultNameForContentItem = function (contentItem, index) {
    return contentItem.name ? contentItem.name : 'State' + index;
};
var getDefaultEventTypeForContentItem = function (contentItem) {
    var eventType = bscore_1.EventType.Timer;
    if (contentItem.type === bscore_1.ContentItemType.Video
        || contentItem.type === bscore_1.ContentItemType.Audio
        || contentItem.type === bscore_1.ContentItemType.MrssFeed
        || contentItem.type === bscore_1.ContentItemType.LocalPlaylist
        || contentItem.type === bscore_1.ContentItemType.DataFeed) {
        eventType = bscore_1.EventType.MediaEnd;
    }
    return eventType;
};
var getDefaultTransitionType = function () { return bscore_1.TransitionType.NoEffect; };
var enforceContentItemDataPlaylistRequirements = function (contentItemData) {
    if (contentItemData.hasOwnProperty('automaticallyLoop')) {
        return __assign(__assign({}, contentItemData), { automaticallyLoop: true });
    }
    return contentItemData;
};
function dmPlaylistAddMediaState(index, container, content, options) {
    return function (dispatch, getState) {
        var name;
        var contentData;
        var contentAdditionalAsset;
        var transitionType;
        var eventType;
        var eventData;
        if (!lodash_1.isNil(options)) {
            name = options.name;
            contentData = options.contentData;
            contentAdditionalAsset = options.contentAdditionalAsset;
            transitionType = options.transitionType;
            eventType = options.eventType;
            eventData = options.eventData;
        }
        var newMediaStateId = utils_1.newBsDmId();
        var contentItem;
        var assetItem;
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var containingZone = selectors_1.dmGetZoneStateForContainer(dmState, container);
        if (!lodash_1.isNil(containingZone)) {
            var zoneType = containingZone.type;
            if (actionMediaState_1.dmContentIsAssetItem(content)) {
                assetItem = __assign({}, content);
                if (bscore_1.bscIsAssetItemPlayableContent(assetItem)) {
                    contentItem = bsDmContentItems_1.dmCreateMediaContentItem(assetItem.name, bscore_1.BsAssetIdNone, assetItem.mediaType);
                }
                else if (assetItem.assetType === bscore_1.AssetType.HtmlSite) {
                    contentItem = bsDmContentItems_1.dmCreateHtmlContentItem(assetItem.name, bsDmInterfaces_1.BsDmIdNone);
                }
                else {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaState: Unsupported BsAssetItem assetType');
                }
            }
            else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(content)) {
                if (zoneType === bscore_1.ZoneType.Ticker) {
                    content.usage = bscore_1.DataFeedUsageType.Text;
                }
                var dataFeedName = lodash_1.isNil(name) ? '' : name;
                if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(content)) {
                    dataFeedName = content.assetItem.name;
                }
                contentItem = content.usage === bscore_1.DataFeedUsageType.Text ?
                    bsDmContentItems_1.dmCreateDataFeedContentItem(dataFeedName, bsDmInterfaces_1.BsDmIdNone) :
                    bsDmContentItems_1.dmCreateMrssDataFeedContentItem(dataFeedName, bsDmInterfaces_1.BsDmIdNone);
            }
            else {
                if (bsDmContentItems_1.dmContentItemIsMediaContentItem(content)) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateAction: MediaContentItems must be specified by AssetItem parameters');
                }
                else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(content)) {
                    var dataFeed = selectors_1.dmGetDataFeedStateById(dmState, { id: content.dataFeedId });
                    if (!lodash_1.isNil(dataFeed) && dataFeed.isSystemFeed) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaState: system dataFeed cannot be used in a dataFeed contentItem');
                    }
                }
                contentItem = content;
            }
            var contentItemData = bsDmContentItems_1.dmFilterContentItemData(contentItem.type, contentData);
            if (contentItemData) {
                contentItem = Object.assign({}, contentItem, contentItemData);
            }
            contentItem =
                enforceContentItemDataPlaylistRequirements(contentItem);
            if (lodash_1.isNil(name)) {
                name = '';
            }
            var mainAction = {
                type: exports.PLAYLIST_ADD_MEDIA_STATE_AT_INDEX,
                payload: { id: newMediaStateId, index: index, container: container, contentItem: contentItem, name: name, transitionType: transitionType, eventType: eventType, eventData: eventData },
            };
            var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
            if (!playlistIds) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'PlaylistAddMediaStateAction: Zone does not contain a valid simple playlist', { action: mainAction });
            }
            if (zoneType === bscore_1.ZoneType.BackgroundImage) {
                var backgroundStates = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: container.id });
                if (backgroundStates.length >= 1) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'BackgroundImage can accept only one media state', { action: mainAction });
                }
            }
            if (!bsDmContentItems_1.dmIsValidContentItemForPlaylist(contentItem, zoneType)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateAction: Content item type "' + contentItem.type + '" cannot be added to "'
                    + zoneType + '" zone', { action: mainAction });
            }
            if (index === undefined || index > playlistIds.length || index < 0) {
                index = playlistIds.length;
            }
            var tagIndex = selectors_1.dmGetNextMediaStateTagIndexForZone(dmState, { id: containingZone.id });
            if (name === '') {
                name = getDefaultNameForContentItem(contentItem, tagIndex ? tagIndex : playlistIds.length + 1);
            }
            name = selectors_1.dmGetUniqueMediaStateNameForBaseNameInZone(dmState, { id: container.id, name: name });
            if (!eventType) {
                mainAction.payload.eventType = eventType = getDefaultEventTypeForContentItem(contentItem);
            }
            if (eventType === bscore_1.EventType.Timer && !(eventData && eventData.interval)) {
                mainAction.payload.eventData = eventData =
                    bsDmEvents_1.dmCreateEventDataForEventType(eventType, { contentItemType: contentItem.type });
            }
            if (!transitionType) {
                mainAction.payload.transitionType = transitionType = getDefaultTransitionType();
            }
            var prevMediaStateId = null;
            var nextMediaStateId = null;
            if (playlistIds.length > 1) {
                if (index > 0) {
                    prevMediaStateId = playlistIds[index - 1];
                }
                else {
                    prevMediaStateId = playlistIds[playlistIds.length - 1];
                }
                if (index === playlistIds.length) {
                    nextMediaStateId = playlistIds[0];
                }
                else {
                    nextMediaStateId = playlistIds[index];
                }
            }
            else if (playlistIds.length === 1) {
                prevMediaStateId = nextMediaStateId = playlistIds[0];
            }
            else {
                nextMediaStateId = newMediaStateId;
            }
            var prevMediaState = void 0;
            if (!lodash_1.isNil(prevMediaStateId)) {
                prevMediaState = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateId });
            }
            var batchedActions = [];
            if (!lodash_1.isNil(assetItem)) {
                if (assetItem.assetType === bscore_1.AssetType.Content) {
                    assetItem = actionAssetHelper_1.dmSetAssetId(dmState, assetItem);
                    contentItem.assetId = assetItem.id;
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                }
                else if (assetItem.assetType === bscore_1.AssetType.HtmlSite) {
                    assetItem = actionAssetHelper_1.dmSetAssetId(dmState, assetItem);
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    var htmlSiteAction = actionHtmlSite_1.dmAddHostedHtmlSiteWithoutAssetProcessing(assetItem.name, assetItem.id);
                    var htmlSiteId = htmlSiteAction.payload.id;
                    batchedActions.push(htmlSiteAction);
                    contentItem.siteId = htmlSiteId;
                }
                mainAction.payload.contentItem = contentItem;
            }
            else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(content)) {
                var dataFeedName = bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(content) ? content.assetItem.name : contentItem.name;
                var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, dataFeedName, content);
                batchedActions.push.apply(batchedActions, actionListParams.actions);
                contentItem.dataFeedId = actionListParams.mainAction.payload.id;
                mainAction.payload.contentItem = contentItem;
            }
            var addMediaStateAction = actionMediaState_1.dmAddMediaStateWithContentItem(name, container, contentItem, containingZone.id, tagIndex.toString());
            addMediaStateAction.payload.id = newMediaStateId;
            batchedActions.push(addMediaStateAction);
            var onlyOneMediaState = nextMediaStateId === newMediaStateId;
            var eventAction = actionEvent_1.dmAddEvent(name + '_ev', eventType, newMediaStateId, eventData, onlyOneMediaState);
            var newEventId = eventAction.payload.id;
            batchedActions.push(eventAction);
            if (prevMediaState) {
                var transitionId = prevMediaState.eventList[0].defaultTransition.id;
                batchedActions.push(actionTransition_1.dmUpdateTransition({
                    id: transitionId,
                    targetMediaStateId: newMediaStateId,
                }));
                var eventId = prevMediaState.eventList[0].id;
                var eventState = selectors_1.dmGetEventStateById(dmState, { id: eventId });
                if (eventState.disabled) {
                    var eventParams = {
                        id: eventId,
                        disabled: false,
                    };
                    batchedActions.push(actionEvent_1.dmUpdateEvent(eventParams));
                }
            }
            batchedActions.push(actionTransition_1.dmAddTransition(name + '_tr', newEventId, nextMediaStateId));
            if (index === 0) {
                batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newMediaStateId }));
            }
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            mainAction.meta = { dispatchList: batchedActions };
            return mainAction;
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaState: Invalid container', { functionName: 'dmPlaylistAddMediaState' });
        }
    };
}
exports.dmPlaylistAddMediaState = dmPlaylistAddMediaState;
function dmPlaylistAppendMediaState(container, content, options) {
    return dmPlaylistAddMediaState(-1, container, content, options);
}
exports.dmPlaylistAppendMediaState = dmPlaylistAppendMediaState;
function dmPlaylistAddMediaStateRange(index, container, content, options) {
    return function (dispatch, getState) {
        var getName = function (i) {
            var nameVal = lodash_1.isNil(options)
                || lodash_1.isNil(options[i])
                || lodash_1.isNil(options[i].name)
                ? '' : options[i].name;
            return nameVal;
        };
        var getDataFeedName = function (i) {
            var nameVal = lodash_1.isNil(options)
                || lodash_1.isNil(options[i])
                || lodash_1.isNil(options[i].name)
                ? '' : options[i].name;
            return nameVal;
        };
        var mainAction = {
            type: exports.PLAYLIST_ADD_MEDIA_STATE_RANGE_AT_INDEX,
            payload: {
                index: index,
                container: container,
                id: [],
                name: [],
                contentItems: [],
            },
        };
        if (!content || content.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: Invalid parameters for MediaState addition: no content provided', { functionName: 'dmPlaylistAddMediaStateRange', action: mainAction });
        }
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
        if (!playlistIds) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'PlaylistAddMediaStateRange: Zone does not contain a valid simple playlist', { functionName: 'dmPlaylistAddMediaStateRange', action: mainAction });
        }
        var updatedPlaylistWillHaveOneMediaState = playlistIds.length === 0 && content.length === 1;
        var containingZone = selectors_1.dmGetZoneStateForContainer(dmState, container);
        if (!lodash_1.isNil(containingZone)) {
            var zoneType_1 = containingZone.type;
            if (zoneType_1 === bscore_1.ZoneType.BackgroundImage && !updatedPlaylistWillHaveOneMediaState) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'PlaylistAddMediaStateRange: BackgroundImage can accept only one media state', { functionName: 'dmPlaylistAddMediaStateRange', action: mainAction });
            }
            var contentItems_1 = [];
            var assetItems_1 = [];
            var dataFeedSpecs_1 = [];
            var zoneNameMap_1 = selectors_1.dmGetMediaStateNameMapForZone(dmState, { id: container.id });
            content.forEach(function (item, contentIndex) {
                var contentItem;
                if (actionMediaState_1.dmContentIsAssetItem(item)) {
                    assetItems_1.push(item);
                    dataFeedSpecs_1.push(undefined);
                    if (bscore_1.bscIsAssetItemPlayableContent(item)) {
                        contentItem = bsDmContentItems_1.dmCreateMediaContentItem(item.name, bscore_1.BsAssetIdNone, item.mediaType);
                    }
                    else if (item.assetType === bscore_1.AssetType.HtmlSite) {
                        contentItem = bsDmContentItems_1.dmCreateHtmlContentItem(item.name, bsDmInterfaces_1.BsDmIdNone);
                    }
                    else {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: Unsupported BsAssetItem assetType', { functionName: 'dmPlaylistAddMediaStateRange' });
                    }
                }
                else if (bsDmDataFeed_1.dmIsDataFeedSourceSpecification(item)) {
                    if (zoneType_1 === bscore_1.ZoneType.Ticker) {
                        item.usage = bscore_1.DataFeedUsageType.Text;
                    }
                    var dataFeedName = getDataFeedName(contentIndex);
                    if (bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(item)) {
                        dataFeedName = item.assetItem.name;
                    }
                    contentItem = item.usage === bscore_1.DataFeedUsageType.Text ?
                        bsDmContentItems_1.dmCreateDataFeedContentItem(dataFeedName, bsDmInterfaces_1.BsDmIdNone) :
                        bsDmContentItems_1.dmCreateMrssDataFeedContentItem(dataFeedName, bsDmInterfaces_1.BsDmIdNone);
                    assetItems_1.push(undefined);
                    dataFeedSpecs_1.push(item);
                }
                else if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(item)) {
                    contentItem = item;
                    assetItems_1.push(undefined);
                }
                else {
                    if (bsDmContentItems_1.dmContentItemIsMediaContentItem(item)) {
                        throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: MediaContentItems must be specified by AssetItem parameters', { functionName: 'dmPlaylistAddMediaStateRange' });
                    }
                    else if (bsDmContentItems_1.dmContentItemIsAnyDataFeedContentItem(item)) {
                        var dataFeed = selectors_1.dmGetDataFeedStateById(dmState, { id: item.dataFeedId });
                        if (!lodash_1.isNil(dataFeed) && dataFeed.isSystemFeed) {
                            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: system dataFeed cannot be used in a dataFeed contentItem', { functionName: 'dmPlaylistAddMediaStateRange' });
                        }
                    }
                    contentItem = item;
                    assetItems_1.push(undefined);
                    dataFeedSpecs_1.push(undefined);
                }
                if (!lodash_1.isNil(options)) {
                    var itemOptions = options[contentIndex];
                    if (!lodash_1.isNil(itemOptions === null || itemOptions === void 0 ? void 0 : itemOptions.contentData)) {
                        var contentItemData = bsDmContentItems_1.dmFilterContentItemData(contentItem.type, itemOptions.contentData);
                        if (!lodash_1.isNil(contentItemData)) {
                            contentItem = __assign(__assign({}, contentItem), contentItemData);
                        }
                    }
                    if (!lodash_1.isNil(itemOptions === null || itemOptions === void 0 ? void 0 : itemOptions.contentAdditionalAsset)) {
                        var contentAdditionalAsset = itemOptions.contentAdditionalAsset;
                        if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(contentItem)) {
                            var dataFeedSpec = contentAdditionalAsset.dataFeedSpec;
                            if (!lodash_1.isNil(dataFeedSpec)) {
                                dataFeedSpecs_1.push(dataFeedSpec);
                            }
                        }
                    }
                }
                contentItems_1.push(contentItem);
            });
            var contentItemsInvalid_1 = false;
            contentItems_1.forEach(function (item) {
                if (!bsDmContentItems_1.dmIsValidContentItemForPlaylist(item, zoneType_1)) {
                    contentItemsInvalid_1 = true;
                }
            });
            if (contentItemsInvalid_1) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: One or more content item types cannot be added to this Zone type', { functionName: 'dmPlaylistAddMediaStateRange', action: mainAction });
            }
            if (index === undefined || index > playlistIds.length || index < 0) {
                index = playlistIds.length;
            }
            var prevMediaStateId = null;
            var nextMediaStateId_1 = null;
            if (playlistIds.length > 1) {
                if (index > 0) {
                    prevMediaStateId = playlistIds[index - 1];
                }
                else {
                    prevMediaStateId = playlistIds[playlistIds.length - 1];
                }
                if (index === playlistIds.length) {
                    nextMediaStateId_1 = playlistIds[0];
                }
                else {
                    nextMediaStateId_1 = playlistIds[index];
                }
            }
            else if (playlistIds.length === 1) {
                prevMediaStateId = nextMediaStateId_1 = playlistIds[0];
            }
            var transitionType_1 = getDefaultTransitionType();
            var batchedActions_1 = [];
            var addedEvents_1 = [];
            var addedAssets_1 = new Map();
            var addedHtmlSites_1 = new Map();
            var mediaStateTagBaseValue_1 = selectors_1.dmGetNextMediaStateTagIndexForZone(dmState, { id: containingZone.id });
            contentItems_1.forEach(function (contentItem, itemIndex) {
                var eventType = getDefaultEventTypeForContentItem(contentItem);
                var eventData = bsDmEvents_1.dmCreateEventDataForEventType(eventType, { contentItemType: contentItem.type });
                if (!lodash_1.isNil(assetItems_1[itemIndex])) {
                    var assetItem = Object.assign({}, assetItems_1[itemIndex]);
                    if (assetItem.assetType === bscore_1.AssetType.Content || assetItem.assetType === bscore_1.AssetType.HtmlSite) {
                        assetItem = actionAssetHelper_1.dmSetAssetId(dmState, assetItem);
                        var addedAssetItemId = addedAssets_1.get(assetItem.locator);
                        if (addedAssetItemId) {
                            assetItem.id = addedAssetItemId;
                        }
                        else {
                            addedAssets_1.set(assetItem.locator, assetItem.id);
                        }
                        batchedActions_1.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                        if (assetItem.assetType === bscore_1.AssetType.Content) {
                            contentItem.assetId = assetItem.id;
                        }
                        else if (assetItem.assetType === bscore_1.AssetType.HtmlSite) {
                            var htmlSiteAction = actionHtmlSite_1.dmAddHostedHtmlSiteWithoutAssetProcessing(assetItem.name, assetItem.id);
                            var htmlSiteId = htmlSiteAction.payload.id;
                            batchedActions_1.push(htmlSiteAction);
                            addedHtmlSites_1.set(assetItem.id, htmlSiteId);
                            contentItem.siteId = htmlSiteId;
                        }
                    }
                }
                else {
                    var dataFeedSpec = dataFeedSpecs_1[itemIndex];
                    if (!lodash_1.isNil(dataFeedSpec)) {
                        var dataFeedName = bsDmDataFeed_1.dmIsBsnDataFeedSourceSpecification(dataFeedSpec) ? dataFeedSpec.assetItem.name : contentItem.name;
                        var actionListParams = actionDataFeed_1.dmGetAddDataFeedActionList(dmState, dataFeedName, dataFeedSpec);
                        batchedActions_1.push.apply(batchedActions_1, actionListParams.actions);
                        if (bsDmContentItems_1.dmContentItemIsLocalPlaylistContentItem(contentItem)) {
                            contentItem.defaultDataFeedId = actionListParams.mainAction.payload.id;
                        }
                        else {
                            contentItem.dataFeedId = actionListParams.mainAction.payload.id;
                        }
                    }
                }
                contentItem =
                    enforceContentItemDataPlaylistRequirements(contentItem);
                mainAction.payload.contentItems.push(contentItem);
                var tagValue = mediaStateTagBaseValue_1 + itemIndex;
                var mediaStateName = getName(itemIndex);
                if (mediaStateName.length === 0) {
                    mediaStateName = getDefaultNameForContentItem(contentItem, tagValue);
                }
                mediaStateName = utils_1.getUniqueNameForNameMap(mediaStateName.length ? mediaStateName : 'State', zoneNameMap_1);
                var addMediaStateAction = actionMediaState_1.dmAddMediaStateWithContentItem(mediaStateName, container, contentItem, containingZone.id, tagValue.toString());
                zoneNameMap_1[mediaStateName] = [addMediaStateAction.payload.id];
                mainAction.payload.id.push(addMediaStateAction.payload.id);
                mainAction.payload.name.push(mediaStateName);
                batchedActions_1.push(addMediaStateAction);
                var eventAction = actionEvent_1.dmAddEvent(mediaStateName + '_ev', eventType, addMediaStateAction.payload.id, eventData, updatedPlaylistWillHaveOneMediaState);
                addedEvents_1.push(eventAction.payload.id);
                batchedActions_1.push(eventAction);
            });
            if (!lodash_1.isNil(prevMediaStateId)) {
                var prevMediaState = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateId });
                if (!lodash_1.isNil(prevMediaState)) {
                    var defaultTransition = prevMediaState.eventList[0].defaultTransition;
                    if (!lodash_1.isNil(defaultTransition)) {
                        batchedActions_1.push(actionTransition_1.dmUpdateTransition({
                            id: defaultTransition.id,
                            targetMediaStateId: mainAction.payload.id[0],
                        }));
                        var eventId = prevMediaState.eventList[0].id;
                        var eventState = selectors_1.dmGetEventStateById(dmState, { id: eventId });
                        if (eventState.disabled) {
                            var eventParams = {
                                id: eventId,
                                disabled: false,
                            };
                            batchedActions_1.push(actionEvent_1.dmUpdateEvent(eventParams));
                        }
                    }
                }
            }
            addedEvents_1.forEach(function (eventId, itemIndex) {
                var nextStateId = itemIndex + 1 < mainAction.payload.id.length ?
                    mainAction.payload.id[itemIndex + 1] :
                    (nextMediaStateId_1 ? nextMediaStateId_1 : mainAction.payload.id[0]);
                batchedActions_1.push(actionTransition_1.dmAddTransition(mainAction.payload.name[itemIndex] + '_tr', eventId, nextStateId, transitionType_1));
            });
            if (index === 0) {
                batchedActions_1.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: mainAction.payload.id[0] }));
            }
            dispatch(actionBase_1.dmBatchActions(batchedActions_1));
            mainAction.meta = { dispatchList: batchedActions_1 };
            return mainAction;
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistAddMediaStateRange: Invalid container', { functionName: 'dmPlaylistAddMediaStateRange' });
        }
    };
}
exports.dmPlaylistAddMediaStateRange = dmPlaylistAddMediaStateRange;
function dmPlaylistUpdateMediaState(params) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mediaState = selectors_1.dmGetMediaStateStateById(dmState, { id: params.id });
        if (!lodash_1.isNil(mediaState)) {
            var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: mediaState.container.id });
            if (!playlistIds) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Zone does not contain a valid simple playlist');
            }
            if (!lodash_1.isNil(params.contentData)) {
                params.contentData = enforceContentItemDataPlaylistRequirements(params.contentData);
            }
            return actionMediaState_1.doUpdateMediaState(params, dispatch, getState);
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistUpdateMediaStateAction - invalid mediaState ID');
        }
    };
}
exports.dmPlaylistUpdateMediaState = dmPlaylistUpdateMediaState;
function dmPlaylistDeleteMediaStateRange(container, startingIndex, count) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PLAYLIST_DELETE_MEDIA_STATE_RANGE,
            payload: { containerId: container.id, startingIndex: startingIndex, count: count },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
        if (!playlistIds) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Zone does not contain a valid simple playlist', { action: mainAction });
        }
        if (count === undefined) {
            count = 1;
        }
        if (startingIndex >= playlistIds.length || count === 0 || startingIndex + count > playlistIds.length) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Invalid parameters for deletion range', { action: mainAction });
        }
        var endingIndex = startingIndex + count;
        var mediaStateIdsToDelete = playlistIds.slice(startingIndex, endingIndex);
        var prevMediaStateId = null;
        var nextMediaStateId = null;
        var remainingMediaStates = playlistIds.length - count;
        if (remainingMediaStates > 1) {
            if (startingIndex > 0) {
                prevMediaStateId = playlistIds[startingIndex - 1];
            }
            else {
                prevMediaStateId = playlistIds[playlistIds.length - 1];
            }
            if (endingIndex === playlistIds.length) {
                nextMediaStateId = playlistIds[0];
            }
            else {
                nextMediaStateId = playlistIds[endingIndex];
            }
        }
        else if (remainingMediaStates === 1) {
            if (startingIndex > 0) {
                prevMediaStateId = nextMediaStateId = playlistIds[0];
            }
            else {
                prevMediaStateId = nextMediaStateId = playlistIds[playlistIds.length - 1];
            }
        }
        var prevMediaState;
        if (!lodash_1.isNil(prevMediaStateId)) {
            prevMediaState = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateId });
        }
        var batchedActions = [];
        var deleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIdsToDelete);
        batchedActions.push(actionMediaState_1.dmDeleteMediaStateWithParams(deleteParams));
        if (!lodash_1.isNil(prevMediaState) && !lodash_1.isNil(nextMediaStateId)) {
            var transitionParams = {
                id: prevMediaState.eventList[0].defaultTransition.id,
                targetMediaStateId: nextMediaStateId,
            };
            batchedActions.push(actionTransition_1.dmUpdateTransition(transitionParams));
            if (remainingMediaStates === 1) {
                var eventParams = {
                    id: prevMediaState.eventList[0].id,
                    disabled: true,
                };
                batchedActions.push(actionEvent_1.dmUpdateEvent(eventParams));
            }
        }
        if (startingIndex === 0) {
            var newInitialMediaState = remainingMediaStates > 0 && !lodash_1.isNil(nextMediaStateId) ? nextMediaStateId : bsDmInterfaces_1.BsDmIdNone;
            batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaState }));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmPlaylistDeleteMediaStateRange = dmPlaylistDeleteMediaStateRange;
function dmPlaylistDeleteMediaStatesAtIndices(container, indices) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PLAYLIST_DELETE_MEDIA_STATE_AT_INDICES,
            payload: { containerId: container.id, indices: indices },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
        if (!playlistIds) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Zone does not contain a valid simple playlist', { action: mainAction });
        }
        if (!indices || indices.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Incorrect parameters for media state delete by indices operation', { action: mainAction });
        }
        indices.sort(function (a, b) { return a - b; });
        var tempIndices = indices.slice();
        var finalPlaylistIds = [];
        var mediaStateIdsToDelete = [];
        var mediaStateIdsForTransitionsToUpdate = [];
        playlistIds.forEach(function (id, index) {
            if (index === tempIndices[0]) {
                mediaStateIdsToDelete.push(id);
                var prevMediaState = finalPlaylistIds.length > 0 ? finalPlaylistIds[finalPlaylistIds.length - 1] : undefined;
                if (prevMediaState && mediaStateIdsForTransitionsToUpdate.indexOf(prevMediaState) < 0) {
                    mediaStateIdsForTransitionsToUpdate.push(prevMediaState);
                }
                tempIndices.shift();
            }
            else {
                finalPlaylistIds.push(id);
            }
        });
        if (indices[0] === 0 && finalPlaylistIds.length > 0) {
            var finalMediaState = finalPlaylistIds[finalPlaylistIds.length - 1];
            if (finalMediaState && mediaStateIdsForTransitionsToUpdate.indexOf(finalMediaState) < 0) {
                mediaStateIdsForTransitionsToUpdate.push(finalMediaState);
            }
        }
        var batchedActions = [];
        var deleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIdsToDelete);
        batchedActions.push(actionMediaState_1.dmDeleteMediaStateWithParams(deleteParams));
        finalPlaylistIds.forEach(function (id, index) {
            var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: id });
            var targetMediaStateId = index + 1 < finalPlaylistIds.length ? finalPlaylistIds[index + 1] : finalPlaylistIds[0];
            if (!lodash_1.isNil(mediaState)) {
                var defaultTransition = mediaState.eventList[0].defaultTransition;
                if (!lodash_1.isNil(defaultTransition)) {
                    var transitionParams = {
                        id: defaultTransition.id,
                        targetMediaStateId: targetMediaStateId,
                    };
                    batchedActions.push(actionTransition_1.dmUpdateTransition(transitionParams));
                    if (finalPlaylistIds.length === 1) {
                        var eventParams = {
                            id: mediaState.eventList[0].id,
                            disabled: true,
                        };
                        batchedActions.push(actionEvent_1.dmUpdateEvent(eventParams));
                    }
                }
            }
        });
        if (indices[0] === 0) {
            var newInitialMediaState = finalPlaylistIds.length > 0 ? finalPlaylistIds[0] : bsDmInterfaces_1.BsDmIdNone;
            batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaState }));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmPlaylistDeleteMediaStatesAtIndices = dmPlaylistDeleteMediaStatesAtIndices;
function dmPlaylistMoveMediaStateRange(container, startingIndex, targetIndex, count) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PLAYLIST_MOVE_MEDIA_STATE_RANGE_TO_INDEX,
            payload: { containerId: container.id, startingIndex: startingIndex, targetIndex: targetIndex, count: count },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
        if (!playlistIds) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Zone does not contain a valid simple playlist', { action: mainAction });
        }
        if (count === undefined) {
            count = 1;
        }
        if (startingIndex >= playlistIds.length
            || count === 0
            || startingIndex === targetIndex
            || targetIndex + count > playlistIds.length) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Incorrect parameters for media state move operation', { action: mainAction });
        }
        var endingIndex = startingIndex + count;
        var intermediateListIds = playlistIds.slice();
        intermediateListIds.splice(startingIndex, count);
        var prevMediaStateIdForSrc = null;
        var nextMediaStateIdForSrc = null;
        if (intermediateListIds.length > 1) {
            if (startingIndex > 0) {
                prevMediaStateIdForSrc = playlistIds[startingIndex - 1];
            }
            else {
                prevMediaStateIdForSrc = playlistIds[playlistIds.length - 1];
            }
            if (endingIndex === playlistIds.length) {
                nextMediaStateIdForSrc = playlistIds[0];
            }
            else {
                nextMediaStateIdForSrc = playlistIds[endingIndex];
            }
        }
        var prevMediaStateIdForTarget = null;
        var nextMediaStateIdForTarget = null;
        if (targetIndex >= intermediateListIds.length || targetIndex === 0) {
            prevMediaStateIdForTarget = intermediateListIds[intermediateListIds.length - 1];
            nextMediaStateIdForTarget = intermediateListIds[0];
        }
        else {
            prevMediaStateIdForTarget = intermediateListIds[targetIndex - 1];
            nextMediaStateIdForTarget = intermediateListIds[targetIndex];
        }
        var firstMediaStateIdToMove = playlistIds[startingIndex];
        var lastMediaStateIdToMove = playlistIds[endingIndex - 1];
        var prevMediaStateForSrc;
        if (prevMediaStateIdForSrc) {
            prevMediaStateForSrc = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateIdForSrc });
        }
        var prevMediaStateForTarget;
        if (prevMediaStateIdForTarget) {
            prevMediaStateForTarget = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateIdForTarget });
        }
        var lastMediaStateToMove;
        if (lastMediaStateIdToMove) {
            lastMediaStateToMove = selectors_1.dmGetMediaStateById(dmState, { id: lastMediaStateIdToMove });
        }
        var batchedActions = [];
        if (prevMediaStateForSrc && nextMediaStateIdForSrc) {
            var transitionId = prevMediaStateForSrc.eventList[0].defaultTransition.id;
            batchedActions.push(actionTransition_1.dmUpdateTransition({ id: transitionId, targetMediaStateId: nextMediaStateIdForSrc }));
        }
        if (prevMediaStateForTarget) {
            var transitionId = prevMediaStateForTarget.eventList[0].defaultTransition.id;
            batchedActions.push(actionTransition_1.dmUpdateTransition({ id: transitionId, targetMediaStateId: firstMediaStateIdToMove }));
        }
        if (lastMediaStateToMove) {
            var transitionId = lastMediaStateToMove.eventList[0].defaultTransition.id;
            batchedActions.push(actionTransition_1.dmUpdateTransition({ id: transitionId, targetMediaStateId: nextMediaStateIdForTarget }));
        }
        if (startingIndex === 0 || targetIndex === 0) {
            var newInitialMediaStateId = targetIndex === 0 ? firstMediaStateIdToMove : intermediateListIds[0];
            batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaStateId }));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmPlaylistMoveMediaStateRange = dmPlaylistMoveMediaStateRange;
function dmPlaylistMoveMediaStatesAtIndices(container, indices, targetIndex) {
    return function (dispatch, getState) {
        var mainAction = {
            type: exports.PLAYLIST_MOVE_MEDIA_STATE_INDICES_TO_INDEX,
            payload: { containerId: container.id, indices: indices, targetIndex: targetIndex },
        };
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
        if (!playlistIds) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'Zone does not contain a valid simple playlist', { action: mainAction });
        }
        if (!indices || indices.length === 0) {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'Incorrect parameters for media state move by indices operation', { action: mainAction });
        }
        if (targetIndex > playlistIds.length) {
            targetIndex = playlistIds.length;
        }
        indices.sort(function (a, b) { return a - b; });
        var tempIndices = indices.slice();
        var finalPlaylistIds = [];
        var movedMediaStateIds = [];
        var mediaStateIdsForTransitionsToUpdate = [];
        var finalTargetIndex = playlistIds.length;
        playlistIds.forEach(function (id, index) {
            if (index === tempIndices[0]) {
                movedMediaStateIds.push(id);
                mediaStateIdsForTransitionsToUpdate.push(id);
                var prevMediaState = finalPlaylistIds.length > 0 ? finalPlaylistIds[finalPlaylistIds.length - 1] : undefined;
                if (prevMediaState && mediaStateIdsForTransitionsToUpdate.indexOf(prevMediaState) < 0) {
                    mediaStateIdsForTransitionsToUpdate.push(prevMediaState);
                }
                if (index === targetIndex) {
                    ++targetIndex;
                }
                tempIndices.shift();
            }
            else {
                finalPlaylistIds.push(id);
                if (index === targetIndex) {
                    finalTargetIndex = finalPlaylistIds.length - 1;
                }
            }
        });
        mainAction.payload.targetIndex = targetIndex;
        var preInsertMediaState = finalTargetIndex > 0 ?
            finalPlaylistIds[finalTargetIndex - 1] : finalPlaylistIds[finalPlaylistIds.length - 1];
        if (preInsertMediaState && mediaStateIdsForTransitionsToUpdate.indexOf(preInsertMediaState) < 0) {
            mediaStateIdsForTransitionsToUpdate.push(preInsertMediaState);
        }
        if (indices[0] === 0 || targetIndex === playlistIds.length) {
            var finalMediaState = finalPlaylistIds[finalPlaylistIds.length - 1];
            if (finalMediaState && mediaStateIdsForTransitionsToUpdate.indexOf(finalMediaState) < 0) {
                mediaStateIdsForTransitionsToUpdate.push(finalMediaState);
            }
        }
        finalPlaylistIds.splice.apply(finalPlaylistIds, __spreadArrays([finalTargetIndex, 0], movedMediaStateIds));
        var batchedActions = [];
        finalPlaylistIds.forEach(function (id, index) {
            var transitionChangeIndex = mediaStateIdsForTransitionsToUpdate.indexOf(id);
            if (transitionChangeIndex >= 0) {
                var mediaState = selectors_1.dmGetMediaStateById(dmState, { id: id });
                var targetMediaStateId = index + 1 < finalPlaylistIds.length ? finalPlaylistIds[index + 1] : finalPlaylistIds[0];
                if (!lodash_1.isNil(mediaState)) {
                    var defaultTransition = mediaState.eventList[0].defaultTransition;
                    if (!lodash_1.isNil(defaultTransition)) {
                        batchedActions.push(actionTransition_1.dmUpdateTransition({ id: defaultTransition.id, targetMediaStateId: targetMediaStateId }));
                    }
                }
                mediaStateIdsForTransitionsToUpdate.splice(transitionChangeIndex, 1);
            }
        });
        if (indices[0] === 0 || targetIndex === 0) {
            var newInitialMediaState = finalPlaylistIds.length > 0 ? finalPlaylistIds[0] : bsDmInterfaces_1.BsDmIdNone;
            batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaState }));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmPlaylistMoveMediaStatesAtIndices = dmPlaylistMoveMediaStatesAtIndices;
function dmPlaylistPasteMediaStateCopySet(copySet, container, options) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var targetZoneId = selectors_1.dmGetZoneIdForZoneOrMediaStateId(dmState, { id: container.id });
        var duplicateMatchedUserVariables = lodash_1.isNil(options) || lodash_1.isNil(options.duplicateMatchedUserVariables) ? false :
            options.duplicateMatchedUserVariables;
        var mainAction = actionMediaState_1.dmPreparePasteMediaStateAction(dmState, copySet, targetZoneId, duplicateMatchedUserVariables);
        var pasteToDifferentSign = selectors_1.dmGetSignId(dmState) !== copySet.signId;
        if (pasteToDifferentSign || copySet.zoneId !== targetZoneId) {
            var result = selectors_1.dmIsMediaStateCopySetCompatibleWithZone(dmState, { zoneId: targetZoneId, copySet: copySet });
            if (!result.ok) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidContainerForPaste, 'PlaylistPasteMediaStateCopySet - the copied mediaStates are not compatible with the target zone', { functionName: 'dmPlaylistPasteMediaStateCopySet', action: mainAction });
            }
        }
        var updatedCopySet = mainAction.payload.copySet;
        if (bsDmCopyPaste_1.dmIsPlaylistMediaStateCopySet(updatedCopySet)) {
            var playlistIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: container.id });
            if (lodash_1.isNil(playlistIds)) {
                throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidOperation, 'PlaylistPasteMediaStateCopySet: Zone does not contain a valid simple playlist', { action: mainAction });
            }
            var batchedActions = [mainAction];
            if (copySet.containerId !== container.id) {
                bsDmCopyPaste_1.dmUpdateMediaStateCopySetForPasteTargetContainer(updatedCopySet, container);
            }
            var targetIndex = !lodash_1.isNil(options)
                && !lodash_1.isNil(options.targetSequenceIndex)
                && options.targetSequenceIndex >= 0
                && options.targetSequenceIndex <= playlistIds.length ? options.targetSequenceIndex : playlistIds.length;
            var prevMediaStateId = null;
            var nextMediaStateId = null;
            if (playlistIds.length > 1) {
                if (targetIndex > 0) {
                    prevMediaStateId = playlistIds[targetIndex - 1];
                }
                else {
                    prevMediaStateId = playlistIds[playlistIds.length - 1];
                }
                if (targetIndex === playlistIds.length) {
                    nextMediaStateId = playlistIds[0];
                }
                else {
                    nextMediaStateId = playlistIds[targetIndex];
                }
            }
            else if (playlistIds.length === 1) {
                prevMediaStateId = nextMediaStateId = playlistIds[0];
            }
            else {
                nextMediaStateId = updatedCopySet.plStartingMediaStateId;
            }
            if (!lodash_1.isNil(updatedCopySet.plLastTransitionId)) {
                mainAction.payload.copySet.transitions.transitionsById[updatedCopySet.plLastTransitionId].targetMediaStateId =
                    nextMediaStateId;
            }
            if (!lodash_1.isNil(prevMediaStateId)) {
                var prevMediaState = selectors_1.dmGetMediaStateById(dmState, { id: prevMediaStateId });
                var transitionId = prevMediaState.eventList[0].defaultTransition.id;
                batchedActions.push(actionTransition_1.dmUpdateTransition({
                    id: transitionId,
                    targetMediaStateId: updatedCopySet.plStartingMediaStateId,
                }));
                var eventId = prevMediaState.eventList[0].id;
                var eventState = selectors_1.dmGetEventStateById(dmState, { id: eventId });
                if (eventState.disabled) {
                    var eventParams = {
                        id: eventId,
                        disabled: false,
                    };
                    batchedActions.push(actionEvent_1.dmUpdateEvent(eventParams));
                }
            }
            var initialMediaStateId = selectors_1.dmGetInitialMediaStateIdForZone(dmState, { id: container.id });
            if (!utils_1.isValidBsDmId(initialMediaStateId)) {
                var newInitialMediaStateId = utils_1.isValidBsDmId(updatedCopySet.csInitialMediaStateId) ?
                    updatedCopySet.csInitialMediaStateId : Object.keys(updatedCopySet.mediaStates.mediaStatesById)[0];
                batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest({ id: container.id, initialMediaStateId: newInitialMediaStateId }));
            }
            dispatch(actionBase_1.dmBatchActions(batchedActions));
            return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'PlaylistPasteMediaStateCopySet - copySet must be from a nonInteractive playlist');
        }
    };
}
exports.dmPlaylistPasteMediaStateCopySet = dmPlaylistPasteMediaStateCopySet;
function dmChangeInteractiveZoneToNonInteractive(zoneId) {
    return function (dispatch, getState) {
        var dmState = bsDmState_1.dmFilterDmState(getState());
        var mainAction = {
            type: exports.CHANGE_TO_NON_INTERACTIVE,
            payload: { zoneId: zoneId },
        };
        var zoneState = selectors_1.dmGetZoneStateById(dmState, { id: zoneId });
        var batchedActions = [];
        if (!lodash_1.isNil(zoneState)) {
            if (!zoneState.nonInteractive) {
                var zoneUpdateParams = {
                    id: zoneId,
                    nonInteractive: true,
                };
                var mediaStateIds = selectors_1.dmGetZoneSimplePlaylist(dmState, { id: zoneId });
                if (!lodash_1.isNil(mediaStateIds)) {
                    mediaStateIds.forEach(function (id) {
                        var mediaState = selectors_1.dmGetMediaStateStateById(dmState, { id: id });
                        var contentItem = enforceContentItemDataPlaylistRequirements(mediaState.contentItem);
                        if (contentItem !== mediaState.contentItem) {
                            batchedActions.push(actionMediaState_1.dmUpdateMediaStateContentItem(id, contentItem));
                        }
                    });
                }
                else {
                    mediaStateIds = selectors_1.dmGetMediaStateIdsForZone(dmState, { id: zoneId });
                    var mediaStateDeleteParams = actionMediaState_1.dmGetMediaStateDeleteParams(dmState, mediaStateIds);
                    batchedActions.push(actionMediaState_1.dmDeleteMediaStateWithParams(mediaStateDeleteParams));
                    zoneUpdateParams.initialMediaStateId = bsDmInterfaces_1.BsDmIdNone;
                }
                batchedActions.push(actionZone_1.dmUpdateZoneWithoutTest(zoneUpdateParams));
                dispatch(actionBase_1.dmBatchActions(batchedActions));
            }
        }
        else {
            throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'ChangeInteractiveZoneToNonInteractive - invalid zone ID', { action: mainAction });
        }
        mainAction.meta = { dispatchList: batchedActions };
        return mainAction;
    };
}
exports.dmChangeInteractiveZoneToNonInteractive = dmChangeInteractiveZoneToNonInteractive;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmNewSignFromTemplateSpecification = exports.NEW_SIGN_FROM_TEMPLATE = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmTemplate_1 = __webpack_require__(72);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmParameterizedStrings_1 = __webpack_require__(16);
var actionBase_1 = __webpack_require__(8);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionHtmlSite_1 = __webpack_require__(32);
var actionNodeApp_1 = __webpack_require__(45);
var actionMediaState_1 = __webpack_require__(11);
var actionEvent_1 = __webpack_require__(20);
var actionTransition_1 = __webpack_require__(25);
var actionAssetHelper_1 = __webpack_require__(13);
var actionAssetMap_1 = __webpack_require__(10);
var actionScriptPlugin_1 = __webpack_require__(46);
var actionLinkedPresentation_1 = __webpack_require__(53);
var actionThumbnail_1 = __webpack_require__(55);
var lodash_1 = __webpack_require__(0);
var bsDmError_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(3);
var bsDmZone_1 = __webpack_require__(31);
exports.NEW_SIGN_FROM_TEMPLATE = 'DM_NEW_SIGN_FROM_TEMPLATE';
function dmNewSignFromTemplateSpecification(spec, vars) {
    if (vars === void 0) { vars = {}; }
    var resolveStringVariable = function (value) {
        if (lodash_1.isNil(value)) {
            value = '';
        }
        if (value.length > 0 && value.charAt(0) === '@') {
            var key = value.substring(1);
            var mappedValue = vars[key];
            return lodash_1.isString(mappedValue) ? mappedValue : key;
        }
        return value;
    };
    var resolveAssetItemVariable = function (value) {
        if (!lodash_1.isNil(value)) {
            if (bscore_1.bscIsAssetItem(value)) {
                return value;
            }
            else if (lodash_1.isString(value) && value.length > 0 && value.charAt(0) === '@') {
                var key = value.substring(1);
                var assetItem = vars[key];
                return bscore_1.bscIsAssetItem(assetItem) ? assetItem : null;
            }
        }
        return null;
    };
    return function (dispatch) {
        var prepareAssetItem = function (assetItem) {
            if (!lodash_1.isNil(assetItem)) {
                var locator = bscore_1.bscGenerateAssetLocatorKey(assetItem);
                if (!locator) {
                    throw new bsDmError_1.BsDmError(bsDmError_1.DmErrorType.invalidParameters, 'dmNewSignFromTemplateSpecification: AssetItem does not contain valid locator information');
                }
                var preparedAssetItem = actionAssetHelper_1.dmGetFilteredAssetItem(assetItem);
                preparedAssetItem.locator = locator;
                var existingAssetId = assetIdMap.get(locator);
                if (lodash_1.isNil(existingAssetId)) {
                    preparedAssetItem.id = utils_1.newBsDmId();
                    assetIdMap.set(locator, preparedAssetItem.id);
                }
                else {
                    preparedAssetItem.id = existingAssetId;
                }
                return preparedAssetItem;
            }
            return null;
        };
        var getLayersForNewZone = function (type) {
            switch (type) {
                case bscore_1.ZoneType.Control:
                    return null;
                case bscore_1.ZoneType.Images:
                case bscore_1.ZoneType.Ticker:
                case bscore_1.ZoneType.Clock:
                    return { graphicsLayerId: zoneLayersByType.graphicsLayerId };
                case bscore_1.ZoneType.AudioOnly:
                    if (audioDecoderCount < maxAudioDecoders) {
                        return { audioLayerId: zoneLayersByType.audioLayerId };
                    }
                    break;
                case bscore_1.ZoneType.EnhancedAudio:
                    if (audioDecoderCount + 1 < maxAudioDecoders) {
                        return { audioLayerId: zoneLayersByType.audioLayerId };
                    }
                    break;
                case bscore_1.ZoneType.BackgroundImage:
                case bscore_1.ZoneType.VideoOnly:
                case bscore_1.ZoneType.VideoOrImages: {
                    var videoLayerId_1 = null;
                    [zoneLayersByType.videoLayer1Id, zoneLayersByType.videoLayer2Id].some(function (id) {
                        if (utils_1.isValidBsDmId(id)) {
                            var layer = zoneLayerMap[id];
                            if (layer.zoneSequence.length === 0) {
                                videoLayerId_1 = id;
                                return true;
                            }
                        }
                        return false;
                    });
                    if (!lodash_1.isNil(videoLayerId_1)) {
                        var zoneLayerIds = { videoLayerId: videoLayerId_1 };
                        if (type === bscore_1.ZoneType.VideoOrImages) {
                            zoneLayerIds.graphicsLayerId = zoneLayersByType.graphicsLayerId;
                        }
                        return zoneLayerIds;
                    }
                }
            }
            return null;
        };
        var checkAudioDisableForZone = function (type) {
            switch (type) {
                case bscore_1.ZoneType.AudioOnly:
                    audioDecoderCount += 1;
                    break;
                case bscore_1.ZoneType.EnhancedAudio:
                    audioDecoderCount += 2;
                    break;
                case bscore_1.ZoneType.VideoOnly:
                case bscore_1.ZoneType.VideoOrImages: {
                    if (audioDecoderCount < maxAudioDecoders) {
                        audioDecoderCount += 1;
                    }
                    else {
                        return true;
                    }
                    break;
                }
            }
            return false;
        };
        var signName = resolveStringVariable(spec.name);
        var videoMode = resolveStringVariable(spec.videoMode);
        var model = resolveStringVariable(spec.model);
        var videoConnector = resolveStringVariable(spec.videoConnector);
        var monitorOrientation = resolveStringVariable(spec.monitorOrientation);
        var fullResGraphicsEnabled = !lodash_1.isNil(spec.fullResGraphicsEnabled)
            && spec.fullResGraphicsEnabled && bscore_1.bscIsFullResGraphicsSupported(model, videoMode);
        var mainAction = {
            type: exports.NEW_SIGN_FROM_TEMPLATE,
            payload: {
                id: bsDmInterfaces_1.BsDmIdNone,
                name: signName,
                videoMode: videoMode,
                model: model,
                videoConnector: videoConnector,
                monitorOrientation: monitorOrientation,
            },
        };
        var batchedActions = [];
        var newSignAction = actionSign_1.dmNewSign(signName, videoMode, model);
        newSignAction.payload.signMetadata.properties.videoConnector = videoConnector;
        newSignAction.payload.signMetadata.properties.monitorOrientation = monitorOrientation;
        mainAction.payload.id = newSignAction.payload.signMetadata.properties.id;
        var zoneLayerMap = newSignAction.payload.zoneLayerMap;
        var zoneLayersByType = bsDmZone_1.dmGetZoneLayerIdsByType(zoneLayerMap);
        var assetIdMap = new Map();
        var htmlSiteIdMap = new Map();
        var linkedPresentationIdMap = new Map();
        var scriptPluginIdMap = new Map();
        var maxAudioDecoders = bscore_1.bscGetPlayerCapabilities(model).audioDecoderCount;
        var audioDecoderCount = 0;
        if (!lodash_1.isNil(spec.deviceWebPageDisplay) && spec.deviceWebPageDisplay !== bscore_1.DeviceWebPageDisplay.Custom) {
            newSignAction.payload.signMetadata.properties.deviceWebPageDisplay = spec.deviceWebPageDisplay;
        }
        newSignAction.payload.signMetadata.properties.forceResolution = fullResGraphicsEnabled;
        newSignAction.payload.signMetadata.properties.fullResGraphicsEnabled = fullResGraphicsEnabled;
        batchedActions.push(newSignAction);
        if (!lodash_1.isNil(spec.htmlSites)) {
            spec.htmlSites.forEach(function (htmlSiteSpec) {
                var htmlSiteAction = null;
                var siteName = resolveStringVariable(htmlSiteSpec.name);
                var queryString = lodash_1.isNil(htmlSiteSpec.queryString) ? '' : resolveStringVariable(htmlSiteSpec.queryString);
                if (bsDmTemplate_1.dmIsRemoteHtmlSiteTemplate(htmlSiteSpec)) {
                    htmlSiteAction = actionHtmlSite_1.dmAddRemoteHtmlSite(siteName, resolveStringVariable(htmlSiteSpec.url), queryString);
                }
                else if (bsDmTemplate_1.dmIsHostedHtmlSiteTemplate(htmlSiteSpec)) {
                    var assetItem = prepareAssetItem(resolveAssetItemVariable(htmlSiteSpec.indexAssetItem));
                    var assetItemId = bscore_1.BsAssetIdNone;
                    if (!lodash_1.isNil(assetItem)) {
                        batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                        assetItemId = assetItem.id;
                    }
                    htmlSiteAction = actionHtmlSite_1.dmAddHostedHtmlSiteWithoutAssetProcessing(siteName, assetItemId, queryString, htmlSiteSpec.enableNode);
                }
                if (!lodash_1.isNil(htmlSiteAction)) {
                    htmlSiteIdMap.set(siteName, htmlSiteAction.payload.id);
                    batchedActions.push(htmlSiteAction);
                }
            });
        }
        if (!lodash_1.isNil(spec.nodeApps)) {
            spec.nodeApps.forEach(function (nodeAppSpec) {
                var nodeAppAction = null;
                var nodeAppName = resolveStringVariable(nodeAppSpec.name);
                var assetItem = prepareAssetItem(resolveAssetItemVariable(nodeAppSpec.indexAssetItem));
                var assetItemId = bscore_1.BsAssetIdNone;
                if (!lodash_1.isNil(assetItem)) {
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    assetItemId = assetItem.id;
                }
                nodeAppAction = actionNodeApp_1.dmAddNodeAppWithoutAssetProcessing(nodeAppName, assetItemId);
                batchedActions.push(nodeAppAction);
            });
        }
        if (!lodash_1.isNil(spec.linkedPresentations)) {
            spec.linkedPresentations.forEach(function (lpSpec) {
                var assetItem = prepareAssetItem(resolveAssetItemVariable(lpSpec.assetItem));
                var assetItemId = bscore_1.BsAssetIdNone;
                if (!lodash_1.isNil(assetItem)) {
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    assetItemId = assetItem.id;
                }
                var lpAction = actionLinkedPresentation_1.dmGetPutLinkedPresentationAction(lpSpec.name, assetItemId);
                linkedPresentationIdMap.set(lpSpec.name, assetItemId);
                batchedActions.push(lpAction);
            });
        }
        if (!lodash_1.isNil(spec.scriptPlugins)) {
            spec.scriptPlugins.forEach(function (plgSpec) {
                var assetItem = prepareAssetItem(resolveAssetItemVariable(plgSpec.assetItem));
                var assetItemId = bscore_1.BsAssetIdNone;
                if (!lodash_1.isNil(assetItem)) {
                    batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                    assetItemId = assetItem.id;
                }
                var plgAction = actionScriptPlugin_1.dmGetPutBrightScriptPluginAction(plgSpec.name, assetItemId);
                scriptPluginIdMap.set(plgSpec.name, assetItemId);
                batchedActions.push(plgAction);
            });
        }
        spec.zones.forEach(function (zoneSpec) {
            var zoneLayers = getLayersForNewZone(zoneSpec.type);
            if (!lodash_1.isNil(zoneLayers)) {
                var zoneName = resolveStringVariable(zoneSpec.name);
                var graphicsResolution = bscore_1.bscGetGraphicsResolution(videoMode, fullResGraphicsEnabled);
                var position = bscore_1.bscGetAbsoluteRectForWidthAndHeight(zoneSpec.position, graphicsResolution);
                var audioDisable = checkAudioDisableForZone(zoneSpec.type);
                var zoneAction = actionZone_1.dmGetAddZoneAction(model, zoneName, zoneSpec.type, zoneSpec.tag, zoneLayers, zoneLayerMap, zoneSpec.nonInteractive, position, audioDisable);
                var zoneId_1 = zoneAction.payload.id;
                zoneLayerMap = zoneAction.payload.zoneLayerMap;
                var zoneContainer_1 = bsDmContentItems_1.dmGetZoneMediaStateContainer(zoneId_1);
                batchedActions.push(zoneAction);
                var contentCount_1 = 0;
                var firstMediaStateAction_1 = null;
                var firstEventAction_1 = null;
                var lastTransitionAction_1 = null;
                zoneSpec.contents.forEach(function (contentItemSpec) {
                    var contentItem = null;
                    var name = resolveStringVariable(contentItemSpec.name);
                    var contentData = lodash_1.isNil(contentItemSpec.data) ? {} : contentItemSpec.data;
                    var eventType = bscore_1.EventType.Timer;
                    var eventData = { interval: (zoneSpec.contents.length > 1 ? 5 : 0) };
                    if (bsDmContentItems_1.MediaContentItemTypeSet.has(contentItemSpec.type)) {
                        if (!lodash_1.isNil(contentItemSpec.assetItem)) {
                            var assetItem = prepareAssetItem(resolveAssetItemVariable(contentItemSpec.assetItem));
                            if (!lodash_1.isNil(assetItem)) {
                                batchedActions.push(actionAssetMap_1.dmPutAssetItem(assetItem));
                                var mediaContentData = contentData;
                                contentItem =
                                    bsDmContentItems_1.dmCreateMediaContentItem(name, assetItem.id, assetItem.mediaType, mediaContentData.props);
                                if (contentItem.type === bscore_1.ContentItemType.Video || contentItem.type === bscore_1.ContentItemType.Audio) {
                                    eventType = bscore_1.EventType.MediaEnd;
                                    eventData = null;
                                }
                            }
                        }
                    }
                    else if (contentItemSpec.type === bscore_1.ContentItemType.Html) {
                        var htmlContentData = contentData;
                        var siteId = htmlSiteIdMap.get(resolveStringVariable(htmlContentData.htmlSiteName));
                        if (!lodash_1.isNil(siteId)) {
                            contentItem = bsDmContentItems_1.dmCreateHtmlContentItem(name, siteId, htmlContentData.props);
                        }
                    }
                    else if (contentItemSpec.type === bscore_1.ContentItemType.VideoStream) {
                        var streamData = contentData;
                        var url = bsDmParameterizedStrings_1.dmGetPlaceholderParameterizedStringFromDisplayString(resolveStringVariable(streamData.url));
                        contentItem = bsDmContentItems_1.dmCreateVideoStreamContentItem(name, url, streamData.props);
                    }
                    else if (contentItemSpec.type === bscore_1.ContentItemType.LiveVideo) {
                        var videoInData = contentData;
                        contentItem = bsDmContentItems_1.dmCreateLiveVideoContentItem(name, videoInData.props);
                    }
                    if (!lodash_1.isNil(contentItem)) {
                        contentCount_1 += 1;
                        var mediaStateAction = actionMediaState_1.dmAddMediaStateWithContentItem(contentItem.name, zoneContainer_1, contentItem, zoneId_1, contentCount_1.toString());
                        batchedActions.push(mediaStateAction);
                        if (zoneSpec.nonInteractive) {
                            var eventAction = actionEvent_1.dmAddEvent(name + '_ev', eventType, mediaStateAction.payload.id, eventData);
                            batchedActions.push(eventAction);
                            if (contentCount_1 === 1) {
                                firstMediaStateAction_1 = mediaStateAction;
                                firstEventAction_1 = eventAction;
                            }
                            if (!lodash_1.isNil(lastTransitionAction_1)) {
                                lastTransitionAction_1.payload.targetMediaStateId = mediaStateAction.payload.id;
                            }
                            lastTransitionAction_1 = actionTransition_1.dmAddTransition(name + '_tr', eventAction.payload.id, bsDmInterfaces_1.BsDmIdNone);
                            batchedActions.push(lastTransitionAction_1);
                        }
                    }
                });
                if (!lodash_1.isNil(firstMediaStateAction_1) && !lodash_1.isNil(lastTransitionAction_1)) {
                    lastTransitionAction_1.payload.targetMediaStateId = firstMediaStateAction_1.payload.id;
                }
                if (!lodash_1.isNil(firstEventAction_1) && contentCount_1 === 1) {
                    firstEventAction_1.payload.disabled = true;
                }
            }
        });
        if (!lodash_1.isNil(spec.thumbnail)) {
            batchedActions.push(actionThumbnail_1.dmSetThumbnail(spec.thumbnail));
        }
        dispatch(actionBase_1.dmBatchActions(batchedActions));
        return __assign(__assign({}, mainAction), { meta: { dispatchList: batchedActions } });
    };
}
exports.dmNewSignFromTemplateSpecification = dmNewSignFromTemplateSpecification;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmUpdateSignStateForVersionChanges = exports.dmUpdateIncorrectSerialParityValues = exports.dmUpdateInvalidBsDmIdInstances = exports.dmUpdatePluginMessageEventReferences = exports.updateRemoteEventData = exports.dmUpdateIrRemoteProperties = exports.dmUpdateMediaStateTagSupport = exports.dmUpdateZoneCollectionState = exports.dmUpdateSignSerialPortConfiguration = exports.dmUpdateSignAudioSignProperties = exports.dmUpdateSignProperties = exports.dmUpdateMediaStateCollectionState = exports.dmUpdateAuxiliaryFiles = exports.dmUpdateEventProperties = exports.dmCreateZoneLayerMapForZoneState = exports.dmUpdatePriorVersionZone = void 0;
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmZone_1 = __webpack_require__(31);
var bsDmContentItems_1 = __webpack_require__(9);
var bsDmDefaults_1 = __webpack_require__(19);
var selectors_1 = __webpack_require__(6);
var bsDmSign_1 = __webpack_require__(57);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
function dmUpdatePriorVersionZone(zone) {
    if (!lodash_1.isNil(zone) && !lodash_1.isNil(zone.properties)) {
        var updatedProperties = zone.properties;
        if (!lodash_1.isNil(updatedProperties.audioOutputAssignments)) {
            var audioOutputAssignments = __assign({}, updatedProperties.audioOutputAssignments);
            if (lodash_1.isNil(audioOutputAssignments.usbTypeA)) {
                audioOutputAssignments.usbTypeA = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usbTypeC = bscore_1.AudioOutputType.None;
            }
            if (lodash_1.isNil(audioOutputAssignments.usb700_1)) {
                audioOutputAssignments.usb700_1 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_2 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_3 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_4 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_5 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_6 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb700_7 = bscore_1.AudioOutputType.None;
            }
            if (lodash_1.isNil(audioOutputAssignments.usb_1)) {
                audioOutputAssignments.usb_1 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb_2 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb_3 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb_4 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb_5 = bscore_1.AudioOutputType.None;
                audioOutputAssignments.usb_6 = bscore_1.AudioOutputType.None;
                updatedProperties = __assign(__assign({}, updatedProperties), { audioOutputAssignments: audioOutputAssignments });
            }
        }
        if (bsDmZone_1.dmIsPlayableVideoZoneType(zone.type) && updatedProperties.hasOwnProperty('liveVideoInput')) {
            updatedProperties = lodash_1.omit(updatedProperties, [
                'liveVideoInput', 'liveVideoStandard', 'brightness', 'contrast', 'saturation', 'hue',
                'zOrderFront', 'mosaic',
            ]);
        }
        if (updatedProperties !== zone.properties) {
            return __assign(__assign({}, zone), { properties: updatedProperties });
        }
    }
    return zone;
}
exports.dmUpdatePriorVersionZone = dmUpdatePriorVersionZone;
function dmCreateZoneLayerMapForZoneState(zones, playerModel, videoMode) {
    var layerMap = bsDmZone_1.dmCreateDefaultSignZoneLayerMap(playerModel, videoMode);
    var layerIds = bsDmZone_1.dmGetZoneLayerIdsByType(layerMap);
    Object.keys(zones).forEach(function (zoneId) {
        var zone = zones[zoneId];
        switch (zone.type) {
            case bscore_1.ZoneType.VideoOrImages:
                layerMap[layerIds.graphicsLayerId].zoneSequence.push(zoneId);
            case bscore_1.ZoneType.VideoOnly:
            case bscore_1.ZoneType.BackgroundImage: {
                var zOrderFront = zone['zOrderFront'];
                var index = !lodash_1.isNil(zOrderFront) && zOrderFront ? 1 : 0;
                if (index === 1 && layerIds.videoLayer2Id !== bsDmInterfaces_1.BsDmIdNone) {
                    layerMap[layerIds.videoLayer2Id].zoneSequence.push(zoneId);
                }
                else {
                    layerMap[layerIds.videoLayer1Id].zoneSequence.push(zoneId);
                }
                break;
            }
            case bscore_1.ZoneType.Images:
            case bscore_1.ZoneType.Clock:
            case bscore_1.ZoneType.Ticker:
                layerMap[layerIds.graphicsLayerId].zoneSequence.push(zoneId);
                break;
            case bscore_1.ZoneType.AudioOnly:
            case bscore_1.ZoneType.EnhancedAudio:
                layerMap[layerIds.audioLayerId].zoneSequence.push(zoneId);
                break;
            case bscore_1.ZoneType.Control:
                break;
        }
    });
    return layerMap;
}
exports.dmCreateZoneLayerMapForZoneState = dmCreateZoneLayerMapForZoneState;
function dmUpdateEventProperties(state) {
    Object.keys(state.events).forEach(function (eventId) {
        var event = state.events[eventId];
        if (!event.hasOwnProperty('disabled')) {
            state.events[eventId] = __assign(__assign({}, event), { disabled: false });
        }
    });
}
exports.dmUpdateEventProperties = dmUpdateEventProperties;
function dmUpdateAuxiliaryFiles(state) {
    if (lodash_1.isNil(state.auxiliaryFiles) || lodash_1.isArray(state.auxiliaryFiles)) {
        state.auxiliaryFiles = {};
    }
}
exports.dmUpdateAuxiliaryFiles = dmUpdateAuxiliaryFiles;
function dmUpdateMediaStateCollectionState(state) {
    var updatePriorVersionMediaStateState = function (mediaState) {
        if (mediaState.contentItem.type === bscore_1.ContentItemType.Image) {
            var imageContentItem = __assign({}, mediaState.contentItem);
            var changed = false;
            if (lodash_1.isNil(imageContentItem.defaultTransition)) {
                imageContentItem.defaultTransition = bscore_1.TransitionType.NoEffect;
                changed = true;
            }
            if (lodash_1.isNil(imageContentItem.transitionDuration)) {
                imageContentItem.transitionDuration = 1;
                changed = true;
            }
            if (changed) {
                return __assign(__assign({}, mediaState), { contentItem: imageContentItem });
            }
        }
        return mediaState;
    };
    var updateMediaStates = function (mediaStateMap) {
        return Object.keys(mediaStateMap).reduce(function (newMap, id) {
            newMap[id] = updatePriorVersionMediaStateState(mediaStateMap[id]);
            return newMap;
        }, {});
    };
    if (lodash_1.isNil(state.mediaStates.mediaStatesById)) {
        state.mediaStates = {
            mediaStatesById: updateMediaStates(state.mediaStates),
            sequencesByParentId: {},
        };
    }
    else {
        state.mediaStates.mediaStatesById = updateMediaStates(state.mediaStates.mediaStatesById);
    }
}
exports.dmUpdateMediaStateCollectionState = dmUpdateMediaStateCollectionState;
function dmUpdateSignProperties(state) {
    var defaultProps = bsDmDefaults_1.dmGetDefaultSignPropertyData();
    var newSignProperties = state.sign.properties;
    if (!newSignProperties.hasOwnProperty('dolbyVisionEnabled')) {
        newSignProperties.dolbyVisionEnabled = defaultProps.dolbyVisionEnabled;
    }
    if (!newSignProperties.hasOwnProperty('fullResGraphicsEnabled')) {
        newSignProperties.fullResGraphicsEnabled = defaultProps.fullResGraphicsEnabled;
    }
    if (!newSignProperties.hasOwnProperty('audioConfiguration')) {
        newSignProperties.audioConfiguration = defaultProps.audioConfiguration;
    }
    if (!newSignProperties.hasOwnProperty('audioAutoLevel')) {
        newSignProperties.audioAutoLevel = defaultProps.audioAutoLevel;
    }
    if (!newSignProperties.hasOwnProperty('enableEnhancedSynchronization')) {
        newSignProperties.enableEnhancedSynchronization = null;
    }
}
exports.dmUpdateSignProperties = dmUpdateSignProperties;
function dmUpdateSignAudioSignProperties(state) {
    var newAudioSignPropertyMap = state.sign.audioSignPropertyMap;
    if (!newAudioSignPropertyMap.hasOwnProperty('usbTypeA')) {
        newAudioSignPropertyMap.usbTypeA = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usbTypeC = bsDmDefaults_1.initialAudioSignPropertyDefaults;
    }
    if (!newAudioSignPropertyMap.hasOwnProperty('usb700_1')) {
        newAudioSignPropertyMap.usb700_1 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_2 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_3 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_4 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_5 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_6 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb700_7 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
    }
    if (!newAudioSignPropertyMap.hasOwnProperty('usb_1')) {
        newAudioSignPropertyMap.usb_1 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb_2 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb_3 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb_4 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb_5 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
        newAudioSignPropertyMap.usb_6 = bsDmDefaults_1.initialAudioSignPropertyDefaults;
    }
}
exports.dmUpdateSignAudioSignProperties = dmUpdateSignAudioSignProperties;
function dmUpdateSignSerialPortConfiguration(state) {
    var newSerialPortList = state.sign.serialPortConfigurations;
    newSerialPortList.forEach(function (serialPortConfig) {
        if (typeof serialPortConfig.port === 'number') {
            serialPortConfig.port = serialPortConfig.port.toString();
        }
    });
}
exports.dmUpdateSignSerialPortConfiguration = dmUpdateSignSerialPortConfiguration;
function dmUpdateZoneCollectionState(state) {
    var zonesById = state.zones.zonesById;
    state.zones.zonesById = Object.keys(zonesById).reduce(function (newMap, id) {
        newMap[id] = dmUpdatePriorVersionZone(zonesById[id]);
        return newMap;
    }, {});
    if (lodash_1.isNil(state.zones.zoneLayersById)) {
        state.zones.zoneLayersById = dmCreateZoneLayerMapForZoneState(state.zones.zonesById, state.sign.properties.model, state.sign.properties.videoMode);
        state.zones.zoneLayerSequence = bsDmZone_1.dmCreateDefaultSignZoneLayerSequence(state.zones.zoneLayersById);
    }
}
exports.dmUpdateZoneCollectionState = dmUpdateZoneCollectionState;
function dmUpdateMediaStateTagSupport(state) {
    if (lodash_1.isNil(state.zones.zoneTagIndices)) {
        var newZoneTagIndices_1 = {};
        state.zones.allZones.forEach(function (zoneId) { return newZoneTagIndices_1[zoneId] = 1; });
        Object.keys(state.mediaStates.mediaStatesById).forEach(function (id) {
            var mediaStateState = state.mediaStates.mediaStatesById[id];
            if (bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaStateState.contentItem)) {
                mediaStateState.tag = '';
            }
            else {
                var containingZoneId = selectors_1.dmGetZoneIdForMediaStateId(state, { id: id });
                if (!lodash_1.isNil(containingZoneId)) {
                    var nextTagValue = newZoneTagIndices_1[containingZoneId];
                    mediaStateState.tag = nextTagValue.toString();
                    newZoneTagIndices_1[containingZoneId] = nextTagValue + 1;
                }
                else {
                    mediaStateState.tag = '';
                }
            }
        });
        state.zones.zoneTagIndices = newZoneTagIndices_1;
    }
}
exports.dmUpdateMediaStateTagSupport = dmUpdateMediaStateTagSupport;
function dmUpdateIrRemoteProperties(state) {
    if (lodash_1.isNil(state.sign.irRemote)) {
        var irRemote = bsDmSign_1.createDefaultIrRemote(state.sign.properties.model);
        var irInConfiguration = irRemote.irInConfiguration;
        var eventIds = selectors_1.dmGetEventIdsForSign(state);
        if (eventIds.length > 0) {
            irInConfiguration.source = bscore_1.IrReceiverSource.Iguana;
            for (var _i = 0, eventIds_1 = eventIds; _i < eventIds_1.length; _i++) {
                var eventId = eventIds_1[_i];
                var eventState = selectors_1.dmGetEventStateById(state, { id: eventId });
                if (eventState.type === bscore_1.EventType.Remote) {
                    eventState.data.data =
                        updateRemoteEventData(eventState.data.data);
                }
            }
        }
        state.sign.irRemote = irRemote;
    }
}
exports.dmUpdateIrRemoteProperties = dmUpdateIrRemoteProperties;
function updateRemoteEventData(legacyRemoteData) {
    switch (legacyRemoteData.toUpperCase()) {
        case 'WEST':
            return 'Left';
        case 'EAST':
            return 'Right';
        case 'NORTH':
            return 'Up';
        case 'SOUTH':
            return 'Down';
        case 'SEL':
            return 'Ok';
        case 'EXIT':
            return 'Back';
        case 'PWR':
            return 'Power';
        case 'MENU':
            return 'Home';
        case 'SEARCH':
            return 'Search';
        case 'PLAY':
            return 'Play';
        case 'FF':
            return 'Fast Forward';
        case 'RW':
            return 'Rewind';
        case 'PAUSE':
            return 'Pause';
        case 'ADD':
            return 'Add';
        case 'SHUFFLE':
            return 'Shuffle';
        case 'REPEAT':
            return 'Repeat';
        case 'VOLUP':
            return 'Volume Up';
        case 'VOLDWN':
            return 'Volume Down';
        case 'BRIGHT':
            return 'Brightness';
    }
    return '';
}
exports.updateRemoteEventData = updateRemoteEventData;
function dmUpdatePluginMessageEventReferences(state) {
    var eventIds = selectors_1.dmGetEventIdsForSign(state);
    if (eventIds.length > 0) {
        for (var _i = 0, eventIds_2 = eventIds; _i < eventIds_2.length; _i++) {
            var eventId = eventIds_2[_i];
            var eventState = selectors_1.dmGetEventStateById(state, { id: eventId });
            if (eventState.type === bscore_1.EventType.PluginMessage && eventState.data.hasOwnProperty('name')) {
                var pluginId = selectors_1.dmGetScriptPluginIdForName(state, { name: eventState.data.name });
                eventState.data.pluginId = lodash_1.isNil(pluginId) ? bsDmInterfaces_1.BsDmIdNone : pluginId;
                delete eventState.data.name;
            }
        }
    }
}
exports.dmUpdatePluginMessageEventReferences = dmUpdatePluginMessageEventReferences;
function dmUpdateInvalidBsDmIdInstances(state) {
    var transitionMap = lodash_1.isNil(state.transitions.transitionsById) ?
        state.transitions : state.transitions.transitionsById;
    Object.keys(transitionMap).forEach(function (id) {
        var transitionState = transitionMap[id];
        if (!utils_1.isValidBsDmIdValue(transitionState.targetMediaStateId)) {
            transitionState.targetMediaStateId = bsDmInterfaces_1.BsDmIdNone;
        }
    });
}
exports.dmUpdateInvalidBsDmIdInstances = dmUpdateInvalidBsDmIdInstances;
var parityValueMap = new Map([['none', bsDmInterfaces_1.SerialParity.None], ['even', bsDmInterfaces_1.SerialParity.Even], ['odd', bsDmInterfaces_1.SerialParity.Odd]]);
function dmUpdateIncorrectSerialParityValues(state) {
    var serialConfig = state.sign.serialPortConfigurations;
    serialConfig.forEach(function (config) {
        if (parityValueMap.has(config.parity)) {
            config.parity = parityValueMap.get(config.parity);
        }
    });
}
exports.dmUpdateIncorrectSerialParityValues = dmUpdateIncorrectSerialParityValues;
function dmUpdateSignStateForVersionChanges(state) {
    var updatedState = __assign({}, state);
    if (!utils_1.isValidBsDmId(updatedState.sign.properties.id)) {
        updatedState.sign.properties.id = utils_1.newBsDmId();
    }
    dmUpdateEventProperties(updatedState);
    dmUpdateAuxiliaryFiles(updatedState);
    dmUpdateMediaStateCollectionState(updatedState);
    dmUpdateSignProperties(updatedState);
    dmUpdateSignAudioSignProperties(updatedState);
    dmUpdateSignSerialPortConfiguration(updatedState);
    dmUpdateZoneCollectionState(updatedState);
    dmUpdateMediaStateTagSupport(updatedState);
    dmUpdateIrRemoteProperties(updatedState);
    dmUpdatePluginMessageEventReferences(updatedState);
    dmUpdateInvalidBsDmIdInstances(updatedState);
    dmUpdateIncorrectSerialParityValues(updatedState);
    return updatedState;
}
exports.dmUpdateSignStateForVersionChanges = dmUpdateSignStateForVersionChanges;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var actionAssetMap_1 = __webpack_require__(10);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionDataFeed_1 = __webpack_require__(21);
var actionUserVariable_1 = __webpack_require__(34);
var actionLiveText_1 = __webpack_require__(29);
var lodash_1 = __webpack_require__(0);
var assetsById = function (state, _a) {
    var _b, _c;
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.assetMap ? newState.assetMap : {};
        }
        case actionAssetMap_1.PUT_ASSET_ITEM: {
            var id = payload.id;
            var newItem = void 0;
            if (!lodash_1.isNil(state[id])) {
                newItem = __assign(__assign({}, state[id]), payload);
            }
            else {
                newItem = __assign({}, payload);
            }
            newItem.refCount = newItem.refCount ? newItem.refCount + 1 : 1;
            return __assign(__assign({}, state), (_b = {}, _b[id] = newItem, _b));
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS:
        case actionDataFeed_1.PASTE_DATA_FEEDS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet_1 = payload.copySet;
            if (Object.keys(copySet_1.assetMap).length > 0) {
                var updatedMap_1 = __assign({}, state);
                Object.keys(copySet_1.assetMap).forEach(function (id) {
                    var updatedItem;
                    if (!lodash_1.isNil(state[id])) {
                        var existingItem = state[id];
                        updatedItem = __assign(__assign({}, existingItem), { refCount: existingItem.refCount + copySet_1.assetMap[id].refCount });
                    }
                    else {
                        updatedItem = __assign({}, copySet_1.assetMap[id]);
                    }
                    updatedMap_1[id] = updatedItem;
                });
                return updatedMap_1;
            }
            break;
        }
        case actionAssetMap_1.REMOVE_ASSET_ITEMS:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE:
        case actionDataFeed_1.DELETE_DATA_FEED:
        case actionDataFeed_1.REMOVE_DATA_FEED_SOURCE:
        case actionUserVariable_1.DELETE_USER_VARIABLE:
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var assetIds = payload.assetIds;
            if (!lodash_1.isNil(assetIds) && assetIds.length) {
                var newState_1 = __assign({}, state);
                assetIds.forEach(function (id) {
                    if (!lodash_1.isNil(newState_1[id])) {
                        if (!lodash_1.isNil(newState_1[id].refCount) && newState_1[id].refCount > 1) {
                            newState_1[id] = __assign(__assign({}, newState_1[id]), { refCount: newState_1[id].refCount - 1 });
                        }
                        else {
                            delete newState_1[id];
                        }
                    }
                });
                return newState_1;
            }
            break;
        }
        case actionAssetMap_1.REMOVE_DUPLICATE_ASSET_ITEMS: {
            var assetIds = payload.assetIds;
            if (!lodash_1.isNil(assetIds) && assetIds.length) {
                return lodash_1.omit.apply(void 0, __spreadArrays([state], assetIds));
            }
            break;
        }
        case actionAssetMap_1.UPDATE_ASSET_ITEM: {
            var assetItem = payload.assetItem;
            return __assign(__assign({}, state), (_c = {}, _c[assetItem.id] = assetItem, _c));
        }
    }
    return state;
};
var assetMapReducer = assetsById;
exports.default = assetMapReducer;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidAuxiliaryFileState = void 0;
var actionAuxiliaryFile_1 = __webpack_require__(51);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var auxiliaryFiles = function (state, _a) {
    var _b, _c;
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.auxiliaryFiles;
        }
        case actionAuxiliaryFile_1.PUT_AUX_FILE: {
            var id = payload.id;
            return Object.assign({}, state, (_b = {}, _b[id] = payload, _b));
        }
        case actionAuxiliaryFile_1.UPDATE_AUX_FILE: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var updatedFile = Object.assign({}, state[id], payload);
                return Object.assign({}, state, (_c = {}, _c[id] = updatedFile, _c));
            }
            break;
        }
        case actionAuxiliaryFile_1.REMOVE_AUX_FILES: {
            var id = payload.id;
            return lodash_1.omit(state, id);
        }
    }
    return state;
};
var auxiliaryFilesReducer = auxiliaryFiles;
exports.default = auxiliaryFilesReducer;
var isValidAuxiliaryFileState = function (state) {
    return typeof state === 'object';
};
exports.isValidAuxiliaryFileState = isValidAuxiliaryFileState;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var lodash_1 = __webpack_require__(0);
var actionCommand_1 = __webpack_require__(33);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionEvent_1 = __webpack_require__(20);
var actionTransition_1 = __webpack_require__(25);
var actionLiveText_1 = __webpack_require__(29);
var actionDataFeed_1 = __webpack_require__(21);
var actionUserVariable_1 = __webpack_require__(34);
var utils_1 = __webpack_require__(3);
var commandsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.commands ? newState.commands.commandsById : {};
        }
        case actionCommand_1.ADD_COMMAND: {
            var command = payload.command;
            return __assign(__assign({}, state), (_a = {}, _a[command.id] = command, _a));
        }
        case actionCommand_1.UPDATE_COMMAND: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var payloadCopy = lodash_1.pick(payload, ['id', 'name', 'startTime']);
                if (payload.hasOwnProperty('operations')) {
                    payloadCopy.operations = lodash_1.cloneDeep(payload.operations);
                }
                var updatedCommand = __assign(__assign({}, state[id]), payloadCopy);
                return __assign(__assign({}, state), (_b = {}, _b[id] = updatedCommand, _b));
            }
            break;
        }
        case actionCommand_1.PASTE_COMMANDS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.commands.commandsById).length > 0) {
                return __assign(__assign({}, state), copySet.commands.commandsById);
            }
            break;
        }
        case actionCommand_1.DELETE_COMMAND:
        case actionZone_1.DELETE_ZONE:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionEvent_1.DELETE_EVENT:
        case actionTransition_1.DELETE_TRANSITION:
        case actionDataFeed_1.DELETE_DATA_FEED:
        case actionDataFeed_1.REMOVE_DATA_FEED_SOURCE:
        case actionUserVariable_1.DELETE_USER_VARIABLE:
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var commandIds = payload.commandIds;
            if (!lodash_1.isNil(commandIds) && commandIds.length) {
                return lodash_1.omit(state, commandIds);
            }
            break;
        }
    }
    return state;
};
var sequencesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.commands ? newState.commands.sequencesById : {};
        }
        case actionCommand_1.ADD_COMMAND: {
            var _c = payload, sequenceType = _c.sequenceType, parentId = _c.parentId, command = _c.command;
            var sequence = state[command.sequenceId];
            var newCommandSequence = sequence ? sequence.sequence.concat([command.id]) : [command.id];
            var newSequence = { id: command.sequenceId, type: sequenceType, parentId: parentId, sequence: newCommandSequence };
            return __assign(__assign({}, state), (_a = {}, _a[command.sequenceId] = newSequence, _a));
        }
        case actionCommand_1.MOVE_COMMAND: {
            var _d = payload, sequenceId = _d.sequenceId, indices = _d.indices, targetIndex = _d.targetIndex;
            var sequenceObject = state[sequenceId];
            if (!lodash_1.isNil(sequenceObject)) {
                var newSequence = utils_1.moveIdsInSequence(sequenceObject.sequence, indices, targetIndex);
                if (newSequence !== sequenceObject.sequence) {
                    var newSequenceObject = {
                        id: sequenceObject.id, type: sequenceObject.type, parentId: sequenceObject.parentId, sequence: newSequence
                    };
                    return __assign(__assign({}, state), (_b = {}, _b[sequenceId] = newSequenceObject, _b));
                }
            }
            break;
        }
        case actionCommand_1.PASTE_COMMANDS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.commands.sequencesById).length > 0) {
                return __assign(__assign({}, state), copySet.commands.sequencesById);
            }
            break;
        }
        case actionCommand_1.DELETE_COMMAND:
        case actionZone_1.DELETE_ZONE:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionEvent_1.DELETE_EVENT:
        case actionTransition_1.DELETE_TRANSITION:
        case actionDataFeed_1.DELETE_DATA_FEED:
        case actionDataFeed_1.REMOVE_DATA_FEED_SOURCE:
        case actionUserVariable_1.DELETE_USER_VARIABLE:
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var commandIds_1 = payload.commandIds;
            if (commandIds_1 && commandIds_1.length) {
                var newState_1 = {};
                Object.keys(state).forEach(function (sequenceId) {
                    var currentSequence = state[sequenceId];
                    var newCommandSequence = lodash_1.without.apply(void 0, __spreadArrays([currentSequence.sequence], commandIds_1));
                    if (newCommandSequence.length !== currentSequence.sequence.length) {
                        if (newCommandSequence.length > 0) {
                            newState_1[sequenceId] = __assign(__assign({}, currentSequence), { sequence: newCommandSequence });
                        }
                    }
                    else {
                        newState_1[sequenceId] = currentSequence;
                    }
                });
                return newState_1;
            }
            break;
        }
    }
    return state;
};
var commandReducer = redux_1.combineReducers({ commandsById: commandsById, sequencesById: sequencesById });
exports.default = commandReducer;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bscore_1 = __webpack_require__(1);
var actionSign_1 = __webpack_require__(7);
var actionCustomAutorun_1 = __webpack_require__(64);
var customAutorun = function (state, _a) {
    if (state === void 0) { state = bscore_1.BsAssetIdNone; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return bscore_1.BsAssetIdNone;
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.customAutorun ? newState.customAutorun : bscore_1.BsAssetIdNone;
        case actionCustomAutorun_1.SET_CUSTOM_AUTORUN:
            return payload;
    }
    return state;
};
var customAutorunReducer = customAutorun;
exports.default = customAutorunReducer;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidDataFeedState = void 0;
var redux_1 = __webpack_require__(30);
var lodash_1 = __webpack_require__(0);
var actionDataFeed_1 = __webpack_require__(21);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionUserVariable_1 = __webpack_require__(34);
var actionLiveText_1 = __webpack_require__(29);
var feedsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return !lodash_1.isNil(newState.dataFeeds) && !lodash_1.isNil(newState.dataFeeds.feedsById) ? newState.dataFeeds.feedsById : {};
        case actionDataFeed_1.ADD_DATA_FEED: {
            var _c = payload, id = _c.id, name_1 = _c.name, feedSourceId = _c.feedSourceId, usage = _c.usage, properties = _c.properties;
            var newFeed = __assign({ id: id, name: name_1, feedSourceId: feedSourceId, usage: usage }, properties);
            return __assign(__assign({}, state), (_a = {}, _a[id] = newFeed, _a));
        }
        case actionDataFeed_1.UPDATE_DATA_FEED: {
            var _d = payload, id = _d.id, properties = _d.properties;
            var updatedFeed = __assign(__assign(__assign({}, state[id]), lodash_1.pick(payload, ['name', 'feedSourceId', 'usage'])), properties);
            return __assign(__assign({}, state), (_b = {}, _b[id] = updatedFeed, _b));
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS:
        case actionDataFeed_1.PASTE_DATA_FEEDS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.dataFeeds.feedsById).length > 0) {
                return __assign(__assign({}, state), copySet.dataFeeds.feedsById);
            }
            break;
        }
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE:
        case actionDataFeed_1.DELETE_DATA_FEED:
        case actionUserVariable_1.DELETE_USER_VARIABLE:
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var dataFeedsIds = payload.dataFeedIds;
            if (!lodash_1.isNil(dataFeedsIds) && dataFeedsIds.length) {
                return lodash_1.omit(state, dataFeedsIds);
            }
            break;
        }
    }
    return state;
};
var sourcesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.dataFeeds.sourcesById ? newState.dataFeeds.sourcesById : {};
        }
        case actionDataFeed_1.PUT_DATA_FEED_SOURCE: {
            var feedSource = payload;
            var id = feedSource.id, updateInterval = feedSource.updateInterval, useHeadRequest = feedSource.useHeadRequest;
            var existingFeedSource = state[id];
            var newFeedSource = void 0;
            if (!lodash_1.isNil(existingFeedSource)) {
                newFeedSource = __assign(__assign({}, existingFeedSource), { updateInterval: updateInterval, useHeadRequest: useHeadRequest });
                newFeedSource.refCount = existingFeedSource.refCount + 1;
            }
            else {
                newFeedSource = __assign({}, feedSource);
                newFeedSource.refCount = 1;
            }
            return __assign(__assign({}, state), (_a = {}, _a[id] = newFeedSource, _a));
        }
        case actionDataFeed_1.UPDATE_DATA_FEED_SOURCE: {
            var feedSource = payload;
            var id = feedSource.id;
            if (!lodash_1.isNil(id)) {
                var existingFeedSource = state[id];
                if (!lodash_1.isNil(existingFeedSource)) {
                    var newFeedSource = __assign(__assign({}, existingFeedSource), feedSource);
                    return __assign(__assign({}, state), (_b = {}, _b[id] = newFeedSource, _b));
                }
            }
            break;
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS:
        case actionDataFeed_1.PASTE_DATA_FEEDS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet_1 = payload.copySet;
            if (Object.keys(copySet_1.dataFeeds.sourcesById).length > 0) {
                var updatedSourceMap_1 = __assign({}, state);
                Object.keys(copySet_1.dataFeeds.sourcesById).forEach(function (id) {
                    var updatedFeedSource;
                    if (!lodash_1.isNil(state[id])) {
                        var existingSource = state[id];
                        updatedFeedSource = __assign(__assign({}, existingSource), { refCount: existingSource.refCount + copySet_1.dataFeeds.sourcesById[id].refCount });
                    }
                    else {
                        updatedFeedSource = __assign({}, copySet_1.dataFeeds.sourcesById[id]);
                    }
                    updatedSourceMap_1[id] = updatedFeedSource;
                });
                return updatedSourceMap_1;
            }
            break;
        }
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE:
        case actionDataFeed_1.DELETE_DATA_FEED:
        case actionDataFeed_1.REMOVE_DATA_FEED_SOURCE:
        case actionUserVariable_1.DELETE_USER_VARIABLE:
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var dataFeedSourceIds = payload.dataFeedSourceIds;
            if (!lodash_1.isNil(dataFeedSourceIds) && dataFeedSourceIds.length) {
                var newState_1 = __assign({}, state);
                dataFeedSourceIds.forEach(function (id) {
                    if (!lodash_1.isNil(newState_1[id]) && !lodash_1.isNil(newState_1[id].refCount) && newState_1[id].refCount > 1) {
                        newState_1[id] = __assign(__assign({}, newState_1[id]), { refCount: newState_1[id].refCount - 1 });
                    }
                    else {
                        delete newState_1[id];
                    }
                });
                return newState_1;
            }
            break;
        }
    }
    return state;
};
var dataFeedReducer = redux_1.combineReducers({ feedsById: feedsById, sourcesById: sourcesById });
exports.default = dataFeedReducer;
var isValidDataFeedState = function (state) {
    if (typeof state === 'object') {
        return (state.hasOwnProperty('feedsById') && state.hasOwnProperty('sourcesById'))
            || Object.keys(state).length === 0;
    }
    return false;
};
exports.isValidDataFeedState = isValidDataFeedState;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidDeviceWebPageState = void 0;
var actionDeviceWebPage_1 = __webpack_require__(52);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var getDeviceWebPageParams = function (payload) {
    var id = payload.id, name = payload.name, indexAssetId = payload.indexAssetId, port = payload.port;
    return { id: id, name: name, indexAssetId: indexAssetId, port: port };
};
var getUpdateDeviceWebPageParams = function (payload) {
    return lodash_1.pick(payload, ['name', 'indexAssetId', 'port']);
};
var deviceWebPagesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.deviceWebPages ? newState.deviceWebPages : {};
        case actionDeviceWebPage_1.ADD_DEVICE_WEB_PAGE: {
            var id = payload.id;
            return Object.assign({}, state, (_a = {}, _a[id] = getDeviceWebPageParams(payload), _a));
        }
        case actionDeviceWebPage_1.UPDATE_DEVICE_WEB_PAGE: {
            var id = payload.id;
            var updatedDeviceWebPage = Object.assign({}, state[id], getUpdateDeviceWebPageParams(payload));
            return Object.assign({}, state, (_b = {}, _b[id] = updatedDeviceWebPage, _b));
        }
        case actionDeviceWebPage_1.DELETE_DEVICE_WEB_PAGE:
            return lodash_1.omit(state, payload.id);
    }
    return state;
};
var deviceWebPageReducer = deviceWebPagesById;
exports.default = deviceWebPageReducer;
var isValidDeviceWebPageState = function (state) {
    return typeof state === 'object';
};
exports.isValidDeviceWebPageState = isValidDeviceWebPageState;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __webpack_require__(0);
var bscore_1 = __webpack_require__(1);
var actionEvent_1 = __webpack_require__(20);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var createEventState = function (id, name, type, mediaStateId, disabled, data, intrinsicAction) {
    var eventState = {
        id: id,
        name: lodash_1.isNil(name) ? '' : name,
        type: type, mediaStateId: mediaStateId, disabled: disabled, data: data
    };
    if (!lodash_1.isNil(intrinsicAction)) {
        eventState.action = intrinsicAction;
    }
    return eventState;
};
var eventsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.events;
        }
        case actionEvent_1.ADD_EVENT: {
            var _c = payload, id = _c.id, name_1 = _c.name, eventType = _c.type, mediaStateId = _c.mediaStateId, disabled = _c.disabled, data = _c.data, intrinsicAction = _c.action;
            return __assign(__assign({}, state), (_a = {}, _a[id] = createEventState(id, name_1, eventType, mediaStateId, disabled, data, intrinsicAction), _a));
        }
        case actionEvent_1.ADD_MULTIPLE_EVENTS: {
            var events = payload.events;
            var newEvents = events.reduce(function (acc, event) {
                var _a;
                return (__assign(__assign({}, acc), (_a = {}, _a[event.id] = event, _a)));
            }, {});
            return __assign(__assign({}, state), newEvents);
        }
        case actionEvent_1.UPDATE_EVENT: {
            var id = payload.id;
            var updatedEvent = __assign(__assign({}, state[id]), payload);
            return __assign(__assign({}, state), (_b = {}, _b[id] = updatedEvent, _b));
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.events).length > 0) {
                return __assign(__assign({}, state), copySet.events);
            }
            break;
        }
        case actionEvent_1.DELETE_EVENT:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var eventIds = payload.eventIds;
            if (eventIds && eventIds.length) {
                return lodash_1.omit(state, eventIds);
            }
            break;
        }
        case actionSign_1.SCALE_RECTANGLES: {
            var _d = payload, increase_1 = _d.increase, scaleFactorX_1 = _d.scaleFactorX, scaleFactorY_1 = _d.scaleFactorY;
            var eventChanged_1 = false;
            var newEventMap = Object.keys(state).reduce(function (acc, id) {
                var eventState = state[id];
                if (eventState.type === bscore_1.EventType.RectangularTouch) {
                    var currentRegion = eventState.data.region;
                    if (!lodash_1.isNil(currentRegion)) {
                        var newRegion = bscore_1.bscScaleAbsoluteRect(currentRegion, increase_1, scaleFactorX_1, scaleFactorY_1);
                        if (newRegion !== currentRegion) {
                            acc[id] = __assign(__assign({}, eventState), { data: { region: newRegion } });
                            eventChanged_1 = true;
                            return acc;
                        }
                    }
                }
                acc[id] = eventState;
                return acc;
            }, {});
            if (eventChanged_1) {
                return newEventMap;
            }
            break;
        }
    }
    return state;
};
var eventReducer = eventsById;
exports.default = eventReducer;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidHtmlSiteState = void 0;
var bscore_1 = __webpack_require__(1);
var actionHtmlSite_1 = __webpack_require__(32);
var actionSign_1 = __webpack_require__(7);
var actionMediaState_1 = __webpack_require__(11);
var lodash_1 = __webpack_require__(0);
var filterHtmlSitePropsForType = function (params) {
    var type = params.type;
    if (!lodash_1.isNil(type)) {
        switch (type) {
            case bscore_1.HtmlSiteType.Hosted: {
                return lodash_1.pick(params, ['id', 'type', 'name', 'queryString', 'indexAssetId', 'enableNode']);
            }
            case bscore_1.HtmlSiteType.Remote: {
                return lodash_1.pick(params, ['id', 'type', 'name', 'queryString', 'url']);
            }
        }
    }
    return undefined;
};
var htmlSitesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.htmlSites ? newState.htmlSites : {};
        case actionHtmlSite_1.ADD_HTML_SITE: {
            var id = payload.id;
            var newSite = filterHtmlSitePropsForType(payload);
            if (newSite) {
                return __assign(__assign({}, state), (_a = {}, _a[id] = newSite, _a));
            }
            break;
        }
        case actionHtmlSite_1.UPDATE_HTML_SITE: {
            var id = payload.id;
            var htmlSite = state[id];
            if (htmlSite) {
                if (!payload.hasOwnProperty('type')) {
                    payload.type = htmlSite.type;
                }
                var updateParams = filterHtmlSitePropsForType(payload);
                if (updateParams) {
                    var updatedHtmlSite = updateParams.type === state[id].type ? __assign(__assign({}, state[id]), updateParams) : updateParams;
                    return __assign(__assign({}, state), (_b = {}, _b[id] = updatedHtmlSite, _b));
                }
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.htmlSites).length > 0) {
                return __assign(__assign({}, state), copySet.htmlSites);
            }
            break;
        }
        case actionHtmlSite_1.DELETE_HTML_SITE:
            return lodash_1.omit(state, payload.id);
    }
    return state;
};
var htmlSiteReducer = htmlSitesById;
exports.default = htmlSiteReducer;
var isValidHtmlSiteState = function (state) {
    return typeof state === 'object';
};
exports.isValidHtmlSiteState = isValidHtmlSiteState;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidLinkedPresentationState = void 0;
var actionLinkedPresentation_1 = __webpack_require__(53);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var linkedPresentations = function (state, _a) {
    var _b, _c;
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.linkedPresentations) ? {} : newState.linkedPresentations;
        }
        case actionLinkedPresentation_1.PUT_LINKED_PRESENTATION: {
            var id = payload.id;
            return Object.assign({}, state, (_b = {}, _b[id] = payload, _b));
        }
        case actionLinkedPresentation_1.UPDATE_LINKED_PRESENTATION: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var updatedFile = Object.assign({}, state[id], payload);
                return Object.assign({}, state, (_c = {}, _c[id] = updatedFile, _c));
            }
            break;
        }
        case actionLinkedPresentation_1.REMOVE_LINKED_PRESENTATION: {
            var id = payload.id;
            return lodash_1.omit(state, id);
        }
    }
    return state;
};
var linkedPresentationsReducer = linkedPresentations;
exports.default = linkedPresentationsReducer;
var isValidLinkedPresentationState = function (state) {
    return typeof state === 'object';
};
exports.isValidLinkedPresentationState = isValidLinkedPresentationState;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var bscore_1 = __webpack_require__(1);
var bsDmLiveText_1 = __webpack_require__(28);
var bsDmDefaults_1 = __webpack_require__(19);
var actionLiveText_1 = __webpack_require__(29);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var itemsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.liveText) || lodash_1.isNil(newState.liveText.itemsById) ? {} : newState.liveText.itemsById;
        }
        case actionLiveText_1.ADD_LIVE_TEXT_ITEM: {
            var _c = payload, id = _c.id, canvasId = _c.canvasId, position = _c.position, data = _c.data, textProperties = _c.textProperties;
            return __assign(__assign({}, state), (_a = {}, _a[id] = __assign(__assign({ id: id, canvasId: canvasId, position: position }, data), textProperties), _a));
        }
        case actionLiveText_1.UPDATE_LIVE_TEXT_ITEM: {
            var _d = payload, id = _d.id, position = _d.position, data = _d.data, textProperties = _d.textProperties;
            var currentItem = state[id];
            if (!lodash_1.isNil(currentItem)) {
                var itemBase = {
                    id: currentItem.id,
                    canvasId: currentItem.canvasId,
                    position: lodash_1.isNil(position) ? currentItem.position : lodash_1.cloneDeep(position),
                };
                var itemData = lodash_1.isNil(data) ? bsDmLiveText_1.dmGetLiveTextItemData(currentItem) : data;
                var updatedItem = void 0;
                if (bsDmLiveText_1.dmIsLiveTextDataTextContent(itemData)) {
                    var defaultProps = bsDmDefaults_1.initialLiveTextItemTextPropertyDefaults;
                    var itemTextProperties = {
                        widget: lodash_1.isNil(textProperties) || lodash_1.isNil(textProperties.widget) ?
                            (lodash_1.isNil(currentItem.widget) ? lodash_1.cloneDeep(defaultProps.widget) : currentItem.widget) :
                            lodash_1.cloneDeep(textProperties.widget),
                        textWidget: lodash_1.isNil(textProperties) || lodash_1.isNil(textProperties.textWidget) ?
                            (lodash_1.isNil(currentItem.textWidget) ? __assign({}, defaultProps.textWidget) : currentItem.textWidget) : __assign({}, textProperties.textWidget),
                        useBackgroundColor: lodash_1.isNil(textProperties) || lodash_1.isNil(textProperties.useBackgroundColor) ?
                            (lodash_1.isNil(currentItem.useBackgroundColor) ?
                                defaultProps.useBackgroundColor : currentItem.useBackgroundColor) :
                            textProperties.useBackgroundColor,
                    };
                    updatedItem = __assign(__assign(__assign({}, itemBase), itemData), itemTextProperties);
                }
                else {
                    updatedItem = __assign(__assign({}, itemBase), itemData);
                }
                return __assign(__assign({}, state), (_b = {}, _b[id] = updatedItem, _b));
            }
            break;
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.liveText.itemsById).length > 0) {
                return __assign(__assign({}, state), copySet.liveText.itemsById);
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var liveTextItemIds = payload.liveTextItemIds;
            if (!lodash_1.isNil(liveTextItemIds) && liveTextItemIds.length) {
                return lodash_1.omit(state, liveTextItemIds);
            }
            break;
        }
        case actionSign_1.SCALE_RECTANGLES: {
            var _e = payload, increase_1 = _e.increase, scaleFactorX_1 = _e.scaleFactorX, scaleFactorY_1 = _e.scaleFactorY;
            return Object.keys(state).reduce(function (acc, id) {
                acc[id] = __assign(__assign({}, state[id]), { position: bscore_1.bscScaleAbsoluteRect(state[id].position, increase_1, scaleFactorX_1, scaleFactorY_1) });
                return acc;
            }, {});
        }
    }
    return state;
};
var layersByCanvasId = function (state, action) {
    var _a, _b, _c;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.liveText) || lodash_1.isNil(newState.liveText.layersByCanvasId) ?
                {} : newState.liveText.layersByCanvasId;
        }
        case actionLiveText_1.ADD_LIVE_TEXT_ITEM: {
            var _d = payload, id = _d.id, canvasId = _d.canvasId, layerIndex = _d.layerIndex;
            var sequence = state[canvasId];
            if (lodash_1.isNil(sequence)) {
                sequence = [];
            }
            if (layerIndex < 0 || layerIndex > sequence.length) {
                sequence = __spreadArrays(sequence, [id]);
            }
            else {
                sequence = __spreadArrays(sequence.slice(0, layerIndex), [id], sequence.slice(layerIndex));
            }
            return __assign(__assign({}, state), (_a = {}, _a[canvasId] = sequence, _a));
        }
        case actionLiveText_1.UPDATE_LIVE_TEXT_ITEM: {
            var _e = payload, id = _e.id, canvasId = _e.canvasId, layerIndex = _e.layerIndex;
            if (!lodash_1.isNil(layerIndex)) {
                var newSequence = lodash_1.without(state[canvasId], id);
                var newIndex = layerIndex < 0 || layerIndex >= newSequence.length ? newSequence.length : layerIndex;
                newSequence = __spreadArrays(newSequence.slice(0, newIndex), [id], newSequence.slice(newIndex));
                return __assign(__assign({}, state), (_b = {}, _b[canvasId] = newSequence, _b));
            }
            break;
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS: {
            var copySet = payload.copySet;
            var newItemIds = Object.keys(copySet.liveText.itemsById);
            if (newItemIds.length > 0) {
                var canvasId = copySet.containerId;
                var newSequence = void 0;
                if (lodash_1.isNil(state[canvasId])) {
                    newSequence = newItemIds;
                }
                else {
                    newSequence = __spreadArrays(state[canvasId], newItemIds);
                }
                return __assign(__assign({}, state), (_c = {}, _c[canvasId] = newSequence, _c));
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.liveText.layersByCanvasId).length > 0) {
                return __assign(__assign({}, state), copySet.liveText.layersByCanvasId);
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var liveTextCanvasIds = payload.liveTextCanvasIds;
            if (!lodash_1.isNil(liveTextCanvasIds) && liveTextCanvasIds.length) {
                return lodash_1.omit(state, liveTextCanvasIds);
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM: {
            var liveTextItemIds_1 = payload.liveTextItemIds;
            var updatedState_1 = {};
            Object.keys(state).forEach(function (canvasId) {
                var currentSequence = state[canvasId];
                var newSequence = lodash_1.without.apply(void 0, __spreadArrays([currentSequence], liveTextItemIds_1));
                if (newSequence.length > 0) {
                    updatedState_1[canvasId] = newSequence.length !== currentSequence.length ? newSequence : currentSequence;
                }
            });
            return updatedState_1;
        }
    }
    return state;
};
var dataFeedsByGroupId = function (state, action) {
    var _a, _b, _c;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.liveText) || lodash_1.isNil(newState.liveText.dataFeedsByGroupId) ?
                {} : newState.liveText.dataFeedsByGroupId;
        }
        case actionLiveText_1.ADD_LIVE_TEXT_DATA_FEED_GROUP: {
            var _d = payload, groupId = _d.groupId, canvasId = _d.canvasId, usage = _d.usage, displayTime = _d.displayTime, dataFeedIds = _d.dataFeedIds;
            var dataFeedSequence = { id: groupId, canvasId: canvasId, usage: usage, displayTime: displayTime, dataFeedIds: dataFeedIds };
            return __assign(__assign({}, state), (_a = {}, _a[groupId] = dataFeedSequence, _a));
        }
        case actionLiveText_1.UPDATE_LIVE_TEXT_DATA_FEED_GROUP: {
            var _e = payload, groupId = _e.groupId, displayTime = _e.displayTime;
            var dataFeedSequence = state[groupId];
            if (displayTime !== dataFeedSequence.displayTime) {
                state[groupId] = __assign(__assign({}, dataFeedSequence), { displayTime: displayTime });
            }
            break;
        }
        case actionLiveText_1.PASTE_LIVE_TEXT_ITEMS:
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.liveText.dataFeedsByGroupId).length > 0) {
                return __assign(__assign({}, state), copySet.liveText.dataFeedsByGroupId);
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionLiveText_1.DELETE_LIVE_TEXT_ITEM:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var liveTextGroupIds = payload.liveTextGroupIds;
            if (!lodash_1.isNil(liveTextGroupIds) && liveTextGroupIds.length) {
                return lodash_1.omit(state, liveTextGroupIds);
            }
            break;
        }
        case actionLiveText_1.ADD_LIVE_TEXT_DATA_FEED: {
            var _f = payload, groupId2 = _f.groupId, dataFeedId = _f.dataFeedId, index = _f.index;
            var currentSequenceObject = state[groupId2];
            if (!lodash_1.isNil(currentSequenceObject)) {
                var current = currentSequenceObject.dataFeedIds;
                var newArray = void 0;
                if (index >= 0 && index < current.length) {
                    newArray = __spreadArrays(current.slice(0, index), [dataFeedId], current.slice(index));
                }
                else {
                    newArray = current.concat([dataFeedId]);
                }
                var newSequenceObject = __assign(__assign({}, currentSequenceObject), { dataFeedIds: newArray });
                return __assign(__assign({}, state), (_b = {}, _b[groupId2] = newSequenceObject, _b));
            }
            break;
        }
        case actionLiveText_1.MOVE_LIVE_TEXT_DATA_FEED: {
            var _g = payload, groupId = _g.groupId, indices = _g.indices, targetIndex = _g.targetIndex;
            var currentSequenceObject = state[groupId];
            if (!lodash_1.isNil(currentSequenceObject)) {
                var newArray = utils_1.moveIdsInSequence(currentSequenceObject.dataFeedIds, indices, targetIndex);
                if (newArray !== currentSequenceObject.dataFeedIds) {
                    var newSequenceObject = __assign(__assign({}, currentSequenceObject), { dataFeedIds: newArray });
                    return __assign(__assign({}, state), (_c = {}, _c[groupId] = newSequenceObject, _c));
                }
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_DATA_FEED: {
            var _h = payload, liveTextGroupIds = _h.liveTextGroupIds, dataFeedIds_1 = _h.dataFeedIds;
            var updatedGroups_1 = {};
            liveTextGroupIds.forEach(function (groupId) {
                var currentSequenceObject = state[groupId];
                if (!lodash_1.isNil(currentSequenceObject)) {
                    var newArray = lodash_1.without.apply(void 0, __spreadArrays([currentSequenceObject.dataFeedIds], dataFeedIds_1));
                    if (newArray !== currentSequenceObject.dataFeedIds) {
                        updatedGroups_1[groupId] = __assign(__assign({}, currentSequenceObject), { dataFeedIds: newArray });
                    }
                }
            });
            if (Object.keys(updatedGroups_1).length) {
                return __assign(__assign({}, state), updatedGroups_1);
            }
            break;
        }
    }
    return state;
};
var canvasesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.liveText) || lodash_1.isNil(newState.liveText.canvasesById) ?
                {} : newState.liveText.canvasesById;
        }
        case actionLiveText_1.ADD_LIVE_TEXT_CANVAS: {
            var _c = payload, id = _c.id, backgroundImageId = _c.backgroundImageId, backgroundColor = _c.backgroundColor, backgroundWidth = _c.backgroundWidth, backgroundHeight = _c.backgroundHeight;
            return __assign(__assign({}, state), (_a = {}, _a[id] = { id: id, backgroundImageId: backgroundImageId, backgroundColor: backgroundColor, backgroundWidth: backgroundWidth, backgroundHeight: backgroundHeight }, _a));
        }
        case actionLiveText_1.UPDATE_LIVE_TEXT_CANVAS: {
            var _d = payload, id = _d.id, backgroundImageId = _d.backgroundImageId, backgroundColor = _d.backgroundColor, backgroundWidth = _d.backgroundWidth, backgroundHeight = _d.backgroundHeight;
            var updatedCanvas = __assign({}, state[id]);
            if (!lodash_1.isNil(backgroundImageId)) {
                updatedCanvas.backgroundImageId = backgroundImageId;
            }
            if (!lodash_1.isNil(backgroundColor)) {
                updatedCanvas.backgroundColor = backgroundColor;
            }
            if (!lodash_1.isNil(backgroundWidth)) {
                updatedCanvas.backgroundWidth = backgroundWidth;
            }
            if (!lodash_1.isNil(backgroundHeight)) {
                updatedCanvas.backgroundHeight = backgroundHeight;
            }
            return __assign(__assign({}, state), (_b = {}, _b[id] = updatedCanvas, _b));
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.liveText.canvasesById).length > 0) {
                return __assign(__assign({}, state), copySet.liveText.canvasesById);
            }
            break;
        }
        case actionLiveText_1.DELETE_LIVE_TEXT_CANVAS:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var liveTextCanvasIds = payload.liveTextCanvasIds;
            if (!lodash_1.isNil(liveTextCanvasIds) && liveTextCanvasIds.length) {
                return lodash_1.omit(state, liveTextCanvasIds);
            }
            break;
        }
    }
    return state;
};
var liveTextReducer = redux_1.combineReducers({ itemsById: itemsById, layersByCanvasId: layersByCanvasId, dataFeedsByGroupId: dataFeedsByGroupId, canvasesById: canvasesById });
exports.default = liveTextReducer;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var lodash_1 = __webpack_require__(0);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionMediaSequence_1 = __webpack_require__(65);
var utils_1 = __webpack_require__(3);
var mediaStatesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.mediaStates.mediaStatesById;
        case actionMediaState_1.ADD_MEDIA_STATE:
        case actionMediaState_1.ADD_SEQUENCED_MEDIA_STATE: {
            var _c = payload, id = _c.id, name_1 = _c.name, tag = _c.tag, container = _c.container, contentItem = _c.contentItem;
            var containerCopy = __assign({}, container);
            var contentItemCopy = lodash_1.cloneDeep(contentItem);
            return __assign(__assign({}, state), (_a = {}, _a[id] = { id: id, name: name_1, tag: tag, container: containerCopy, contentItem: contentItemCopy }, _a));
        }
        case actionMediaState_1.UPDATE_MEDIA_STATE: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var payloadCopy = lodash_1.pick(payload, ['id', 'name']);
                if (payload.hasOwnProperty('contentItem')) {
                    payloadCopy.contentItem = lodash_1.cloneDeep(payload.contentItem);
                }
                var updatedMediaState = __assign(__assign({}, state[id]), payloadCopy);
                return __assign(__assign({}, state), (_b = {}, _b[id] = updatedMediaState, _b));
            }
            break;
        }
        case actionMediaState_1.UPDATE_MEDIA_STATES_CONTAINERS: {
            var _d = payload, ids = _d.ids, container_1 = _d.container;
            var updatedMediaStates_1 = {};
            ids.forEach(function (id) {
                updatedMediaStates_1[id] = __assign(__assign({}, state[id]), { container: container_1 });
            });
            return __assign(__assign({}, state), updatedMediaStates_1);
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.mediaStates.mediaStatesById).length > 0) {
                return __assign(__assign({}, state), copySet.mediaStates.mediaStatesById);
            }
            break;
        }
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var mediaStateIds = payload.mediaStateIds;
            if (mediaStateIds && mediaStateIds.length) {
                return lodash_1.omit(state, mediaStateIds);
            }
            break;
        }
    }
    return state;
};
var sequencesByParentId = function (state, action) {
    var _a, _b, _c;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.mediaStates.sequencesByParentId;
        case actionMediaState_1.ADD_SEQUENCED_MEDIA_STATE: {
            var _d = payload, id = _d.id, container_2 = _d.container, index = _d.index;
            if (!lodash_1.isNil(container_2)) {
                var sequence = state[container_2.id];
                var newMediaStateSequence = void 0;
                if (sequence) {
                    if (index < 0 || index >= sequence.sequence.length) {
                        newMediaStateSequence = sequence.sequence.concat([id]);
                    }
                    else {
                        newMediaStateSequence = __spreadArrays(sequence.sequence.slice(0, index), [id], sequence.sequence.slice(index));
                    }
                }
                else {
                    newMediaStateSequence = [id];
                }
                var newSequence_1 = {
                    id: container_2.id, parentType: container_2.type, sequence: newMediaStateSequence,
                };
                return __assign(__assign({}, state), (_a = {}, _a[container_2.id] = newSequence_1, _a));
            }
            break;
        }
        case actionMediaState_1.ADD_MEDIA_STATE_SEQUENCE:
            var _e = payload, ids = _e.ids, container = _e.container;
            var newSequence = {
                id: container.id, parentType: container.type, sequence: ids,
            };
            return __assign(__assign({}, state), (_b = {}, _b[container.id] = newSequence, _b));
        case actionMediaSequence_1.MEDIASEQUENCE_MOVE_ITEM_INDICES: {
            var _f = payload, container_3 = _f.container, indices = _f.indices, targetIndex = _f.targetIndex;
            var sequence = state[container_3.id];
            if (!lodash_1.isNil(sequence)) {
                var newMediaStateSequence = utils_1.moveIdsInSequence(sequence.sequence, indices, targetIndex);
                if (newMediaStateSequence !== sequence.sequence) {
                    var newSequence_2 = {
                        id: container_3.id, parentType: container_3.type, sequence: newMediaStateSequence,
                    };
                    return __assign(__assign({}, state), (_c = {}, _c[container_3.id] = newSequence_2, _c));
                }
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.mediaStates.sequencesByParentId).length > 0) {
                return __assign(__assign({}, state), copySet.mediaStates.sequencesByParentId);
            }
            break;
        }
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var mediaStateIds_1 = payload.mediaStateIds;
            var updatedState_1 = {};
            var sequenceChanged_1 = false;
            Object.keys(state).forEach(function (mediaStateSequenceParentId) {
                var currentSequence = state[mediaStateSequenceParentId];
                var newMediaStateSequence = lodash_1.without.apply(void 0, __spreadArrays([currentSequence.sequence], mediaStateIds_1));
                if (newMediaStateSequence.length !== currentSequence.sequence.length) {
                    if (newMediaStateSequence.length > 0) {
                        updatedState_1[mediaStateSequenceParentId] = __assign(__assign({}, currentSequence), { sequence: newMediaStateSequence });
                    }
                    sequenceChanged_1 = true;
                }
                else {
                    updatedState_1[mediaStateSequenceParentId] = currentSequence;
                }
            });
            if (sequenceChanged_1) {
                return updatedState_1;
            }
            break;
        }
    }
    return state;
};
var mediaStateReducer = redux_1.combineReducers({ mediaStatesById: mediaStatesById, sequencesByParentId: sequencesByParentId });
exports.default = mediaStateReducer;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var actionNodeApp_1 = __webpack_require__(45);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var nodeAppsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.nodeApps ? newState.nodeApps : {};
        case actionNodeApp_1.ADD_NODE_APP: {
            var id = payload.id;
            var newApp = payload;
            return __assign(__assign({}, state), (_a = {}, _a[id] = newApp, _a));
        }
        case actionNodeApp_1.UPDATE_NODE_APP: {
            var id = payload.id;
            var updatedNode = __assign(__assign({}, state[id]), payload);
            return __assign(__assign({}, state), (_b = {}, _b[id] = updatedNode, _b));
        }
        case actionNodeApp_1.DELETE_NODE_APP:
            return lodash_1.omit(state, payload.id);
    }
    return state;
};
var nodeAppReducer = nodeAppsById;
exports.default = nodeAppReducer;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidParserPluginState = void 0;
var actionParserPlugin_1 = __webpack_require__(54);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var parserPluginsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.parserPlugins ? newState.parserPlugins : {};
        case actionParserPlugin_1.ADD_PARSER_PLUGIN: {
            var id = payload.id;
            return Object.assign({}, state, (_a = {}, _a[id] = payload, _a));
        }
        case actionParserPlugin_1.UPDATE_PARSER_PLUGIN: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var updatedPlugin = Object.assign({}, state[id], payload);
                return Object.assign({}, state, (_b = {}, _b[id] = updatedPlugin, _b));
            }
            break;
        }
        case actionParserPlugin_1.REMOVE_PARSER_PLUGIN: {
            var id = payload.id;
            return lodash_1.omit(state, id);
        }
    }
    return state;
};
var parserPluginReducer = parserPluginsById;
exports.default = parserPluginReducer;
var isValidParserPluginState = function (state) {
    return typeof state === 'object';
};
exports.isValidParserPluginState = isValidParserPluginState;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidPartnerProductState = void 0;
var actionPartnerProduct_1 = __webpack_require__(66);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var createPartnerProduct = function (id, partnerName, productName, port) { return ({
    id: id,
    port: port,
    name: partnerName + '/' + productName,
    partnerName: partnerName,
    productName: productName,
}); };
var partnerProductsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.partnerProducts ? newState.partnerProducts : {};
        case actionPartnerProduct_1.ADD_PARTNER_PRODUCT: {
            var _c = payload, id = _c.id, partnerName = _c.partnerName, productName = _c.productName, port = _c.port;
            return Object.assign({}, state, (_a = {}, _a[id] = createPartnerProduct(id, partnerName, productName, port), _a));
        }
        case actionPartnerProduct_1.UPDATE_PARTNER_PRODUCT: {
            var id = payload.id;
            var updatedPartnerProduct = Object.assign({}, state[id], payload);
            return Object.assign({}, state, (_b = {}, _b[id] = updatedPartnerProduct, _b));
        }
        case actionPartnerProduct_1.DELETE_PARTNER_PRODUCT: {
            var ids = payload.ids;
            return lodash_1.omit(state, ids);
        }
    }
    return state;
};
var partnerProductReducer = partnerProductsById;
exports.default = partnerProductReducer;
var isValidPartnerProductState = function (state) {
    return typeof state === 'object';
};
exports.isValidPartnerProductState = isValidPartnerProductState;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidScriptPluginState = void 0;
var actionScriptPlugin_1 = __webpack_require__(46);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var scriptPluginsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.scriptPlugins ? newState.scriptPlugins : {};
        case actionScriptPlugin_1.ADD_SCRIPT_PLUGIN: {
            var id = payload.id;
            return Object.assign({}, state, (_a = {}, _a[id] = payload, _a));
        }
        case actionScriptPlugin_1.UPDATE_SCRIPT_PLUGIN: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var updatedPlugin = Object.assign({}, state[id], payload);
                return Object.assign({}, state, (_b = {}, _b[id] = updatedPlugin, _b));
            }
            break;
        }
        case actionScriptPlugin_1.REMOVE_SCRIPT_PLUGIN: {
            var id = payload.id;
            return lodash_1.omit(state, id);
        }
    }
    return state;
};
var scriptPluginReducer = scriptPluginsById;
exports.default = scriptPluginReducer;
var isValidScriptPluginState = function (state) {
    return typeof state === 'object';
};
exports.isValidScriptPluginState = isValidScriptPluginState;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmDefaults_1 = __webpack_require__(19);
var bsDmSign_1 = __webpack_require__(57);
var actionSign_1 = __webpack_require__(7);
var actionModification_1 = __webpack_require__(80);
var bsDmVersion_1 = __webpack_require__(58);
var lodash_1 = __webpack_require__(0);
var newSignProperties = bsDmSign_1.createDefaultSignProperties(bsDmInterfaces_1.BsDmIdNone, 'Untitled');
var properties = function (state, _a) {
    if (state === void 0) { state = newSignProperties; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return __assign(__assign({}, state), payload.signMetadata.properties);
        case actionSign_1.UPDATE_SIGN_PROPS:
            return __assign(__assign({}, state), payload);
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return __assign(__assign({}, newState.sign.properties), { version: bsDmVersion_1.version });
    }
    return state;
};
var serialPortConfigurations = function (state, _a) {
    if (state === void 0) { state = bsDmDefaults_1.dmGetDefaultSerialPortList(); }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return (payload.signMetadata.serialPortConfigurations);
        case actionSign_1.UPDATE_SIGN_SERIAL_PORTS: {
            var updateList = payload.serialPortList;
            updateList.forEach(function (portConfig) {
                var portNum = portConfig.port;
                state[portNum] = Object.assign({}, state[portNum], portConfig);
            });
            return state;
        }
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.sign.serialPortConfigurations;
    }
    return state;
};
var gpio = function (state, _a) {
    if (state === void 0) { state = bsDmDefaults_1.dmGetDefaultGpioList(); }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return (payload.signMetadata.gpio);
        case actionSign_1.UPDATE_SIGN_GPIO: {
            return payload.gpioList;
        }
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.sign.gpio;
    }
    return state;
};
var buttonPanels = function (state, _a) {
    if (state === void 0) { state = bsDmDefaults_1.dmGetDefaultButtonPanelMap(); }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return (payload.signMetadata.buttonPanels);
        case actionSign_1.UPDATE_SIGN_BPMAP: {
            var updateList_1 = payload.buttonMap;
            var newState_1 = Object.assign({}, state);
            Object.keys(updateList_1).forEach(function (bpName) {
                newState_1[bpName] = Object.assign({}, state[bpName], updateList_1[bpName]);
            });
            return newState_1;
        }
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.sign.buttonPanels;
        }
    }
    return state;
};
var irRemote = function (state, _a) {
    if (state === void 0) { state = bsDmDefaults_1.dmGetDefaultIrRemote(); }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return (payload.signMetadata.irRemote);
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.sign.irRemote;
        case actionSign_1.UPDATE_SIGN_IR_IN_CONFIG: {
            return __assign(__assign({}, state), { irInConfiguration: payload.irInConfiguration });
        }
        case actionSign_1.UPDATE_SIGN_IR_OUT_CONFIG: {
            return __assign(__assign({}, state), { irOutConfiguration: payload.irOutConfiguration });
        }
        case actionSign_1.UPDATE_SIGN_IR_REMOTE_CONTROL: {
            var _b = payload, id = _b.id, encoding = _b.encoding, manufacturerCode = _b.manufacturerCode, buttons = _b.buttons;
            var irRemoteControl = bsDmSign_1.createIrRemoteControl(id, encoding, manufacturerCode, buttons);
            return __assign(__assign({}, state), { irRemoteControl: irRemoteControl });
        }
        default:
            break;
    }
    return state;
};
var audioSignPropertyMap = function (state, _a) {
    if (state === void 0) { state = bsDmDefaults_1.dmGetDefaultAudioSignPropertyMap(); }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return (payload.signMetadata.audioSignPropertyMap);
        case actionSign_1.UPDATE_SIGN_AUDIO_CONFIG: {
            var updateList_2 = payload.audioSignMap;
            var newState_2 = Object.assign({}, state);
            Object.keys(updateList_2).forEach(function (audioName) {
                newState_2[audioName] = Object.assign({}, state[audioName], updateList_2[audioName]);
            });
            return newState_2;
        }
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return newState.sign.audioSignPropertyMap;
        }
    }
    return state;
};
var wssDeviceSpec = function (state, _a) {
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
        case actionSign_1.CLEAR_SIGN_WSS_DEVICE_SPEC:
            return {};
        case actionSign_1.UPDATE_SIGN_WSS_DEVICE_SPEC:
            return payload;
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.sign.wssDeviceSpec) ? {} : newState.sign.wssDeviceSpec;
        }
    }
    return state;
};
var lastModifiedTime = function (state, action) {
    if (state === void 0) { state = '2019'; }
    if (action.type === actionSign_1.OPEN_SIGN) {
        var newState = action.payload.newState;
        return lodash_1.isNil(newState.sign.lastModifiedTime) || newState.sign.properties.version !== bsDmVersion_1.version ?
            (new Date()).toISOString() : newState.sign.lastModifiedTime;
    }
    else if (actionModification_1.dmActionModifiesDmState(action)) {
        return (new Date()).toISOString();
    }
    return state;
};
var signReducer = redux_1.combineReducers({
    properties: properties, serialPortConfigurations: serialPortConfigurations, gpio: gpio, buttonPanels: buttonPanels,
    irRemote: irRemote, audioSignPropertyMap: audioSignPropertyMap, wssDeviceSpec: wssDeviceSpec, lastModifiedTime: lastModifiedTime,
});
exports.default = signReducer;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var actionThumbnail_1 = __webpack_require__(55);
var actionSign_1 = __webpack_require__(7);
var thumbnail = function (state, action) {
    if (state === void 0) { state = null; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return null;
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.thumbnail ? newState.thumbnail : null;
        case actionThumbnail_1.SET_THUMBNAIL:
            return payload;
    }
    return state;
};
var thumbnailReducer = thumbnail;
exports.default = thumbnailReducer;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var lodash_1 = __webpack_require__(0);
var actionTransition_1 = __webpack_require__(25);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var actionEvent_1 = __webpack_require__(20);
var utils_1 = __webpack_require__(3);
var createTransitionState = function (id, name, eventId, targetMediaStateId, transitionType, duration, condition, conditionalAction) {
    var transitionState = {
        id: id,
        name: lodash_1.isNil(name) ? '' : name,
        eventId: eventId,
        targetMediaStateId: targetMediaStateId,
        type: transitionType,
        duration: duration,
    };
    if (condition) {
        transitionState.condition = condition;
    }
    if (conditionalAction) {
        transitionState.conditionalAction = conditionalAction;
    }
    return transitionState;
};
var transitionsById = function (state, action) {
    var _a, _b, _c, _d;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.transitions.transitionsById ? newState.transitions.transitionsById : newState.transitions;
        case actionTransition_1.ADD_TRANSITION: {
            var _e = payload, id = _e.id, name_1 = _e.name, eventId = _e.eventId, targetMediaStateId = _e.targetMediaStateId, transitionType = _e.type, duration = _e.duration;
            return __assign(__assign({}, state), (_a = {}, _a[id] = createTransitionState(id, name_1, eventId, targetMediaStateId, transitionType, duration), _a));
        }
        case actionTransition_1.ADD_CONDITIONAL_TRANSITION: {
            var _f = payload, id = _f.id, name_2 = _f.name, eventId = _f.eventId, targetMediaStateId = _f.targetMediaStateId, transitionType = _f.type, duration = _f.duration, condition = _f.condition, conditionalAction = _f.conditionalAction;
            return __assign(__assign({}, state), (_b = {}, _b[id] = createTransitionState(id, name_2, eventId, targetMediaStateId, transitionType, duration, condition, conditionalAction), _b));
        }
        case actionTransition_1.UPDATE_TRANSITION: {
            var id = payload.id;
            var updatedTransition = __assign(__assign({}, state[id]), payload);
            return __assign(__assign({}, state), (_c = {}, _c[id] = updatedTransition, _c));
        }
        case actionTransition_1.UPDATE_TRANSITION_CONDITION: {
            var _g = payload, id = _g.id, condition = _g.condition, conditionalAction = _g.conditionalAction, targetMediaStateId = _g.targetMediaStateId;
            var newParams = {};
            if (!lodash_1.isNil(condition)) {
                newParams.condition = condition;
            }
            if (!lodash_1.isNil(conditionalAction)) {
                newParams.conditionalAction = conditionalAction;
            }
            if (!lodash_1.isNil(targetMediaStateId)) {
                newParams.targetMediaStateId = targetMediaStateId;
            }
            if (Object.keys(newParams).length > 0) {
                var updatedTransition = __assign(__assign({}, state[id]), newParams);
                return __assign(__assign({}, state), (_d = {}, _d[id] = updatedTransition, _d));
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.transitions.transitionsById).length > 0) {
                return __assign(__assign({}, state), copySet.transitions.transitionsById);
            }
            break;
        }
        case actionTransition_1.DELETE_TRANSITION:
        case actionEvent_1.DELETE_EVENT:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var transitionIds = payload.transitionIds;
            if (transitionIds && transitionIds.length) {
                return lodash_1.omit(state, transitionIds);
            }
            break;
        }
    }
    return state;
};
var sequencesByEventId = function (state, action) {
    var _a, _b, _c;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.transitions.sequencesByEventId ? newState.transitions.sequencesByEventId : {};
        case actionTransition_1.ADD_CONDITIONAL_TRANSITION: {
            var _d = payload, id = _d.id, eventId = _d.eventId, conditionIndex = _d.conditionIndex;
            if (!lodash_1.isNil(eventId)) {
                var sequence = state[eventId];
                var newIdSequence = void 0;
                if (sequence) {
                    newIdSequence = __spreadArrays(sequence.sequence.slice(0, conditionIndex), [
                        id
                    ], sequence.sequence.slice(conditionIndex));
                }
                else {
                    newIdSequence = [id];
                }
                return __assign(__assign({}, state), (_a = {}, _a[eventId] = { id: eventId, sequence: newIdSequence }, _a));
            }
            break;
        }
        case actionTransition_1.UPDATE_TRANSITION_CONDITION: {
            var _e = payload, id = _e.id, eventId = _e.eventId, conditionIndex = _e.conditionIndex;
            if (!lodash_1.isNil(conditionIndex)) {
                var sequence = state[eventId];
                if (!lodash_1.isNil(sequence)) {
                    var index = sequence.sequence.indexOf(id);
                    if (index >= 0 && index !== conditionIndex) {
                        var newIdSequence = lodash_1.without(sequence.sequence, id);
                        newIdSequence.splice(conditionIndex, 0, id);
                        return __assign(__assign({}, state), (_b = {}, _b[eventId] = { id: eventId, sequence: newIdSequence }, _b));
                    }
                }
            }
            break;
        }
        case actionTransition_1.MOVE_TRANSITION_CONDITION: {
            var _f = payload, eventId = _f.eventId, indices = _f.indices, targetIndex = _f.targetIndex;
            var sequence = state[eventId];
            if (!lodash_1.isNil(sequence)) {
                var newIdSequence = utils_1.moveIdsInSequence(sequence.sequence, indices, targetIndex);
                if (newIdSequence !== sequence.sequence) {
                    return __assign(__assign({}, state), (_c = {}, _c[eventId] = { id: eventId, sequence: newIdSequence }, _c));
                }
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (Object.keys(copySet.transitions.sequencesByEventId).length > 0) {
                return __assign(__assign({}, state), copySet.transitions.sequencesByEventId);
            }
            break;
        }
        case actionTransition_1.DELETE_TRANSITION:
        case actionEvent_1.DELETE_EVENT:
        case actionMediaState_1.DELETE_MEDIA_STATE:
        case actionZone_1.DELETE_ZONE: {
            var transitionIds_1 = payload.transitionIds;
            var updatedState_1 = {};
            Object.keys(state).forEach(function (eventId) {
                var currentTransitionSequence = state[eventId];
                var newTransitionSequence = lodash_1.without.apply(void 0, __spreadArrays([currentTransitionSequence.sequence], transitionIds_1));
                if (newTransitionSequence.length !== currentTransitionSequence.sequence.length) {
                    if (newTransitionSequence.length > 0) {
                        updatedState_1[eventId] = __assign(__assign({}, currentTransitionSequence), { sequence: newTransitionSequence });
                    }
                }
                else {
                    updatedState_1[eventId] = currentTransitionSequence;
                }
            });
            return updatedState_1;
        }
    }
    return state;
};
var transitionReducer = redux_1.combineReducers({ transitionsById: transitionsById, sequencesByEventId: sequencesByEventId });
exports.default = transitionReducer;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidUserVariableState = void 0;
var redux_1 = __webpack_require__(30);
var actionUserVariable_1 = __webpack_require__(34);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var utils_1 = __webpack_require__(3);
var createUserVariable = function (id, name, defaultValue, access, isNetworked, dataFeedId, systemVariable) { return ({
    id: id, name: name, defaultValue: defaultValue, access: access, isNetworked: isNetworked, dataFeedId: dataFeedId, systemVariable: systemVariable,
}); };
var variablesById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return lodash_1.isNil(newState.userVariables) ? {} :
                (lodash_1.isNil(newState.userVariables.variablesById) ? newState.userVariables : newState.userVariables.variablesById);
        case actionUserVariable_1.ADD_USER_VARIABLE: {
            var _c = payload, id = _c.id, name_1 = _c.name, defaultValue = _c.defaultValue, access = _c.access, isNetworked = _c.isNetworked, dataFeedId = _c.dataFeedId, systemVariable = _c.systemVariable;
            return __assign(__assign({}, state), (_a = {}, _a[id] = createUserVariable(id, name_1, defaultValue, access, isNetworked, dataFeedId, systemVariable), _a));
        }
        case actionUserVariable_1.UPDATE_USER_VARIABLE: {
            var id = payload.id;
            var updatedUserVariable = __assign(__assign({}, state[id]), payload);
            return __assign(__assign({}, state), (_b = {}, _b[id] = updatedUserVariable, _b));
        }
        case actionUserVariable_1.MERGE_USER_VARIABLES: {
            var userVariables = payload.userVariables;
            return __assign(__assign({}, state), userVariables.variablesById);
        }
        case actionUserVariable_1.DELETE_USER_VARIABLE: {
            var userVariableIds = payload.userVariableIds;
            return lodash_1.omit(state, userVariableIds);
        }
    }
    return state;
};
var sequence = function (state, _a) {
    if (state === void 0) { state = []; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return [];
        case actionSign_1.OPEN_SIGN: {
            var newState = payload.newState;
            return lodash_1.isNil(newState.userVariables) ? [] :
                (lodash_1.isNil(newState.userVariables.sequence) ? Object.keys(newState.userVariables) :
                    newState.userVariables.sequence);
        }
        case actionUserVariable_1.ADD_USER_VARIABLE: {
            var id = payload.id;
            return __spreadArrays(state, [id]);
        }
        case actionUserVariable_1.MOVE_USER_VARIABLES: {
            var _b = payload, indices = _b.indices, targetIndex = _b.targetIndex;
            var newState = utils_1.moveIdsInSequence(state, indices, targetIndex);
            if (newState !== state) {
                return newState;
            }
            break;
        }
        case actionUserVariable_1.RESEQUENCE_USER_VARIABLES: {
            var indices = payload.indices;
            var newState = utils_1.reSequenceIds(state, indices);
            if (newState !== state) {
                return newState;
            }
            break;
        }
        case actionUserVariable_1.MERGE_USER_VARIABLES: {
            var userVariables = payload.userVariables;
            return __spreadArrays(state, userVariables.sequence);
        }
        case actionUserVariable_1.DELETE_USER_VARIABLE: {
            var userVariableIds = payload.userVariableIds;
            return lodash_1.without.apply(void 0, __spreadArrays([state], userVariableIds));
        }
    }
    return state;
};
var userVariableReducer = redux_1.combineReducers({ variablesById: variablesById, sequence: sequence });
exports.default = userVariableReducer;
var isValidUserVariableState = function (state) {
    return typeof state === 'object';
};
exports.isValidUserVariableState = isValidUserVariableState;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidVideoModePluginState = void 0;
var actionVideoModePlugin_1 = __webpack_require__(56);
var actionSign_1 = __webpack_require__(7);
var lodash_1 = __webpack_require__(0);
var videoModePluginsById = function (state, action) {
    var _a, _b;
    if (state === void 0) { state = {}; }
    var type = action.type, payload = action.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.videoModePlugins ? newState.videoModePlugins : {};
        case actionVideoModePlugin_1.ADD_VIDEOMODE_PLUGIN: {
            var id = payload.id;
            return Object.assign({}, state, (_a = {}, _a[id] = payload, _a));
        }
        case actionVideoModePlugin_1.UPDATE_VIDEOMODE_PLUGIN: {
            var id = payload.id;
            if (state[id] !== undefined) {
                var updatedPlugin = Object.assign({}, state[id], payload);
                return Object.assign({}, state, (_b = {}, _b[id] = updatedPlugin, _b));
            }
            break;
        }
        case actionVideoModePlugin_1.REMOVE_VIDEOMODE_PLUGIN: {
            var id = payload.id;
            return lodash_1.omit(state, id);
        }
    }
    return state;
};
var videoModePluginReducer = videoModePluginsById;
exports.default = videoModePluginReducer;
var isValidVideoModePluginState = function (state) {
    return typeof state === 'object';
};
exports.isValidVideoModePluginState = isValidVideoModePluginState;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var redux_1 = __webpack_require__(30);
var bscore_1 = __webpack_require__(1);
var bsDmInterfaces_1 = __webpack_require__(2);
var actionSign_1 = __webpack_require__(7);
var actionZone_1 = __webpack_require__(14);
var actionMediaState_1 = __webpack_require__(11);
var utils_1 = __webpack_require__(3);
var lodash_1 = __webpack_require__(0);
var zonesById = function (state, _a) {
    var _b, _c, _d, _e;
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.zones.zonesById;
        case actionZone_1.ADD_ZONE: {
            var _f = payload, id = _f.id, zone = _f.zone;
            return __assign(__assign({}, state), (_b = {}, _b[id] = zone, _b));
        }
        case actionZone_1.UPDATE_ZONE: {
            var zoneParams = payload.zoneParams;
            var updatedZone = __assign(__assign({}, state[zoneParams.id]), zoneParams);
            return __assign(__assign({}, state), (_c = {}, _c[zoneParams.id] = updatedZone, _c));
        }
        case actionZone_1.UPDATE_ZONE_PROPS: {
            var _g = payload, id = _g.id, properties = _g.properties;
            var updatedProperties = utils_1.deepUpdate(state[id].properties, properties);
            var updatedZone = __assign(__assign({}, state[id]), { properties: updatedProperties });
            return __assign(__assign({}, state), (_d = {}, _d[id] = updatedZone, _d));
        }
        case actionZone_1.DELETE_ZONE: {
            var zoneId = payload.zoneId;
            return lodash_1.omit(state, zoneId);
        }
        case actionMediaState_1.ADD_MEDIA_STATE: {
            var _h = payload, id = _h.id, container = _h.container;
            if (!lodash_1.isNil(container)) {
                var zone = state[container.id];
                if (zone && zone.initialMediaStateId === bsDmInterfaces_1.BsDmIdNone) {
                    var updatedZone = __assign(__assign({}, state[container.id]), { initialMediaStateId: id });
                    return __assign(__assign({}, state), (_e = {}, _e[container.id] = updatedZone, _e));
                }
            }
            break;
        }
        case actionSign_1.SCALE_RECTANGLES: {
            var _j = payload, increase_1 = _j.increase, scaleFactorX_1 = _j.scaleFactorX, scaleFactorY_1 = _j.scaleFactorY;
            return Object.keys(state).reduce(function (acc, id) {
                var newZoneState = __assign(__assign({}, state[id]), { position: bscore_1.bscScaleAbsoluteRect(state[id].position, increase_1, scaleFactorX_1, scaleFactorY_1) });
                if (newZoneState.type === bscore_1.ZoneType.Ticker || newZoneState.type === bscore_1.ZoneType.Clock) {
                    var currentProperties = newZoneState.properties;
                    var safeTextRegion = currentProperties.widget.safeTextRegion;
                    if (!lodash_1.isNil(safeTextRegion)) {
                        var newSafeTextRegion = bscore_1.bscScaleAbsoluteRect(safeTextRegion, increase_1, scaleFactorX_1, scaleFactorY_1);
                        if (newSafeTextRegion !== safeTextRegion) {
                            var newWidget = __assign(__assign({}, currentProperties.widget), { safeTextRegion: newSafeTextRegion });
                            newZoneState.properties = __assign(__assign({}, currentProperties), { widget: newWidget });
                        }
                    }
                }
                acc[id] = newZoneState;
                return acc;
            }, {});
        }
    }
    return state;
};
var zoneLayersById = function (state, _a) {
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN: {
            var zoneLayerMap_1 = payload.zoneLayerMap;
            return __assign({}, zoneLayerMap_1);
        }
        case actionSign_1.OPEN_SIGN: {
            var newState_1 = payload.newState;
            return newState_1.zones.zoneLayersById;
        }
        case actionZone_1.ADD_ZONE: {
            var zoneLayerMap_2 = payload.zoneLayerMap;
            return __assign(__assign({}, state), zoneLayerMap_2);
        }
        case actionZone_1.MOVE_MOSAIC_ZONES: {
            var _b = payload, layerId = _b.layerId, indices = _b.indices, targetIndex = _b.targetIndex;
            var newState_2 = lodash_1.cloneDeep(state);
            var zoneLayer = newState_2[layerId];
            zoneLayer.zoneSequence = utils_1.moveIdsInSequence(zoneLayer.zoneSequence, indices, targetIndex);
            return newState_2;
        }
        case actionZone_1.UPDATE_ZONE: {
            var zoneLayerMap_3 = payload.zoneLayerMap;
            if (!lodash_1.isNil(zoneLayerMap_3)) {
                return __assign(__assign({}, state), zoneLayerMap_3);
            }
            break;
        }
        case actionZone_1.DELETE_ZONE: {
            var zoneId_1 = payload.zoneId;
            var newState_3 = lodash_1.cloneDeep(state);
            Object.keys(newState_3).forEach(function (id) {
                var zoneSequence = state[id].zoneSequence;
                if (zoneSequence.length) {
                    newState_3[id].zoneSequence = lodash_1.without(zoneSequence, zoneId_1);
                }
            });
            return newState_3;
        }
        case actionZone_1.DELETE_ZONE_LAYER:
            var zoneLayerId = payload.zoneLayerId;
            var newState = __assign({}, state);
            delete newState[zoneLayerId];
            return newState;
        case actionZone_1.ADD_ZONE_LAYER:
            var zoneLayerMap = payload.zoneLayerMap;
            return __assign(__assign({}, state), zoneLayerMap);
    }
    return state;
};
var zoneLayerSequence = function (state, _a) {
    if (state === void 0) { state = []; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return payload.zoneLayerSequence;
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.zones.zoneLayerSequence;
        case actionZone_1.MOVE_ZONE_LAYERS:
            var _b = payload, indices = _b.indices, targetIndex = _b.targetIndex;
            var newMoveState = lodash_1.cloneDeep(state);
            newMoveState = utils_1.moveIdsInSequence(newMoveState, indices, targetIndex);
            return newMoveState;
        case actionZone_1.DELETE_ZONE_LAYER: {
            var zoneLayerId_1 = payload.zoneLayerId;
            return lodash_1.without(state, zoneLayerId_1);
        }
        case actionZone_1.ADD_ZONE_LAYER:
            var zoneLayerId = payload.zoneLayerId;
            return state.concat(zoneLayerId);
    }
    return state;
};
var allZones = function (state, _a) {
    if (state === void 0) { state = []; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return [];
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.zones.allZones;
        case actionZone_1.ADD_ZONE: {
            var id = payload.id;
            return __spreadArrays(state, [id]);
        }
        case actionZone_1.DELETE_ZONE: {
            var zoneId = payload.zoneId;
            var index = state.indexOf(zoneId);
            if (index >= 0) {
                return __spreadArrays(state.slice(0, index), state.slice(index + 1));
            }
        }
    }
    return state;
};
var zoneTagIndices = function (state, _a) {
    var _b, _c, _d;
    if (state === void 0) { state = {}; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case actionSign_1.NEW_SIGN:
            return {};
        case actionSign_1.OPEN_SIGN:
            var newState = payload.newState;
            return newState.zones.zoneTagIndices;
        case actionZone_1.ADD_ZONE: {
            var id = payload.id;
            return __assign(__assign({}, state), (_b = {}, _b[id] = 1, _b));
        }
        case actionZone_1.DELETE_ZONE: {
            var zoneId = payload.zoneId;
            return lodash_1.omit(state, zoneId);
        }
        case actionMediaState_1.ADD_MEDIA_STATE: {
            var _e = payload, tag = _e.tag, zoneId = _e.zoneId;
            if (!lodash_1.isNil(tag) && lodash_1.isString(zoneId)) {
                var tagVal = Number(tag);
                if (tagVal > 0) {
                    var currentIndex = state[zoneId];
                    var nextTag = tagVal >= currentIndex ? tagVal + 1 : currentIndex + 1;
                    return __assign(__assign({}, state), (_c = {}, _c[zoneId] = nextTag, _c));
                }
            }
            break;
        }
        case actionMediaState_1.PASTE_MEDIA_STATES: {
            var copySet = payload.copySet;
            if (copySet.nextMediaStateTagIndex > 0) {
                return __assign(__assign({}, state), (_d = {}, _d[copySet.zoneId] = copySet.nextMediaStateTagIndex, _d));
            }
            break;
        }
    }
    return state;
};
var zoneReducer = redux_1.combineReducers({ zonesById: zonesById, allZones: allZones, zoneLayersById: zoneLayersById, zoneLayerSequence: zoneLayerSequence, zoneTagIndices: zoneTagIndices });
exports.default = zoneReducer;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmClearSelectorCaches = void 0;
var selectorZone_1 = __webpack_require__(42);
var selectorMediaState_1 = __webpack_require__(47);
var selectorEvent_1 = __webpack_require__(40);
var selectorTransition_1 = __webpack_require__(41);
var selectorCommand_1 = __webpack_require__(26);
var selectorHtmlSite_1 = __webpack_require__(59);
var selectorNodeApp_1 = __webpack_require__(62);
var selectorDataFeed_1 = __webpack_require__(35);
var selectorLiveText_1 = __webpack_require__(61);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorScriptPlugin_1 = __webpack_require__(48);
var selectorParserPlugin_1 = __webpack_require__(63);
var selectorVideoModePlugin_1 = __webpack_require__(70);
function dmClearSelectorCaches() {
    selectorZone_1.clearZoneSelectorCaches();
    selectorMediaState_1.clearMediaStateSelectorCaches();
    selectorEvent_1.clearEventSelectorCaches();
    selectorTransition_1.clearTransitionSelectorCaches();
    selectorCommand_1.clearCommandSelectorCaches();
    selectorHtmlSite_1.clearHtmlSiteSelectorCaches();
    selectorNodeApp_1.clearNodeAppSelectorCaches();
    selectorDataFeed_1.clearDataFeedSelectorCaches();
    selectorLiveText_1.clearLiveTextSelectorCaches();
    selectorUserVariable_1.clearUserVariableSelectorCaches();
    selectorScriptPlugin_1.clearScriptPluginSelectorCaches();
    selectorParserPlugin_1.clearParserPluginSelectorCaches();
    selectorVideoModePlugin_1.clearVideoModePluginSelectorCaches();
}
exports.dmClearSelectorCaches = dmClearSelectorCaches;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetCustomAutorunAssetItem = exports.dmGetCustomAutorunId = void 0;
var bscore_1 = __webpack_require__(1);
var selectorAssetMap_1 = __webpack_require__(39);
function dmGetCustomAutorunId(state) {
    return state.customAutorun;
}
exports.dmGetCustomAutorunId = dmGetCustomAutorunId;
function dmGetCustomAutorunAssetItem(state) {
    var assetId = state.customAutorun;
    return assetId !== bscore_1.BsAssetIdNone ? selectorAssetMap_1.dmGetAssetItemById(state, { id: assetId }) : null;
}
exports.dmGetCustomAutorunAssetItem = dmGetCustomAutorunAssetItem;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetPartnerProductById = exports.dmGetPartnerProducts = void 0;
function dmGetPartnerProducts(state) {
    return Object.keys(state.partnerProducts);
}
exports.dmGetPartnerProducts = dmGetPartnerProducts;
function dmGetPartnerProductById(state, props) {
    var partnerProduct = state.partnerProducts[props.id];
    return partnerProduct ? partnerProduct : null;
}
exports.dmGetPartnerProductById = dmGetPartnerProductById;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetTransitionTree = exports.dmGetEventTree = exports.dmGetMediaStateTree = exports.dmGetZoneTree = exports.dmGetSignTree = exports.dmIsEntityContainerType = void 0;
var bsDmInterfaces_1 = __webpack_require__(2);
var bsDmSign_1 = __webpack_require__(57);
var bsDmContentItems_1 = __webpack_require__(9);
var selectorSign_1 = __webpack_require__(49);
var selectorZone_1 = __webpack_require__(42);
var selectorMediaState_1 = __webpack_require__(47);
var selectorPlaylist_1 = __webpack_require__(69);
var selectorLiveText_1 = __webpack_require__(61);
var selectorCommand_1 = __webpack_require__(26);
var selectorUserVariable_1 = __webpack_require__(36);
var selectorDataFeed_1 = __webpack_require__(35);
var selectorScriptPlugin_1 = __webpack_require__(48);
var selectorParserPlugin_1 = __webpack_require__(63);
var selectorLinkedPresentation_1 = __webpack_require__(60);
var selectorAuxiliaryFile_1 = __webpack_require__(67);
var selectorNodeApp_1 = __webpack_require__(62);
var lodash_1 = __webpack_require__(0);
var utils_1 = __webpack_require__(3);
var containerTypeSet = new Set([
    bsDmInterfaces_1.DmEntityContainerType.ZoneSet,
    bsDmInterfaces_1.DmEntityContainerType.MediaStateSet,
    bsDmInterfaces_1.DmEntityContainerType.MediaStateItemSet,
    bsDmInterfaces_1.DmEntityContainerType.EventSet,
    bsDmInterfaces_1.DmEntityContainerType.TransitionSequence,
    bsDmInterfaces_1.DmEntityContainerType.CommandSequence,
    bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateEntry,
    bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateExit,
    bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemEntry,
    bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemExit,
    bsDmInterfaces_1.DmEntityContainerType.LiveTextItemSet,
    bsDmInterfaces_1.DmEntityContainerType.UserVariableSet,
    bsDmInterfaces_1.DmEntityContainerType.ScriptPluginSet,
    bsDmInterfaces_1.DmEntityContainerType.ParserPluginSet,
    bsDmInterfaces_1.DmEntityContainerType.LinkedPresentationSet,
    bsDmInterfaces_1.DmEntityContainerType.SystemDataFeedSet,
    bsDmInterfaces_1.DmEntityContainerType.AuxiliaryFileSet,
]);
function dmIsEntityContainerType(type) {
    return containerTypeSet.has(type);
}
exports.dmIsEntityContainerType = dmIsEntityContainerType;
function dmGetSignTree(state) {
    var signId = selectorSign_1.dmGetSignId(state);
    var root = bsDmSign_1.dmCreateSignTreeNode(signId, bsDmInterfaces_1.DmEntityType.Sign);
    var zoneSetId = bsDmInterfaces_1.DmEntityContainerType.ZoneSet + '-' + signId;
    var zoneNode = bsDmSign_1.dmCreateSignTreeNode(zoneSetId, bsDmInterfaces_1.DmEntityContainerType.ZoneSet, signId);
    zoneNode.children = selectorZone_1.dmGetZonesForSign(state).map(function (id) { return dmGetZoneTree(state, { id: id }); });
    root.children.push(zoneNode);
    var userVariableIds = selectorUserVariable_1.dmGetUserVariableIdsForSign(state);
    if (userVariableIds.length > 0) {
        var userVariableSetId_1 = bsDmInterfaces_1.DmEntityContainerType.UserVariableSet + '-' + signId;
        var userVariableNode = bsDmSign_1.dmCreateSignTreeNode(userVariableSetId_1, bsDmInterfaces_1.DmEntityContainerType.UserVariableSet, signId);
        userVariableNode.children = userVariableIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.UserVariable, userVariableSetId_1);
        });
        root.children.push(userVariableNode);
    }
    var dataFeedIds = selectorDataFeed_1.dmGetSystemDataFeedIdsForSign(state);
    if (dataFeedIds.length > 0) {
        var dataFeedSetId_1 = bsDmInterfaces_1.DmEntityContainerType.SystemDataFeedSet + '-' + signId;
        var dataFeedNode = bsDmSign_1.dmCreateSignTreeNode(dataFeedSetId_1, bsDmInterfaces_1.DmEntityContainerType.SystemDataFeedSet, signId);
        dataFeedNode.children = dataFeedIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.DataFeed, dataFeedSetId_1);
        });
        root.children.push(dataFeedNode);
    }
    var pluginIds = selectorScriptPlugin_1.dmGetScriptPluginIds(state);
    if (pluginIds.length > 0) {
        var pluginSetId_1 = bsDmInterfaces_1.DmEntityContainerType.ScriptPluginSet + '-' + signId;
        var pluginNode = bsDmSign_1.dmCreateSignTreeNode(pluginSetId_1, bsDmInterfaces_1.DmEntityContainerType.ScriptPluginSet, signId);
        pluginNode.children = pluginIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.ScriptPlugin, pluginSetId_1);
        });
        root.children.push(pluginNode);
    }
    pluginIds = selectorParserPlugin_1.dmGetParserPluginIds(state);
    if (pluginIds.length > 0) {
        var pluginSetId_2 = bsDmInterfaces_1.DmEntityContainerType.ParserPluginSet + '-' + signId;
        var pluginNode = bsDmSign_1.dmCreateSignTreeNode(pluginSetId_2, bsDmInterfaces_1.DmEntityContainerType.ParserPluginSet, signId);
        pluginNode.children = pluginIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.ParserPlugin, pluginSetId_2);
        });
        root.children.push(pluginNode);
    }
    var presentationIds = selectorLinkedPresentation_1.dmGetLinkedPresentationIds(state);
    if (presentationIds.length > 0) {
        var presentationSetId_1 = bsDmInterfaces_1.DmEntityContainerType.LinkedPresentationSet + '-' + signId;
        var presentationNode = bsDmSign_1.dmCreateSignTreeNode(presentationSetId_1, bsDmInterfaces_1.DmEntityContainerType.LinkedPresentationSet, signId);
        presentationNode.children = presentationIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.LinkedPresentation, presentationSetId_1);
        });
        root.children.push(presentationNode);
    }
    var auxFileIds = selectorAuxiliaryFile_1.dmGetAuxiliaryFileIds(state);
    if (auxFileIds.length > 0) {
        var auxFileSetId_1 = bsDmInterfaces_1.DmEntityContainerType.AuxiliaryFileSet + '-' + signId;
        var auxFileNode = bsDmSign_1.dmCreateSignTreeNode(auxFileSetId_1, bsDmInterfaces_1.DmEntityContainerType.AuxiliaryFileSet, signId);
        auxFileNode.children = auxFileIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.AuxiliaryFile, auxFileSetId_1);
        });
        root.children.push(auxFileNode);
    }
    var nodeAppIds = selectorNodeApp_1.dmGetNodeAppIdsForSign(state);
    if (nodeAppIds.length > 0) {
        var nodeAppSetId_1 = bsDmInterfaces_1.DmEntityContainerType.NodeAppSet + '-' + signId;
        var nodeAppNode = bsDmSign_1.dmCreateSignTreeNode(nodeAppSetId_1, bsDmInterfaces_1.DmEntityContainerType.NodeAppSet, signId);
        nodeAppNode.children = nodeAppIds.map(function (id) {
            return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.NodeApp, nodeAppSetId_1);
        });
        root.children.push(nodeAppNode);
    }
    return root;
}
exports.dmGetSignTree = dmGetSignTree;
function dmGetZoneTree(state, props) {
    var zone = selectorZone_1.dmGetZoneStateById(state, props);
    var root = bsDmSign_1.dmCreateSignTreeNode(props.id, bsDmInterfaces_1.DmEntityType.Zone, selectorSign_1.dmGetSignId(state));
    var mediaStateIds = zone.nonInteractive ?
        selectorPlaylist_1.dmGetZoneSimplePlaylist(state, props) : selectorZone_1.dmGetMediaStateIdsForZone(state, props);
    if (!lodash_1.isNil(mediaStateIds) && mediaStateIds.length > 0) {
        if (!zone.nonInteractive
            && mediaStateIds.length > 0
            && utils_1.isValidBsDmId(zone.initialMediaStateId)
            && zone.initialMediaStateId !== mediaStateIds[0]) {
            mediaStateIds = __spreadArrays([zone.initialMediaStateId], lodash_1.without(mediaStateIds, zone.initialMediaStateId));
        }
        var mediaStateSetId = bsDmInterfaces_1.DmEntityContainerType.MediaStateSet + '-' + zone.id;
        var mediaStateSetNode = bsDmSign_1.dmCreateSignTreeNode(mediaStateSetId, bsDmInterfaces_1.DmEntityContainerType.MediaStateSet, zone.id);
        mediaStateSetNode.children = mediaStateIds.reduce(function (idList, id) {
            var mediaStateNode = dmGetMediaStateTree(state, zone.id, id);
            if (!lodash_1.isNil(mediaStateNode)) {
                idList.push(mediaStateNode);
            }
            return idList;
        }, []);
        root.children.push(mediaStateSetNode);
    }
    return root;
}
exports.dmGetZoneTree = dmGetZoneTree;
function dmGetMediaStateTree(state, containerId, mediaStateId) {
    var mediaState = selectorMediaState_1.dmGetMediaStateStateById(state, { id: mediaStateId });
    if (!lodash_1.isNil(mediaState)) {
        var root = bsDmSign_1.dmCreateSignTreeNode(mediaStateId, bsDmInterfaces_1.DmEntityType.MediaState, mediaState.container.id);
        var deNormEvents = selectorMediaState_1.fnGetDeNormalizedEventsForMediaState(state.mediaStates.mediaStatesById, state.events, state.transitions, mediaState.id);
        if (deNormEvents.length > 0) {
            var eventSetId_1 = bsDmInterfaces_1.DmEntityContainerType.EventSet + '-' + mediaStateId;
            var eventNode = bsDmSign_1.dmCreateSignTreeNode(eventSetId_1, bsDmInterfaces_1.DmEntityContainerType.EventSet, mediaStateId);
            eventNode.children = deNormEvents.map(function (ev) {
                return dmGetEventTree(state, eventSetId_1, ev.eventState.id, ev.transitionStates);
            });
            root.children.push(eventNode);
        }
        var commandIds = selectorCommand_1.dmGetEntryCommandIdsForMediaState(state, { id: mediaStateId });
        if (commandIds.length > 0) {
            var commandSeqId_1 = bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateEntry + '-' + mediaStateId;
            var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_1, bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateEntry, mediaStateId);
            commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_1); });
            root.children.push(commandNode);
        }
        commandIds = selectorCommand_1.dmGetExitCommandIdsForMediaState(state, { id: mediaStateId });
        if (commandIds.length > 0) {
            var commandSeqId_2 = bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateExit + '-' + mediaStateId;
            var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_2, bsDmInterfaces_1.DmEntityContainerType.CommandSequenceStateExit, mediaStateId);
            commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_2); });
            root.children.push(commandNode);
        }
        var stateHasItemList = bsDmContentItems_1.dmContentItemIsMediaListOrPlayFileContentItem(mediaState.contentItem);
        if (bsDmContentItems_1.dmContentItemIsSuperStateContentItem(mediaState.contentItem) || stateHasItemList) {
            var mediaStateIds = selectorMediaState_1.dmGetMediaStateIdsForProps(state, { containerId: mediaStateId });
            var containerType = stateHasItemList ?
                bsDmInterfaces_1.DmEntityContainerType.MediaStateItemSet : bsDmInterfaces_1.DmEntityContainerType.MediaStateSet;
            if (mediaStateIds.length > 0) {
                var mediaStateSetId_1 = containerType + '-' + mediaStateId;
                var mediaStateSetNode = bsDmSign_1.dmCreateSignTreeNode(mediaStateSetId_1, containerType, mediaStateId);
                mediaStateSetNode.children = mediaStateIds.reduce(function (idList, id) {
                    var mediaStateNode = dmGetMediaStateTree(state, mediaStateSetId_1, id);
                    if (!lodash_1.isNil(mediaStateNode)) {
                        idList.push(mediaStateNode);
                    }
                    return idList;
                }, []);
                root.children.push(mediaStateSetNode);
            }
            if (stateHasItemList && bsDmContentItems_1.dmContentItemIsMediaListContentItem(mediaState.contentItem)) {
                commandIds = selectorCommand_1.dmGetSequenceItemNextCommandIdsForMediaState(state, { id: mediaStateId });
                if (commandIds.length > 0) {
                    var commandSeqId_3 = bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemEntry + '-' + mediaStateId;
                    var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_3, bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemEntry, mediaStateId);
                    commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_3); });
                    root.children.push(commandNode);
                }
                commandIds = selectorCommand_1.dmGetSequenceItemPreviousCommandIdsForMediaState(state, { id: mediaStateId });
                if (commandIds.length > 0) {
                    var commandSeqId_4 = bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemExit + '-' + mediaStateId;
                    var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_4, bsDmInterfaces_1.DmEntityContainerType.CommandSequenceItemExit, mediaStateId);
                    commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_4); });
                    root.children.push(commandNode);
                }
            }
        }
        else if (bsDmContentItems_1.dmContentItemIsLiveTextContentItem(mediaState.contentItem)) {
            var canvasId = mediaState.contentItem.canvasId;
            var liveTextItemIds = selectorLiveText_1.dmGetAllLiveTextItemIdsForCanvas(state, { id: canvasId });
            if (liveTextItemIds.length > 0) {
                var liveTextSetId_1 = bsDmInterfaces_1.DmEntityContainerType.LiveTextItemSet + '-' + mediaStateId;
                var liveTextNode = bsDmSign_1.dmCreateSignTreeNode(liveTextSetId_1, bsDmInterfaces_1.DmEntityContainerType.LiveTextItemSet, mediaStateId);
                liveTextNode.children = liveTextItemIds.map(function (id) {
                    return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.LiveTextItem, liveTextSetId_1);
                });
                root.children.push(liveTextNode);
            }
        }
        return root;
    }
    return null;
}
exports.dmGetMediaStateTree = dmGetMediaStateTree;
function dmGetEventTree(state, eventSeqId, eventId, transitions) {
    var root = bsDmSign_1.dmCreateSignTreeNode(eventId, bsDmInterfaces_1.DmEntityType.Event, eventSeqId);
    if (!lodash_1.isNil(transitions) && transitions.length > 0) {
        var transitionSeqId_1 = bsDmInterfaces_1.DmEntityContainerType.TransitionSequence + '-' + eventId;
        var transitionNode = bsDmSign_1.dmCreateSignTreeNode(transitionSeqId_1, bsDmInterfaces_1.DmEntityContainerType.TransitionSequence, eventId);
        transitionNode.children = transitions.map(function (transition) { return dmGetTransitionTree(state, transitionSeqId_1, transition); });
        root.children.push(transitionNode);
    }
    var commandIds = selectorCommand_1.dmCommandIdsForEvent(state, { id: eventId });
    if (commandIds.length > 0) {
        var commandSeqId_5 = bsDmInterfaces_1.DmEntityContainerType.CommandSequence + '-' + eventId;
        var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_5, bsDmInterfaces_1.DmEntityContainerType.CommandSequence, eventId);
        commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_5); });
        root.children.push(commandNode);
    }
    return root;
}
exports.dmGetEventTree = dmGetEventTree;
function dmGetTransitionTree(state, transitionSeqId, transition) {
    var root = bsDmSign_1.dmCreateSignTreeNode(transition.id, bsDmInterfaces_1.DmEntityType.Transition, transitionSeqId);
    if (!lodash_1.isNil(transition.condition)) {
        var commandIds = selectorCommand_1.dmCommandIdsForTransition(state, { id: transition.id });
        if (commandIds.length > 0) {
            var commandSeqId_6 = bsDmInterfaces_1.DmEntityContainerType.CommandSequence + '-' + transition.id;
            var commandNode = bsDmSign_1.dmCreateSignTreeNode(commandSeqId_6, bsDmInterfaces_1.DmEntityContainerType.CommandSequence, transition.id);
            commandNode.children = commandIds.map(function (id) { return bsDmSign_1.dmCreateSignTreeNode(id, bsDmInterfaces_1.DmEntityType.Command, commandSeqId_6); });
            root.children.push(commandNode);
        }
    }
    return root;
}
exports.dmGetTransitionTree = dmGetTransitionTree;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dmGetThumbnail = void 0;
var bscore_1 = __webpack_require__(1);
var reselect_1 = __webpack_require__(27);
var lodash_1 = __webpack_require__(0);
var base64 = __webpack_require__(75);
var selGetThumbnail = reselect_1.createSelector(function (dmState) { return dmState.thumbnail; }, function (thumbnailState) {
    return lodash_1.isNil(thumbnailState) ? null : bscore_1.bscCreateLocalAssetThumbnail(base64.toByteArray(thumbnailState.data), thumbnailState.type, thumbnailState.size, thumbnailState.hash);
});
function dmGetThumbnail(state) {
    return selGetThumbnail(state);
}
exports.dmGetThumbnail = dmGetThumbnail;


/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = require("redux-thunk");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = require("uuid");

/***/ })
/******/ ]);
});