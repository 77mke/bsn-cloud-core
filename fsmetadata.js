(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("path"), require("fs"), require("util"), require("stream"), require("zlib"), require("assert"), require("child_process"), require("crypto"), require("os"), require("buffer"), require("constants"), require("events"), require("net"), require("tty"));
	else if(typeof define === 'function' && define.amd)
		define(["path", "fs", "util", "stream", "zlib", "assert", "child_process", "crypto", "os", "buffer", "constants", "events", "net", "tty"], factory);
	else if(typeof exports === 'object')
		exports["fsMetadata"] = factory(require("path"), require("fs"), require("util"), require("stream"), require("zlib"), require("assert"), require("child_process"), require("crypto"), require("os"), require("buffer"), require("constants"), require("events"), require("net"), require("tty"));
	else
		root["fsMetadata"] = factory(root["path"], root["fs"], root["util"], root["stream"], root["zlib"], root["assert"], root["child_process"], root["crypto"], root["os"], root["buffer"], root["constants"], root["events"], root["net"], root["tty"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_63__, __WEBPACK_EXTERNAL_MODULE_146__, __WEBPACK_EXTERNAL_MODULE_147__, __WEBPACK_EXTERNAL_MODULE_148__, __WEBPACK_EXTERNAL_MODULE_149__, __WEBPACK_EXTERNAL_MODULE_150__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 66);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(2)
var polyfills = __webpack_require__(119)
var legacy = __webpack_require__(118)
var clone = __webpack_require__(117)

var util = __webpack_require__(5)

/* istanbul ignore next - node 0.x polyfill */
var gracefulQueue
var previousSymbol

/* istanbul ignore else - node 0.x polyfill */
if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
  gracefulQueue = Symbol.for('graceful-fs.queue')
  // This is used in testing by future versions
  previousSymbol = Symbol.for('graceful-fs.previous')
} else {
  gracefulQueue = '___graceful-fs.queue'
  previousSymbol = '___graceful-fs.previous'
}

function noop () {}

function publishQueue(context, queue) {
  Object.defineProperty(context, gracefulQueue, {
    get: function() {
      return queue
    }
  })
}

var debug = noop
if (util.debuglog)
  debug = util.debuglog('gfs4')
else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
  debug = function() {
    var m = util.format.apply(util, arguments)
    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
    console.error(m)
  }

// Once time initialization
if (!fs[gracefulQueue]) {
  // This queue can be shared by multiple loaded instances
  var queue = global[gracefulQueue] || []
  publishQueue(fs, queue)

  // Patch fs.close/closeSync to shared queue version, because we need
  // to retry() whenever a close happens *anywhere* in the program.
  // This is essential when multiple graceful-fs instances are
  // in play at the same time.
  fs.close = (function (fs$close) {
    function close (fd, cb) {
      return fs$close.call(fs, fd, function (err) {
        // This function uses the graceful-fs shared queue
        if (!err) {
          retry()
        }

        if (typeof cb === 'function')
          cb.apply(this, arguments)
      })
    }

    Object.defineProperty(close, previousSymbol, {
      value: fs$close
    })
    return close
  })(fs.close)

  fs.closeSync = (function (fs$closeSync) {
    function closeSync (fd) {
      // This function uses the graceful-fs shared queue
      fs$closeSync.apply(fs, arguments)
      retry()
    }

    Object.defineProperty(closeSync, previousSymbol, {
      value: fs$closeSync
    })
    return closeSync
  })(fs.closeSync)

  if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
    process.on('exit', function() {
      debug(fs[gracefulQueue])
      __webpack_require__(13).equal(fs[gracefulQueue].length, 0)
    })
  }
}

if (!global[gracefulQueue]) {
  publishQueue(global, fs[gracefulQueue]);
}

module.exports = patch(clone(fs))
if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
    module.exports = patch(fs)
    fs.__patched = true;
}

function patch (fs) {
  // Everything that references the open() function needs to be in here
  polyfills(fs)
  fs.gracefulify = patch

  fs.createReadStream = createReadStream
  fs.createWriteStream = createWriteStream
  var fs$readFile = fs.readFile
  fs.readFile = readFile
  function readFile (path, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$readFile(path, options, cb)

    function go$readFile (path, options, cb) {
      return fs$readFile(path, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$readFile, [path, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$writeFile = fs.writeFile
  fs.writeFile = writeFile
  function writeFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$writeFile(path, data, options, cb)

    function go$writeFile (path, data, options, cb) {
      return fs$writeFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$writeFile, [path, data, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$appendFile = fs.appendFile
  if (fs$appendFile)
    fs.appendFile = appendFile
  function appendFile (path, data, options, cb) {
    if (typeof options === 'function')
      cb = options, options = null

    return go$appendFile(path, data, options, cb)

    function go$appendFile (path, data, options, cb) {
      return fs$appendFile(path, data, options, function (err) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$appendFile, [path, data, options, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  var fs$readdir = fs.readdir
  fs.readdir = readdir
  function readdir (path, options, cb) {
    var args = [path]
    if (typeof options !== 'function') {
      args.push(options)
    } else {
      cb = options
    }
    args.push(go$readdir$cb)

    return go$readdir(args)

    function go$readdir$cb (err, files) {
      if (files && files.sort)
        files.sort()

      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
        enqueue([go$readdir, [args]])

      else {
        if (typeof cb === 'function')
          cb.apply(this, arguments)
        retry()
      }
    }
  }

  function go$readdir (args) {
    return fs$readdir.apply(fs, args)
  }

  if (process.version.substr(0, 4) === 'v0.8') {
    var legStreams = legacy(fs)
    ReadStream = legStreams.ReadStream
    WriteStream = legStreams.WriteStream
  }

  var fs$ReadStream = fs.ReadStream
  if (fs$ReadStream) {
    ReadStream.prototype = Object.create(fs$ReadStream.prototype)
    ReadStream.prototype.open = ReadStream$open
  }

  var fs$WriteStream = fs.WriteStream
  if (fs$WriteStream) {
    WriteStream.prototype = Object.create(fs$WriteStream.prototype)
    WriteStream.prototype.open = WriteStream$open
  }

  Object.defineProperty(fs, 'ReadStream', {
    get: function () {
      return ReadStream
    },
    set: function (val) {
      ReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  Object.defineProperty(fs, 'WriteStream', {
    get: function () {
      return WriteStream
    },
    set: function (val) {
      WriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  // legacy names
  var FileReadStream = ReadStream
  Object.defineProperty(fs, 'FileReadStream', {
    get: function () {
      return FileReadStream
    },
    set: function (val) {
      FileReadStream = val
    },
    enumerable: true,
    configurable: true
  })
  var FileWriteStream = WriteStream
  Object.defineProperty(fs, 'FileWriteStream', {
    get: function () {
      return FileWriteStream
    },
    set: function (val) {
      FileWriteStream = val
    },
    enumerable: true,
    configurable: true
  })

  function ReadStream (path, options) {
    if (this instanceof ReadStream)
      return fs$ReadStream.apply(this, arguments), this
    else
      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
  }

  function ReadStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        if (that.autoClose)
          that.destroy()

        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
        that.read()
      }
    })
  }

  function WriteStream (path, options) {
    if (this instanceof WriteStream)
      return fs$WriteStream.apply(this, arguments), this
    else
      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
  }

  function WriteStream$open () {
    var that = this
    open(that.path, that.flags, that.mode, function (err, fd) {
      if (err) {
        that.destroy()
        that.emit('error', err)
      } else {
        that.fd = fd
        that.emit('open', fd)
      }
    })
  }

  function createReadStream (path, options) {
    return new fs.ReadStream(path, options)
  }

  function createWriteStream (path, options) {
    return new fs.WriteStream(path, options)
  }

  var fs$open = fs.open
  fs.open = open
  function open (path, flags, mode, cb) {
    if (typeof mode === 'function')
      cb = mode, mode = null

    return go$open(path, flags, mode, cb)

    function go$open (path, flags, mode, cb) {
      return fs$open(path, flags, mode, function (err, fd) {
        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
          enqueue([go$open, [path, flags, mode, cb]])
        else {
          if (typeof cb === 'function')
            cb.apply(this, arguments)
          retry()
        }
      })
    }
  }

  return fs
}

function enqueue (elem) {
  debug('ENQUEUE', elem[0].name, elem[1])
  fs[gracefulQueue].push(elem)
}

function retry () {
  var elem = fs[gracefulQueue].shift()
  if (elem) {
    debug('RETRY', elem[0].name, elem[1])
    elem[0].apply(null, elem[1])
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.fromCallback = function (fn) {
  return Object.defineProperty(function () {
    if (typeof arguments[arguments.length - 1] === 'function') fn.apply(this, arguments)
    else {
      return new Promise((resolve, reject) => {
        arguments[arguments.length] = (err, res) => {
          if (err) return reject(err)
          resolve(res)
        }
        arguments.length++
        fn.apply(this, arguments)
      })
    }
  }, 'name', { value: fn.name })
}

exports.fromPromise = function (fn) {
  return Object.defineProperty(function () {
    const cb = arguments[arguments.length - 1]
    if (typeof cb !== 'function') return fn.apply(this, arguments)
    else fn.apply(this, arguments).then(r => cb(null, r), cb)
  }, 'name', { value: fn.name })
}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const u = __webpack_require__(3).fromCallback
const mkdirs = u(__webpack_require__(108))
const mkdirsSync = __webpack_require__(107)

module.exports = {
  mkdirs: mkdirs,
  mkdirsSync: mkdirsSync,
  // alias
  mkdirp: mkdirs,
  mkdirpSync: mkdirsSync,
  ensureDir: mkdirs,
  ensureDirSync: mkdirsSync
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var exec = __webpack_require__(17).exec;
var isWindows = __webpack_require__(63).platform().match(/win(32|64)/);
var which = __webpack_require__(145);

var nlRegexp = /\r\n|\r|\n/g;
var streamRegexp = /^\[?(.*?)\]?$/;
var filterEscapeRegexp = /[,]/;
var whichCache = {};

/**
 * Parse progress line from ffmpeg stderr
 *
 * @param {String} line progress line
 * @return progress object
 * @private
 */
function parseProgressLine(line) {
  var progress = {};

  // Remove all spaces after = and trim
  line  = line.replace(/=\s+/g, '=').trim();
  var progressParts = line.split(' ');

  // Split every progress part by "=" to get key and value
  for(var i = 0; i < progressParts.length; i++) {
    var progressSplit = progressParts[i].split('=', 2);
    var key = progressSplit[0];
    var value = progressSplit[1];

    // This is not a progress line
    if(typeof value === 'undefined')
      return null;

    progress[key] = value;
  }

  return progress;
}


var utils = module.exports = {
  isWindows: isWindows,
  streamRegexp: streamRegexp,


  /**
   * Copy an object keys into another one
   *
   * @param {Object} source source object
   * @param {Object} dest destination object
   * @private
   */
  copy: function(source, dest) {
    Object.keys(source).forEach(function(key) {
      dest[key] = source[key];
    });
  },


  /**
   * Create an argument list
   *
   * Returns a function that adds new arguments to the list.
   * It also has the following methods:
   * - clear() empties the argument list
   * - get() returns the argument list
   * - find(arg, count) finds 'arg' in the list and return the following 'count' items, or undefined if not found
   * - remove(arg, count) remove 'arg' in the list as well as the following 'count' items
   *
   * @private
   */
  args: function() {
    var list = [];

    // Append argument(s) to the list
    var argfunc = function() {
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        list = list.concat(arguments[0]);
      } else {
        list = list.concat([].slice.call(arguments));
      }
    };

    // Clear argument list
    argfunc.clear = function() {
      list = [];
    };

    // Return argument list
    argfunc.get = function() {
      return list;
    };

    // Find argument 'arg' in list, and if found, return an array of the 'count' items that follow it
    argfunc.find = function(arg, count) {
      var index = list.indexOf(arg);
      if (index !== -1) {
        return list.slice(index + 1, index + 1 + (count || 0));
      }
    };

    // Find argument 'arg' in list, and if found, remove it as well as the 'count' items that follow it
    argfunc.remove = function(arg, count) {
      var index = list.indexOf(arg);
      if (index !== -1) {
        list.splice(index, (count || 0) + 1);
      }
    };

    // Clone argument list
    argfunc.clone = function() {
      var cloned = utils.args();
      cloned(list);
      return cloned;
    };

    return argfunc;
  },


  /**
   * Generate filter strings
   *
   * @param {String[]|Object[]} filters filter specifications. When using objects,
   *   each must have the following properties:
   * @param {String} filters.filter filter name
   * @param {String|Array} [filters.inputs] (array of) input stream specifier(s) for the filter,
   *   defaults to ffmpeg automatically choosing the first unused matching streams
   * @param {String|Array} [filters.outputs] (array of) output stream specifier(s) for the filter,
   *   defaults to ffmpeg automatically assigning the output to the output file
   * @param {Object|String|Array} [filters.options] filter options, can be omitted to not set any options
   * @return String[]
   * @private
   */
  makeFilterStrings: function(filters) {
    return filters.map(function(filterSpec) {
      if (typeof filterSpec === 'string') {
        return filterSpec;
      }

      var filterString = '';

      // Filter string format is:
      // [input1][input2]...filter[output1][output2]...
      // The 'filter' part can optionaly have arguments:
      //   filter=arg1:arg2:arg3
      //   filter=arg1=v1:arg2=v2:arg3=v3

      // Add inputs
      if (Array.isArray(filterSpec.inputs)) {
        filterString += filterSpec.inputs.map(function(streamSpec) {
          return streamSpec.replace(streamRegexp, '[$1]');
        }).join('');
      } else if (typeof filterSpec.inputs === 'string') {
        filterString += filterSpec.inputs.replace(streamRegexp, '[$1]');
      }

      // Add filter
      filterString += filterSpec.filter;

      // Add options
      if (filterSpec.options) {
        if (typeof filterSpec.options === 'string' || typeof filterSpec.options === 'number') {
          // Option string
          filterString += '=' + filterSpec.options;
        } else if (Array.isArray(filterSpec.options)) {
          // Option array (unnamed options)
          filterString += '=' + filterSpec.options.map(function(option) {
            if (typeof option === 'string' && option.match(filterEscapeRegexp)) {
              return '\'' + option + '\'';
            } else {
              return option;
            }
          }).join(':');
        } else if (Object.keys(filterSpec.options).length) {
          // Option object (named options)
          filterString += '=' + Object.keys(filterSpec.options).map(function(option) {
            var value = filterSpec.options[option];

            if (typeof value === 'string' && value.match(filterEscapeRegexp)) {
              value = '\'' + value + '\'';
            }

            return option + '=' + value;
          }).join(':');
        }
      }

      // Add outputs
      if (Array.isArray(filterSpec.outputs)) {
        filterString += filterSpec.outputs.map(function(streamSpec) {
          return streamSpec.replace(streamRegexp, '[$1]');
        }).join('');
      } else if (typeof filterSpec.outputs === 'string') {
        filterString += filterSpec.outputs.replace(streamRegexp, '[$1]');
      }

      return filterString;
    });
  },


  /**
   * Search for an executable
   *
   * Uses 'which' or 'where' depending on platform
   *
   * @param {String} name executable name
   * @param {Function} callback callback with signature (err, path)
   * @private
   */
  which: function(name, callback) {
    if (name in whichCache) {
      return callback(null, whichCache[name]);
    }

    which(name, function(err, result){
      if (err) {
        // Treat errors as not found
        return callback(null, whichCache[name] = '');
      }
      callback(null, whichCache[name] = result);
    });
  },


  /**
   * Convert a [[hh:]mm:]ss[.xxx] timemark into seconds
   *
   * @param {String} timemark timemark string
   * @return Number
   * @private
   */
  timemarkToSeconds: function(timemark) {
    if (typeof timemark === 'number') {
      return timemark;
    }

    if (timemark.indexOf(':') === -1 && timemark.indexOf('.') >= 0) {
      return Number(timemark);
    }

    var parts = timemark.split(':');

    // add seconds
    var secs = Number(parts.pop());

    if (parts.length) {
      // add minutes
      secs += Number(parts.pop()) * 60;
    }

    if (parts.length) {
      // add hours
      secs += Number(parts.pop()) * 3600;
    }

    return secs;
  },


  /**
   * Extract codec data from ffmpeg stderr and emit 'codecData' event if appropriate
   * Call it with an initially empty codec object once with each line of stderr output until it returns true
   *
   * @param {FfmpegCommand} command event emitter
   * @param {String} stderrLine ffmpeg stderr output line
   * @param {Object} codecObject object used to accumulate codec data between calls
   * @return {Boolean} true if codec data is complete (and event was emitted), false otherwise
   * @private
   */
  extractCodecData: function(command, stderrLine, codecsObject) {
    var inputPattern = /Input #[0-9]+, ([^ ]+),/;
    var durPattern = /Duration\: ([^,]+)/;
    var audioPattern = /Audio\: (.*)/;
    var videoPattern = /Video\: (.*)/;

    if (!('inputStack' in codecsObject)) {
      codecsObject.inputStack = [];
      codecsObject.inputIndex = -1;
      codecsObject.inInput = false;
    }

    var inputStack = codecsObject.inputStack;
    var inputIndex = codecsObject.inputIndex;
    var inInput = codecsObject.inInput;

    var format, dur, audio, video;

    if (format = stderrLine.match(inputPattern)) {
      inInput = codecsObject.inInput = true;
      inputIndex = codecsObject.inputIndex = codecsObject.inputIndex + 1;

      inputStack[inputIndex] = { format: format[1], audio: '', video: '', duration: '' };
    } else if (inInput && (dur = stderrLine.match(durPattern))) {
      inputStack[inputIndex].duration = dur[1];
    } else if (inInput && (audio = stderrLine.match(audioPattern))) {
      audio = audio[1].split(', ');
      inputStack[inputIndex].audio = audio[0];
      inputStack[inputIndex].audio_details = audio;
    } else if (inInput && (video = stderrLine.match(videoPattern))) {
      video = video[1].split(', ');
      inputStack[inputIndex].video = video[0];
      inputStack[inputIndex].video_details = video;
    } else if (/Output #\d+/.test(stderrLine)) {
      inInput = codecsObject.inInput = false;
    } else if (/Stream mapping:|Press (\[q\]|ctrl-c) to stop/.test(stderrLine)) {
      command.emit.apply(command, ['codecData'].concat(inputStack));
      return true;
    }

    return false;
  },


  /**
   * Extract progress data from ffmpeg stderr and emit 'progress' event if appropriate
   *
   * @param {FfmpegCommand} command event emitter
   * @param {String} stderrLine ffmpeg stderr data
   * @private
   */
  extractProgress: function(command, stderrLine) {
    var progress = parseProgressLine(stderrLine);

    if (progress) {
      // build progress report object
      var ret = {
        frames: parseInt(progress.frame, 10),
        currentFps: parseInt(progress.fps, 10),
        currentKbps: progress.bitrate ? parseFloat(progress.bitrate.replace('kbits/s', '')) : 0,
        targetSize: parseInt(progress.size || progress.Lsize, 10),
        timemark: progress.time
      };

      // calculate percent progress using duration
      if (command._ffprobeData && command._ffprobeData.format && command._ffprobeData.format.duration) {
        var duration = Number(command._ffprobeData.format.duration);
        if (!isNaN(duration))
          ret.percent = (utils.timemarkToSeconds(ret.timemark) / duration) * 100;
      }
      command.emit('progress', ret);
    }
  },


  /**
   * Extract error message(s) from ffmpeg stderr
   *
   * @param {String} stderr ffmpeg stderr data
   * @return {String}
   * @private
   */
  extractError: function(stderr) {
    // Only return the last stderr lines that don't start with a space or a square bracket
    return stderr.split(nlRegexp).reduce(function(messages, message) {
      if (message.charAt(0) === ' ' || message.charAt(0) === '[') {
        return [];
      } else {
        messages.push(message);
        return messages;
      }
    }, []).join('\n');
  },


  /**
   * Creates a line ring buffer object with the following methods:
   * - append(str) : appends a string or buffer
   * - get() : returns the whole string
   * - close() : prevents further append() calls and does a last call to callbacks
   * - callback(cb) : calls cb for each line (incl. those already in the ring)
   *
   * @param {Numebr} maxLines maximum number of lines to store (<= 0 for unlimited)
   */
  linesRing: function(maxLines) {
    var cbs = [];
    var lines = [];
    var current = null;
    var closed = false
    var max = maxLines - 1;

    function emit(line) {
      cbs.forEach(function(cb) { cb(line); });
    }

    return {
      callback: function(cb) {
        lines.forEach(function(l) { cb(l); });
        cbs.push(cb);
      },

      append: function(str) {
        if (closed) return;
        if (str instanceof Buffer) str = '' + str;
        if (!str || str.length === 0) return;

        var newLines = str.split(nlRegexp);

        if (newLines.length === 1) {
          if (current !== null) {
            current = current + newLines.shift();
          } else {
            current = newLines.shift();
          }
        } else {
          if (current !== null) {
            current = current + newLines.shift();
            emit(current);
            lines.push(current);
          }

          current = newLines.pop();

          newLines.forEach(function(l) {
            emit(l);
            lines.push(l);
          });

          if (max > -1 && lines.length > max) {
            lines.splice(0, lines.length - max);
          }
        }
      },

      get: function() {
        if (current !== null) {
          return lines.concat([current]).join('\n');
        } else {
          return lines.join('\n');
        }
      },

      close: function() {
        if (closed) return;

        if (current !== null) {
          emit(current);
          lines.push(current);

          if (max > -1 && lines.length > max) {
            lines.shift();
          }

          current = null;
        }

        closed = true;
      }
    };
  }
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const u = __webpack_require__(3).fromPromise
const fs = __webpack_require__(32)

function pathExists (path) {
  return fs.access(path).then(() => true).catch(() => false)
}

module.exports = {
  pathExists: u(pathExists),
  pathExistsSync: fs.existsSync
}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



module.exports = {

  PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],

  TYPE_IHDR: 0x49484452,
  TYPE_IEND: 0x49454e44,
  TYPE_IDAT: 0x49444154,
  TYPE_PLTE: 0x504c5445,
  TYPE_tRNS: 0x74524e53, // eslint-disable-line camelcase
  TYPE_gAMA: 0x67414d41, // eslint-disable-line camelcase

  // color-type bits
  COLORTYPE_GRAYSCALE: 0,
  COLORTYPE_PALETTE: 1,
  COLORTYPE_COLOR: 2,
  COLORTYPE_ALPHA: 4, // e.g. grayscale and alpha

  // color-type combinations
  COLORTYPE_PALETTE_COLOR: 3,
  COLORTYPE_COLOR_ALPHA: 6,

  COLORTYPE_TO_BPP_MAP: {
    0: 1,
    2: 3,
    3: 1,
    4: 2,
    6: 4
  },

  GAMMA_DIVISION: 100000
};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(47));
	else if(typeof define === 'function' && define.amd)
		define(["isomorphic-path"], factory);
	else if(typeof exports === 'object')
		exports["bsCore"] = factory(require("isomorphic-path"));
	else
		root["bsCore"] = factory(root["isomorphic-path"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_24__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assets_1 = __webpack_require__(4);
var isNil = __webpack_require__(0);
var MediaType = (function () {
    function MediaType() {
    }
    MediaType.Video = 'Video';
    MediaType.Audio = 'Audio';
    MediaType.Image = 'Image';
    MediaType.Text = 'Text';
    MediaType.Font = 'Font';
    MediaType.Css = 'Css';
    MediaType.Auxiliary = 'Auxiliary';
    MediaType.Other = 'Other';
    return MediaType;
}());
exports.MediaType = MediaType;
Object.freeze(MediaType);
var PlayableMediaTypeArray = [
    MediaType.Image, MediaType.Video, MediaType.Audio, MediaType.Text
];
exports.PlayableMediaTypes = new Set(PlayableMediaTypeArray);
var ContentItemType = (function () {
    function ContentItemType() {
    }
    ContentItemType.Video = 'Video';
    ContentItemType.Image = 'Image';
    ContentItemType.Audio = 'Audio';
    ContentItemType.Html = 'Html';
    ContentItemType.LiveVideo = 'LiveVideo';
    ContentItemType.DataFeed = 'DataFeed';
    ContentItemType.MrssFeed = 'MrssFeed';
    ContentItemType.TwitterFeed = 'TwitterFeed';
    ContentItemType.Text = 'Text';
    ContentItemType.UserVariable = 'UserVariable';
    ContentItemType.VideoStream = 'VideoStream';
    ContentItemType.AudioStream = 'AudioStream';
    ContentItemType.MjpegStream = 'MjpegStream';
    ContentItemType.Time = 'Time';
    ContentItemType.Date = 'Date';
    ContentItemType.EventHandler = 'EventHandler';
    ContentItemType.PlayFile = 'PlayFile';
    ContentItemType.MediaList = 'MediaList';
    ContentItemType.LiveText = 'LiveText';
    ContentItemType.SuperState = 'SuperState';
    ContentItemType.Invalid = 'Invalid';
    return ContentItemType;
}());
exports.ContentItemType = ContentItemType;
Object.freeze(ContentItemType);
function bscGetContentItemTypeForMediaType(type) {
    if (assets_1.bscIsMediaTypePlayable(type)) {
        return type;
    }
    return ContentItemType.Invalid;
}
exports.bscGetContentItemTypeForMediaType = bscGetContentItemTypeForMediaType;
var ZoneType = (function () {
    function ZoneType() {
    }
    ZoneType.VideoOrImages = 'VideoOrImages';
    ZoneType.VideoOnly = 'VideoOnly';
    ZoneType.Images = 'Images';
    ZoneType.AudioOnly = 'AudioOnly';
    ZoneType.EnhancedAudio = 'EnhancedAudio';
    ZoneType.Ticker = 'Ticker';
    ZoneType.Clock = 'Clock';
    ZoneType.BackgroundImage = 'BackgroundImage';
    ZoneType.Control = 'Control';
    return ZoneType;
}());
exports.ZoneType = ZoneType;
Object.freeze(ZoneType);
var ZoneLayerType = (function () {
    function ZoneLayerType() {
    }
    ZoneLayerType.Video = 'Video';
    ZoneLayerType.Audio = 'Audio';
    ZoneLayerType.Graphics = 'Graphics';
    ZoneLayerType.Invisible = 'Invisible';
    return ZoneLayerType;
}());
exports.ZoneLayerType = ZoneLayerType;
Object.freeze(ZoneLayerType);
var VideoZoneLayerType = (function () {
    function VideoZoneLayerType() {
    }
    VideoZoneLayerType.FourK = 'FourK';
    VideoZoneLayerType.HD = 'HD';
    return VideoZoneLayerType;
}());
exports.VideoZoneLayerType = VideoZoneLayerType;
Object.freeze(VideoZoneLayerType);
var VideoDecoderMode = (function () {
    function VideoDecoderMode() {
    }
    VideoDecoderMode.Regular = 'Regular';
    VideoDecoderMode.Mosaic = 'Mosaic';
    return VideoDecoderMode;
}());
exports.VideoDecoderMode = VideoDecoderMode;
Object.freeze(VideoDecoderMode);
var VideoDecoderName = (function () {
    function VideoDecoderName() {
    }
    VideoDecoderName.FourKFirstDecoder = '4K';
    VideoDecoderName.FourKSecondDecoder = '4K2';
    VideoDecoderName.HDDecoder = 'Hd';
    return VideoDecoderName;
}());
exports.VideoDecoderName = VideoDecoderName;
Object.freeze(VideoDecoderName);
var VideoDecoderSize = (function () {
    function VideoDecoderSize() {
    }
    VideoDecoderSize.FourK = 'FourK';
    VideoDecoderSize.HD = 'HD';
    return VideoDecoderSize;
}());
exports.VideoDecoderSize = VideoDecoderSize;
Object.freeze(VideoDecoderSize);
var VideoConnectorType = (function () {
    function VideoConnectorType() {
    }
    VideoConnectorType.Hdmi = 'HDMI';
    VideoConnectorType.Vga = 'VGA';
    VideoConnectorType.Component = 'Component';
    VideoConnectorType.None = 'None';
    return VideoConnectorType;
}());
exports.VideoConnectorType = VideoConnectorType;
Object.freeze(VideoConnectorType);
var MonitorOrientationType = (function () {
    function MonitorOrientationType() {
    }
    MonitorOrientationType.Landscape = 'Landscape';
    MonitorOrientationType.PortraitBottomLeft = 'PortraitBottomLeft';
    MonitorOrientationType.PortraitBottomRight = 'PortraitBottomRight';
    MonitorOrientationType.None = 'None';
    return MonitorOrientationType;
}());
exports.MonitorOrientationType = MonitorOrientationType;
Object.freeze(MonitorOrientationType);
var MonitorOverscanType = (function () {
    function MonitorOverscanType() {
    }
    MonitorOverscanType.NoOverscan = 'NoOverscan';
    MonitorOverscanType.OverscanActionSafeArea = 'OverscanActionSafeArea';
    MonitorOverscanType.OverscanTitleSafeArea = 'OverscanTitleSafeArea';
    return MonitorOverscanType;
}());
exports.MonitorOverscanType = MonitorOverscanType;
Object.freeze(MonitorOverscanType);
var DeviceWebPageDisplay = (function () {
    function DeviceWebPageDisplay() {
    }
    DeviceWebPageDisplay.None = 'None';
    DeviceWebPageDisplay.Standard = 'Standard';
    DeviceWebPageDisplay.Custom = 'Custom';
    return DeviceWebPageDisplay;
}());
exports.DeviceWebPageDisplay = DeviceWebPageDisplay;
Object.freeze(DeviceWebPageDisplay);
var TouchCursorDisplayModeType = (function () {
    function TouchCursorDisplayModeType() {
    }
    TouchCursorDisplayModeType.Disabled = 'Disabled';
    TouchCursorDisplayModeType.Auto = 'Auto';
    TouchCursorDisplayModeType.Display = 'Display';
    return TouchCursorDisplayModeType;
}());
exports.TouchCursorDisplayModeType = TouchCursorDisplayModeType;
Object.freeze(TouchCursorDisplayModeType);
var GraphicsZOrderType = (function () {
    function GraphicsZOrderType() {
    }
    GraphicsZOrderType.Back = 'Back';
    GraphicsZOrderType.Middle = 'Middle';
    GraphicsZOrderType.Front = 'Front';
    return GraphicsZOrderType;
}());
exports.GraphicsZOrderType = GraphicsZOrderType;
Object.freeze(GraphicsZOrderType);
var UdpAddressType = (function () {
    function UdpAddressType() {
    }
    UdpAddressType.IPAddress = 'IPAddress';
    UdpAddressType.LocalSubnet = 'LocalSubnet';
    UdpAddressType.Ethernet = 'Ethernet';
    UdpAddressType.Wireless = 'Wireless';
    return UdpAddressType;
}());
exports.UdpAddressType = UdpAddressType;
Object.freeze(UdpAddressType);
var LanguageType = (function () {
    function LanguageType() {
    }
    LanguageType.English = 'English';
    LanguageType.French = 'French';
    LanguageType.German = 'German';
    LanguageType.Spanish = 'Spanish';
    LanguageType.Italian = 'Italian';
    LanguageType.Dutch = 'Dutch';
    LanguageType.Swedish = 'Swedish';
    return LanguageType;
}());
exports.LanguageType = LanguageType;
Object.freeze(LanguageType);
var LanguageKeyType = (function () {
    function LanguageKeyType() {
    }
    LanguageKeyType.English = 'eng';
    LanguageKeyType.French = 'fre';
    LanguageKeyType.German = 'ger';
    LanguageKeyType.Spanish = 'spa';
    LanguageKeyType.Italian = 'ita';
    LanguageKeyType.Dutch = 'dut';
    LanguageKeyType.Swedish = 'swe';
    return LanguageKeyType;
}());
exports.LanguageKeyType = LanguageKeyType;
Object.freeze(LanguageKeyType);
var ViewModeType = (function () {
    function ViewModeType() {
    }
    ViewModeType.ScaleToFill = 'Scale to Fill';
    ViewModeType.Letterboxed = 'Letterboxed and Centered';
    ViewModeType.FillAndCenter = 'Fill Screen and Centered';
    return ViewModeType;
}());
exports.ViewModeType = ViewModeType;
Object.freeze(ViewModeType);
var ImageModeType = (function () {
    function ImageModeType() {
    }
    ImageModeType.CenterImage = 'Center Image';
    ImageModeType.ScaleToFit = 'Scale to Fit';
    ImageModeType.FillAndCrop = 'Scale to Fill and Crop';
    ImageModeType.ScaleToFill = 'Scale to Fill';
    return ImageModeType;
}());
exports.ImageModeType = ImageModeType;
Object.freeze(ImageModeType);
var ColorSpaceType = (function () {
    function ColorSpaceType() {
    }
    ColorSpaceType.Unknown = 'Unknown';
    ColorSpaceType.CMY = 'CMY';
    ColorSpaceType.CMYK = 'CMYK';
    ColorSpaceType.Gray = 'Gray';
    ColorSpaceType.HCL = 'HCL';
    ColorSpaceType.HCLp = 'HCLp';
    ColorSpaceType.HSB = 'HSB';
    ColorSpaceType.HSI = 'HSI';
    ColorSpaceType.HSL = 'HSL';
    ColorSpaceType.HSV = 'HSV';
    ColorSpaceType.HWB = 'HWB';
    ColorSpaceType.Lab = 'Lab';
    ColorSpaceType.LCH = 'LCH';
    ColorSpaceType.LCHab = 'LCHab';
    ColorSpaceType.LCHuv = 'LCHuv';
    ColorSpaceType.Log = 'Log';
    ColorSpaceType.LMS = 'LMS';
    ColorSpaceType.Luv = 'Luv';
    ColorSpaceType.OHTA = 'OHTA';
    ColorSpaceType.Rec601YCbCr = 'Rec601YCbCr';
    ColorSpaceType.Rec709YCbCr = 'Rec709YCbCr';
    ColorSpaceType.RGB = 'RGB';
    ColorSpaceType.scRGB = 'scRGB';
    ColorSpaceType.sRGB = 'sRGB';
    ColorSpaceType.Transparent = 'Transparent';
    ColorSpaceType.XyV = 'XyV';
    ColorSpaceType.XYZ = 'XYZ';
    ColorSpaceType.YCbCr = 'YCbCr';
    ColorSpaceType.YCC = 'YCC';
    ColorSpaceType.YDbDr = 'YDbDr';
    ColorSpaceType.YIQ = 'YIQ';
    ColorSpaceType.YPbPr = 'YPbPr';
    ColorSpaceType.YUV = 'YUV';
    ColorSpaceType.LinearGray = 'LinearGray';
    return ColorSpaceType;
}());
exports.ColorSpaceType = ColorSpaceType;
var ImageOrientationType = (function () {
    function ImageOrientationType() {
    }
    ImageOrientationType.Undefined = 'Undefined';
    ImageOrientationType.TopLeft = 'TopLeft';
    ImageOrientationType.TopRight = 'TopRight';
    ImageOrientationType.BottomRight = 'BottomRight';
    ImageOrientationType.BottomLeft = 'BottomLeft';
    ImageOrientationType.LeftTop = 'LeftTop';
    ImageOrientationType.RightTop = 'RightTop';
    ImageOrientationType.RightBottom = 'RightBottom';
    ImageOrientationType.LeftBottom = 'LeftBottom';
    return ImageOrientationType;
}());
exports.ImageOrientationType = ImageOrientationType;
var AudioOutputSelectionType = (function () {
    function AudioOutputSelectionType() {
    }
    AudioOutputSelectionType.Analog = 'Analog';
    AudioOutputSelectionType.Usb = 'Usb';
    AudioOutputSelectionType.DigitalPcm = 'DigitalPcm';
    AudioOutputSelectionType.DigitalAc3 = 'DigitalAc3';
    AudioOutputSelectionType.AnalogHdmiAc3 = 'AnalogHdmiAc3';
    return AudioOutputSelectionType;
}());
exports.AudioOutputSelectionType = AudioOutputSelectionType;
Object.freeze(AudioOutputSelectionType);
var AudioModeType = (function () {
    function AudioModeType() {
    }
    AudioModeType.Surround = 'Surround';
    AudioModeType.Stereo = 'Stereo';
    AudioModeType.NoAudio = 'NoAudio';
    AudioModeType.Left = 'Left';
    AudioModeType.Right = 'Right';
    return AudioModeType;
}());
exports.AudioModeType = AudioModeType;
Object.freeze(AudioModeType);
var AudioMappingType = (function () {
    function AudioMappingType() {
    }
    AudioMappingType.Audio1 = 'Audio1';
    AudioMappingType.Audio2 = 'Audio2';
    AudioMappingType.Audio3 = 'Audio3';
    AudioMappingType.AudioAll = 'AudioAll';
    return AudioMappingType;
}());
exports.AudioMappingType = AudioMappingType;
Object.freeze(AudioMappingType);
var UsbConnectorName = (function () {
    function UsbConnectorName() {
    }
    UsbConnectorName.UsbA = 'usbA';
    UsbConnectorName.UsbB = 'usbB';
    UsbConnectorName.UsbC = 'usbC';
    UsbConnectorName.UsbD = 'usbD';
    UsbConnectorName.UsbTypeA = 'usbTypeA';
    UsbConnectorName.UsbTypeC = 'usbTypeC';
    UsbConnectorName.Usb700_1 = 'usb700_1';
    UsbConnectorName.Usb700_2 = 'usb700_2';
    UsbConnectorName.Usb700_3 = 'usb700_3';
    UsbConnectorName.Usb700_4 = 'usb700_4';
    UsbConnectorName.Usb700_5 = 'usb700_5';
    UsbConnectorName.Usb700_6 = 'usb700_6';
    UsbConnectorName.Usb700_7 = 'usb700_7';
    UsbConnectorName.Usb_1 = 'usb_1';
    UsbConnectorName.Usb_2 = 'usb_2';
    UsbConnectorName.Usb_3 = 'usb_3';
    UsbConnectorName.Usb_4 = 'usb_4';
    UsbConnectorName.Usb_5 = 'usb_5';
    UsbConnectorName.Usb_6 = 'usb_6';
    return UsbConnectorName;
}());
exports.UsbConnectorName = UsbConnectorName;
Object.freeze(UsbConnectorName);
var AudioOutputName = (function (_super) {
    __extends(AudioOutputName, _super);
    function AudioOutputName() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioOutputName.Analog1 = 'analog1';
    AudioOutputName.Analog2 = 'analog2';
    AudioOutputName.Analog3 = 'analog3';
    AudioOutputName.Hdmi = 'hdmi';
    AudioOutputName.Spdif = 'spdif';
    return AudioOutputName;
}(UsbConnectorName));
exports.AudioOutputName = AudioOutputName;
Object.freeze(AudioOutputName);
exports.UsbConnectorNameArray = [
    'usbA', 'usbB', 'usbC', 'usbD',
    'usbTypeA', 'usbTypeC', 'usb700_1', 'usb700_2', 'usb700_3',
    'usb700_4', 'usb700_5', 'usb700_6', 'usb700_7',
    'usb_1', 'usb_2', 'usb_3', 'usb_4', 'usb_5', 'usb_6',
];
exports.AudioOutputNameArray = __spreadArrays([
    'analog1', 'analog2', 'analog3', 'hdmi', 'spdif'
], exports.UsbConnectorNameArray);
var AudioConfiguration = (function () {
    function AudioConfiguration() {
    }
    AudioConfiguration.MixedAudioPCMOnly = 'MixedAudioPCMOnly';
    AudioConfiguration.MixedAudioPCMCompressed = 'MixedAudioPCMCompressed';
    AudioConfiguration.FixedAudio = 'FixedAudio';
    return AudioConfiguration;
}());
exports.AudioConfiguration = AudioConfiguration;
Object.freeze(AudioConfiguration);
var AudioOutputType = (function () {
    function AudioOutputType() {
    }
    AudioOutputType.Pcm = 'Pcm';
    AudioOutputType.Passthrough = 'Passthrough';
    AudioOutputType.Multichannel = 'Multichannel';
    AudioOutputType.None = 'None';
    return AudioOutputType;
}());
exports.AudioOutputType = AudioOutputType;
Object.freeze(AudioOutputType);
var AudioMixModeType = (function () {
    function AudioMixModeType() {
    }
    AudioMixModeType.Stereo = 'Stereo';
    AudioMixModeType.Left = 'Left';
    AudioMixModeType.Right = 'Right';
    return AudioMixModeType;
}());
exports.AudioMixModeType = AudioMixModeType;
Object.freeze(AudioMixModeType);
var MosaicMaxContentResolutionType = (function () {
    function MosaicMaxContentResolutionType() {
    }
    MosaicMaxContentResolutionType.NotApplicable = 'NotApplicable';
    MosaicMaxContentResolutionType.QCIF = 'QCIF';
    MosaicMaxContentResolutionType.CIF = 'CIF';
    MosaicMaxContentResolutionType.SD = 'SD';
    MosaicMaxContentResolutionType.HD = 'HD';
    MosaicMaxContentResolutionType.FK = '4K';
    return MosaicMaxContentResolutionType;
}());
exports.MosaicMaxContentResolutionType = MosaicMaxContentResolutionType;
Object.freeze(MosaicMaxContentResolutionType);
var VideoDisplayModeType = (function () {
    function VideoDisplayModeType() {
    }
    VideoDisplayModeType.m2D = '2D';
    VideoDisplayModeType.m3DTOB = '3DTOB';
    VideoDisplayModeType.m3DSBS = '3DSBS';
    return VideoDisplayModeType;
}());
exports.VideoDisplayModeType = VideoDisplayModeType;
Object.freeze(VideoDisplayModeType);
var RotationType = (function () {
    function RotationType() {
    }
    RotationType.rot0 = '0';
    RotationType.rot90 = '90';
    RotationType.rot180 = '180';
    RotationType.rot270 = '270';
    return RotationType;
}());
exports.RotationType = RotationType;
Object.freeze(RotationType);
var TextHAlignmentType = (function () {
    function TextHAlignmentType() {
    }
    TextHAlignmentType.Left = 'Left';
    TextHAlignmentType.Center = 'Center';
    TextHAlignmentType.Right = 'Right';
    return TextHAlignmentType;
}());
exports.TextHAlignmentType = TextHAlignmentType;
Object.freeze(TextHAlignmentType);
var TextScrollingMethodType = (function () {
    function TextScrollingMethodType() {
    }
    TextScrollingMethodType.Animated = 'Animated';
    TextScrollingMethodType.StaticText = 'StaticText';
    TextScrollingMethodType.Scrolling = 'Scrolling';
    return TextScrollingMethodType;
}());
exports.TextScrollingMethodType = TextScrollingMethodType;
Object.freeze(TextScrollingMethodType);
var EventType = (function () {
    function EventType() {
    }
    EventType.MediaEnd = 'MediaEnd';
    EventType.Timer = 'Timer';
    EventType.MediaEndOrTimer = 'MediaEndOrTimer';
    EventType.MediaListEnd = 'MediaListEnd';
    EventType.Keyboard = 'Keyboard';
    EventType.Remote = 'Remote';
    EventType.Usb = 'Usb';
    EventType.Synchronize = 'Synchronize';
    EventType.ZoneMessage = 'ZoneMessage';
    EventType.InternalSynchronize = 'InternalSynchronize';
    EventType.Success = 'Success';
    EventType.Fail = 'Fail';
    EventType.Serial = 'Serial';
    EventType.TimeClock = 'TimeClock';
    EventType.Gps = 'Gps';
    EventType.AudioTimeCode = 'AudioTimeCode';
    EventType.VideoTimeCode = 'VideoTimeCode';
    EventType.RectangularTouch = 'RectangularTouch';
    EventType.Gpio = 'Gpio';
    EventType.Bp = 'Bp';
    EventType.PluginMessage = 'PluginMessage';
    EventType.Udp = 'Udp';
    EventType.InteractiveMenu = 'InteractiveMenu';
    EventType.WssEvent = 'WssEvent';
    EventType.Button = 'Button';
    EventType.Bmap = 'Bmap';
    EventType.BmapHex = 'BmapHex';
    return EventType;
}());
exports.EventType = EventType;
Object.freeze(EventType);
var EventIntrinsicAction = (function () {
    function EventIntrinsicAction() {
    }
    EventIntrinsicAction.None = 'None';
    EventIntrinsicAction.SequenceForward = 'SeqFwd';
    EventIntrinsicAction.SequenceBackward = 'SeqBack';
    EventIntrinsicAction.ReturnToPriorState = 'ReturnToPriorState';
    EventIntrinsicAction.StopPlayback = 'StopPlayback';
    EventIntrinsicAction.StopPlaybackAndClearScreen = 'StopPlaybackAndClearScreen';
    return EventIntrinsicAction;
}());
exports.EventIntrinsicAction = EventIntrinsicAction;
var BpType = (function () {
    function BpType() {
    }
    BpType.Bp200 = 'bp200';
    BpType.Bp900 = 'bp900';
    BpType.Gpio = 'gpio';
    return BpType;
}());
exports.BpType = BpType;
Object.freeze(BpType);
var GpioType = (function () {
    function GpioType() {
    }
    GpioType.Input = 'input';
    GpioType.Output = 'output';
    return GpioType;
}());
exports.GpioType = GpioType;
Object.freeze(GpioType);
var BpIndex = (function () {
    function BpIndex() {
    }
    BpIndex.A = 'a';
    BpIndex.B = 'b';
    BpIndex.C = 'c';
    BpIndex.D = 'd';
    return BpIndex;
}());
exports.BpIndex = BpIndex;
Object.freeze(BpIndex);
var ButtonPanelName = (function () {
    function ButtonPanelName() {
    }
    ButtonPanelName.Bp900a = 'bp900a';
    ButtonPanelName.Bp900b = 'bp900b';
    ButtonPanelName.Bp900c = 'bp900c';
    ButtonPanelName.Bp900d = 'bp900d';
    ButtonPanelName.Bp200a = 'bp200a';
    ButtonPanelName.Bp200b = 'bp200b';
    ButtonPanelName.Bp200c = 'bp200c';
    ButtonPanelName.Bp200d = 'bp200d';
    return ButtonPanelName;
}());
exports.ButtonPanelName = ButtonPanelName;
Object.freeze(ButtonPanelName);
exports.ButtonPanelNameArray = [
    'bp900a', 'bp900b', 'bp900c', 'bp900d', 'bp200a', 'bp200b', 'bp200c', 'bp200d',
];
var ButtonDirection = (function () {
    function ButtonDirection() {
    }
    ButtonDirection.Down = 'Down';
    ButtonDirection.Up = 'Up';
    return ButtonDirection;
}());
exports.ButtonDirection = ButtonDirection;
Object.freeze(ButtonDirection);
var IrReceiverSource = (function () {
    function IrReceiverSource() {
    }
    IrReceiverSource.IrIn = 'Ir-in';
    IrReceiverSource.GPIO = 'GPIO';
    IrReceiverSource.Iguana = 'Iguana';
    IrReceiverSource.None = 'None';
    return IrReceiverSource;
}());
exports.IrReceiverSource = IrReceiverSource;
Object.freeze(IrReceiverSource);
var IrReceiverEncodings = (function () {
    function IrReceiverEncodings() {
    }
    IrReceiverEncodings.NEC = 'NEC';
    IrReceiverEncodings.RC5 = 'RC5';
    return IrReceiverEncodings;
}());
exports.IrReceiverEncodings = IrReceiverEncodings;
Object.freeze(IrReceiverEncodings);
var IrTransmitterDestination = (function () {
    function IrTransmitterDestination() {
    }
    IrTransmitterDestination.IrOut = 'Ir-out';
    IrTransmitterDestination.Iguana = 'Iguana';
    IrTransmitterDestination.None = 'None';
    return IrTransmitterDestination;
}());
exports.IrTransmitterDestination = IrTransmitterDestination;
Object.freeze(IrTransmitterDestination);
var RegionDirection = (function () {
    function RegionDirection() {
    }
    RegionDirection.Enter = 'Enter';
    RegionDirection.Exit = 'Exit';
    return RegionDirection;
}());
exports.RegionDirection = RegionDirection;
Object.freeze(RegionDirection);
var DistanceUnits = (function () {
    function DistanceUnits() {
    }
    DistanceUnits.Miles = 'Miles';
    DistanceUnits.Kilometers = 'Kilometers';
    return DistanceUnits;
}());
exports.DistanceUnits = DistanceUnits;
Object.freeze(DistanceUnits);
var TransitionType = (function () {
    function TransitionType() {
    }
    TransitionType.None = 'None';
    TransitionType.NoEffect = 'No effect';
    TransitionType.WipeTop = 'Image wipe from top';
    TransitionType.WipeBottom = 'Image wipe from bottom';
    TransitionType.WipeLeft = 'Image wipe from left';
    TransitionType.WipeRight = 'Image wipe from right';
    TransitionType.ExplodeFromCenter = 'Explode from center';
    TransitionType.ExplodeTopLeft = 'Explode top left';
    TransitionType.ExplodeTopRight = 'Explode top right';
    TransitionType.ExplodeBottomLeft = 'Explode bottom left';
    TransitionType.ExplodeBottomRight = 'Explode bottom right';
    TransitionType.BlindsVertical = 'Venetian blinds - vertical';
    TransitionType.BlindsHorizontal = 'Venetian blinds - horizontal';
    TransitionType.CombVertical = 'Comb effect - vertical';
    TransitionType.CombHorizontal = 'Comb effect - horizontal';
    TransitionType.FadeToBackground = 'Fade to background color';
    TransitionType.Fade = 'Fade to new image';
    TransitionType.SlideFromTop = 'Slide from top';
    TransitionType.SlideFromBottom = 'Slide from bottom';
    TransitionType.SlideFromLeft = 'Slide from left';
    TransitionType.SlideFromRight = 'Slide from right';
    return TransitionType;
}());
exports.TransitionType = TransitionType;
Object.freeze(TransitionType);
var CompareOperator = (function () {
    function CompareOperator() {
    }
    CompareOperator.EQ = 'EQ';
    CompareOperator.NEQ = 'NEQ';
    CompareOperator.BTW = 'BTW';
    CompareOperator.GT = 'GT';
    CompareOperator.GTE = 'GTE';
    CompareOperator.LT = 'LT';
    CompareOperator.LTE = 'LTE';
    return CompareOperator;
}());
exports.CompareOperator = CompareOperator;
Object.freeze(CompareOperator);
var CommandType = (function () {
    function CommandType() {
    }
    CommandType.SendBpOutput = 'sendBpOutput';
    CommandType.SetAllAudioOutputs = 'setAllAudioOutputs';
    CommandType.SetAudioMode = 'setAudioMode';
    CommandType.ConfigureAudioResources = 'configureAudioResources';
    CommandType.SetConnectorVolume = 'setConnectorVolume';
    CommandType.IncrementConnectorVolume = 'incrementConnectorVolume';
    CommandType.DecrementConnectorVolume = 'decrementConnectorVolume';
    CommandType.MuteAudioOutputs = 'muteAudioOutputs';
    CommandType.UnmuteAudioOutputs = 'unmuteAudioOutputs';
    CommandType.SetZoneVolume = 'setZoneVolume';
    CommandType.IncrementZoneVolume = 'incrementZoneVolume';
    CommandType.DecrementZoneVolume = 'decrementZoneVolume';
    CommandType.SetZoneChannelVolume = 'setZoneChannelVolume';
    CommandType.IncrementZoneChannelVolume = 'incrementZoneChannelVolume';
    CommandType.DecrementZoneChannelVolume = 'decrementZoneChannelVolume';
    CommandType.SendZoneMessage = 'sendZoneMessage';
    CommandType.SendUdp = 'sendUdp';
    CommandType.SendUdpBytes = 'sendUdpBytes';
    CommandType.SendIRRemote = 'sendIRRemote';
    CommandType.SendProntoIRRemote = 'sendProntoIRRemote';
    CommandType.SerialSendString = 'serialSendString';
    CommandType.SerialSendByte = 'serialSendByte';
    CommandType.SerialSendBytes = 'serialSendBytes';
    CommandType.SendPluginMessage = 'sendPluginMessage';
    CommandType.Synchronize = 'synchronize';
    CommandType.InternalSynchronize = 'internalSynchronize';
    CommandType.GpioOn = 'gpioOn';
    CommandType.GpioOff = 'gpioOff';
    CommandType.GpioSetState = 'gpioSetState';
    CommandType.PauseVideo = 'pauseVideo';
    CommandType.ResumeVideo = 'resumeVideo';
    CommandType.EnablePowerSaveMode = 'enablePowerSaveMode';
    CommandType.DisablePowerSaveMode = 'disablePowerSaveMode';
    CommandType.CecDisplayOn = 'cecDisplayOn';
    CommandType.CecDisplayOff = 'cecDisplayOff';
    CommandType.CecSetSourceToBrightSign = 'cecSetSourceToBrightSign';
    CommandType.CecSendString = 'cecSendString';
    CommandType.CecPhilipsSetVolume = 'cecPhilipsSetVolume';
    CommandType.BeaconStart = 'beaconStart';
    CommandType.BeaconStop = 'beaconStop';
    CommandType.Pause = 'pause';
    CommandType.Resume = 'resume';
    CommandType.SetVariable = 'setVariable';
    CommandType.IncrementVariable = 'incrementVariable';
    CommandType.DecrementVariable = 'decrementVariable';
    CommandType.ResetVariable = 'resetVariable';
    CommandType.ResetVariables = 'resetVariables';
    CommandType.SwitchPresentation = 'switchPresentation';
    CommandType.UpdateDataFeed = 'updateDataFeed';
    CommandType.ResizeZone = 'resizeZone';
    CommandType.HideZone = 'hideZone';
    CommandType.ShowZone = 'showZone';
    CommandType.PauseZonePlayback = 'pauseZonePlayback';
    CommandType.ResumeZonePlayback = 'resumeZonePlayback';
    CommandType.Reboot = 'reboot';
    CommandType.SendBLC400Output = 'sendBLC400Output';
    CommandType.SendWss = 'sendWss';
    CommandType.LightOn = 'lightOn';
    CommandType.LightOff = 'lightOff';
    CommandType.SendBmap = 'sendBmap';
    CommandType.SendBmapHex = 'sendBmapHex';
    return CommandType;
}());
exports.CommandType = CommandType;
Object.freeze(CommandType);
var CommandSequenceType = (function () {
    function CommandSequenceType() {
    }
    CommandSequenceType.StateEntry = 'StateEntry';
    CommandSequenceType.StateExit = 'StateExit';
    CommandSequenceType.Event = 'Event';
    CommandSequenceType.Transition = 'Transition';
    CommandSequenceType.SequenceItemNext = 'ItemNext';
    CommandSequenceType.SequenceItemPrevious = 'ItemPrev';
    return CommandSequenceType;
}());
exports.CommandSequenceType = CommandSequenceType;
Object.freeze(CommandSequenceType);
var BpAction = (function () {
    function BpAction() {
    }
    BpAction.Off = 'Off';
    BpAction.On = 'On';
    BpAction.FastBlink = 'FastBlink';
    BpAction.MediumBlink = 'MediumBlink';
    BpAction.SlowBlink = 'SlowBlink';
    return BpAction;
}());
exports.BpAction = BpAction;
Object.freeze(BpAction);
var BlcIndex = (function () {
    function BlcIndex() {
    }
    BlcIndex.A = 'a';
    BlcIndex.B = 'b';
    BlcIndex.C = 'c';
    return BlcIndex;
}());
exports.BlcIndex = BlcIndex;
Object.freeze(BlcIndex);
var BlcEffect = (function () {
    function BlcEffect() {
    }
    BlcEffect.Intensity = 'Intensity';
    BlcEffect.Blink = 'Blink';
    BlcEffect.Breathe = 'Breathe';
    BlcEffect.Strobe = 'Strobe';
    BlcEffect.Marquee = 'Marquee';
    return BlcEffect;
}());
exports.BlcEffect = BlcEffect;
Object.freeze(BlcEffect);
var BlcBlink = (function () {
    function BlcBlink() {
    }
    BlcBlink.FastBlink = 'FastBlink';
    BlcBlink.MediumBlink = 'MediumBlink';
    BlcBlink.SlowBlink = 'SlowBlink';
    return BlcBlink;
}());
exports.BlcBlink = BlcBlink;
Object.freeze(BlcBlink);
var BlcPlaybackMode = (function () {
    function BlcPlaybackMode() {
    }
    BlcPlaybackMode.Loop = 'Loop';
    BlcPlaybackMode.BackAndForth = 'BackAndForth';
    BlcPlaybackMode.PlayOnce = 'PlayOnce';
    BlcPlaybackMode.Random = 'Random';
    return BlcPlaybackMode;
}());
exports.BlcPlaybackMode = BlcPlaybackMode;
Object.freeze(BlcPlaybackMode);
var BlcTransitionMode = (function () {
    function BlcTransitionMode() {
    }
    BlcTransitionMode.HardOnOff = 'HardOnOff';
    BlcTransitionMode.SmoothDelay = 'SmoothDelay';
    BlcTransitionMode.SmoothFullOverlap = 'SmoothFullOverlap';
    BlcTransitionMode.SmoothPartialOverlap = 'SmoothPartialOverlap';
    return BlcTransitionMode;
}());
exports.BlcTransitionMode = BlcTransitionMode;
Object.freeze(BlcTransitionMode);
var BlcChannels = (function () {
    function BlcChannels() {
    }
    BlcChannels.A = 'A';
    BlcChannels.B = 'B';
    BlcChannels.C = 'C';
    BlcChannels.D = 'D';
    return BlcChannels;
}());
exports.BlcChannels = BlcChannels;
Object.freeze(BlcChannels);
var AccessType = (function () {
    function AccessType() {
    }
    AccessType.Private = 'Private';
    AccessType.Shared = 'Shared';
    return AccessType;
}());
exports.AccessType = AccessType;
Object.freeze(AccessType);
var StringParameterType = (function () {
    function StringParameterType() {
    }
    StringParameterType.Text = 'Text';
    StringParameterType.UserVariable = 'UserVariable';
    StringParameterType.UserVariableName = 'UserVariableName';
    return StringParameterType;
}());
exports.StringParameterType = StringParameterType;
Object.freeze(StringParameterType);
var NumberParameterType = (function () {
    function NumberParameterType() {
    }
    NumberParameterType.Number = 'Number';
    NumberParameterType.UserVariable = 'UserVariable';
    NumberParameterType.UserVariableName = 'UserVariableName';
    return NumberParameterType;
}());
exports.NumberParameterType = NumberParameterType;
Object.freeze(NumberParameterType);
var SystemVariableType = (function () {
    function SystemVariableType() {
    }
    SystemVariableType.SerialNumber = 'SerialNumber';
    SystemVariableType.IPAddressWired = 'IPAddressWired';
    SystemVariableType.IPAddressWireless = 'IPAddressWireless';
    SystemVariableType.FirmwareVersion = 'FirmwareVersion';
    SystemVariableType.ScriptVersion = 'ScriptVersion';
    SystemVariableType.EdidMonitorSerialNumber = 'EdidMonitorSerialNumber';
    SystemVariableType.EdidYearOfManufacture = 'EdidYearOfManufacture';
    SystemVariableType.EdidMonitorName = 'EdidMonitorName';
    SystemVariableType.EdidManufacturer = 'EdidManufacturer';
    SystemVariableType.EdidUnspecifiedText = 'EdidUnspecifiedText';
    SystemVariableType.EdidSerialNumber = 'EdidSerialNumber';
    SystemVariableType.EdidManufacturerProductCode = 'EdidManufacturerProductCode';
    SystemVariableType.EdidWeekOfManufacture = 'EdidWeekOfManufacture';
    SystemVariableType.ActivePresentation = 'ActivePresentation';
    return SystemVariableType;
}());
exports.SystemVariableType = SystemVariableType;
var MediaListPlaybackType = (function () {
    function MediaListPlaybackType() {
    }
    MediaListPlaybackType.FromBeginning = 'FromBeginning';
    MediaListPlaybackType.NextInList = 'NextInList';
    MediaListPlaybackType.FromIndex = 'FromIndex';
    return MediaListPlaybackType;
}());
exports.MediaListPlaybackType = MediaListPlaybackType;
var PlayFileTriggerType = (function () {
    function PlayFileTriggerType() {
    }
    PlayFileTriggerType.ByEventData = 'ByEventData';
    PlayFileTriggerType.ByUserVariable = 'ByUserVariable';
    return PlayFileTriggerType;
}());
exports.PlayFileTriggerType = PlayFileTriggerType;
var HtmlSiteType = (function () {
    function HtmlSiteType() {
    }
    HtmlSiteType.Hosted = 'Hosted';
    HtmlSiteType.Remote = 'Remote';
    return HtmlSiteType;
}());
exports.HtmlSiteType = HtmlSiteType;
Object.freeze(HtmlSiteType);
var DataFeedType = (function () {
    function DataFeedType() {
    }
    DataFeedType.URLDataFeed = 'URLDataFeed';
    DataFeedType.BSNDataFeed = 'BSNDataFeed';
    DataFeedType.BSNMediaFeed = 'BSNMediaFeed';
    DataFeedType.BSNDynamicPlaylist = 'BSNDynamicPlaylist';
    DataFeedType.BSNTaggedPlaylist = 'BSNTaggedPlaylist';
    return DataFeedType;
}());
exports.DataFeedType = DataFeedType;
Object.freeze(DataFeedType);
var DataFeedUsageType = (function () {
    function DataFeedUsageType() {
    }
    DataFeedUsageType.Text = 'Text';
    DataFeedUsageType.Mrss = 'MRSS';
    DataFeedUsageType.MrssWith4K = 'MRSSWith4K';
    DataFeedUsageType.Content = 'Content';
    return DataFeedUsageType;
}());
exports.DataFeedUsageType = DataFeedUsageType;
Object.freeze(DataFeedUsageType);
var PlayerTagMatchingType = (function () {
    function PlayerTagMatchingType() {
    }
    PlayerTagMatchingType.DoNotMatchTags = 'DoNotMatchTags';
    PlayerTagMatchingType.MatchAllMediaTagsToPlayerTags = 'MatchAllMediaTagsToPlayerTags';
    PlayerTagMatchingType.MatchAllPlayerTagsToMediaTags = 'MatchAllPlayerTagsToMediaTags';
    PlayerTagMatchingType.MatchAnyPlayerAndMediaTags = 'MatchAnyPlayerAndMediaTags';
    return PlayerTagMatchingType;
}());
exports.PlayerTagMatchingType = PlayerTagMatchingType;
Object.freeze(PlayerTagMatchingType);
var TwitterFeedRestrictionType = (function () {
    function TwitterFeedRestrictionType() {
    }
    TwitterFeedRestrictionType.None = 'None';
    TwitterFeedRestrictionType.ByCount = 'ByCount';
    TwitterFeedRestrictionType.ByRecentDays = 'ByRecentDays';
    return TwitterFeedRestrictionType;
}());
exports.TwitterFeedRestrictionType = TwitterFeedRestrictionType;
exports.BsBlack = { a: 255, r: 0, g: 0, b: 0 };
Object.freeze(exports.BsBlack);
function bscIsBsColor(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('r')
        && value.hasOwnProperty('g')
        && value.hasOwnProperty('b')
        && value.hasOwnProperty('a');
}
exports.bscIsBsColor = bscIsBsColor;
function bscIsBsSize(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('height')
        && value.hasOwnProperty('width');
}
exports.bscIsBsSize = bscIsBsSize;
function getEnumKeyOfValue(enumType, value) {
    for (var _i = 0, _a = Object.keys(enumType); _i < _a.length; _i++) {
        var key = _a[_i];
        if (enumType[key] === value) {
            return key;
        }
    }
    return null;
}
exports.getEnumKeyOfValue = getEnumKeyOfValue;
function isInstanceOfEnum(enumType, value) {
    return getEnumKeyOfValue(enumType, value) !== null;
}
exports.isInstanceOfEnum = isInstanceOfEnum;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

module.exports = isString;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PlayerFamily = (function () {
    function PlayerFamily() {
    }
    PlayerFamily.Unknown = 'Unknown';
    PlayerFamily.Malibu = 'Malibu';
    PlayerFamily.Pagani = 'Pagani';
    PlayerFamily.Impala = 'Impala';
    PlayerFamily.Pantera = 'Pantera';
    PlayerFamily.Tiger = 'Tiger';
    PlayerFamily.Sebring = 'Sebring';
    PlayerFamily.Lynx = 'Lynx';
    PlayerFamily.Bobcat = 'Bobcat';
    PlayerFamily.Cheetah = 'Cheetah';
    PlayerFamily.Panther = 'Panther';
    PlayerFamily.Puma = 'Puma';
    PlayerFamily.Monaco = 'Monaco';
    return PlayerFamily;
}());
exports.PlayerFamily = PlayerFamily;
Object.freeze(PlayerFamily);
var PlayerMachineNameSuffix = (function () {
    function PlayerMachineNameSuffix() {
    }
    PlayerMachineNameSuffix.SingleDecoder = 'Single_Decoder';
    PlayerMachineNameSuffix.No4K = 'No4K';
    return PlayerMachineNameSuffix;
}());
exports.PlayerMachineNameSuffix = PlayerMachineNameSuffix;
Object.freeze(PlayerMachineNameSuffix);
var PlayerModel = (function () {
    function PlayerModel() {
    }
    PlayerModel.Unknown = 'Unknown';
    PlayerModel.XD1034 = 'XD1034';
    PlayerModel.XD234 = 'XD234';
    PlayerModel.XT1144 = 'XT1144';
    PlayerModel.XT244 = 'XT244';
    PlayerModel.HD1024 = 'HD1024';
    PlayerModel.HD224 = 'HD224';
    PlayerModel.HS144 = 'HS144';
    PlayerModel.LS424 = 'LS424';
    PlayerModel.HS124 = 'HS124';
    PlayerModel.XD1033 = 'XD1033';
    PlayerModel.XD233 = 'XD233';
    PlayerModel.XT1043 = 'XT1043';
    PlayerModel.XT1143 = 'XT1143';
    PlayerModel.XT243 = 'XT243';
    PlayerModel.HD1023 = 'HD1023';
    PlayerModel.HD223 = 'HD223';
    PlayerModel.HS123 = 'HS123';
    PlayerModel.HO523 = 'HO523';
    PlayerModel.LS423 = 'LS423';
    PlayerModel.FK1142 = '4K1142';
    PlayerModel.FK1042 = '4K1042';
    PlayerModel.FK242 = '4K242';
    PlayerModel.AU325 = 'AU325';
    PlayerModel.AU335 = 'AU335';
    PlayerModel.XD1132 = 'XD1132';
    PlayerModel.XD1032 = 'XD1032';
    PlayerModel.XD232 = 'XD232';
    PlayerModel.HD1022 = 'HD1022';
    PlayerModel.HD222 = 'HD222';
    PlayerModel.HD972 = 'HD972';
    PlayerModel.HD922 = 'HD922';
    PlayerModel.XD1230 = 'XD1230';
    PlayerModel.XD1030 = 'XD1030';
    PlayerModel.XD230 = 'XD230';
    PlayerModel.HD1020 = 'HD1020';
    PlayerModel.HD220 = 'HD220';
    PlayerModel.HD120 = 'HD120';
    PlayerModel.LS422 = 'LS422';
    PlayerModel.LS322 = 'LS322';
    PlayerModel.AU320 = 'AU320';
    PlayerModel.HD970 = 'HD970';
    PlayerModel.HD920 = 'HD920';
    PlayerModel.A915 = 'A915';
    PlayerModel.HD917 = 'HD917';
    PlayerModel.HD210 = 'HD210';
    PlayerModel.HD1010 = 'HD1010';
    PlayerModel.TD1012 = 'TD1012';
    return PlayerModel;
}());
exports.PlayerModel = PlayerModel;
var MalibuModelArray = [
    PlayerModel.XD1034,
    PlayerModel.XD234,
    PlayerModel.XT1144,
    PlayerModel.XT244,
];
exports.MalibuModels = new Set(MalibuModelArray);
var PaganiModelArray = [
    PlayerModel.HD1024,
    PlayerModel.HD224,
    PlayerModel.HS144,
];
exports.PaganiModels = new Set(PaganiModelArray);
var PaganiHDModelArray = [
    PlayerModel.LS424,
    PlayerModel.HS124,
];
exports.PaganiHDModels = new Set(PaganiHDModelArray);
var ImpalaModelArray = [
    PlayerModel.XD1033,
    PlayerModel.XD233,
    PlayerModel.XT1043,
    PlayerModel.XT1143,
    PlayerModel.XT243,
];
exports.ImpalaModels = new Set(ImpalaModelArray);
var PanteraModelArray = [
    PlayerModel.HD1023,
    PlayerModel.HD223,
    PlayerModel.HS123,
    PlayerModel.HO523,
    PlayerModel.LS423,
];
exports.PanteraModels = new Set(PanteraModelArray);
var TigerModelArray = [
    PlayerModel.FK1142,
    PlayerModel.FK1042,
    PlayerModel.FK242,
];
exports.TigerModels = new Set(TigerModelArray);
var SebringModelArray = [
    PlayerModel.AU325,
    PlayerModel.AU335,
];
exports.SebringModels = new Set(SebringModelArray);
var LynxModelArray = [
    PlayerModel.XD1132,
    PlayerModel.XD1032,
    PlayerModel.XD232,
];
exports.LynxModels = new Set(LynxModelArray);
var BobcatModelArray = [
    PlayerModel.HD1022,
    PlayerModel.HD222,
    PlayerModel.HD972,
    PlayerModel.HD922,
];
exports.BobcatModels = new Set(BobcatModelArray);
var CheetahModelArray = [
    PlayerModel.XD1230,
    PlayerModel.XD1030,
    PlayerModel.XD230,
];
exports.CheetahModels = new Set(CheetahModelArray);
var PantherModelArray = [
    PlayerModel.HD1020,
    PlayerModel.HD220,
    PlayerModel.HD120,
    PlayerModel.LS422,
    PlayerModel.LS322,
    PlayerModel.AU320,
];
exports.PantherModels = new Set(PantherModelArray);
var PumaModelArray = [
    PlayerModel.HD970,
    PlayerModel.HD920,
    PlayerModel.A915,
    PlayerModel.HD917,
];
exports.PumaModels = new Set(PumaModelArray);
var MonacoModelArray = [
    PlayerModel.HD210,
    PlayerModel.HD1010,
    PlayerModel.TD1012,
];
exports.MonacoModels = new Set(MonacoModelArray);
exports.Series4Models = new Set(MalibuModelArray.concat(PaganiModelArray, PaganiHDModelArray));
exports.Series3Models = new Set(ImpalaModelArray.concat(PanteraModelArray));
exports.Series2Models = new Set(TigerModelArray.concat(LynxModelArray, BobcatModelArray));
exports.AllModels = new Set(MalibuModelArray.concat(PaganiModelArray, PaganiHDModelArray, ImpalaModelArray, PanteraModelArray, TigerModelArray, SebringModelArray, LynxModelArray, BobcatModelArray, CheetahModelArray, PantherModelArray, PumaModelArray, MonacoModelArray));
var PaganiPrefixArray = [
    '24', '25', '42', '43',
    '44', '45', '46', '47',
    '48', '49', '58', '59',
    '64', '65', '66',
];
var PanteraPrefixArray = [
    '31', '33', '35', '38',
    '53', '55', '57', '61',
];
var ImpalaPrefixArray = [
    '62', '63', 'L6', 'L8',
    'L9', 'R1', 'R2', 'R3',
    'R4', 'R6', 'R7',
];
var MalibuPrefixArray = [
    '67', 'D1', 'D2', 'D3',
    'D4', 'D5', 'D6', 'D7',
    'D8', 'D9', 'E1', 'E2',
    'E3', 'E4', 'E5',
];
var TigerPrefixArray = [
    'X3', 'X4', 'X5',
];
var SebringPrefixArray = [
    'AA', 'AC',
];
function bscSerialToPlayerFamily(serialNumber) {
    if (serialNumber && serialNumber.length > 1) {
        var prefix_1 = serialNumber.substring(0, 2);
        if (PaganiPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Pagani;
        }
        if (PanteraPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Pantera;
        }
        if (ImpalaPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Impala;
        }
        if (MalibuPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Malibu;
        }
        if (TigerPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Tiger;
        }
        if (SebringPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Sebring;
        }
    }
    return null;
}
exports.bscSerialToPlayerFamily = bscSerialToPlayerFamily;
function bscPlayerModelToPlayerFamily(model) {
    if (exports.MalibuModels.has(model)) {
        return PlayerFamily.Malibu;
    }
    else if (exports.PaganiModels.has(model) || exports.PaganiHDModels.has(model)) {
        return PlayerFamily.Pagani;
    }
    else if (exports.ImpalaModels.has(model)) {
        return PlayerFamily.Impala;
    }
    else if (exports.PanteraModels.has(model)) {
        return PlayerFamily.Pantera;
    }
    else if (exports.TigerModels.has(model)) {
        return PlayerFamily.Tiger;
    }
    else if (exports.SebringModels.has(model)) {
        return PlayerFamily.Sebring;
    }
    else if (exports.LynxModels.has(model)) {
        return PlayerFamily.Lynx;
    }
    else if (exports.BobcatModels.has(model)) {
        return PlayerFamily.Bobcat;
    }
    else if (exports.CheetahModels.has(model)) {
        return PlayerFamily.Cheetah;
    }
    else if (exports.PantherModels.has(model)) {
        return PlayerFamily.Panther;
    }
    else if (exports.PumaModels.has(model)) {
        return PlayerFamily.Puma;
    }
    else if (exports.MonacoModels.has(model)) {
        return PlayerFamily.Monaco;
    }
    else {
        return PlayerFamily.Unknown;
    }
}
exports.bscPlayerModelToPlayerFamily = bscPlayerModelToPlayerFamily;
function bscGetBsnFirmwareKeyForPlayerModel(model) {
    switch (bscPlayerModelToPlayerFamily(model)) {
        case PlayerFamily.Malibu: return 'xdX34_XTX44Firmware';
        case PlayerFamily.Pagani: return 'hdX4_HSX4_LSX4Firmware';
        case PlayerFamily.Impala: {
            switch (model) {
                case PlayerModel.XD1033:
                case PlayerModel.XD233:
                    return 'xdX33Firmware';
                default:
                    return 'xtX43Firmware';
            }
        }
        case PlayerFamily.Pantera: {
            switch (model) {
                case PlayerModel.HS123:
                    return 'hsX23Firmware';
                case PlayerModel.HO523:
                    return 'hoX23Firmware';
                case PlayerModel.LS423:
                    return 'lsX23Firmware';
                default:
                    return 'hdX23Firmware';
            }
        }
        case PlayerFamily.Tiger: return '4KX42Firmware';
        case PlayerFamily.Lynx: return 'xdX32Firmware';
        case PlayerFamily.Sebring: return 'aux5Firmware';
    }
    return null;
}
exports.bscGetBsnFirmwareKeyForPlayerModel = bscGetBsnFirmwareKeyForPlayerModel;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var metadata_1 = __webpack_require__(1);
var isomorphic_path_1 = __webpack_require__(24);
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var isUndefined = __webpack_require__(23);
exports.BsAssetIdNone = '0';
function bscIsValidAssetId(id) {
    return typeof id === 'string' && id.length >= 8;
}
exports.bscIsValidAssetId = bscIsValidAssetId;
var AssetLocation = (function () {
    function AssetLocation() {
    }
    AssetLocation.Local = 'Local';
    AssetLocation.Bsn = 'Bsn';
    AssetLocation.Ftp = 'Ftp';
    AssetLocation.Blob = 'Blob';
    return AssetLocation;
}());
exports.AssetLocation = AssetLocation;
Object.freeze(AssetLocation);
var AssetType = (function () {
    function AssetType() {
    }
    AssetType.Content = 'Content';
    AssetType.Project = 'Project';
    AssetType.ProjectBpf = 'ProjectBpf';
    AssetType.ProjectFragment = 'ProjectFragment';
    AssetType.Schedule = 'Schedule';
    AssetType.BrightScript = 'BrightScript';
    AssetType.HtmlSite = 'HtmlSite';
    AssetType.DeviceHtmlSite = 'DeviceHtmlSite';
    AssetType.Folder = 'Folder';
    AssetType.BSNDataFeed = 'BSNDataFeed';
    AssetType.BSNMediaFeed = 'BSNMediaFeed';
    AssetType.BSNDynamicPlaylist = 'BSNDynamicPlaylist';
    AssetType.BSNTaggedPlaylist = 'BSNTaggedPlaylist';
    AssetType.Other = 'Other';
    return AssetType;
}());
exports.AssetType = AssetType;
Object.freeze(AssetType);
var BseChildAssetType = (function (_super) {
    __extends(BseChildAssetType, _super);
    function BseChildAssetType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BseChildAssetType.Asset = 'Asset';
    BseChildAssetType.Component = 'Component';
    return BseChildAssetType;
}(AssetType));
exports.BseChildAssetType = BseChildAssetType;
Object.freeze(BseChildAssetType);
var FtpObjectPermissionGroup;
(function (FtpObjectPermissionGroup) {
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Owner"] = 0] = "Owner";
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Group"] = 1] = "Group";
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Other"] = 2] = "Other";
})(FtpObjectPermissionGroup = exports.FtpObjectPermissionGroup || (exports.FtpObjectPermissionGroup = {}));
function bscIsVideoData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Video;
}
exports.bscIsVideoData = bscIsVideoData;
function bscIsAudioData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Audio;
}
exports.bscIsAudioData = bscIsAudioData;
function bscIsImageData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Image;
}
exports.bscIsImageData = bscIsImageData;
function bscConvertProbeDataToAvMetadata(probeData, mediaType) {
    var getHexNumber = function (v) {
        var n = parseInt(v, 16);
        return isNaN(n) ? 0 : n;
    };
    var getNumber = function (v) {
        var n = parseInt(v, 10);
        return isNaN(n) ? 0 : n;
    };
    var getFloatNumber = function (v) {
        var n = parseFloat(v);
        return isNaN(n) ? 0 : Math.round(n * 1000) / 1000;
    };
    if (mediaType === metadata_1.MediaType.Video || mediaType === metadata_1.MediaType.Audio) {
        var metadata_2 = mediaType === metadata_1.MediaType.Audio ?
            { mediaType: 'Audio' } :
            { mediaType: 'Video', size: { width: -1, height: -1 } };
        var items = probeData.split('|');
        items.forEach(function (item) {
            var pair = item.split('=');
            if (pair.length === 2) {
                var val = pair[1];
                switch (pair[0]) {
                    case 'AB':
                        metadata_2.audioBitrate = getHexNumber(val);
                        break;
                    case 'AC':
                        metadata_2.audioCodec = val;
                        break;
                    case 'ACH':
                        metadata_2.audioChannelCount = getNumber(val);
                        break;
                    case 'AD':
                        metadata_2.audioDuration = getHexNumber(val) / 1000;
                        break;
                    case 'AP':
                        metadata_2.audioPid = getNumber(val);
                        break;
                    case 'ASR':
                        metadata_2.audioSampleRate = getNumber(val);
                        break;
                    case 'CD':
                        metadata_2.colorDepth = getNumber(val);
                        break;
                    case 'D':
                        metadata_2.duration = getHexNumber(val) / 1000;
                        break;
                    case 'FT':
                        metadata_2.firstTimestamp = getNumber(val);
                        break;
                    case 'H':
                        metadata_2.size.height = getNumber(val);
                        break;
                    case 'IX':
                        metadata_2.indexed = val.length > 0 && val[0].toUpperCase() === 'Y';
                        break;
                    case 'PL':
                        metadata_2.packetLen = getNumber(val);
                        break;
                    case 'SL':
                        metadata_2.subtitleLanguage = val;
                        break;
                    case 'SP':
                        metadata_2.subtitlePid = getNumber(val);
                        break;
                    case 'TT':
                        metadata_2.transport = val;
                        break;
                    case 'VC':
                        metadata_2.videoCodec = val;
                        break;
                    case 'VD':
                        metadata_2.videoDuration = getHexNumber(val) / 1000;
                        break;
                    case 'VFR':
                        metadata_2.videoFrameRate = getFloatNumber(val);
                        break;
                    case 'VP':
                        metadata_2.videoPid = getNumber(val);
                        break;
                    case 'W':
                        metadata_2.size.width = getNumber(val);
                        break;
                }
            }
        });
        return metadata_2;
    }
    return {};
}
exports.bscConvertProbeDataToAvMetadata = bscConvertProbeDataToAvMetadata;
var BsProjectFragmentType = (function () {
    function BsProjectFragmentType() {
    }
    BsProjectFragmentType.None = 'None';
    BsProjectFragmentType.MediaStateCopySet = 'MediaStateCopySet';
    BsProjectFragmentType.CommandCopySet = 'CommandCopySet';
    BsProjectFragmentType.LiveTextItemCopySet = 'LiveTextItemCopySet';
    BsProjectFragmentType.UserVariableCopySet = 'UserVariableCopySet';
    BsProjectFragmentType.UserDefinedEventSet = 'UserDefinedEventSet';
    return BsProjectFragmentType;
}());
exports.BsProjectFragmentType = BsProjectFragmentType;
function bscCreateLocalAssetThumbnail(data, type, size, hash) {
    return {
        kind: 'local',
        type: type, data: data,
        size: isNil(size) ? null : size,
        hash: isNil(hash) ? null : hash.toLowerCase(),
    };
}
exports.bscCreateLocalAssetThumbnail = bscCreateLocalAssetThumbnail;
function bscCreateNetworkAssetThumbnail(url, size, hash) {
    return {
        kind: 'network',
        url: url,
        size: isNil(size) ? null : size,
        hash: isNil(hash) ? null : hash.toLowerCase(),
    };
}
exports.bscCreateNetworkAssetThumbnail = bscCreateNetworkAssetThumbnail;
function bscIsLocalAssetThumbnail(assetThumbnail) {
    return assetThumbnail.kind === 'local';
}
exports.bscIsLocalAssetThumbnail = bscIsLocalAssetThumbnail;
function bscIsAssetLocator(item) {
    return item != null
        && typeof item === 'object'
        && item.hasOwnProperty('name')
        && item.hasOwnProperty('assetType')
        && item.hasOwnProperty('location');
}
exports.bscIsAssetLocator = bscIsAssetLocator;
function bscIsAssetItem(item) {
    return bscIsAssetLocator(item) && item.hasOwnProperty('locator');
}
exports.bscIsAssetItem = bscIsAssetItem;
function bscAssetItemIsBsnDataFeed(item) {
    return item.hasOwnProperty('assetType')
        && (item.assetType === AssetType.BSNDataFeed
            || item.assetType === AssetType.BSNMediaFeed
            || item.assetType === AssetType.BSNDynamicPlaylist
            || item.assetType === AssetType.BSNTaggedPlaylist);
}
exports.bscAssetItemIsBsnDataFeed = bscAssetItemIsBsnDataFeed;
function bscAssetItemFromAssetLocator(assetLocator) {
    var assetItem = __assign(__assign({ id: exports.BsAssetIdNone }, assetLocator), { locator: bscGenerateAssetLocatorKey(assetLocator) });
    if (assetItem.assetType === AssetType.Content) {
        assetItem.mediaType = bscGetFileMediaType(assetItem.name);
    }
    return assetItem;
}
exports.bscAssetItemFromAssetLocator = bscAssetItemFromAssetLocator;
function bscAssetLocatorFromAssetItem(assetItem) {
    var name = assetItem.name, path = assetItem.path, location = assetItem.location, assetType = assetItem.assetType, childAssetType = assetItem.childAssetType, networkId = assetItem.networkId, scope = assetItem.scope, origin = assetItem.origin;
    var locator = { name: name, path: path, location: location, assetType: assetType, networkId: networkId, scope: scope };
    if (!isNil(childAssetType)) {
        locator.childAssetType = childAssetType;
    }
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorFromAssetItem = bscAssetLocatorFromAssetItem;
function bscAssetLocatorForBsnAsset(assetType, bsnId, network, name, path, origin) {
    if (network === void 0) { network = ''; }
    if (name === void 0) { name = ''; }
    if (path === void 0) { path = ''; }
    var locator = {
        name: isNil(name) ? '' : name,
        path: isNil(path) ? '' : path,
        location: AssetLocation.Bsn,
        assetType: assetType,
        networkId: bsnId,
        scope: isNil(network) ? '' : network,
    };
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorForBsnAsset = bscAssetLocatorForBsnAsset;
function bscGetAssetName(locator) {
    if (locator.location === AssetLocation.Bsn && locator.assetType !== AssetType.Content) {
        return locator.name;
    }
    return isomorphic_path_1.default.basename(locator.name, isomorphic_path_1.default.extname(locator.name));
}
exports.bscGetAssetName = bscGetAssetName;
function bscGetAssetExtension(locator) {
    if (locator.location === AssetLocation.Local || locator.assetType === AssetType.Content) {
        return isomorphic_path_1.default.extname(locator.name);
    }
    return '';
}
exports.bscGetAssetExtension = bscGetAssetExtension;
var leadingSep = function (path, assetLocation) {
    var sep = isomorphic_path_1.default.sep;
    if (assetLocation === AssetLocation.Bsn || assetLocation === AssetLocation.Ftp) {
        sep = isomorphic_path_1.default.posix.sep;
    }
    return path.charAt(0) === sep ? '' : sep;
};
var trailingSep = function (path, assetLocation) {
    var sep = isomorphic_path_1.default.sep;
    if (assetLocation === AssetLocation.Bsn || assetLocation === AssetLocation.Ftp) {
        sep = isomorphic_path_1.default.posix.sep;
    }
    return !path || path.charAt(path.length - 1) === sep ? '' : sep;
};
function bscGetAssetFullPath(assetSpec) {
    if (assetSpec.location === AssetLocation.Local) {
        return isomorphic_path_1.default.join(assetSpec.path, assetSpec.name);
    }
    return assetSpec.path + trailingSep(assetSpec.path, assetSpec.location) + assetSpec.name;
}
exports.bscGetAssetFullPath = bscGetAssetFullPath;
function bscAssetLocatorForLocalAsset(assetType, fullPath, scope, origin) {
    if (scope === void 0) { scope = ''; }
    var dirName = isomorphic_path_1.default.dirname(fullPath);
    var locator = {
        name: isomorphic_path_1.default.basename(fullPath),
        path: dirName + trailingSep(dirName),
        location: AssetLocation.Local,
        assetType: assetType,
        networkId: 0,
        scope: isNil(scope) ? '' : scope,
    };
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorForLocalAsset = bscAssetLocatorForLocalAsset;
function bscGetAssetSpecification(location, assetType, path, fileName) {
    var dirName = isNil(fileName) ? isomorphic_path_1.default.dirname(path) : path;
    return {
        name: isNil(fileName) ? isomorphic_path_1.default.basename(path) : fileName,
        path: dirName + trailingSep(dirName, location),
        location: location,
        assetType: assetType,
    };
}
exports.bscGetAssetSpecification = bscGetAssetSpecification;
function bscAssetItemFromBasicAssetInfo(assetType, fileName, fileDirPath, bsnId, mediaType, scope, origin) {
    if (fileDirPath === void 0) { fileDirPath = null; }
    if (bsnId === void 0) { bsnId = 0; }
    if (mediaType === void 0) { mediaType = null; }
    if (scope === void 0) { scope = ''; }
    var assetLocator;
    if (!fileDirPath) {
        fileDirPath = isomorphic_path_1.default.sep;
    }
    if (isNil(scope)) {
        scope = '';
    }
    if (bsnId) {
        assetLocator = bscAssetLocatorForBsnAsset(assetType, bsnId, scope);
        assetLocator.name = fileName;
        assetLocator.path = fileDirPath;
    }
    else if (fileName) {
        var fullPath = isomorphic_path_1.default.join(fileDirPath, fileName);
        assetLocator = bscAssetLocatorForLocalAsset(assetType, fullPath, scope);
    }
    if (assetLocator) {
        if (origin) {
            assetLocator.origin = origin;
        }
        var assetItem = bscAssetItemFromAssetLocator(assetLocator);
        if (assetType === AssetType.Content) {
            assetItem.mediaType = mediaType ? mediaType : bscGetFileMediaType(assetItem.name);
        }
        return assetItem;
    }
    return null;
}
exports.bscAssetItemFromBasicAssetInfo = bscAssetItemFromBasicAssetInfo;
function bscGenerateAssetLocatorKey(item) {
    switch (item.location) {
        case AssetLocation.Local:
        default:
            if (!isUndefined(item.path) && item.name) {
                return 'file://' + leadingSep(item.path) + item.path + trailingSep(item.path) + item.name;
            }
            break;
        case AssetLocation.Bsn:
            if (!isNil(item.assetType)) {
                return bscGetBsnAssetLocatorKey(item.networkId, item.assetType, item.name, item.path);
            }
            break;
        case AssetLocation.Ftp:
            if (!isNil(item.assetType) && !isNil(item.scope)) {
                return bscGetFtpAssetLocatorKey(item.scope, item.path, item.name);
            }
            break;
        case AssetLocation.Blob:
            if (!isNil(item.name)) {
                var key = 'blob://' + item.name + '/';
                if (bscIsAssetItem(item)) {
                    if (!isNil(item.fileSize)) {
                        key = key + item.fileSize;
                    }
                    else {
                        key = key + '0';
                    }
                    if (!isNil(item.lastModifiedDate)) {
                        key = key + '/' + item.lastModifiedDate.toISOString();
                    }
                }
                return key;
            }
    }
    return '';
}
exports.bscGenerateAssetLocatorKey = bscGenerateAssetLocatorKey;
function bscGetLocalAssetLocatorKey(fullPath) {
    return fullPath ? 'file://' + leadingSep(fullPath) + fullPath : '';
}
exports.bscGetLocalAssetLocatorKey = bscGetLocalAssetLocatorKey;
function bscGetFtpAssetLocatorKey(hostname, path, name) {
    var parsedPath = isString(path) ? path : '';
    return 'ftp://' + hostname + leadingSep(parsedPath, AssetLocation.Ftp) + isomorphic_path_1.default.posix.join(path, name);
}
exports.bscGetFtpAssetLocatorKey = bscGetFtpAssetLocatorKey;
function bscGetBsnAssetLocatorKey(bsnId, assetType, name, path) {
    if (bsnId > 0) {
        return 'bsn://' + assetType + '/' + bsnId;
    }
    else if (bsnId < 0 && name) {
        var key = 'bsn://' + name;
        if (path) {
            key = key + leadingSep(path, AssetLocation.Bsn) + path;
        }
        return key;
    }
    return '';
}
exports.bscGetBsnAssetLocatorKey = bscGetBsnAssetLocatorKey;
var NullAssetBaseName = '__null__';
function bscGetNullAssetItem(assetType, assetLocation, mediaType) {
    if (assetLocation === void 0) { assetLocation = AssetLocation.Local; }
    var nullAssetItem = {
        id: exports.BsAssetIdNone,
        name: NullAssetBaseName + assetType,
        path: '',
        location: assetLocation,
        assetType: assetType,
        networkId: -1,
        scope: '',
        locator: '',
    };
    if (assetType === AssetType.Content && mediaType) {
        nullAssetItem.name = NullAssetBaseName + mediaType;
        nullAssetItem.mediaType = mediaType;
    }
    return nullAssetItem;
}
exports.bscGetNullAssetItem = bscGetNullAssetItem;
function bscIsNullAssetItem(assetItem) {
    return bscIsAssetItem(assetItem)
        && assetItem.name.substr(0, NullAssetBaseName.length) === NullAssetBaseName
        && assetItem.networkId === -1;
}
exports.bscIsNullAssetItem = bscIsNullAssetItem;
var DefaultAssetBaseName = '__default__';
function bscGetDefaultAssetItem(assetType, assetLocation, mediaType, name, path, scope) {
    if (assetLocation === void 0) { assetLocation = AssetLocation.Local; }
    var defaultAssetItem = {
        id: exports.BsAssetIdNone,
        name: DefaultAssetBaseName + assetType,
        path: path ? path : '',
        location: assetLocation,
        assetType: assetType,
        networkId: -1,
        scope: scope ? scope : '',
        locator: '',
    };
    if (assetType === AssetType.Content && mediaType) {
        defaultAssetItem.name = DefaultAssetBaseName + mediaType;
        defaultAssetItem.mediaType = mediaType;
    }
    if (name) {
        defaultAssetItem.name = defaultAssetItem.name + '_' + name;
    }
    defaultAssetItem.locator = bscGenerateAssetLocatorKey(defaultAssetItem);
    return defaultAssetItem;
}
exports.bscGetDefaultAssetItem = bscGetDefaultAssetItem;
function bscIsDefaultAssetItem(assetItem) {
    return bscIsAssetItem(assetItem)
        && assetItem.name.substr(0, DefaultAssetBaseName.length) === DefaultAssetBaseName
        && assetItem.networkId === -1;
}
exports.bscIsDefaultAssetItem = bscIsDefaultAssetItem;
exports.imageFileSuffixes = new Set(['jpg', 'jpeg', 'png', 'bmp']);
exports.videoFileSuffixes = new Set(['mov', 'mp4', 'mpg', 'ts', 'vob', 'wmv', 'm2ts', 'mkv']);
exports.audioFileSuffixes = new Set(['mp3', 'wav', 'ogg', 'flac', 'm4a', 'aac', 'ac3', 'eac3', 'ec3']);
exports.textFileSuffixes = new Set(['txt']);
function bscGetFileExt(pathOrFileName) {
    var result = pathOrFileName.match(/\.([A-Z0-9]+)$/i);
    return result ? result[1].toLowerCase() : '';
}
function bscGetFileMediaType(pathOrFileName) {
    if (pathOrFileName) {
        var ext = bscGetFileExt(pathOrFileName);
        if (ext) {
            if (exports.imageFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Image;
            }
            else if (exports.videoFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Video;
            }
            else if (exports.audioFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Audio;
            }
            else if (exports.textFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Text;
            }
            else if (exports.fontFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Font;
            }
            else if (exports.styleSheetFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Css;
            }
        }
    }
    return metadata_1.MediaType.Auxiliary;
}
exports.bscGetFileMediaType = bscGetFileMediaType;
function bscIsMediaTypePlayable(mediaType) {
    return !isNil(mediaType) && metadata_1.PlayableMediaTypes.has(mediaType);
}
exports.bscIsMediaTypePlayable = bscIsMediaTypePlayable;
function bscIsAssetItemPlayableContent(assetItem) {
    return assetItem.assetType === AssetType.Content && bscIsMediaTypePlayable(assetItem.mediaType);
}
exports.bscIsAssetItemPlayableContent = bscIsAssetItemPlayableContent;
function bscStripFileExtension(pathOrFileName) {
    return pathOrFileName.replace(/\.[^/.]+$/, '');
}
exports.bscStripFileExtension = bscStripFileExtension;
var MediaStateCopySetExt = 'bpfx-ms';
var LiveTextItemCopySetExt = 'bpfx-lt';
var CommandCopySetExt = 'bpfx-cm';
var UserVariableCopySetExt = 'bpfx-uv';
var UserDefinedEventSetExt = 'bpfx-ue';
function bscGetFileProjectFragmentType(pathOrFileName) {
    var ext = bscGetFileExt(pathOrFileName).toLowerCase();
    switch (ext) {
        case MediaStateCopySetExt: return BsProjectFragmentType.MediaStateCopySet;
        case LiveTextItemCopySetExt: return BsProjectFragmentType.LiveTextItemCopySet;
        case CommandCopySetExt: return BsProjectFragmentType.CommandCopySet;
        case UserVariableCopySetExt: return BsProjectFragmentType.UserVariableCopySet;
        case UserDefinedEventSetExt: return BsProjectFragmentType.UserDefinedEventSet;
    }
    return BsProjectFragmentType.None;
}
exports.bscGetFileProjectFragmentType = bscGetFileProjectFragmentType;
function bscGetFileProjectFragmentExtension(type) {
    switch (type) {
        case BsProjectFragmentType.MediaStateCopySet: return MediaStateCopySetExt;
        case BsProjectFragmentType.LiveTextItemCopySet: return LiveTextItemCopySetExt;
        case BsProjectFragmentType.CommandCopySet: return CommandCopySetExt;
        case BsProjectFragmentType.UserVariableCopySet: return UserVariableCopySetExt;
        case BsProjectFragmentType.UserDefinedEventSet: return UserDefinedEventSetExt;
    }
    return '';
}
exports.bscGetFileProjectFragmentExtension = bscGetFileProjectFragmentExtension;
exports.projectFileSuffixes = new Set(['bpfx']);
exports.projectFileFragmentSuffixes = new Set([
    MediaStateCopySetExt, LiveTextItemCopySetExt, CommandCopySetExt, UserVariableCopySetExt, UserDefinedEventSetExt
]);
exports.scheduleFileSuffixes = new Set(['bpsx']);
exports.projectBpfFileSuffixes = new Set(['bpf']);
exports.htmlSiteFileSuffixes = new Set(['html', 'htm', 'js']);
exports.fontFileSuffixes = new Set(['ttf', 'otf']);
exports.styleSheetFileSuffixes = new Set(['css']);
function bscGetAssetItemFileTypeInfo(assetItem) {
    var typeInfo = {
        assetType: assetItem.assetType,
        mediaType: isNil(assetItem.mediaType) ? metadata_1.MediaType.Auxiliary : assetItem.mediaType,
    };
    if (assetItem.assetType === AssetType.ProjectFragment) {
        typeInfo.projectFragmentType = bscGetFileProjectFragmentType(assetItem.name);
    }
    return typeInfo;
}
exports.bscGetAssetItemFileTypeInfo = bscGetAssetItemFileTypeInfo;
exports.BsAllFileBasedAssetTypes = [
    AssetType.Content, AssetType.Project, AssetType.ProjectBpf, AssetType.Schedule,
    AssetType.HtmlSite, AssetType.BrightScript,
];
Object.freeze(exports.BsAllFileBasedAssetTypes);
function bscGetBscFileTypeInfo(pathOrFileName) {
    var typeInfo = {
        assetType: AssetType.Content,
        mediaType: bscGetFileMediaType(pathOrFileName),
    };
    if (typeInfo.mediaType === metadata_1.MediaType.Auxiliary) {
        var ext = bscGetFileExt(pathOrFileName);
        if (ext === 'bpfx') {
            typeInfo.assetType = AssetType.Project;
        }
        else if (ext === 'bpf') {
            typeInfo.assetType = AssetType.ProjectBpf;
        }
        else if (ext === 'bpsx') {
            typeInfo.assetType = AssetType.Schedule;
        }
        else if (exports.htmlSiteFileSuffixes.has(ext)) {
            typeInfo.assetType = AssetType.HtmlSite;
        }
        else if (ext === 'brs') {
            typeInfo.assetType = AssetType.BrightScript;
        }
        else if (exports.projectFileFragmentSuffixes.has(ext)) {
            typeInfo.assetType = AssetType.ProjectFragment;
            typeInfo.projectFragmentType = bscGetFileProjectFragmentType(pathOrFileName);
        }
        else {
            typeInfo.assetType = AssetType.Content;
        }
    }
    return typeInfo;
}
exports.bscGetBscFileTypeInfo = bscGetBscFileTypeInfo;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var IrRemoteModel = (function () {
    function IrRemoteModel() {
    }
    IrRemoteModel.Unknown = 'Unknown';
    IrRemoteModel.RC1001 = 'RC-1001';
    IrRemoteModel.RC1002 = 'RC-1002';
    return IrRemoteModel;
}());
exports.IrRemoteModel = IrRemoteModel;
Object.freeze(IrRemoteModel);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var playerModel_1 = __webpack_require__(3);
var ModelFeature = (function () {
    function ModelFeature() {
    }
    ModelFeature.Gpio = 'gpio';
    ModelFeature.Networking = 'net';
    ModelFeature.SingleAnalogVolumeLimitation = '1audVol';
    ModelFeature.Hdmi = 'hdmi';
    ModelFeature.HdmiEArc = 'hdmiEArc';
    ModelFeature.VideoStreaming = 'vstrm';
    ModelFeature.AudioStreaming = 'astrm';
    ModelFeature.AudioMixer = 'amix';
    ModelFeature.Audio = 'aud';
    ModelFeature.EnhancedAudio = 'enhaud';
    ModelFeature.Images = 'img';
    ModelFeature.Video = 'vid';
    ModelFeature.Clock = 'clk';
    ModelFeature.GraphicsZOrdering = 'grfZ';
    ModelFeature.VideoZOrdering = 'vidZ';
    ModelFeature.Html5 = 'html5';
    ModelFeature.Html5Camera = 'htmlCam';
    ModelFeature.AudioOutputControl = 'aoctl';
    ModelFeature.Spdif = 'spdif';
    ModelFeature.IrOut = 'ir';
    ModelFeature.Usb = 'usb';
    ModelFeature.Bp = 'bp';
    ModelFeature.Serial = 'ser';
    ModelFeature.Blc400 = 'blc400';
    ModelFeature.HdmiIn = 'hdmiIn';
    ModelFeature.EnhancedSynchronization = 'enhsync';
    ModelFeature.Pronto = 'pronto';
    ModelFeature.ScrollingTicker = 'scrlTic';
    ModelFeature.TenBitColor = '10bit';
    ModelFeature.FourKImages = '4kimg';
    ModelFeature.FullResGraphics = 'fullResGfx';
    ModelFeature.FullResGraphicsHiFR = 'fullResGfxHiFR';
    ModelFeature.DualDecoder = '2dec';
    ModelFeature.MosaicMode = 'mosaic';
    ModelFeature.Bluetooth = 'btle';
    ModelFeature.AudioConfiguration = 'acnf';
    ModelFeature.DedicatedIr = 'dedir';
    ModelFeature.DolbyVision = 'dolby';
    ModelFeature.UsbTap = 'usbTap';
    ModelFeature.ButtonsByGpio = 'buttonsByGpio';
    ModelFeature.LightsByGpio = 'lightsByGpio';
    ModelFeature.BroadcomSupport = 'BroadcomSupport';
    ModelFeature.RfTuner = 'tun';
    ModelFeature.AudioDetect = 'auddet';
    ModelFeature.ExternalAudioDetect = 'extAudDet';
    ModelFeature.SingleOnBoardAnalogChannel = '1aud';
    ModelFeature.ThreeOnBoardAnalogChannels = '3aud';
    ModelFeature.UsbAudio = 'usbAud';
    ModelFeature.PumaUsbAudio = 'pumaAud';
    ModelFeature.BoseUsb = 'boseUsb';
    ModelFeature.AudioIn = 'audIn';
    ModelFeature.AudioDownMix = 'audDMix';
    return ModelFeature;
}());
exports.ModelFeature = ModelFeature;
Object.freeze(ModelFeature);
var ImpalaFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.Html5Camera,
    ModelFeature.AudioOutputControl, ModelFeature.Spdif, ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.FourKImages, ModelFeature.MosaicMode, ModelFeature.Bluetooth, ModelFeature.AudioConfiguration,
    ModelFeature.DedicatedIr, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var ImpalaEnterpriseFeatureArray = __spreadArrays(ImpalaFeatureArray, [ModelFeature.Serial, ModelFeature.Usb,
    ModelFeature.UsbTap, ModelFeature.Bp, ModelFeature.Blc400]);
var XD233Features = new Set(ImpalaFeatureArray);
var XT243Features = new Set(__spreadArrays(ImpalaFeatureArray, [ModelFeature.FullResGraphics, ModelFeature.DualDecoder]));
var XD1033Features = new Set(ImpalaEnterpriseFeatureArray);
var XT1143Features = new Set(__spreadArrays(ImpalaEnterpriseFeatureArray, [ModelFeature.HdmiIn, ModelFeature.FullResGraphics, ModelFeature.DualDecoder]));
var MalibuFeatureArray = __spreadArrays(ImpalaFeatureArray, [ModelFeature.DolbyVision]);
var MalibuEnterpriseFeatureArray = __spreadArrays(ImpalaEnterpriseFeatureArray, [ModelFeature.DolbyVision]);
var XD234Features = new Set(MalibuFeatureArray);
var XT244Features = new Set(__spreadArrays(MalibuFeatureArray, [ModelFeature.FullResGraphics,
    ModelFeature.FullResGraphicsHiFR, ModelFeature.DualDecoder]));
var XD1034Features = new Set(MalibuEnterpriseFeatureArray);
var XT1144Features = new Set(__spreadArrays(MalibuEnterpriseFeatureArray, [ModelFeature.HdmiIn, ModelFeature.FullResGraphics, ModelFeature.FullResGraphicsHiFR, ModelFeature.DualDecoder]));
var PaganiFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.Serial, ModelFeature.Usb, ModelFeature.UsbTap, ModelFeature.Bp, ModelFeature.Blc400,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.Bluetooth, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var HD224Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.Html5Camera, ModelFeature.MosaicMode, ModelFeature.Spdif, ModelFeature.DedicatedIr]));
var HS144Features = HD224Features;
var HD1024Features = HD224Features;
var HS124Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.MosaicMode, ModelFeature.Spdif]));
var LS424Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.Html5Camera]));
var PanteraFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.Bluetooth, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var PanteraAdvancedFeatureArray = [
    ModelFeature.GraphicsZOrdering, ModelFeature.MosaicMode, ModelFeature.Spdif,
];
var PanteraIoFeatureArray = [
    ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.UsbTap, ModelFeature.Blc400, ModelFeature.Pronto,
];
var HD223Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, [ModelFeature.Html5Camera]));
var HD1023Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera]));
var HS123Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray));
var HO523Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera, ModelFeature.DedicatedIr]));
var LS423Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera]));
var TigerFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.Html5Camera,
    ModelFeature.AudioOutputControl, ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.FourKImages, ModelFeature.MosaicMode, ModelFeature.DualDecoder, ModelFeature.Bluetooth,
    ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var FK242Features = new Set(TigerFeatureArray);
var FK1042Features = new Set(__spreadArrays(TigerFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif]));
var FK1142Features = new Set(__spreadArrays(TigerFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif,
    ModelFeature.HdmiIn]));
var SebringFeatureArray = [
    ModelFeature.Networking,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.AudioStreaming,
    ModelFeature.Audio,
    ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization,
    ModelFeature.Usb,
    ModelFeature.UsbTap,
];
var AU325Features = new Set(__spreadArrays(SebringFeatureArray, [ModelFeature.ButtonsByGpio, ModelFeature.LightsByGpio]));
var AU335Features = new Set(__spreadArrays(SebringFeatureArray, [ModelFeature.Bp, ModelFeature.HdmiEArc, ModelFeature.Gpio, ModelFeature.Serial]));
var LynxFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker,
    ModelFeature.MosaicMode, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var XD232Features = new Set(LynxFeatureArray);
var XD1032Features = new Set(__spreadArrays(LynxFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif]));
var XD1132Features = new Set(__spreadArrays(LynxFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif,
    ModelFeature.HdmiIn]));
var BaseBobcatFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization, ModelFeature.MosaicMode, ModelFeature.BroadcomSupport,
    ModelFeature.EnhancedAudio,
];
var BobcatFeatureArray = __spreadArrays(BaseBobcatFeatureArray, [ModelFeature.ScrollingTicker, ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.AudioConfiguration]);
var BoseBobcatFeatureArray = __spreadArrays(BaseBobcatFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Pronto,
    ModelFeature.IrOut, ModelFeature.Spdif, ModelFeature.BoseUsb, ModelFeature.AudioIn, ModelFeature.PumaUsbAudio,
    ModelFeature.AudioDetect, ModelFeature.ExternalAudioDetect]);
var HD222Features = new Set(BobcatFeatureArray);
var HD1022Features = new Set(__spreadArrays(BobcatFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Pronto]));
var HD922Features = new Set(BoseBobcatFeatureArray);
var HD972Features = new Set(__spreadArrays(BoseBobcatFeatureArray, [ModelFeature.ThreeOnBoardAnalogChannels]));
var CheetahFeatureArray = [
    ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.IrOut, ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker,
    ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var XD230Features = new Set(CheetahFeatureArray);
var XD1030Features = new Set(__spreadArrays(CheetahFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif]));
var XD1230Features = new Set(__spreadArrays(CheetahFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif, ModelFeature.RfTuner, ModelFeature.HdmiIn]));
var BasePantherFeatureArray = [
    ModelFeature.SingleAnalogVolumeLimitation,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.AudioOutputControl, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var PantherFeatureArray = __spreadArrays(BasePantherFeatureArray, [ModelFeature.Hdmi, ModelFeature.Networking, ModelFeature.Video,
    ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.EnhancedSynchronization,]);
var HD120Features = new Set(__spreadArrays(BasePantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Hdmi, ModelFeature.Video]));
var HD220Features = new Set(PantherFeatureArray);
var HD1020Features = new Set(__spreadArrays(PantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Pronto]));
var LS322Features = new Set(__spreadArrays(BasePantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.AudioStreaming,
    ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif, ModelFeature.Pronto]));
var LS422Features = new Set(__spreadArrays(PantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif, ModelFeature.Pronto]));
var AU320Features = new Set([
    ModelFeature.Serial, ModelFeature.Networking, ModelFeature.Bp, ModelFeature.SingleAnalogVolumeLimitation,
    ModelFeature.AudioMixer, ModelFeature.AudioOutputControl, ModelFeature.AudioStreaming, ModelFeature.Usb,
    ModelFeature.Pronto
]);
var PumaFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Networking, ModelFeature.Hdmi, ModelFeature.Bp,
    ModelFeature.AudioStreaming, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.Usb, ModelFeature.AudioOutputControl, ModelFeature.BoseUsb, ModelFeature.IrOut,
    ModelFeature.AudioIn, ModelFeature.PumaUsbAudio, ModelFeature.Blc400, ModelFeature.AudioDetect,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var HD917Features = new Set(PumaFeatureArray);
var A915Features = HD917Features;
var HD920Features = new Set(__spreadArrays(PumaFeatureArray, [ModelFeature.VideoStreaming, ModelFeature.Spdif, ModelFeature.ExternalAudioDetect]));
var HD970Features = new Set(__spreadArrays(PumaFeatureArray, [ModelFeature.VideoStreaming, ModelFeature.Spdif, ModelFeature.ExternalAudioDetect,
    ModelFeature.ThreeOnBoardAnalogChannels]));
var FeaturesByPlayerModel = (_a = {},
    _a[playerModel_1.PlayerModel.XD1034] = XD1034Features,
    _a[playerModel_1.PlayerModel.XD234] = XD234Features,
    _a[playerModel_1.PlayerModel.XT1144] = XT1144Features,
    _a[playerModel_1.PlayerModel.XT244] = XT244Features,
    _a[playerModel_1.PlayerModel.HD1024] = HD1024Features,
    _a[playerModel_1.PlayerModel.HD224] = HD224Features,
    _a[playerModel_1.PlayerModel.HS144] = HS144Features,
    _a[playerModel_1.PlayerModel.HS124] = HS124Features,
    _a[playerModel_1.PlayerModel.LS424] = LS424Features,
    _a[playerModel_1.PlayerModel.AU335] = AU335Features,
    _a[playerModel_1.PlayerModel.AU325] = AU325Features,
    _a[playerModel_1.PlayerModel.XD1033] = XD1033Features,
    _a[playerModel_1.PlayerModel.XD233] = XD233Features,
    _a[playerModel_1.PlayerModel.XT1143] = XT1143Features,
    _a[playerModel_1.PlayerModel.XT243] = XT243Features,
    _a[playerModel_1.PlayerModel.HD1023] = HD1023Features,
    _a[playerModel_1.PlayerModel.HD223] = HD223Features,
    _a[playerModel_1.PlayerModel.HS123] = HS123Features,
    _a[playerModel_1.PlayerModel.HO523] = HO523Features,
    _a[playerModel_1.PlayerModel.LS423] = LS423Features,
    _a[playerModel_1.PlayerModel.FK1142] = FK1142Features,
    _a[playerModel_1.PlayerModel.FK1042] = FK1042Features,
    _a[playerModel_1.PlayerModel.FK242] = FK242Features,
    _a[playerModel_1.PlayerModel.XD1132] = XD1132Features,
    _a[playerModel_1.PlayerModel.XD1032] = XD1032Features,
    _a[playerModel_1.PlayerModel.XD232] = XD232Features,
    _a[playerModel_1.PlayerModel.HD1022] = HD1022Features,
    _a[playerModel_1.PlayerModel.HD222] = HD222Features,
    _a[playerModel_1.PlayerModel.HD972] = HD972Features,
    _a[playerModel_1.PlayerModel.HD922] = HD922Features,
    _a[playerModel_1.PlayerModel.XD1230] = XD1230Features,
    _a[playerModel_1.PlayerModel.XD1030] = XD1030Features,
    _a[playerModel_1.PlayerModel.XD230] = XD230Features,
    _a[playerModel_1.PlayerModel.HD1020] = HD1020Features,
    _a[playerModel_1.PlayerModel.HD220] = HD220Features,
    _a[playerModel_1.PlayerModel.HD120] = HD120Features,
    _a[playerModel_1.PlayerModel.LS422] = LS422Features,
    _a[playerModel_1.PlayerModel.LS322] = LS322Features,
    _a[playerModel_1.PlayerModel.AU320] = AU320Features,
    _a[playerModel_1.PlayerModel.HD970] = HD970Features,
    _a[playerModel_1.PlayerModel.HD920] = HD920Features,
    _a[playerModel_1.PlayerModel.HD917] = HD917Features,
    _a[playerModel_1.PlayerModel.A915] = A915Features,
    _a);
function bscPlayerModelHasFeature(model, feature) {
    var featureSet = FeaturesByPlayerModel[model];
    if (featureSet) {
        return featureSet.has(feature);
    }
    return false;
}
exports.bscPlayerModelHasFeature = bscPlayerModelHasFeature;
function bscPlayerModelToPlayerMachineName(model) {
    var name = playerModel_1.bscPlayerModelToPlayerFamily(model);
    if (name === playerModel_1.PlayerFamily.Pagani) {
        if (playerModel_1.PaganiHDModels.has(model)) {
            name = name + ':' + playerModel_1.PlayerMachineNameSuffix.No4K;
        }
    }
    else if (name === playerModel_1.PlayerFamily.Malibu || name === playerModel_1.PlayerFamily.Impala) {
        if (!bscPlayerModelHasFeature(model, ModelFeature.DualDecoder)) {
            name = name + ':' + playerModel_1.PlayerMachineNameSuffix.SingleDecoder;
        }
    }
    return name.toUpperCase();
}
exports.bscPlayerModelToPlayerMachineName = bscPlayerModelToPlayerMachineName;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProbeContentResolutionType = (function () {
    function ProbeContentResolutionType() {
    }
    ProbeContentResolutionType.NA = 'N/A';
    ProbeContentResolutionType.FK = '4K';
    ProbeContentResolutionType.HD = 'HD';
    ProbeContentResolutionType.SD = 'SD';
    ProbeContentResolutionType.CIF = 'CIF';
    ProbeContentResolutionType.QCIF = 'QCIF';
    return ProbeContentResolutionType;
}());
exports.ProbeContentResolutionType = ProbeContentResolutionType;
Object.freeze(ProbeContentResolutionType);
var DecoderName = (function () {
    function DecoderName() {
    }
    DecoderName.HD1 = 'HD1';
    DecoderName.HD2 = 'HD2';
    DecoderName.FK = '4K';
    DecoderName.FK2 = '4K2';
    return DecoderName;
}());
exports.DecoderName = DecoderName;
Object.freeze(DecoderName);
var ImagePlayableStatus = (function () {
    function ImagePlayableStatus() {
    }
    ImagePlayableStatus.playable = 'playable';
    ImagePlayableStatus.playableSeamlessly = 'playableSeamlessly';
    ImagePlayableStatus.noMedia = 'noMedia';
    ImagePlayableStatus.imageSizeExceeded = 'imageSizeExceeded';
    ImagePlayableStatus.imageSizeUnknown = 'imageSizeUnknown';
    ImagePlayableStatus.imageIsCmyk = 'imageIsCmyk';
    return ImagePlayableStatus;
}());
exports.ImagePlayableStatus = ImagePlayableStatus;
Object.freeze(ImagePlayableStatus);
var ProbePlayableStatus = (function () {
    function ProbePlayableStatus() {
    }
    ProbePlayableStatus.cpPlayable = 0;
    ProbePlayableStatus.cpPlayableSeamlessly = 1;
    ProbePlayableStatus.cpPlayableMax = 99;
    ProbePlayableStatus.cpProbString = 100;
    ProbePlayableStatus.cpContainer = 200;
    ProbePlayableStatus.cpNoMedia = 300;
    ProbePlayableStatus.cpAudioSampleRate = 400;
    ProbePlayableStatus.cpAudioType = 401;
    ProbePlayableStatus.cpAudioChannels = 402;
    ProbePlayableStatus.cpVideoType = 501;
    ProbePlayableStatus.cpVideoResolution = 502;
    ProbePlayableStatus.cpVideoH265 = 503;
    return ProbePlayableStatus;
}());
exports.ProbePlayableStatus = ProbePlayableStatus;
Object.freeze(ProbePlayableStatus);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(9);
function bscCreatePercentageRect(x, y, width, height) {
    return { x: x, y: y, width: width, height: height, pct: true };
}
exports.bscCreatePercentageRect = bscCreatePercentageRect;
function bscCreateAbsoluteRect(x, y, width, height) {
    return { x: x, y: y, width: width, height: height, pct: false };
}
exports.bscCreateAbsoluteRect = bscCreateAbsoluteRect;
function bscScaleAbsoluteRect(rect, increase, scaleFactorX, scaleFactorY) {
    var doScale = function (value, scaleFactor) {
        return scaleFactor === 2 ? (increase ? value << 1 : value >> 1) :
            (scaleFactor === 4 ? (increase ? value << 2 : value >> 2) :
                (increase ? Math.round(value * scaleFactor) : Math.round(value / scaleFactor)));
    };
    var scaleY = scaleFactorY ? scaleFactorY : scaleFactorX;
    if (!rect.pct && scaleFactorX > 0) {
        return {
            x: doScale(rect.x, scaleFactorX),
            y: doScale(rect.y, scaleY),
            width: doScale(rect.width, scaleFactorX),
            height: doScale(rect.height, scaleY),
            pct: false,
        };
    }
    return rect;
}
exports.bscScaleAbsoluteRect = bscScaleAbsoluteRect;
function bscGetAbsoluteRectForVideoMode(rect, mode) {
    var _a = main_1.bscParseVideoModeComponents(mode), width = _a.width, height = _a.height;
    return bscGetAbsoluteRectForWidthAndHeight(rect, { width: width, height: height });
}
exports.bscGetAbsoluteRectForVideoMode = bscGetAbsoluteRectForVideoMode;
function bscGetAbsoluteRectForWidthAndHeight(rect, size) {
    var returnRect = rect;
    if (rect.pct) {
        returnRect = bscCreateAbsoluteRect(Math.round(rect.x * size.width / 100), Math.round(rect.y * size.height / 100), Math.round(rect.width * size.width / 100), Math.round(rect.height * size.height / 100));
    }
    return returnRect;
}
exports.bscGetAbsoluteRectForWidthAndHeight = bscGetAbsoluteRectForWidthAndHeight;
function bscGetPercentageRectForVideoMode(rect, mode) {
    var _a = main_1.bscParseVideoModeComponents(mode), width = _a.width, height = _a.height;
    return bscGetPercentageRectForWidthAndHeight(rect, { width: width, height: height });
}
exports.bscGetPercentageRectForVideoMode = bscGetPercentageRectForVideoMode;
function bscGetPercentageRectForWidthAndHeight(rect, size) {
    var returnRect = rect;
    if (!rect.pct) {
        if (!(size.width && size.height)) {
            returnRect = bscCreatePercentageRect(0, 0, 0, 0);
        }
        else {
            returnRect = bscCreatePercentageRect(Math.round(rect.x * 10000 / size.width) / 100, Math.round(rect.y * 10000 / size.height) / 100, Math.round(rect.width * 10000 / size.width) / 100, Math.round(rect.height * 10000 / size.height) / 100);
        }
    }
    return returnRect;
}
exports.bscGetPercentageRectForWidthAndHeight = bscGetPercentageRectForWidthAndHeight;
exports.BsRectFull = { x: 0, y: 0, width: 100, height: 100, pct: true };
Object.freeze(exports.BsRectFull);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(1));
__export(__webpack_require__(3));
__export(__webpack_require__(6));
__export(__webpack_require__(17));
__export(__webpack_require__(21));
__export(__webpack_require__(8));
__export(__webpack_require__(4));
__export(__webpack_require__(19));
__export(__webpack_require__(7));
__export(__webpack_require__(18));
__export(__webpack_require__(11));
__export(__webpack_require__(10));
__export(__webpack_require__(14));
__export(__webpack_require__(12));
__export(__webpack_require__(13));
__export(__webpack_require__(16));
__export(__webpack_require__(20));
__export(__webpack_require__(5));
__export(__webpack_require__(15));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BDeploySortType = (function () {
    function BDeploySortType() {
    }
    BDeploySortType.ASC = 1;
    BDeploySortType.DESC = -1;
    return BDeploySortType;
}());
exports.BDeploySortType = BDeploySortType;
Object.freeze(BDeploySortType);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var BsnTaggedPlaylistItemStatus = (function () {
    function BsnTaggedPlaylistItemStatus() {
    }
    BsnTaggedPlaylistItemStatus.Approved = 'Approved';
    BsnTaggedPlaylistItemStatus.PendingAddition = 'PendingAddition';
    BsnTaggedPlaylistItemStatus.PendingDeletion = 'PendingDeletion';
    BsnTaggedPlaylistItemStatus.Pending = 'Pending';
    return BsnTaggedPlaylistItemStatus;
}());
exports.BsnTaggedPlaylistItemStatus = BsnTaggedPlaylistItemStatus;
Object.freeze(BsnTaggedPlaylistItemStatus);
var BsnTagDataType = (function () {
    function BsnTagDataType() {
    }
    BsnTagDataType.String = 'string';
    BsnTagDataType.Number = 'number';
    BsnTagDataType.Boolean = 'boolean';
    BsnTagDataType.DateTime = 'dateTime';
    BsnTagDataType.NumericArray = 'numericArray';
    BsnTagDataType.StringArray = 'stringArray';
    return BsnTagDataType;
}());
exports.BsnTagDataType = BsnTagDataType;
Object.freeze(BsnTagDataType);
var BsnTagType = (function () {
    function BsnTagType() {
    }
    BsnTagType.SystemDevice = '[sys].[Device]';
    BsnTagType.SystemContent = '[sys].[Content]';
    BsnTagType.Device = '[Device]';
    BsnTagType.Content = '[Content]';
    return BsnTagType;
}());
exports.BsnTagType = BsnTagType;
Object.freeze(BsnTagType);
var BsnPresentationType = (function () {
    function BsnPresentationType() {
    }
    BsnPresentationType.Simple = 'Simple';
    BsnPresentationType.Complete = 'Complete';
    return BsnPresentationType;
}());
exports.BsnPresentationType = BsnPresentationType;
Object.freeze(BsnPresentationType);
var BsnPresentationStatus = (function () {
    function BsnPresentationStatus() {
    }
    BsnPresentationStatus.Draft = 'Draft';
    BsnPresentationStatus.Published = 'Published';
    return BsnPresentationStatus;
}());
exports.BsnPresentationStatus = BsnPresentationStatus;
Object.freeze(BsnPresentationStatus);
var BsnPresentationReferenceType = (function () {
    function BsnPresentationReferenceType() {
    }
    BsnPresentationReferenceType.Presentation = 'Presentation';
    BsnPresentationReferenceType.BrightWallPresentation = 'BrightWallPresentation';
    return BsnPresentationReferenceType;
}());
exports.BsnPresentationReferenceType = BsnPresentationReferenceType;
Object.freeze(BsnPresentationReferenceType);
var BsnObjectPermissionType = (function () {
    function BsnObjectPermissionType() {
    }
    BsnObjectPermissionType.Role = 'Role';
    BsnObjectPermissionType.User = 'User';
    return BsnObjectPermissionType;
}());
exports.BsnObjectPermissionType = BsnObjectPermissionType;
Object.freeze(BsnObjectPermissionType);
function bscCreateBsnObjectRolePermission(roleName, operationUid, isAllowed) {
    return {
        type: 'Role',
        roleName: roleName,
        operationUid: operationUid,
        isAllowed: isAllowed,
    };
}
exports.bscCreateBsnObjectRolePermission = bscCreateBsnObjectRolePermission;
function bscIsBsnObjectRolePermission(permission) {
    return !isNil(permission) && permission.type === BsnObjectPermissionType.Role;
}
exports.bscIsBsnObjectRolePermission = bscIsBsnObjectRolePermission;
function bscCreateBsnObjectUserPermission(login, operationUid, isAllowed) {
    return {
        type: 'User',
        login: login,
        operationUid: operationUid,
        isAllowed: isAllowed,
    };
}
exports.bscCreateBsnObjectUserPermission = bscCreateBsnObjectUserPermission;
function bscIsBsnObjectUserPermission(permission) {
    return !isNil(permission) && permission.type === BsnObjectPermissionType.User;
}
exports.bscIsBsnObjectUserPermission = bscIsBsnObjectUserPermission;
var BsnFilterType = (function () {
    function BsnFilterType() {
    }
    BsnFilterType.string = 'string';
    BsnFilterType.enum = 'enum';
    BsnFilterType.number = 'number';
    BsnFilterType.dateTime = 'dateTime';
    BsnFilterType.boolean = 'boolean';
    BsnFilterType.stringArray = 'stringArray';
    BsnFilterType.numericArray = 'numericArray';
    return BsnFilterType;
}());
exports.BsnFilterType = BsnFilterType;
Object.freeze(BsnFilterType);
var BsnTimeUnits = (function () {
    function BsnTimeUnits() {
    }
    BsnTimeUnits.years = 'years';
    BsnTimeUnits.months = 'months';
    BsnTimeUnits.days = 'days';
    return BsnTimeUnits;
}());
exports.BsnTimeUnits = BsnTimeUnits;
var BsnStringFilterOperator = (function () {
    function BsnStringFilterOperator() {
    }
    BsnStringFilterOperator.Is = 'IS';
    BsnStringFilterOperator.IsNot = 'IS NOT';
    BsnStringFilterOperator.BeginsWith = 'BEGINS WITH';
    BsnStringFilterOperator.EndsWith = 'ENDS WITH';
    BsnStringFilterOperator.Contains = 'CONTAINS';
    BsnStringFilterOperator.ContainsAll = 'CONTAINS ALL';
    BsnStringFilterOperator.ContainsAny = 'CONTAINS ANY';
    BsnStringFilterOperator.DoesNotContain = 'DOES NOT CONTAIN';
    BsnStringFilterOperator.IsIn = 'IS IN';
    BsnStringFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnStringFilterOperator;
}());
exports.BsnStringFilterOperator = BsnStringFilterOperator;
Object.freeze(BsnStringFilterOperator);
var BsnNumberFilterOperator = (function () {
    function BsnNumberFilterOperator() {
    }
    BsnNumberFilterOperator.Is = 'IS';
    BsnNumberFilterOperator.IsNot = 'IS NOT';
    BsnNumberFilterOperator.IsGreaterThan = 'IS GREATER THAN';
    BsnNumberFilterOperator.IsLessThan = 'IS LESS THAN';
    BsnNumberFilterOperator.IsInTheRange = 'IS IN THE RANGE';
    BsnNumberFilterOperator.IsNotInTheRange = 'IS NOT IN THE RANGE';
    BsnNumberFilterOperator.IsIn = 'IS IN';
    BsnNumberFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnNumberFilterOperator;
}());
exports.BsnNumberFilterOperator = BsnNumberFilterOperator;
Object.freeze(BsnNumberFilterOperator);
var BsnDateFilterOperator = (function () {
    function BsnDateFilterOperator() {
    }
    BsnDateFilterOperator.Is = 'IS';
    BsnDateFilterOperator.IsNot = 'IS NOT';
    BsnDateFilterOperator.IsAfter = 'IS AFTER';
    BsnDateFilterOperator.IsBefore = 'IS BEFORE';
    BsnDateFilterOperator.InTheLast = 'IN THE LAST';
    BsnDateFilterOperator.NotInTheLast = 'NOT IN THE LAST';
    BsnDateFilterOperator.IsInTheRange = 'IS IN THE RANGE';
    BsnDateFilterOperator.IsNotInTheRange = 'IS NOT IN THE RANGE';
    BsnDateFilterOperator.IsIn = 'IS IN';
    BsnDateFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnDateFilterOperator;
}());
exports.BsnDateFilterOperator = BsnDateFilterOperator;
Object.freeze(BsnDateFilterOperator);
var BsnBooleanFilterOperator = (function () {
    function BsnBooleanFilterOperator() {
    }
    BsnBooleanFilterOperator.Is = 'IS';
    return BsnBooleanFilterOperator;
}());
exports.BsnBooleanFilterOperator = BsnBooleanFilterOperator;
Object.freeze(BsnBooleanFilterOperator);
var BsnArrayFilterOperator = (function () {
    function BsnArrayFilterOperator() {
    }
    BsnArrayFilterOperator.Contains = 'CONTAINS';
    BsnArrayFilterOperator.ContainsAll = 'CONTAINS ALL';
    BsnArrayFilterOperator.ContainsAny = 'CONTAINS ANY';
    return BsnArrayFilterOperator;
}());
exports.BsnArrayFilterOperator = BsnArrayFilterOperator;
Object.freeze(BsnArrayFilterOperator);
var commonFilterOperators = [
    BsnStringFilterOperator.Is, BsnStringFilterOperator.IsNot,
    BsnStringFilterOperator.IsIn, BsnStringFilterOperator.IsNotIn,
];
var stringFilterOperators = __spreadArrays(commonFilterOperators, [BsnStringFilterOperator.BeginsWith, BsnStringFilterOperator.EndsWith,
    BsnStringFilterOperator.Contains, BsnStringFilterOperator.ContainsAll, BsnStringFilterOperator.ContainsAny,]);
var numberFilterOperators = __spreadArrays(commonFilterOperators, [BsnNumberFilterOperator.IsGreaterThan, BsnNumberFilterOperator.IsLessThan,
    BsnNumberFilterOperator.IsInTheRange, BsnNumberFilterOperator.IsNotInTheRange,]);
var dateTimeFilterOperators = __spreadArrays(commonFilterOperators, [BsnDateFilterOperator.IsAfter, BsnDateFilterOperator.IsBefore,
    BsnDateFilterOperator.InTheLast, BsnDateFilterOperator.NotInTheLast,
    BsnDateFilterOperator.IsInTheRange, BsnDateFilterOperator.IsNotInTheRange,]);
var arrayFilterOperators = [
    BsnArrayFilterOperator.Contains, BsnArrayFilterOperator.ContainsAll, BsnArrayFilterOperator.ContainsAny,
];
function bscGetOperatorListForFilterType(type) {
    switch (type) {
        default:
        case BsnFilterType.string:
        case BsnFilterType.enum:
            return stringFilterOperators;
        case BsnFilterType.number:
            return numberFilterOperators;
        case BsnFilterType.dateTime:
            return dateTimeFilterOperators;
        case BsnFilterType.boolean:
            return [BsnBooleanFilterOperator.Is];
        case BsnFilterType.stringArray:
        case BsnFilterType.numericArray:
            return arrayFilterOperators;
    }
}
exports.bscGetOperatorListForFilterType = bscGetOperatorListForFilterType;
function bscGetOperatorListForTagDataType(dataType) {
    switch (dataType) {
        default:
        case BsnTagDataType.String:
            return stringFilterOperators;
        case BsnTagDataType.Number:
            return numberFilterOperators;
        case BsnTagDataType.DateTime:
            return dateTimeFilterOperators;
        case BsnTagDataType.Boolean:
            return [BsnBooleanFilterOperator.Is];
        case BsnTagDataType.StringArray:
        case BsnTagDataType.NumericArray:
            return arrayFilterOperators;
    }
}
exports.bscGetOperatorListForTagDataType = bscGetOperatorListForTagDataType;
var BsnFilterCombineType = (function () {
    function BsnFilterCombineType() {
    }
    BsnFilterCombineType.All = 'AND';
    BsnFilterCombineType.Any = 'OR';
    return BsnFilterCombineType;
}());
exports.BsnFilterCombineType = BsnFilterCombineType;
Object.freeze(BsnFilterCombineType);
function bscIsTimeSpanFilterParam(param) {
    return !isNil(param)
        && typeof param === 'object'
        && param.hasOwnProperty('units')
        && param.hasOwnProperty('length')
        && param.hasOwnProperty('dateTime');
}
exports.bscIsTimeSpanFilterParam = bscIsTimeSpanFilterParam;
function bscCreateFilterComponent(type, property, operator, values) {
    var getBoolValue = function (val) {
        if (isString(val)) {
            return val.length > 0 && val[0].toUpperCase() === 'T' ? 'TRUE' : 'FALSE';
        }
        else {
            return Boolean(val) ? 'TRUE' : 'FALSE';
        }
    };
    var params;
    if (Array.isArray(values)) {
        if (type === BsnFilterType.boolean) {
            params = [getBoolValue(values[0])];
        }
        else {
            params = values;
        }
    }
    else {
        switch (type) {
            default:
            case BsnFilterType.boolean:
                params = [getBoolValue(values)];
                break;
            case BsnFilterType.enum:
            case BsnFilterType.stringArray:
            case BsnFilterType.string:
                params = [values];
                break;
            case BsnFilterType.numericArray:
            case BsnFilterType.number:
                params = [values];
                break;
            case BsnFilterType.dateTime: {
                if (operator === BsnDateFilterOperator.InTheLast || operator === BsnDateFilterOperator.NotInTheLast) {
                    if (bscIsTimeSpanFilterParam(values)) {
                        params = __assign({}, values);
                    }
                    else {
                        params = { units: BsnTimeUnits.days, length: 0, dateTime: new Date(0) };
                    }
                }
                else {
                    params = [values];
                }
                break;
            }
        }
    }
    return { type: type, property: property, operator: operator, params: params };
}
exports.bscCreateFilterComponent = bscCreateFilterComponent;
function bscGetBsnFilterTypeForTagDataType(dataType) {
    switch (dataType) {
        default:
        case BsnTagDataType.String:
            return BsnFilterType.string;
        case BsnTagDataType.Number:
            return BsnFilterType.number;
        case BsnTagDataType.DateTime:
            return BsnFilterType.dateTime;
        case BsnTagDataType.Boolean:
            return BsnFilterType.boolean;
        case BsnTagDataType.StringArray:
            return BsnFilterType.stringArray;
        case BsnTagDataType.NumericArray:
            return BsnFilterType.numericArray;
    }
}
exports.bscGetBsnFilterTypeForTagDataType = bscGetBsnFilterTypeForTagDataType;
function bscCreateTagFilterComponent(tagKey, operator, values) {
    var validOperators = bscGetOperatorListForTagDataType(tagKey.dataType);
    if (validOperators.indexOf(operator) >= 0) {
        var type = bscGetBsnFilterTypeForTagDataType(tagKey.dataType);
        return bscCreateFilterComponent(type, tagKey.name, operator, values);
    }
    return null;
}
exports.bscCreateTagFilterComponent = bscCreateTagFilterComponent;
function bscIsValidBsnFilterComponent(comp) {
    var isNumberArray = function (array) {
        return Array.isArray(array) && !array.some(function (el) { return typeof el !== 'number'; });
    };
    var isStringArray = function (array) {
        return Array.isArray(array) && !array.some(function (el) { return !isString(el); });
    };
    var ops = bscGetOperatorListForFilterType(comp.type);
    if (ops.indexOf(comp.operator) >= 0) {
        switch (comp.type) {
            case BsnFilterType.string:
            case BsnFilterType.enum:
                return isStringArray(comp.params);
            case BsnFilterType.stringArray:
                return isStringArray(comp.params) && comp.params.length <= 10;
            case BsnFilterType.number:
                return isNumberArray(comp.params);
            case BsnFilterType.numericArray:
                return isNumberArray(comp.params) && comp.params.length <= 10;
            case BsnFilterType.dateTime:
                if (comp.operator === BsnDateFilterOperator.InTheLast || comp.operator === BsnDateFilterOperator.NotInTheLast) {
                    return bscIsTimeSpanFilterParam(comp.params);
                }
                return Array.isArray(comp.params) && !comp.params.some(function (el) { return !(el instanceof Date); });
            case BsnFilterType.boolean:
                return Array.isArray(comp.params) && (comp.params[0] === 'TRUE' || comp.params[0] === 'FALSE');
        }
    }
    return false;
}
exports.bscIsValidBsnFilterComponent = bscIsValidBsnFilterComponent;
function bscCreateBsnFilterSpecification(components, combineType) {
    if (combineType === void 0) { combineType = BsnFilterCombineType.All; }
    return {
        components: Array.isArray(components) ? components : [components],
        combineType: combineType,
    };
}
exports.bscCreateBsnFilterSpecification = bscCreateBsnFilterSpecification;
function bscIsBsnFilterSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('components')
        && Array.isArray(value.components)
        && value.hasOwnProperty('combineType');
}
exports.bscIsBsnFilterSpecification = bscIsBsnFilterSpecification;
function bscCreateTagSortSpecification(sortTagName, sortDescending) {
    if (sortTagName === void 0) { sortTagName = null; }
    if (sortDescending === void 0) { sortDescending = false; }
    return { sortTagName: sortTagName, sortDescending: sortDescending };
}
exports.bscCreateTagSortSpecification = bscCreateTagSortSpecification;
function bscIsTagSortSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('sortTagName')
        && value.hasOwnProperty('sortDescending');
}
exports.bscIsTagSortSpecification = bscIsTagSortSpecification;
function bscCreateTaggedListSpecification(filterSpec, sortTagName, sortDescending) {
    if (sortTagName === void 0) { sortTagName = null; }
    if (sortDescending === void 0) { sortDescending = false; }
    return { filterSpec: filterSpec, sortTagName: sortTagName, sortDescending: sortDescending };
}
exports.bscCreateTaggedListSpecification = bscCreateTaggedListSpecification;
function bscIsTaggedListSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('filterSpec')
        && (value.filterSpec === null || bscIsBsnFilterSpecification(value.filterSpec))
        && value.hasOwnProperty('sortTagName')
        && value.hasOwnProperty('sortDescending');
}
exports.bscIsTaggedListSpecification = bscIsTaggedListSpecification;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DeviceNetworkingConfiguration = (function () {
    function DeviceNetworkingConfiguration() {
    }
    DeviceNetworkingConfiguration.Standalone = 'standalone';
    DeviceNetworkingConfiguration.LocalFileNetworking = 'lfn';
    DeviceNetworkingConfiguration.LegacyLocalFileNetworking = 'legacyLfn';
    DeviceNetworkingConfiguration.SimpleFileNetworking = 'sfn';
    DeviceNetworkingConfiguration.BrightSignNetworking = 'bsn';
    DeviceNetworkingConfiguration.LocalToBrightSignNetworking = 'localToBsn';
    DeviceNetworkingConfiguration.PartnerApplication = 'partnerApplication';
    return DeviceNetworkingConfiguration;
}());
exports.DeviceNetworkingConfiguration = DeviceNetworkingConfiguration;
Object.freeze(DeviceNetworkingConfiguration);
var UnitNamingMethod = (function () {
    function UnitNamingMethod() {
    }
    UnitNamingMethod.UnitNameOnly = 'unitNameOnly';
    UnitNamingMethod.AppendUnitId = 'appendUnitIDToUnitName';
    return UnitNamingMethod;
}());
exports.UnitNamingMethod = UnitNamingMethod;
Object.freeze(UnitNamingMethod);
var TimeZone = (function () {
    function TimeZone() {
    }
    TimeZone.EST = 'EST';
    TimeZone.PST = 'PST';
    TimeZone.CST = 'CST';
    TimeZone.JST = 'JST';
    TimeZone.MST = 'MST';
    TimeZone.GMTBST = 'GMTBST';
    TimeZone.WET = 'WET';
    TimeZone.CET = 'CET';
    TimeZone.EET = 'EET';
    TimeZone.MSK = 'MSK';
    TimeZone.AWST = 'AWST';
    TimeZone.AWST1 = 'AWST1';
    TimeZone.ACST = 'ACST';
    TimeZone.ACST1 = 'ACST1';
    TimeZone.AEST = 'AEST';
    TimeZone.AEST1 = 'AEST1';
    TimeZone.NFT = 'NFT';
    TimeZone.NZST = 'NZST';
    TimeZone.GMT = 'GMT';
    TimeZone.AKST = 'AKST';
    TimeZone.HST = 'HST';
    TimeZone.HST1 = 'HST1';
    TimeZone.MST1 = 'MST1';
    TimeZone.EST1 = 'EST1';
    TimeZone.AST = 'AST';
    TimeZone.CST2 = 'CST2';
    TimeZone.MST2 = 'MST2';
    TimeZone.PST2 = 'PST2';
    TimeZone.BRT = 'BRT';
    TimeZone.NST = 'NST';
    TimeZone.AZOT = 'AZOT';
    TimeZone.SAMT = 'SAMT';
    TimeZone.YEKT = 'YEKT';
    TimeZone.IST = 'IST';
    TimeZone.NPT = 'NPT';
    TimeZone.OMST = 'OMST';
    TimeZone.CXT = 'CXT';
    TimeZone.GMTMINUSONE = 'GMT-1';
    TimeZone.GMTMINUSTWO = 'GMT-2';
    TimeZone.GMTMINUSTHREE = 'GMT-3';
    TimeZone.GMTMINUSFOUR = 'GMT-4';
    TimeZone.GMTMINUSFIVE = 'GMT-5';
    TimeZone.GMTMINUSSIX = 'GMT-6';
    TimeZone.GMTMINUSSEVEN = 'GMT-7';
    TimeZone.GMTMINUSEIGHT = 'GMT-8';
    TimeZone.GMTMINUSNINE = 'GMT-9';
    TimeZone.GMTMINUSTEN = 'GMT-10';
    TimeZone.GMTMINUSELEVEN = 'GMT-11';
    TimeZone.GMTMINUSTWELEVE = 'GMT-12';
    TimeZone.GMTMINUSTHIRTEEN = 'GMT-13';
    TimeZone.GMTMINUSFOURTEEN = 'GMT-14';
    TimeZone.GMTPLUSONE = 'GMT+1';
    TimeZone.GMTPLUSTWO = 'GMT+2';
    TimeZone.GMTPLUSTHREE = 'GMT+3';
    TimeZone.GMTPLUSFOUR = 'GMT+4';
    TimeZone.GMTPLUSFIVE = 'GMT+5';
    TimeZone.GMTPLUSSIX = 'GMT+6';
    TimeZone.GMTPLUSSEVEN = 'GMT+7';
    TimeZone.GMTPLUSEIGHT = 'GMT+8';
    TimeZone.GMTPLUSNINE = 'GMT+9';
    TimeZone.GMTPLUSNINEHALF = 'GMT+9:30';
    TimeZone.GMTPLUSTEN = 'GMT+10';
    TimeZone.GMTPLUSELEVEN = 'GMT+11';
    TimeZone.GMTPLUSTWELEVE = 'GMT+12';
    TimeZone.GMTPLUSTHIRTEEN = 'GMT+13';
    TimeZone.GMTPLUSFOURTEEN = 'GMT+14';
    return TimeZone;
}());
exports.TimeZone = TimeZone;
Object.freeze(TimeZone);
var BsDsLwsConfiguration = (function () {
    function BsDsLwsConfiguration() {
    }
    BsDsLwsConfiguration.Content = 'content';
    BsDsLwsConfiguration.Status = 'status';
    BsDsLwsConfiguration.None = 'none';
    return BsDsLwsConfiguration;
}());
exports.BsDsLwsConfiguration = BsDsLwsConfiguration;
Object.freeze(BsDsLwsConfiguration);
var DeviceSetupProperties = (function () {
    function DeviceSetupProperties() {
    }
    DeviceSetupProperties.DeviceName = 'deviceName';
    DeviceSetupProperties.DeviceDescription = 'deviceDescription';
    DeviceSetupProperties.UnitNamingMethod = 'unitNamingMethod';
    DeviceSetupProperties.TimeZone = 'timeZone';
    DeviceSetupProperties.IdleScreenColor = 'idleScreenColor';
    DeviceSetupProperties.SetupType = 'setupType';
    DeviceSetupProperties.BsnDeviceRegistrationTokenEntity = 'bsnDeviceRegistrationTokenEntity';
    DeviceSetupProperties.BDeploy = 'bDeploy';
    DeviceSetupProperties.BsnGroupName = 'bsnGroupName';
    DeviceSetupProperties.TimeBetweenContentChecks = 'timeBetweenNetConnects';
    DeviceSetupProperties.TimeBetweenHeartbeats = 'timeBetweenHeartbeats';
    DeviceSetupProperties.SfnWebFolderUrl = 'sfnWebFolderUrl';
    DeviceSetupProperties.SfnUserName = 'sfnUserName';
    DeviceSetupProperties.SfnPassword = 'sfnPassword';
    DeviceSetupProperties.SfnEnableBasicAuthentication = 'sfnEnableBasicAuthentication';
    DeviceSetupProperties.TimeServer = 'timeServer';
    DeviceSetupProperties.UseWireless = 'useWireless';
    DeviceSetupProperties.SSID = 'ssid';
    DeviceSetupProperties.Passphrase = 'passphrase';
    DeviceSetupProperties.RemoteDwsEnabled = 'remoteDwsEnabled';
    DeviceSetupProperties.DwsEnabled = 'dwsEnabled';
    DeviceSetupProperties.DwsPassword = 'dwsPassword';
    DeviceSetupProperties.LwsEnabled = 'lwsEnabled';
    DeviceSetupProperties.LwsUserName = 'lwsUserName';
    DeviceSetupProperties.LwsPassword = 'lwsPassword';
    DeviceSetupProperties.LwsEnableUpdateNotifications = 'lwsEnableUpdateNotifications';
    DeviceSetupProperties.LwsConfig = 'lwsConfig';
    DeviceSetupProperties.BsnCloudEnabled = 'bsnCloudEnabled';
    DeviceSetupProperties.PlaybackLoggingEnabled = 'playbackLoggingEnabled';
    DeviceSetupProperties.EventLoggingEnabled = 'eventLoggingEnabled';
    DeviceSetupProperties.DiagnosticLoggingEnabled = 'diagnosticLoggingEnabled';
    DeviceSetupProperties.StateLoggingEnabled = 'stateLoggingEnabled';
    DeviceSetupProperties.VariableLoggingEnabled = 'variableLoggingEnabled';
    DeviceSetupProperties.UploadLogFilesAtBoot = 'uploadLogFilesAtBoot';
    DeviceSetupProperties.UploadLogFilesAtSpecificTime = 'uploadLogFilesAtSpecificTime';
    DeviceSetupProperties.UploadLogFilesTime = 'uploadLogFilesTime';
    DeviceSetupProperties.LogHandlerUrl = 'logHandlerUrl';
    DeviceSetupProperties.EnableRemoteSnapshot = 'enableRemoteSnapshot';
    DeviceSetupProperties.RemoteSnapshotInterval = 'remoteSnapshotInterval';
    DeviceSetupProperties.RemoteSnapshotMaxImages = 'remoteSnapshotMaxImages';
    DeviceSetupProperties.RemoteSnapshotJpegQualityLevel = 'remoteSnapshotJpegQualityLevel';
    DeviceSetupProperties.RemoteSnapshotScreenOrientation = 'remoteSnapshotScreenOrientation';
    DeviceSetupProperties.RemoteSnapshotHandlerUrl = 'remoteSnapshotHandlerUrl';
    DeviceSetupProperties.EnableSerialDebugging = 'enableSerialDebugging';
    DeviceSetupProperties.EnableSystemLogDebugging = 'enableSystemLogDebugging';
    DeviceSetupProperties.ContentDataTypeEnabledWired = 'contentDataTypeEnabledWired';
    DeviceSetupProperties.TextFeedsDataTypeEnabledWired = 'textFeedsDataTypeEnabledWired';
    DeviceSetupProperties.HealthDataTypeEnabledWired = 'healthDataTypeEnabledWired';
    DeviceSetupProperties.MediaFeedsDataTypeEnabledWired = 'mediaFeedsDataTypeEnabledWired';
    DeviceSetupProperties.LogUploadsXfersEnabledWired = 'logUploadsXfersEnabledWired';
    DeviceSetupProperties.ContentDataTypeEnabledWireless = 'contentDataTypeEnabledWireless';
    DeviceSetupProperties.TextFeedsDataTypeEnabledWireless = 'textFeedsDataTypeEnabledWireless';
    DeviceSetupProperties.HealthDataTypeEnabledWireless = 'healthDataTypeEnabledWireless';
    DeviceSetupProperties.MediaFeedsDataTypeEnabledWireless = 'mediaFeedsDataTypeEnabledWireless';
    DeviceSetupProperties.LogUploadsXfersEnabledWireless = 'logUploadsXfersEnabledWireless';
    DeviceSetupProperties.UseDhcp = 'useDHCP';
    DeviceSetupProperties.StaticIpAddress = 'staticIPAddress';
    DeviceSetupProperties.SubnetMask = 'subnetMask';
    DeviceSetupProperties.Gateway = 'gateway';
    DeviceSetupProperties.Dns1 = 'dns1';
    DeviceSetupProperties.Dns2 = 'dns2';
    DeviceSetupProperties.Dns3 = 'dns3';
    DeviceSetupProperties.RateLimitModeOutsideWindow = 'rateLimitModeOutsideWindow';
    DeviceSetupProperties.RateLimitRateOutsideWindow = 'rateLimitRateOutsideWindow';
    DeviceSetupProperties.RateLimitModeInWindow = 'rateLimitModeInWindow';
    DeviceSetupProperties.RateLimitRateInWindow = 'rateLimitRateInWindow';
    DeviceSetupProperties.RateLimitModeInitialDownloads = 'rateLimitModeInitialDownloads';
    DeviceSetupProperties.RateLimitRateInitialDownloads = 'rateLimitRateInitialDownloads';
    DeviceSetupProperties.UseDhcp2 = 'useDHCP_2';
    DeviceSetupProperties.StaticIpAddress2 = 'staticIPAddress_2';
    DeviceSetupProperties.SubnetMask2 = 'subnetMask_2';
    DeviceSetupProperties.Gateway2 = 'gateway_2';
    DeviceSetupProperties.Dns12 = 'dns1_2';
    DeviceSetupProperties.Dns22 = 'dns2_2';
    DeviceSetupProperties.Dns32 = 'dns3_2';
    DeviceSetupProperties.RateLimitModeOutsideWindow2 = 'rateLimitModeOutsideWindow_2';
    DeviceSetupProperties.RateLimitRateOutsideWindow2 = 'rateLimitRateOutsideWindow_2';
    DeviceSetupProperties.RateLimitModeInWindow2 = 'rateLimitModeInWindow_2';
    DeviceSetupProperties.RateLimitRateInWindow2 = 'rateLimitRateInWindow_2';
    DeviceSetupProperties.RateLimitModeInitialDownloads2 = 'rateLimitModeInitialDownloads_2';
    DeviceSetupProperties.RateLimitRateInitialDownloads2 = 'rateLimitRateInitialDownloads_2';
    DeviceSetupProperties.NetworkConnectionPriority = 'networkConnectionPriority';
    DeviceSetupProperties.SpecifyHostname = 'specifyHostname';
    DeviceSetupProperties.Hostname = 'hostname';
    DeviceSetupProperties.UseProxy = 'useProxy';
    DeviceSetupProperties.ProxyAddress = 'proxyAddress';
    DeviceSetupProperties.ProxyPort = 'proxyPort';
    DeviceSetupProperties.NetworkHosts = 'networkHosts';
    DeviceSetupProperties.NetworkDiagnosticsEnabled = 'networkDiagnosticsEnabled';
    DeviceSetupProperties.TestEthernetEnabled = 'testEthernetEnabled';
    DeviceSetupProperties.TestWirelessEnabled = 'testWirelessEnabled';
    DeviceSetupProperties.TestInternetEnabled = 'testInternetEnabled';
    DeviceSetupProperties.UseCustomSplashScreen = 'useCustomSplashScreen';
    DeviceSetupProperties.ContentDownloadsRestricted = 'contentDownloadsRestricted';
    DeviceSetupProperties.ContentDownloadRangeStart = 'contentDownloadRangeStart';
    DeviceSetupProperties.ContentDownloadRangeEnd = 'contentDownloadRangeEnd';
    DeviceSetupProperties.HeartbeatsRestricted = 'heartbeatsRestricted';
    DeviceSetupProperties.HeartbeatsRangeStart = 'heartbeatsRangeStart';
    DeviceSetupProperties.HeartbeatsRangeEnd = 'heartbeatsRangeEnd';
    DeviceSetupProperties.BrightWallNameKey = 'BrightWallName';
    DeviceSetupProperties.BrightWallScreenNumberKey = 'BrightWallScreenNumber';
    DeviceSetupProperties.UsbUpdatePassword = 'usbUpdatePassword';
    DeviceSetupProperties.EnablePhysicalLan = 'enablePhysicalLan';
    DeviceSetupProperties.Vlans = 'vlans';
    DeviceSetupProperties.InheritNetworkProperties = 'inheritNetworkProperties';
    DeviceSetupProperties.InternalCaArtifacts = 'internalCaArtifacts';
    return DeviceSetupProperties;
}());
exports.DeviceSetupProperties = DeviceSetupProperties;
Object.freeze(DeviceSetupProperties);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isString = __webpack_require__(2);
var isNil = __webpack_require__(0);
var isNaN = __webpack_require__(22);
var convertFromBase31 = function (codePoint) {
    codePoint = codePoint % 31;
    if (codePoint < 10) {
        return String.fromCharCode(codePoint + 48);
    }
    if (codePoint === 10) {
        return 'A';
    }
    if (codePoint >= 11 && codePoint <= 16) {
        return String.fromCharCode(codePoint + 67 - 11);
    }
    if (codePoint >= 17 && codePoint <= 21) {
        return String.fromCharCode(codePoint + 74 - 17);
    }
    if (codePoint === 22) {
        return 'P';
    }
    if (codePoint >= 23 && codePoint <= 830) {
        return String.fromCharCode(codePoint + 82 - 23);
    }
    return null;
};
var convertToBase31 = function (infoUC, index) {
    if (isNil(index)) {
        index = 0;
    }
    var charVal = infoUC.charCodeAt(index);
    if (charVal >= 48 && charVal <= 57) {
        return charVal - 48;
    }
    if (charVal === 65) {
        return 10;
    }
    if (charVal >= 67 && charVal <= 72) {
        return charVal - 67 + 11;
    }
    if (charVal >= 74 && charVal <= 78) {
        return charVal - 74 + 17;
    }
    if (charVal === 80) {
        return 22;
    }
    if (charVal >= 82 && charVal <= 89) {
        return charVal - 82 + 23;
    }
    return NaN;
};
var getCheckChar = function (infoUC) {
    var i;
    var x;
    var valArray = [];
    for (i = 0; i < 12; i++) {
        x = convertToBase31(infoUC, i);
        if (isNaN(x)) {
            return null;
        }
        if (i !== 5) {
            valArray.push(x);
        }
    }
    for (i = 0; i < 11; i += 2) {
        x = valArray[i] * 2;
        if (x > 30) {
            x = (x % 31) + 1;
        }
        valArray[i] = x;
    }
    var sum = valArray.reduce(function (previousValue, currentValue) {
        return currentValue + previousValue;
    });
    return convertFromBase31(31 - sum % 31);
};
function bscValidateSerialNumber(serial) {
    if (!isString(serial)) {
        return false;
    }
    if (serial.length !== 12) {
        return false;
    }
    var upperCaseInfo = serial.toUpperCase();
    var checkChar = getCheckChar(upperCaseInfo);
    if (checkChar !== upperCaseInfo.charAt(5)) {
        return false;
    }
    return true;
}
exports.bscValidateSerialNumber = bscValidateSerialNumber;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isNil = __webpack_require__(0);
var FirmwareUpdateSource = (function () {
    function FirmwareUpdateSource() {
    }
    FirmwareUpdateSource.Production = 'production';
    FirmwareUpdateSource.Beta = 'beta';
    FirmwareUpdateSource.MinimumCompatible = 'compatible';
    FirmwareUpdateSource.SpecificFile = 'specific';
    FirmwareUpdateSource.SpecificUrl = 'specificUrl';
    FirmwareUpdateSource.None = 'none';
    FirmwareUpdateSource.Existing = 'existing';
    return FirmwareUpdateSource;
}());
exports.FirmwareUpdateSource = FirmwareUpdateSource;
Object.freeze(FirmwareUpdateSource);
var FirmwareUpdateType = (function () {
    function FirmwareUpdateType() {
    }
    FirmwareUpdateType.Standard = 'standard';
    FirmwareUpdateType.Different = 'different';
    FirmwareUpdateType.Newer = 'newer';
    FirmwareUpdateType.Save = 'save';
    return FirmwareUpdateType;
}());
exports.FirmwareUpdateType = FirmwareUpdateType;
Object.freeze(FirmwareUpdateType);
function bscGetFirmwareUpdateTargetFileName(firmWare, firmwareUpdateType) {
    switch (firmwareUpdateType) {
        case FirmwareUpdateType.Different:
            return firmWare.firmwareUpdateDifferentTargetFileName;
        case FirmwareUpdateType.Newer:
            return firmWare.firmwareUpdateNewerTargetFileName;
        case FirmwareUpdateType.Save:
            return firmWare.firmwareUpdateSaveTargetFileName;
        case FirmwareUpdateType.Standard:
        default:
            return firmWare.firmwareUpdateStandardTargetFileName;
    }
}
exports.bscGetFirmwareUpdateTargetFileName = bscGetFirmwareUpdateTargetFileName;
function bscGetFirmwareFileName(firmWare, firmwareUpdateType) {
    switch (firmwareUpdateType) {
        case FirmwareUpdateType.Different:
            return firmWare.firmwareUpdateDifferentTargetFileName;
        case FirmwareUpdateType.Newer:
            return firmWare.firmwareUpdateNewerTargetFileName;
        case FirmwareUpdateType.Save:
            return firmWare.firmwareUpdateSaveTargetFileName;
        case FirmwareUpdateType.Standard:
        default:
            return firmWare.firmwareUpdateStandardTargetFileName;
    }
}
exports.bscGetFirmwareFileName = bscGetFirmwareFileName;
function bscGetFirmwareSourceUrl(firmWare) {
    switch (firmWare.firmwareUpdateSource) {
        case FirmwareUpdateSource.Production:
        default: {
            return firmWare.productionReleaseURL;
        }
        case FirmwareUpdateSource.Beta: {
            return firmWare.betaReleaseURL;
        }
        case FirmwareUpdateSource.SpecificFile: {
            return firmWare.firmwareUpdateSourceFilePath;
        }
        case FirmwareUpdateSource.MinimumCompatible: {
            return firmWare.compatibleReleaseURL;
        }
        case FirmwareUpdateSource.SpecificUrl: {
            return firmWare.firmwareUpdateSourceUrl;
        }
    }
}
exports.bscGetFirmwareSourceUrl = bscGetFirmwareSourceUrl;
function bscCreatePublishFirmware(props) {
    if (!isNil(props)) {
        return {
            firmwareUpdateSource: !isNil(props.firmwareUpdateSource) ? props.firmwareUpdateSource : null,
            firmwareUpdateSourceFilePath: !isNil(props.firmwareUpdateSourceFilePath) ? props.firmwareUpdateSourceFilePath : '',
            firmwareUpdateSourceUrl: !isNil(props.firmwareUpdateSourceUrl) ? props.firmwareUpdateSourceUrl : '',
            firmwareUpdateStandardTargetFileName: !isNil(props.firmwareUpdateStandardTargetFileName) ? props.firmwareUpdateStandardTargetFileName : '',
            firmwareUpdateDifferentTargetFileName: !isNil(props.firmwareUpdateDifferentTargetFileName) ? props.firmwareUpdateDifferentTargetFileName : '',
            firmwareUpdateNewerTargetFileName: !isNil(props.firmwareUpdateNewerTargetFileName) ? props.firmwareUpdateNewerTargetFileName : '',
            firmwareUpdateSaveTargetFileName: !isNil(props.firmwareUpdateSaveTargetFileName) ? props.firmwareUpdateSaveTargetFileName : '',
            firmwareUpdateVersion: !isNil(props.firmwareUpdateVersion) ? props.firmwareUpdateVersion : '',
            productionReleaseURL: !isNil(props.productionReleaseURL) ? props.productionReleaseURL : '',
            betaReleaseURL: !isNil(props.betaReleaseURL) ? props.betaReleaseURL : '',
            compatibleReleaseURL: !isNil(props.compatibleReleaseURL) ? props.compatibleReleaseURL : '',
            productionVersion: !isNil(props.productionVersion) ? props.productionVersion : '',
            betaVersion: !isNil(props.betaVersion) ? props.betaVersion : '',
            compatibleVersion: !isNil(props.compatibleVersion) ? props.compatibleVersion : '',
            productionVersionNumber: !isNil(props.productionVersionNumber) ? props.productionVersionNumber : -1,
            betaVersionNumber: !isNil(props.betaVersionNumber) ? props.betaVersionNumber : -1,
            compatibleVersionNumber: !isNil(props.compatibleVersionNumber) ? props.compatibleVersionNumber : -1,
            productionReleaseSHA1: !isNil(props.productionReleaseSHA1) ? props.productionReleaseSHA1 : '',
            betaReleaseSHA1: !isNil(props.betaReleaseSHA1) ? props.betaReleaseSHA1 : '',
            compatibleReleaseSHA1: !isNil(props.compatibleReleaseSHA1) ? props.compatibleReleaseSHA1 : '',
            productionReleaseFileLength: !isNil(props.productionReleaseFileLength) ? props.productionReleaseFileLength : -1,
            betaReleaseFileLength: !isNil(props.betaReleaseFileLength) ? props.betaReleaseFileLength : -1,
            compatibleReleaseFileLength: !isNil(props.compatibleReleaseFileLength) ? props.compatibleReleaseFileLength : -1,
            existingFWContentID: !isNil(props.existingFWContentID) ? props.existingFWContentID : '',
        };
    }
    else {
        return {
            firmwareUpdateSource: null,
            firmwareUpdateSourceFilePath: '',
            firmwareUpdateSourceUrl: '',
            firmwareUpdateStandardTargetFileName: '',
            firmwareUpdateDifferentTargetFileName: '',
            firmwareUpdateNewerTargetFileName: '',
            firmwareUpdateSaveTargetFileName: '',
            firmwareUpdateVersion: '',
            productionReleaseURL: '',
            betaReleaseURL: '',
            compatibleReleaseURL: '',
            productionVersion: '',
            betaVersion: '',
            compatibleVersion: '',
            productionVersionNumber: -1,
            betaVersionNumber: -1,
            compatibleVersionNumber: -1,
            productionReleaseSHA1: '',
            betaReleaseSHA1: '',
            compatibleReleaseSHA1: '',
            productionReleaseFileLength: -1,
            betaReleaseFileLength: -1,
            compatibleReleaseFileLength: -1,
            existingFWContentID: '',
        };
    }
}
exports.bscCreatePublishFirmware = bscCreatePublishFirmware;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var irRemoteModel_1 = __webpack_require__(5);
function bscGetIrRemoteControl(irRemoteModel) {
    var _a, _b;
    switch (irRemoteModel) {
        case irRemoteModel_1.IrRemoteModel.RC1001:
        default:
            return {
                id: 'RC-1001',
                encoding: 'NEC',
                manufacturerCode: 0x6F90,
                buttons: (_a = {},
                    _a[0x16] = { buttonCode: 0x16, buttonDescription: 'Power' },
                    _a[0x42] = { buttonCode: 0x42, buttonDescription: 'Brightness' },
                    _a[0x17] = { buttonCode: 0x17, buttonDescription: 'Home' },
                    _a[0x18] = { buttonCode: 0x18, buttonDescription: 'Search' },
                    _a[0x15] = { buttonCode: 0x15, buttonDescription: 'Back' },
                    _a[0x12] = { buttonCode: 0x12, buttonDescription: 'Up' },
                    _a[0x11] = { buttonCode: 0x11, buttonDescription: 'Right' },
                    _a[0x13] = { buttonCode: 0x13, buttonDescription: 'Down' },
                    _a[0x10] = { buttonCode: 0x10, buttonDescription: 'Left' },
                    _a[0x14] = { buttonCode: 0x14, buttonDescription: 'Ok' },
                    _a[0x1b] = { buttonCode: 0x1b, buttonDescription: 'Rewind' },
                    _a[0x19] = { buttonCode: 0x19, buttonDescription: 'Play' },
                    _a[0x1a] = { buttonCode: 0x1a, buttonDescription: 'Fast Forward' },
                    _a[0x1c] = { buttonCode: 0x1c, buttonDescription: 'Pause' },
                    _a[0x1e] = { buttonCode: 0x1e, buttonDescription: 'Shuffle' },
                    _a[0x1d] = { buttonCode: 0x1d, buttonDescription: 'Add' },
                    _a[0x1f] = { buttonCode: 0x1f, buttonDescription: 'Repeat' },
                    _a[0x40] = { buttonCode: 0x40, buttonDescription: 'Volume Up' },
                    _a[0x41] = { buttonCode: 0x41, buttonDescription: 'Volume Down' },
                    _a),
            };
        case irRemoteModel_1.IrRemoteModel.RC1002:
            return {
                id: 'RC-1002',
                encoding: 'NEC',
                manufacturerCode: 0x6F90,
                buttons: (_b = {},
                    _b[0x16] = { buttonCode: 0x16, buttonDescription: 'Power' },
                    _b[0x42] = { buttonCode: 0x42, buttonDescription: 'Brightness' },
                    _b[0x17] = { buttonCode: 0x17, buttonDescription: 'Home' },
                    _b[0x18] = { buttonCode: 0x18, buttonDescription: 'Search' },
                    _b[0x15] = { buttonCode: 0x15, buttonDescription: 'Back' },
                    _b[0x12] = { buttonCode: 0x12, buttonDescription: 'Up' },
                    _b[0x11] = { buttonCode: 0x11, buttonDescription: 'Right' },
                    _b[0x13] = { buttonCode: 0x13, buttonDescription: 'Down' },
                    _b[0x10] = { buttonCode: 0x10, buttonDescription: 'Left' },
                    _b[0x14] = { buttonCode: 0x14, buttonDescription: 'Ok' },
                    _b[0x1b] = { buttonCode: 0x1b, buttonDescription: 'Rewind' },
                    _b[0x19] = { buttonCode: 0x19, buttonDescription: 'Play' },
                    _b[0x1a] = { buttonCode: 0x1a, buttonDescription: 'Fast Forward' },
                    _b[0x1c] = { buttonCode: 0x1c, buttonDescription: 'Pause' },
                    _b[0x1e] = { buttonCode: 0x1e, buttonDescription: 'Shuffle' },
                    _b[0x1d] = { buttonCode: 0x1d, buttonDescription: 'Add' },
                    _b[0x1f] = { buttonCode: 0x1f, buttonDescription: 'Repeat' },
                    _b[0x40] = { buttonCode: 0x40, buttonDescription: 'Volume Up' },
                    _b[0x41] = { buttonCode: 0x41, buttonDescription: 'Volume Down' },
                    _b[0x43] = { buttonCode: 0x43, buttonDescription: 'Info' },
                    _b[0x0B] = { buttonCode: 0x0B, buttonDescription: 'Channel Up' },
                    _b[0x0D] = { buttonCode: 0x0D, buttonDescription: 'Channel Down' },
                    _b[0x0F] = { buttonCode: 0x0F, buttonDescription: 'Mute' },
                    _b[0x01] = { buttonCode: 0x01, buttonDescription: '1' },
                    _b[0x02] = { buttonCode: 0x02, buttonDescription: '2' },
                    _b[0x03] = { buttonCode: 0x03, buttonDescription: '3' },
                    _b[0x04] = { buttonCode: 0x04, buttonDescription: '4' },
                    _b[0x05] = { buttonCode: 0x05, buttonDescription: '5' },
                    _b[0x06] = { buttonCode: 0x06, buttonDescription: '6' },
                    _b[0x07] = { buttonCode: 0x07, buttonDescription: '7' },
                    _b[0x08] = { buttonCode: 0x08, buttonDescription: '8' },
                    _b[0x09] = { buttonCode: 0x09, buttonDescription: '9' },
                    _b[0x45] = { buttonCode: 0x45, buttonDescription: '0' },
                    _b[0x0C] = { buttonCode: 0x0C, buttonDescription: 'Period "."' },
                    _b[0x47] = { buttonCode: 0x47, buttonDescription: 'Last' },
                    _b[0x00] = { buttonCode: 0x00, buttonDescription: 'Option' },
                    _b[0x0E] = { buttonCode: 0x0E, buttonDescription: 'Source' },
                    _b[0x0A] = { buttonCode: 0x0A, buttonDescription: 'Exit' },
                    _b[0x46] = { buttonCode: 0x46, buttonDescription: 'Stop' },
                    _b[0x53] = { buttonCode: 0x53, buttonDescription: 'Red' },
                    _b[0x44] = { buttonCode: 0x44, buttonDescription: 'Green' },
                    _b[0x57] = { buttonCode: 0x57, buttonDescription: 'Yellow' },
                    _b[0x54] = { buttonCode: 0x54, buttonDescription: 'Blue' },
                    _b),
            };
    }
}
exports.bscGetIrRemoteControl = bscGetIrRemoteControl;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var TapProtocolType = (function () {
    function TapProtocolType() {
    }
    TapProtocolType.Serial = 'SERIAL';
    TapProtocolType.Cdc = 'CDC';
    TapProtocolType.Hid = 'HID';
    return TapProtocolType;
}());
exports.TapProtocolType = TapProtocolType;
Object.freeze(TapProtocolType);
var BMapProtocolType = (function () {
    function BMapProtocolType() {
    }
    BMapProtocolType.Hid = 'HID';
    BMapProtocolType.None = 'None';
    return BMapProtocolType;
}());
exports.BMapProtocolType = BMapProtocolType;
Object.freeze(BMapProtocolType);
var CommandLibrarySupportType = (function () {
    function CommandLibrarySupportType() {
    }
    CommandLibrarySupportType.Bmap = 'BMAP';
    CommandLibrarySupportType.Riviera = 'Riviera';
    CommandLibrarySupportType.None = 'None';
    return CommandLibrarySupportType;
}());
exports.CommandLibrarySupportType = CommandLibrarySupportType;
Object.freeze(CommandLibrarySupportType);
var EolType = (function () {
    function EolType() {
    }
    EolType.CR = 'CR';
    EolType.LF = 'LF';
    EolType.CRLF = 'CR+LF';
    return EolType;
}());
exports.EolType = EolType;
Object.freeze(EolType);
function bscDisplayUsbPortNames(partnerProduct) {
    return (bscIsUsbAudioDevice(partnerProduct)
        || bscIsUsbNetworkedDevice(partnerProduct)
        || bscIsUsbHidCommunicationDevice(partnerProduct));
}
exports.bscDisplayUsbPortNames = bscDisplayUsbPortNames;
function bscIsUsbAudioDevice(partnerProduct) {
    return (!isNil(partnerProduct.usbAudioInterfaceIndex) &&
        isString(partnerProduct.usbAudioInterfaceIndex) && partnerProduct.usbAudioInterfaceIndex.length > 0);
}
exports.bscIsUsbAudioDevice = bscIsUsbAudioDevice;
function bscIsUsbNetworkedDevice(partnerProduct) {
    return (!isNil(partnerProduct.usbNetInterfaceIndex) &&
        isString(partnerProduct.usbNetInterfaceIndex) && partnerProduct.usbNetInterfaceIndex.length > 0);
}
exports.bscIsUsbNetworkedDevice = bscIsUsbNetworkedDevice;
function bscIsUsbHidCommunicationDevice(partnerProduct) {
    return (!isNil(partnerProduct.tapProtocol) &&
        partnerProduct.tapProtocol === TapProtocolType.Hid);
}
exports.bscIsUsbHidCommunicationDevice = bscIsUsbHidCommunicationDevice;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var playerModel_1 = __webpack_require__(3);
var metadata_1 = __webpack_require__(1);
var probe_1 = __webpack_require__(7);
function bscGetPlayerCapabilities(model) {
    switch (model) {
        case playerModel_1.PlayerModel.XT1144:
        case playerModel_1.PlayerModel.XT1143:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 2,
                videoPlaneCount: 2,
                maxImageSize: { width: 4096, height: 2160 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.XT244:
        case playerModel_1.PlayerModel.XT243:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 2,
                videoPlaneCount: 2,
                maxImageSize: { width: 4096, height: 2160 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.XT1043:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.FK1142:
        case playerModel_1.PlayerModel.FK1042:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.FK242:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.XD1034:
        case playerModel_1.PlayerModel.XD1033:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.XD234:
        case playerModel_1.PlayerModel.XD233:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.HD1024:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 1,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HD224:
        case playerModel_1.PlayerModel.HS144:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 1,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.LS424:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HD1023:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HS124:
        case playerModel_1.PlayerModel.HD223:
        case playerModel_1.PlayerModel.HS123:
        case playerModel_1.PlayerModel.HO523:
        default:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.LS423:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.AU325:
            return {
                videoDecoderCount: 0,
                videoDecoder4kCount: 0,
                videoPlaneCount: 0,
                maxImageSize: { width: 0, height: 0 },
                maxVideoSize: { width: 0, height: 0 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.NA,
                audioDecoderCount: 3,
                usbConnectorNames: [
                    metadata_1.UsbConnectorName.Usb_1,
                    metadata_1.UsbConnectorName.Usb_2,
                    metadata_1.UsbConnectorName.Usb_3,
                    metadata_1.UsbConnectorName.Usb_4,
                    metadata_1.UsbConnectorName.Usb_5,
                    metadata_1.UsbConnectorName.Usb_6,
                ],
            };
        case playerModel_1.PlayerModel.AU335:
            return {
                videoDecoderCount: 0,
                videoDecoder4kCount: 0,
                videoPlaneCount: 0,
                maxImageSize: { width: 0, height: 0 },
                maxVideoSize: { width: 0, height: 0 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.NA,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC],
            };
    }
}
exports.bscGetPlayerCapabilities = bscGetPlayerCapabilities;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ScheduleRecurrencePattern = (function () {
    function ScheduleRecurrencePattern() {
    }
    ScheduleRecurrencePattern.AllDays = 'AllDays';
    ScheduleRecurrencePattern.Weekends = 'Weekends';
    ScheduleRecurrencePattern.Weekdays = 'Weekdays';
    ScheduleRecurrencePattern.Custom = 'Custom';
    return ScheduleRecurrencePattern;
}());
exports.ScheduleRecurrencePattern = ScheduleRecurrencePattern;
Object.freeze(ScheduleRecurrencePattern);
var StorageSpaceLimitUnits = (function () {
    function StorageSpaceLimitUnits() {
    }
    StorageSpaceLimitUnits.Percentage = 'Percentage';
    StorageSpaceLimitUnits.Megabyte = 'Megabyte';
    return StorageSpaceLimitUnits;
}());
exports.StorageSpaceLimitUnits = StorageSpaceLimitUnits;
exports.PublishDataKeys = [
    'hdX23Firmware', 'lsX23Firmware',
    'hsX23Firmware', 'hoX23Firmware',
    'xdX33Firmware', 'xtX43Firmware',
    'xdX34_XTX44Firmware', 'hdX4_HSX4_LSX4Firmware',
    '4KX42Firmware', 'aux5Firmware',
    'enableSerialDebugging', 'enableSystemLogDebugging', 'enableStorageSpaceLimit',
    'storageSpaceLimitUnits', 'publishedDataSizeLimit', 'dynamicDataSizeLimit',
    'htmlDataSizeLimit', 'htmlLocalStorageSizeLimit', 'webDatabaseSizeLimit',
];


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BsUploadItemStatus = (function () {
    function BsUploadItemStatus() {
    }
    BsUploadItemStatus.Pending = 'Pending';
    BsUploadItemStatus.Uploading = 'Uploading';
    BsUploadItemStatus.Uploaded = 'Uploaded';
    BsUploadItemStatus.Matched = 'Matched';
    BsUploadItemStatus.Cancelled = 'Cancelled';
    BsUploadItemStatus.Failed = 'Failed';
    return BsUploadItemStatus;
}());
exports.BsUploadItemStatus = BsUploadItemStatus;
Object.freeze(BsUploadItemStatus);
function bscCreateLocalFileBuffer(name, data, type, lastModifiedDate, hash) {
    var obj = {
        name: name, data: data,
        type: type.toLowerCase(),
        lastModifiedDate: lastModifiedDate ? lastModifiedDate : new Date(),
    };
    if (hash) {
        obj.hash = hash;
    }
    return obj;
}
exports.bscCreateLocalFileBuffer = bscCreateLocalFileBuffer;
function bscIsLocalFileBuffer(obj) {
    return obj != null
        && typeof obj === 'object'
        && obj.hasOwnProperty('name') && typeof obj.name === 'string'
        && obj.hasOwnProperty('data') && (obj.data instanceof Uint8Array)
        && obj.hasOwnProperty('type') && typeof obj.name === 'string';
}
exports.bscIsLocalFileBuffer = bscIsLocalFileBuffer;
var mimeTypeExtensionMap = {
    'image/jpeg': 'jpg',
    'image/jpg': 'jpg',
    'image/png': 'png',
    'image/bmp': 'bmp',
    'image/svg+xml': 'svg',
    'video/mp4': 'mp4',
    'video/h264': 'mp4',
    'video/h265': 'mp4',
    'video/quicktime': 'mov',
    'video/mpeg': 'mpg',
    'video/mp2t': 'ts',
    'video/x-ms-vob': 'vob',
    'video/x-ms-wmv': 'wmv',
    'video/x-matroska': 'mkv',
    'audio/mp3': 'mp3',
    'audio/wav': 'wav',
    'audio/x-wav': 'wav',
    'audio/mp4': 'm4a',
    'audio/x-m4a': 'm4a',
    'audio/x-aiff': 'aiff',
    'audio/aac': 'aac',
    'text/plain': 'txt',
    'text/html': 'html',
    'text/xml': 'xml',
    'text/css': 'css',
    'text/javascript': 'js',
    'text/brightscript': 'brs',
    'font/ttf': 'ttf',
    'font/otf': 'otf',
    'application/bpfx': 'bpfx',
    'application/bpf': 'bpf',
};
function bscGetFileExtensionForMimeType(mimeType) {
    var ext = mimeTypeExtensionMap[mimeType];
    return ext ? '.' + ext : null;
}
exports.bscGetFileExtensionForMimeType = bscGetFileExtensionForMimeType;
var extensionMimeTypeMap;
var buildExtMap = function () {
    extensionMimeTypeMap = {};
    Object.keys(mimeTypeExtensionMap).forEach(function (mimeType) {
        var ext = mimeTypeExtensionMap[mimeType];
        if (!extensionMimeTypeMap[ext]) {
            extensionMimeTypeMap[ext] = mimeType;
        }
    });
    extensionMimeTypeMap['htm'] = extensionMimeTypeMap['html'];
};
function bscGetMimeTypeForFileExtension(extension) {
    if (!extensionMimeTypeMap) {
        buildExtMap();
    }
    if (extension.charAt(0) === '.') {
        extension = extension.slice(1);
    }
    var type = extensionMimeTypeMap[extension];
    return type ? type : 'application/octet-stream';
}
exports.bscGetMimeTypeForFileExtension = bscGetMimeTypeForFileExtension;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var metadata_1 = __webpack_require__(1);
var isString = __webpack_require__(2);
var isNil = __webpack_require__(0);
function bscReplaceTimeZoneWithUTC(time) {
    return new Date(Date.UTC(time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()));
}
exports.bscReplaceTimeZoneWithUTC = bscReplaceTimeZoneWithUTC;
function bscTimeSpanStringToSeconds(ts) {
    if (!isNil(ts)) {
        var matchResult = ts.match(/(?:(\d+)\.)?(\d\d):(\d\d):(\d\d)(\.\d+)?/);
        if (matchResult != null && matchResult.length === 6) {
            try {
                var seconds = (Number(matchResult[2]) * 3600)
                    + (Number(matchResult[3]) * 60)
                    + (Number(matchResult[4]));
                if (typeof (matchResult[1]) !== 'undefined') {
                    seconds += Number(matchResult[1]) * 86400;
                }
                if (typeof (matchResult[5]) !== 'undefined') {
                    seconds += Math.round(Number(matchResult[5]) * 1000) / 1000;
                }
                return seconds;
            }
            catch (e) {
                return 0;
            }
        }
    }
    return 0;
}
exports.bscTimeSpanStringToSeconds = bscTimeSpanStringToSeconds;
function bscTimeSpanStringFromSeconds(totalSeconds) {
    var days = Math.trunc(totalSeconds / 86400);
    var rem = totalSeconds - (days * 86400);
    var hours = Math.trunc(rem / 3600);
    rem -= (hours * 3600);
    var minutes = Math.trunc(rem / 60);
    var seconds = rem - (minutes * 60);
    var wholeSeconds = Math.floor(seconds);
    var fraction = seconds - Math.floor(seconds);
    var fractionString = fraction > 0 ? fraction.toFixed(3).substring(1) : '';
    return (days > 0 ? days.toString() + '.' : '') +
        ('00' + hours.toString()).slice(-2) + ':' +
        ('00' + minutes.toString()).slice(-2) + ':' +
        ('00' + wholeSeconds.toString()).slice(-2) + fractionString;
}
exports.bscTimeSpanStringFromSeconds = bscTimeSpanStringFromSeconds;
function bscImageOrientationToRotationType(orientation) {
    switch (orientation) {
        case metadata_1.ImageOrientationType.BottomRight:
        case metadata_1.ImageOrientationType.BottomLeft:
            return metadata_1.RotationType.rot180;
        case metadata_1.ImageOrientationType.RightTop:
        case metadata_1.ImageOrientationType.RightBottom:
            return metadata_1.RotationType.rot270;
        case metadata_1.ImageOrientationType.LeftBottom:
        case metadata_1.ImageOrientationType.LeftTop:
            return metadata_1.RotationType.rot90;
    }
    return metadata_1.RotationType.rot0;
}
exports.bscImageOrientationToRotationType = bscImageOrientationToRotationType;
function bscIsNumericArray(strArray) {
    var regEx = /\s*\d+(?:\s*-\d+)*\s*/;
    return !strArray.some(function (str) { return !(isString(str) && regEx.test(str)); });
}
exports.bscIsNumericArray = bscIsNumericArray;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var playerModel_1 = __webpack_require__(3);
var playerFeature_1 = __webpack_require__(6);
var metadata_1 = __webpack_require__(1);
var rectangle_1 = __webpack_require__(8);
var VideoResolution = (function () {
    function VideoResolution() {
    }
    VideoResolution.v4096x2160 = '4096x2160';
    VideoResolution.v3840x2160 = '3840x2160';
    VideoResolution.v3840x1080 = '3840x1080';
    VideoResolution.v3840x600 = '3840x600';
    VideoResolution.v3440x1440 = '3440x1440';
    VideoResolution.v2560x1600 = '2560x1600';
    VideoResolution.v2560x1440 = '2560x1440';
    VideoResolution.v2560x1080 = '2560x1080';
    VideoResolution.v2560x960 = '2560x960';
    VideoResolution.v2376x288 = '2376x288';
    VideoResolution.v2048x1152 = '2048x1152';
    VideoResolution.v1920x1920 = '1920x1920';
    VideoResolution.v1920x1200 = '1920x1200';
    VideoResolution.v1920x1080 = '1920x1080';
    VideoResolution.v1920x540 = '1920x540';
    VideoResolution.v1792x1344 = '1792x1344';
    VideoResolution.v1680x1050 = '1680x1050';
    VideoResolution.v1600x1200 = '1600x1200';
    VideoResolution.v1600x900 = '1600x900';
    VideoResolution.v1440x1088 = '1440x1088';
    VideoResolution.v1440x1080 = '1440x1080';
    VideoResolution.v1440x900 = '1440x900';
    VideoResolution.v1400x1050 = '1400x1050';
    VideoResolution.v1366x768 = '1366x768';
    VideoResolution.v1360x768 = '1360x768';
    VideoResolution.v1280x1024 = '1280x1024';
    VideoResolution.v1280x960 = '1280x960';
    VideoResolution.v1280x800 = '1280x800';
    VideoResolution.v1280x768 = '1280x768';
    VideoResolution.v1280x720 = '1280x720';
    VideoResolution.v1200x1920 = '1200x1920';
    VideoResolution.v1024x768 = '1024x768';
    VideoResolution.v960x960 = '960x960';
    VideoResolution.v848x480 = '848x480';
    VideoResolution.v800x1280 = '800x1280';
    VideoResolution.v800x600 = '800x600';
    VideoResolution.v720x576 = '720x576';
    VideoResolution.v720x480 = '720x480';
    VideoResolution.v640x480 = '640x480';
    VideoResolution.vNtscComponent = 'NTSC-COMPONENT';
    VideoResolution.vNtscM = 'NTSC-M';
    VideoResolution.vNtscMJpn = 'NTSC-M-JPN';
    VideoResolution.vPalComponent = 'PAL-COMPONENT';
    VideoResolution.vPalI = 'PAL-I';
    VideoResolution.vPalBG = 'PAL-BG';
    VideoResolution.vPalN = 'PAL-N';
    VideoResolution.vPalNC = 'PAL-NC';
    VideoResolution.vPalM = 'PAL-M';
    VideoResolution.vSecam = 'SECAM';
    VideoResolution.None = '0x0';
    return VideoResolution;
}());
exports.VideoResolution = VideoResolution;
var VideoFrameRate = (function () {
    function VideoFrameRate() {
    }
    VideoFrameRate.r75p = '75p';
    VideoFrameRate.r60p = '60p';
    VideoFrameRate.r59p = '59.94p';
    VideoFrameRate.r57p = '57p';
    VideoFrameRate.r50p = '50p';
    VideoFrameRate.r30p = '30p';
    VideoFrameRate.r29p = '29.97p';
    VideoFrameRate.r25p = '25p';
    VideoFrameRate.r24p = '24p';
    VideoFrameRate.r23p = '23.976p';
    VideoFrameRate.r60i = '60i';
    VideoFrameRate.r59i = '59.94i';
    VideoFrameRate.r50i = '50i';
    VideoFrameRate.None = '0p';
    return VideoFrameRate;
}());
exports.VideoFrameRate = VideoFrameRate;
var VideoMode = (function () {
    function VideoMode() {
    }
    VideoMode.v4096x2160x60p = '4096x2160x60p';
    VideoMode.v4096x2160x59p = '4096x2160x59.94p';
    VideoMode.v4096x2160x50p = '4096x2160x50p';
    VideoMode.v4096x2160x30p = '4096x2160x30p';
    VideoMode.v4096x2160x29p = '4096x2160x29.97p';
    VideoMode.v4096x2160x25p = '4096x2160x25p';
    VideoMode.v4096x2160x24p = '4096x2160x24p';
    VideoMode.v4096x2160x23p = '4096x2160x23.976p';
    VideoMode.v3840x2160x60p = '3840x2160x60p';
    VideoMode.v3840x2160x59p = '3840x2160x59.94p';
    VideoMode.v3840x2160x50p = '3840x2160x50p';
    VideoMode.v3840x2160x30p = '3840x2160x30p';
    VideoMode.v3840x2160x29p = '3840x2160x29.97p';
    VideoMode.v3840x2160x25p = '3840x2160x25p';
    VideoMode.v3840x2160x24p = '3840x2160x24p';
    VideoMode.v3840x2160x23p = '3840x2160x23.976p';
    VideoMode.v3840x1080x60p = '3840x1080x60p';
    VideoMode.v3840x1080x50p = '3840x1080x50p';
    VideoMode.v3840x1080x30p = '3840x1080x30p';
    VideoMode.v3840x1080x25p = '3840x1080x25p';
    VideoMode.v3840x600x60p = '3840x600x60p';
    VideoMode.v3440x1440x60p = '3440x1440x60p';
    VideoMode.v3440x1440x50p = '3440x1440x50p';
    VideoMode.v3440x1440x30p = '3440x1440x30p';
    VideoMode.v2560x1600x60p = '2560x1600x60p';
    VideoMode.v2560x1440x60p = '2560x1440x60p';
    VideoMode.v2560x1440x30p = '2560x1440x30p';
    VideoMode.v2560x1080x60p = '2560x1080x60p';
    VideoMode.v2560x960x60p = '2560x960x60p';
    VideoMode.v2376x288x60p = '2376x288x60p';
    VideoMode.v2048x1152x60p = '2048x1152x60p';
    VideoMode.v1920x1920x60p = '1920x1920x60p';
    VideoMode.v1920x1200x60p = '1920x1200x60p';
    VideoMode.v1920x1200x50p = '1920x1200x50p';
    VideoMode.v1920x1080x60p = '1920x1080x60p';
    VideoMode.v1920x1080x59p = '1920x1080x59.94p';
    VideoMode.v1920x1080x50p = '1920x1080x50p';
    VideoMode.v1920x1080x30p = '1920x1080x30p';
    VideoMode.v1920x1080x29p = '1920x1080x29.97p';
    VideoMode.v1920x1080x25p = '1920x1080x25p';
    VideoMode.v1920x1080x24p = '1920x1080x24p';
    VideoMode.v1920x1080x23p = '1920x1080x23.976p';
    VideoMode.v1920x1080x60i = '1920x1080x60i';
    VideoMode.v1920x1080x59i = '1920x1080x59.94i';
    VideoMode.v1920x1080x50i = '1920x1080x50i';
    VideoMode.v1920x540x60p = '1920x540x60p';
    VideoMode.v1792x1344x60p = '1792x1344x60p';
    VideoMode.v1680x1050x60p = '1680x1050x60p';
    VideoMode.v1600x1200x60p = '1600x1200x60p';
    VideoMode.v1600x900x60p = '1600x900x60p';
    VideoMode.v1440x1088x57p = '1440x1088x57p';
    VideoMode.v1440x1080x60p = '1440x1080x60p';
    VideoMode.v1440x900x75p = '1440x900x75p';
    VideoMode.v1440x900x60p = '1440x900x60p';
    VideoMode.v1400x1050x75p = '1400x1050x75p';
    VideoMode.v1400x1050x60p = '1400x1050x60p';
    VideoMode.v1366x768x60p = '1366x768x60p';
    VideoMode.v1360x768x60p = '1360x768x60p';
    VideoMode.v1280x1024x75p = '1280x1024x75p';
    VideoMode.v1280x1024x60p = '1280x1024x60p';
    VideoMode.v1280x960x60p = '1280x960x60p';
    VideoMode.v1280x800x75p = '1280x800x75p';
    VideoMode.v1280x800x60p = '1280x800x60p';
    VideoMode.v1280x768x60p = '1280x768x60p';
    VideoMode.v1280x720x60p = '1280x720x60p';
    VideoMode.v1280x720x59p = '1280x720x59.94p';
    VideoMode.v1280x720x50p = '1280x720x50p';
    VideoMode.v1280x720x25p = '1280x720x25p';
    VideoMode.v1280x720x24p = '1280x720x24p';
    VideoMode.v1280x720x23p = '1280x720x23.976p';
    VideoMode.v1200x1920x60p = '1200x1920x60p';
    VideoMode.v1024x768x75p = '1024x768x75p';
    VideoMode.v1024x768x60p = '1024x768x60p';
    VideoMode.v960x960x60p = '960x960x60p';
    VideoMode.v848x480x60p = '848x480x60p';
    VideoMode.v800x1280x60p = '800x1280x60p';
    VideoMode.v800x600x75p = '800x600x75p';
    VideoMode.v800x600x60p = '800x600x60p';
    VideoMode.v720x576x50p = '720x576x50p';
    VideoMode.v720x576x50i = '720x576x50i';
    VideoMode.v720x480x60p = '720x480x60p';
    VideoMode.v720x480x59p = '720x480x59.94p';
    VideoMode.v720x480x60i = '720x480x60i';
    VideoMode.v640x480x60p = '640x480x60p';
    VideoMode.vNtscComponent = 'NTSC-COMPONENT';
    VideoMode.vNtscM = 'NTSC-M';
    VideoMode.vNtscMJpn = 'NTSC-M-JPN';
    VideoMode.vPalComponent = 'PAL-COMPONENT';
    VideoMode.vPalI = 'PAL-I';
    VideoMode.vPalBG = 'PAL-BG';
    VideoMode.vPalN = 'PAL-N';
    VideoMode.vPalNC = 'PAL-NC';
    VideoMode.vPalM = 'PAL-M';
    VideoMode.vSecam = 'SECAM';
    VideoMode.None = '0x0x0p';
    return VideoMode;
}());
exports.VideoMode = VideoMode;
function bscGetVideoMode(resolution, frameRate) {
    if (resolution[0] === 'N' || resolution[0] === 'P' || resolution[0] === 'S') {
        return resolution;
    }
    else {
        return resolution + 'x' + frameRate;
    }
}
exports.bscGetVideoMode = bscGetVideoMode;
exports.FourKVideoModeSpec = [
    { resolution: VideoResolution.v4096x2160, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v3840x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r25p
        ] },
    { resolution: VideoResolution.v3840x600, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v3440x1440, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r50p, VideoFrameRate.r30p
        ] },
    { resolution: VideoResolution.v2560x1600, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2560x1440, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r30p] },
    { resolution: VideoResolution.v2560x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2560x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2376x288, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2048x1152, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1920x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x900, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1088, availableRates: [VideoFrameRate.r57p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1366x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1200x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x1280, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p
        ] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.PanteraVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x900, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1088, availableRates: [VideoFrameRate.r57p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1366x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1200x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x1280, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p
        ] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.LynxHdmiVideoModeSpec = [
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r30p, VideoFrameRate.r29p, VideoFrameRate.r25p, VideoFrameRate.r24p
        ] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.vSecam, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscM, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vNtscMJpn, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalI, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalBG, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalN, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalNC, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalM, availableRates: [VideoFrameRate.r59i] },
];
exports.LynxComponentVideoModeSpec = [
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
];
exports.LynxVgaVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.BobcatHdmiVideoModeSpec = [
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r30p, VideoFrameRate.r29p, VideoFrameRate.r25p, VideoFrameRate.r24p
        ] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.vSecam, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscM, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vNtscMJpn, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalI, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalBG, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalN, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalNC, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalM, availableRates: [VideoFrameRate.r59i] },
];
exports.BobcatComponentVideoModeSpec = [
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
];
exports.BobcatVgaVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.AllVideoConnectorTypeSpec = [
    metadata_1.VideoConnectorType.Hdmi,
    metadata_1.VideoConnectorType.Vga,
    metadata_1.VideoConnectorType.Component,
];
exports.HdmiVideoConnectorTypeSpec = [
    metadata_1.VideoConnectorType.Hdmi,
];
function bscGetPlayerVideoConnectorTypes(model) {
    switch (true) {
        case playerModel_1.Series4Models.has(model):
        case playerModel_1.Series3Models.has(model):
        case playerModel_1.TigerModels.has(model):
            return exports.HdmiVideoConnectorTypeSpec;
        case playerModel_1.LynxModels.has(model):
        case playerModel_1.BobcatModels.has(model):
        case playerModel_1.CheetahModels.has(model):
            return exports.AllVideoConnectorTypeSpec;
        case playerModel_1.PantherModels.has(model): {
            if (model !== playerModel_1.PlayerModel.LS322 && model !== playerModel_1.PlayerModel.AU320) {
                return model !== playerModel_1.PlayerModel.LS422 ? exports.AllVideoConnectorTypeSpec : exports.HdmiVideoConnectorTypeSpec;
            }
            else {
                return null;
            }
        }
        case playerModel_1.PumaModels.has(model): {
            if (model === playerModel_1.PlayerModel.HD920 || model === playerModel_1.PlayerModel.HD970) {
                return exports.AllVideoConnectorTypeSpec;
            }
            else {
                return exports.HdmiVideoConnectorTypeSpec;
            }
        }
        default:
            return null;
    }
}
exports.bscGetPlayerVideoConnectorTypes = bscGetPlayerVideoConnectorTypes;
function bscIsValidConnectorType(model, connectorType) {
    var validConnectorTypes = bscGetPlayerVideoConnectorTypes(model);
    if (validConnectorTypes !== null) {
        return validConnectorTypes.indexOf(connectorType) > -1;
    }
    else {
        return false;
    }
}
exports.bscIsValidConnectorType = bscIsValidConnectorType;
function bscGetPlayerVideoModeSpecs(model, connectorType) {
    switch (true) {
        case playerModel_1.MalibuModels.has(model):
        case playerModel_1.PaganiModels.has(model):
        case playerModel_1.ImpalaModels.has(model):
        case playerModel_1.TigerModels.has(model):
            return exports.FourKVideoModeSpec;
        case playerModel_1.PaganiHDModels.has(model):
        case playerModel_1.PanteraModels.has(model):
            return exports.PanteraVideoModeSpec;
        case playerModel_1.LynxModels.has(model): {
            switch (connectorType) {
                case metadata_1.VideoConnectorType.Hdmi: return exports.LynxHdmiVideoModeSpec;
                case metadata_1.VideoConnectorType.Vga: return exports.LynxVgaVideoModeSpec;
                case metadata_1.VideoConnectorType.Component: return exports.LynxComponentVideoModeSpec;
                default: return null;
            }
        }
        case playerModel_1.BobcatModels.has(model): {
            switch (connectorType) {
                case metadata_1.VideoConnectorType.Hdmi: return exports.BobcatHdmiVideoModeSpec;
                case metadata_1.VideoConnectorType.Vga: return exports.BobcatVgaVideoModeSpec;
                case metadata_1.VideoConnectorType.Component: return exports.BobcatComponentVideoModeSpec;
                default: return null;
            }
        }
        default:
            return null;
    }
}
exports.bscGetPlayerVideoModeSpecs = bscGetPlayerVideoModeSpecs;
function bscGetFrameRates(model, connectorType, resolution) {
    var videoModeOptions = bscGetPlayerVideoModeSpecs(model, connectorType);
    if (videoModeOptions !== null) {
        for (var _i = 0, videoModeOptions_1 = videoModeOptions; _i < videoModeOptions_1.length; _i++) {
            var videoModeOption = videoModeOptions_1[_i];
            if (resolution === videoModeOption.resolution) {
                return videoModeOption.availableRates;
            }
        }
    }
    return null;
}
exports.bscGetFrameRates = bscGetFrameRates;
function bscIsValidResolution(model, connectorType, resolution) {
    return bscGetFrameRates(model, connectorType, resolution) !== null;
}
exports.bscIsValidResolution = bscIsValidResolution;
function bscIsValidFrameRate(model, connectorType, resolution, frameRate) {
    var validFrameRates = bscGetFrameRates(model, connectorType, resolution);
    if (validFrameRates !== null) {
        return validFrameRates.indexOf(frameRate) > -1;
    }
    else {
        return false;
    }
}
exports.bscIsValidFrameRate = bscIsValidFrameRate;
function bscParseVideoModeComponents(mode) {
    var components = { width: 0, height: 0, frameRate: 0, interlaced: false };
    var matchResult = mode.match(/(\d*)x(\d*)x(.*|.*\..*)([ip])/);
    if (matchResult != null && matchResult.length === 5) {
        components.width = Number(matchResult[1]);
        components.height = Number(matchResult[2]);
        components.frameRate = Number(matchResult[3]);
        components.interlaced = matchResult[4] === 'i';
    }
    else if (mode.match(/NTSC/) || mode.match(/PAL-M/)) {
        components.width = 720;
        components.height = 480;
        components.frameRate = 59.94;
        components.interlaced = true;
    }
    else if (mode.match(/PAL/) || mode.match(/SECAM/)) {
        components.width = 720;
        components.height = 576;
        components.frameRate = 50;
        components.interlaced = true;
    }
    return components;
}
exports.bscParseVideoModeComponents = bscParseVideoModeComponents;
function bscParseVideoModeResolutionAndRate(mode) {
    var result = {
        resolution: VideoResolution.v1920x1080,
        frameRate: VideoFrameRate.r60p,
    };
    var matchResult = mode.match(/(\d*x\d*)x(.*|.*\..*[ip])/);
    if (matchResult != null && matchResult.length === 3) {
        result.resolution = matchResult[1];
        result.frameRate = matchResult[2];
    }
    else if (mode.match(/NTSC/) || mode.match(/PAL-M/)) {
        result.resolution = mode;
        result.frameRate = VideoFrameRate.r59i;
    }
    else if (mode.match(/PAL/) || mode.match(/SECAM/)) {
        result.resolution = mode;
        result.frameRate = VideoFrameRate.r50i;
    }
    else {
        return null;
    }
    return result;
}
exports.bscParseVideoModeResolutionAndRate = bscParseVideoModeResolutionAndRate;
function bscIsHDVideoResolutionOrSmaller(mode) {
    var components = bscParseVideoModeComponents(mode);
    return components.width <= 1920 && components.height <= 1080;
}
exports.bscIsHDVideoResolutionOrSmaller = bscIsHDVideoResolutionOrSmaller;
var FiveMPix = 5242880;
var TwoPFiveMPix = 2621440;
var MaxHiResGfxFrameRate = 30;
function bscIsFullResGraphicsSupported(model, videoMode) {
    var supported = false;
    if (playerFeature_1.bscPlayerModelHasFeature(model, playerFeature_1.ModelFeature.FullResGraphics)) {
        var videoModeComponents = bscParseVideoModeComponents(videoMode);
        if (!videoModeComponents.interlaced) {
            var totalPixels = videoModeComponents.width * videoModeComponents.height;
            supported = playerFeature_1.bscPlayerModelHasFeature(model, playerFeature_1.ModelFeature.FullResGraphicsHiFR)
                || (totalPixels > TwoPFiveMPix && totalPixels <= FiveMPix)
                || (totalPixels > FiveMPix && videoModeComponents.frameRate <= MaxHiResGfxFrameRate);
        }
    }
    return supported;
}
exports.bscIsFullResGraphicsSupported = bscIsFullResGraphicsSupported;
var VideoModesForFullResGraphicScaling = new Set([
    VideoMode.v4096x2160x60p, VideoMode.v4096x2160x59p, VideoMode.v4096x2160x50p, VideoMode.v4096x2160x30p,
    VideoMode.v4096x2160x29p, VideoMode.v4096x2160x25p, VideoMode.v4096x2160x24p, VideoMode.v4096x2160x23p,
    VideoMode.v3840x2160x60p, VideoMode.v3840x2160x59p, VideoMode.v3840x2160x50p, VideoMode.v3840x2160x23p,
    VideoMode.v3840x2160x30p, VideoMode.v3840x2160x29p, VideoMode.v3840x2160x25p, VideoMode.v3840x2160x24p,
    VideoMode.v3840x1080x60p, VideoMode.v3840x1080x50p, VideoMode.v3840x1080x30p, VideoMode.v3840x1080x25p,
    VideoMode.v3840x600x60p, VideoMode.v3440x1440x60p, VideoMode.v3440x1440x50p, VideoMode.v3440x1440x30p,
    VideoMode.v2560x1600x60p, VideoMode.v2560x1440x60p, VideoMode.v2560x1440x30p, VideoMode.v2560x1080x60p,
    VideoMode.v2560x960x60p, VideoMode.v2048x1152x60p, VideoMode.v1920x1920x60p, VideoMode.v1792x1344x60p,
]);
function bscGetGraphicsResolution(mode, fullResGraphics) {
    var videoModeComponents = bscParseVideoModeComponents(mode);
    if (!fullResGraphics && VideoModesForFullResGraphicScaling.has(mode)) {
        return {
            height: videoModeComponents.height / 2,
            width: videoModeComponents.width / 2,
        };
    }
    return {
        height: videoModeComponents.height,
        width: videoModeComponents.width,
    };
}
exports.bscGetGraphicsResolution = bscGetGraphicsResolution;
function bscScaleRectangleToFullResolutionCoordinates(rect, mode, fullResGraphics) {
    if (bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) && !rect.pct) {
        return rectangle_1.bscScaleAbsoluteRect(rect, true, 2, 2);
    }
    return rect;
}
exports.bscScaleRectangleToFullResolutionCoordinates = bscScaleRectangleToFullResolutionCoordinates;
function bscScaleRectangleFromFullResolutionCoordinates(rect, mode, fullResGraphics) {
    if (bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) && !rect.pct) {
        return rectangle_1.bscScaleAbsoluteRect(rect, false, 2, 2);
    }
    return rect;
}
exports.bscScaleRectangleFromFullResolutionCoordinates = bscScaleRectangleFromFullResolutionCoordinates;
function bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) {
    return !fullResGraphics && VideoModesForFullResGraphicScaling.has(mode);
}
exports.bscIsFullResGraphicScalingNeeded = bscIsFullResGraphicScalingNeeded;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

/**
 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
 * which returns `true` for `undefined` and other non-numeric values.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 * as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && objectToString.call(value) == numberTag);
}

module.exports = isNaN;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

/**
 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(47);

/***/ })
/******/ ]);
});
//# sourceMappingURL=bscore.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const rimraf = __webpack_require__(112)

module.exports = {
  remove: u(rimraf),
  removeSync: rimraf.sync
}


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apply", function() { return apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyEach", function() { return applyEach$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyEachSeries", function() { return applyEachSeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asyncify", function() { return asyncify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return auto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "autoInject", function() { return autoInject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cargo", function() { return cargo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cargoQueue", function() { return cargo$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatLimit", function() { return concatLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatSeries", function() { return concatSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constant", function() { return constant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detect", function() { return detect$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectLimit", function() { return detectLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "detectSeries", function() { return detectSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dir", function() { return dir; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doUntil", function() { return doUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doWhilst", function() { return doWhilst$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "each", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eachLimit", function() { return eachLimit$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eachOf", function() { return eachOf$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eachOfLimit", function() { return eachOfLimit$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eachOfSeries", function() { return eachOfSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eachSeries", function() { return eachSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureAsync", function() { return ensureAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function() { return every$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "everyLimit", function() { return everyLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "everySeries", function() { return everySeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterLimit", function() { return filterLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterSeries", function() { return filterSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forever", function() { return forever$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupByLimit", function() { return groupByLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBySeries", function() { return groupBySeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLimit", function() { return mapLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapSeries", function() { return mapSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapValues", function() { return mapValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapValuesLimit", function() { return mapValuesLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapValuesSeries", function() { return mapValuesSeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return memoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextTick", function() { return nextTick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parallel", function() { return parallel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parallelLimit", function() { return parallelLimit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "priorityQueue", function() { return priorityQueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queue", function() { return queue$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return race$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return reduce$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function() { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reflect", function() { return reflect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reflectAll", function() { return reflectAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reject", function() { return reject$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rejectLimit", function() { return rejectLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rejectSeries", function() { return rejectSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "retry", function() { return retry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "retryable", function() { return retryable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "seq", function() { return seq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "series", function() { return series; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setImmediate", function() { return setImmediate$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function() { return some$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "someLimit", function() { return someLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "someSeries", function() { return someSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function() { return sortBy$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeout", function() { return timeout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "times", function() { return times; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timesLimit", function() { return timesLimit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timesSeries", function() { return timesSeries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryEach", function() { return tryEach$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unmemoize", function() { return unmemoize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "until", function() { return until; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "waterfall", function() { return waterfall$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whilst", function() { return whilst$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all", function() { return every$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allLimit", function() { return everyLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allSeries", function() { return everySeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return some$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anyLimit", function() { return someLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anySeries", function() { return someSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return detect$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLimit", function() { return detectLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findSeries", function() { return detectSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function() { return concat$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapLimit", function() { return concatLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapSeries", function() { return concatSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return each; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachSeries", function() { return eachSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachLimit", function() { return eachLimit$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachOf", function() { return eachOf$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachOfSeries", function() { return eachOfSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEachOfLimit", function() { return eachOfLimit$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inject", function() { return reduce$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldl", function() { return reduce$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldr", function() { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return filter$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectLimit", function() { return filterLimit$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectSeries", function() { return filterSeries$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapSync", function() { return asyncify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "during", function() { return whilst$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doDuring", function() { return doWhilst$1; });
/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
function apply(fn, ...args) {
    return (...callArgs) => fn(...args,...callArgs);
}

function initialParams (fn) {
    return function (...args/*, callback*/) {
        var callback = args.pop();
        return fn.call(this, args, callback);
    };
}

/* istanbul ignore file */

var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return (fn, ...args) => defer(() => fn(...args));
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    if (isAsync(func)) {
        return function (...args/*, callback*/) {
            const callback = args.pop();
            const promise = func.apply(this, args);
            return handlePromise(promise, callback)
        }
    }

    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (result && typeof result.then === 'function') {
            return handlePromise(result, callback)
        } else {
            callback(null, result);
        }
    });
}

function handlePromise(promise, callback) {
    return promise.then(value => {
        invokeCallback(callback, null, value);
    }, err => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (err) {
        setImmediate$1(e => { throw e }, err);
    }
}

function isAsync(fn) {
    return fn[Symbol.toStringTag] === 'AsyncFunction';
}

function isAsyncGenerator(fn) {
    return fn[Symbol.toStringTag] === 'AsyncGenerator';
}

function isAsyncIterable(obj) {
    return typeof obj[Symbol.asyncIterator] === 'function';
}

function wrapAsync(asyncFn) {
    if (typeof asyncFn !== 'function') throw new Error('expected a function')
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify (asyncFn, arity = asyncFn.length) {
    if (!arity) throw new Error('arity is undefined')
    function awaitable (...args) {
        if (typeof args[arity - 1] === 'function') {
            return asyncFn.apply(this, args)
        }

        return new Promise((resolve, reject) => {
            args[arity - 1] = (err, ...cbArgs) => {
                if (err) return reject(err)
                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
        })
    }

    return awaitable
}

function applyEach (eachfn) {
    return function applyEach(fns, ...callArgs) {
        const go = awaitify(function (callback) {
            var that = this;
            return eachfn(fns, (fn, cb) => {
                wrapAsync(fn).apply(that, callArgs.concat(cb));
            }, callback);
        });
        return go;
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    return eachfn(arr, (value, _, iterCb) => {
        var index = counter++;
        _iteratee(value, (err, v) => {
            results[index] = v;
            iterCb(err);
        });
    }, err => {
        callback(err, results);
    });
}

function isArrayLike(value) {
    return value &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        value.length % 1 === 0;
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
const breakLoop = {};

function once(fn) {
    function wrapper (...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    }
    Object.assign(wrapper, fn);
    return wrapper
}

function getIterator (coll) {
    return coll[Symbol.iterator] && coll[Symbol.iterator]();
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = obj ? Object.keys(obj) : [];
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key} : null;
    };
}

function createIterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function (...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    };
}

// for async generators
function asyncEachOfLimit(generator, limit, iteratee, callback) {
    let done = false;
    let canceled = false;
    let awaiting = false;
    let running = 0;
    let idx = 0;

    function replenish() {
        //console.log('replenish')
        if (running >= limit || awaiting || done) return
        //console.log('replenish awaiting')
        awaiting = true;
        generator.next().then(({value, done: iterDone}) => {
            //console.log('got value', value)
            if (canceled || done) return
            awaiting = false;
            if (iterDone) {
                done = true;
                if (running <= 0) {
                    //console.log('done nextCb')
                    callback(null);
                }
                return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
        }).catch(handleError);
    }

    function iterateeCallback(err, result) {
        //console.log('iterateeCallback')
        running -= 1;
        if (canceled) return
        if (err) return handleError(err)

        if (err === false) {
            done = true;
            canceled = true;
            return
        }

        if (result === breakLoop || (done && running <= 0)) {
            done = true;
            //console.log('done iterCb')
            return callback(null);
        }
        replenish();
    }

    function handleError(err) {
        if (canceled) return
        awaiting = false;
        done = true;
        callback(err);
    }

    replenish();
}

var eachOfLimit = (limit) => {
    return (obj, iteratee, callback) => {
        callback = once(callback);
        if (limit <= 0) {
            throw new RangeError('concurrency limit cannot be less than 1')
        }
        if (!obj) {
            return callback(null);
        }
        if (isAsyncGenerator(obj)) {
            return asyncEachOfLimit(obj, limit, iteratee, callback)
        }
        if (isAsyncIterable(obj)) {
            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)
        }
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            if (canceled) return
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (err === false) {
                done = true;
                canceled = true;
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
};

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback);
    var index = 0,
        completed = 0,
        {length} = coll,
        canceled = false;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err === false) {
            canceled = true;
        }
        if (canceled === true) return
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric (coll, iteratee, callback) {
    return eachOfLimit$2(coll, Infinity, iteratee, callback);
}

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}

var eachOf$1 = awaitify(eachOf, 3);

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
function map (coll, iteratee, callback) {
    return _asyncMap(eachOf$1, coll, iteratee, callback)
}
var map$1 = awaitify(map, 3);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional. The results
 * for each of the applied async functions are passed to the final callback
 * as an array.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - Returns a function that takes no args other than
 * an optional callback, that is the result of applying the `args` to each
 * of the functions.
 * @example
 *
 * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')
 *
 * appliedFn((err, results) => {
 *     // results[0] is the results for `enableSearch`
 *     // results[1] is the results for `updateSchema`
 * });
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
 *     callback
 * );
 */
var applyEach$1 = applyEach(map$1);

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfSeries(coll, iteratee, callback) {
    return eachOfLimit$2(coll, 1, iteratee, callback)
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapSeries (coll, iteratee, callback) {
    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)
}
var mapSeries$1 = awaitify(mapSeries, 3);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - A function, that when called, is the result of
 * appling the `args` to the list of functions.  It takes no args, other than
 * a callback.
 */
var applyEachSeries = applyEach(mapSeries$1);

const PROMISE_SYMBOL = Symbol('promiseCallback');

function promiseCallback () {
    let resolve, reject;
    function callback (err, ...args) {
        if (err) return reject(err)
        resolve(args.length > 1 ? args : args[0]);
    }

    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {
        resolve = res,
        reject = rej;
    });

    return callback
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 * @example
 *
 * async.auto({
 *     // this function will just be passed a callback
 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
 *     showData: ['readData', function(results, cb) {
 *         // results.readData is the file's contents
 *         // ...
 *     }]
 * }, callback);
 *
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         console.log('in write_file', JSON.stringify(results));
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         console.log('in email_link', JSON.stringify(results));
 *         // once the file is written let's email a link to it...
 *         // results.write_file contains the filename returned by write_file.
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('results = ', results);
 * });
 */
function auto(tasks, concurrency, callback) {
    if (typeof concurrency !== 'number') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || promiseCallback());
    var numTasks = Object.keys(tasks).length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var canceled = false;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    Object.keys(tasks).forEach(key => {
        var task = tasks[key];
        if (!Array.isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        dependencies.forEach(dependencyName => {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, () => {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(() => runTask(key, task));
    }

    function processQueue() {
        if (canceled) return
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        taskListeners.forEach(fn => fn());
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce((err, ...result) => {
            runningTasks--;
            if (err === false) {
                canceled = true;
                return
            }
            if (result.length < 2) {
                [result] = result;
            }
            if (err) {
                var safeResults = {};
                Object.keys(results).forEach(rkey => {
                    safeResults[rkey] = results[rkey];
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);
                if (canceled) return
                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            getDependents(currentTask).forEach(dependent => {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        Object.keys(tasks).forEach(key => {
            const task = tasks[key];
            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {
                result.push(key);
            }
        });
        return result;
    }

    return callback[PROMISE_SYMBOL]
}

var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

function parseParams(func) {
    const src = func.toString().replace(STRIP_COMMENTS, '');
    let match = src.match(FN_ARGS);
    if (!match) {
        match = src.match(ARROW_FN_ARGS);
    }
    if (!match) throw new Error('could not parse args in autoInject\nSource:\n' + src)
    let [, args] = match;
    return args
        .replace(/\s/g, '')
        .split(FN_ARG_SPLIT)
        .map((arg) => arg.replace(FN_ARG, '').trim());
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    Object.keys(tasks).forEach(key => {
        var taskFn = tasks[key];
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (Array.isArray(taskFn)) {
            params = [...taskFn];
            taskFn = params.pop();

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = params.map(name => results[name]);
            newArgs.push(taskCb);
            wrapAsync(taskFn)(...newArgs);
        }
    });

    return auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL {
    constructor() {
        this.head = this.tail = null;
        this.length = 0;
    }

    removeLink(node) {
        if (node.prev) node.prev.next = node.next;
        else this.head = node.next;
        if (node.next) node.next.prev = node.prev;
        else this.tail = node.prev;

        node.prev = node.next = null;
        this.length -= 1;
        return node;
    }

    empty () {
        while(this.head) this.shift();
        return this;
    }

    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next) node.next.prev = newNode;
        else this.tail = newNode;
        node.next = newNode;
        this.length += 1;
    }

    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev) node.prev.next = newNode;
        else this.head = newNode;
        node.prev = newNode;
        this.length += 1;
    }

    unshift(node) {
        if (this.head) this.insertBefore(this.head, node);
        else setInitial(this, node);
    }

    push(node) {
        if (this.tail) this.insertAfter(this.tail, node);
        else setInitial(this, node);
    }

    shift() {
        return this.head && this.removeLink(this.head);
    }

    pop() {
        return this.tail && this.removeLink(this.tail);
    }

    toArray() {
        return [...this]
    }

    *[Symbol.iterator] () {
        var cur = this.head;
        while (cur) {
            yield cur.data;
            cur = cur.next;
        }
    }

    remove (testFn) {
        var curr = this.head;
        while(curr) {
            var {next} = curr;
            if (testFn(curr)) {
                this.removeLink(curr);
            }
            curr = next;
        }
        return this;
    }
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new RangeError('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];
    const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
    };

    function on (event, handler) {
        events[event].push(handler);
    }

    function once (event, handler) {
        const handleAndRemove = (...args) => {
            off(event, handleAndRemove);
            handler(...args);
        };
        events[event].push(handleAndRemove);
    }

    function off (event, handler) {
        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])
        if (!handler) return events[event] = []
        events[event] = events[event].filter(ev => ev !== handler);
    }

    function trigger (event, ...args) {
        events[event].forEach(handler => handler(...args));
    }

    var processingScheduled = false;
    function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;

        var res, rej;
        function promiseCallback (err, ...args) {
            // we don't care about the error, let the global error handler
            // deal with it
            if (err) return rejectOnError ? rej(err) : res()
            if (args.length <= 1) return res(args[0])
            res(args);
        }

        var item = {
            data,
            callback: rejectOnError ?
                promiseCallback :
                (callback || promiseCallback)
        };

        if (insertAtFront) {
            q._tasks.unshift(item);
        } else {
            q._tasks.push(item);
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(() => {
                processingScheduled = false;
                q.process();
            });
        }

        if (rejectOnError || !callback) {
            return new Promise((resolve, reject) => {
                res = resolve;
                rej = reject;
            })
        }
    }

    function _createCB(tasks) {
        return function (err, ...args) {
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = workersList.indexOf(task);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback(err, ...args);

                if (err != null) {
                    trigger('error', err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                trigger('unsaturated');
            }

            if (q.idle()) {
                trigger('drain');
            }
            q.process();
        };
    }

    function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            setImmediate$1(() => trigger('drain'));
            return true
        }
        return false
    }

    const eventMethod = (name) => (handler) => {
        if (!handler) {
            return new Promise((resolve, reject) => {
                once(name, (err, data) => {
                    if (err) return reject(err)
                    resolve(data);
                });
            })
        }
        off(name);
        on(name, handler);

    };

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        *[Symbol.iterator] () {
            yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, false, callback))
            }
            return _insert(data, false, false, callback);
        },
        pushAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, true, callback))
            }
            return _insert(data, false, true, callback);
        },
        kill () {
            off();
            q._tasks.empty();
        },
        unshift (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, false, callback))
            }
            return _insert(data, true, false, callback);
        },
        unshiftAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, true, callback))
            }
            return _insert(data, true, true, callback);
        },
        remove (testFn) {
            q._tasks.remove(testFn);
        },
        process () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    trigger('empty');
                }

                if (numRunning === q.concurrency) {
                    trigger('saturated');
                }

                var cb = onlyOnce(_createCB(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length () {
            return q._tasks.length;
        },
        running () {
            return numRunning;
        },
        workersList () {
            return workersList;
        },
        idle() {
            return q._tasks.length + numRunning === 0;
        },
        pause () {
            q.paused = true;
        },
        resume () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    // define these as fixed properties, so people get useful errors when updating
    Object.defineProperties(q, {
        saturated: {
            writable: false,
            value: eventMethod('saturated')
        },
        unsaturated: {
            writable: false,
            value: eventMethod('unsaturated')
        },
        empty: {
            writable: false,
            value: eventMethod('empty')
        },
        drain: {
            writable: false,
            value: eventMethod('drain')
        },
        error: {
            writable: false,
            value: eventMethod('error')
        },
    });
    return q;
}

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * await cargo.push({name: 'baz'});
 * console.log('finished processing baz');
 */
function cargo(worker, payload) {
    return queue(worker, 1, payload);
}

/**
 * Creates a `cargoQueue` object with the specified payload. Tasks added to the
 * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.
 * If the all `workers` are in progress, the task is queued until one becomes available. Once
 * a `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,
 * the cargoQueue passes an array of tasks to multiple parallel workers.
 *
 * @name cargoQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @see [async.cargo]{@link module:ControlFLow.cargo}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargoQueue and inner queue.
 * @example
 *
 * // create a cargoQueue object with payload 2 and concurrency 2
 * var cargoQueue = async.cargoQueue(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2, 2);
 *
 * // add some items
 * cargoQueue.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargoQueue.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargoQueue.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 * cargoQueue.push({name: 'boo'}, function(err) {
 *     console.log('finished processing boo');
 * });
 */
function cargo$1(worker, concurrency, payload) {
    return queue(worker, concurrency, payload);
}

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * async.reduce([1,2,3], 0, function(memo, item, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         callback(null, memo + item)
 *     });
 * }, function(err, result) {
 *     // result is now equal to the last value of memo, which is 6
 * });
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback);
    var _iteratee = wrapAsync(iteratee);
    return eachOfSeries$1(coll, (x, i, iterCb) => {
        _iteratee(memo, x, (err, v) => {
            memo = v;
            iterCb(err);
        });
    }, err => callback(err, memo));
}
var reduce$1 = awaitify(reduce, 4);

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(...functions) {
    var _functions = functions.map(wrapAsync);
    return function (...args) {
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = promiseCallback();
        }

        reduce$1(_functions, args, (newargs, fn, iterCb) => {
            fn.apply(that, newargs.concat((err, ...nextargs) => {
                iterCb(err, nextargs);
            }));
        },
        (err, results) => cb(err, ...results));

        return cb[PROMISE_SYMBOL]
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * If the last argument to the composed function is not a function, a promise
 * is returned when you call it.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
function compose(...args) {
    return seq(...args.reverse());
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapLimit (coll, limit, iteratee, callback) {
    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)
}
var mapLimit$1 = awaitify(mapLimit, 4);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, ...args) => {
            if (err) return iterCb(err);
            return iterCb(err, args);
        });
    }, (err, mapResults) => {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = result.concat(...mapResults[i]);
            }
        }

        return callback(err, result);
    });
}
var concatLimit$1 = awaitify(concatLimit, 4);

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
 *     // files is now a list of filenames that exist in the 3 directories
 * });
 */
function concat(coll, iteratee, callback) {
    return concatLimit$1(coll, Infinity, iteratee, callback)
}
var concat$1 = awaitify(concat, 3);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatSeries(coll, iteratee, callback) {
    return concatLimit$1(coll, 1, iteratee, callback)
}
var concatSeries$1 = awaitify(concatSeries, 3);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
function constant(...args) {
    return function (...ignoredArgs/*, callback*/) {
        var callback = ignoredArgs.pop();
        return callback(null, ...args);
    };
}

function _createTester(check, getResult) {
    return (eachfn, arr, _iteratee, cb) => {
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _, callback) => {
            iteratee(value, (err, result) => {
                if (err || err === false) return callback(err);

                if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    return callback(null, breakLoop);
                }
                callback();
            });
        }, err => {
            if (err) return cb(err);
            cb(null, testPassed ? testResult : getResult(false));
        });
    };
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * async.detect(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // result now equals the first file in the list that exists
 * });
 */
function detect(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)
}
var detect$1 = awaitify(detect, 3);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns a Promise if no callback is passed
 */
function detectLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)
}
var detectLimit$1 = awaitify(detectLimit, 4);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns a Promise if no callback is passed
 */
function detectSeries(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)
}

var detectSeries$1 = awaitify(detectSeries, 3);

function consoleFunc(name) {
    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
        if (typeof console === 'object') {
            if (err) {
                if (console.error) {
                    console.error(err);
                }
            } else if (console[name]) {
                resultArgs.forEach(x => console[name](x));
            }
        }
    })
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results;

    function next(err, ...args) {
        if (err) return callback(err);
        if (err === false) return;
        results = args;
        _test(...args, check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return check(null, true);
}

var doWhilst$1 = awaitify(doWhilst, 3);

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doUntil(iteratee, test, callback) {
    const _test = wrapAsync(test);
    return doWhilst$1(iteratee, (...args) => {
        const cb = args.pop();
        _test(...args, (err, truth) => cb (err, !truth));
    }, callback);
}

function _withoutIndex(iteratee) {
    return (value, index, callback) => iteratee(value, callback);
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // assuming openFiles is an array of file names and saveFile is a function
 * // to save the modified contents of that file:
 *
 * async.each(openFiles, saveFile, function(err){
 *   // if any of the saves produced an error, err would equal that error
 * });
 *
 * // assuming openFiles is an array of file names
 * async.each(openFiles, function(file, callback) {
 *
 *     // Perform operation on file here.
 *     console.log('Processing file ' + file);
 *
 *     if( file.length > 32 ) {
 *       console.log('This file name is too long');
 *       callback('File name too long');
 *     } else {
 *       // Do work to process file here
 *       console.log('File processed');
 *       callback();
 *     }
 * }, function(err) {
 *     // if any of the file processing produced an error, err would equal that error
 *     if( err ) {
 *       // One of the iterations produced an error.
 *       // All processing will now stop.
 *       console.log('A file failed to process');
 *     } else {
 *       console.log('All files have been processed successfully');
 *     }
 * });
 */
function eachLimit(coll, iteratee, callback) {
    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

var each = awaitify(eachLimit, 3);

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$2 = awaitify(eachLimit$1, 4);

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachSeries(coll, iteratee, callback) {
    return eachLimit$2(coll, 1, iteratee, callback)
}
var eachSeries$1 = awaitify(eachSeries, 3);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return function (...args/*, callback*/) {
        var callback = args.pop();
        var sync = true;
        args.push((...innerArgs) => {
            if (sync) {
                setImmediate$1(() => callback(...innerArgs));
            } else {
                callback(...innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    };
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * async.every(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then every file exists
 * });
 */
function every(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)
}
var every$1 = awaitify(every, 3);

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everyLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)
}
var everyLimit$1 = awaitify(everyLimit, 4);

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everySeries(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)
}
var everySeries$1 = awaitify(everySeries, 3);

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            truthValues[index] = !!v;
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            if (err) return iterCb(err);
            if (v) {
                results.push({index, value: x});
            }
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        callback(null, results
            .sort((a, b) => a.index - b.index)
            .map(v => v.value));
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    return filter(eachfn, coll, wrapAsync(iteratee), callback);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * async.filter(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of the existing files
 * });
 */
function filter (coll, iteratee, callback) {
    return _filter(eachOf$1, coll, iteratee, callback)
}
var filter$1 = awaitify(filter, 3);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */
function filterLimit (coll, limit, iteratee, callback) {
    return _filter(eachOfLimit(limit), coll, iteratee, callback)
}
var filterLimit$1 = awaitify(filterLimit, 4);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */
function filterSeries (coll, iteratee, callback) {
    return _filter(eachOfSeries$1, coll, iteratee, callback)
}
var filterSeries$1 = awaitify(filterSeries, 3);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        if (err === false) return;
        task(next);
    }
    return next();
}
var forever$1 = awaitify(forever, 2);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupByLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, key) => {
            if (err) return iterCb(err);
            return iterCb(err, {key, val});
        });
    }, (err, mapResults) => {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var {hasOwnProperty} = Object.prototype;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var {key} = mapResults[i];
                var {val} = mapResults[i];

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
}

var groupByLimit$1 = awaitify(groupByLimit, 4);

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
 *     db.findById(userId, function(err, user) {
 *         if (err) return callback(err);
 *         return callback(null, user.age);
 *     });
 * }, function(err, result) {
 *     // result is object containing the userIds grouped by age
 *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
 * });
 */
function groupBy (coll, iteratee, callback) {
    return groupByLimit$1(coll, Infinity, iteratee, callback)
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupBySeries (coll, iteratee, callback) {
    return groupByLimit$1(coll, 1, iteratee, callback)
}

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    return eachOfLimit(limit)(obj, (val, key, next) => {
        _iteratee(val, key, (err, result) => {
            if (err) return next(err);
            newObj[key] = result;
            next(err);
        });
    }, err => callback(err, newObj));
}

var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * async.mapValues({
 *     f1: 'file1',
 *     f2: 'file2',
 *     f3: 'file3'
 * }, function (file, key, callback) {
 *   fs.stat(file, callback);
 * }, function(err, result) {
 *     // result is now a map of stats for each file, e.g.
 *     // {
 *     //     f1: [stats for file1],
 *     //     f2: [stats for file2],
 *     //     f3: [stats for file3]
 *     // }
 * });
 */
function mapValues(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, Infinity, iteratee, callback)
}

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesSeries(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, 1, iteratee, callback)
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * **Note: if the async function errs, the result will not be cached and
 * subsequent calls will call the wrapped function.**
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher = v => v) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    var _fn = wrapAsync(fn);
    var memoized = initialParams((args, callback) => {
        var key = hasher(...args);
        if (key in memo) {
            setImmediate$1(() => callback(null, ...memo[key]));
        } else if (key in queues) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn(...args, (err, ...resultArgs) => {
                // #1465 don't memoize if an error occurred
                if (!err) {
                    memo[key] = resultArgs;
                }
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i](err, ...resultArgs);
                }
            });
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer$1;

if (hasNextTick) {
    _defer$1 = process.nextTick;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else {
    _defer$1 = fallback;
}

var nextTick = wrap(_defer$1);

var _parallel = awaitify((eachfn, tasks, callback) => {
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, (task, key, taskCb) => {
        wrapAsync(task)((err, ...result) => {
            if (result.length < 2) {
                [result] = result;
            }
            results[key] = result;
            taskCb(err);
        });
    }, err => callback(err, results));
}, 3);

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallel(tasks, callback) {
    return _parallel(eachOf$1, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 */
function parallelLimit(tasks, limit, callback) {
    return _parallel(eachOfLimit(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = aync.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
function queue$1 (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue((items, cb) => {
        _worker(items[0], cb);
    }, concurrency, 1);
}

// Binary min-heap implementation used for priority queue.
// Implementation is stable, i.e. push time is considered for equal priorities
class Heap {
    constructor() {
        this.heap = [];
        this.pushCount = Number.MIN_SAFE_INTEGER;
    }

    get length() {
        return this.heap.length;
    }

    empty () {
        this.heap = [];
        return this;
    }

    percUp(index) {
        let p;

        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {
            let t = this.heap[index];
            this.heap[index] = this.heap[p];
            this.heap[p] = t;

            index = p;
        }
    }

    percDown(index) {
        let l;

        while ((l=leftChi(index)) < this.heap.length) {
            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {
                l = l+1;
            }

            if (smaller(this.heap[index], this.heap[l])) {
                break;
            }

            let t = this.heap[index];
            this.heap[index] = this.heap[l];
            this.heap[l] = t;

            index = l;
        }
    }

    push(node) {
        node.pushCount = ++this.pushCount;
        this.heap.push(node);
        this.percUp(this.heap.length-1);
    }

    unshift(node) {
        return this.heap.push(node);
    }

    shift() {
        let [top] = this.heap;

        this.heap[0] = this.heap[this.heap.length-1];
        this.heap.pop();
        this.percDown(0);

        return top;
    }

    toArray() {
        return [...this];
    }

    *[Symbol.iterator] () {
        for (let i = 0; i < this.heap.length; i++) {
            yield this.heap[i].data;
        }
    }

    remove (testFn) {
        let j = 0;
        for (let i = 0; i < this.heap.length; i++) {
            if (!testFn(this.heap[i])) {
                this.heap[j] = this.heap[i];
                j++;
            }
        }

        this.heap.splice(j);

        for (let i = parent(this.heap.length-1); i >= 0; i--) {
            this.percDown(i);
        }

        return this;
    }
}

function leftChi(i) {
    return (i<<1)+1;
}

function parent(i) {
    return ((i+1)>>1)-1;
}

function smaller(x, y) {
    if (x.priority !== y.priority) {
        return x.priority < y.priority;
    }
    else {
        return x.pushCount < y.pushCount;
    }
}

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * The `unshift` method was removed.
 */
function priorityQueue(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);

    q._tasks = new Heap();

    // Override push to accept second parameter representing priority
    q.push = function(data, priority = 0, callback = () => {}) {
        if (typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!Array.isArray(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return setImmediate$1(() => q.drain());
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                priority,
                callback
            };

            q._tasks.push(item);
        }

        setImmediate$1(q.process);
    };

    // Remove unshift function
    delete q.unshift;

    return q;
}

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns undefined
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

var race$1 = awaitify(race, 2);

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = [...array].reverse();
    return reduce$1(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push((error, ...cbArgs) => {
            let retVal = {};
            if (error) {
                retVal.error = error;
            }
            if (cbArgs.length > 0){
                var value = cbArgs;
                if (cbArgs.length <= 1) {
                    [value] = cbArgs;
                }
                retVal.value = value;
            }
            reflectCallback(null, retVal);
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (Array.isArray(tasks)) {
        results = tasks.map(reflect);
    } else {
        results = {};
        Object.keys(tasks).forEach(key => {
            results[key] = reflect.call(this, tasks[key]);
        });
    }
    return results;
}

function reject(eachfn, arr, _iteratee, callback) {
    const iteratee = wrapAsync(_iteratee);
    return _filter(eachfn, arr, (value, cb) => {
        iteratee(value, (err, v) => {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * async.reject(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of missing files
 *     createFiles(results);
 * });
 */
function reject$1 (coll, iteratee, callback) {
    return reject(eachOf$1, coll, iteratee, callback)
}
var reject$2 = awaitify(reject$1, 3);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectLimit (coll, limit, iteratee, callback) {
    return reject(eachOfLimit(limit), coll, iteratee, callback)
}
var rejectLimit$1 = awaitify(rejectLimit, 4);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectSeries (coll, iteratee, callback) {
    return reject(eachOfSeries$1, coll, iteratee, callback)
}
var rejectSeries$1 = awaitify(rejectSeries, 3);

function constant$1(value) {
    return function () {
        return value;
    }
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 * @returns {Promise} a promise if no callback provided
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
const DEFAULT_TIMES = 5;
const DEFAULT_INTERVAL = 0;

function retry(opts, task, callback) {
    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || promiseCallback();
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || promiseCallback();
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task((err, ...args) => {
            if (err === false) return
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
            } else {
                callback(err, ...args);
            }
        });
    }

    retryAttempt();
    return callback[PROMISE_SYMBOL]
}

function parseTimes(acc, t) {
    if (typeof t === 'object') {
        acc.times = +t.times || DEFAULT_TIMES;

        acc.intervalFunc = typeof t.interval === 'function' ?
            t.interval :
            constant$1(+t.interval || DEFAULT_INTERVAL);

        acc.errorFilter = t.errorFilter;
    } else if (typeof t === 'number' || typeof t === 'string') {
        acc.times = +t || DEFAULT_TIMES;
    } else {
        throw new Error("Invalid arguments for async.retry");
    }
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`, except for a `opts.arity` that
 * is the arity of the `task` function, defaulting to `task.length`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
function retryable (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    let arity = (opts && opts.arity) || task.length;
    if (isAsync(task)) {
        arity += 1;
    }
    var _task = wrapAsync(task);
    return initialParams((args, callback) => {
        if (args.length < arity - 1 || callback == null) {
            args.push(callback);
            callback = promiseCallback();
        }
        function taskFn(cb) {
            _task(...args, cb);
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

        return callback[PROMISE_SYMBOL]
    });
}

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @return {Promise} a promise, if no callback is passed
 * @example
 * async.series([
 *     function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     },
 *     function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // results is now equal to ['one', 'two']
 * });
 *
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback){
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equal to: {one: 1, two: 2}
 * });
 */
function series(tasks, callback) {
    return _parallel(eachOfSeries$1, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * async.some(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then at least one of the files exists
 * });
 */
function some(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)
}
var some$1 = awaitify(some, 3);

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someLimit(coll, limit, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)
}
var someLimit$1 = awaitify(someLimit, 4);

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someSeries(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)
}
var someSeries$1 = awaitify(someSeries, 3);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * async.sortBy(['file1','file2','file3'], function(file, callback) {
 *     fs.stat(file, function(err, stats) {
 *         callback(err, stats.mtime);
 *     });
 * }, function(err, results) {
 *     // results is now the original array of files sorted by
 *     // modified date
 * });
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x);
 * }, function(err,result) {
 *     // result callback
 * });
 *
 * // descending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
 * }, function(err,result) {
 *     // result callback
 * });
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return map$1(coll, (x, iterCb) => {
        _iteratee(x, (err, criteria) => {
            if (err) return iterCb(err);
            iterCb(err, {value: x, criteria});
        });
    }, (err, results) => {
        if (err) return callback(err);
        callback(null, results.sort(comparator).map(v => v.value));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}
var sortBy$1 = awaitify(sortBy, 3);

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams((args, callback) => {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push((...cbArgs) => {
            if (!timedOut) {
                callback(...cbArgs);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn(...args);
    });
}

function range(size) {
    var result = Array(size);
    while (size--) {
        result[size] = size;
    }
    return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(range(count), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
function times (n, iteratee, callback) {
    return timesLimit(n, Infinity, iteratee, callback)
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesSeries (n, iteratee, callback) {
    return timesLimit(n, 1, iteratee, callback)
}

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in parallel, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * async.transform([1,2,3], function(acc, item, index, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         acc[index] = item * 2
 *         callback(null)
 *     });
 * }, function(err, result) {
 *     // result is now equal to [2, 4, 6]
 * });
 *
 * @example
 *
 * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
 *     setImmediate(function () {
 *         obj[key] = val * 2;
 *         callback();
 *     })
 * }, function (err, result) {
 *     // result is equal to {a: 2, b: 4, c: 6}
 * })
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3 && typeof accumulator === 'function') {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = Array.isArray(coll) ? [] : {};
    }
    callback = once(callback || promiseCallback());
    var _iteratee = wrapAsync(iteratee);

    eachOf$1(coll, (v, k, cb) => {
        _iteratee(accumulator, v, k, cb);
    }, err => callback(err, accumulator));
    return callback[PROMISE_SYMBOL]
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    return eachSeries$1(tasks, (task, taskCb) => {
        wrapAsync(task)((err, ...args) => {
            if (err === false) return taskCb(err);

            if (args.length < 2) {
                [result] = args;
            } else {
                result = args;
            }
            error = err;
            taskCb(err ? null : {});
        });
    }, () => callback(error, result));
}

var tryEach$1 = awaitify(tryEach);

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return (...args) => {
        return (fn.unmemoized || fn)(...args);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results = [];

    function next(err, ...rest) {
        if (err) return callback(err);
        results = rest;
        if (err === false) return;
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return _test(check);
}
var whilst$1 = awaitify(whilst, 3);

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with (callback).
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 * const results = []
 * let finished = false
 * async.until(function test(page, cb) {
 *     cb(null, finished)
 * }, function iter(next) {
 *     fetchPage(url, (err, body) => {
 *         if (err) return next(err)
 *         results = results.concat(body.objects)
 *         finished = !!body.next
 *         next(err)
 *     })
 * }, function done (err) {
 *     // all pages have been fetched
 * })
 */
function until(test, iteratee, callback) {
    const _test = wrapAsync(test);
    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
function waterfall (tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args, onlyOnce(next));
    }

    function next(err, ...args) {
        if (err === false) return
        if (err || taskIndex === tasks.length) {
            return callback(err, ...args);
        }
        nextTask(args);
    }

    nextTask([]);
}

var waterfall$1 = awaitify(waterfall);

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

var index = {
    apply,
    applyEach: applyEach$1,
    applyEachSeries,
    asyncify,
    auto,
    autoInject,
    cargo,
    cargoQueue: cargo$1,
    compose,
    concat: concat$1,
    concatLimit: concatLimit$1,
    concatSeries: concatSeries$1,
    constant,
    detect: detect$1,
    detectLimit: detectLimit$1,
    detectSeries: detectSeries$1,
    dir,
    doUntil,
    doWhilst: doWhilst$1,
    each,
    eachLimit: eachLimit$2,
    eachOf: eachOf$1,
    eachOfLimit: eachOfLimit$2,
    eachOfSeries: eachOfSeries$1,
    eachSeries: eachSeries$1,
    ensureAsync,
    every: every$1,
    everyLimit: everyLimit$1,
    everySeries: everySeries$1,
    filter: filter$1,
    filterLimit: filterLimit$1,
    filterSeries: filterSeries$1,
    forever: forever$1,
    groupBy,
    groupByLimit: groupByLimit$1,
    groupBySeries,
    log,
    map: map$1,
    mapLimit: mapLimit$1,
    mapSeries: mapSeries$1,
    mapValues,
    mapValuesLimit: mapValuesLimit$1,
    mapValuesSeries,
    memoize,
    nextTick,
    parallel,
    parallelLimit,
    priorityQueue,
    queue: queue$1,
    race: race$1,
    reduce: reduce$1,
    reduceRight,
    reflect,
    reflectAll,
    reject: reject$2,
    rejectLimit: rejectLimit$1,
    rejectSeries: rejectSeries$1,
    retry,
    retryable,
    seq,
    series,
    setImmediate: setImmediate$1,
    some: some$1,
    someLimit: someLimit$1,
    someSeries: someSeries$1,
    sortBy: sortBy$1,
    timeout,
    times,
    timesLimit,
    timesSeries,
    transform,
    tryEach: tryEach$1,
    unmemoize,
    until,
    waterfall: waterfall$1,
    whilst: whilst$1,

    // aliases
    all: every$1,
    allLimit: everyLimit$1,
    allSeries: everySeries$1,
    any: some$1,
    anyLimit: someLimit$1,
    anySeries: someSeries$1,
    find: detect$1,
    findLimit: detectLimit$1,
    findSeries: detectSeries$1,
    flatMap: concat$1,
    flatMapLimit: concatLimit$1,
    flatMapSeries: concatSeries$1,
    forEach: each,
    forEachSeries: eachSeries$1,
    forEachLimit: eachLimit$2,
    forEachOf: eachOf$1,
    forEachOfSeries: eachOfSeries$1,
    forEachOfLimit: eachOfLimit$2,
    inject: reduce$1,
    foldl: reduce$1,
    foldr: reduceRight,
    select: filter$1,
    selectLimit: filterLimit$1,
    selectSeries: filterSeries$1,
    wrapSync: asyncify,
    during: whilst$1,
    doDuring: doWhilst$1
};

/* harmony default export */ __webpack_exports__["default"] = (index);



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const assign = __webpack_require__(113)

const fs = {}

// Export graceful-fs:
assign(fs, __webpack_require__(32))
// Export extra methods:
assign(fs, __webpack_require__(96))
assign(fs, __webpack_require__(30))
assign(fs, __webpack_require__(4))
assign(fs, __webpack_require__(12))
assign(fs, __webpack_require__(104))
assign(fs, __webpack_require__(110))
assign(fs, __webpack_require__(109))
assign(fs, __webpack_require__(97))
assign(fs, __webpack_require__(99))
assign(fs, __webpack_require__(111))
assign(fs, __webpack_require__(7))

module.exports = fs


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const jsonFile = __webpack_require__(128)

module.exports = {
  // jsonfile exports
  readJson: u(jsonFile.readFile),
  readJsonSync: jsonFile.readFileSync,
  writeJson: u(jsonFile.writeFile),
  writeJsonSync: jsonFile.writeFileSync
}


/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.downsampleImage = void 0;
var bscore_1 = __webpack_require__(11);
var path = __webpack_require__(0);
var fse = __webpack_require__(15);
var resizeImg = __webpack_require__(62);
function downsampleImage(fullPath, width, height, destinationPath) {
    if (!fse.existsSync(fullPath)) {
        return Promise.resolve(null);
    }
    var extName = path.extname(destinationPath);
    return new Promise(function (resolve, reject) {
        fse.readFile(fullPath)
            .then(function (buf) { return resizeImg(buf, { height: height, width: width, out: extName }); })
            .then(function (buf) {
            return fse.writeFile(destinationPath, buf);
        })
            .then(function () {
            var bsAssetLocator = bscore_1.bscAssetLocatorForLocalAsset(bscore_1.AssetType.Content, destinationPath);
            return resolve(bsAssetLocator);
        })
            .catch(function (error) { return reject(error); });
    });
}
exports.downsampleImage = downsampleImage;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getExifData = exports.getAssetExifData = void 0;
var bscore_1 = __webpack_require__(11);
var fse = __webpack_require__(15);
var path = __webpack_require__(0);
var ExifImage = __webpack_require__(76);
var sizeOf = __webpack_require__(35);
function getAssetExifData(assetItem) {
    if (assetItem.mediaType !== bscore_1.MediaType.Image) {
        return Promise.resolve(null);
    }
    return getExifData(path.join(assetItem.path, assetItem.name));
}
exports.getAssetExifData = getAssetExifData;
function getExifData(fullPath) {
    if (!fse.existsSync(fullPath)) {
        return Promise.resolve(null);
    }
    return new Promise(function (resolve, reject) {
        try {
            var ex = new ExifImage.ExifImage({ image: fullPath }, function (error, exifData) {
                var imageData = {
                    mediaType: 'Image',
                    size: { width: 0, height: 0 },
                    orientation: bscore_1.RotationType.rot0,
                    colorSpace: bscore_1.ColorSpaceType.RGB,
                };
                if (exifData
                    && typeof exifData.exif.ExifImageWidth === 'number'
                    && typeof exifData.exif.ExifImageHeight === 'number') {
                    imageData.size.width = exifData.exif.ExifImageWidth;
                    imageData.size.height = exifData.exif.ExifImageHeight;
                }
                else {
                    var dimensions = sizeOf(fullPath);
                    imageData.size.height = dimensions.height;
                    imageData.size.width = dimensions.width;
                }
                if (exifData && typeof exifData.image.Orientation !== 'undefined') {
                    switch (exifData.image.Orientation) {
                        case 1:
                        case 2:
                            imageData.orientation = bscore_1.RotationType.rot0;
                            break;
                        case 3:
                        case 4:
                            imageData.orientation = bscore_1.RotationType.rot180;
                            break;
                        case 6:
                        case 7:
                            imageData.orientation = bscore_1.RotationType.rot90;
                            break;
                        case 5:
                        case 8:
                            imageData.orientation = bscore_1.RotationType.rot270;
                            break;
                    }
                }
                if (exifData && typeof exifData.exif.ColorSpace !== 'undefined') {
                    if (exifData.exif.ColorSpace !== 1) {
                        imageData.colorSpace = bscore_1.ColorSpaceType.Unknown;
                    }
                }
                if (!exifData || typeof exifData.exif.DateTimeOriginal === 'undefined') {
                    fse.stat(fullPath).then(function (stats) {
                        imageData.dateTaken = stats.birthtime;
                        resolve(imageData);
                    });
                }
                else {
                    var res = exifData.exif.DateTimeOriginal.match(/(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})/);
                    if (res != null && res.length === 7) {
                        imageData.dateTaken = new Date(res[1], res[2] - 1, res[3], res[4], res[5], res[6]);
                    }
                    resolve(imageData);
                }
            });
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.getExifData = getExifData;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getBufferSha1 = exports.getFileSha1 = exports.buildVideoThumb = exports.setFfMpegPath = exports.buildImageThumb = exports.getThumbnail = void 0;
var bscore_1 = __webpack_require__(11);
var path = __webpack_require__(0);
var fse = __webpack_require__(15);
var tmp = __webpack_require__(144);
var ffmpeg = __webpack_require__(79);
var resizeImg = __webpack_require__(62);
var parsePng = __webpack_require__(50);
var jpeg = __webpack_require__(48);
var crypto = __webpack_require__(18);
var sizeOf = __webpack_require__(35);
var error_1 = __webpack_require__(22);
function getThumbnail(assetItem) {
    if (assetItem.mediaType === bscore_1.MediaType.Image || assetItem.mediaType === bscore_1.MediaType.Video) {
        var fullPath = path.join(assetItem.path, assetItem.name);
        if (assetItem.mediaType === bscore_1.MediaType.Image) {
            return buildImageThumb(fullPath);
        }
        else if (assetItem.mediaType === bscore_1.MediaType.Video) {
            return buildVideoThumb(fullPath);
        }
    }
    return Promise.resolve(null);
}
exports.getThumbnail = getThumbnail;
function buildImageThumb(fullPath) {
    if (!fse.existsSync(fullPath)) {
        return Promise.resolve(null);
    }
    return new Promise(function (resolve, reject) {
        fse.readFile(fullPath)
            .then(function (buf) { return resizeImg(buf, { height: 120, out: 'jpg' }); })
            .then(function (buf) {
            var thumbSize = sizeOf(buf);
            resolve({
                kind: 'local',
                data: buf,
                type: 'image/jpeg',
                size: { width: thumbSize.width, height: thumbSize.height },
                hash: getBufferSha1(buf),
            });
        })
            .catch(function (error) { return reject(error); });
    });
}
exports.buildImageThumb = buildImageThumb;
function setFfMpegPath(ffmpegPath) {
    try {
        if (typeof ffmpegPath === 'string' && fse.existsSync(ffmpegPath)) {
            ffmpeg().setFfmpegPath(ffmpegPath);
        }
    }
    catch (e) {
        return;
    }
}
exports.setFfMpegPath = setFfMpegPath;
function buildVideoThumb(fullPath, ffmpegPath) {
    if (!fse.existsSync(fullPath)) {
        return Promise.resolve(null);
    }
    return new Promise(function (resolve, reject) {
        tmp.tmpName({ prefix: 'bsthmb-', postfix: '.png' }, function (error, thumbPath) {
            if (error) {
                reject(error);
            }
            setFfMpegPath(ffmpegPath);
            try {
                ffmpeg(fullPath)
                    .on('end', function () {
                    fse.readFile(thumbPath)
                        .then(function (buf) { fse.unlink(thumbPath); return parsePng(buf); })
                        .then(function (img) {
                        var buf = jpeg.encode({ width: img.width, height: img.height, data: img.data }).data;
                        resolve({
                            kind: 'local',
                            data: buf,
                            type: 'image/jpeg',
                            size: { width: img.width, height: img.height },
                            hash: getBufferSha1(buf),
                        });
                    })
                        .catch(function (err) { return reject(err); });
                })
                    .on('error', function (error2) {
                    reject(error2);
                })
                    .screenshots({
                    filename: path.basename(thumbPath),
                    timestamps: [2],
                    folder: path.dirname(thumbPath),
                    size: '?x120',
                });
            }
            catch (error3) {
                reject(error3);
            }
        });
    });
}
exports.buildVideoThumb = buildVideoThumb;
function getFileSha1(fullPath) {
    if (!fse.existsSync(fullPath)) {
        return Promise.reject(new error_1.FsError(error_1.FsErrorType.fileNotFoundError, fullPath));
    }
    return new Promise(function (resolve, reject) {
        var rs = fse.createReadStream(fullPath);
        var hash = crypto.createHash('sha1');
        hash.setEncoding('hex');
        rs.on('end', function () {
            hash.end();
            resolve(hash.read());
        });
        rs.on('error', function (error) {
            hash.end();
            return reject(error);
        });
        rs.pipe(hash);
    });
}
exports.getFileSha1 = getFileSha1;
function getBufferSha1(data) {
    var hash = crypto.createHash('sha1');
    hash.update(data);
    return hash.digest('hex');
}
exports.getBufferSha1 = getBufferSha1;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsError = exports.FsErrorType = void 0;
var FsErrorType;
(function (FsErrorType) {
    FsErrorType[FsErrorType["fsNotAvailableError"] = 0] = "fsNotAvailableError";
    FsErrorType[FsErrorType["fileNotFoundError"] = 1] = "fileNotFoundError";
    FsErrorType[FsErrorType["invalidParameters"] = 2] = "invalidParameters";
})(FsErrorType = exports.FsErrorType || (exports.FsErrorType = {}));
var fsErrorMessage = (_a = {},
    _a[FsErrorType.fsNotAvailableError] = 'Local file system is not accessible',
    _a[FsErrorType.fileNotFoundError] = 'File not found',
    _a[FsErrorType.invalidParameters] = 'Invalid parameters',
    _a);
var FsError = (function (_super) {
    __extends(FsError, _super);
    function FsError(type, reason) {
        var _this = _super.call(this) || this;
        _this.name = 'FsError';
        _this.type = type;
        if (reason) {
            _this.message = fsErrorMessage[type] + ': ' + reason;
        }
        else {
            _this.message = fsErrorMessage[type];
        }
        Object.setPrototypeOf(_this, FsError.prototype);
        return _this;
    }
    return FsError;
}(Error));
exports.FsError = FsError;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(130);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 24 */
/***/ (function(module, exports) {

/**
 * Extracts Agfa flavored Makernotes which are equal to those of Olympus.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Olympus.html
  var tags = {

    0x0000 : "MakerNoteVersion",
    0x0001 : "MinoltaCameraSettingsOld",
    0x0003 : "MinoltaCameraSettings",
    0x0040 : "CompressedImageSize",
    0x0081 : "PreviewImageData",
    0x0088 : "PreviewImageStart",
    0x0089 : "PreviewImageLength",
    0x0100 : "ThumbnailImage",
    0x0104 : "BodyFirmwareVersion",
    0x0200 : "SpecialMode",
    0x0201 : "Quality",
    0x0202 : "Macro",
    0x0203 : "BWMode",
    0x0204 : "DigitalZoom",
    0x0205 : "FocalPlaneDiagonal",
    0x0206 : "LensDistortionParams",
    0x0207 : "CameraType",
    0x0208 : "TextInfo",
    0x0209 : "CameraID",
    0x020B : "EpsonImageWidth",
    0x020C : "EpsonImageHeight",
    0x020D : "EpsonSoftware",
    0x0280 : "PreviewImage",
    0x0300 : "PreCaptureFrames",
    0x0301 : "WhiteBoard",
    0x0302 : "OneTouchWB",
    0x0303 : "WhiteBalanceBracket",
    0x0304 : "WhiteBalanceBias",
    0x0403 : "SceneMode",
    0x0404 : "SerialNumber",
    0x0405 : "Firmware",
    0x0E00 : "PrintIM",
    0x0F00 : "DataDump",
    0x0F01 : "DataDump2",
    0x0F04 : "ZoomedPreviewStart",
    0x0F05 : "ZoomedPreviewLength",
    0x0F06 : "ZoomedPreviewSize",
    0x1000 : "ShutterSpeedValue",
    0x1001 : "ISOValue",
    0x1002 : "ApertureValue",
    0x1003 : "BrightnessValue",
    0x1004 : "FlashMode",
    0x1005 : "FlashDevice",
    0x1006 : "ExposureCompensation",
    0x1007 : "SensorTemperature",
    0x1008 : "LensTemperature",
    0x1009 : "LightCondition",
    0x100A : "FocusRange",
    0x100B : "FocusMode",
    0x100C : "ManualFocusDistance",
    0x100D : "ZoomStepCount",
    0x100E : "FocusStepCount",
    0x100F : "Sharpness",
    0x1010 : "FlashChargeLevel",
    0x1011 : "ColorMatrix",
    0x1012 : "BlackLevel",
    0x1013 : "ColorTemperatureBG?",
    0x1014 : "ColorTemperatureRG?",
    0x1015 : "WBMode",
    0x1017 : "RedBalance",
    0x1018 : "BlueBalance",
    0x1019 : "ColorMatrixNumber",
    0x101A : "SerialNumber",
    0x101B : "ExternalFlashAE1_0?",
    0x101C : "ExternalFlashAE2_0?",
    0x101D : "InternalFlashAE1_0?",
    0x101E : "InternalFlashAE2_0?",
    0x101F : "ExternalFlashAE1?",
    0x1020 : "ExternalFlashAE2?",
    0x1021 : "InternalFlashAE1?",
    0x1022 : "InternalFlashAE2?",
    0x1023 : "FlashExposureComp",
    0x1024 : "InternalFlashTable",
    0x1025 : "ExternalFlashGValue",
    0x1026 : "ExternalFlashBounce",
    0x1027 : "ExternalFlashZoom",
    0x1028 : "ExternalFlashMode",
    0x1029 : "Contrast",
    0x102A : "SharpnessFactor",
    0x102B : "ColorControl",
    0x102C : "ValidBits",
    0x102D : "CoringFilter",
    0x102E : "OlympusImageWidth",
    0x102F : "OlympusImageHeight",
    0x1030 : "SceneDetect",
    0x1031 : "SceneArea?",
    0x1033 : "SceneDetectData?",
    0x1034 : "CompressionRatio",
    0x1035 : "PreviewImageValid",
    0x1036 : "PreviewImageStart",
    0x1037 : "PreviewImageLength",
    0x1038 : "AFResult",
    0x1039 : "CCDScanMode",
    0x103A : "NoiseReduction",
    0x103B : "FocusStepInfinity",
    0x103C : "FocusStepNear",
    0x103D : "LightValueCenter",
    0x103E : "LightValuePeriphery",
    0x103F : "FieldCount?",
    0x2010 : "Equipment",
    0x2020 : "CameraSettings",
    0x2030 : "RawDevelopment",
    0x2031 : "RawDev2",
    0x2040 : "ImageProcessing",
    0x2050 : "FocusInfo",
    0x2100 : "Olympus2100",
    0x2200 : "Olympus2200",
    0x2300 : "Olympus2300",
    0x2400 : "Olympus2400",
    0x2500 : "Olympus2500",
    0x2600 : "Olympus2600",
    0x2700 : "Olympus2700",
    0x2800 : "Olympus2800",
    0x2900 : "Olympus2900",
    0x3000 : "RawInfo",
    0x4000 : "MainInfo",
    0x5000 : "UnknownInfo"

  };

  // Agfa flavored Makernote data starts after eight bytes
  var ifdOffset = makernoteOffset + 8;

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.agfaMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.agfaMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, tags);
    if (exifEntry && exifEntry.tagName !== null) {
      makernoteData[exifEntry.tagName] = exifEntry.value;
    }
  }

  return makernoteData;

};

/***/ }),
/* 25 */
/***/ (function(module, exports) {

/**
 * Extracts Epson flavored Makernotes which are equal to those of Olympus.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Olympus.html
  var tags = {

    0x0000 : "MakerNoteVersion",
    0x0001 : "MinoltaCameraSettingsOld",
    0x0003 : "MinoltaCameraSettings",
    0x0040 : "CompressedImageSize",
    0x0081 : "PreviewImageData",
    0x0088 : "PreviewImageStart",
    0x0089 : "PreviewImageLength",
    0x0100 : "ThumbnailImage",
    0x0104 : "BodyFirmwareVersion",
    0x0200 : "SpecialMode",
    0x0201 : "Quality",
    0x0202 : "Macro",
    0x0203 : "BWMode",
    0x0204 : "DigitalZoom",
    0x0205 : "FocalPlaneDiagonal",
    0x0206 : "LensDistortionParams",
    0x0207 : "CameraType",
    0x0208 : "TextInfo",
    0x0209 : "CameraID",
    0x020B : "EpsonImageWidth",
    0x020C : "EpsonImageHeight",
    0x020D : "EpsonSoftware",
    0x0280 : "PreviewImage",
    0x0300 : "PreCaptureFrames",
    0x0301 : "WhiteBoard",
    0x0302 : "OneTouchWB",
    0x0303 : "WhiteBalanceBracket",
    0x0304 : "WhiteBalanceBias",
    0x0403 : "SceneMode",
    0x0404 : "SerialNumber",
    0x0405 : "Firmware",
    0x0E00 : "PrintIM",
    0x0F00 : "DataDump",
    0x0F01 : "DataDump2",
    0x0F04 : "ZoomedPreviewStart",
    0x0F05 : "ZoomedPreviewLength",
    0x0F06 : "ZoomedPreviewSize",
    0x1000 : "ShutterSpeedValue",
    0x1001 : "ISOValue",
    0x1002 : "ApertureValue",
    0x1003 : "BrightnessValue",
    0x1004 : "FlashMode",
    0x1005 : "FlashDevice",
    0x1006 : "ExposureCompensation",
    0x1007 : "SensorTemperature",
    0x1008 : "LensTemperature",
    0x1009 : "LightCondition",
    0x100A : "FocusRange",
    0x100B : "FocusMode",
    0x100C : "ManualFocusDistance",
    0x100D : "ZoomStepCount",
    0x100E : "FocusStepCount",
    0x100F : "Sharpness",
    0x1010 : "FlashChargeLevel",
    0x1011 : "ColorMatrix",
    0x1012 : "BlackLevel",
    0x1013 : "ColorTemperatureBG?",
    0x1014 : "ColorTemperatureRG?",
    0x1015 : "WBMode",
    0x1017 : "RedBalance",
    0x1018 : "BlueBalance",
    0x1019 : "ColorMatrixNumber",
    0x101A : "SerialNumber",
    0x101B : "ExternalFlashAE1_0?",
    0x101C : "ExternalFlashAE2_0?",
    0x101D : "InternalFlashAE1_0?",
    0x101E : "InternalFlashAE2_0?",
    0x101F : "ExternalFlashAE1?",
    0x1020 : "ExternalFlashAE2?",
    0x1021 : "InternalFlashAE1?",
    0x1022 : "InternalFlashAE2?",
    0x1023 : "FlashExposureComp",
    0x1024 : "InternalFlashTable",
    0x1025 : "ExternalFlashGValue",
    0x1026 : "ExternalFlashBounce",
    0x1027 : "ExternalFlashZoom",
    0x1028 : "ExternalFlashMode",
    0x1029 : "Contrast",
    0x102A : "SharpnessFactor",
    0x102B : "ColorControl",
    0x102C : "ValidBits",
    0x102D : "CoringFilter",
    0x102E : "OlympusImageWidth",
    0x102F : "OlympusImageHeight",
    0x1030 : "SceneDetect",
    0x1031 : "SceneArea?",
    0x1033 : "SceneDetectData?",
    0x1034 : "CompressionRatio",
    0x1035 : "PreviewImageValid",
    0x1036 : "PreviewImageStart",
    0x1037 : "PreviewImageLength",
    0x1038 : "AFResult",
    0x1039 : "CCDScanMode",
    0x103A : "NoiseReduction",
    0x103B : "FocusStepInfinity",
    0x103C : "FocusStepNear",
    0x103D : "LightValueCenter",
    0x103E : "LightValuePeriphery",
    0x103F : "FieldCount?",
    0x2010 : "Equipment",
    0x2020 : "CameraSettings",
    0x2030 : "RawDevelopment",
    0x2031 : "RawDev2",
    0x2040 : "ImageProcessing",
    0x2050 : "FocusInfo",
    0x2100 : "Olympus2100",
    0x2200 : "Olympus2200",
    0x2300 : "Olympus2300",
    0x2400 : "Olympus2400",
    0x2500 : "Olympus2500",
    0x2600 : "Olympus2600",
    0x2700 : "Olympus2700",
    0x2800 : "Olympus2800",
    0x2900 : "Olympus2900",
    0x3000 : "RawInfo",
    0x4000 : "MainInfo",
    0x5000 : "UnknownInfo"

  };

  // Epson flavored Makernote data starts after eight bytes
  var ifdOffset = makernoteOffset + 8;

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.epsonMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.epsonMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, tags);
    if (exifEntry && exifEntry.tagName !== null) {
      makernoteData[exifEntry.tagName] = exifEntry.value;
    }
  }

  return makernoteData;

};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

/**
 * Extracts Fujifilm flavored Makernotes which are always stored in little
 * endian, no matter what the rest of the file is. Additionally the offsets
 * are relative to the start of the Makernote instead of the start of the
 * TIFF header.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/FujiFilm.html
  var tags = {
    0x0000 : "Version",
    0x0010 : "InternalSerialNumber",
    0x1000 : "Quality",
    0x1001 : "Sharpness",
    0x1002 : "WhiteBalance",
    0x1003 : "Saturation",
    0x1004 : "Contrast",
    0x1005 : "ColorTemperature",
    0x1006 : "Contrast",
    0x100a : "WhiteBalanceFineTune",
    0x100b : "NoiseReduction",
    0x100e : "HighISONoiseReduction",
    0x1010 : "FujiFlashMode",
    0x1011 : "FlashExposureComp",
    0x1020 : "Macro",
    0x1021 : "FocusMode",
    0x1023 : "FocusPixel",
    0x1030 : "SlowSync",
    0x1033 : "EXRAuto",
    0x1034 : "EXRMode",
    0x1100 : "AutoBracketing",
    0x1101 : "SequenceNumber",
    0x1210 : "ColorMode",
    0x1300 : "BlurWarning",
    0x1301 : "FocusWarning",
    0x1302 : "ExposureWarning",
    0x1304 : "GEImageSize",
    0x1400 : "DynamicRange",
    0x1401 : "FilmMode",
    0x1402 : "DynamicRangeSetting",
    0x1403 : "DevelopmentDynamicRange",
    0x1404 : "MinFocalLength",
    0x1405 : "MaxFocalLength",
    0x1406 : "MaxApertureAtMinFocal",
    0x1407 : "MaxApertureAtMaxFocal",
    0x140b : "AutoDynamicRange",
    0x4100 : "FacesDetected",
    0x4103 : "FacePositions",
    0x4282 : "FaceRecInfo",
    0x8000 : "FileSource",
    0x8002 : "OrderNumber",
    0x8003 : "FrameNumber",
    0xb211 : "Parallax"

  };

  // Start of the Fujifilm flavored Makernote data is determined by the four
  // bytes following the Makernote vendor name
  var ifdOffset = makernoteOffset + data.getLong(makernoteOffset + 8, false, tiffOffset);

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, false);
  if (this.options.fujifilmMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.fujifilmMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), makernoteOffset, false, tags);
    if (exifEntry && exifEntry.tagName !== null) makernoteData[exifEntry.tagName] = exifEntry.value;
  }

  return makernoteData;

};

/***/ }),
/* 27 */
/***/ (function(module, exports) {

/**
 * Extracts Olympus flavored Makernotes.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Olympus.html
  var tags = {

    0x0000 : "MakerNoteVersion",
    0x0001 : "MinoltaCameraSettingsOld",
    0x0003 : "MinoltaCameraSettings",
    0x0040 : "CompressedImageSize",
    0x0081 : "PreviewImageData",
    0x0088 : "PreviewImageStart",
    0x0089 : "PreviewImageLength",
    0x0100 : "ThumbnailImage",
    0x0104 : "BodyFirmwareVersion",
    0x0200 : "SpecialMode",
    0x0201 : "Quality",
    0x0202 : "Macro",
    0x0203 : "BWMode",
    0x0204 : "DigitalZoom",
    0x0205 : "FocalPlaneDiagonal",
    0x0206 : "LensDistortionParams",
    0x0207 : "CameraType",
    0x0208 : "TextInfo",
    0x0209 : "CameraID",
    0x020B : "EpsonImageWidth",
    0x020C : "EpsonImageHeight",
    0x020D : "EpsonSoftware",
    0x0280 : "PreviewImage",
    0x0300 : "PreCaptureFrames",
    0x0301 : "WhiteBoard",
    0x0302 : "OneTouchWB",
    0x0303 : "WhiteBalanceBracket",
    0x0304 : "WhiteBalanceBias",
    0x0403 : "SceneMode",
    0x0404 : "SerialNumber",
    0x0405 : "Firmware",
    0x0E00 : "PrintIM",
    0x0F00 : "DataDump",
    0x0F01 : "DataDump2",
    0x0F04 : "ZoomedPreviewStart",
    0x0F05 : "ZoomedPreviewLength",
    0x0F06 : "ZoomedPreviewSize",
    0x1000 : "ShutterSpeedValue",
    0x1001 : "ISOValue",
    0x1002 : "ApertureValue",
    0x1003 : "BrightnessValue",
    0x1004 : "FlashMode",
    0x1005 : "FlashDevice",
    0x1006 : "ExposureCompensation",
    0x1007 : "SensorTemperature",
    0x1008 : "LensTemperature",
    0x1009 : "LightCondition",
    0x100A : "FocusRange",
    0x100B : "FocusMode",
    0x100C : "ManualFocusDistance",
    0x100D : "ZoomStepCount",
    0x100E : "FocusStepCount",
    0x100F : "Sharpness",
    0x1010 : "FlashChargeLevel",
    0x1011 : "ColorMatrix",
    0x1012 : "BlackLevel",
    0x1013 : "ColorTemperatureBG?",
    0x1014 : "ColorTemperatureRG?",
    0x1015 : "WBMode",
    0x1017 : "RedBalance",
    0x1018 : "BlueBalance",
    0x1019 : "ColorMatrixNumber",
    0x101A : "SerialNumber",
    0x101B : "ExternalFlashAE1_0?",
    0x101C : "ExternalFlashAE2_0?",
    0x101D : "InternalFlashAE1_0?",
    0x101E : "InternalFlashAE2_0?",
    0x101F : "ExternalFlashAE1?",
    0x1020 : "ExternalFlashAE2?",
    0x1021 : "InternalFlashAE1?",
    0x1022 : "InternalFlashAE2?",
    0x1023 : "FlashExposureComp",
    0x1024 : "InternalFlashTable",
    0x1025 : "ExternalFlashGValue",
    0x1026 : "ExternalFlashBounce",
    0x1027 : "ExternalFlashZoom",
    0x1028 : "ExternalFlashMode",
    0x1029 : "Contrast",
    0x102A : "SharpnessFactor",
    0x102B : "ColorControl",
    0x102C : "ValidBits",
    0x102D : "CoringFilter",
    0x102E : "OlympusImageWidth",
    0x102F : "OlympusImageHeight",
    0x1030 : "SceneDetect",
    0x1031 : "SceneArea?",
    0x1033 : "SceneDetectData?",
    0x1034 : "CompressionRatio",
    0x1035 : "PreviewImageValid",
    0x1036 : "PreviewImageStart",
    0x1037 : "PreviewImageLength",
    0x1038 : "AFResult",
    0x1039 : "CCDScanMode",
    0x103A : "NoiseReduction",
    0x103B : "FocusStepInfinity",
    0x103C : "FocusStepNear",
    0x103D : "LightValueCenter",
    0x103E : "LightValuePeriphery",
    0x103F : "FieldCount?",
    0x2010 : "Equipment",
    0x2020 : "CameraSettings",
    0x2030 : "RawDevelopment",
    0x2031 : "RawDev2",
    0x2040 : "ImageProcessing",
    0x2050 : "FocusInfo",
    0x2100 : "Olympus2100",
    0x2200 : "Olympus2200",
    0x2300 : "Olympus2300",
    0x2400 : "Olympus2400",
    0x2500 : "Olympus2500",
    0x2600 : "Olympus2600",
    0x2700 : "Olympus2700",
    0x2800 : "Olympus2800",
    0x2900 : "Olympus2900",
    0x3000 : "RawInfo",
    0x4000 : "MainInfo",
    0x5000 : "UnknownInfo"

  };

  // Olympus flavored Makernote data starts after eight bytes
  var ifdOffset = makernoteOffset + 8;

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.olympusMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.olympusMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, tags);
    if (exifEntry && exifEntry.tagName !== null) makernoteData[exifEntry.tagName] = exifEntry.value;
  }

  return makernoteData;

};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

/**
 * Extracts Panasonic flavored Makernotes.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Panasonic.html
  var tags = {

    0x0001 : "ImageQuality",
    0x0002 : "FirmwareVersion",
    0x0003 : "WhiteBalance",
    0x0007 : "FocusMode",
    0x000f : "AFAreaMode",
    0x001a : "ImageStabilization",
    0x001c : "MacroMode",
    0x001f : "ShootingMode",
    0x0020 : "Audio",
    0x0021 : "DataDump",
    0x0023 : "WhiteBalanceBias",
    0x0024 : "FlashBias",
    0x0025 : "InternalSerialNumber",
    0x0026 : "PanasonicExifVersion",
    0x0028 : "ColorEffect",
    0x0029 : "TimeSincePowerOn",
    0x002a : "BurstMode",
    0x002b : "SequenceNumber",
    0x002c : "ContrastMode",
    0x002d : "NoiseReduction",
    0x002e : "SelfTimer",
    0x0030 : "Rotation",
    0x0031 : "AFAssistLamp",
    0x0032 : "ColorMode",
    0x0033 : "BabyAge",
    0x0034 : "OpticalZoomMode",
    0x0035 : "ConversionLens",
    0x0036 : "TravelDay",
    0x0039 : "Contrast",
    0x003a : "WorldTimeLocation",
    0x003b : "TextStamp",
    0x003c : "ProgramISO",
    0x003d : "AdvancedSceneType",
    0x003e : "TextStamp",
    0x003f : "FacesDetected",
    0x0040 : "Saturation",
    0x0041 : "Sharpness",
    0x0042 : "FilmMode",
    0x0044 : "ColorTempKelvin",
    0x0045 : "BracketSettings",
    0x0046 : "WBShiftAB",
    0x0047 : "WBShiftGM",
    0x0048 : "FlashCurtain",
    0x0049 : "LongExposureNoiseReduction",
    0x004b : "PanasonicImageWidth",
    0x004c : "PanasonicImageHeight",
    0x004d : "AFPointPosition",
    0x004e : "FaceDetInfo",
    0x0051 : "LensType",
    0x0052 : "LensSerialNumber",
    0x0053 : "AccessoryType",
    0x0054 : "AccessorySerialNumber",
    0x0059 : "Transform",
    0x005d : "IntelligentExposure",
    0x0060 : "LensFirmwareVersion",
    0x0061 : "FaceRecInfo",
    0x0062 : "FlashWarning",
    0x0063 : "RecognizedFaceFlags?",
    0x0065 : "Title",
    0x0066 : "BabyName",
    0x0067 : "Location",
    0x0069 : "Country",
    0x006b : "State",
    0x006d : "City",
    0x006f : "Landmark",
    0x0070 : "IntelligentResolution",
    0x0077 : "BurstSpeed",
    0x0079 : "IntelligentD-Range",
    0x007c : "ClearRetouch",
    0x0086 : "ManometerPressure",
    0x0089 : "PhotoStyle",
    0x008a : "ShadingCompensation",
    0x008c : "AccelerometerZ",
    0x008d : "AccelerometerX",
    0x008e : "AccelerometerY",
    0x008f : "CameraOrientation",
    0x0090 : "RollAngle",
    0x0091 : "PitchAngle",
    0x0093 : "SweepPanoramaDirection",
    0x0094 : "SweepPanoramaFieldOfView",
    0x0096 : "TimerRecording",
    0x009d : "InternalNDFilter",
    0x009e : "HDR",
    0x009f : "ShutterType",
    0x00a3 : "ClearRetouchValue",
    0x00ab : "TouchAE",
    0x0e00 : "PrintIM",
    0x8000 : "MakerNoteVersion",
    0x8001 : "SceneMode",
    0x8004 : "WBRedLevel",
    0x8005 : "WBGreenLevel",
    0x8006 : "WBBlueLevel",
    0x8007 : "FlashFired",
    0x8008 : "TextStamp",
    0x8009 : "TextStamp",
    0x8010 : "BabyAge",
    0x8012 : "Transform"

  };

  // Panasonic flavored Makernote data starts after twelve bytes
  var ifdOffset = makernoteOffset + 12;

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.panasonicMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.panasonicMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), makernoteOffset, false, tags);
    if( ! exifEntry ) break; // stop if exifEntry starts to return false, prevents a process out of memory
    if (exifEntry && exifEntry.tagName) {
      makernoteData[exifEntry.tagName] = exifEntry.value;
    }
  }

  return makernoteData;

};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

/**
 * Extracts Sanyo flavored Makernotes.
 */
exports.extractMakernotes = function (data, makernoteOffset, tiffOffset) {

  // List of vendor specific Makernote tags found on
  // http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Sanyo.html
  var tags = {

    0x00FF : "MakerNoteOffset",
    0x0100 : "SanyoThumbnail",
    0x0200 : "SpecialMode",
    0x0201 : "SanyoQuality",
    0x0202 : "Macro",
    0x0204 : "DigitalZoom",
    0x0207 : "SoftwareVersion",
    0x0208 : "PictInfo",
    0x0209 : "CameraID",
    0x020E : "SequentialShot",
    0x020F : "WideRange",
    0x0210 : "ColorAdjustmentMode",
    0x0213 : "QuickShot",
    0x0214 : "SelfTimer",
    0x0216 : "VoiceMemo",
    0x0217 : "RecordShutterRelease",
    0x0218 : "FlickerReduce",
    0x0219 : "OpticalZoomOn",
    0x021B : "DigitalZoomOn",
    0x021D : "LightSourceSpecial",
    0x021E : "Resaved",
    0x021F : "SceneSelect",
    0x0223 : function (entry) {

      switch (entry.format) {
        case 0x0005:
          return "ManualFocusDistance";
        case 0x0007:
          return "FaceInfo";
        default:
          return false;
      }

    },
    0x0224 : "SequenceShotInterval",
    0x0225 : "FlashMode",
    0x0E00 : "PrintIM",
    0x0F00 : "DataDump"

  };

  // Sanyo flavored Makernote data starts after eight bytes
  var ifdOffset = makernoteOffset + 8;

  // Get the number of entries and extract them
  var numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.sanyoMaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.sanyoMaxEntries);
  }

  var makernoteData = {};

  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, tags);
    if (exifEntry && exifEntry.tagName) {
      makernoteData[exifEntry.tagName] = exifEntry.value;
    }
  }

  return makernoteData;

};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  copySync: __webpack_require__(94)
}


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// imported from ncp (this is temporary, will rewrite)

var fs = __webpack_require__(1)
var path = __webpack_require__(0)
var utimes = __webpack_require__(114)

function ncp (source, dest, options, callback) {
  if (!callback) {
    callback = options
    options = {}
  }

  var basePath = process.cwd()
  var currentPath = path.resolve(basePath, source)
  var targetPath = path.resolve(basePath, dest)

  var filter = options.filter
  var transform = options.transform
  var overwrite = options.overwrite
  // If overwrite is undefined, use clobber, otherwise default to true:
  if (overwrite === undefined) overwrite = options.clobber
  if (overwrite === undefined) overwrite = true
  var errorOnExist = options.errorOnExist
  var dereference = options.dereference
  var preserveTimestamps = options.preserveTimestamps === true

  var started = 0
  var finished = 0
  var running = 0

  var errored = false

  startCopy(currentPath)

  function startCopy (source) {
    started++
    if (filter) {
      if (filter instanceof RegExp) {
        console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
        if (!filter.test(source)) {
          return doneOne(true)
        }
      } else if (typeof filter === 'function') {
        if (!filter(source, dest)) {
          return doneOne(true)
        }
      }
    }
    return getStats(source)
  }

  function getStats (source) {
    var stat = dereference ? fs.stat : fs.lstat
    running++
    stat(source, function (err, stats) {
      if (err) return onError(err)

      // We need to get the mode from the stats object and preserve it.
      var item = {
        name: source,
        mode: stats.mode,
        mtime: stats.mtime, // modified time
        atime: stats.atime, // access time
        stats: stats // temporary
      }

      if (stats.isDirectory()) {
        return onDir(item)
      } else if (stats.isFile() || stats.isCharacterDevice() || stats.isBlockDevice()) {
        return onFile(item)
      } else if (stats.isSymbolicLink()) {
        // Symlinks don't really need to know about the mode.
        return onLink(source)
      }
    })
  }

  function onFile (file) {
    var target = file.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        copyFile(file, target)
      } else {
        if (overwrite) {
          rmFile(target, function () {
            copyFile(file, target)
          })
        } else if (errorOnExist) {
          onError(new Error(target + ' already exists'))
        } else {
          doneOne()
        }
      }
    })
  }

  function copyFile (file, target) {
    var readStream = fs.createReadStream(file.name)
    var writeStream = fs.createWriteStream(target, { mode: file.mode })

    readStream.on('error', onError)
    writeStream.on('error', onError)

    if (transform) {
      transform(readStream, writeStream, file)
    } else {
      writeStream.on('open', function () {
        readStream.pipe(writeStream)
      })
    }

    writeStream.once('close', function () {
      fs.chmod(target, file.mode, function (err) {
        if (err) return onError(err)
        if (preserveTimestamps) {
          utimes.utimesMillis(target, file.atime, file.mtime, function (err) {
            if (err) return onError(err)
            return doneOne()
          })
        } else {
          doneOne()
        }
      })
    })
  }

  function rmFile (file, done) {
    fs.unlink(file, function (err) {
      if (err) return onError(err)
      return done()
    })
  }

  function onDir (dir) {
    var target = dir.name.replace(currentPath, targetPath.replace('$', '$$$$')) // escapes '$' with '$$'
    isWritable(target, function (writable) {
      if (writable) {
        return mkDir(dir, target)
      }
      copyDir(dir.name)
    })
  }

  function mkDir (dir, target) {
    fs.mkdir(target, dir.mode, function (err) {
      if (err) return onError(err)
      // despite setting mode in fs.mkdir, doesn't seem to work
      // so we set it here.
      fs.chmod(target, dir.mode, function (err) {
        if (err) return onError(err)
        copyDir(dir.name)
      })
    })
  }

  function copyDir (dir) {
    fs.readdir(dir, function (err, items) {
      if (err) return onError(err)
      items.forEach(function (item) {
        startCopy(path.join(dir, item))
      })
      return doneOne()
    })
  }

  function onLink (link) {
    var target = link.replace(currentPath, targetPath)
    fs.readlink(link, function (err, resolvedPath) {
      if (err) return onError(err)
      checkLink(resolvedPath, target)
    })
  }

  function checkLink (resolvedPath, target) {
    if (dereference) {
      resolvedPath = path.resolve(basePath, resolvedPath)
    }
    isWritable(target, function (writable) {
      if (writable) {
        return makeLink(resolvedPath, target)
      }
      fs.readlink(target, function (err, targetDest) {
        if (err) return onError(err)

        if (dereference) {
          targetDest = path.resolve(basePath, targetDest)
        }
        if (targetDest === resolvedPath) {
          return doneOne()
        }
        return rmFile(target, function () {
          makeLink(resolvedPath, target)
        })
      })
    })
  }

  function makeLink (linkPath, target) {
    fs.symlink(linkPath, target, function (err) {
      if (err) return onError(err)
      return doneOne()
    })
  }

  function isWritable (path, done) {
    fs.lstat(path, function (err) {
      if (err) {
        if (err.code === 'ENOENT') return done(true)
        return done(false)
      }
      return done(false)
    })
  }

  function onError (err) {
    // ensure callback is defined & called only once:
    if (!errored && callback !== undefined) {
      errored = true
      return callback(err)
    }
  }

  function doneOne (skipped) {
    if (!skipped) running--
    finished++
    if ((started === finished) && (running === 0)) {
      if (callback !== undefined) {
        return callback(null)
      }
    }
  }
}

module.exports = ncp


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// This is adapted from https://github.com/normalize/mz
// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
const u = __webpack_require__(3).fromCallback
const fs = __webpack_require__(1)

const api = [
  'access',
  'appendFile',
  'chmod',
  'chown',
  'close',
  'fchmod',
  'fchown',
  'fdatasync',
  'fstat',
  'fsync',
  'ftruncate',
  'futimes',
  'lchown',
  'link',
  'lstat',
  'mkdir',
  'open',
  'read',
  'readFile',
  'readdir',
  'readlink',
  'realpath',
  'rename',
  'rmdir',
  'stat',
  'symlink',
  'truncate',
  'unlink',
  'utimes',
  'write',
  'writeFile'
]
// fs.mkdtemp() was added in Node.js v5.10.0, so check if it exists
typeof fs.mkdtemp === 'function' && api.push('mkdtemp')

// Export all keys:
Object.keys(fs).forEach(key => {
  exports[key] = fs[key]
})

// Universalify async methods:
api.forEach(method => {
  exports[method] = u(fs[method])
})

// We differ from mz/fs in that we still ship the old, broken, fs.exists()
// since we are a drop-in replacement for the native module
exports.exists = function (filename, callback) {
  if (typeof callback === 'function') {
    return fs.exists(filename, callback)
  }
  return new Promise(resolve => {
    return fs.exists(filename, resolve)
  })
}


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0)

// get drive on windows
function getRootPath (p) {
  p = path.normalize(path.resolve(p)).split(path.sep)
  if (p.length > 0) return p[0]
  return null
}

// http://stackoverflow.com/a/62888/10333 contains more accurate
// TODO: expand to include the rest
const INVALID_PATH_CHARS = /[<>:"|?*]/

function invalidWin32Path (p) {
  const rp = getRootPath(p)
  p = p.replace(rp, '')
  return INVALID_PATH_CHARS.test(p)
}

module.exports = {
  getRootPath,
  invalidWin32Path
}


/***/ }),
/* 34 */
/***/ (function(module, exports) {

/* eslint-disable node/no-deprecated-api */
module.exports = function (size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    try {
      return Buffer.allocUnsafe(size)
    } catch (e) {
      return new Buffer(size)
    }
  }
  return new Buffer(size)
}


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fs = __webpack_require__(2);
var path = __webpack_require__(0);

var detector = __webpack_require__(120);

var handlers = {};
var types = __webpack_require__(37);

// load all available handlers
types.forEach(function (type) {
  handlers[type] = __webpack_require__(36)("./" + type);
});

// Maximum buffer size, with a default of 128 kilobytes.
// TO-DO: make this adaptive based on the initial signature of the image
var MaxBufferSize = 128*1024;

function lookup (buffer, filepath) {
  // detect the file type.. don't rely on the extension
  var type = detector(buffer, filepath);

  // find an appropriate handler for this file type
  if (type in handlers) {
    var size = handlers[type].calculate(buffer, filepath);
    if (size !== false) {
      size.type = type;
      return size;
    }
  }

  // throw up, if we don't understand the file
  throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');
}

function asyncFileToBuffer (filepath, callback) {
  // open the file in read only mode
  fs.open(filepath, 'r', function (err, descriptor) {
    if (err) { return callback(err); }
    var size = fs.fstatSync(descriptor).size;
    if (size <= 0){return callback(new Error("File size is not greater than 0 —— " + filepath)); }
    var bufferSize = Math.min(size, MaxBufferSize);
    var buffer = new Buffer(bufferSize);
    // read first buffer block from the file, asynchronously
    fs.read(descriptor, buffer, 0, bufferSize, 0, function (err) {
      if (err) { return callback(err); }
      // close the file, we are done
      fs.close(descriptor, function (err) {
        callback(err, buffer);
      });
    });
  });
}

function syncFileToBuffer (filepath) {
  // read from the file, synchronously
  var descriptor = fs.openSync(filepath, 'r');
  var size = fs.fstatSync(descriptor).size;
  var bufferSize = Math.min(size, MaxBufferSize);
  var buffer = new Buffer(bufferSize);
  fs.readSync(descriptor, buffer, 0, bufferSize, 0);
  fs.closeSync(descriptor);
  return buffer;
}

/**
 * @params input - buffer or relative/absolute path of the image file
 * @params callback - optional function for async detection
 */
module.exports = function (input, callback) {

  // Handle buffer input
  if (Buffer.isBuffer(input)) {
    return lookup(input);
  }

  // input should be a string at this point
  if (typeof input !== 'string') {
    throw new TypeError('invalid invocation');
  }

  // resolve the file path
  var filepath = path.resolve(input);

  if (typeof callback === 'function') {
    asyncFileToBuffer(filepath, function (err, buffer) {
      if (err) { return callback(err); }

      // return the dimensions
      var dimensions;
      try {
        dimensions = lookup(buffer, filepath);
      } catch (e) {
        err = e;
      }
      callback(err, dimensions);
    });
  } else {
    var buffer = syncFileToBuffer(filepath);
    return lookup(buffer, filepath);
  }
};

module.exports.types = types;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./bmp": 38,
	"./bmp.js": 38,
	"./dds": 39,
	"./dds.js": 39,
	"./gif": 40,
	"./gif.js": 40,
	"./jpg": 41,
	"./jpg.js": 41,
	"./png": 42,
	"./png.js": 42,
	"./psd": 43,
	"./psd.js": 43,
	"./svg": 44,
	"./svg.js": 44,
	"./tiff": 45,
	"./tiff.js": 45,
	"./webp": 46,
	"./webp.js": 46
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 36;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = [
  'bmp',
  'gif',
  'jpg',
  'png',
  'psd',
  'svg',
  'tiff',
  'webp',
  'dds'
];


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isBMP (buffer) {
  return ('BM' === buffer.toString('ascii', 0, 2));
}

function calculate (buffer) {
  return {
    'width': buffer.readUInt32LE(18),
    'height': Math.abs(buffer.readInt32LE(22))
  };
}

module.exports = {
  'detect': isBMP,
  'calculate': calculate
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isDDS(buffer){
	return buffer.readUInt32LE(0) === 0x20534444;
}

function calculate(buffer){
	// read file resolution metadata
	return {
		'height': buffer.readUInt32LE(12),
		'width': buffer.readUInt32LE(16)
	};
}

module.exports = {
	'detect': isDDS,
	'calculate': calculate
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var gifRegexp = /^GIF8[79]a/;
function isGIF (buffer) {
  var signature = buffer.toString('ascii', 0, 6);
  return (gifRegexp.test(signature));
}

function calculate(buffer) {
  return {
    'width': buffer.readUInt16LE(6),
    'height': buffer.readUInt16LE(8)
  };
}

module.exports = {
  'detect': isGIF,
  'calculate': calculate
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// NOTE: we only support baseline and progressive JPGs here
// due to the structure of the loader class, we only get a buffer
// with a maximum size of 4096 bytes. so if the SOF marker is outside
// if this range we can't detect the file size correctly.

function isJPG (buffer) { //, filepath
  var SOIMarker = buffer.toString('hex', 0, 2);
  return ('ffd8' === SOIMarker);
}

function extractSize (buffer, i) {
  return {
    'height' : buffer.readUInt16BE(i),
    'width' : buffer.readUInt16BE(i + 2)
  };
}

function validateBuffer (buffer, i) {
  // index should be within buffer limits
  if (i > buffer.length) {
    throw new TypeError('Corrupt JPG, exceeded buffer limits');
  }
  // Every JPEG block must begin with a 0xFF
  if (buffer[i] !== 0xFF) {
    throw new TypeError('Invalid JPG, marker table corrupted');
  }
}

function calculate (buffer) {

  // Skip 4 chars, they are for signature
  buffer = buffer.slice(4);

  var i, next;
  while (buffer.length) {
    // read length of the next block
    i = buffer.readUInt16BE(0);

    // ensure correct format
    validateBuffer(buffer, i);

    // 0xFFC0 is baseline standard(SOF)
    // 0xFFC1 is baseline optimized(SOF)
    // 0xFFC2 is progressive(SOF2)
    next = buffer[i + 1];
    if (next === 0xC0 || next === 0xC1 || next === 0xC2) {
      return extractSize(buffer, i + 5);
    }

    // move to the next block
    buffer = buffer.slice(i + 2);
  }

  throw new TypeError('Invalid JPG, no size found');
}

module.exports = {
  'detect': isJPG,
  'calculate': calculate
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pngSignature = 'PNG\r\n\x1a\n';
var pngImageHeaderChunkName = 'IHDR';
var pngFriedChunkName = 'CgBI'; // Used to detect "fried" png's: http://www.jongware.com/pngdefry.html

function isPNG (buffer) {
  if (pngSignature === buffer.toString('ascii', 1, 8)) {
    var chunkName = buffer.toString('ascii', 12, 16);
    if (chunkName === pngFriedChunkName) {
      chunkName = buffer.toString('ascii', 28, 32);
    }
    if (chunkName !== pngImageHeaderChunkName) {
      throw new TypeError('invalid png');
    }
    return true;
  }
}

function calculate (buffer) {
  if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {
    return {
      'width': buffer.readUInt32BE(32),
      'height': buffer.readUInt32BE(36)
    };
  }
  return {
    'width': buffer.readUInt32BE(16),
    'height': buffer.readUInt32BE(20)
  };
}

module.exports = {
  'detect': isPNG,
  'calculate': calculate
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isPSD (buffer) {
  return ('8BPS' === buffer.toString('ascii', 0, 4));
}

function calculate (buffer) {
  return {
    'width': buffer.readUInt32BE(18),
    'height': buffer.readUInt32BE(14)
  };
}

module.exports = {
  'detect': isPSD,
  'calculate': calculate
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var svgReg = /<svg[^>]+[^>]*>/;
function isSVG (buffer) {
  return svgReg.test(buffer);
}

var extractorRegExps = {
  'root': /<svg\s[^>]+>/,
  'width': /\bwidth=(['"])([^%]+?)\1/,
  'height': /\bheight=(['"])([^%]+?)\1/,
  'viewbox': /\bviewBox=(['"])(.+?)\1/
};

function parseViewbox (viewbox) {
  var bounds = viewbox.split(' ');
  return {
    'width': parseInt(bounds[2], 10),
    'height': parseInt(bounds[3], 10)
  };
}

function parseAttributes (root) {
  var width = root.match(extractorRegExps.width);
  var height = root.match(extractorRegExps.height);
  var viewbox = root.match(extractorRegExps.viewbox);
  return {
    'width': width && parseInt(width[2], 10),
    'height': height && parseInt(height[2], 10),
    'viewbox': viewbox && parseViewbox(viewbox[2])
  };
}

function calculateByDimensions (attrs) {
  return {
    'width': attrs.width,
    'height': attrs.height
  };
}

function calculateByViewbox (attrs) {
  var ratio = attrs.viewbox.width / attrs.viewbox.height;
  if (attrs.width) {
    return {
      'width': attrs.width,
      'height': Math.floor(attrs.width / ratio)
    };
  }
  if (attrs.height) {
    return {
      'width': Math.floor(attrs.height * ratio),
      'height': attrs.height
    };
  }
  return {
    'width': attrs.viewbox.width,
    'height': attrs.viewbox.height
  };
}

function calculate (buffer) {
  var root = buffer.toString('utf8').match(extractorRegExps.root);
  if (root) {
    var attrs = parseAttributes(root[0]);
    if (attrs.width && attrs.height) {
      return calculateByDimensions(attrs);
    }
    if (attrs.viewbox) {
      return calculateByViewbox(attrs);
    }
  }
  throw new TypeError('invalid svg');
}

module.exports = {
  'detect': isSVG,
  'calculate': calculate
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// based on http://www.compix.com/fileformattif.htm
// TO-DO: support big-endian as well

var fs = __webpack_require__(2);
var readUInt = __webpack_require__(121);

function isTIFF (buffer) {
  var hex4 = buffer.toString('hex', 0, 4);
  return ('49492a00' === hex4 || '4d4d002a' === hex4);
}

// Read IFD (image-file-directory) into a buffer
function readIFD (buffer, filepath, isBigEndian) {

  var ifdOffset = readUInt(buffer, 32, 4, isBigEndian);

  // read only till the end of the file
  var bufferSize = 1024;
  var fileSize = fs.statSync(filepath).size;
  if (ifdOffset + bufferSize > fileSize) {
    bufferSize = fileSize - ifdOffset - 10;
  }

  // populate the buffer
  var endBuffer = new Buffer(bufferSize);
  var descriptor = fs.openSync(filepath, 'r');
  fs.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);

  // var ifdLength = readUInt(endBuffer, 16, 0, isBigEndian);
  var ifdBuffer = endBuffer.slice(2); //, 2 + 12 * ifdLength);
  return ifdBuffer;
}

// TIFF values seem to be messed up on Big-Endian, this helps
function readValue (buffer, isBigEndian) {
  var low = readUInt(buffer, 16, 8, isBigEndian);
  var high = readUInt(buffer, 16, 10, isBigEndian);
  return (high << 16) + low;
}

// move to the next tag
function nextTag (buffer) {
  if (buffer.length > 24) {
    return buffer.slice(12);
  }
}

// Extract IFD tags from TIFF metadata
function extractTags (buffer, isBigEndian) {
  var tags = {};
  var code, type, length;

  while (buffer && buffer.length) {
    code = readUInt(buffer, 16, 0, isBigEndian);
    type = readUInt(buffer, 16, 2, isBigEndian);
    length = readUInt(buffer, 32, 4, isBigEndian);

    // 0 means end of IFD
    if (code === 0) {
      break;
    } else {
      // 256 is width, 257 is height
      // if (code === 256 || code === 257) {
      if (length === 1 && (type === 3 || type === 4)) {
        tags[code] = readValue(buffer, isBigEndian);
      }

      // move to the next tag
      buffer = nextTag(buffer);
    }
  }
  return tags;
}

// Test if the TIFF is Big Endian or Little Endian
function determineEndianness (buffer) {
  var signature = buffer.toString('ascii', 0, 2);
  if ('II' === signature) {
    return 'LE';
  } else if ('MM' === signature) {
    return 'BE';
  }
}

function calculate (buffer, filepath) {

  if (!filepath) {
    throw new TypeError('Tiff doesn\'t support buffer');
  }

  // Determine BE/LE
  var isBigEndian = determineEndianness(buffer) === 'BE';

  // read the IFD
  var ifdBuffer = readIFD(buffer, filepath, isBigEndian);

  // extract the tags from the IFD
  var tags = extractTags(ifdBuffer, isBigEndian);

  var width = tags[256];
  var height = tags[257];

  if (!width || !height) {
    throw new TypeError('Invalid Tiff, missing tags');
  }

  return {
    'width': width,
    'height': height
  };
}

module.exports = {
  'detect': isTIFF,
  'calculate': calculate
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// based on https://developers.google.com/speed/webp/docs/riff_container

function isWebP (buffer) {
  var riffHeader = 'RIFF' === buffer.toString('ascii', 0, 4);
  var webpHeader = 'WEBP' === buffer.toString('ascii', 8, 12);
  var vp8Header  = 'VP8'  === buffer.toString('ascii', 12, 15);
  return (riffHeader && webpHeader && vp8Header);
}

function calculate (buffer) {
  var chunkHeader = buffer.toString('ascii', 12, 16);
  buffer = buffer.slice(20, 30);

  // Extended webp stream signature
  if (chunkHeader === 'VP8X') {
    var extendedHeader = buffer[0];
    var validStart = (extendedHeader & 0xc0) === 0;
    var validEnd = (extendedHeader & 0x01) === 0;
    if (validStart && validEnd) {
      return calculateExtended(buffer);
    } else {
      return false;
    }
  }

  // Lossless webp stream signature
  if (chunkHeader === 'VP8 ' && buffer[0] !== 0x2f) {
    return calculateLossy(buffer);
  }

  // Lossy webp stream signature
  var signature = buffer.toString('hex', 3, 6);
  if (chunkHeader === 'VP8L' && signature !== '9d012a') {
    return calculateLossless(buffer);
  }

  return false;
}

function calculateExtended (buffer) {
  return {
    'width': 1 + buffer.readUIntLE(4, 3),
    'height': 1 + buffer.readUIntLE(7, 3)
  }
}

function calculateLossless (buffer) {
  return {
    'width': 1 + (((buffer[2] & 0x3F) << 8) | buffer[1]),
    'height': 1 + (((buffer[4] & 0xF) << 10) | (buffer[3] << 2) |
                  ((buffer[2] & 0xC0) >> 6))
  };
}

function calculateLossy (buffer) {
  // `& 0x3fff` returns the last 14 bits
  // TO-DO: include webp scaling in the calculations
  return {
    'width': buffer.readInt16LE(6) & 0x3fff,
    'height': buffer.readInt16LE(8) & 0x3fff
  };
}

module.exports = {
  'detect': isWebP,
  'calculate': calculate
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(5));
	else if(typeof define === 'function' && define.amd)
		define(["util"], factory);
	else if(typeof exports === 'object')
		exports["isomorphic-path"] = factory(require("util"));
	else
		root["isomorphic-path"] = factory(root["util"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __webpack_require__(1);
const platform_1 = __webpack_require__(4);
const noop_1 = __webpack_require__(3);
const unsupportedMethods = {
    resolve: noop_1.noop,
    relative: noop_1.noop,
};
const win32Runtime = path_1.win32;
exports.win32 = win32Runtime;
const posixRuntime = path_1.posix;
exports.posix = posixRuntime;
let defaultExport = { win32: win32Runtime, posix: posixRuntime };
if (platform_1.isWin()) {
    defaultExport = Object.assign({}, defaultExport, win32Runtime);
}
else {
    defaultExport = Object.assign({}, defaultExport, posixRuntime);
}
let normalizeRuntime;
exports.normalize = normalizeRuntime;
let joinRuntime;
exports.join = joinRuntime;
let resolveRuntime;
exports.resolve = resolveRuntime;
let isAbsoluteRuntime;
exports.isAbsolute = isAbsoluteRuntime;
let relativeRuntime;
exports.relative = relativeRuntime;
let dirnameRuntime;
exports.dirname = dirnameRuntime;
let basenameRuntime;
exports.basename = basenameRuntime;
let extnameRuntime;
exports.extname = extnameRuntime;
let sepRuntime;
exports.sep = sepRuntime;
let delimiterRuntime;
exports.delimiter = delimiterRuntime;
let parseRuntime;
exports.parse = parseRuntime;
let formatRuntime;
exports.format = formatRuntime;
if (platform_1.isWin()) {
    exports.normalize = normalizeRuntime = win32Runtime.normalize;
    exports.join = joinRuntime = win32Runtime.join;
    exports.resolve = resolveRuntime = win32Runtime.resolve;
    exports.isAbsolute = isAbsoluteRuntime = win32Runtime.isAbsolute;
    exports.relative = relativeRuntime = win32Runtime.relative;
    exports.dirname = dirnameRuntime = win32Runtime.dirname;
    exports.basename = basenameRuntime = win32Runtime.basename;
    exports.extname = extnameRuntime = win32Runtime.extname;
    exports.sep = sepRuntime = win32Runtime.sep;
    exports.delimiter = delimiterRuntime = win32Runtime.delimiter;
    exports.parse = parseRuntime = win32Runtime.parse;
    exports.format = formatRuntime = win32Runtime.format;
}
else {
    exports.normalize = normalizeRuntime = posixRuntime.normalize;
    exports.join = joinRuntime = posixRuntime.join;
    exports.resolve = resolveRuntime = posixRuntime.resolve;
    exports.isAbsolute = isAbsoluteRuntime = posixRuntime.isAbsolute;
    exports.relative = relativeRuntime = posixRuntime.relative;
    exports.dirname = dirnameRuntime = posixRuntime.dirname;
    exports.basename = basenameRuntime = posixRuntime.basename;
    exports.extname = extnameRuntime = posixRuntime.extname;
    exports.sep = sepRuntime = posixRuntime.sep;
    exports.delimiter = delimiterRuntime = posixRuntime.delimiter;
    exports.parse = parseRuntime = posixRuntime.parse;
    exports.format = formatRuntime = posixRuntime.format;
}
exports.default = defaultExport;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.




var isWindows = process.platform === 'win32';
var util = __webpack_require__(5);


// resolves . and .. elements in a path array with directory names there
// must be no slashes or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  var res = [];
  for (var i = 0; i < parts.length; i++) {
    var p = parts[i];

    // ignore empty parts
    if (!p || p === '.')
      continue;

    if (p === '..') {
      if (res.length && res[res.length - 1] !== '..') {
        res.pop();
      } else if (allowAboveRoot) {
        res.push('..');
      }
    } else {
      res.push(p);
    }
  }

  return res;
}

// returns an array with empty elements removed from either end of the input
// array or the original array if no elements need to be removed
function trimArray(arr) {
  var lastIndex = arr.length - 1;
  var start = 0;
  for (; start <= lastIndex; start++) {
    if (arr[start])
      break;
  }

  var end = lastIndex;
  for (; end >= 0; end--) {
    if (arr[end])
      break;
  }

  if (start === 0 && end === lastIndex)
    return arr;
  if (start > end)
    return [];
  return arr.slice(start, end + 1);
}

// Regex to split a windows path into three parts: [*, device, slash,
// tail] windows-only
var splitDeviceRe =
    /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

// Regex to split the tail part of the above into [*, dir, basename, ext]
var splitTailRe =
    /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

var win32 = {};

// Function to split a filename into [root, dir, basename, ext]
function win32SplitPath(filename) {
  // Separate device+slash from tail
  var result = splitDeviceRe.exec(filename),
      device = (result[1] || '') + (result[2] || ''),
      tail = result[3] || '';
  // Split the tail into dir, basename and extension
  var result2 = splitTailRe.exec(tail),
      dir = result2[1],
      basename = result2[2],
      ext = result2[3];
  return [device, dir, basename, ext];
}

function win32StatPath(path) {
  var result = splitDeviceRe.exec(path),
      device = result[1] || '',
      isUnc = !!device && device[1] !== ':';
  return {
    device: device,
    isUnc: isUnc,
    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute
    tail: result[3]
  };
}

function normalizeUNCRoot(device) {
  return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
}

// path.resolve([from ...], to)
win32.resolve = function() {
  var resolvedDevice = '',
      resolvedTail = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1; i--) {
    var path;
    if (i >= 0) {
      path = arguments[i];
    } else if (!resolvedDevice) {
      path = process.cwd();
    } else {
      // Windows has the concept of drive-specific current working
      // directories. If we've resolved a drive letter but not yet an
      // absolute path, get cwd for that drive. We're sure the device is not
      // an unc path at this points, because unc paths are always absolute.
      path = process.env['=' + resolvedDevice];
      // Verify that a drive-local cwd was found and that it actually points
      // to our drive. If not, default to the drive's root.
      if (!path || path.substr(0, 3).toLowerCase() !==
          resolvedDevice.toLowerCase() + '\\') {
        path = resolvedDevice + '\\';
      }
    }

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    var result = win32StatPath(path),
        device = result.device,
        isUnc = result.isUnc,
        isAbsolute = result.isAbsolute,
        tail = result.tail;

    if (device &&
        resolvedDevice &&
        device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      // This path points to another device so it is not applicable
      continue;
    }

    if (!resolvedDevice) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = tail + '\\' + resolvedTail;
      resolvedAbsolute = isAbsolute;
    }

    if (resolvedDevice && resolvedAbsolute) {
      break;
    }
  }

  // Convert slashes to backslashes when `resolvedDevice` points to an UNC
  // root. Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    resolvedDevice = normalizeUNCRoot(resolvedDevice);
  }

  // At this point the path should be resolved to a full absolute path,
  // but handle relative paths to be safe (might happen when process.cwd()
  // fails)

  // Normalize the tail path
  resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/),
                                !resolvedAbsolute).join('\\');

  return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
         '.';
};


win32.normalize = function(path) {
  var result = win32StatPath(path),
      device = result.device,
      isUnc = result.isUnc,
      isAbsolute = result.isAbsolute,
      tail = result.tail,
      trailingSlash = /[\\\/]$/.test(tail);

  // Normalize the tail path
  tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');

  if (!tail && !isAbsolute) {
    tail = '.';
  }
  if (tail && trailingSlash) {
    tail += '\\';
  }

  // Convert slashes to backslashes when `device` points to an UNC root.
  // Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    device = normalizeUNCRoot(device);
  }

  return device + (isAbsolute ? '\\' : '') + tail;
};


win32.isAbsolute = function(path) {
  return win32StatPath(path).isAbsolute;
};

win32.join = function() {
  var paths = [];
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (!util.isString(arg)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (arg) {
      paths.push(arg);
    }
  }

  var joined = paths.join('\\');

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\')
  if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
    joined = joined.replace(/^[\\\/]{2,}/, '\\');
  }

  return win32.normalize(joined);
};


// path.relative(from, to)
// it will solve the relative path from 'from' to 'to', for instance:
// from = 'C:\\orandea\\test\\aaa'
// to = 'C:\\orandea\\impl\\bbb'
// The output of the function should be: '..\\..\\impl\\bbb'
win32.relative = function(from, to) {
  from = win32.resolve(from);
  to = win32.resolve(to);

  // windows is not case sensitive
  var lowerFrom = from.toLowerCase();
  var lowerTo = to.toLowerCase();

  var toParts = trimArray(to.split('\\'));

  var lowerFromParts = trimArray(lowerFrom.split('\\'));
  var lowerToParts = trimArray(lowerTo.split('\\'));

  var length = Math.min(lowerFromParts.length, lowerToParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (lowerFromParts[i] !== lowerToParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  if (samePartsLength == 0) {
    return to;
  }

  var outputParts = [];
  for (var i = samePartsLength; i < lowerFromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('\\');
};


win32._makeLong = function(path) {
  // Note: this will *probably* throw somewhere.
  if (!util.isString(path))
    return path;

  if (!path) {
    return '';
  }

  var resolvedPath = win32.resolve(path);

  if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
    // path is local filesystem path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\' + resolvedPath;
  } else if (/^\\\\[^?.]/.test(resolvedPath)) {
    // path is network UNC path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\UNC\\' + resolvedPath.substring(2);
  }

  return path;
};


win32.dirname = function(path) {
  var result = win32SplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


win32.basename = function(path, ext) {
  var f = win32SplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


win32.extname = function(path) {
  return win32SplitPath(path)[3];
};


win32.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir;
  var base = pathObject.base || '';
  if (!dir) {
    return base;
  }
  if (dir[dir.length - 1] === win32.sep) {
    return dir + base;
  }
  return dir + win32.sep + base;
};


win32.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = win32SplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


win32.sep = '\\';
win32.delimiter = ';';


// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var posix = {};


function posixSplitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}


// path.resolve([from ...], to)
// posix version
posix.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path[0] === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(resolvedPath.split('/'),
                                !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
posix.normalize = function(path) {
  var isAbsolute = posix.isAbsolute(path),
      trailingSlash = path && path[path.length - 1] === '/';

  // Normalize the path
  path = normalizeArray(path.split('/'), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
posix.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
posix.join = function() {
  var path = '';
  for (var i = 0; i < arguments.length; i++) {
    var segment = arguments[i];
    if (!util.isString(segment)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (segment) {
      if (!path) {
        path += segment;
      } else {
        path += '/' + segment;
      }
    }
  }
  return posix.normalize(path);
};


// path.relative(from, to)
// posix version
posix.relative = function(from, to) {
  from = posix.resolve(from).substr(1);
  to = posix.resolve(to).substr(1);

  var fromParts = trimArray(from.split('/'));
  var toParts = trimArray(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};


posix._makeLong = function(path) {
  return path;
};


posix.dirname = function(path) {
  var result = posixSplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


posix.basename = function(path, ext) {
  var f = posixSplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


posix.extname = function(path) {
  return posixSplitPath(path)[3];
};


posix.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
  var base = pathObject.base || '';
  return dir + base;
};


posix.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = posixSplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  allParts[1] = allParts[1] || '';
  allParts[2] = allParts[2] || '';
  allParts[3] = allParts[3] || '';

  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


posix.sep = '/';
posix.delimiter = ':';


if (isWindows)
  module.exports = win32;
else /* posix */
  module.exports = posix;

module.exports.posix = posix;
module.exports.win32 = win32;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(0));


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.noop = (from, to) => {
    throw Error('method unsupported in isomorphic-path');
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.isMac = () => {
    if (process
        && typeof process.platform === 'string'
        && process.platform.toLowerCase() === 'darwin') {
        return true;
    }
    else if (typeof navigator !== 'undefined'
        && typeof navigator.platform === 'string'
        && navigator.platform.toLowerCase().indexOf('mac') > -1) {
        return true;
    }
    else {
        return false;
    }
};
exports.isWin = () => {
    if (process
        && typeof process.platform === 'string'
        && process.platform.toLowerCase() === 'win32') {
        return true;
    }
    else if (typeof navigator !== 'undefined'
        && typeof navigator.platform === 'string'
        && navigator.platform.toLowerCase().indexOf('win') > -1) {
        return true;
    }
    else {
        return false;
    }
};
exports.isBrowser = () => {
    return typeof window !== 'undefined';
};
exports.isNode = () => {
    return typeof window === 'undefined' && typeof process !== 'undefined';
};


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(5);

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var encode = __webpack_require__(127),
    decode = __webpack_require__(126);

module.exports = {
  encode: encode,
  decode: decode
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const PNG = __webpack_require__(60).PNG;

module.exports = (buf, opts) => {
	if (!Buffer.isBuffer(buf)) {
		return Promise.reject(new TypeError('Expected a buffer'));
	}

	return new Promise((resolve, reject) => {
		let png = new PNG(opts);

		png.on('metadata', data => {
			png = Object.assign(png, data);
		});

		png.on('error', reject);
		png.on('parsed', () => resolve(png));

		png.end(buf);
	});
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var interlaceUtils = __webpack_require__(56);

var pixelBppMapper = [
  // 0 - dummy entry
  function() {},

  // 1 - L
  // 0: 0, 1: 0, 2: 0, 3: 0xff
  function(pxData, data, pxPos, rawPos) {
    if (rawPos === data.length) {
      throw new Error('Ran out of data');
    }

    var pixel = data[rawPos];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = 0xff;
  },

  // 2 - LA
  // 0: 0, 1: 0, 2: 0, 3: 1
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 1 >= data.length) {
      throw new Error('Ran out of data');
    }

    var pixel = data[rawPos];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = data[rawPos + 1];
  },

  // 3 - RGB
  // 0: 0, 1: 1, 2: 2, 3: 0xff
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 2 >= data.length) {
      throw new Error('Ran out of data');
    }

    pxData[pxPos] = data[rawPos];
    pxData[pxPos + 1] = data[rawPos + 1];
    pxData[pxPos + 2] = data[rawPos + 2];
    pxData[pxPos + 3] = 0xff;
  },

  // 4 - RGBA
  // 0: 0, 1: 1, 2: 2, 3: 3
  function(pxData, data, pxPos, rawPos) {
    if (rawPos + 3 >= data.length) {
      throw new Error('Ran out of data');
    }

    pxData[pxPos] = data[rawPos];
    pxData[pxPos + 1] = data[rawPos + 1];
    pxData[pxPos + 2] = data[rawPos + 2];
    pxData[pxPos + 3] = data[rawPos + 3];
  }
];

var pixelBppCustomMapper = [
  // 0 - dummy entry
  function() {},

  // 1 - L
  // 0: 0, 1: 0, 2: 0, 3: 0xff
  function(pxData, pixelData, pxPos, maxBit) {
    var pixel = pixelData[0];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = maxBit;
  },

  // 2 - LA
  // 0: 0, 1: 0, 2: 0, 3: 1
  function(pxData, pixelData, pxPos) {
    var pixel = pixelData[0];
    pxData[pxPos] = pixel;
    pxData[pxPos + 1] = pixel;
    pxData[pxPos + 2] = pixel;
    pxData[pxPos + 3] = pixelData[1];
  },

  // 3 - RGB
  // 0: 0, 1: 1, 2: 2, 3: 0xff
  function(pxData, pixelData, pxPos, maxBit) {
    pxData[pxPos] = pixelData[0];
    pxData[pxPos + 1] = pixelData[1];
    pxData[pxPos + 2] = pixelData[2];
    pxData[pxPos + 3] = maxBit;
  },

  // 4 - RGBA
  // 0: 0, 1: 1, 2: 2, 3: 3
  function(pxData, pixelData, pxPos) {
    pxData[pxPos] = pixelData[0];
    pxData[pxPos + 1] = pixelData[1];
    pxData[pxPos + 2] = pixelData[2];
    pxData[pxPos + 3] = pixelData[3];
  }
];

function bitRetriever(data, depth) {

  var leftOver = [];
  var i = 0;

  function split() {
    if (i === data.length) {
      throw new Error('Ran out of data');
    }
    var byte = data[i];
    i++;
    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;
    switch (depth) {
      default:
        throw new Error('unrecognised depth');
      case 16:
        byte2 = data[i];
        i++;
        leftOver.push(((byte << 8) + byte2));
        break;
      case 4:
        byte2 = byte & 0x0f;
        byte1 = byte >> 4;
        leftOver.push(byte1, byte2);
        break;
      case 2:
        byte4 = byte & 3;
        byte3 = byte >> 2 & 3;
        byte2 = byte >> 4 & 3;
        byte1 = byte >> 6 & 3;
        leftOver.push(byte1, byte2, byte3, byte4);
        break;
      case 1:
        byte8 = byte & 1;
        byte7 = byte >> 1 & 1;
        byte6 = byte >> 2 & 1;
        byte5 = byte >> 3 & 1;
        byte4 = byte >> 4 & 1;
        byte3 = byte >> 5 & 1;
        byte2 = byte >> 6 & 1;
        byte1 = byte >> 7 & 1;
        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
        break;
    }
  }

  return {
    get: function(count) {
      while (leftOver.length < count) {
        split();
      }
      var returner = leftOver.slice(0, count);
      leftOver = leftOver.slice(count);
      return returner;
    },
    resetAfterLine: function() {
      leftOver.length = 0;
    },
    end: function() {
      if (i !== data.length) {
        throw new Error('extra data found');
      }
    }
  };
}

function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) { // eslint-disable-line max-params
  var imageWidth = image.width;
  var imageHeight = image.height;
  var imagePass = image.index;
  for (var y = 0; y < imageHeight; y++) {
    for (var x = 0; x < imageWidth; x++) {
      var pxPos = getPxPos(x, y, imagePass);
      pixelBppMapper[bpp](pxData, data, pxPos, rawPos);
      rawPos += bpp; //eslint-disable-line no-param-reassign
    }
  }
  return rawPos;
}

function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) { // eslint-disable-line max-params
  var imageWidth = image.width;
  var imageHeight = image.height;
  var imagePass = image.index;
  for (var y = 0; y < imageHeight; y++) {
    for (var x = 0; x < imageWidth; x++) {
      var pixelData = bits.get(bpp);
      var pxPos = getPxPos(x, y, imagePass);
      pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);
    }
    bits.resetAfterLine();
  }
}

exports.dataToBitMap = function(data, bitmapInfo) {

  var width = bitmapInfo.width;
  var height = bitmapInfo.height;
  var depth = bitmapInfo.depth;
  var bpp = bitmapInfo.bpp;
  var interlace = bitmapInfo.interlace;

  if (depth !== 8) {
    var bits = bitRetriever(data, depth);
  }
  var pxData;
  if (depth <= 8) {
    pxData = new Buffer(width * height * 4);
  }
  else {
    pxData = new Uint16Array(width * height * 4);
  }
  var maxBit = Math.pow(2, depth) - 1;
  var rawPos = 0;
  var images;
  var getPxPos;

  if (interlace) {
    images = interlaceUtils.getImagePasses(width, height);
    getPxPos = interlaceUtils.getInterlaceIterator(width, height);
  }
  else {
    var nonInterlacedPxPos = 0;
    getPxPos = function() {
      var returner = nonInterlacedPxPos;
      nonInterlacedPxPos += 4;
      return returner;
    };
    images = [{ width: width, height: height }];
  }

  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {
    if (depth === 8) {
      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
    }
    else {
      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
    }
  }
  if (depth === 8) {
    if (rawPos !== data.length) {
      throw new Error('extra data found');
    }
  }
  else {
    bits.end();
  }

  return pxData;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var util = __webpack_require__(5);
var Stream = __webpack_require__(8);


var ChunkStream = module.exports = function() {
  Stream.call(this);

  this._buffers = [];
  this._buffered = 0;

  this._reads = [];
  this._paused = false;

  this._encoding = 'utf8';
  this.writable = true;
};
util.inherits(ChunkStream, Stream);


ChunkStream.prototype.read = function(length, callback) {

  this._reads.push({
    length: Math.abs(length), // if length < 0 then at most this length
    allowLess: length < 0,
    func: callback
  });

  process.nextTick(function() {
    this._process();

    // its paused and there is not enought data then ask for more
    if (this._paused && this._reads.length > 0) {
      this._paused = false;

      this.emit('drain');
    }
  }.bind(this));
};

ChunkStream.prototype.write = function(data, encoding) {

  if (!this.writable) {
    this.emit('error', new Error('Stream not writable'));
    return false;
  }

  var dataBuffer;
  if (Buffer.isBuffer(data)) {
    dataBuffer = data;
  }
  else {
    dataBuffer = new Buffer(data, encoding || this._encoding);
  }

  this._buffers.push(dataBuffer);
  this._buffered += dataBuffer.length;

  this._process();

  // ok if there are no more read requests
  if (this._reads && this._reads.length === 0) {
    this._paused = true;
  }

  return this.writable && !this._paused;
};

ChunkStream.prototype.end = function(data, encoding) {

  if (data) {
    this.write(data, encoding);
  }

  this.writable = false;

  // already destroyed
  if (!this._buffers) {
    return;
  }

  // enqueue or handle end
  if (this._buffers.length === 0) {
    this._end();
  }
  else {
    this._buffers.push(null);
    this._process();
  }
};

ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;

ChunkStream.prototype._end = function() {

  if (this._reads.length > 0) {
    this.emit('error',
      new Error('Unexpected end of input')
    );
  }

  this.destroy();
};

ChunkStream.prototype.destroy = function() {

  if (!this._buffers) {
    return;
  }

  this.writable = false;
  this._reads = null;
  this._buffers = null;

  this.emit('close');
};

ChunkStream.prototype._processReadAllowingLess = function(read) {
  // ok there is any data so that we can satisfy this request
  this._reads.shift(); // == read

  // first we need to peek into first buffer
  var smallerBuf = this._buffers[0];

  // ok there is more data than we need
  if (smallerBuf.length > read.length) {

    this._buffered -= read.length;
    this._buffers[0] = smallerBuf.slice(read.length);

    read.func.call(this, smallerBuf.slice(0, read.length));

  }
  else {
    // ok this is less than maximum length so use it all
    this._buffered -= smallerBuf.length;
    this._buffers.shift(); // == smallerBuf

    read.func.call(this, smallerBuf);
  }
};

ChunkStream.prototype._processRead = function(read) {
  this._reads.shift(); // == read

  var pos = 0;
  var count = 0;
  var data = new Buffer(read.length);

  // create buffer for all data
  while (pos < read.length) {

    var buf = this._buffers[count++];
    var len = Math.min(buf.length, read.length - pos);

    buf.copy(data, pos, 0, len);
    pos += len;

    // last buffer wasn't used all so just slice it and leave
    if (len !== buf.length) {
      this._buffers[--count] = buf.slice(len);
    }
  }

  // remove all used buffers
  if (count > 0) {
    this._buffers.splice(0, count);
  }

  this._buffered -= read.length;

  read.func.call(this, data);
};

ChunkStream.prototype._process = function() {

  try {
    // as long as there is any data and read requests
    while (this._buffered > 0 && this._reads && this._reads.length > 0) {

      var read = this._reads[0];

      // read any data (but no more than length)
      if (read.allowLess) {
        this._processReadAllowingLess(read);

      }
      else if (this._buffered >= read.length) {
        // ok we can meet some expectations

        this._processRead(read);
      }
      else {
        // not enought data to satisfy first request in queue
        // so we need to wait for more
        break;
      }
    }

    if (this._buffers && !this.writable) {
      this._end();
    }
  }
  catch (ex) {
    this.emit('error', ex);
  }
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var crcTable = [];

(function() {
  for (var i = 0; i < 256; i++) {
    var currentCrc = i;
    for (var j = 0; j < 8; j++) {
      if (currentCrc & 1) {
        currentCrc = 0xedb88320 ^ (currentCrc >>> 1);
      }
      else {
        currentCrc = currentCrc >>> 1;
      }
    }
    crcTable[i] = currentCrc;
  }
}());

var CrcCalculator = module.exports = function() {
  this._crc = -1;
};

CrcCalculator.prototype.write = function(data) {

  for (var i = 0; i < data.length; i++) {
    this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ (this._crc >>> 8);
  }
  return true;
};

CrcCalculator.prototype.crc32 = function() {
  return this._crc ^ -1;
};


CrcCalculator.crc32 = function(buf) {

  var crc = -1;
  for (var i = 0; i < buf.length; i++) {
    crc = crcTable[(crc ^ buf[i]) & 0xff] ^ (crc >>> 8);
  }
  return crc ^ -1;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var interlaceUtils = __webpack_require__(56);
var paethPredictor = __webpack_require__(58);

function getByteWidth(width, bpp, depth) {
  var byteWidth = width * bpp;
  if (depth !== 8) {
    byteWidth = Math.ceil(byteWidth / (8 / depth));
  }
  return byteWidth;
}

var Filter = module.exports = function(bitmapInfo, dependencies) {

  var width = bitmapInfo.width;
  var height = bitmapInfo.height;
  var interlace = bitmapInfo.interlace;
  var bpp = bitmapInfo.bpp;
  var depth = bitmapInfo.depth;

  this.read = dependencies.read;
  this.write = dependencies.write;
  this.complete = dependencies.complete;

  this._imageIndex = 0;
  this._images = [];
  if (interlace) {
    var passes = interlaceUtils.getImagePasses(width, height);
    for (var i = 0; i < passes.length; i++) {
      this._images.push({
        byteWidth: getByteWidth(passes[i].width, bpp, depth),
        height: passes[i].height,
        lineIndex: 0
      });
    }
  }
  else {
    this._images.push({
      byteWidth: getByteWidth(width, bpp, depth),
      height: height,
      lineIndex: 0
    });
  }

  // when filtering the line we look at the pixel to the left
  // the spec also says it is done on a byte level regardless of the number of pixels
  // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
  // a pixel rather than just a different byte part. However if we are sub byte, we ignore.
  if (depth === 8) {
    this._xComparison = bpp;
  }
  else if (depth === 16) {
    this._xComparison = bpp * 2;
  }
  else {
    this._xComparison = 1;
  }
};

Filter.prototype.start = function() {
  this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
};

Filter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    unfilteredLine[x] = rawByte + f1Left;
  }
};

Filter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {

  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f2Up = lastLine ? lastLine[x] : 0;
    unfilteredLine[x] = rawByte + f2Up;
  }
};

Filter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;
  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f3Up = lastLine ? lastLine[x] : 0;
    var f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    var f3Add = Math.floor((f3Left + f3Up) / 2);
    unfilteredLine[x] = rawByte + f3Add;
  }
};

Filter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {

  var xComparison = this._xComparison;
  var xBiggerThan = xComparison - 1;
  var lastLine = this._lastLine;

  for (var x = 0; x < byteWidth; x++) {
    var rawByte = rawData[1 + x];
    var f4Up = lastLine ? lastLine[x] : 0;
    var f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
    var f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
    var f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
    unfilteredLine[x] = rawByte + f4Add;
  }
};

Filter.prototype._reverseFilterLine = function(rawData) {

  var filter = rawData[0];
  var unfilteredLine;
  var currentImage = this._images[this._imageIndex];
  var byteWidth = currentImage.byteWidth;

  if (filter === 0) {
    unfilteredLine = rawData.slice(1, byteWidth + 1);
  }
  else {

    unfilteredLine = new Buffer(byteWidth);

    switch (filter) {
      case 1:
        this._unFilterType1(rawData, unfilteredLine, byteWidth);
        break;
      case 2:
        this._unFilterType2(rawData, unfilteredLine, byteWidth);
        break;
      case 3:
        this._unFilterType3(rawData, unfilteredLine, byteWidth);
        break;
      case 4:
        this._unFilterType4(rawData, unfilteredLine, byteWidth);
        break;
      default:
        throw new Error('Unrecognised filter type - ' + filter);
    }
  }

  this.write(unfilteredLine);

  currentImage.lineIndex++;
  if (currentImage.lineIndex >= currentImage.height) {
    this._lastLine = null;
    this._imageIndex++;
    currentImage = this._images[this._imageIndex];
  }
  else {
    this._lastLine = unfilteredLine;
  }

  if (currentImage) {
    // read, using the byte width that may be from the new current image
    this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
  }
  else {
    this._lastLine = null;
    this.complete();
  }
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function dePalette(indata, outdata, width, height, palette) {
  var pxPos = 0;
  // use values from palette
  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var color = palette[indata[pxPos]];

      if (!color) {
        throw new Error('index ' + indata[pxPos] + ' not in palette');
      }

      for (var i = 0; i < 4; i++) {
        outdata[pxPos + i] = color[i];
      }
      pxPos += 4;
    }
  }
}

function replaceTransparentColor(indata, outdata, width, height, transColor) {
  var pxPos = 0;
  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var makeTrans = false;

      if (transColor.length === 1) {
        if (transColor[0] === indata[pxPos]) {
          makeTrans = true;
        }
      }
      else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
        makeTrans = true;
      }
      if (makeTrans) {
        for (var i = 0; i < 4; i++) {
          outdata[pxPos + i] = 0;
        }
      }
      pxPos += 4;
    }
  }
}

function scaleDepth(indata, outdata, width, height, depth) {
  var maxOutSample = 255;
  var maxInSample = Math.pow(2, depth) - 1;
  var pxPos = 0;

  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      for (var i = 0; i < 4; i++) {
        outdata[pxPos + i] = Math.floor((indata[pxPos + i] * maxOutSample) / maxInSample + 0.5);
      }
      pxPos += 4;
    }
  }
}

module.exports = function(indata, imageData) {

  var depth = imageData.depth;
  var width = imageData.width;
  var height = imageData.height;
  var colorType = imageData.colorType;
  var transColor = imageData.transColor;
  var palette = imageData.palette;

  var outdata = indata; // only different for 16 bits

  if (colorType === 3) { // paletted
    dePalette(indata, outdata, width, height, palette);
  }
  else {
    if (transColor) {
      replaceTransparentColor(indata, outdata, width, height, transColor);
    }
    // if it needs scaling
    if (depth !== 8) {
      // if we need to change the buffer size
      if (depth === 16) {
        outdata = new Buffer(width * height * 4);
      }
      scaleDepth(indata, outdata, width, height, depth);
    }
  }
  return outdata;
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Adam 7
//   0 1 2 3 4 5 6 7
// 0 x 6 4 6 x 6 4 6
// 1 7 7 7 7 7 7 7 7
// 2 5 6 5 6 5 6 5 6
// 3 7 7 7 7 7 7 7 7
// 4 3 6 4 6 3 6 4 6
// 5 7 7 7 7 7 7 7 7
// 6 5 6 5 6 5 6 5 6
// 7 7 7 7 7 7 7 7 7


var imagePasses = [
  { // pass 1 - 1px
    x: [0],
    y: [0]
  },
  { // pass 2 - 1px
    x: [4],
    y: [0]
  },
  { // pass 3 - 2px
    x: [0, 4],
    y: [4]
  },
  { // pass 4 - 4px
    x: [2, 6],
    y: [0, 4]
  },
  { // pass 5 - 8px
    x: [0, 2, 4, 6],
    y: [2, 6]
  },
  { // pass 6 - 16px
    x: [1, 3, 5, 7],
    y: [0, 2, 4, 6]
  },
  { // pass 7 - 32px
    x: [0, 1, 2, 3, 4, 5, 6, 7],
    y: [1, 3, 5, 7]
  }
];

exports.getImagePasses = function(width, height) {
  var images = [];
  var xLeftOver = width % 8;
  var yLeftOver = height % 8;
  var xRepeats = (width - xLeftOver) / 8;
  var yRepeats = (height - yLeftOver) / 8;
  for (var i = 0; i < imagePasses.length; i++) {
    var pass = imagePasses[i];
    var passWidth = xRepeats * pass.x.length;
    var passHeight = yRepeats * pass.y.length;
    for (var j = 0; j < pass.x.length; j++) {
      if (pass.x[j] < xLeftOver) {
        passWidth++;
      }
      else {
        break;
      }
    }
    for (j = 0; j < pass.y.length; j++) {
      if (pass.y[j] < yLeftOver) {
        passHeight++;
      }
      else {
        break;
      }
    }
    if (passWidth > 0 && passHeight > 0) {
      images.push({ width: passWidth, height: passHeight, index: i });
    }
  }
  return images;
};

exports.getInterlaceIterator = function(width) {
  return function(x, y, pass) {
    var outerXLeftOver = x % imagePasses[pass].x.length;
    var outerX = (((x - outerXLeftOver) / imagePasses[pass].x.length) * 8) + imagePasses[pass].x[outerXLeftOver];
    var outerYLeftOver = y % imagePasses[pass].y.length;
    var outerY = (((y - outerYLeftOver) / imagePasses[pass].y.length) * 8) + imagePasses[pass].y[outerYLeftOver];
    return (outerX * 4) + (outerY * width * 4);
  };
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = __webpack_require__(9);
var CrcStream = __webpack_require__(53);
var bitPacker = __webpack_require__(134);
var filter = __webpack_require__(135);
var zlib = __webpack_require__(10);

var Packer = module.exports = function(options) {
  this._options = options;

  options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
  options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
  options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
  options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
  options.deflateFactory = options.deflateFactory || zlib.createDeflate;
  options.bitDepth = options.bitDepth || 8;
  // This is outputColorType
  options.colorType = (typeof options.colorType === 'number') ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
  options.inputColorType = (typeof options.inputColorType === 'number') ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;

  if ([
    constants.COLORTYPE_GRAYSCALE,
    constants.COLORTYPE_COLOR,
    constants.COLORTYPE_COLOR_ALPHA,
    constants.COLORTYPE_ALPHA
  ].indexOf(options.colorType) === -1) {
    throw new Error('option color type:' + options.colorType + ' is not supported at present');
  }
  if ([
    constants.COLORTYPE_GRAYSCALE,
    constants.COLORTYPE_COLOR,
    constants.COLORTYPE_COLOR_ALPHA,
    constants.COLORTYPE_ALPHA
  ].indexOf(options.inputColorType) === -1) {
    throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
  }
  if (options.bitDepth !== 8 && options.bitDepth !== 16) {
    throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
  }
};

Packer.prototype.getDeflateOptions = function() {
  return {
    chunkSize: this._options.deflateChunkSize,
    level: this._options.deflateLevel,
    strategy: this._options.deflateStrategy
  };
};

Packer.prototype.createDeflate = function() {
  return this._options.deflateFactory(this.getDeflateOptions());
};

Packer.prototype.filterData = function(data, width, height) {
  // convert to correct format for filtering (e.g. right bpp and bit depth)
  var packedData = bitPacker(data, width, height, this._options);

  // filter pixel data
  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
  var filteredData = filter(packedData, width, height, this._options, bpp);
  return filteredData;
};

Packer.prototype._packChunk = function(type, data) {

  var len = (data ? data.length : 0);
  var buf = new Buffer(len + 12);

  buf.writeUInt32BE(len, 0);
  buf.writeUInt32BE(type, 4);

  if (data) {
    data.copy(buf, 8);
  }

  buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
  return buf;
};

Packer.prototype.packGAMA = function(gamma) {
  var buf = new Buffer(4);
  buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
  return this._packChunk(constants.TYPE_gAMA, buf);
};

Packer.prototype.packIHDR = function(width, height) {

  var buf = new Buffer(13);
  buf.writeUInt32BE(width, 0);
  buf.writeUInt32BE(height, 4);
  buf[8] = this._options.bitDepth; // Bit depth
  buf[9] = this._options.colorType; // colorType
  buf[10] = 0; // compression
  buf[11] = 0; // filter
  buf[12] = 0; // interlace

  return this._packChunk(constants.TYPE_IHDR, buf);
};

Packer.prototype.packIDAT = function(data) {
  return this._packChunk(constants.TYPE_IDAT, data);
};

Packer.prototype.packIEND = function() {
  return this._packChunk(constants.TYPE_IEND, null);
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function paethPredictor(left, above, upLeft) {

  var paeth = left + above - upLeft;
  var pLeft = Math.abs(paeth - left);
  var pAbove = Math.abs(paeth - above);
  var pUpLeft = Math.abs(paeth - upLeft);

  if (pLeft <= pAbove && pLeft <= pUpLeft) {
    return left;
  }
  if (pAbove <= pUpLeft) {
    return above;
  }
  return upLeft;
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = __webpack_require__(9);
var CrcCalculator = __webpack_require__(53);


var Parser = module.exports = function(options, dependencies) {

  this._options = options;
  options.checkCRC = options.checkCRC !== false;

  this._hasIHDR = false;
  this._hasIEND = false;
  this._emittedHeadersFinished = false;

  // input flags/metadata
  this._palette = [];
  this._colorType = 0;

  this._chunks = {};
  this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
  this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
  this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
  this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
  this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
  this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);

  this.read = dependencies.read;
  this.error = dependencies.error;
  this.metadata = dependencies.metadata;
  this.gamma = dependencies.gamma;
  this.transColor = dependencies.transColor;
  this.palette = dependencies.palette;
  this.parsed = dependencies.parsed;
  this.inflateData = dependencies.inflateData;
  this.finished = dependencies.finished;
  this.simpleTransparency = dependencies.simpleTransparency;
  this.headersFinished = dependencies.headersFinished || function() {};
};

Parser.prototype.start = function() {
  this.read(constants.PNG_SIGNATURE.length,
    this._parseSignature.bind(this)
  );
};

Parser.prototype._parseSignature = function(data) {

  var signature = constants.PNG_SIGNATURE;

  for (var i = 0; i < signature.length; i++) {
    if (data[i] !== signature[i]) {
      this.error(new Error('Invalid file signature'));
      return;
    }
  }
  this.read(8, this._parseChunkBegin.bind(this));
};

Parser.prototype._parseChunkBegin = function(data) {

  // chunk content length
  var length = data.readUInt32BE(0);

  // chunk type
  var type = data.readUInt32BE(4);
  var name = '';
  for (var i = 4; i < 8; i++) {
    name += String.fromCharCode(data[i]);
  }

  //console.log('chunk ', name, length);

  // chunk flags
  var ancillary = Boolean(data[4] & 0x20); // or critical
  //    priv = Boolean(data[5] & 0x20), // or public
  //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

  if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
    this.error(new Error('Expected IHDR on beggining'));
    return;
  }

  this._crc = new CrcCalculator();
  this._crc.write(new Buffer(name));

  if (this._chunks[type]) {
    return this._chunks[type](length);
  }

  if (!ancillary) {
    this.error(new Error('Unsupported critical chunk type ' + name));
    return;
  }

  this.read(length + 4, this._skipChunk.bind(this));
};

Parser.prototype._skipChunk = function(/*data*/) {
  this.read(8, this._parseChunkBegin.bind(this));
};

Parser.prototype._handleChunkEnd = function() {
  this.read(4, this._parseChunkEnd.bind(this));
};

Parser.prototype._parseChunkEnd = function(data) {

  var fileCrc = data.readInt32BE(0);
  var calcCrc = this._crc.crc32();

  // check CRC
  if (this._options.checkCRC && calcCrc !== fileCrc) {
    this.error(new Error('Crc error - ' + fileCrc + ' - ' + calcCrc));
    return;
  }

  if (!this._hasIEND) {
    this.read(8, this._parseChunkBegin.bind(this));
  }
};

Parser.prototype._handleIHDR = function(length) {
  this.read(length, this._parseIHDR.bind(this));
};
Parser.prototype._parseIHDR = function(data) {

  this._crc.write(data);

  var width = data.readUInt32BE(0);
  var height = data.readUInt32BE(4);
  var depth = data[8];
  var colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha
  var compr = data[10];
  var filter = data[11];
  var interlace = data[12];

  // console.log('    width', width, 'height', height,
  //     'depth', depth, 'colorType', colorType,
  //     'compr', compr, 'filter', filter, 'interlace', interlace
  // );

  if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
    this.error(new Error('Unsupported bit depth ' + depth));
    return;
  }
  if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
    this.error(new Error('Unsupported color type'));
    return;
  }
  if (compr !== 0) {
    this.error(new Error('Unsupported compression method'));
    return;
  }
  if (filter !== 0) {
    this.error(new Error('Unsupported filter method'));
    return;
  }
  if (interlace !== 0 && interlace !== 1) {
    this.error(new Error('Unsupported interlace method'));
    return;
  }

  this._colorType = colorType;

  var bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];

  this._hasIHDR = true;

  this.metadata({
    width: width,
    height: height,
    depth: depth,
    interlace: Boolean(interlace),
    palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
    color: Boolean(colorType & constants.COLORTYPE_COLOR),
    alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
    bpp: bpp,
    colorType: colorType
  });

  this._handleChunkEnd();
};


Parser.prototype._handlePLTE = function(length) {
  this.read(length, this._parsePLTE.bind(this));
};
Parser.prototype._parsePLTE = function(data) {

  this._crc.write(data);

  var entries = Math.floor(data.length / 3);
  // console.log('Palette:', entries);

  for (var i = 0; i < entries; i++) {
    this._palette.push([
      data[i * 3],
      data[i * 3 + 1],
      data[i * 3 + 2],
      0xff
    ]);
  }

  this.palette(this._palette);

  this._handleChunkEnd();
};

Parser.prototype._handleTRNS = function(length) {
  this.simpleTransparency();
  this.read(length, this._parseTRNS.bind(this));
};
Parser.prototype._parseTRNS = function(data) {

  this._crc.write(data);

  // palette
  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
    if (this._palette.length === 0) {
      this.error(new Error('Transparency chunk must be after palette'));
      return;
    }
    if (data.length > this._palette.length) {
      this.error(new Error('More transparent colors than palette size'));
      return;
    }
    for (var i = 0; i < data.length; i++) {
      this._palette[i][3] = data[i];
    }
    this.palette(this._palette);
  }

  // for colorType 0 (grayscale) and 2 (rgb)
  // there might be one gray/color defined as transparent
  if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
    // grey, 2 bytes
    this.transColor([data.readUInt16BE(0)]);
  }
  if (this._colorType === constants.COLORTYPE_COLOR) {
    this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
  }

  this._handleChunkEnd();
};

Parser.prototype._handleGAMA = function(length) {
  this.read(length, this._parseGAMA.bind(this));
};
Parser.prototype._parseGAMA = function(data) {

  this._crc.write(data);
  this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);

  this._handleChunkEnd();
};

Parser.prototype._handleIDAT = function(length) {
  if (!this._emittedHeadersFinished) {
    this._emittedHeadersFinished = true;
    this.headersFinished();
  }
  this.read(-length, this._parseIDAT.bind(this, length));
};
Parser.prototype._parseIDAT = function(length, data) {

  this._crc.write(data);

  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
    throw new Error('Expected palette not found');
  }

  this.inflateData(data);
  var leftOverLength = length - data.length;

  if (leftOverLength > 0) {
    this._handleIDAT(leftOverLength);
  }
  else {
    this._handleChunkEnd();
  }
};

Parser.prototype._handleIEND = function(length) {
  this.read(length, this._parseIEND.bind(this));
};
Parser.prototype._parseIEND = function(data) {

  this._crc.write(data);

  this._hasIEND = true;
  this._handleChunkEnd();

  if (this.finished) {
    this.finished();
  }
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(5);
var Stream = __webpack_require__(8);
var Parser = __webpack_require__(140);
var Packer = __webpack_require__(138);
var PNGSync = __webpack_require__(142);


var PNG = exports.PNG = function(options) {
  Stream.call(this);

  options = options || {}; // eslint-disable-line no-param-reassign

  // coerce pixel dimensions to integers (also coerces undefined -> 0):
  this.width = options.width | 0;
  this.height = options.height | 0;

  this.data = this.width > 0 && this.height > 0 ?
    new Buffer(4 * this.width * this.height) : null;

  if (options.fill && this.data) {
    this.data.fill(0);
  }

  this.gamma = 0;
  this.readable = this.writable = true;

  this._parser = new Parser(options);

  this._parser.on('error', this.emit.bind(this, 'error'));
  this._parser.on('close', this._handleClose.bind(this));
  this._parser.on('metadata', this._metadata.bind(this));
  this._parser.on('gamma', this._gamma.bind(this));
  this._parser.on('parsed', function(data) {
    this.data = data;
    this.emit('parsed', data);
  }.bind(this));

  this._packer = new Packer(options);
  this._packer.on('data', this.emit.bind(this, 'data'));
  this._packer.on('end', this.emit.bind(this, 'end'));
  this._parser.on('close', this._handleClose.bind(this));
  this._packer.on('error', this.emit.bind(this, 'error'));

};
util.inherits(PNG, Stream);

PNG.sync = PNGSync;

PNG.prototype.pack = function() {

  if (!this.data || !this.data.length) {
    this.emit('error', 'No data provided');
    return this;
  }

  process.nextTick(function() {
    this._packer.pack(this.data, this.width, this.height, this.gamma);
  }.bind(this));

  return this;
};


PNG.prototype.parse = function(data, callback) {

  if (callback) {
    var onParsed, onError;

    onParsed = function(parsedData) {
      this.removeListener('error', onError);

      this.data = parsedData;
      callback(null, this);
    }.bind(this);

    onError = function(err) {
      this.removeListener('parsed', onParsed);

      callback(err, null);
    }.bind(this);

    this.once('parsed', onParsed);
    this.once('error', onError);
  }

  this.end(data);
  return this;
};

PNG.prototype.write = function(data) {
  this._parser.write(data);
  return true;
};

PNG.prototype.end = function(data) {
  this._parser.end(data);
};

PNG.prototype._metadata = function(metadata) {
  this.width = metadata.width;
  this.height = metadata.height;

  this.emit('metadata', metadata);
};

PNG.prototype._gamma = function(gamma) {
  this.gamma = gamma;
};

PNG.prototype._handleClose = function() {
  if (!this._parser.writable && !this._packer.readable) {
    this.emit('close');
  }
};


PNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params
  // coerce pixel dimensions to integers (also coerces undefined -> 0):
  /* eslint-disable no-param-reassign */
  srcX |= 0;
  srcY |= 0;
  width |= 0;
  height |= 0;
  deltaX |= 0;
  deltaY |= 0;
  /* eslint-enable no-param-reassign */

  if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
    throw new Error('bitblt reading outside image');
  }

  if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
    throw new Error('bitblt writing outside image');
  }

  for (var y = 0; y < height; y++) {
    src.data.copy(dst.data,
      ((deltaY + y) * dst.width + deltaX) << 2,
      ((srcY + y) * src.width + srcX) << 2,
      ((srcY + y) * src.width + srcX + width) << 2
    );
  }
};


PNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) { // eslint-disable-line max-params

  PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
  return this;
};

PNG.adjustGamma = function(src) {
  if (src.gamma) {
    for (var y = 0; y < src.height; y++) {
      for (var x = 0; x < src.width; x++) {
        var idx = (src.width * y + x) << 2;

        for (var i = 0; i < 3; i++) {
          var sample = src.data[idx + i] / 255;
          sample = Math.pow(sample, 1 / 2.2 / src.gamma);
          src.data[idx + i] = Math.round(sample * 255);
        }
      }
    }
    src.gamma = 0;
  }
};

PNG.prototype.adjustGamma = function() {
  PNG.adjustGamma(this);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SyncReader = module.exports = function(buffer) {

  this._buffer = buffer;
  this._reads = [];
};

SyncReader.prototype.read = function(length, callback) {

  this._reads.push({
    length: Math.abs(length), // if length < 0 then at most this length
    allowLess: length < 0,
    func: callback
  });
};

SyncReader.prototype.process = function() {

  // as long as there is any data and read requests
  while (this._reads.length > 0 && this._buffer.length) {

    var read = this._reads[0];

    if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {

      // ok there is any data so that we can satisfy this request
      this._reads.shift(); // == read

      var buf = this._buffer;

      this._buffer = buf.slice(read.length);

      read.func.call(this, buf.slice(0, read.length));

    }
    else {
      break;
    }

  }

  if (this._reads.length > 0) {
    return new Error('There are some read requests waitng on finished stream');
  }

  if (this._buffer.length > 0) {
    return new Error('unrecognised content at end of stream');
  }

};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const bmp = __webpack_require__(68);
const fileType = __webpack_require__(78);
const getStream = __webpack_require__(116);
const jpeg = __webpack_require__(48);
const parsePng = __webpack_require__(50);
const PNG = __webpack_require__(60).PNG;
const Resize = __webpack_require__(125);

const resize = (img, opts) => {
	if (typeof opts.width !== 'number') {
		opts.width = Math.trunc(img.width * (opts.height / img.height));
	}

	if (typeof opts.height !== 'number') {
		opts.height = Math.trunc(img.height * (opts.width / img.width));
	}

	return new Promise(resolve => {
		const resize = new Resize(img.width, img.height, opts.width, opts.height, true, true, buf => resolve(buf));
		resize.resize(img.data);
	});
};

module.exports = (buf, opts) => {
	if (!Buffer.isBuffer(buf)) {
		return Promise.reject(new TypeError('Expected a buffer'));
	}

	const type = fileType(buf);

	if (!type || (type.ext !== 'bmp' && type.ext !== 'jpg' && type.ext !== 'png')) {
		return Promise.reject(new Error('Image format not supported'));
	}

	opts = Object.assign({}, opts);

	if (typeof opts.width !== 'number' && typeof opts.height !== 'number') {
		return Promise.reject(new Error('You need to set either width or height'));
	}

	const encodeJpeg = (buf, opts) => {
		return jpeg.encode({
			width: opts.width,
			height: opts.height,
			data: buf
		}).data;
	};

	const encodePng = (buf, opts) => {
		const png = new PNG({width: opts.width, height: opts.height, filterType: -1});
		png.data = buf;
		return getStream.buffer(png.pack());
	};

	const encodeBmp = (buf, opts) => {
		return bmp.encode({
			width: opts.width,
			height: opts.height,
			data: buf
		}).data;
	};

	if (type.ext === 'bmp') {
		const img = bmp.decode(buf);

		return resize(img, opts).then(buf => {
			if (opts.out === 'jpg') {
				return encodeJpeg(buf, opts);
			} else if (opts.out === 'png') {
				return encodePng(buf, opts);
			}
			return encodeBmp(buf, opts);
		});
	}

	if (type.ext === 'jpg') {
		const img = jpeg.decode(buf);

		return resize(img, opts).then(buf => {
			if (opts.out === 'png') {
				return encodePng(buf, opts);
			} else if (opts.out === 'bmp') {
				return encodeBmp(buf, opts);
			}
			return encodeJpeg(buf, opts);
		});
	}

	return parsePng(buf).then(img => resize(img, opts).then(buf => {
		if (opts.out === 'jpg') {
			return encodeJpeg(buf, opts);
		} else if (opts.out === 'bmp') {
			return encodeBmp(buf, opts);
		}
		img.width = opts.width;
		img.height = opts.height;
		img.data = Buffer.isBuffer(buf) ? buf : Buffer.from(buf);
		return getStream.buffer(img.pack());
	}));
};


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getDownsampledImage = exports.getVideoThumbnail = exports.getImageThumbnail = void 0;
var thumbnail_1 = __webpack_require__(21);
var downsample_1 = __webpack_require__(19);
var exif_1 = __webpack_require__(20);
var probe_1 = __webpack_require__(67);
function getImageThumbnail(fullPath) {
    return thumbnail_1.buildImageThumb(fullPath)
        .then(function (assetThumbnail) {
        return assetThumbnail ? {
            type: assetThumbnail.type,
            data: assetThumbnail.data.toString('base64'),
            size: assetThumbnail.size,
            hash: assetThumbnail.hash,
        } : {
            type: null,
        };
    });
}
exports.getImageThumbnail = getImageThumbnail;
function getVideoThumbnail(fullPath, ffmpegPath) {
    return thumbnail_1.buildVideoThumb(fullPath, ffmpegPath)
        .then(function (assetThumbnail) {
        return assetThumbnail ? {
            type: assetThumbnail.type,
            data: assetThumbnail.data.toString('base64'),
            size: assetThumbnail.size,
            hash: assetThumbnail.hash,
        } : {
            type: null,
        };
    });
}
exports.getVideoThumbnail = getVideoThumbnail;
function getDownsampledImage(fullPath, width, height, destinationPath) {
    return downsample_1.downsampleImage(fullPath, width, height, destinationPath);
}
exports.getDownsampledImage = getDownsampledImage;
var worker = {
    on: process.on.bind(process),
    send: process.send.bind(process),
    methods: {
        getImageThumbnail: getImageThumbnail,
        getVideoThumbnail: getVideoThumbnail,
        getDownsampledImage: getDownsampledImage,
        getExifData: exif_1.getExifData,
        getFileSha1: thumbnail_1.getFileSha1,
        parseProbeString: probe_1.parseProbeString,
        getFileProbeData: probe_1.getFileProbeData,
        getDecoderName: probe_1.getDecoderName,
        getDecoderTimeSliceMaxCount: probe_1.getDecoderTimeSliceMaxCount,
        canPlayFile: probe_1.canPlayFile,
        canPlayProbeData: probe_1.canPlayProbeData,
    },
};
function convertError(error) {
    return Object.getOwnPropertyNames(error).reduce(function (product, name) {
        return Object.defineProperty(product, name, {
            value: error[name],
            enumerable: true,
        });
    }, {});
}
function isPromise(value) {
    return value && (typeof value.then === 'function') && (typeof value.catch === 'function');
}
worker.on('message', function (request) {
    try {
        var method = worker.methods[request.method];
        if (method) {
            var methodResult = method.apply(method, request.params);
            if (isPromise(methodResult)) {
                methodResult
                    .then(function (result) {
                    worker.send({
                        id: request.id,
                        result: result,
                        error: null,
                    });
                })
                    .catch(function (err) {
                    worker.send({
                        id: request.id,
                        result: null,
                        error: convertError(err),
                    });
                });
            }
            else {
                worker.send({
                    id: request.id,
                    result: methodResult,
                    error: null,
                });
            }
        }
        else {
            throw new Error('Unknown method "' + request.method + '"');
        }
    }
    catch (err) {
        worker.send({
            id: request.id,
            result: null,
            error: convertError(err),
        });
    }
});
worker.send('ready');


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__filename, __dirname) {
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};


// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_ProbeFileEx')) {
        Object.defineProperty(Module['ready'], '_ProbeFileEx', { configurable: true, get: function() { abort('You are getting _ProbeFileEx on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_ProbeFileEx', { configurable: true, set: function() { abort('You are setting _ProbeFileEx on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_mountDataFilepath')) {
        Object.defineProperty(Module['ready'], '_mountDataFilepath', { configurable: true, get: function() { abort('You are getting _mountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_mountDataFilepath', { configurable: true, set: function() { abort('You are setting _mountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_unmountDataFilepath')) {
        Object.defineProperty(Module['ready'], '_unmountDataFilepath', { configurable: true, get: function() { abort('You are getting _unmountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_unmountDataFilepath', { configurable: true, set: function() { abort('You are setting _unmountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_CanPlayFileJS')) {
        Object.defineProperty(Module['ready'], '_CanPlayFileJS', { configurable: true, get: function() { abort('You are getting _CanPlayFileJS on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_CanPlayFileJS', { configurable: true, set: function() { abort('You are setting _CanPlayFileJS on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_CanPlayToString')) {
        Object.defineProperty(Module['ready'], '_CanPlayToString', { configurable: true, get: function() { abort('You are getting _CanPlayToString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_CanPlayToString', { configurable: true, set: function() { abort('You are setting _CanPlayToString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_GetDecoderName')) {
        Object.defineProperty(Module['ready'], '_GetDecoderName', { configurable: true, get: function() { abort('You are getting _GetDecoderName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_GetDecoderName', { configurable: true, set: function() { abort('You are setting _GetDecoderName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_GetDecoderTimesliceMaxCount')) {
        Object.defineProperty(Module['ready'], '_GetDecoderTimesliceMaxCount', { configurable: true, get: function() { abort('You are getting _GetDecoderTimesliceMaxCount on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_GetDecoderTimesliceMaxCount', { configurable: true, set: function() { abort('You are setting _GetDecoderTimesliceMaxCount on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___data_end')) {
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, get: function() { abort('You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, set: function() { abort('You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fflush')) {
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, get: function() { abort('You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, set: function() { abort('You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = __webpack_require__(0).dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = __webpack_require__(2);
    if (!nodePath) nodePath = __webpack_require__(0);
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';







// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}








// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });




// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 223 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_load_i64() {
    if (typeof setTempRet0 === 'function') setTempRet0(i32ScratchView[1]);
    return i32ScratchView[0];
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.clock_gettime;
 var fimport$1 = env.abort;
 var fimport$2 = env.gettimeofday;
 var fimport$3 = env.__sys_open;
 var fimport$4 = env.__sys_fcntl64;
 var fimport$5 = env.__sys_ioctl;
 var fimport$6 = env.fd_read;
 var fimport$7 = env.fd_close;
 var fimport$8 = env.fd_write;
 var fimport$9 = env.emscripten_resize_heap;
 var fimport$10 = env.emscripten_memcpy_big;
 var fimport$11 = env.__handle_stack_overflow;
 var fimport$12 = env.setTempRet0;
 var fimport$13 = env.fd_seek;
 var fimport$14 = env.emscripten_asm_const_iii;
 var getTempRet0 = env.getTempRet0;
 var global$0 = 5308192;
 var global$1 = 65148;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 65152 | 0;
 }
 
 function $1() {
  
 }
 
 function $2($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 100 | 0);
  }
  $4_1 = $0_1 + 12 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$6
      }
      $6_1 = 0;
      label$7 : {
       if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$7
       }
       $0_1 = $5_1;
       label$8 : while (1) {
        label$9 : {
         $6_1 = $0_1;
         $0_1 = HEAP32[$0_1 >> 2] | 0;
         if ($0_1) {
          break label$9
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$4;
        }
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$8
        }
        break label$8;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($6_1) {
       break label$4
      }
      break label$5;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $6_1 = $4_1;
    break label$3;
   }
   $5_1 = HEAP32[$6_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = $1_1;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 123 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(1115 | 0, 1039 | 0, 124 | 0);
  abort();
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 20) + ($0_1 + 64 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 503 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 48 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 49 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 1650720768;
  HEAP32[i64toi32_i32$1 >> 2] = 1650720768;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $6($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $10$hi = 0, $10_1 = 0, $2_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $4_1 = 0, $11_1 = 0, $5_1 = 0, $7_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $37$hi = 0, $50_1 = 0, $90_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 523 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
         $28_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
           $29_1 = 0
          } else {
           $29_1 = 1
          }
          $30_1 = $29_1;
         } else {
          $30_1 = 0
         }
         $28_1 = $30_1;
        }
        if ($28_1) {
         break label$10
        }
        $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        label$11 : {
         label$12 : {
          i64toi32_i32$3 = $0_1 + 24 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
          $33_1 = i64toi32_i32$2;
          $33$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
          $37_1 = i64toi32_i32$2;
          $37$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $33$hi;
          i64toi32_i32$3 = $33_1;
          i64toi32_i32$2 = $37$hi;
          i64toi32_i32$1 = $37_1;
          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $10_1 = i64toi32_i32$4;
          $10$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = i64toi32_i32$4;
          i64toi32_i32$3 = $1$hi;
          i64toi32_i32$1 = $1_1;
          if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
           break label$12
          }
          if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[$2_1 >> 2] = $0_1;
          i64toi32_i32$0 = $1$hi;
          HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
          $50_1 = $2_1;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$5 = 0;
           $31_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
          } else {
           i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
           $31_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
          }
          HEAP32[($50_1 + 4 | 0) >> 2] = $31_1;
          $827(1130 | 0, $2_1 | 0);
          break label$11;
         }
         label$13 : {
          $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$13
          }
          FUNCTION_TABLE[$4_1](HEAP32[($0_1 + 244 | 0) >> 2] | 0);
         }
         $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
         $4_1 = $4($0_1 | 0) | 0;
         label$14 : {
          if (!$3_1) {
           break label$14
          }
          if (!$4_1) {
           break label$14
          }
          $7($0_1 | 0, $3_1 | 0) | 0;
         }
         i64toi32_i32$5 = $10$hi;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
         HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$5;
         HEAP8[($0_1 + 49 | 0) >> 0] = 1;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$5 = $10$hi;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$1 = $10$hi;
         i64toi32_i32$3 = $10_1;
         i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
         i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         $10_1 = i64toi32_i32$2;
         $10$hi = i64toi32_i32$4;
         label$15 : {
          if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$15
          }
          if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          i64toi32_i32$4 = $10$hi;
          HEAP32[($2_1 + 28 | 0) >> 2] = $10_1;
          HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
          i64toi32_i32$4 = $1$hi;
          HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
          $90_1 = $2_1;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = 0;
           $32_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
          } else {
           i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
           $32_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
          }
          HEAP32[($90_1 + 20 | 0) >> 2] = $32_1;
          $827(1166 | 0, $2_1 + 16 | 0 | 0);
         }
         $5_1 = $0_1 + 16 | 0;
         label$16 : {
          label$17 : {
           label$18 : {
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$4 = $10_1;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = 1;
            if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
             $34_1 = 1
            } else {
             if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
              if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
               $35_1 = 0
              } else {
               $35_1 = 1
              }
              $36_1 = $35_1;
             } else {
              $36_1 = 0
             }
             $34_1 = $36_1;
            }
            if ($34_1) {
             break label$18
            }
            label$19 : {
             $3_1 = $4($0_1 | 0) | 0;
             if (!$3_1) {
              break label$19
             }
             label$20 : while (1) {
              label$21 : {
               i64toi32_i32$4 = $10$hi;
               $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
               i64toi32_i32$4 = 0;
               $11_1 = $3_1;
               $11$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $10$hi;
               i64toi32_i32$3 = $10_1;
               i64toi32_i32$0 = $11$hi;
               i64toi32_i32$5 = $3_1;
               if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
                break label$21
               }
               i64toi32_i32$3 = $10$hi;
               $7($0_1 | 0, $10_1 | 0) | 0;
               break label$19;
              }
              if ($7($0_1 | 0, $3_1 | 0) | 0) {
               break label$9
              }
              $8($0_1 | 0, $3_1 | 0);
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$3 = $11$hi;
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$5 = $10_1;
              i64toi32_i32$4 = $11$hi;
              i64toi32_i32$0 = $11_1;
              i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              $10_1 = i64toi32_i32$1;
              $10$hi = i64toi32_i32$2;
              $3_1 = $4($0_1 | 0) | 0;
              if ($3_1) {
               continue label$20
              }
              break label$20;
             };
             i64toi32_i32$2 = $10$hi;
             i64toi32_i32$3 = $10_1;
             i64toi32_i32$5 = -1;
             i64toi32_i32$0 = -1;
             if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
              $38_1 = 1
             } else {
              if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
               if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
                $39_1 = 0
               } else {
                $39_1 = 1
               }
               $40_1 = $39_1;
              } else {
               $40_1 = 0
              }
              $38_1 = $40_1;
             }
             if ($38_1) {
              break label$8
             }
            }
            if ((HEAP32[$5_1 >> 2] | 0 | 0) != (3 | 0)) {
             break label$17
            }
            $3_1 = $0_1 + 56 | 0;
            HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
            FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
            break label$17;
           }
           i64toi32_i32$3 = $10$hi;
           i64toi32_i32$0 = $10_1;
           i64toi32_i32$2 = -1;
           i64toi32_i32$5 = -1;
           if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
            $41_1 = 1
           } else {
            if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$5 >>> 0) {
              $42_1 = 0
             } else {
              $42_1 = 1
             }
             $43_1 = $42_1;
            } else {
             $43_1 = 0
            }
            $41_1 = $43_1;
           }
           if ($41_1) {
            break label$16
           }
           label$22 : {
            $3_1 = $4($0_1 | 0) | 0;
            if (!$3_1) {
             break label$22
            }
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = $10$hi;
            i64toi32_i32$2 = $10_1;
            i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
            i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
            i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
            $10_1 = i64toi32_i32$4;
            $10$hi = i64toi32_i32$1;
            $4_1 = $0_1 + 64 | 0;
            label$23 : while (1) {
             $6_1 = HEAP32[$3_1 >> 2] | 0;
             $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             if ($6_1 >>> 0 < $7_1 >>> 0) {
              break label$7
             }
             label$24 : {
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$1 = 0;
              $11_1 = $6_1 - $7_1 | 0;
              $11$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$0 = $10_1;
              i64toi32_i32$5 = $11$hi;
              i64toi32_i32$2 = $11_1;
              if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
               break label$24
              }
              i64toi32_i32$0 = $10$hi;
              HEAP32[($3_1 + 4 | 0) >> 2] = $7_1 + $10_1 | 0;
              break label$22;
             }
             $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
             if (!$3_1) {
              break label$6
             }
             if ($3_1 >>> 0 >= 9 >>> 0) {
              break label$5
             }
             i64toi32_i32$0 = $10$hi;
             i64toi32_i32$0 = $11$hi;
             i64toi32_i32$0 = $10$hi;
             i64toi32_i32$2 = $10_1;
             i64toi32_i32$1 = $11$hi;
             i64toi32_i32$5 = $11_1;
             i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
             i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
             i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
             i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
             $10_1 = i64toi32_i32$3;
             $10$hi = i64toi32_i32$4;
             label$25 : {
              label$26 : while (1) {
               $3_1 = $3_1 + -1 | 0;
               HEAP32[($0_1 + 64 | 0) >> 2] = $3_1;
               i64toi32_i32$4 = 0;
               FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0, HEAP32[(($4_1 + Math_imul($3_1, 20) | 0) + 16 | 0) >> 2] | 0, 0, i64toi32_i32$4) | 0;
               $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
               if (!$3_1) {
                break label$25
               }
               if (!(HEAP32[((Math_imul($3_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0)) {
                continue label$26
               }
               break label$26;
              };
             }
             $3_1 = $4($0_1 | 0) | 0;
             if ($3_1) {
              continue label$23
             }
             break label$23;
            };
           }
           if ((HEAP32[$5_1 >> 2] | 0 | 0) != (3 | 0)) {
            break label$17
           }
           $3_1 = $0_1 + 56 | 0;
           HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
           FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
          }
          HEAP32[$5_1 >> 2] = 0;
         }
         i64toi32_i32$4 = $1$hi;
         i64toi32_i32$2 = $0_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$4;
        }
        label$27 : {
         $9_1 = $2_1 + 32 | 0;
         if ($9_1 >>> 0 < global$2 >>> 0) {
          fimport$11()
         }
         global$0 = $9_1;
        }
        return 0 | 0;
       }
       $859(1123 | 0, 1039 | 0, 524 | 0);
       abort();
      }
      $859(1201 | 0, 1039 | 0, 560 | 0);
      abort();
     }
     $859(1209 | 0, 1039 | 0, 563 | 0);
     abort();
    }
    $859(1217 | 0, 1039 | 0, 576 | 0);
    abort();
   }
   $859(1240 | 0, 1039 | 0, 585 | 0);
   abort();
  }
  $859(1262 | 0, 1039 | 0, 586 | 0);
  abort();
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $14_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    if ($2_1 >>> 0 >= 9 >>> 0) {
     break label$1
    }
    $0_1 = (Math_imul($2_1, 20) + $0_1 | 0) + 52 | 0;
    $14_1 = $0_1;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $0_1 - $1_1 | 0;
    $0_1 = $2_1 >>> 0 > $0_1 >>> 0 ? 0 : $2_1;
    HEAP32[$14_1 >> 2] = $0_1;
    return $0_1 | 0;
   }
   $859(1548 | 0, 1039 | 0, 256 | 0);
   abort();
  }
  $859(1262 | 0, 1039 | 0, 257 | 0);
  abort();
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, $7$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $34_1 = 0, $37_1 = 0, $39$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 > 8 >>> 0) {
      break label$2
     }
     i64toi32_i32$0 = 0;
     $7_1 = $1_1;
     $7$hi = i64toi32_i32$0;
     $3_1 = $0_1 + 64 | 0;
     $1_1 = $0_1 + 68 | 0;
     label$4 : {
      label$5 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
       $4_1 = Math_imul($2_1, 20);
       $2_1 = $3_1 + $4_1 | 0;
       $9($0_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0);
       $34_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
       $37_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $39$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $39$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0]($34_1, $37_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
       HEAP8[($0_1 + 48 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ($2_1 | 0) == (1 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$4
       }
       $5_1 = (Math_imul($2_1, 20) + $1_1 | 0) + -16 | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       $4_1 = HEAP32[($1_1 + $4_1 | 0) >> 2] | 0;
       if ($6_1 >>> 0 < $4_1 >>> 0) {
        break label$1
       }
       if ($6_1 >>> 0 <= $4_1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
      HEAP32[$5_1 >> 2] = $6_1 - $4_1 | 0;
     }
     return;
    }
    $859(1240 | 0, 1039 | 0, 206 | 0);
    abort();
   }
   $859(1262 | 0, 1039 | 0, 207 | 0);
   abort();
  }
  $859(1675 | 0, 1039 | 0, 220 | 0);
  abort();
 }
 
 function $9($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $93_1 = 0, $96_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $16_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $2_1 >>> 24 | 0;
     $7_1 = $2_1 & 255 | 0;
     $8_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $9_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $10_1 = $5_1 + 36 | 0;
     $11_1 = $5_1 + 32 | 0;
     $12_1 = $5_1 + 28 | 0;
     $13_1 = $5_1 + 20 | 0;
     $14_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$10_1 >> 2] = $1_1;
       HEAP32[$11_1 >> 2] = $4_1;
       HEAP32[$12_1 >> 2] = $6_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $8_1;
       HEAP32[$13_1 >> 2] = $9_1;
       HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $15_1 >>> 24 | 0;
       HEAP32[$5_1 >> 2] = $15_1 & 255 | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = ($15_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = ($15_1 >>> 8 | 0) & 255 | 0;
       $827(1959 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $93_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $93_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $96_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $96_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 48 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $15_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 48 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$15_1) {
         break label$3
        }
        $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, $15_1) | 0;
        break label$8;
       }
       $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 48 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ($15_1 | 0) == (1 | 0) | 0;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      if ($14_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $17_1 = $5_1 + 64 | 0;
     if ($17_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $17_1;
    }
    return;
   }
   $859(2006 | 0, 1039 | 0, 167 | 0);
   abort();
  }
  $859(2020 | 0, 1039 | 0, 169 | 0);
  abort();
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $18_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if (!$0_1) {
     break label$1
    }
    label$3 : {
     $2_1 = $813(256 | 0) | 0;
     if ($2_1) {
      break label$3
     }
     $11(633 | 0);
     return 0 | 0;
    }
    $845($2_1 | 0, 256 | 0, $2_1 | 0, 1024 | 0);
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 236 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $15_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 228 | 0) >> 2] = $18_1;
    HEAP32[($2_1 + 232 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    label$4 : {
     if ($0_1) {
      break label$4
     }
     $11(642 | 0);
     $815($2_1 | 0);
     return 0 | 0;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $12($2_1 + 244 | 0 | 0);
    $5($2_1 | 0);
    return $2_1 | 0;
   }
   $859(1299 | 0, 1039 | 0, 628 | 0);
   abort();
  }
  $859(1303 | 0, 1039 | 0, 629 | 0);
  abort();
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  $862(1039 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(1658 | 0, 1039 | 0, 939 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 8 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(1299 | 0, 1039 | 0, 687 | 0);
   abort();
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 2;
  HEAP32[($0_1 + 4 | 0) >> 2] = 3;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $15($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $16($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 700 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   $3_1 = $1_1 + 20 | 0;
   label$6 : while (1) {
    label$7 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
     $827(1311 | 0, $1_1 + 32 | 0 | 0);
    }
    label$8 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 >>> 24 | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$1_1 >> 2] = $0_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $4_1 & 255 | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     $827(1359 | 0, $1_1 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $5($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 256 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
  label$9 : {
   $6_1 = $1_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $4_1 = 0, $17_1 = 0, $16_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $24_1 = 0, $129_1 = 0, $25_1 = 0, $239_1 = 0, $242_1 = 0;
  label$1 : {
   $2_1 = global$0 - 176 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 720 | 0);
  }
  $3_1 = $2_1 + 20 | 0;
  $4_1 = $0_1 + 64 | 0;
  $5_1 = ($2_1 + 48 | 0) + 44 | 0;
  $6_1 = ($2_1 + 48 | 0) + 40 | 0;
  $7_1 = ($2_1 + 48 | 0) + 28 | 0;
  $8_1 = ($2_1 + 48 | 0) + 36 | 0;
  $9_1 = ($2_1 + 48 | 0) + 32 | 0;
  $10_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : while (1) {
            label$15 : {
             if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
              break label$15
             }
             $11_1 = $798($1_1 | 0) | 0;
             if (!$11_1) {
              break label$5
             }
             $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $11_1 | 0);
             $12_1 = $756($11_1 | 0) | 0;
             $735($11_1 | 0);
             $10_1 = $12_1 + $10_1 | 0;
            }
            HEAP8[($0_1 + 48 | 0) >> 0] = 0;
            label$16 : {
             label$17 : while (1) {
              $11_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
              $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
              HEAP8[($0_1 + 49 | 0) >> 0] = 0;
              label$18 : {
               label$19 : {
                switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
                case 0:
                 $13_1 = 0;
                 label$24 : {
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                  $24_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 = __wasm_i64_srem($24_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $12_1 = i64toi32_i32$0;
                  if (($12_1 + -1 | 0) >>> 0 >= $11_1 >>> 0) {
                   break label$24
                  }
                  if (($12_1 | 0) != (1 | 0)) {
                   break label$16
                  }
                  label$25 : {
                   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
                    break label$25
                   }
                   if ($7($0_1 | 0, 1 | 0) | 0) {
                    break label$25
                   }
                   $8($0_1 | 0, 1 | 0);
                  }
                  $766($2_1 + 160 | 0 | 0, 1 | 0) | 0;
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                   continue label$17
                  }
                  $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  $13_1 = 1;
                 }
                 label$26 : {
                  label$27 : {
                   if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
                    break label$27
                   }
                   if (!($20($0_1 | 0, $2_1 + 160 | 0 | 0) | 0)) {
                    continue label$14
                   }
                   break label$26;
                  }
                  $12_1 = $4($0_1 | 0) | 0;
                  if (!$12_1) {
                   break label$13
                  }
                  label$28 : {
                   $11_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                   if ($11_1 >>> 0 > 7 >>> 0) {
                    break label$28
                   }
                   label$29 : {
                    if (!$11_1) {
                     break label$29
                    }
                    if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$29
                    }
                    $14_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
                    i64toi32_i32$2 = $12_1;
                    i64toi32_i32$1 = HEAP32[$12_1 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                    $129_1 = i64toi32_i32$1;
                    i64toi32_i32$1 = $3_1;
                    HEAP32[i64toi32_i32$1 >> 2] = $129_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    HEAP32[($2_1 + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                    HEAP32[$2_1 >> 2] = $0_1;
                    HEAP32[($2_1 + 4 | 0) >> 2] = $14_1 & 255 | 0;
                    HEAP32[($2_1 + 8 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                    HEAP32[($2_1 + 12 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                    $827(1426 | 0, $2_1 | 0);
                   }
                   label$30 : {
                    if ($7($0_1 | 0, $11_1 | 0) | 0) {
                     break label$30
                    }
                    $8($0_1 | 0, $11_1 | 0);
                   }
                   $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                   $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                   if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                    break label$18
                   }
                   $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  }
                  if (!($21($0_1 | 0, $2_1 + 160 | 0 | 0) | 0)) {
                   continue label$14
                  }
                 }
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 continue label$17;
                case 3:
                 label$31 : {
                  $12_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
                  if ($12_1) {
                   break label$31
                  }
                  label$32 : {
                   if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$32
                   }
                   HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
                   $827(1498 | 0, $2_1 + 32 | 0 | 0);
                  }
                  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                  HEAP32[($0_1 + 56 | 0) >> 2] = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 1 | 0;
                  FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
                  continue label$14;
                 }
                 if (!($4($0_1 | 0) | 0)) {
                  break label$12
                 }
                 label$33 : {
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                  $25_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 = __wasm_i64_srem($25_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $13_1 = i64toi32_i32$0;
                  if (($13_1 + -1 | 0) >>> 0 >= $11_1 >>> 0) {
                   break label$33
                  }
                  if (($13_1 | 0) != (1 | 0)) {
                   break label$11
                  }
                  label$34 : {
                   if ($7($0_1 | 0, 1 | 0) | 0) {
                    break label$34
                   }
                   $8($0_1 | 0, 1 | 0);
                  }
                  $766($2_1 + 160 | 0 | 0, 1 | 0) | 0;
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                   continue label$14
                  }
                  $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  $12_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
                  if (!$12_1) {
                   break label$10
                  }
                 }
                 $15_1 = 0;
                 $11_1 = 0;
                 label$35 : {
                  label$36 : {
                   label$37 : {
                    $13_1 = HEAP32[((Math_imul($12_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0;
                    if ($13_1 >>> 0 >= 8 >>> 0) {
                     break label$37
                    }
                    $11_1 = $13_1;
                    break label$36;
                   }
                   label$38 : while (1) {
                    i64toi32_i32$2 = ($2_1 + 160 | 0) + 8 | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $239_1 = i64toi32_i32$1;
                    i64toi32_i32$1 = ($2_1 + 144 | 0) + 8 | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $239_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$2 = $2_1;
                    i64toi32_i32$0 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
                    $242_1 = i64toi32_i32$0;
                    i64toi32_i32$0 = $2_1;
                    HEAP32[($2_1 + 144 | 0) >> 2] = $242_1;
                    HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
                    $766($2_1 + 160 | 0 | 0, 2 | 0) | 0;
                    $14_1 = $776($2_1 + 144 | 0 | 0) | 0;
                    $12_1 = $776($2_1 + 144 | 0 | 0) | 0;
                    if ((HEAP32[($2_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                     break label$35
                    }
                    label$39 : {
                     if (!($12_1 & -17 | 0)) {
                      break label$39
                     }
                     if (($12_1 + $11_1 | 0) >>> 0 > $13_1 >>> 0) {
                      break label$39
                     }
                     if (!($22($0_1 | 0, $14_1 | 0) | 0)) {
                      break label$39
                     }
                     label$40 : {
                      label$41 : {
                       if ((HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0)) {
                        break label$41
                       }
                       if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                        break label$40
                       }
                       $15_1 = Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + $4_1 | 0;
                       $13_1 = HEAP32[($15_1 + -4 | 0) >> 2] | 0;
                       i64toi32_i32$2 = $0_1;
                       i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                       i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                       HEAP32[(($2_1 + 96 | 0) + 44 | 0) >> 2] = HEAP32[($15_1 + -12 | 0) >> 2] | 0;
                       HEAP32[(($2_1 + 96 | 0) + 24 | 0) >> 2] = i64toi32_i32$1;
                       HEAP32[(($2_1 + 96 | 0) + 20 | 0) >> 2] = $12_1;
                       HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 40 | 0) >> 2] = $13_1 >>> 24 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 28 | 0) >> 2] = $13_1 & 255 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 36 | 0) >> 2] = ($13_1 >>> 16 | 0) & 255 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 32 | 0) >> 2] = ($13_1 >>> 8 | 0) & 255 | 0;
                       HEAP32[($2_1 + 108 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                       HEAP32[($2_1 + 104 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                       HEAP32[($2_1 + 100 | 0) >> 2] = $14_1 & 255 | 0;
                       HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
                       $827(1568 | 0, $2_1 + 96 | 0 | 0);
                       break label$40;
                      }
                      if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                       break label$40
                      }
                      if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
                       break label$40
                      }
                      $15_1 = Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + $4_1 | 0;
                      $13_1 = HEAP32[($15_1 + -4 | 0) >> 2] | 0;
                      i64toi32_i32$2 = $0_1;
                      i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                      HEAP32[$5_1 >> 2] = HEAP32[($15_1 + -12 | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 48 | 0) + 24 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[(($2_1 + 48 | 0) + 20 | 0) >> 2] = $12_1;
                      HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                      HEAP32[$6_1 >> 2] = $13_1 >>> 24 | 0;
                      HEAP32[$7_1 >> 2] = $13_1 & 255 | 0;
                      HEAP32[$8_1 >> 2] = ($13_1 >>> 16 | 0) & 255 | 0;
                      HEAP32[$9_1 >> 2] = ($13_1 >>> 8 | 0) & 255 | 0;
                      HEAP32[($2_1 + 60 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                      HEAP32[($2_1 + 56 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                      HEAP32[($2_1 + 52 | 0) >> 2] = $14_1 & 255 | 0;
                      HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
                      $827(1568 | 0, $2_1 + 48 | 0 | 0);
                     }
                     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                     $15_1 = 1;
                     HEAP32[($0_1 + 56 | 0) >> 2] = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 1 | 0;
                     FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
                     $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                     break label$35;
                    }
                    $11_1 = $11_1 + 2 | 0;
                    if ($11_1 >>> 0 < $13_1 >>> 0) {
                     continue label$38
                    }
                    break label$38;
                   };
                  }
                  $15_1 = 1;
                 }
                 label$42 : {
                  if ($7($0_1 | 0, $11_1 | 0) | 0) {
                   break label$42
                  }
                  $8($0_1 | 0, $11_1 | 0);
                 }
                 $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                 $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 if (!$15_1) {
                  continue label$14
                 }
                 if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 255 | 0) {
                  continue label$14
                 }
                 continue label$17;
                case 1:
                 $12_1 = $4($0_1 | 0) | 0;
                 if (!$12_1) {
                  break label$9
                 }
                 $12_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                 $11_1 = $11_1 >>> 0 < $12_1 >>> 0 ? $11_1 : $12_1;
                 $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                 label$43 : {
                  if (!($7($0_1 | 0, $11_1 | 0) | 0)) {
                   break label$43
                  }
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  continue label$14;
                 }
                 $8($0_1 | 0, $11_1 | 0);
                 HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                 $11_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 if ($11_1) {
                  continue label$14
                 }
                 continue label$17;
                case 2:
                 $13_1 = $4($0_1 | 0) | 0;
                 if (!$13_1) {
                  break label$8
                 }
                 $12_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                 if ($11_1 >>> 0 < $12_1 >>> 0) {
                  continue label$14
                 }
                 if ($7($0_1 | 0, $12_1 | 0) | 0) {
                  break label$7
                 }
                 label$44 : {
                  $11_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                  if (($11_1 + 1 | 0) >>> 0 < 2 >>> 0) {
                   break label$44
                  }
                  $9($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $11_1 | 0, $2_1 + 160 | 0 | 0, $12_1 | 0);
                 }
                 HEAP32[($0_1 + 32 | 0) >> 2] = 0;
                 $11_1 = $23($0_1 | 0) | 0;
                 if (!$11_1) {
                  break label$6
                 }
                 label$45 : {
                  $11_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
                  if (!$11_1) {
                   break label$45
                  }
                  $13_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                  if (($13_1 + 1 | 0) >>> 0 < 2 >>> 0) {
                   break label$45
                  }
                  $9($0_1 | 0, $11_1 | 0, $13_1 | 0, $2_1 + 160 | 0 | 0, $12_1 | 0);
                 }
                 $8($0_1 | 0, $12_1 | 0);
                 $11_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                 $766($2_1 + 160 | 0 | 0, $12_1 | 0) | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                 if (!$11_1) {
                  continue label$17
                 }
                 break label$5;
                case 4:
                 break label$19;
                default:
                 continue label$14;
                };
               }
               $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
               $19($0_1 | 0, $2_1 + 160 | 0 | 0);
               continue label$14;
              }
              if (!$13_1) {
               continue label$14
              }
              continue label$17;
             };
            }
            break label$14;
           };
           $859(1414 | 0, 1039 | 0, 752 | 0);
           abort();
          }
          $859(1422 | 0, 1039 | 0, 771 | 0);
          abort();
         }
         $859(1422 | 0, 1039 | 0, 803 | 0);
         abort();
        }
        $859(1414 | 0, 1039 | 0, 810 | 0);
        abort();
       }
       $859(1548 | 0, 1039 | 0, 828 | 0);
       abort();
      }
      $859(1422 | 0, 1039 | 0, 875 | 0);
      abort();
     }
     $859(1422 | 0, 1039 | 0, 888 | 0);
     abort();
    }
    $859(1643 | 0, 1039 | 0, 897 | 0);
    abort();
   }
   $859(1651 | 0, 1039 | 0, 906 | 0);
   abort();
  }
  label$46 : {
   $17_1 = $2_1 + 176 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  return $10_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 96 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  $4_1 = $776($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 76 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 72 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(1699 | 0, $2_1 + 64 | 0 | 0);
    }
    label$6 : {
     if (($3_1 | 0) != (1263424842 | 0)) {
      break label$6
     }
     $24($0_1 | 0, 1263424842 | 0, $4_1 | 0, 0 | 0, 0 | 0) | 0;
     $5_1 = 1;
     HEAP32[($0_1 + 16 | 0) >> 2] = 1;
     break label$3;
    }
    $6_1 = $776($1_1 | 0) | 0;
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$7 : {
     if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1 >>> 24 | 0;
     HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
     HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(1731 | 0, $2_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (($3_1 | 0) != (1179011410 | 0)) {
      break label$8
     }
     if ($4_1 >>> 0 < 4 >>> 0) {
      break label$8
     }
     if (!(($6_1 | 0) == (541677121 | 0) | ($6_1 | 0) == (1481201217 | 0) | 0)) {
      break label$8
     }
     $24($0_1 | 0, $6_1 | 0, $4_1 | 0, 4 | 0, 0 | 0) | 0;
     $5_1 = 1;
     break label$3;
    }
    label$9 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(1779 | 0, $2_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 4;
    $5_1 = 1;
    $1_1 = $0_1 + 60 | 0;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
    break label$3;
   }
   $769($1_1 | 0, $2_1 + 88 | 0 | 0);
  }
  label$10 : {
   $8_1 = $2_1 + 96 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  $4_1 = $776($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (($3_1 | 0) == (1414744396 | 0)) {
        break label$7
       }
       $6_1 = 0;
       if (($3_1 | 0) != (1179011410 | 0)) {
        break label$6
       }
      }
      $3_1 = $776($1_1 | 0) | 0;
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $6_1 = 4;
      $5_1 = 1;
     }
     $7_1 = $4($0_1 | 0) | 0;
     if (!$7_1) {
      break label$3
     }
     $7($0_1 | 0, 8 | 0) | 0;
     label$8 : {
      if ($5_1 ^ 1 | 0 | (HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0) | 0) {
       break label$8
      }
      if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(1813 | 0, $2_1 + 16 | 0 | 0);
     }
     label$9 : {
      label$10 : {
       label$11 : {
        $1_1 = $22($0_1 | 0, $3_1 | 0) | 0;
        if ($5_1 | ($1_1 | 0) != (0 | 0) | 0) {
         break label$11
        }
        if (!($25($0_1 | 0, $3_1 | 0) | 0)) {
         break label$10
        }
       }
       $8_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$9
       }
       if ((HEAP32[((Math_imul($8_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0) >>> 0 >= $4_1 >>> 0) {
        break label$9
       }
       if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[((Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + ($0_1 + 64 | 0) | 0) + -12 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(1848 | 0, $2_1 | 0);
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 3;
      $1_1 = 1;
      $3_1 = $0_1 + 52 | 0;
      HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
      FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
      break label$4;
     }
     label$12 : {
      if (!($24($0_1 | 0, $3_1 | 0, $4_1 | 0, $6_1 | 0, ($5_1 ? $1_1 : 0) | 0) | 0)) {
       break label$12
      }
      label$13 : {
       if (!$5_1) {
        break label$13
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       $1_1 = 1;
       break label$4;
      }
      label$14 : {
       if ($1_1) {
        break label$14
       }
       if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
        break label$12
       }
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 2;
      HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      $1_1 = 1;
      break label$4;
     }
     $1_1 = 1;
     HEAP32[($0_1 + 16 | 0) >> 2] = 1;
     break label$4;
    }
    $769($1_1 | 0, $2_1 + 40 | 0 | 0);
    $1_1 = 0;
   }
   label$15 : {
    $10_1 = $2_1 + 48 | 0;
    if ($10_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $10_1;
   }
   return $1_1 | 0;
  }
  $859(1651 | 0, 1039 | 0, 357 | 0);
  abort();
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (Math_imul($1_1, 20) + ($0_1 + 64 | 0) | 0) + -36 | 0 : 0) | 0;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $49$hi = 0, $52$hi = 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if ($6_1 >>> 0 > 7 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $5_1 = ($0_1 + 64 | 0) + Math_imul($6_1, 20) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $3_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    $7_1 = $2_1 - $3_1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    $5_1 = 1;
    HEAP32[($0_1 + 64 | 0) >> 2] = $6_1 + 1 | 0;
    $9($0_1 | 0, $4_1 | 0, 0 | 0, 0 | 0, 0 | 0);
    $44_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
    $45_1 = $1_1;
    $46_1 = $7_1;
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $49$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $52$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $49$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $52$hi;
    i64toi32_i32$3 = $3_1 + 8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 232 | 0) >> 2] | 0]($44_1, $45_1, $46_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
    $0_1 = $0_1 + 48 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[$0_1 >> 0] | 0 | ($3_1 | 0) == (1 | 0) | 0;
   }
   return $5_1 | 0;
  }
  $859(1800 | 0, 1039 | 0, 189 | 0);
  abort();
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 1;
  label$3 : {
   $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$3
   }
   if ((HEAP32[((Math_imul($4_1, 20) + $0_1 | 0) + 60 | 0) >> 2] | 0 | 0) != (1769369453 | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = $1_1 & -65536 | 0;
      if (($4_1 | 0) > (1667497983 | 0)) {
       break label$6
      }
      if (($4_1 | 0) == (1650720768 | 0)) {
       break label$5
      }
      if (($4_1 | 0) == (1651703808 | 0)) {
       break label$5
      }
      if (($4_1 | 0) == (1651965952 | 0)) {
       break label$5
      }
      break label$4;
     }
     if (($4_1 | 0) == (1667497984 | 0)) {
      break label$5
     }
     if (($4_1 | 0) == (2019819520 | 0)) {
      break label$5
     }
     if (($4_1 | 0) != (1684275200 | 0)) {
      break label$4
     }
    }
    if ((($1_1 & 255 | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
     break label$4
    }
    if ((($1_1 & 65280 | 0) + -12288 | 0) >>> 0 < 2305 >>> 0) {
     break label$3
    }
   }
   label$7 : {
    if (($1_1 & 65535 | 0 | 0) != (30825 | 0)) {
     break label$7
    }
    if ((($1_1 & 16711680 | 0) + -3145728 | 0) >>> 0 > 589824 >>> 0) {
     break label$7
    }
    if ((($1_1 + -805306368 | 0) & -16777216 | 0) >>> 0 < 150994945 >>> 0) {
     break label$3
    }
   }
   if (($1_1 | 0) == (1263424842 | 0)) {
    break label$3
   }
   if (($1_1 | 0) == (1802401130 | 0)) {
    break label$3
   }
   label$8 : {
    label$9 : {
     $4_1 = $1_1 & 16777215 | 0;
     if (($4_1 | 0) == (7562610 | 0)) {
      break label$9
     }
     if (($4_1 | 0) != (5457234 | 0)) {
      break label$8
     }
    }
    if ((($1_1 + -805306368 | 0) & -16777216 | 0) >>> 0 < 150994945 >>> 0) {
     break label$3
    }
   }
   $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 40 | 0) >> 2] = $3_1;
   label$10 : {
    label$11 : {
     if (($3_1 | 0) == ($1_1 | 0)) {
      break label$11
     }
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     i64toi32_i32$2 = $0_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(1897 | 0, $2_1 + 16 | 0 | 0);
     break label$10;
    }
    if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(1897 | 0, $2_1 | 0);
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   $3_1 = 0;
  }
  label$12 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($1_1 | 0) == (1179011410 | 0) & ($2_1 | 0) == (541677121 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(3152 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 3152;
    $827(2104 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 3152 | 0, $2_1 | 0, 2025 | 0);
   HEAP32[($2_1 + 208 | 0) >> 2] = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 148 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 132 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 116 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 100 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 84 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 68 | 0) >> 2] = $2_1;
   $13($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 20 | 0) >> 2] = 4;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $10($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $2($0_1 | 0, $2_1 + 56 | 0 | 0, 1819436136 | 0, 5 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 72 | 0 | 0, 1819440243 | 0, 6 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 88 | 0 | 0, 1819108463 | 0, 7 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 104 | 0 | 0, 543384946 | 0, 8 | 0);
    HEAP32[($2_1 + 144 | 0) >> 2] = 0;
    HEAP32[($2_1 + 128 | 0) >> 2] = 0;
    $822($2_1 + 2776 | 0 | 0, 0 | 0, 160 | 0) | 0;
    $822($2_1 + 216 | 0 | 0, 0 | 0, 2560 | 0) | 0;
    HEAP32[($2_1 + 2936 | 0) >> 2] = 0;
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 595 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) == (829973609 | 0)) {
      break label$5
     }
     if (($1_1 | 0) != (1769369453 | 0)) {
      break label$4
     }
     HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     break label$3;
    }
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1 & -16 | 0;
    label$6 : {
     if ($2_1 >>> 0 < 17 >>> 0) {
      break label$6
     }
     $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     if (HEAPU8[($0_1 + 50 | 0) >> 0] | 0) {
      break label$6
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 1;
    }
    HEAP8[($0_1 + 46 | 0) >> 0] = 1;
    break label$3;
   }
   i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $9_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $10_1 = 0
     } else {
      $10_1 = 1
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    $9_1 = $11_1;
   }
   if ($9_1) {
    break label$3
   }
   if (HEAP32[($0_1 + 208 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP8[($0_1 + 46 | 0) >> 0] = 1;
  }
  return HEAPU8[($0_1 + 46 | 0) >> 0] | 0 | 0;
 }
 
 function $29($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $126$hi = 0, $130$hi = 0, $19_1 = 0, $20_1 = 0;
  label$1 : {
   $3_1 = global$0 - 80 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(2234 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 218 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (($1_1 | 0) == (1751742049 | 0)) {
      break label$10
     }
     if ($1_1) {
      break label$9
     }
     label$11 : {
      $1_1 = $813(56 | 0) | 0;
      if ($1_1) {
       break label$11
      }
      label$12 : {
       if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = 56;
       HEAP32[$3_1 >> 2] = $4_1;
       $827(2287 | 0, $3_1 | 0);
      }
      $1_1 = 1;
      HEAP8[($4_1 + 47 | 0) >> 0] = 1;
      break label$8;
     }
     $214($1_1 | 0, 9 | 0);
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = -1;
     HEAP32[($1_1 + 48 | 0) >> 2] = -1;
     HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = 0;
     HEAP32[($1_1 + 40 | 0) >> 2] = 0;
     HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
     HEAP8[($4_1 + 3148 | 0) >> 0] = 0;
     break label$9;
    }
    label$13 : {
     if ($39($4_1 + 152 | 0 | 0, $2_1 | 0) | 0) {
      break label$13
     }
     if (!($834(61544 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
     $827(2332 | 0, $3_1 + 16 | 0 | 0);
     break label$9;
    }
    HEAP8[($4_1 + 49 | 0) >> 0] = 1;
    $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$9
    }
    i64toi32_i32$0 = HEAP32[($4_1 + 168 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $126$hi = i64toi32_i32$1;
    $0_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $130$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $126$hi;
    $19_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $130$hi;
    i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$1 | 0, $0_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $20_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($20_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 156 | 0) >> 2] | 0) << 3 | 0;
    label$14 : {
     if (!$0_1) {
      break label$14
     }
     HEAP32[($1_1 + 40 | 0) >> 2] = (1e9 >>> 0) / ($0_1 >>> 0) | 0;
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 180 | 0) >> 2] | 0;
   }
   $1_1 = 0;
   if (!$2_1) {
    break label$8
   }
   $735($2_1 | 0);
  }
  label$15 : {
   $14_1 = $3_1 + 80 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $1_1 | 0;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $174_1 = 0, $174$hi = 0, $177_1 = 0, $177$hi = 0, $25_1 = 0, $179$hi = 0, $181$hi = 0, $26_1 = 0, $498_1 = 0;
  label$1 : {
   $3_1 = global$0 - 112 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$4
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$3
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 272 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($2_1) {
      break label$7
     }
     $12_1 = 0;
     break label$6;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 48 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $5_1;
   HEAP32[(($3_1 + 16 | 0) + 24 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $10_1;
   $827(2389 | 0, $3_1 + 16 | 0 | 0);
  }
  $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    label$26 : {
                     label$27 : {
                      label$28 : {
                       if (($1_1 | 0) > (1752331378 | 0)) {
                        break label$28
                       }
                       label$29 : {
                        switch ($1_1 + 1 | 0 | 0) {
                        case 0:
                         break label$21;
                        case 1:
                         break label$27;
                        default:
                         break label$29;
                        };
                       }
                       if (($1_1 | 0) == (1685222515 | 0)) {
                        break label$23
                       }
                       if (($1_1 | 0) != (1718776947 | 0)) {
                        break label$20
                       }
                       if (!$2_1) {
                        break label$17
                       }
                       if (!$0_1) {
                        break label$9
                       }
                       if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                        break label$9
                       }
                       switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
                       case 0:
                        break label$24;
                       case 1:
                        break label$25;
                       default:
                        break label$9;
                       };
                      }
                      if (($1_1 | 0) == (1752331379 | 0)) {
                       break label$26
                      }
                      if (($1_1 | 0) == (1852994675 | 0)) {
                       break label$22
                      }
                      if (($1_1 | 0) != (2019847785 | 0)) {
                       break label$20
                      }
                      HEAP8[($4_1 + 3148 | 0) >> 0] = 1;
                      $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                      if (!$1_1) {
                       break label$20
                      }
                      if (HEAPU8[($4_1 + 50 | 0) >> 0] | 0) {
                       break label$20
                      }
                      HEAP32[($1_1 + 12 | 0) >> 2] = 1;
                      break label$20;
                     }
                     if ($0_1) {
                      break label$19
                     }
                     label$30 : {
                      $1_1 = $813(376 | 0) | 0;
                      if ($1_1) {
                       break label$30
                      }
                      if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
                       break label$20
                      }
                      i64toi32_i32$1 = $3_1;
                      i64toi32_i32$0 = 376;
                      HEAP32[$3_1 >> 2] = 0;
                      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      $827(2451 | 0, $3_1 | 0);
                      break label$20;
                     }
                     $218($1_1 | 0);
                     $0_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
                     HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
                     HEAP16[($1_1 + 356 | 0) >> 1] = 0;
                     HEAP32[($1_1 + 340 | 0) >> 2] = 0;
                     i64toi32_i32$1 = $1_1;
                     i64toi32_i32$0 = 0;
                     HEAP32[($1_1 + 328 | 0) >> 2] = 0;
                     HEAP32[($1_1 + 332 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
                     HEAP16[($4_1 + 44 | 0) >> 1] = 0;
                     i64toi32_i32$1 = $1_1;
                     i64toi32_i32$0 = 0;
                     HEAP32[($1_1 + 344 | 0) >> 2] = 0;
                     HEAP32[($1_1 + 348 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($1_1 + 352 | 0) >> 2] = 0;
                     HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
                     break label$20;
                    }
                    if (!$2_1) {
                     break label$18
                    }
                    if (!$0_1) {
                     break label$9
                    }
                    $5_1 = $4_1 + 2940 | 0;
                    $1_1 = $38($5_1 | 0, $2_1 | 0) | 0;
                    HEAP8[($4_1 + 44 | 0) >> 0] = $1_1;
                    if (!$1_1) {
                     break label$9
                    }
                    label$31 : {
                     label$32 : {
                      label$33 : {
                       $1_1 = HEAP32[$5_1 >> 2] | 0;
                       if (($1_1 | 0) == (1935960438 | 0)) {
                        break label$33
                       }
                       if (($1_1 | 0) != (1935963489 | 0)) {
                        break label$32
                       }
                       HEAP32[($0_1 + 4 | 0) >> 2] = 1;
                       break label$31;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = 0;
                      break label$31;
                     }
                     HEAP32[($0_1 + 4 | 0) >> 2] = 4;
                     HEAP8[($4_1 + 45 | 0) >> 0] = 1;
                    }
                    label$34 : {
                     $1_1 = HEAP32[($4_1 + 2964 | 0) >> 2] | 0;
                     if (!$1_1) {
                      break label$34
                     }
                     i64toi32_i32$2 = $4_1 + 2960 | 0;
                     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$1 = 0;
                     $174_1 = i64toi32_i32$0;
                     $174$hi = i64toi32_i32$1;
                     i64toi32_i32$2 = $4_1 + 2972 | 0;
                     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$0 = 0;
                     $177_1 = i64toi32_i32$1;
                     $177$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = $174$hi;
                     i64toi32_i32$1 = $177$hi;
                     i64toi32_i32$1 = __wasm_i64_mul($174_1 | 0, i64toi32_i32$0 | 0, $177_1 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     $25_1 = i64toi32_i32$1;
                     i64toi32_i32$1 = 0;
                     i64toi32_i32$1 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     $179$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = 0;
                     $181$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = $179$hi;
                     $26_1 = i64toi32_i32$1;
                     i64toi32_i32$1 = $181$hi;
                     i64toi32_i32$1 = __wasm_i64_udiv($26_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$1;
                    }
                    HEAP32[($0_1 + 344 | 0) >> 2] = HEAP32[($4_1 + 2976 | 0) >> 2] | 0;
                    break label$9;
                   }
                   $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                   $1_1 = $4_1 + 2996 | 0;
                   $5_1 = $260($1_1 | 0, $3_1 + 56 | 0 | 0) | 0;
                   HEAP8[($4_1 + 45 | 0) >> 0] = $5_1;
                   if (!$5_1) {
                    break label$9
                   }
                   HEAP32[($0_1 + 352 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
                   label$35 : {
                    label$36 : {
                     if (!($268($1_1 | 0) | 0)) {
                      break label$36
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 138;
                     break label$35;
                    }
                    label$37 : {
                     label$38 : {
                      label$39 : {
                       label$40 : {
                        label$41 : {
                         $5_1 = HEAPU16[$1_1 >> 1] | 0;
                         switch ($5_1 + -353 | 0 | 0) {
                         case 1:
                          break label$39;
                         case 0:
                          break label$40;
                         default:
                          break label$41;
                         };
                        }
                        if (($5_1 | 0) == (80 | 0)) {
                         break label$38
                        }
                        if (($5_1 | 0) != (85 | 0)) {
                         break label$37
                        }
                        HEAP32[($0_1 + 20 | 0) >> 2] = 1;
                        break label$35;
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 136;
                       break label$35;
                      }
                      HEAP32[($0_1 + 20 | 0) >> 2] = 137;
                      break label$35;
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 3;
                     break label$35;
                    }
                    label$42 : {
                     if (!($269($1_1 | 0) | 0)) {
                      break label$42
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 129;
                     break label$35;
                    }
                    label$43 : {
                     label$44 : {
                      label$45 : {
                       $1_1 = HEAPU16[$1_1 >> 1] | 0;
                       if (($1_1 | 0) > (99 | 0)) {
                        break label$45
                       }
                       if (($1_1 | 0) == (2 | 0)) {
                        break label$44
                       }
                       if (($1_1 | 0) != (17 | 0)) {
                        break label$43
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 143;
                       break label$35;
                      }
                      label$46 : {
                       if (($1_1 | 0) == (100 | 0)) {
                        break label$46
                       }
                       if (($1_1 | 0) != (8193 | 0)) {
                        break label$43
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 130;
                       break label$35;
                      }
                      HEAP32[($0_1 + 20 | 0) >> 2] = 142;
                      break label$35;
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 141;
                     break label$35;
                    }
                    label$47 : {
                     if (($1_1 | 0) != (255 | 0)) {
                      break label$47
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 15;
                     break label$35;
                    }
                    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
                   }
                   HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 2998 | 0) >> 0] | 0;
                   HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 3010 | 0) >> 0] | 0;
                   HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 3e3 | 0) >> 2] | 0;
                   $4_1 = (((HEAP32[($4_1 + 3004 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1e3 >>> 0) | 0;
                   HEAP16[($0_1 + 26 | 0) >> 1] = $4_1;
                   HEAP32[($0_1 + 348 | 0) >> 2] = $4_1 & 65535 | 0;
                   break label$9;
                  }
                  $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                  $1_1 = $261($3_1 + 72 | 0 | 0, $3_1 + 56 | 0 | 0) | 0;
                  HEAP8[($4_1 + 45 | 0) >> 0] = $1_1;
                  if (!$1_1) {
                   break label$9
                  }
                  $1_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
                  HEAP32[($0_1 + 352 | 0) >> 2] = $1_1;
                  HEAP32[($0_1 + 24 | 0) >> 2] = 1;
                  label$48 : {
                   label$49 : {
                    label$50 : {
                     label$51 : {
                      label$52 : {
                       if (($1_1 | 0) > (875967079 | 0)) {
                        break label$52
                       }
                       label$53 : {
                        if (($1_1 | 0) > (844313676 | 0)) {
                         break label$53
                        }
                        label$54 : {
                         if (($1_1 | 0) > (826496598 | 0)) {
                          break label$54
                         }
                         label$55 : {
                          if (($1_1 | 0) > (808802371 | 0)) {
                           break label$55
                          }
                          if (($1_1 | 0) == (541283905 | 0)) {
                           break label$12
                          }
                          if (($1_1 | 0) == (543389281 | 0)) {
                           break label$12
                          }
                          break label$14;
                         }
                         if (($1_1 | 0) == (808802372 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) == (808810596 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) == (826496577 | 0)) {
                          break label$12
                         }
                         break label$14;
                        }
                        label$56 : {
                         if (($1_1 | 0) > (828601952 | 0)) {
                          break label$56
                         }
                         if (($1_1 | 0) == (826496599 | 0)) {
                          break label$13
                         }
                         if (($1_1 | 0) != (827738419 | 0)) {
                          break label$14
                         }
                         break label$48;
                        }
                        if (($1_1 | 0) == (828601953 | 0)) {
                         break label$12
                        }
                        if (($1_1 | 0) == (828601975 | 0)) {
                         break label$13
                        }
                        if (($1_1 | 0) != (829843763 | 0)) {
                         break label$14
                        }
                        break label$48;
                       }
                       label$57 : {
                        if (($1_1 | 0) > (859074668 | 0)) {
                         break label$57
                        }
                        label$58 : {
                         if (($1_1 | 0) > (846410860 | 0)) {
                          break label$58
                         }
                         if (($1_1 | 0) == (844313677 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) != (844515635 | 0)) {
                          break label$14
                         }
                         break label$48;
                        }
                        if (($1_1 | 0) == (846410861 | 0)) {
                         break label$48
                        }
                        if (($1_1 | 0) == (846620979 | 0)) {
                         break label$48
                        }
                        if (($1_1 | 0) == (859066445 | 0)) {
                         break label$51
                        }
                        break label$14;
                       }
                       label$59 : {
                        if (($1_1 | 0) > (863398243 | 0)) {
                         break label$59
                        }
                        if (($1_1 | 0) == (859074669 | 0)) {
                         break label$51
                        }
                        if (($1_1 | 0) == (861292868 | 0)) {
                         break label$51
                        }
                        if (($1_1 | 0) != (861293911 | 0)) {
                         break label$14
                        }
                        break label$11;
                       }
                       if (($1_1 | 0) == (863398244 | 0)) {
                        break label$51
                       }
                       if (($1_1 | 0) == (863399287 | 0)) {
                        break label$11
                       }
                       if (($1_1 | 0) != (875967048 | 0)) {
                        break label$14
                       }
                       break label$12;
                      }
                      if (($1_1 | 0) > (1145656919 | 0)) {
                       break label$49
                      }
                      if (($1_1 | 0) > (894847299 | 0)) {
                       break label$50
                      }
                      label$60 : {
                       if (($1_1 | 0) > (878070083 | 0)) {
                        break label$60
                       }
                       if (($1_1 | 0) == (875967080 | 0)) {
                        break label$12
                       }
                       if (($1_1 | 0) != (877677894 | 0)) {
                        break label$14
                       }
                       break label$48;
                      }
                      if (($1_1 | 0) == (878070084 | 0)) {
                       break label$51
                      }
                      if (($1_1 | 0) == (879783270 | 0)) {
                       break label$48
                      }
                      if (($1_1 | 0) != (880175460 | 0)) {
                       break label$14
                      }
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 785;
                     break label$10;
                    }
                    label$61 : {
                     if (($1_1 | 0) > (911624515 | 0)) {
                      break label$61
                     }
                     if (($1_1 | 0) == (894847300 | 0)) {
                      break label$48
                     }
                     if (($1_1 | 0) != (896952676 | 0)) {
                      break label$14
                     }
                     break label$48;
                    }
                    if (($1_1 | 0) == (911624516 | 0)) {
                     break label$48
                    }
                    if (($1_1 | 0) == (913729892 | 0)) {
                     break label$48
                    }
                    if (($1_1 | 0) != (1096174935 | 0)) {
                     break label$14
                    }
                    break label$13;
                   }
                   label$62 : {
                    label$63 : {
                     label$64 : {
                      if (($1_1 | 0) > (1635151222 | 0)) {
                       break label$64
                      }
                      label$65 : {
                       if (($1_1 | 0) > (1213420373 | 0)) {
                        break label$65
                       }
                       if (($1_1 | 0) == (1145656920 | 0)) {
                        break label$48
                       }
                       if (($1_1 | 0) != (1196444237 | 0)) {
                        break label$14
                       }
                       break label$63;
                      }
                      if (($1_1 | 0) == (1213420374 | 0)) {
                       break label$12
                      }
                      if (($1_1 | 0) == (1395937357 | 0)) {
                       break label$48
                      }
                      if (($1_1 | 0) == (1482049860 | 0)) {
                       break label$48
                      }
                      break label$14;
                     }
                     if (($1_1 | 0) > (1752396661 | 0)) {
                      break label$62
                     }
                     if (($1_1 | 0) == (1635151223 | 0)) {
                      break label$13
                     }
                     if (($1_1 | 0) == (1684633208 | 0)) {
                      break label$48
                     }
                     if (($1_1 | 0) != (1735420525 | 0)) {
                      break label$14
                     }
                    }
                    HEAP32[($0_1 + 20 | 0) >> 2] = 245;
                    break label$10;
                   }
                   if (($1_1 | 0) == (1752396662 | 0)) {
                    break label$12
                   }
                   if (($1_1 | 0) == (2021026148 | 0)) {
                    break label$48
                   }
                   if (($1_1 | 0) != (1932816493 | 0)) {
                    break label$14
                   }
                  }
                  HEAP32[($0_1 + 20 | 0) >> 2] = 16;
                  break label$10;
                 }
                 if (!$2_1) {
                  break label$16
                 }
                 if (!$0_1) {
                  break label$9
                 }
                 if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                  break label$9
                 }
                 if (!(HEAPU8[($4_1 + 45 | 0) >> 0] | 0)) {
                  break label$9
                 }
                 $4_1 = $756($2_1 | 0) | 0;
                 $1_1 = $813($4_1 | 0) | 0;
                 HEAP32[($0_1 + 332 | 0) >> 2] = $4_1;
                 HEAP32[($0_1 + 328 | 0) >> 2] = $1_1;
                 $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                 $768($3_1 + 56 | 0 | 0, HEAP32[($0_1 + 328 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 332 | 0) >> 2] | 0 | 0) | 0;
                 HEAP8[($0_1 + 356 | 0) >> 0] = 1;
                 break label$9;
                }
                if (!$2_1) {
                 break label$15
                }
                if (!$0_1) {
                 break label$9
                }
                $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                $768($3_1 + 56 | 0 | 0, $3_1 + 72 | 0 | 0, 8 | 0) | 0;
                $4_1 = 0;
                if ((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                 break label$9
                }
                if ($824($3_1 + 72 | 0 | 0, 2380 | 0, 8 | 0) | 0) {
                 break label$9
                }
                label$66 : {
                 label$67 : while (1) {
                  label$68 : {
                   $5_1 = $772($3_1 + 56 | 0 | 0) | 0;
                   if (($5_1 | 0) != (59 | 0)) {
                    break label$68
                   }
                   $1_1 = $4_1;
                   break label$66;
                  }
                  $1_1 = 0;
                  if ((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                   break label$66
                  }
                  HEAP8[(($0_1 + $4_1 | 0) + 357 | 0) >> 0] = $5_1;
                  $1_1 = 15;
                  $4_1 = $4_1 + 1 | 0;
                  if (($4_1 | 0) != (15 | 0)) {
                   continue label$67
                  }
                  break label$67;
                 };
                }
                HEAP8[(($0_1 + $1_1 | 0) + 357 | 0) >> 0] = 0;
                break label$20;
               }
               if (!$0_1) {
                break label$20
               }
               $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
               if (!$1_1) {
                break label$20
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = 0;
               label$69 : {
                label$70 : {
                 if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                  break label$70
                 }
                 if (HEAPU8[($4_1 + 45 | 0) >> 0] | 0) {
                  break label$69
                 }
                }
                $815($0_1 | 0);
                break label$20;
               }
               label$71 : {
                label$72 : {
                 switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
                 case 1:
                  $1_1 = $4_1 + 216 | 0;
                  $5_1 = $1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0;
                  HEAP32[$5_1 >> 2] = $0_1;
                  $498_1 = $5_1 + 88 | 0;
                  $5_1 = $4_1 + 2940 | 0;
                  $973($498_1 | 0, $5_1 | 0, 56 | 0) | 0;
                  $41(($1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0) + 24 | 0 | 0);
                  $42(($1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0) + 24 | 0 | 0, $5_1 | 0, $4_1 + 2996 | 0 | 0);
                  HEAP32[($4_1 + 2936 | 0) >> 2] = (HEAP32[($4_1 + 2936 | 0) >> 2] | 0) + 1 | 0;
                  $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  break label$71;
                 case 0:
                  break label$72;
                 default:
                  break label$71;
                 };
                }
                if ((HEAP32[($0_1 + 336 | 0) >> 2] | 0 | 0) != (2 | 0)) {
                 break label$71
                }
                HEAP32[($4_1 + 2776 | 0) >> 2] = $0_1;
                $973($4_1 + 2864 | 0 | 0, $4_1 + 2940 | 0 | 0, 56 | 0) | 0;
               }
               $215($1_1 | 0, $0_1 | 0);
              }
              if (!$2_1) {
               break label$8
              }
              break label$9;
             }
             $859(2439 | 0, 2159 | 0, 277 | 0);
             abort();
            }
            $859(2496 | 0, 2159 | 0, 299 | 0);
            abort();
           }
           $859(2496 | 0, 2159 | 0, 325 | 0);
           abort();
          }
          $859(2496 | 0, 2159 | 0, 424 | 0);
          abort();
         }
         $859(2496 | 0, 2159 | 0, 442 | 0);
         abort();
        }
        HEAP32[($0_1 + 20 | 0) >> 2] = 0;
        break label$10;
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 234;
       break label$10;
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = 27;
      if (HEAP32[($4_1 + 208 | 0) >> 2] | 0) {
       break label$10
      }
      HEAP32[($4_1 + 208 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
      $5_1 = ($1_1 >>> 0) / (10 >>> 0) | 0;
      $1_1 = ($5_1 >>> 0) % (10 >>> 0) | 0 | (($1_1 - Math_imul($5_1, 10) | 0) << 8 | 0) | 0;
      $2(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 120 | 0 | 0, $1_1 | 1667510320 | 0 | 0, 9 | 0);
      $2(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 136 | 0 | 0, $1_1 | 1650733104 | 0 | 0, 9 | 0);
      $1_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
      break label$10;
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = 235;
    }
    HEAP16[($0_1 + 28 | 0) >> 1] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
    HEAP16[($0_1 + 30 | 0) >> 1] = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    label$74 : {
     label$75 : {
      if (($1_1 | 0) == (1112758340 | 0)) {
       break label$75
      }
      if (($1_1 | 0) != (1095981124 | 0)) {
       break label$74
      }
      HEAP32[($0_1 + 336 | 0) >> 2] = 0;
      break label$9;
     }
     HEAP32[($0_1 + 336 | 0) >> 2] = 1;
     break label$9;
    }
    HEAP32[($0_1 + 336 | 0) >> 2] = 2;
   }
   $735($2_1 | 0);
  }
  label$76 : {
   $14_1 = $3_1 + 112 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $31($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $111_1 = 0, $111$hi = 0, $113_1 = 0, $113$hi = 0, $21_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $12_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 48 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 16 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   $827(2586 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 511 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1751936356 | 0)) {
    break label$8
   }
   label$9 : {
    if ($40($3_1 + 56 | 0 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    if (!($834(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $827(2639 | 0, $3_1 | 0);
    break label$8;
   }
   HEAP8[($4_1 + 48 | 0) >> 0] = 1;
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   if (!(HEAPU8[($4_1 + 49 | 0) >> 0] | 0)) {
    break label$8
   }
   i64toi32_i32$0 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = 0;
   $111_1 = i64toi32_i32$0;
   $111$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $113_1 = i64toi32_i32$1;
   $113$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $111$hi;
   i64toi32_i32$1 = $113$hi;
   i64toi32_i32$1 = __wasm_i64_mul($111_1 | 0, i64toi32_i32$0 | 0, $113_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  }
  label$10 : {
   if (!$2_1) {
    break label$10
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $14_1 = $3_1 + 64 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $32($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $12_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $10_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(2687 | 0, $3_1 | 0);
  }
  label$6 : {
   if ($1_1) {
    break label$6
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = 2;
   HEAP8[($4_1 + 50 | 0) >> 0] = 1;
  }
  label$7 : {
   if (!$2_1) {
    break label$7
   }
   $735($2_1 | 0);
  }
  label$8 : {
   $14_1 = $3_1 + 48 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 675 | 0);
  }
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 56 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 72 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 88 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 104 | 0 | 0);
  $17(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 3152 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $34($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $4_1 = 0, $10$hi = 0, $6_1 = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $34_1 = 0, $9_1 = 0, $8_1 = 0, $48_1 = 0, $54_1 = 0, $56$hi = 0, $78_1 = 0, $112_1 = 0, $114_1 = 0, $114$hi = 0, $116_1 = 0, $116$hi = 0, $137_1 = 0, $143_1 = 0, $145$hi = 0, $167_1 = 0, $185$hi = 0, $201$hi = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 694 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
    break label$5
   }
   HEAP32[($0_1 + 52 | 0) >> 2] = 0;
   HEAP16[($0_1 + 46 | 0) >> 1] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   HEAP32[($0_1 + 208 | 0) >> 2] = 0;
   HEAP8[($0_1 + 3148 | 0) >> 0] = 0;
   HEAP32[($0_1 + 2936 | 0) >> 2] = 0;
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = -1;
   HEAP32[($0_1 + 16 | 0) >> 2] = -1;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $34_1 = 0;
   HEAP8[($0_1 + 49 | 0) >> 0] = $34_1;
   HEAP8[($0_1 + 50 | 0) >> 0] = $34_1 >>> 8 | 0;
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$1;
     HEAP32[($4_1 + 56 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
     $48_1 = $4_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($48_1 + 52 | 0) >> 2] = i64toi32_i32$4;
     $827(2759 | 0, $4_1 + 48 | 0 | 0);
    }
    label$8 : {
     $54_1 = $1_1;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $56$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $56$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $5_1 = $50($54_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     $6_1 = $756($5_1 | 0) | 0;
     label$9 : {
      if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 40 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
      $78_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      HEAP32[($78_1 + 36 | 0) >> 2] = i64toi32_i32$5;
      $827(2795 | 0, $4_1 + 32 | 0 | 0);
     }
     $797($2_1 | 0, $5_1 | 0);
     if (($18(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($6_1 | 0)) {
      break label$8
     }
     if (HEAPU8[($0_1 + 47 | 0) >> 0] | 0) {
      break label$8
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 46 | 0) >> 0] | 0)) {
       break label$10
      }
      $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$8
      }
      label$11 : {
       if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
        break label$11
       }
       if (HEAP32[($5_1 + 12 | 0) >> 2] | 0) {
        break label$11
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 2;
       if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
        break label$11
       }
       $796($2_1 | 0);
       $112_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $114_1 = i64toi32_i32$0;
       $114$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$0 = 0;
       $116_1 = i64toi32_i32$2;
       $116$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $114$hi;
       i64toi32_i32$1 = $114_1;
       i64toi32_i32$2 = $116$hi;
       i64toi32_i32$3 = $116_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       $6($112_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0) | 0;
       HEAP8[($0_1 + 46 | 0) >> 0] = 1;
       $7_1 = 0;
       label$12 : {
        label$13 : {
         label$14 : while (1) {
          if ($7_1 >>> 0 > 65535 >>> 0) {
           break label$13
          }
          $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$12
          }
          label$15 : {
           if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $11$hi = i64toi32_i32$1;
           HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
           HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
           $137_1 = $4_1;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$0 = i64toi32_i32$5;
           i64toi32_i32$5 = $10$hi;
           i64toi32_i32$3 = $10_1;
           i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           HEAP32[($137_1 + 20 | 0) >> 2] = i64toi32_i32$2;
           $827(2836 | 0, $4_1 + 16 | 0 | 0);
          }
          $143_1 = $1_1;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $145$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $145$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $6_1 = $50($143_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
          if (!$6_1) {
           break label$13
          }
          $5_1 = $756($6_1 | 0) | 0;
          label$16 : {
           if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $11$hi = i64toi32_i32$1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           HEAP32[$4_1 >> 2] = $0_1;
           $167_1 = $4_1;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$0 = i64toi32_i32$2;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$3 = $10_1;
           i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           HEAP32[($167_1 + 4 | 0) >> 2] = i64toi32_i32$4;
           $827(2878 | 0, $4_1 | 0);
          }
          $797($2_1 | 0, $6_1 | 0);
          if (($18(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($5_1 | 0)) {
           break label$13
          }
          $7_1 = $5_1 + $7_1 | 0;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$5 = 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$0 = $185$hi;
          i64toi32_i32$3 = $5_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $10_1 = i64toi32_i32$2;
          $10$hi = i64toi32_i32$4;
          if (!(HEAPU8[($0_1 + 47 | 0) >> 0] | 0)) {
           continue label$14
          }
          break label$14;
         };
        }
        $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       }
       if (!$5_1) {
        break label$8
       }
      }
      if (!(HEAPU8[($3_1 + 9 | 0) >> 0] | 0)) {
       break label$8
      }
      $35($0_1 | 0, $1_1 | 0);
      break label$8;
     }
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = 0;
     $201$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$1 = $201$hi;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 262145;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      continue label$6
     }
    }
    break label$6;
   };
   label$17 : {
    if (!(HEAP32[($0_1 + 208 | 0) >> 2] | 0)) {
     break label$17
    }
    $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 120 | 0 | 0);
    $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 136 | 0 | 0);
   }
   $5(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$18 : {
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$18
    }
    label$19 : {
     $5_1 = HEAP32[$6_1 >> 2] | 0;
     if (!$5_1) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
        break label$21
       }
       if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
        break label$18
       }
      }
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if ($5_1) {
       continue label$20
      }
      break label$20;
     };
    }
    if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$18
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = 4;
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   label$22 : {
    $9_1 = $4_1 + 64 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(2739 | 0, 2159 | 0, 695 | 0);
  abort();
 }
 
 function $35($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $17$hi = 0, i64toi32_i32$5 = 0, $17_1 = 0, $2_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$6 = 0, $11_1 = 0, $14_1 = 0, $18$hi = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $16_1 = 0, $15_1 = 0, $113$hi = 0, $118$hi = 0, $46_1 = 0, $47_1 = 0, $120_1 = 0, $120$hi = 0, $122_1 = 0, $122$hi = 0, $12_1 = 0, $13_1 = 0, $18_1 = 0, $210_1 = 0, $210$hi = 0, $213_1 = 0, $213$hi = 0, $221_1 = 0, $221$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $15_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   if (HEAPU8[($0_1 + 3148 | 0) >> 0] | 0) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
    break label$3
   }
   $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   if (!(HEAP32[($0_1 + 2776 | 0) >> 2] | 0)) {
    break label$3
   }
   label$4 : {
    i64toi32_i32$1 = $17$hi;
    $4_1 = $50($1_1 | 0, $17_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, $2_1 + 28 | 0 | 0) | 0;
    if ($4_1) {
     break label$4
    }
    if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(2923 | 0, $2_1 | 0);
    break label$3;
   }
   $5_1 = $0_1 + 2920 | 0;
   $762($5_1 | 0, $4_1 | 0);
   label$5 : {
    if (!(HEAP32[($0_1 + 2936 | 0) >> 2] | 0)) {
     break label$5
    }
    $1_1 = 0;
    label$6 : while (1) {
     $762(($0_1 + Math_imul($1_1, 160) | 0) + 360 | 0 | 0, $4_1 | 0);
     if ($1_1 >>> 0 > 14 >>> 0) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 >>> 0 < (HEAP32[($0_1 + 2936 | 0) >> 2] | 0) >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    if (($770($5_1 | 0) | 0) >>> 0 < 16 >>> 0) {
     break label$7
    }
    label$8 : while (1) {
     $1_1 = $776($5_1 | 0) | 0;
     $776($5_1 | 0) | 0;
     $3_1 = $776($5_1 | 0) | 0;
     $776($5_1 | 0) | 0;
     label$9 : {
      if ((HEAP32[((HEAP32[($0_1 + 2776 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (((($1_1 >>> 8 | 0) & 255 | 0) + Math_imul($1_1 & 255 | 0, 10) | 0) + -527 | 0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 0;
      $17_1 = $3_1;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 2784 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 2788 | 0) >> 2] = i64toi32_i32$0;
      $1_1 = HEAP32[($0_1 + 2796 | 0) >> 2] | 0;
      HEAP32[($0_1 + 2796 | 0) >> 2] = $1_1 + 1 | 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 2884 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      $113$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $118$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $113$hi;
      $46_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $118$hi;
      i64toi32_i32$0 = __wasm_i64_mul($46_1 | 0, i64toi32_i32$1 | 0, $1_1 + (HEAP32[($0_1 + 2892 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $47_1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$0 = __wasm_i64_mul($47_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $120_1 = i64toi32_i32$0;
      $120$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = HEAP32[($0_1 + 2888 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $122_1 = i64toi32_i32$1;
      $122$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $120$hi;
      i64toi32_i32$1 = $122$hi;
      i64toi32_i32$1 = __wasm_i64_udiv($120_1 | 0, i64toi32_i32$0 | 0, $122_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1_1 = i64toi32_i32$1;
      HEAP32[($0_1 + 2780 | 0) >> 2] = i64toi32_i32$1;
      $6_1 = 0;
      if (!(HEAP32[($0_1 + 2936 | 0) >> 2] | 0)) {
       break label$9
      }
      label$10 : while (1) {
       $3_1 = $0_1 + Math_imul($6_1, 160) | 0;
       $7_1 = $3_1 + 224 | 0;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$1 = $7_1;
       HEAP32[i64toi32_i32$1 >> 2] = $17_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$11 : {
        $8_1 = $3_1 + 220 | 0;
        if ((HEAP32[$8_1 >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
         break label$11
        }
        $1_1 = $3_1 + 360 | 0;
        $9_1 = $3_1 + 232 | 0;
        $10_1 = $3_1 + 236 | 0;
        $11_1 = $3_1 + 240 | 0;
        $12_1 = $3_1 + 216 | 0;
        label$12 : {
         label$13 : while (1) {
          if (($770($1_1 | 0) | 0) >>> 0 < 16 >>> 0) {
           break label$12
          }
          $3_1 = $776($1_1 | 0) | 0;
          $776($1_1 | 0) | 0;
          $13_1 = $776($1_1 | 0) | 0;
          $14_1 = $776($1_1 | 0) | 0;
          label$14 : {
           label$15 : {
            if ((HEAP32[((HEAP32[$12_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (((($3_1 >>> 8 | 0) & 255 | 0) + Math_imul($3_1 & 255 | 0, 10) | 0) + -527 | 0 | 0)) {
             break label$15
            }
            $3_1 = HEAP32[$8_1 >> 2] | 0;
            break label$14;
           }
           $43($11_1 | 0, $14_1 | 0);
           $3_1 = $44($11_1 | 0, HEAP32[$10_1 >> 2] | 0 | 0, HEAP32[$9_1 >> 2] | 0 | 0) | 0;
           HEAP32[$8_1 >> 2] = $3_1;
           HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $14_1 | 0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$1 = $7_1;
           HEAP32[i64toi32_i32$1 >> 2] = $13_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
          }
          if ($3_1 >>> 0 < (HEAP32[($0_1 + 2780 | 0) >> 2] | 0) >>> 0) {
           continue label$13
          }
          break label$13;
         };
        }
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$1;
       }
       label$16 : {
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[($0_1 + 2784 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 2788 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$3 = $17_1;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        $210_1 = i64toi32_i32$4;
        $210$hi = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = $17$hi - i64toi32_i32$4 | 0;
        $213_1 = i64toi32_i32$1;
        $213$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$3 = $17_1;
        if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
         $40_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $41_1 = 0
          } else {
           $41_1 = 1
          }
          $42_1 = $41_1;
         } else {
          $42_1 = 0
         }
         $40_1 = $42_1;
        }
        i64toi32_i32$2 = $40_1;
        i64toi32_i32$5 = $210$hi;
        i64toi32_i32$4 = $213$hi;
        i64toi32_i32$0 = i64toi32_i32$2 ? $210_1 : $213_1;
        i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$3;
        i64toi32_i32$2 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $221_1 = i64toi32_i32$3;
        $221$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$3 = $221$hi;
        i64toi32_i32$5 = $221_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
         $43_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
           $44_1 = 0
          } else {
           $44_1 = 1
          }
          $45_1 = $44_1;
         } else {
          $45_1 = 0
         }
         $43_1 = $45_1;
        }
        if ($43_1) {
         break label$16
        }
        label$17 : {
         if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$17
         }
         if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$17
         }
         $1_1 = HEAP32[($0_1 + 2780 | 0) >> 2] | 0;
         i64toi32_i32$2 = $17$hi;
         HEAP32[($2_1 + 20 | 0) >> 2] = $17_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
         $827(3062 | 0, $2_1 + 16 | 0 | 0);
        }
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $17_1;
        HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
       }
       $6_1 = $6_1 + 1 | 0;
       if ($6_1 >>> 0 >= (HEAP32[($0_1 + 2936 | 0) >> 2] | 0) >>> 0) {
        break label$9
       }
       $1_1 = HEAP32[($0_1 + 2780 | 0) >> 2] | 0;
       i64toi32_i32$5 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 2784 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 2788 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$0;
       continue label$10;
      };
     }
     if (($770($5_1 | 0) | 0) >>> 0 > 15 >>> 0) {
      continue label$8
     }
     break label$8;
    };
   }
   $735($4_1 | 0);
  }
  label$18 : {
   $16_1 = $2_1 + 32 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 792 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = 0;
       break label$6;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     label$8 : {
      $2_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$8
      }
      $815($2_1 | 0);
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $815($1_1 | 0);
   return;
  }
  $859(3102 | 0, 2159 | 0, 795 | 0);
  abort();
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    label$5 : {
     $5_1 = HEAP32[($4_1 + 208 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (27 | 0)) {
      break label$3
     }
     $762($3_1 + 16 | 0 | 0, $2_1 | 0);
     label$6 : while (1) {
      $0_1 = $262($3_1 + 16 | 0 | 0, -1 | 0) | 0;
      if (!$0_1) {
       break label$5
      }
      if (($0_1 & 135 | 0 | 0) != (7 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $247($5_1 + 36 | 0 | 0, $3_1 + 8 | 0 | 0, $768($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0, 8 | 0) | 0 | 0) | 0;
     HEAP8[($4_1 + 46 | 0) >> 0] = 1;
    }
    $735($2_1 | 0);
   }
   $0_1 = HEAPU8[($4_1 + 46 | 0) >> 0] | 0;
   label$7 : {
    $7_1 = $3_1 + 32 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return $0_1 | 0;
  }
  $859(2503 | 0, 2159 | 0, 564 | 0);
  abort();
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $7$hi = 0, $4_1 = 0, $119_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $762($2_1 + 48 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 16 | 0) >> 1] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  $1_1 = $776($2_1 + 48 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
  label$3 : {
   if (($771($2_1 + 48 | 0 | 0, 8 | 0) | 0) >>> 0 < 8 >>> 0) {
    break label$3
   }
   HEAP16[($0_1 + 48 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 50 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 52 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 54 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  }
  label$4 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU16[($0_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
   $119_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $119_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 1 | 0 ? 3214 : 3224;
   HEAP32[($2_1 + 12 | 0) >> 2] = $1_1 >>> 24 | 0;
   HEAP32[$2_1 >> 2] = $1_1 & 255 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
   $827(3109 | 0, $2_1 | 0);
  }
  $0_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
  label$5 : {
   $6_1 = $2_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $7$hi = 0, $4_1 = 0, $94_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $762($2_1 + 48 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  $1_1 = 0;
  label$3 : while (1) {
   HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 40 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (4 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
   $94_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $94_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1 + 32 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 & 32 | 0 ? 3351 : 3224;
   HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 & 256 | 0 ? 3365 : 3224;
   HEAP32[$2_1 >> 2] = $1_1 & 16 | 0 ? 3341 : 3224;
   $827(3225 | 0, $2_1 | 0);
  }
  $1_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
  label$5 : {
   $6_1 = $2_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return ($1_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $762($2_1 + 16 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   $827(3380 | 0, $2_1 | 0);
  }
  $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  label$4 : {
   $4_1 = $2_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(3411 | 0, 3417 | 0, 107 | 0);
   abort();
  }
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if (!$1_1) {
      break label$4
     }
     if (!$2_1) {
      break label$3
     }
     HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
     $5_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP16[($0_1 + 56 | 0) >> 1] = $5_1;
     HEAP32[($0_1 + 60 | 0) >> 2] = 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$4_1) {
         break label$8
        }
        label$9 : {
         label$10 : {
          label$11 : {
           $6_1 = HEAPU16[$2_1 >> 1] | 0;
           if (($6_1 | 0) != (80 | 0)) {
            break label$11
           }
           $6_1 = 64512e3;
           break label$10;
          }
          if (($6_1 | 0) != (85 | 0)) {
           break label$9
          }
          $6_1 = 4608e4;
         }
         HEAP32[($0_1 + 28 | 0) >> 2] = ($6_1 >>> 0) / ($4_1 >>> 0) | 0;
        }
        $6_1 = 1152e3;
        if ($4_1 >>> 0 > 31999 >>> 0) {
         break label$6
        }
        if (($5_1 | 0) != (1152 | 0)) {
         break label$7
        }
        break label$6;
       }
       $6_1 = 1152e3;
       if (($5_1 | 0) == (1152 | 0)) {
        break label$6
       }
      }
      $6_1 = 576e3;
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = $6_1;
     label$12 : {
      label$13 : {
       if (!($268($2_1 | 0) | 0)) {
        break label$13
       }
       $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $5_1 = HEAPU16[($2_1 + 14 | 0) >> 1] | 0;
       $4_1 = HEAPU16[($2_1 + 2 | 0) >> 1] | 0;
       HEAP32[($0_1 + 24 | 0) >> 2] = 8;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[($0_1 + 52 | 0) >> 2] = Math_imul($1_1, Math_imul($5_1, $4_1));
       break label$12;
      }
      label$14 : {
       if ((((HEAPU16[$2_1 >> 1] | 0) + -353 | 0) & 65535 | 0) >>> 0 > 1 >>> 0) {
        break label$14
       }
       HEAP32[$0_1 >> 2] = 0;
       break label$12;
      }
      label$15 : {
       if (!($269($2_1 | 0) | 0)) {
        break label$15
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = 129;
       HEAP32[($0_1 + 20 | 0) >> 2] = 1536e3;
       HEAP32[$0_1 >> 2] = (HEAPU16[($0_1 + 56 | 0) >> 1] | 0 | 0) == (4 | 0) ? 1 : 2;
       break label$12;
      }
      label$16 : {
       if ((HEAPU16[$2_1 >> 1] | 0 | 0) != (255 | 0)) {
        break label$16
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 1024e3;
       HEAP32[$0_1 >> 2] = 1;
       break label$12;
      }
      label$17 : {
       label$18 : {
        $4_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
        if (($4_1 | 0) == (1152 | 0)) {
         break label$18
        }
        $5_1 = 0;
        if (($4_1 | 0) != (576 | 0)) {
         break label$17
        }
       }
       $5_1 = 2;
      }
      HEAP32[$0_1 >> 2] = $5_1;
      if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0) >>> 0 < 125e3 >>> 0) {
       break label$12
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     }
     label$19 : {
      if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$19
      }
      if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$19
      }
      $2_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
      $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(3503 | 0, $3_1 | 0);
     }
     label$20 : {
      $8_1 = $3_1 + 32 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return;
    }
    $859(3411 | 0, 3417 | 0, 127 | 0);
    abort();
   }
   $859(3491 | 0, 3417 | 0, 128 | 0);
   abort();
  }
  $859(3498 | 0, 3417 | 0, 129 | 0);
  abort();
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $165_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if ($3_1 >>> 0 < 2 >>> 0) {
     break label$4
    }
    label$5 : {
     if ((HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) != (129 | 0)) {
      break label$5
     }
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     if ((HEAPU16[($0_1 + 56 | 0) >> 1] | 0) >>> 0 >= $1_1 >>> 0) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = 0;
     break label$4;
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$8
       }
       $5_1 = $1_1;
       $6_1 = $0_1 + 12 | 0;
       $7_1 = HEAP32[$6_1 >> 2] | 0;
       if ($7_1 >>> 0 > $1_1 >>> 0) {
        break label$7
       }
       label$9 : {
        if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 < $1_1 >>> 0) {
         break label$9
        }
        $5_1 = $7_1;
        break label$6;
       }
       $6_1 = $0_1 + 16 | 0;
       $5_1 = $7_1;
       break label$7;
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
      $6_1 = $0_1 + 16 | 0;
      $5_1 = $1_1;
     }
     HEAP32[$6_1 >> 2] = $1_1;
    }
    label$10 : {
     switch ($3_1 + -2 | 0 | 0) {
     case 0:
      label$12 : {
       $3_1 = HEAPU16[($0_1 + 56 | 0) >> 1] | 0;
       if (($3_1 | 0) == (576 | 0)) {
        break label$12
       }
       if (($3_1 | 0) == (1152 | 0)) {
        break label$12
       }
       HEAP32[$0_1 >> 2] = 0;
       break label$4;
      }
      label$13 : {
       if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
        break label$13
       }
       label$14 : {
        if (!$5_1) {
         break label$14
        }
        label$15 : {
         $3_1 = ($1_1 >>> 0) / ($5_1 >>> 0) | 0;
         if ($1_1 - Math_imul($3_1, $5_1) | 0) {
          break label$15
         }
         if ($3_1 >>> 0 < 8 >>> 0) {
          break label$14
         }
        }
        HEAP32[$0_1 >> 2] = 1;
        break label$4;
       }
       HEAP32[$0_1 >> 2] = 3;
       break label$4;
      }
      if ($4_1 >>> 0 < 101 >>> 0) {
       break label$4
      }
      HEAP32[$0_1 >> 2] = 1;
      break label$4;
     case 1:
      break label$10;
     default:
      break label$4;
     };
    }
    label$16 : {
     if ((HEAPU16[($0_1 + 56 | 0) >> 1] | 0) >>> 0 <= $1_1 >>> 0) {
      break label$16
     }
     $3_1 = $44($0_1 | 0, $4_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$0_1 >> 2] = 2;
     $6_1 = $44($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = ($3_1 - $6_1 | 0) + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
     if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($2_1 + 40 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
     $827(3580 | 0, $2_1 + 32 | 0 | 0);
     break label$4;
    }
    if ($4_1 >>> 0 < 101 >>> 0) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = 0;
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
   label$17 : {
    if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$17
    }
    if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$17
    }
    $3_1 = 3700;
    label$18 : {
     label$19 : {
      label$20 : {
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       switch ($6_1 | 0) {
       case 0:
        break label$18;
       case 1:
        break label$19;
       default:
        break label$20;
       };
      }
      $3_1 = ($6_1 | 0) == (2 | 0) ? 3708 : 3718;
      break label$18;
     }
     $3_1 = 3704;
    }
    i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    $165_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $165_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(3632 | 0, $2_1 | 0);
   }
   label$21 : {
    $9_1 = $2_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return;
  }
  $859(3411 | 0, 3417 | 0, 191 | 0);
  abort();
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $44_1 = 0, $49$hi = 0, $51$hi = 0, $52$hi = 0, $54$hi = 0, $17_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$6
      }
      $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if ($5_1) {
       break label$5
      }
     }
     $4_1 = 0;
     if (!($834(61560 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[$3_1 >> 2] = $0_1;
     $827(3728 | 0, $3_1 | 0);
     break label$4;
    }
    label$7 : {
     label$8 : {
      switch (HEAP32[$0_1 >> 2] | 0 | 0) {
      case 0:
      case 3:
       $6_1 = Math_imul(HEAP32[($0_1 + 24 | 0) >> 2] | 0, 1e3);
       $7_1 = $2_1;
       $4_1 = $5_1;
       break label$7;
      default:
       $859(3785 | 0, 3417 | 0, 278 | 0);
       abort();
      case 1:
      case 2:
       break label$8;
      };
     }
     $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $7_1 = $1_1;
    }
    $44_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $49$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $49$hi;
    i64toi32_i32$1 = $51$hi;
    i64toi32_i32$1 = __wasm_i64_mul((HEAP32[($0_1 + 44 | 0) >> 2] | 0) + $7_1 | 0 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $54$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $52$hi;
    $17_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $54$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($17_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $4_1 = $44_1 + i64toi32_i32$1 | 0;
    if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $5_1 = 3700;
    label$11 : {
     label$12 : {
      label$13 : {
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       switch ($6_1 | 0) {
       case 0:
        break label$11;
       case 1:
        break label$12;
       default:
        break label$13;
       };
      }
      $5_1 = ($6_1 | 0) == (2 | 0) ? 3708 : 3718;
      break label$11;
     }
     $5_1 = 3704;
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    $827(3787 | 0, $3_1 + 16 | 0 | 0);
   }
   label$14 : {
    $9_1 = $3_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $4_1 | 0;
  }
  $859(3411 | 0, 3417 | 0, 262 | 0);
  abort();
 }
 
 function $45($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $7_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $64$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if (($1$hi | 0) > (i64toi32_i32$1 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       break label$6
      }
      $5_1 = 1;
      $2_1 = 0;
      if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      i64toi32_i32$2 = $1$hi;
      HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(4568 | 0, $4_1 | 0);
      break label$5;
     }
     label$7 : {
      label$8 : while (1) {
       $5_1 = 0;
       if (!$2_1) {
        break label$7
       }
       label$9 : {
        i64toi32_i32$2 = $1$hi;
        $6_1 = $46($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
        if ($6_1) {
         break label$9
        }
        $5_1 = 5;
        if (FUNCTION_TABLE[HEAP32[($0_1 + 92 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0) | 0) {
         break label$7
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$0 = $0_1;
        HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
        HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
        HEAP8[($0_1 + 48 | 0) >> 0] = 1;
        $2_1 = 0;
        if (!$3_1) {
         break label$4
        }
        HEAP32[$3_1 >> 2] = 4;
        break label$4;
       }
       i64toi32_i32$2 = $1$hi;
       $7_1 = $47($0_1 | 0, $6_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0) | 0;
       if ($2_1 >>> 0 < $7_1 >>> 0) {
        break label$3
       }
       $2_1 = $2_1 - $7_1 | 0;
       if (!$2_1) {
        break label$7
       }
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$2 = 0;
       $64$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$4 = $1_1 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1_1 = i64toi32_i32$4;
       $1$hi = i64toi32_i32$5;
       if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        continue label$8
       }
       break label$8;
      };
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$5 = $1$hi;
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 36 | 0) >> 2] = $1$hi;
      HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
      $5_1 = $48($0_1 | 0, $6_1 | 0) | 0;
      if (($5_1 | 0) != (4 | 0)) {
       break label$7
      }
      $2_1 = 0;
      if (!$3_1) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = 4;
      break label$4;
     }
     $2_1 = $49($0_1 | 0) | 0;
    }
    label$10 : {
     if (!$3_1) {
      break label$10
     }
     HEAP32[$3_1 >> 2] = $5_1;
     break label$4;
    }
    HEAP8[($0_1 + 49 | 0) >> 0] = 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 56 | 0) >> 2] | 0](HEAP32[($0_1 + 52 | 0) >> 2] | 0, $2_1, $5_1);
    $2_1 = 0;
   }
   label$11 : {
    $9_1 = $4_1 + 16 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $2_1 | 0;
  }
  $859(4619 | 0, 3904 | 0, 451 | 0);
  abort();
 }
 
 function $46($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     $3_1 = $61($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
     if ($3_1) {
      break label$5
     }
     $4_1 = $0_1 + 12 | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$8
        }
        $3_1 = $5_1;
        break label$7;
       }
       $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$6
       }
       $7_1 = $0_1 + 4 | 0;
       $3_1 = 0;
       label$9 : while (1) {
        $8_1 = HEAP32[$6_1 >> 2] | 0;
        label$10 : {
         if (HEAP32[($6_1 + 28 | 0) >> 2] | 0) {
          break label$10
         }
         if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break label$4
         }
         $9_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
         label$11 : {
          label$12 : {
           if (!$8_1) {
            break label$12
           }
           HEAP32[($8_1 + 4 | 0) >> 2] = $9_1;
           $9_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
           break label$11;
          }
          HEAP32[($0_1 + 8 | 0) >> 2] = $9_1;
         }
         label$13 : {
          label$14 : {
           if (!$9_1) {
            break label$14
           }
           HEAP32[$9_1 >> 2] = $8_1;
           break label$13;
          }
          HEAP32[$7_1 >> 2] = $8_1;
         }
         label$15 : {
          label$16 : {
           if (!$3_1) {
            break label$16
           }
           HEAP32[$3_1 >> 2] = $6_1;
           break label$15;
          }
          HEAP32[$4_1 >> 2] = $6_1;
         }
         HEAP32[($6_1 + 4 | 0) >> 2] = $5_1;
         HEAP32[$6_1 >> 2] = 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
         $5_1 = $6_1;
         $3_1 = $6_1;
        }
        $6_1 = $8_1;
        if ($6_1) {
         continue label$9
        }
        break label$9;
       };
       if (!$3_1) {
        break label$6
       }
      }
      if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
       break label$3
      }
      $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      label$17 : {
       label$18 : {
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$8_1) {
         break label$18
        }
        HEAP32[($8_1 + 4 | 0) >> 2] = $6_1;
        $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        break label$17;
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
      }
      label$19 : {
       label$20 : {
        if (!$6_1) {
         break label$20
        }
        HEAP32[$6_1 >> 2] = $8_1;
        break label$19;
       }
       HEAP32[$4_1 >> 2] = $8_1;
      }
      i64toi32_i32$0 = $1$hi;
      $62($0_1 | 0, $3_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0);
      $63($0_1 | 0, $3_1 | 0);
      break label$5;
     }
     $3_1 = 0;
     if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(4733 | 0, $2_1 | 0);
    }
    label$21 : {
     $11_1 = $2_1 + 16 | 0;
     if ($11_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $11_1;
    }
    return $3_1 | 0;
   }
   $859(4635 | 0, 3904 | 0, 374 | 0);
   abort();
  }
  $859(4684 | 0, 3904 | 0, 382 | 0);
  abort();
 }
 
 function $47($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $43_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     $5_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = $2$hi - i64toi32_i32$5 | 0;
     $6_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     if ($5_1 >>> 0 <= $6_1 >>> 0) {
      break label$3
     }
     HEAP32[($1_1 + 28 | 0) >> 2] = (HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     $43_1 = ((HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 20 | 0) >> 2] | 0, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $6_1 | 0;
     $1_1 = $5_1 - $6_1 | 0;
     $1_1 = $1_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $1_1;
     $4_1 = $1_1 >>> 0 < 65535 >>> 0 ? $1_1 : 65535;
     $743(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $43_1 | 0, $4_1 | 0);
    }
    return $4_1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 331 | 0);
   abort();
  }
  $859(4895 | 0, 3904 | 0, 332 | 0);
  abort();
 }
 
 function $48($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $6$hi = 0, $4_1 = 0, $27_1 = 0, $29$hi = 0, $31$hi = 0, $36$hi = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 49 | 0) >> 0] = 1;
    $4_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    label$3 : {
     $5_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $27_1 = $5_1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $31$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $31$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $2_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $2_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0]($27_1, i64toi32_i32$4, i64toi32_i32$5, 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $36$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $36$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 88 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0, HEAP32[($0_1 + 84 | 0) >> 2] | 0, ($4_1 + Math_imul($3_1, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $2_1 | 0, (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0, 15, $0_1);
     return 4 | 0;
    }
    HEAP8[($0_1 + 49 | 0) >> 0] = 0;
    $53($0_1 | 0, $1_1 | 0);
    return 1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 140 | 0);
   abort();
  }
  $859(4911 | 0, 3904 | 0, 141 | 0);
  abort();
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $0_1 = 0;
    break label$3;
   }
   $0_1 = $751(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, 4972 | 0, $1_1 + 12 | 0 | 0) | 0;
  }
  label$5 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $50($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 627 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     if (HEAPU8[($0_1 + 49 | 0) >> 0] | 0) {
      break label$4
     }
     if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
      break label$3
     }
     HEAP32[($0_1 + 56 | 0) >> 2] = 0;
     i64toi32_i32$0 = $1$hi;
     return $51($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
    }
    $859(4008 | 0, 3904 | 0, 628 | 0);
    abort();
   }
   $859(3983 | 0, 3904 | 0, 629 | 0);
   abort();
  }
  $859(4015 | 0, 3904 | 0, 630 | 0);
  abort();
 }
 
 function $51($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $8_1 = 0, $7_1 = 0, $49$hi = 0, $86$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if (($1$hi | 0) > (i64toi32_i32$1 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       break label$6
      }
      $2_1 = 0;
      label$7 : {
       if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $1$hi;
       HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(5138 | 0, $4_1 | 0);
      }
      HEAP32[$3_1 >> 2] = 1;
      break label$5;
     }
     HEAP32[$3_1 >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!$2_1) {
        break label$8
       }
       label$10 : {
        i64toi32_i32$2 = $1$hi;
        $5_1 = $46($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
        if ($5_1) {
         break label$10
        }
        HEAP32[$3_1 >> 2] = 5;
        break label$8;
       }
       i64toi32_i32$2 = $1$hi;
       $6_1 = $47($0_1 | 0, $5_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0) | 0;
       if ($2_1 >>> 0 < $6_1 >>> 0) {
        break label$4
       }
       $2_1 = $2_1 - $6_1 | 0;
       if (!$2_1) {
        break label$8
       }
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$2 = 0;
       $49$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = $49$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$4 = $1_1 + $6_1 | 0;
       i64toi32_i32$5 = $1$hi + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $6_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1_1 = i64toi32_i32$4;
       $1$hi = i64toi32_i32$5;
       label$11 : {
        label$12 : {
         if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : {
           $6_1 = $52($0_1 | 0, $5_1 | 0) | 0;
           if (($6_1 | 0) < (1 | 0)) {
            break label$14
           }
           $6_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + $6_1 | 0;
           HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
           if ($6_1 >>> 0 > (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0) {
            break label$3
           }
           i64toi32_i32$5 = $1$hi;
           i64toi32_i32$5 = $1$hi;
           $5_1 = $47($0_1 | 0, $5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0) | 0;
           if ($2_1 >>> 0 >= $5_1 >>> 0) {
            break label$13
           }
           $859(4619 | 0, 3904 | 0, 598 | 0);
           abort();
          }
          $53($0_1 | 0, $5_1 | 0);
          HEAP32[$3_1 >> 2] = $54($6_1 | 0) | 0;
          break label$8;
         }
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$5 = 0;
         $86$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$3 = $86$hi;
         i64toi32_i32$1 = $5_1;
         i64toi32_i32$0 = i64toi32_i32$2 + $5_1 | 0;
         i64toi32_i32$4 = $1$hi + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < $5_1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $1_1 = i64toi32_i32$0;
         $1$hi = i64toi32_i32$4;
         $2_1 = $2_1 - $5_1 | 0;
         if ($2_1) {
          break label$12
         }
         $2_1 = 0;
         $5_1 = 0;
         break label$11;
        }
        $5_1 = 1;
       }
       if ($5_1) {
        continue label$9
       }
       break label$9;
      };
     }
     $2_1 = $49($0_1 | 0) | 0;
    }
    label$15 : {
     $8_1 = $4_1 + 16 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $2_1 | 0;
   }
   $859(4619 | 0, 3904 | 0, 584 | 0);
   abort();
  }
  $859(4941 | 0, 3904 | 0, 595 | 0);
  abort();
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0, $36_1 = 0, $38$hi = 0, $40$hi = 0, $45$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $6_1 = -1;
    label$5 : {
     $7_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $36_1 = $7_1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $40$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $38$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $40$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($7_1 + 4 | 0) >> 2] | 0]($36_1, $10_1, i64toi32_i32$5, 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $45$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $45$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     if ((i64toi32_i32$1 | 0) != ($10_1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$5
     }
     $6_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $6_1 = FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0]($6_1, ($5_1 + Math_imul($4_1, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $3_1 | 0, (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) | 0;
    }
    label$6 : {
     if ((HEAP8[(0 + 61576 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     i64toi32_i32$1 = $10$hi;
     $0_1 = $847($10_1 | 0, i64toi32_i32$1 | 0, $2_1 + 16 | 0 | 0, 16 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(5183 | 0, $2_1 | 0);
    }
    label$7 : {
     $9_1 = $2_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $6_1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 167 | 0);
   abort();
  }
  $859(4911 | 0, 3904 | 0, 168 | 0);
  abort();
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($1_1 + 28 | 0) >> 2] | 0) {
     break label$2
    }
    $2_1 = $0_1 + 4 | 0;
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    label$5 : {
     label$6 : {
      if (!$3_1) {
       break label$6
      }
      HEAP32[$3_1 >> 2] = $4_1;
      break label$5;
     }
     HEAP32[$2_1 >> 2] = $4_1;
    }
    $4_1 = $0_1 + 12 | 0;
    label$7 : {
     label$8 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$8
      }
      HEAP32[$3_1 >> 2] = $1_1;
      break label$7;
     }
     HEAP32[$4_1 >> 2] = $1_1;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
   }
   return;
  }
  $859(4635 | 0, 3904 | 0, 355 | 0);
  abort();
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 ? (($0_1 | 0) == (-35 | 0) ? 3 : 1) : 2) | 0;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1966080;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 32;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[i64toi32_i32$1 >> 0] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 16;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $89_1 = 0, $94_1 = 0, $99_1 = 0, $102_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (HEAP32[($1_1 + 12 | 0) >> 2] | 0) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4058 | 0, 0 | 0);
      break label$5;
     }
     label$7 : {
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4102 | 0, 0 | 0);
      break label$5;
     }
     label$8 : {
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if ($4_1) {
       break label$8
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4150 | 0, 0 | 0);
      break label$5;
     }
     label$9 : {
      if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
       break label$9
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4191 | 0, 0 | 0);
      break label$5;
     }
     label$10 : {
      if (!(HEAPU8[$1_1 >> 0] | 0)) {
       break label$10
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
       break label$10
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4244 | 0, 0 | 0);
      break label$5;
     }
     label$11 : {
      $4_1 = (($4_1 >>> 0) / ($3_1 >>> 0) | 0) & -4096 | 0;
      if ($4_1) {
       break label$11
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = ($0_1 >>> 0) / ($1_1 >>> 0) | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 4096;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $827(4294 | 0, i64toi32_i32$1 | 0);
      break label$5;
     }
     label$12 : {
      $3_1 = $813(Math_imul($3_1, 40) + 136 | 0 | 0) | 0;
      if ($3_1) {
       break label$12
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[($2_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($1_1 + 4 | 0) >> 2] | 0, 40) + 136 | 0;
      $827(4364 | 0, $2_1 + 32 | 0 | 0);
      break label$5;
     }
     $845($3_1 | 0, 136 | 0, $3_1 | 0, 3888 | 0);
     i64toi32_i32$2 = $1_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 88 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $94_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1 + 80 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $94_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $99_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 72 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $99_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $102_1;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $4_1;
     HEAP16[(i64toi32_i32$1 + 48 | 0) >> 1] = 0;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
     label$13 : {
      if (!$0_1) {
       break label$13
      }
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
      $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$5
      }
      $6_1 = $3_1 + 12 | 0;
      $7_1 = $3_1 + 96 | 0;
      $8_1 = 0;
      $4_1 = 0;
      $0_1 = 0;
      label$14 : while (1) {
       $1_1 = $7_1 + Math_imul($0_1, 40) | 0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1_1 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$15 : {
        label$16 : {
         if (!$4_1) {
          break label$16
         }
         HEAP32[$4_1 >> 2] = $1_1;
         break label$15;
        }
        HEAP32[$6_1 >> 2] = $1_1;
       }
       HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $8_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
       $8_1 = $1_1;
       $4_1 = $1_1;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != ($5_1 | 0)) {
        continue label$14
       }
       break label$5;
      };
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$17 : {
     $10_1 = $2_1 + 48 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $3_1 | 0;
   }
   $859(4046 | 0, 3904 | 0, 668 | 0);
   abort();
  }
  $859(4054 | 0, 3904 | 0, 669 | 0);
  abort();
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $8_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 735 | 0);
  }
  label$5 : {
   if (!(HEAPU8[($0_1 + 49 | 0) >> 0] | 0)) {
    break label$5
   }
   if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
   $827(4409 | 0, $1_1 + 48 | 0 | 0);
  }
  $2_1 = $0_1 + 4 | 0;
  label$6 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$6
   }
   label$7 : {
    if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
    $827(4465 | 0, $1_1 + 32 | 0 | 0);
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$6
   }
   label$8 : while (1) {
    label$9 : {
     if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     $5_1 = $847(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1_1 + 64 | 0 | 0, 16 | 0) | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
     HEAP32[$1_1 >> 2] = $0_1;
     $827(4525 | 0, $1_1 | 0);
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1) {
     continue label$8
    }
    break label$8;
   };
  }
  $738(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = $2_1 + 8 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$10 : {
   $6_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$10
   }
   $7_1 = $0_1 + 12 | 0;
   $5_1 = 0;
   $2_1 = 0;
   label$11 : while (1) {
    $3_1 = $0_1 + Math_imul($2_1, 40) | 0;
    i64toi32_i32$0 = $3_1 + 120 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1 + 112 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$0 >> 2] = -1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = $3_1 + 96 | 0;
    label$12 : {
     label$13 : {
      if (!$5_1) {
       break label$13
      }
      HEAP32[$5_1 >> 2] = $4_1;
      break label$12;
     }
     HEAP32[$7_1 >> 2] = $4_1;
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = $7_1;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($3_1 + 100 | 0) >> 2] = $5_1;
    $5_1 = $4_1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($6_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  label$14 : {
   $9_1 = $1_1 + 80 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 770 | 0);
  }
  $58($0_1 | 0);
  $739(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 136 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $60($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 781 | 0);
  }
  $0_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $61($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, $6$hi = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $6_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $17_1 = 0, $17$hi = 0, $18_1 = 0, $18$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $64$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 278 | 0);
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$0 = __wasm_i64_srem($1_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $18_1 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$5;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$8
        }
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$5 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $27_1 = i64toi32_i32$5;
        $27$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$5 = $27$hi;
        i64toi32_i32$3 = $27_1;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
         $23_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $24_1 = 0
          } else {
           $24_1 = 1
          }
          $25_1 = $24_1;
         } else {
          $25_1 = 0
         }
         $23_1 = $25_1;
        }
        if ($23_1) {
         break label$8
        }
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$6
        }
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $35_1 = i64toi32_i32$1;
        $35$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = $35$hi;
        i64toi32_i32$5 = $35_1;
        if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
         $26_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
           $28_1 = 0
          } else {
           $28_1 = 1
          }
          $29_1 = $28_1;
         } else {
          $29_1 = 0
         }
         $26_1 = $29_1;
        }
        if ($26_1) {
         break label$8
        }
        label$9 : while (1) {
         if ((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) <= (-1 | 0)) {
          break label$5
         }
         label$10 : {
          i64toi32_i32$3 = $1$hi;
          i64toi32_i32$5 = $2_1;
          i64toi32_i32$3 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          $6_1 = i64toi32_i32$3;
          $6$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$3 = $6$hi;
          i64toi32_i32$1 = $6_1;
          if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
           $30_1 = 1
          } else {
           if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
             $31_1 = 0
            } else {
             $31_1 = 1
            }
            $32_1 = $31_1;
           } else {
            $32_1 = 0
           }
           $30_1 = $32_1;
          }
          if ($30_1) {
           break label$10
          }
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $6$hi;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$2 = $6$hi;
          i64toi32_i32$3 = $6_1;
          if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | ($1$hi | 0) != (i64toi32_i32$2 | 0) | 0) {
           break label$8
          }
          break label$7;
         }
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if ($2_1) {
          continue label$9
         }
         break label$9;
        };
       }
       label$11 : {
        $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$11
        }
        $3_1 = $0_1 + 12 | 0;
        label$12 : while (1) {
         $4_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
         if (($4_1 | 0) <= (-1 | 0)) {
          break label$4
         }
         label$13 : {
          if (!$4_1) {
           break label$13
          }
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          $64$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $64$hi;
          i64toi32_i32$3 = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$2 = $1_1;
          if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != ($1$hi | 0) | 0) {
           break label$13
          }
          if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
           break label$3
          }
          $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          label$14 : {
           label$15 : {
            $5_1 = HEAP32[$2_1 >> 2] | 0;
            if (!$5_1) {
             break label$15
            }
            HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            break label$14;
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
          }
          label$16 : {
           label$17 : {
            if (!$4_1) {
             break label$17
            }
            HEAP32[$4_1 >> 2] = $5_1;
            break label$16;
           }
           HEAP32[$3_1 >> 2] = $5_1;
          }
          $63($0_1 | 0, $2_1 | 0);
          return $2_1 | 0;
         }
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if ($2_1) {
          continue label$12
         }
         break label$12;
        };
       }
       $2_1 = 0;
      }
      return $2_1 | 0;
     }
     $859(4765 | 0, 3904 | 0, 287 | 0);
     abort();
    }
    $859(4769 | 0, 3904 | 0, 293 | 0);
    abort();
   }
   $859(4769 | 0, 3904 | 0, 310 | 0);
   abort();
  }
  $859(4684 | 0, 3904 | 0, 312 | 0);
  abort();
 }
 
 function $62($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3$hi = 0, $3_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $8$hi = 0, $17$hi = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = __wasm_i64_srem($2_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
    $17$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    if ((i64toi32_i32$4 | 0) < ($2$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$5 = 0;
    HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] = $3_1;
    HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] = i64toi32_i32$5;
    return;
   }
   $859(4788 | 0, 3904 | 0, 125 | 0);
   abort();
  }
  $859(4804 | 0, 3904 | 0, 126 | 0);
  abort();
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $17_1 = 0, $17$hi = 0, $27_1 = 0, $27$hi = 0;
  $2_1 = $0_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = 0;
    label$3 : {
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$3 = $17_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $16_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $18_1 = 0
       } else {
        $18_1 = 1
       }
       $19_1 = $18_1;
      } else {
       $19_1 = 0
      }
      $16_1 = $19_1;
     }
     if ($16_1) {
      break label$3
     }
     $5_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $5_1;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$5_1) {
       break label$1
      }
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      $27_1 = i64toi32_i32$2;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$1 = $27_1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
       $20_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0) {
         $21_1 = 0
        } else {
         $21_1 = 1
        }
        $22_1 = $21_1;
       } else {
        $22_1 = 0
       }
       $20_1 = $22_1;
      }
      if ($20_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if ($4_1) {
     break label$1
    }
    if (!$3_1) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   }
   label$5 : {
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$5
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = $3_1;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   return;
  }
  label$6 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$6
   }
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($5_1 ? $5_1 + 4 | 0 : $0_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$1_1 >> 2] = $5_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[$4_1 >> 2] = $1_1;
   return;
  }
  $859(4845 | 0, 3904 | 0, 266 | 0);
  abort();
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5$hi = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $50_1 = 0, $53$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 507 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$7
       }
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $5_1 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$1;
       $1_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
       if ($1_1 >>> 0 > (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0) {
        break label$4
       }
       i64toi32_i32$1 = $5$hi;
       $4_1 = $47($0_1 | 0, $2_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0) | 0;
       if ($3_1 >>> 0 < $4_1 >>> 0) {
        break label$3
       }
       label$8 : {
        $3_1 = $3_1 - $4_1 | 0;
        if ($3_1) {
         break label$8
        }
        $1_1 = 0;
        break label$6;
       }
       $1_1 = 3;
       if ((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $50_1 = $0_1;
       i64toi32_i32$1 = $5$hi;
       i64toi32_i32$1 = 0;
       $53$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $5$hi;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$4 = $5_1 + $4_1 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $45($50_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $3_1 | 0, 0 | 0) | 0;
       return;
      }
      $53($0_1 | 0, $2_1 | 0);
      $1_1 = $54($1_1 | 0) | 0;
     }
     $65($0_1 | 0, $1_1 | 0);
     return;
    }
    $859(4765 | 0, 3904 | 0, 511 | 0);
    abort();
   }
   $859(4941 | 0, 3904 | 0, 518 | 0);
   abort();
  }
  $859(4619 | 0, 3904 | 0, 521 | 0);
  abort();
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $49($0_1 | 0) | 0;
  HEAP8[($0_1 + 49 | 0) >> 0] = 0;
  FUNCTION_TABLE[HEAP32[($0_1 + 56 | 0) >> 2] | 0](HEAP32[($0_1 + 52 | 0) >> 2] | 0, $2_1, $1_1);
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $11_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 136 | 0, $3_1 | 0, 3888 | 0, 3904 | 0, 199 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      $1_1 = $757($0_1 | 0, 0 | 0) | 0;
      if (!$1_1) {
       break label$8
      }
      $4_1 = $3_1 + 12 | 0;
      $5_1 = $3_1 + 4 | 0;
      $6_1 = 0;
      label$9 : while (1) {
       $1_1 = HEAP32[$1_1 >> 2] | 0;
       $7_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
       if ($1_1 >>> 0 < $7_1 >>> 0) {
        break label$7
       }
       if ($1_1 >>> 0 > ($7_1 + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) >>> 0) {
        break label$7
       }
       $8_1 = $3_1 + Math_imul((($1_1 - $7_1 | 0) >>> 0) / ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0) | 0, 40) | 0;
       $7_1 = $8_1 + 96 | 0;
       $1_1 = $5_1;
       label$10 : {
        label$11 : while (1) {
         $1_1 = HEAP32[$1_1 >> 2] | 0;
         if (!$1_1) {
          break label$10
         }
         if (($7_1 | 0) != ($1_1 | 0)) {
          continue label$11
         }
         break label$11;
        };
       }
       label$12 : {
        if ($1_1) {
         break label$12
        }
        if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
        HEAP32[$2_1 >> 2] = $3_1;
        $827(5074 | 0, $2_1 | 0);
        break label$8;
       }
       $1_1 = $8_1 + 124 | 0;
       $9_1 = HEAP32[$1_1 >> 2] | 0;
       if (!$9_1) {
        break label$6
       }
       $9_1 = $9_1 + -1 | 0;
       HEAP32[$1_1 >> 2] = $9_1;
       label$13 : {
        if ($9_1) {
         break label$13
        }
        $10_1 = $8_1 + 104 | 0;
        if ((HEAP32[$10_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
         break label$5
        }
        $9_1 = $8_1 + 100 | 0;
        $1_1 = HEAP32[$9_1 >> 2] | 0;
        label$14 : {
         label$15 : {
          $8_1 = HEAP32[$7_1 >> 2] | 0;
          if (!$8_1) {
           break label$15
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = $1_1;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          break label$14;
         }
         HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
        }
        label$16 : {
         label$17 : {
          if (!$1_1) {
           break label$17
          }
          HEAP32[$1_1 >> 2] = $8_1;
          break label$16;
         }
         HEAP32[$5_1 >> 2] = $8_1;
        }
        label$18 : {
         if (HEAPU8[($3_1 + 48 | 0) >> 0] | 0) {
          break label$18
         }
         label$19 : {
          $1_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$1_1) {
           break label$19
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
         }
         label$20 : {
          if (HEAP32[($3_1 + 16 | 0) >> 2] | 0) {
           break label$20
          }
          HEAP32[($3_1 + 16 | 0) >> 2] = $7_1;
         }
         HEAP32[$7_1 >> 2] = $1_1;
         HEAP32[$10_1 >> 2] = $4_1;
         HEAP32[$4_1 >> 2] = $7_1;
         HEAP32[$9_1 >> 2] = 0;
         break label$13;
        }
        HEAP8[($3_1 + 48 | 0) >> 0] = 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
        $62($3_1 | 0, $7_1 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
        $63($3_1 | 0, $7_1 | 0);
        $1_1 = $48($3_1 | 0, $7_1 | 0) | 0;
        if (($1_1 | 0) == (4 | 0)) {
         break label$13
        }
        $65($3_1 | 0, $1_1 | 0);
       }
       $6_1 = $6_1 + 1 | 0;
       $1_1 = $757($0_1 | 0, $6_1 | 0) | 0;
       if ($1_1) {
        continue label$9
       }
       break label$9;
      };
     }
     label$21 : {
      $12_1 = $2_1 + 16 | 0;
      if ($12_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $12_1;
     }
     return;
    }
    $859(4980 | 0, 3904 | 0, 202 | 0);
    abort();
   }
   $859(5123 | 0, 3904 | 0, 220 | 0);
   abort();
  }
  $859(4635 | 0, 3904 | 0, 223 | 0);
  abort();
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $68($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $1$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 0;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $5_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $6_1 = 0
    } else {
     $6_1 = 1
    }
    $7_1 = $6_1;
   } else {
    $7_1 = 0
   }
   $5_1 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $70($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$0_1) {
       break label$4
      }
      if (!$1_1) {
       break label$3
      }
      if (!$2_1) {
       break label$2
      }
      if (!$3_1) {
       break label$1
      }
      $2_1 = $736($2_1 | 0) | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
      label$5 : {
       if ($2_1) {
        break label$5
       }
       return -1 | 0;
      }
      $67($0_1 + 40 | 0 | 0);
      $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1 + 72 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 60 | 0) >> 2] = 0;
      return 0 | 0;
     }
     $859(5313 | 0, 5235 | 0, 270 | 0);
     abort();
    }
    $859(5321 | 0, 5235 | 0, 271 | 0);
    abort();
   }
   $859(5328 | 0, 5235 | 0, 272 | 0);
   abort();
  }
  $859(5336 | 0, 5235 | 0, 273 | 0);
  abort();
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  $739(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
 }
 
 function $72($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $21$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $738(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   i64toi32_i32$2 = i64toi32_i32$1 + 48 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= $1_1 >>> 0 | 0) | 0) {
    break label$3
   }
   if (!($834(61592 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = $1$hi;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(5352 | 0, $2_1 | 0);
  }
  label$4 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $5$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $754($0_1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$2 | 0;
 }
 
 function $74($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $9_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $10_1 = 0
     } else {
      $10_1 = 1
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    $9_1 = $11_1;
   }
   if ($9_1) {
    break label$1
   }
   $859(5406 | 0, 5235 | 0, 324 | 0);
   abort();
  }
  i64toi32_i32$2 = 0;
  $72($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  $68($0_1 + 40 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
 }
 
 function $75($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $7_1 = 0, $11$hi = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $39_1 = 0, $41$hi = 0, $43$hi = 0, $71$hi = 0, $72$hi = 0, $127_1 = 0, $128_1 = 0, $136_1 = 0, $138$hi = 0, $140$hi = 0, $141$hi = 0, $143_1 = 0, $143$hi = 0, $171_1 = 0, $172_1 = 0, $218_1 = 0, $219_1 = 0;
  label$1 : {
   $4_1 = global$0 - 112 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 < $2_1 >>> 0) {
       break label$6
      }
      $5_1 = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      $6_1 = $754($0_1 | 0) | 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = 0;
      $7_1 = 1;
      label$7 : {
       if ($5_1 >>> 0 >= ($6_1 + $1_1 | 0) >>> 0) {
        break label$7
       }
       $745(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $0_1 | 0);
       $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
       $39_1 = $0_1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $41$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $43$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $41$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $43$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$2 = $39_1;
       HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
       $6_1 = $5_1 - $6_1 | 0;
       if (($6_1 | 0) != ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0)) {
        break label$5
       }
       if ($6_1 >>> 0 >= $1_1 >>> 0) {
        break label$4
       }
       label$8 : {
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$2;
        $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $5_1 = $1_1 - $6_1 | 0;
        $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $5_1;
        i64toi32_i32$2 = 0;
        $71$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $71$hi;
        i64toi32_i32$3 = $7_1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $72$hi = i64toi32_i32$4;
        i64toi32_i32$2 = $0_1 + 48 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$4;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $72$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$3 = $11_1;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$8
        }
        label$9 : {
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$2 = $10$hi;
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$1 = $10$hi;
         i64toi32_i32$4 = $10_1;
         if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
          break label$9
         }
         $7_1 = 0;
         if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$7
         }
         $7_1 = 0;
         if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$7
         }
         i64toi32_i32$4 = $0_1;
         i64toi32_i32$3 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
         $10_1 = i64toi32_i32$3;
         $10$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $0_1;
         i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         HEAP32[($4_1 + 108 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$3 = $10$hi;
         HEAP32[($4_1 + 104 | 0) >> 2] = $10_1;
         HEAP32[($4_1 + 100 | 0) >> 2] = $0_1;
         HEAP32[($4_1 + 96 | 0) >> 2] = 5601;
         $827(5487 | 0, $4_1 + 96 | 0 | 0);
         break label$7;
        }
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$4 = $11_1;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        i64toi32_i32$0 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        $7_1 = i64toi32_i32$5;
        if (!i64toi32_i32$5) {
         break label$3
        }
       }
       $5_1 = $0_1 + 56 | 0;
       label$10 : {
        if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$0;
        $10$hi = i64toi32_i32$4;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$4 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$4;
        $11$hi = i64toi32_i32$0;
        HEAP32[($4_1 + 88 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 84 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 80 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 72 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 68 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = 5601;
        $127_1 = $4_1;
        $128_1 = $6_1;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        HEAP32[($127_1 + 76 | 0) >> 2] = $128_1 + i64toi32_i32$2 | 0;
        $827(5648 | 0, $4_1 + 64 | 0 | 0);
       }
       label$11 : {
        label$12 : {
         $136_1 = $3_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         $138$hi = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         $140$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $138$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $140$hi;
         i64toi32_i32$1 = $6_1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $141$hi = i64toi32_i32$2;
         i64toi32_i32$3 = $0_1;
         i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $143_1 = i64toi32_i32$2;
         $143$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $141$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$2 = $143$hi;
         i64toi32_i32$1 = $143_1;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $1_1 = $50($136_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $7_1 | 0, $5_1 | 0) | 0;
         if (!$1_1) {
          break label$12
         }
         $744(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0);
         label$13 : {
          if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$13
          }
          if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$4 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$4;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$3 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$3;
          $11$hi = i64toi32_i32$4;
          $7_1 = $756($1_1 | 0) | 0;
          HEAP32[($4_1 + 52 | 0) >> 2] = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($4_1 + 48 | 0) >> 2] = $7_1;
          $171_1 = $4_1;
          $172_1 = $6_1;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$4 = $11$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$1 = $11_1;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          HEAP32[($171_1 + 44 | 0) >> 2] = $172_1 + i64toi32_i32$2 | 0;
          HEAP32[($4_1 + 40 | 0) >> 2] = $3_1;
          HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 32 | 0) >> 2] = 5601;
          $827(5523 | 0, $4_1 + 32 | 0 | 0);
         }
         $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
         $735($1_1 | 0);
         break label$11;
        }
        if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$5;
        $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 16 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 5601;
        $218_1 = $4_1;
        $219_1 = $6_1;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$4 = $10_1;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        HEAP32[($218_1 + 12 | 0) >> 2] = $219_1 + i64toi32_i32$3 | 0;
        $827(5704 | 0, $4_1 | 0);
       }
       $7_1 = ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 >= $2_1 >>> 0;
      }
      label$14 : {
       $9_1 = $4_1 + 112 | 0;
       if ($9_1 >>> 0 < global$2 >>> 0) {
        fimport$11()
       }
       global$0 = $9_1;
      }
      return $7_1 | 0;
     }
     $859(5578 | 0, 5235 | 0, 435 | 0);
     abort();
    }
    $859(5415 | 0, 5235 | 0, 447 | 0);
    abort();
   }
   $859(5461 | 0, 5235 | 0, 448 | 0);
   abort();
  }
  $859(5511 | 0, 5235 | 0, 459 | 0);
  abort();
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $75($0_1 | 0, $1_1 | 0, $1_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0;
  label$1 : {
   $1_1 = $813(28 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  $845($1_1 | 0, 28 | 0, $1_1 + 24 | 0 | 0, 5792 | 0);
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(0 + 5832 | 0) >> 2] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5824 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5828 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5816 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5820 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $14_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $0_1 + 24 | 0;
    if ((HEAP32[$1_1 >> 2] | 0 | 0) == (5792 | 0)) {
     break label$1
    }
   }
   $1_1 = $0_1 + 24 | 0;
   $846($0_1 | 0, 28 | 0, $1_1 | 0, 5792 | 0, 5836 | 0, 103 | 0);
  }
  $845($0_1 | 0, 28 | 0, $1_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $80($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 39 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61608 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61608 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(5914 | 0, $3_1 | 0);
  }
  $0_1 = $896($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$6 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $0_1 | 0;
 }
 
 function $81($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 49 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61608 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61608 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$0 = $1$hi;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(5952 | 0, $3_1 | 0);
  }
  i64toi32_i32$0 = -1;
  $6_1 = -1;
  $6$hi = i64toi32_i32$0;
  label$6 : {
   i64toi32_i32$0 = $1$hi;
   if ($889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0) {
    break label$6
   }
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
  }
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $82($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $5_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $4_1 = 0, $4$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 63 | 0);
  }
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = -1;
  label$3 : {
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$3
   }
   i64toi32_i32$2 = 0;
   $3_1 = $889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0, i64toi32_i32$2 | 0, 2 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $5_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $2_1;
   HEAP32[i64toi32_i32$2 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = -1;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
    $14_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $15_1 = 0
     } else {
      $15_1 = 1
     }
     $16_1 = $15_1;
    } else {
     $16_1 = 0
    }
    $14_1 = $16_1;
   }
   if ($14_1) {
    break label$3
   }
   i64toi32_i32$3 = $4$hi;
   $0_1 = $889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0) | 0;
   $3_1 = ($0_1 >> 31 | 0) & $0_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
   $827(6003 | 0, $3_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (($2_1 & 14 | 0 | 0) == (8 | 0)) {
     break label$5
    }
    if (($2_1 & 8 | 0) >>> 3 | 0 | ($2_1 & 6 | 0 | 0) == (6 | 0) | 0) {
     break label$4
    }
   }
   $4_1 = $778($0_1 | 0) | 0;
   $2_1 = ($4_1 >>> 26 | 0) & 15 | 0;
   label$6 : {
    if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = $2_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = ($4_1 >>> 5 | 0) & 8191 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = ($4_1 >>> 22 | 0) & 7 | 0;
    $827(6048 | 0, $3_1 | 0);
   }
   label$7 : {
    if ($2_1 >>> 0 > 11 >>> 0) {
     break label$7
    }
    HEAP8[($1_1 + 5 | 0) >> 0] = 16;
    HEAP32[$1_1 >> 2] = 15;
    HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[(($2_1 << 2 | 0) + 6160 | 0) >> 2] | 0;
    HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[((($4_1 >>> 22 | 0) & 7 | 0) + 6208 | 0) >> 0] | 0;
    label$8 : {
     if (($2_1 + -7 | 0) >>> 0 > 4 >>> 0) {
      break label$8
     }
     label$9 : {
      if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      $827(6216 | 0, 0 | 0);
     }
     HEAP32[$1_1 >> 2] = 18;
     HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 1 | 0;
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = ($4_1 >>> 30 | 0) + 1 | 0;
    $823($1_1 + 12 | 0 | 0, $3_1 + 24 | 0 | 0, 4 | 0) | 0;
    $2_1 = ($4_1 >>> 5 | 0) & 8191 | 0;
    HEAP16[($1_1 + 6 | 0) >> 1] = ((Math_imul($2_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1024e3 >>> 0) | 0;
    if ($2_1 >>> 0 <= 6 >>> 0) {
     break label$7
    }
    $4_1 = $2_1 + -6 | 0;
    break label$4;
   }
   $4_1 = 0;
  }
  label$10 : {
   $6_1 = $3_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 5984 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(6352 | 0, 6360 | 0, 63 | 0);
  abort();
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 85 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, $9_1 = 0, $4_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 184 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 96 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = ($3_1 + 48 | 0) + 16 | 0;
  $6_1 = $3_1 + 68 | 0;
  label$5 : while (1) {
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $7_1 = 0;
   $1_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $8_1 = $7_1;
       $9_1 = $764($3_1 + 144 | 0 | 0) | 0;
       if (($9_1 | 0) == (-1 | 0)) {
        break label$8
       }
       $7_1 = $8_1 + 1 | 0;
       $1_1 = ($1_1 << 8 | 0) & 65280 | 0 | $9_1 | 0;
       if (($1_1 & 65520 | 0 | 0) != (65520 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $9_1 = 0;
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : while (1) {
          label$14 : {
           if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$14
           }
           if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$14
           }
           $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
           HEAP32[($3_1 + 84 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 88 | 0) >> 2] = $10_1 + -2 | 0;
           $827(6442 | 0, $3_1 + 80 | 0 | 0);
          }
          $1_1 = $83($3_1 + 144 | 0 | 0, $3_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          if (!$1_1) {
           break label$12
          }
          label$15 : {
           if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
           HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
           HEAP32[$6_1 >> 2] = HEAPU8[($3_1 + 100 | 0) >> 0] | 0;
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $10_1;
           HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
           $827(6488 | 0, $3_1 + 48 | 0 | 0);
          }
          $766($3_1 + 144 | 0 | 0, $1_1 | 0) | 0;
          $1_1 = $777($3_1 + 144 | 0 | 0) | 0;
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          label$16 : {
           if (($1_1 & 65520 | 0 | 0) != (65520 | 0)) {
            break label$16
           }
           $9_1 = $9_1 + 1 | 0;
           if (($9_1 | 0) == (3 | 0)) {
            break label$11
           }
           continue label$13;
          }
          break label$13;
         };
         if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         $7_1 = $754($3_1 + 144 | 0 | 0) | 0;
         HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = 4095;
         HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
         HEAP32[($3_1 + 20 | 0) >> 2] = $7_1 + -2 | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 28 | 0) >> 2] = $1_1 >>> 5 | 0;
         $827(6564 | 0, $3_1 + 16 | 0 | 0);
        }
        $8_1 = $8_1 + 3 | 0;
        break label$8;
       }
       $738($4_1 | 0);
       $1_1 = $813(328 | 0) | 0;
       if (!$1_1) {
        break label$7
       }
       $218($1_1 | 0);
       HEAP32[($1_1 + 4 | 0) >> 2] = 1;
       $973($1_1 + 20 | 0 | 0, $3_1 + 96 | 0 | 0, 44 | 0) | 0;
       break label$7;
      }
      $8_1 = $7_1;
     }
     label$17 : {
      if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$17
      }
      if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$17
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(6621 | 0, $3_1 | 0);
     }
     if ($8_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$18 : {
     $12_1 = $3_1 + 160 | 0;
     if ($12_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $12_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $766($3_1 + 144 | 0 | 0, $8_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 144 | 0 | 0);
   continue label$5;
  };
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 96 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 6656 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(6724 | 0, 6732 | 0, 71 | 0);
  abort();
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 93 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $90($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $13_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 256 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 376 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 192 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = ($3_1 + 80 | 0) + 16 | 0;
  $6_1 = $3_1 + 100 | 0;
  $7_1 = $3_1 + 104 | 0;
  label$5 : while (1) {
   $822($3_1 + 192 | 0 | 0, 0 | 0, 44 | 0) | 0;
   HEAP32[($3_1 + 192 | 0) >> 2] = 0;
   $763($3_1 + 240 | 0 | 0, $4_1 | 0);
   $1_1 = 0;
   $8_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $9_1 = $8_1;
       label$10 : {
        $10_1 = $764($3_1 + 240 | 0 | 0) | 0;
        if (($10_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $8_1 = $9_1;
        break label$8;
       }
       $8_1 = $9_1 + 1 | 0;
       $1_1 = ($1_1 << 8 | 0) & 65280 | 0 | $10_1 | 0;
       if (($1_1 & 65504 | 0 | 0) != (22240 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $11_1 = $9_1 + -1 | 0;
      $10_1 = 0;
      $12_1 = 0;
      label$11 : while (1) {
       label$12 : {
        if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
        HEAP32[($3_1 + 124 | 0) >> 2] = $10_1;
        HEAP32[($3_1 + 116 | 0) >> 2] = $1_1;
        HEAP32[($3_1 + 112 | 0) >> 2] = $0_1;
        HEAP32[($3_1 + 120 | 0) >> 2] = $13_1 + -2 | 0;
        $827(6814 | 0, $3_1 + 112 | 0 | 0);
       }
       label$13 : {
        $14_1 = $12_1 & 1 | 0;
        if ($14_1) {
         break label$13
        }
        $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
        $763($3_1 + 176 | 0 | 0, $4_1 | 0);
        if ($13_1 >>> 0 < 2 >>> 0) {
         break label$13
        }
        $766($3_1 + 176 | 0 | 0, $11_1 | 0) | 0;
       }
       $822($3_1 + 128 | 0 | 0, 0 | 0, 44 | 0) | 0;
       $1_1 = $91($3_1 + 240 | 0 | 0, $3_1 + 128 | 0 | 0, $1_1 | 0) | 0;
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             if ((HEAP32[($3_1 + 244 | 0) >> 2] | 0 | 0) < (0 | 0)) {
              break label$19
             }
             $13_1 = HEAP8[(0 + 61640 | 0) >> 0] | 0;
             if (!$1_1) {
              break label$17
             }
             label$20 : {
              if (($13_1 | 0) > (2 | 0)) {
               break label$20
              }
              if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$20
              }
              $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
              HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
              HEAP32[$6_1 >> 2] = HEAPU8[($3_1 + 132 | 0) >> 0] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
              HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 84 | 0) >> 2] = $10_1;
              HEAP32[($3_1 + 88 | 0) >> 2] = $13_1;
              HEAP32[($3_1 + 92 | 0) >> 2] = $1_1;
              $827(6873 | 0, $3_1 + 80 | 0 | 0);
             }
             label$21 : {
              if (!(HEAPU8[($3_1 + 133 | 0) >> 0] | 0)) {
               break label$21
              }
              $973($3_1 + 192 | 0 | 0, $3_1 + 128 | 0 | 0, 44 | 0) | 0;
              $12_1 = $14_1 ? $12_1 : 1;
             }
             if (($10_1 | 0) == (40 | 0)) {
              break label$14
             }
             label$22 : {
              if ($10_1 >>> 0 < 2 >>> 0) {
               break label$22
              }
              if (!(HEAPU8[($3_1 + 197 | 0) >> 0] | 0)) {
               break label$22
              }
              if (HEAP32[($3_1 + 192 | 0) >> 2] | 0) {
               break label$14
              }
             }
             $766($3_1 + 240 | 0 | 0, $1_1 | 0) | 0;
             $1_1 = $777($3_1 + 240 | 0 | 0) | 0;
             if ((HEAP32[($3_1 + 244 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              break label$18
             }
             $14_1 = $12_1 & 1 | 0;
            }
            if (!$14_1) {
             break label$8
            }
            $1_1 = $754($3_1 + 176 | 0 | 0) | 0;
            label$23 : {
             if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$23
             }
             if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$23
             }
             HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
             HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
             $827(7061 | 0, $3_1 + 16 | 0 | 0);
            }
            $8_1 = $1_1 + 2 | 0;
            break label$8;
           }
           $13_1 = $1_1 >>> 5 | 0;
           if (($13_1 | 0) == (695 | 0)) {
            break label$15
           }
           if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           $8_1 = $754($3_1 + 240 | 0 | 0) | 0;
           HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = 695;
           HEAP32[($3_1 + 60 | 0) >> 2] = $13_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = $8_1 + -2 | 0;
           $827(6958 | 0, $3_1 + 48 | 0 | 0);
           break label$16;
          }
          if (($13_1 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          $1_1 = $754($3_1 + 240 | 0 | 0) | 0;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $1_1 + -2 | 0;
          $827(7015 | 0, $3_1 + 32 | 0 | 0);
         }
         $8_1 = $9_1 + 3 | 0;
         break label$8;
        }
        $10_1 = $10_1 + 1 | 0;
        continue label$11;
       }
       break label$11;
      };
      $738($4_1 | 0);
      $1_1 = $813(328 | 0) | 0;
      if (!$1_1) {
       break label$7
      }
      $218($1_1 | 0);
      HEAP32[($1_1 + 4 | 0) >> 2] = 1;
      $973($1_1 + 20 | 0 | 0, $3_1 + 192 | 0 | 0, 44 | 0) | 0;
      break label$7;
     }
     label$24 : {
      if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$24
      }
      if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$24
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(7104 | 0, $3_1 | 0);
     }
     if ($8_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$25 : {
     $16_1 = $3_1 + 256 | 0;
     if ($16_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $16_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 240 | 0 | 0, $4_1 | 0);
   $766($3_1 + 240 | 0 | 0, $8_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 240 | 0 | 0);
   continue label$5;
  };
 }
 
 function $91($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $34_1 = 0, $37_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $770($0_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $2_1;
   $827(7154 | 0, $3_1 | 0);
  }
  label$4 : {
   $5_1 = $764($0_1 | 0) | 0;
   if (($5_1 | 0) == (-1 | 0)) {
    break label$4
   }
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $34_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $34_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $37_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = ($5_1 | ($2_1 << 8 | 0) | 0) & 8191 | 0;
   if (!($93($3_1 + 16 | 0 | 0, $1_1 | 0) | 0)) {
    break label$4
   }
   HEAP16[($1_1 + 6 | 0) >> 1] = (Math_imul(HEAP32[($1_1 + 8 | 0) >> 2] | 0, ($4_1 << 3 | 0) + 24 | 0) >>> 0) / (1024e3 >>> 0) | 0;
  }
  label$5 : {
   $7_1 = $3_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 104 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $9_1 = 0, $14_1 = 0, $12_1 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  $783($2_1 + 64 | 0 | 0, $0_1 | 0);
  $0_1 = 0;
  $3_1 = $789($2_1 + 64 | 0 | 0) | 0;
  $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if ($3_1) {
     break label$4
    }
    if ($4_1) {
     break label$4
    }
    $3_1 = $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
    if ($784($2_1 + 64 | 0 | 0) | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if (($3_1 | 0) != (1 | 0)) {
        break label$7
       }
       $3_1 = $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
       $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
       if ($3_1) {
        break label$4
       }
       if ($4_1) {
        break label$4
       }
       break label$6;
      }
      if ($784($2_1 + 64 | 0 | 0) | 0) {
       break label$4
      }
      if ($3_1) {
       break label$6
      }
      $5_1 = 0;
      break label$5;
     }
     $94($2_1 + 64 | 0 | 0) | 0;
     $5_1 = 1;
    }
    $6_1 = $789($2_1 + 64 | 0 | 0) | 0;
    $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
    $7_1 = $790($2_1 + 64 | 0 | 0, 4 | 0) | 0;
    $8_1 = 0;
    $9_1 = 0;
    label$8 : while (1) {
     $10_1 = $790($2_1 + 64 | 0 | 0, 3 | 0) | 0;
     $3_1 = 0;
     $11_1 = 0;
     label$9 : while (1) {
      label$10 : {
       if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $9_1;
       HEAP32[($2_1 + 4 | 0) >> 2] = $10_1;
       HEAP32[$2_1 >> 2] = $3_1;
       $827(7207 | 0, $2_1 | 0);
      }
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           if (!($3_1 | $9_1 | 0)) {
            break label$15
           }
           $12_1 = 0;
           if ($789($2_1 + 64 | 0 | 0) | 0) {
            break label$14
           }
          }
          $973($2_1 + 16 | 0 | 0, $1_1 | 0, 44 | 0) | 0;
          $13_1 = 0;
          $4_1 = 0;
          label$16 : {
           if (!$5_1) {
            break label$16
           }
           $4_1 = $94($2_1 + 64 | 0 | 0) | 0;
          }
          $14_1 = $786($2_1 + 64 | 0 | 0) | 0;
          $12_1 = $95($2_1 + 64 | 0 | 0, $2_1 + 16 | 0 | 0) | 0;
          if ($784($2_1 + 64 | 0 | 0) | 0) {
           break label$12
          }
          label$17 : {
           if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
            break label$17
           }
           $973($1_1 | 0, $2_1 + 16 | 0 | 0, 44 | 0) | 0;
           $8_1 = 1;
          }
          if (!$4_1) {
           break label$13
          }
          $15_1 = $786($2_1 + 64 | 0 | 0) | 0;
          if ($15_1 >>> 0 < $14_1 >>> 0) {
           break label$3
          }
          $14_1 = $15_1 - $14_1 | 0;
          if ($4_1 >>> 0 <= $14_1 >>> 0) {
           break label$12
          }
          $792($2_1 + 64 | 0 | 0, $4_1 - $14_1 | 0 | 0);
          $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
          $0_1 = $0_1 & ($4_1 ^ 1 | 0) | 0;
          if ($4_1) {
           break label$4
          }
         }
         $4_1 = $790($2_1 + 64 | 0 | 0, 3 | 0) | 0;
         if (!($784($2_1 + 64 | 0 | 0) | 0)) {
          break label$11
         }
         $0_1 = 0;
         break label$4;
        }
        $13_1 = $8_1 & 1 | 0;
       }
       $0_1 = $13_1;
       break label$4;
      }
      label$18 : {
       label$19 : {
        switch ($4_1 | 0) {
        case 0:
         $790($2_1 + 64 | 0 | 0, 8 | 0) | 0;
         if ($6_1) {
          break label$18
         }
         label$23 : {
          if (($12_1 | 0) == (20 | 0)) {
           break label$23
          }
          if (($12_1 | 0) != (6 | 0)) {
           break label$18
          }
         }
         if (($11_1 | 0) != (8 | 0)) {
          break label$18
         }
         $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
         break label$18;
        case 1:
         $790($2_1 + 64 | 0 | 0, 9 | 0) | 0;
         break label$18;
        case 3:
        case 4:
        case 5:
         $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
         break label$18;
        default:
         break label$19;
        };
       }
       if (($4_1 & -2 | 0 | 0) != (6 | 0)) {
        break label$18
       }
       $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
      }
      $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
      $0_1 = $0_1 & ($4_1 ^ 1 | 0) | 0;
      if ($4_1) {
       break label$4
      }
      $11_1 = $12_1;
      $3_1 = $3_1 + 1 | 0;
      if ($3_1 >>> 0 <= $10_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
     $9_1 = $9_1 + 1 | 0;
     if ($9_1 >>> 0 <= $7_1 >>> 0) {
      continue label$8
     }
     break label$8;
    };
    $0_1 = $8_1 & 1 | 0;
   }
   label$24 : {
    $17_1 = $2_1 + 80 | 0;
    if ($17_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $17_1;
   }
   return $0_1 | 0;
  }
  $859(7230 | 0, 6732 | 0, 291 | 0);
  abort();
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $790($0_1 | 0, 2 | 0) | 0;
  label$1 : {
   if ($784($0_1 | 0) | 0) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    $1_1 = ($790($0_1 | 0, 8 | 0) | 0) + ($1_1 << 8 | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1 >>> 0 <= $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $584($0_1 | 0) | 0;
  $4_1 = 0;
  label$3 : {
   $5_1 = $585($0_1 | 0, 0 | 0) | 0;
   if (!$5_1) {
    break label$3
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
  }
  $5_1 = $790($0_1 | 0, 4 | 0) | 0;
  label$4 : {
   if ($784($0_1 | 0) | 0) {
    break label$4
   }
   HEAP8[($1_1 + 4 | 0) >> 0] = 0;
   label$5 : {
    if ($5_1 >>> 0 > 7 >>> 0) {
     break label$5
    }
    HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[($5_1 + 7283 | 0) >> 0] | 0;
   }
   label$6 : {
    if (($3_1 | 0) != (5 | 0)) {
     break label$6
    }
    label$7 : {
     $3_1 = $585($0_1 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$7
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
    }
    $3_1 = $584($0_1 | 0) | 0;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = 16;
   label$8 : {
    label$9 : {
     if (($3_1 + -1 | 0) >>> 0 < 6 >>> 0) {
      break label$9
     }
     $0_1 = 0;
     $4_1 = $3_1 + -23 | 0;
     if ($4_1 >>> 0 > 16 >>> 0) {
      break label$8
     }
     if (!((1 << $4_1 | 0) & 65601 | 0)) {
      break label$8
     }
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    $0_1 = 17;
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $823($1_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0, 4 | 0) | 0;
   $4_1 = $3_1;
  }
  label$10 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $96($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = $782($0_1 | 0) | 0;
  $4_1 = $777($0_1 | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = 6;
   $0_1 = 129;
   label$2 : {
    switch ($4_1 >>> 11 | 0 | 0) {
    default:
     $0_1 = 0;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
     $2_1 = $3_1 & 63 | 0;
     if ($2_1 >>> 0 > 37 >>> 0) {
      break label$1
     }
     $3_1 = ($3_1 >>> 6 | 0) & 3 | 0;
     if (($3_1 | 0) == (3 | 0)) {
      break label$1
     }
     HEAP8[($1_1 + 5 | 0) >> 0] = 16;
     HEAP32[$1_1 >> 2] = 129;
     HEAP8[($1_1 + 12 | 0) >> 0] = 1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $0_1 = $3_1 << 1 | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = HEAPU16[($0_1 + 7616 | 0) >> 1] | 0;
     $3_1 = ($2_1 << 3 | 0) + 7312 | 0;
     HEAP16[($1_1 + 6 | 0) >> 1] = HEAPU16[$3_1 >> 1] | 0;
     HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[((($4_1 >>> 5 | 0) & 7 | 0) + 7622 | 0) >> 0] | 0;
     $5_1 = ((HEAPU16[(($3_1 + $0_1 | 0) + 2 | 0) >> 1] | 0) << 1 | 0) + -7 | 0;
     break label$1;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
     break label$2;
    };
   }
   label$5 : {
    label$6 : {
     $0_1 = ($3_1 >>> 6 | 0) & 3 | 0;
     if (($0_1 | 0) == (3 | 0)) {
      break label$6
     }
     $0_1 = HEAPU16[(($0_1 << 1 | 0) + 7616 | 0) >> 1] | 0;
     $5_1 = 4;
     break label$5;
    }
    $0_1 = ($3_1 >>> 4 | 0) & 3 | 0;
    if (($0_1 | 0) == (3 | 0)) {
     break label$1
    }
    $0_1 = (HEAPU16[(($0_1 << 1 | 0) + 7616 | 0) >> 1] | 0) >>> 1 | 0;
    $5_1 = 2;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = 16;
   HEAP32[$1_1 >> 2] = 6;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1 & 65535 | 0;
   HEAP8[($1_1 + 4 | 0) >> 0] = (HEAPU8[((($3_1 >>> 1 | 0) & 7 | 0) + 7622 | 0) >> 0] | 0) + ($3_1 & 1 | 0) | 0;
   $0_1 = HEAPU8[((($3_1 >>> $5_1 | 0) & 3 | 0) + 7630 | 0) >> 0] | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 6;
   HEAP8[($1_1 + 12 | 0) >> 0] = 1;
   $3_1 = (($3_1 >>> 7 | 0) & 4094 | 0) + -5 | 0;
   HEAP16[($1_1 + 6 | 0) >> 1] = ((Math_imul($3_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (Math_imul($0_1, 256e3) >>> 0) | 0;
   return $3_1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(56 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 56 | 0, $1_1 | 0, 7291 | 0);
     HEAP32[($1_1 + 52 | 0) >> 2] = 0;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(7684 | 0, 7692 | 0, 45 | 0);
  abort();
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 68 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 56 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $9_1 = 0, $4_1 = 0, $11_1 = 0, $10_1 = 0, $5_1 = 0, $16_1 = 0, $15_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 261 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $5_1 = $0_1 + 8 | 0;
  $822($5_1 | 0, 0 | 0, 44 | 0) | 0;
  $6_1 = $3_1 + 52 | 0;
  $7_1 = $3_1 + 48 | 0;
  $8_1 = $3_1 + 56 | 0;
  label$5 : while (1) {
   $763($3_1 + 80 | 0 | 0, $4_1 | 0);
   $1_1 = 0;
   $9_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $10_1 = $1_1;
       label$10 : {
        $11_1 = $764($3_1 + 80 | 0 | 0) | 0;
        if (($11_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $1_1 = $10_1;
        break label$8;
       }
       $1_1 = $10_1 + 1 | 0;
       $9_1 = ($9_1 << 8 | 0) & 65280 | 0 | $11_1 | 0;
       if (($9_1 | 0) != (2935 | 0)) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[($0_1 + 52 | 0) >> 2] = 0;
      label$11 : while (1) {
       label$12 : {
        if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        $9_1 = $754($3_1 + 80 | 0 | 0) | 0;
        HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
        HEAP32[($3_1 + 68 | 0) >> 2] = $9_1 + -2 | 0;
        $827(7769 | 0, $3_1 + 64 | 0 | 0);
       }
       $9_1 = $96($3_1 + 80 | 0 | 0, $5_1 | 0, $3_1 + 76 | 0 | 0) | 0;
       if ((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
       label$13 : {
        label$14 : {
         if (!$9_1) {
          break label$14
         }
         label$15 : {
          if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$15
          }
          if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
          $12_1 = $754($3_1 + 80 | 0 | 0) | 0;
          $13_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          $14_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          HEAP32[$6_1 >> 2] = HEAPU16[($0_1 + 14 | 0) >> 1] | 0;
          HEAP32[$7_1 >> 2] = $14_1;
          HEAP32[$8_1 >> 2] = ($13_1 | 0) == (129 | 0) ? 7879 : 7883;
          HEAP32[($3_1 + 44 | 0) >> 2] = $9_1;
          HEAP32[($3_1 + 40 | 0) >> 2] = $12_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $11_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          $827(7806 | 0, $3_1 + 32 | 0 | 0);
         }
         $766($3_1 + 80 | 0 | 0, $9_1 | 0) | 0;
         $9_1 = $777($3_1 + 80 | 0 | 0) | 0;
         if ((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         if (($9_1 | 0) == (2935 | 0)) {
          break label$13
         }
         if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         $1_1 = $754($3_1 + 80 | 0 | 0) | 0;
         HEAP32[($3_1 + 28 | 0) >> 2] = 2935;
         HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
         HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
         $827(7888 | 0, $3_1 + 16 | 0 | 0);
        }
        $1_1 = $10_1 + 3 | 0;
        break label$8;
       }
       $9_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($0_1 + 52 | 0) >> 2] = $9_1;
       if ($9_1 >>> 0 < 3 >>> 0) {
        continue label$11
       }
       break label$11;
      };
      $1_1 = $100($0_1 | 0) | 0;
      break label$7;
     }
     label$16 : {
      if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$16
      }
      if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$16
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(7936 | 0, $3_1 | 0);
     }
     if ($1_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$17 : {
     $16_1 = $3_1 + 96 | 0;
     if ($16_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $16_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 80 | 0 | 0, $4_1 | 0);
   $766($3_1 + 80 | 0 | 0, $1_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 80 | 0 | 0);
   continue label$5;
  };
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   $1_1 = $813(328 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($1_1 + 4 | 0) >> 2] = 1;
   $973($1_1 + 20 | 0 | 0, $0_1 + 8 | 0 | 0, 44 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 79 | 0);
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 244 | 0);
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0) >>> 0 < 2 >>> 0) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 90;
   $2_1 = $100($0_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if (($1_1 | 0) != (1297239878 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($2_1 | 0) == (1179011393 | 0) | ($2_1 | 0) == (1128679745 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(32 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61672 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 32;
    $827(8036 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 32 | 0, $2_1 | 0, 7976 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   $624($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 40 | 0) >> 2] = 1297239878;
   HEAP8[($1_1 + 36 | 0) >> 0] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = 36;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $623($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = $2_1;
    $616($0_1 | 0, $2_1 + 16 | 0 | 0, 1296912195 | 0, 37 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 96 | 0);
  }
  return ($1_1 | 0) != (1179011393 | 0) & ($1_1 | 0) != (1128679745 | 0) | 0 | 0;
 }
 
 function $106($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 110 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61672 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61672 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $10_1 = 0;
     break label$6;
    }
    $10_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(8171 | 0, $5_1 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
      break label$10
     }
     if ($3_1) {
      break label$10
     }
     if (($1_1 | 0) != (1296912195 | 0)) {
      break label$10
     }
     if (!$4_1) {
      break label$10
     }
     $1_1 = 1;
     if (($756($4_1 | 0) | 0 | 0) != ($2_1 | 0)) {
      break label$9
     }
     $762($5_1 + 48 | 0 | 0, $4_1 | 0);
     $1_1 = 1;
     if (!($109($5_1 + 48 | 0 | 0, $5_1 + 64 | 0 | 0) | 0)) {
      break label$9
     }
     $3_1 = $813(328 | 0) | 0;
     if (!$3_1) {
      break label$9
     }
     $218($3_1 | 0);
     HEAP32[($3_1 + 20 | 0) >> 2] = 138;
     HEAP32[($3_1 + 4 | 0) >> 2] = 1;
     HEAP32[($3_1 + 8 | 0) >> 2] = 1;
     HEAP8[($3_1 + 24 | 0) >> 0] = HEAPU8[($5_1 + 64 | 0) >> 0] | 0;
     HEAP8[($3_1 + 25 | 0) >> 0] = HEAPU8[($5_1 + 72 | 0) >> 0] | 0;
     $2_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
     $1_1 = 0;
     HEAP16[($3_1 + 26 | 0) >> 1] = 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
     label$11 : {
      $2_1 = $813(40 | 0) | 0;
      if ($2_1) {
       break label$11
      }
      $815($3_1 | 0);
      break label$9;
     }
     $214($2_1 | 0, 20 | 0);
     $215($2_1 | 0, $3_1 | 0);
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     break label$9;
    }
    $1_1 = 1;
    if (!$4_1) {
     break label$8
    }
   }
   $735($4_1 | 0);
  }
  label$12 : {
   $12_1 = $5_1 + 80 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 201 | 0);
  }
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 16 | 0 | 0);
  $629(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 32 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $108($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $24_1 = 0, $24$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 222 | 0);
  }
  label$5 : {
   label$6 : {
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    $31_1 = !(i64toi32_i32$1 | i64toi32_i32$0 | 0) ? 8192 : i64toi32_i32$1;
    i64toi32_i32$0 = $24$hi;
    $3_1 = $50($1_1 | 0, $24_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, $4_1 + 12 | 0 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    $3_1 = 0;
    break label$5;
   }
   $797($2_1 | 0, $3_1 | 0);
   $630(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $815($1_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $619(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$7 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, i64toi32_i32$5 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $6_1 = 0, $5_1 = 0, $32$hi = 0, $38_1 = 0, $38$hi = 0, $60$hi = 0, $72$hi = 0, $76$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = $777($0_1 | 0) | 0;
  $768($0_1 | 0, $2_1 + 22 | 0 | 0, 10 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   label$4 : while (1) {
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $32$hi = i64toi32_i32$1;
    i64toi32_i32$0 = ($3_1 + ($2_1 + 22 | 0) | 0) + 2 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$0 >> 0] | 0;
    i64toi32_i32$2 = 0;
    $38_1 = i64toi32_i32$1;
    $38$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $32$hi;
    i64toi32_i32$0 = $21_1;
    i64toi32_i32$1 = $38$hi;
    i64toi32_i32$3 = $38_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (8 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $4_1 = HEAPU8[($2_1 + 22 | 0) >> 0] | 0;
   $0_1 = ($4_1 << 8 | 0) & 32512 | 0 | (HEAPU8[($2_1 + 23 | 0) >> 0] | 0) | 0;
   $3_1 = 0;
   label$5 : {
    i64toi32_i32$1 = $7$hi;
    if (!($7_1 | i64toi32_i32$1 | 0)) {
     break label$5
    }
    if (($0_1 | 0) == (32767 | 0)) {
     break label$3
    }
   }
   if (($0_1 + -16383 | 0) >>> 0 > 126 >>> 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
   $60$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 & 128 | 0;
   i64toi32_i32$5 = $60$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$2;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
   $3_1 = $0_1 + -16446 | 0;
   label$6 : {
    label$7 : {
     if ($0_1 >>> 0 > 16445 >>> 0) {
      break label$7
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $72$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$3 = $72$hi;
     i64toi32_i32$5 = 0 - $3_1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $22_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $22_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
     }
     $7_1 = $22_1;
     $7$hi = i64toi32_i32$3;
     break label$6;
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = 0;
    $76$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = $76$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $23_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $23_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $7_1 = $23_1;
    $7$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $7$hi;
   HEAP32[($1_1 + 12 | 0) >> 2] = $7_1;
   $3_1 = 1;
   if ((HEAP8[(0 + 61688 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61688 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(8224 | 0, $2_1 | 0);
  }
  label$8 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  return ($115($0_1 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61704 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(8356 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 8300 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8300 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8300 | 0, 8411 | 0, 66 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $113($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8300 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8300 | 0, 8411 | 0, 87 | 0);
  }
  $5_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 61704 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61704 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
   HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   $827(8488 | 0, $4_1 + 16 | 0 | 0);
  }
  label$6 : {
   i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $1_1 = $50($1_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
   if (!$1_1) {
    break label$6
   }
   $5_1 = 0;
   $6_1 = $756($1_1 | 0) | 0;
   label$7 : {
    if ((HEAP8[(0 + 61704 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 61704 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(8524 | 0, $4_1 | 0);
   }
   $762($4_1 + 40 | 0 | 0, $1_1 | 0);
   $0_1 = $115($4_1 + 40 | 0 | 0) | 0;
   $735($1_1 | 0);
   if (($0_1 & -2 | 0 | 0) != (144 | 0)) {
    break label$6
   }
   label$8 : {
    $1_1 = $813(40 | 0) | 0;
    if ($1_1) {
     break label$8
    }
    $114(106 | 0);
    break label$6;
   }
   $214($1_1 | 0, 21 | 0);
   label$9 : {
    $3_1 = $813(328 | 0) | 0;
    if ($3_1) {
     break label$9
    }
    $114(109 | 0);
    $815($1_1 | 0);
    break label$6;
   }
   $218($3_1 | 0);
   HEAP16[($3_1 + 24 | 0) >> 1] = 4097;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 1;
   HEAP32[($3_1 + 4 | 0) >> 2] = 1;
   HEAP32[($3_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = ($0_1 | 0) == (145 | 0) ? 16e3 : 8e3;
   HEAP32[($1_1 + 8 | 0) >> 2] = 21;
   $215($1_1 | 0, $3_1 | 0);
   $5_1 = $1_1;
  }
  label$10 : {
   $8_1 = $4_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  $862(8411 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (($776($0_1 | 0) | 0 | 0) != (1296113955 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if (($764($0_1 | 0) | 0 | 0) != (82 | 0)) {
     break label$2
    }
    label$3 : {
     $1_1 = $764($0_1 | 0) | 0;
     if (($1_1 | 0) != (10 | 0)) {
      break label$3
     }
     return 144 | 0;
    }
    if (($1_1 | 0) != (45 | 0)) {
     break label$2
    }
    if (($781($0_1 | 0) | 0 | 0) != (672343 | 0)) {
     break label$2
    }
    $1_1 = 145;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $120($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $3_1 = $1_1 + 48 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61720 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(8624 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 8563 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8563 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8563 | 0, 8679 | 0, 101 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $119($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $68_1 = 0, $68$hi = 0, $70_1 = 0, $70$hi = 0;
  label$1 : {
   $4_1 = global$0 - 96 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8563 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8563 | 0, 8679 | 0, 121 | 0);
  }
  $5_1 = 0;
  label$5 : {
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $0_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 76 | 0, $4_1 + 92 | 0 | 0) | 0;
   if (!$0_1) {
    break label$5
   }
   $762($4_1 + 72 | 0 | 0, $0_1 | 0);
   label$6 : {
    if (!($120($4_1 + 72 | 0 | 0, $4_1 + 32 | 0 | 0) | 0)) {
     break label$6
    }
    if (!($121($4_1 + 72 | 0 | 0, $4_1 + 8 | 0 | 0) | 0)) {
     break label$6
    }
    if (!(HEAP32[($4_1 + 28 | 0) >> 2] | 0)) {
     break label$6
    }
    $735($0_1 | 0);
    $1_1 = $813(40 | 0) | 0;
    if (!$1_1) {
     break label$5
    }
    $214($1_1 | 0, 19 | 0);
    label$7 : {
     $0_1 = $813(328 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $218($0_1 | 0);
     HEAP32[($1_1 + 12 | 0) >> 2] = 3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul(Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $68_1 = i64toi32_i32$0;
     $68$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$1;
     $70$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $68$hi;
     i64toi32_i32$1 = $70$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($68_1 | 0, i64toi32_i32$0 | 0, $70_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 20 | 0) >> 2] = 148;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 1;
     HEAP32[($0_1 + 4 | 0) >> 2] = 1;
     HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 26 | 0) >> 0] | 0;
     HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 24 | 0) >> 0] | 0;
     $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP16[($0_1 + 26 | 0) >> 1] = 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
     $215($1_1 | 0, $0_1 | 0);
     $5_1 = $1_1;
     break label$5;
    }
    $815($1_1 | 0);
    break label$5;
   }
   $735($0_1 | 0);
  }
  label$8 : {
   $7_1 = $4_1 + 96 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $49_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (541278541 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = $775($0_1 | 0) | 0;
   HEAP16[$1_1 >> 1] = $3_1;
   label$4 : {
    if ((($3_1 + -3980 | 0) & 65535 | 0) >>> 0 <= 10 >>> 0) {
     break label$4
    }
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $766($0_1 | 0, 2 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $776($0_1 | 0) | 0;
   i64toi32_i32$0 = $779($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $49_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $49_1;
   HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $776($0_1 | 0) | 0;
   $766($0_1 | 0, 16 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61736 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61736 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $2_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $8_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[i64toi32_i32$1 >> 2] = $0_1;
   $827(8756 | 0, i64toi32_i32$1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $80_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP16[$1_1 >> 1] = $775($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $775($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP16[($1_1 + 16 | 0) >> 1] = $775($0_1 | 0) | 0;
  HEAP16[($1_1 + 18 | 0) >> 1] = $775($0_1 | 0) | 0;
  $3_1 = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
  $4_1 = 0;
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 61736 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61736 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAPU16[($1_1 + 18 | 0) >> 1] | 0;
   $7_1 = HEAPU16[($1_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   $80_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $80_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(8916 | 0, $2_1 | 0);
  }
  label$4 : {
   $9_1 = $2_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(856 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 856 | 0, $1_1 | 0, 9104 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $123($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(9216 | 0, 9224 | 0, 107 | 0);
  abort();
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 87 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $974($0_1 + 36 | 0 | 0, 0 | 0, 256 | 0) | 0;
  HEAP32[($0_1 + 596 | 0) >> 2] = 27;
  $219($0_1 + 292 | 0 | 0);
  HEAP8[($0_1 + 308 | 0) >> 0] = 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 130 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 856 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $251_1 = 0, $13_1 = 0, $13$hi = 0, $279_1 = 0;
  label$1 : {
   $3_1 = global$0 - 528 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 379 | 0);
  }
  $219($3_1 + 208 | 0 | 0);
  $4_1 = 0;
  HEAP32[($3_1 + 196 | 0) >> 2] = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($5_1 | 0, $1_1 | 0);
  $763($3_1 + 512 | 0 | 0, $5_1 | 0);
  HEAP8[($3_1 + 175 | 0) >> 0] = 0;
  $1_1 = $126($3_1 + 512 | 0 | 0) | 0;
  $6_1 = $754($3_1 + 512 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     $7_1 = $0_1 + 36 | 0;
     $8_1 = $0_1 + 292 | 0;
     $9_1 = ($3_1 + 208 | 0) + 16 | 0;
     label$8 : while (1) {
      if ($1_1 & 128 | 0) {
       break label$6
      }
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             $10_1 = $1_1 & 31 | 0;
             switch ($10_1 + -1 | 0 | 0) {
             case 0:
              break label$11;
             case 4:
              break label$12;
             case 7:
              break label$13;
             case 6:
              break label$14;
             case 1:
             case 2:
             case 3:
             case 5:
              break label$9;
             default:
              break label$15;
             };
            }
            if (($10_1 | 0) == (15 | 0)) {
             break label$10
            }
            if (($10_1 | 0) != (20 | 0)) {
             break label$9
            }
            $1_1 = $782($3_1 + 512 | 0 | 0) | 0;
            if ((HEAP32[($3_1 + 516 | 0) >> 2] | 0 | 0) < (0 | 0)) {
             break label$7
            }
            HEAP32[($0_1 + 596 | 0) >> 2] = $1_1 & 8388608 | 0 ? 31 : 32;
            break label$9;
           }
           if (!($1_1 & 96 | 0)) {
            break label$6
           }
           $1_1 = $127($0_1 | 0, $3_1 + 512 | 0 | 0, $3_1 + 208 | 0 | 0, $3_1 + 175 | 0 | 0, $3_1 + 196 | 0 | 0) | 0;
           if (HEAPU8[($3_1 + 175 | 0) >> 0] | 0) {
            break label$7
           }
           if (!$1_1) {
            break label$6
           }
           $248($9_1 | 0, $3_1 + 96 | 0 | 0, 64 | 0) | 0;
           label$16 : {
            if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$16
            }
            if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$16
            }
            HEAP32[$3_1 >> 2] = 9339;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
            HEAP32[($3_1 + 8 | 0) >> 2] = $3_1 + 96 | 0;
            $827(9307 | 0, $3_1 | 0);
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
           label$17 : {
            $1_1 = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
            if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
             break label$17
            }
            if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
             break label$9
            }
            HEAP32[($0_1 + 32 | 0) >> 2] = -1;
            HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$0 = 0;
            HEAP32[($0_1 + 20 | 0) >> 2] = 0;
            HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
            $973($8_1 | 0, $3_1 + 208 | 0 | 0, 304 | 0) | 0;
            $974($7_1 | 0, 0 | 0, 256 | 0) | 0;
            break label$9;
           }
           label$18 : {
            if ((HEAPU16[($3_1 + 216 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 300 | 0) >> 1] | 0 | 0)) {
             break label$18
            }
            if ((HEAPU16[($3_1 + 218 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 302 | 0) >> 1] | 0 | 0)) {
             break label$9
            }
           }
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = -1;
           HEAP32[($0_1 + 28 | 0) >> 2] = -1;
           HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
           $974($7_1 | 0, 0 | 0, 256 | 0) | 0;
           break label$9;
          }
          if (!($1_1 & 96 | 0)) {
           break label$6
          }
          if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 4 | 0) | 0 | 0) != (4 | 0)) {
           break label$7
          }
          $242($3_1 + 176 | 0 | 0, $3_1 + 201 | 0 | 0, 4 | 0);
          $1_1 = $243($3_1 + 176 | 0 | 0) | 0;
          HEAP32[($3_1 + 196 | 0) >> 2] = $1_1;
          $10_1 = $243($3_1 + 176 | 0 | 0) | 0;
          label$19 : {
           if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $10_1;
           HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 16 | 0) >> 2] = 9339;
           $827(9362 | 0, $3_1 + 16 | 0 | 0);
          }
          if (($1_1 | 0) > (255 | 0)) {
           break label$6
          }
          HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
          if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) != ($10_1 | 0)) {
           break label$9
          }
          if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
           break label$9
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
          HEAP8[(($0_1 + $1_1 | 0) + 36 | 0) >> 0] = 1;
          break label$9;
         }
         if (!($1_1 & 96 | 0)) {
          break label$6
         }
        }
        if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0) | 0 | 0) != (7 | 0)) {
         break label$7
        }
        $242($3_1 + 176 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0);
        $244($3_1 + 176 | 0 | 0) | 0;
        $10_1 = $243($3_1 + 176 | 0 | 0) | 0;
        HEAP32[($3_1 + 196 | 0) >> 2] = $10_1;
        $1_1 = $243($3_1 + 176 | 0 | 0) | 0;
        if (($1_1 | 0) > (255 | 0)) {
         break label$6
        }
        label$20 : {
         if (!(HEAPU8[(($0_1 + $1_1 | 0) + 36 | 0) >> 0] | 0)) {
          break label$20
         }
         HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
         label$21 : {
          if (($10_1 | 0) == (7 | 0)) {
           break label$21
          }
          if (($10_1 | 0) != (2 | 0)) {
           break label$20
          }
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        }
        label$22 : {
         if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$22
         }
         if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$22
         }
         $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         $251_1 = i64toi32_i32$0;
         i64toi32_i32$0 = ($3_1 + 64 | 0) + 16 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $251_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
         HEAP32[($3_1 + 72 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 76 | 0) >> 2] = $10_1;
         HEAP32[($3_1 + 64 | 0) >> 2] = 9339;
         $827(9402 | 0, $3_1 + 64 | 0 | 0);
        }
        if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
         break label$9
        }
        label$23 : {
         if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$23
         }
         if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$23
         }
         i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         $13_1 = i64toi32_i32$1;
         $13$hi = i64toi32_i32$0;
         i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         $279_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $3_1 + 48 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $279_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
         i64toi32_i32$1 = $13$hi;
         i64toi32_i32$0 = $3_1;
         HEAP32[($3_1 + 40 | 0) >> 2] = $13_1;
         HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 32 | 0) >> 2] = 9339;
         $827(9454 | 0, $3_1 + 32 | 0 | 0);
        }
        $4_1 = $128($0_1 | 0) | 0;
        break label$5;
       }
       if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0) | 0 | 0) != (7 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP8[($3_1 + 175 | 0) >> 0] = 0;
      $1_1 = $126($3_1 + 512 | 0 | 0) | 0;
      $6_1 = $754($3_1 + 512 | 0 | 0) | 0;
      if ($1_1) {
       continue label$8
      }
      break label$8;
     };
    }
    if ($6_1 >>> 0 < 5 >>> 0) {
     break label$5
    }
    $763($3_1 + 512 | 0 | 0, $5_1 | 0);
    $766($3_1 + 512 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
    $745($5_1 | 0, $3_1 + 512 | 0 | 0);
    break label$5;
   }
   HEAP8[$2_1 >> 0] = 1;
   $738($5_1 | 0);
   $4_1 = 0;
  }
  label$24 : {
   $12_1 = $3_1 + 528 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $4_1 | 0;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  return $262($0_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $127($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $13_1 = 0.0, $12_1 = 0, $11_1 = 0, $26_1 = 0, $29_1 = 0, $9_1 = 0, $210_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $29_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = 0;
  HEAP8[$3_1 >> 0] = 0;
  label$3 : {
   label$4 : {
    $1_1 = $0_1 + 600 | 0;
    if (($279($5_1 + 32 | 0 | 0, $1_1 | 0, 200 | 0) | 0 | 0) == (200 | 0)) {
     break label$4
    }
    HEAP8[$3_1 >> 0] = 1;
    break label$3;
   }
   $7_1 = $2_1 + 16 | 0;
   $247($7_1 | 0, $1_1 | 0, 200 | 0) | 0;
   $242($5_1 + 16 | 0 | 0, $1_1 | 0, 200 | 0);
   $1_1 = HEAPU8[$1_1 >> 0] | 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 7;
   HEAP32[($5_1 + 24 | 0) >> 2] = 3;
   HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = 0;
   $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[$4_1 >> 2] = $3_1;
   $8_1 = 1;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         if (($1_1 | 0) > (99 | 0)) {
          break label$10
         }
         label$11 : {
          switch ($1_1 + -83 | 0 | 0) {
          case 1:
          case 2:
           break label$8;
          case 0:
          case 3:
           break label$9;
          default:
           break label$11;
          };
         }
         if (($1_1 | 0) == (44 | 0)) {
          break label$9
         }
         break label$8;
        }
        label$12 : {
         $3_1 = $1_1 + -100 | 0;
         if ($3_1 >>> 0 > 22 >>> 0) {
          break label$12
         }
         if ((1 << $3_1 | 0) & 4195329 | 0) {
          break label$9
         }
        }
        if (($1_1 | 0) != (244 | 0)) {
         break label$8
        }
       }
       label$13 : {
        $8_1 = $243($5_1 + 16 | 0 | 0) | 0;
        if (($8_1 | 0) != (3 | 0)) {
         break label$13
        }
        $245($5_1 + 16 | 0 | 0) | 0;
       }
       $244($5_1 + 16 | 0 | 0) | 0;
       $244($5_1 + 16 | 0 | 0) | 0;
       $245($5_1 + 16 | 0 | 0) | 0;
       $6_1 = 0;
       $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
       if (($1_1 | 0) < (0 | 0)) {
        break label$3
       }
       if (!$1_1) {
        break label$8
       }
       $9_1 = ($8_1 | 0) == (3 | 0) ? 12 : 8;
       $10_1 = 0;
       label$14 : while (1) {
        $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
        if (($1_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$15 : {
         if (!$1_1) {
          break label$15
         }
         $4_1 = $10_1 >>> 0 < 6 >>> 0 ? 16 : 64;
         $3_1 = 8;
         $0_1 = 0;
         $1_1 = 8;
         label$16 : while (1) {
          label$17 : {
           label$18 : {
            if (!$1_1) {
             break label$18
            }
            $6_1 = 0;
            $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
            if (($1_1 | 0) < (0 | 0)) {
             break label$3
            }
            $6_1 = ($1_1 + 1 | 0) >> 1 | 0;
            $1_1 = (($3_1 + ($1_1 & 1 | 0 ? $6_1 : 0 - $6_1 | 0) | 0) + 256 | 0 | 0) % (256 | 0) | 0;
            $6_1 = $1_1;
            if ($1_1) {
             break label$17
            }
           }
           $1_1 = 0;
           $6_1 = $3_1;
          }
          $3_1 = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($4_1 | 0)) {
           continue label$16
          }
          break label$16;
         };
        }
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) != ($9_1 | 0)) {
         continue label$14
        }
        break label$14;
       };
      }
      $244($5_1 + 16 | 0 | 0) | 0;
      $6_1 = 0;
      $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
      if (($1_1 | 0) < (0 | 0)) {
       break label$3
      }
      label$19 : {
       switch ($1_1 | 0) {
       case 1:
        break label$19;
       case 0:
        break label$6;
       default:
        break label$5;
       };
      }
      $245($5_1 + 16 | 0 | 0) | 0;
      $244($5_1 + 16 | 0 | 0) | 0;
      $244($5_1 + 16 | 0 | 0) | 0;
      $6_1 = 0;
      $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
      if (($3_1 | 0) < (0 | 0)) {
       break label$3
      }
      if (!$3_1) {
       break label$5
      }
      $1_1 = 0;
      label$20 : while (1) {
       if ($244($5_1 + 16 | 0 | 0) | 0) {
        break label$7
       }
       $1_1 = $1_1 + 1 | 0;
       if (($1_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
       continue label$20;
      };
     }
     $6_1 = 0;
     break label$3;
    }
    $244($5_1 + 16 | 0 | 0) | 0;
   }
   $244($5_1 + 16 | 0 | 0) | 0;
   $245($5_1 + 16 | 0 | 0) | 0;
   $6_1 = 0;
   $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP16[($2_1 + 8 | 0) >> 1] = ($1_1 << 4 | 0) + 16 | 0;
   $6_1 = 0;
   $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = 0;
   $130($7_1 | 0, ($1_1 | 0) != (0 | 0) | 0);
   $210_1 = ($3_1 << 4 | 0) + 16 | 0;
   $3_1 = 2 - $1_1 | 0;
   HEAP16[($2_1 + 10 | 0) >> 1] = Math_imul($210_1, $3_1);
   label$21 : {
    if ($1_1) {
     break label$21
    }
    $245($5_1 + 16 | 0 | 0) | 0;
   }
   $245($5_1 + 16 | 0 | 0) | 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   label$22 : {
    if (!$1_1) {
     break label$22
    }
    $1_1 = -2;
    label$23 : {
     label$24 : {
      switch ($8_1 + -1 | 0 | 0) {
      case 0:
       $3_1 = $3_1 << 1 | 0;
       break label$23;
      case 1:
       break label$23;
      default:
       break label$24;
      };
     }
     $1_1 = -1;
    }
    $6_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $0_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $4_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $10_1 = $243($5_1 + 16 | 0 | 0) | 0;
    HEAP16[($2_1 + 8 | 0) >> 1] = (HEAPU16[($2_1 + 8 | 0) >> 1] | 0) + Math_imul($0_1 + $6_1 | 0, $1_1) | 0;
    HEAP16[($2_1 + 10 | 0) >> 1] = (HEAPU16[($2_1 + 10 | 0) >> 1] | 0) - Math_imul($10_1 + $4_1 | 0, $3_1) | 0;
   }
   $6_1 = 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   label$26 : {
    if (!$1_1) {
     break label$26
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$27 : {
     if (!$1_1) {
      break label$27
     }
     if (($246($5_1 + 16 | 0 | 0, 8 | 0) | 0 | 0) != (255 | 0)) {
      break label$27
     }
     $246($5_1 + 16 | 0 | 0, 16 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 16 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$28 : {
     if (!$1_1) {
      break label$28
     }
     $245($5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$29 : {
     if (!$1_1) {
      break label$29
     }
     $246($5_1 + 16 | 0 | 0, 3 | 0) | 0;
     $245($5_1 + 16 | 0 | 0) | 0;
     $6_1 = 0;
     $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
     if (($1_1 | 0) < (0 | 0)) {
      break label$3
     }
     if (!$1_1) {
      break label$29
     }
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$30 : {
     if (!$1_1) {
      break label$30
     }
     $243($5_1 + 16 | 0 | 0) | 0;
     $243($5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    if (!$1_1) {
     break label$26
    }
    $1_1 = $246($5_1 + 16 | 0 | 0, 32 | 0) | 0;
    $3_1 = $246($5_1 + 16 | 0 | 0, 32 | 0) | 0;
    if (!$1_1) {
     break label$26
    }
    $13_1 = +($1_1 >>> 0);
    HEAPF32[($2_1 + 300 | 0) >> 2] = Math_fround(+Math_fround($3_1 >>> 0) / ($13_1 + $13_1));
   }
   $6_1 = 1;
   if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $1_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAPU16[($2_1 + 10 | 0) >> 1] | 0;
   HEAP32[$5_1 >> 2] = $1_1;
   $827(9495 | 0, $5_1 | 0);
  }
  label$31 : {
   $12_1 = $5_1 + 48 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $6_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($0_1 + 292 | 0) >> 2] = HEAP32[($0_1 + 596 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 292 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 543 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 596 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = ($6_1 | 0) == (27 | 0) ? 9647 : 9637;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(9568 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$7
    }
    if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $248($0_1 + 308 | 0 | 0, $2_1 + 48 | 0 | 0, 64 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[$2_1 >> 2] = $2_1 + 48 | 0;
     $827(9648 | 0, $2_1 | 0);
    }
    HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0 ? 90 : 50;
    $0_1 = $128($0_1 | 0) | 0;
    break label$6;
   }
   label$9 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 596 | 0) >> 2] | 0 | 0) == (27 | 0)) {
     break label$9
    }
    HEAP32[$1_1 >> 2] = 50;
    $0_1 = $128($0_1 | 0) | 0;
    break label$6;
   }
   $0_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
  }
  label$10 : {
   $10_1 = $2_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $1_1;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(332 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 332 | 0, $1_1 | 0, 9680 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $132($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(9780 | 0, 9788 | 0, 69 | 0);
  abort();
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 54 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $219($0_1 + 28 | 0 | 0);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 92 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 332 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $88_1 = 0;
  label$1 : {
   $3_1 = global$0 - 400 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 183 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 384 | 0 | 0, $4_1 | 0);
  $5_1 = $0_1 + 28 | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      $1_1 = $262($3_1 + 384 | 0 | 0, -1 | 0) | 0;
      $6_1 = $754($3_1 + 384 | 0 | 0) | 0;
      label$9 : {
       label$10 : {
        label$11 : {
         switch ($1_1 + -432 | 0 | 0) {
         case 3:
         case 6:
          HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         case 5:
          HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         case 0:
          $1_1 = $135($3_1 + 384 | 0 | 0, $3_1 + 80 | 0 | 0) | 0;
          if ((HEAP32[($3_1 + 388 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          label$17 : {
           if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$17
           }
           if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$17
           }
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = HEAPU16[($3_1 + 88 | 0) >> 1] | 0;
           HEAP32[($3_1 + 56 | 0) >> 2] = HEAPU16[($3_1 + 90 | 0) >> 1] | 0;
           $827(9871 | 0, $3_1 + 48 | 0 | 0);
          }
          label$18 : {
           if ($1_1) {
            break label$18
           }
           HEAP8[$2_1 >> 0] = 1;
           break label$7;
          }
          $1_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + 1 | 0;
          HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
          label$19 : {
           if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           label$20 : {
            if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$20
            }
            i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
            HEAP32[($3_1 + 36 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
            $88_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $3_1;
            HEAP32[($3_1 + 40 | 0) >> 2] = $88_1;
            HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(9912 | 0, $3_1 + 32 | 0 | 0);
           }
           $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
          }
          label$21 : {
           $1_1 = $1_1 & 65535 | 0;
           if (($1_1 | 0) != (1 | 0)) {
            break label$21
           }
           i64toi32_i32$0 = $0_1;
           i64toi32_i32$1 = 0;
           HEAP32[($0_1 + 16 | 0) >> 2] = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
           $973($5_1 | 0, $3_1 + 80 | 0 | 0, 304 | 0) | 0;
           continue label$8;
          }
          label$22 : {
           label$23 : {
            if ((HEAPU16[($3_1 + 88 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 36 | 0) >> 1] | 0 | 0)) {
             break label$23
            }
            if ((HEAPU16[($3_1 + 90 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 38 | 0) >> 1] | 0 | 0)) {
             break label$22
            }
           }
           HEAP16[($0_1 + 8 | 0) >> 1] = 0;
           continue label$8;
          }
          if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 < $1_1 >>> 0) {
           continue label$8
          }
          break label$6;
         case 1:
          if (($764($3_1 + 384 | 0 | 0) | 0 | 0) != (-1 | 0)) {
           continue label$8
          }
          if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
           continue label$8
          }
          if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
           continue label$8
          }
          break label$6;
         case 4:
         case 8:
          HEAP8[$2_1 >> 0] = 1;
          if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$7
          }
          if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$7
          }
          HEAP32[($3_1 + 68 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
          $827(9977 | 0, $3_1 + 64 | 0 | 0);
          break label$7;
         case 2:
         case 7:
          break label$9;
         default:
          break label$11;
         };
        }
        if ($1_1) {
         break label$9
        }
       }
       $1_1 = 0;
       label$24 : {
        if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
        HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
        $827(10037 | 0, $3_1 + 16 | 0 | 0);
       }
       if ($6_1 >>> 0 < 5 >>> 0) {
        break label$5
       }
       $763($3_1 + 384 | 0 | 0, $4_1 | 0);
       $766($3_1 + 384 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
       $745($4_1 | 0, $3_1 + 384 | 0 | 0);
       break label$5;
      }
      label$25 : {
       if (($1_1 + -257 | 0) >>> 0 > 174 >>> 0) {
        break label$25
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      }
      if ($1_1 >>> 0 < 441 >>> 0) {
       continue label$8
      }
      $6_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
      if ($6_1 >>> 0 < 11 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     HEAP8[$2_1 >> 0] = 1;
     if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(9977 | 0, $3_1 | 0);
    }
    $738($4_1 | 0);
    $1_1 = 0;
    break label$5;
   }
   $1_1 = $136($0_1 | 0) | 0;
  }
  label$26 : {
   $8_1 = $3_1 + 400 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $219($1_1 | 0);
  $3_1 = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = ($3_1 >>> 1 | 0) & 16383 | 0;
  $4_1 = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 10 | 0) >> 1] = $4_1 >>> 19 | 0 | (($3_1 << 13 | 0) & 8192 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if (!(HEAPU16[($1_1 + 8 | 0) >> 1] | 0)) {
    break label$3
   }
   $0_1 = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = Math_imul($0_1 >>> 20 | 0 | (($4_1 << 11 | 0) & 129024 | 0) | 0 | (($0_1 << 11 | 0) & 1073479680 | 0) | 0, 400) >>> 10 | 0;
   if (!($4_1 & 15360 | 0)) {
    break label$3
   }
   $0_1 = ($4_1 >>> 6 | 0) & 15 | 0;
   if (!$0_1) {
    break label$3
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 10080 | 0) >> 2] | 0;
   $823($1_1 + 16 | 0 | 0, $2_1 + 8 | 0 | 0, 4 | 0) | 0;
   $3_1 = 1;
  }
  label$4 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 66;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
   $2_1 = i64toi32_i32$1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = 0;
   $5_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$1 | 0, 400 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_i64_udiv($6_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2_1 >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 28 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 280 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(10161 | 0, $2_1 | 0);
  }
  label$6 : {
   if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
    break label$6
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$6
   }
   if ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 1 | 0) + 2 | 0) >>> 0 < $4_1 >>> 0) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = 60;
   $3_1 = $136($0_1 | 0) | 0;
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 10199 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(10264 | 0, 10272 | 0, 50 | 0);
  abort();
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 72 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $10_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0, $12_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 286 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 96 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = $3_1 + 64 | 0;
  $6_1 = $3_1 + 68 | 0;
  label$5 : while (1) {
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $7_1 = 0;
   $1_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $8_1 = $7_1;
       label$10 : {
        $9_1 = $764($3_1 + 144 | 0 | 0) | 0;
        if (($9_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $7_1 = $8_1;
        break label$8;
       }
       $7_1 = $8_1 + 1 | 0;
       $10_1 = 2147385345;
       $1_1 = $1_1 << 8 | 0 | $9_1 | 0;
       if (($1_1 | 0) != (2147385345 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $9_1 = 0;
      label$11 : {
       label$12 : {
        label$13 : while (1) {
         label$14 : {
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$14
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$14
          }
          $1_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 84 | 0) >> 2] = $1_1 + -4 | 0;
          $827(10349 | 0, $3_1 + 80 | 0 | 0);
         }
         label$15 : {
          label$16 : {
           if (($10_1 | 0) == (1683496997 | 0)) {
            break label$16
           }
           if (($10_1 | 0) != (2147385345 | 0)) {
            break label$12
           }
           $1_1 = $141($3_1 + 144 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
           break label$15;
          }
          $1_1 = $142($3_1 + 144 | 0 | 0) | 0;
         }
         if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         if (!$1_1) {
          break label$11
         }
         label$17 : {
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$17
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$17
          }
          $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
          HEAP32[$6_1 >> 2] = HEAPU16[($3_1 + 102 | 0) >> 1] | 0;
          HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
          HEAP32[($3_1 + 56 | 0) >> 2] = $10_1;
          HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
          $827(10386 | 0, $3_1 + 48 | 0 | 0);
         }
         $766($3_1 + 144 | 0 | 0, $1_1 | 0) | 0;
         label$18 : {
          $1_1 = $772($3_1 + 144 | 0 | 0) | 0;
          if ($1_1) {
           break label$18
          }
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$18
          }
          label$19 : while (1) {
           label$20 : {
            if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$20
            }
            if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$20
            }
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(10456 | 0, $3_1 + 32 | 0 | 0);
           }
           $1_1 = $772($3_1 + 144 | 0 | 0) | 0;
           if ($1_1) {
            break label$18
           }
           if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
            continue label$19
           }
           break label$19;
          };
         }
         $10_1 = $782($3_1 + 144 | 0 | 0) | 0;
         if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         label$21 : {
          $10_1 = $10_1 | ($1_1 << 24 | 0) | 0;
          if (($10_1 | 0) == (1683496997 | 0)) {
           break label$21
          }
          if (($10_1 | 0) == (2147385345 | 0)) {
           break label$21
          }
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          $1_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[($3_1 + 28 | 0) >> 2] = 2147385345;
          HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
          HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
          $827(10500 | 0, $3_1 + 16 | 0 | 0);
          break label$11;
         }
         $9_1 = $9_1 + 1 | 0;
         if (($9_1 | 0) != (3 | 0)) {
          continue label$13
         }
         break label$13;
        };
        $738($4_1 | 0);
        $1_1 = $813(328 | 0) | 0;
        if (!$1_1) {
         break label$7
        }
        $218($1_1 | 0);
        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
        $973($1_1 + 20 | 0 | 0, $3_1 + 96 | 0 | 0, 44 | 0) | 0;
        break label$7;
       }
       if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
      }
      $7_1 = $8_1 + 5 | 0;
     }
     label$22 : {
      if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$22
      }
      if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$22
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $7_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(10548 | 0, $3_1 | 0);
     }
     if ($7_1 >>> 0 >= 5 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$23 : {
     $12_1 = $3_1 + 160 | 0;
     if ($12_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $12_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $766($3_1 + 144 | 0 | 0, $7_1 + -4 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 144 | 0 | 0);
   continue label$5;
  };
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = $778($0_1 | 0) | 0;
   $4_1 = ($3_1 >>> 4 | 0) & 16383 | 0;
   if ($4_1 >>> 0 < 95 >>> 0) {
    break label$1
   }
   if ($3_1 >>> 0 < -67108864 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = 130;
   $5_1 = $778($0_1 | 0) | 0;
   $6_1 = $5_1 >>> 30 | 0 | (($3_1 << 2 | 0) & 60 | 0) | 0;
   if ($6_1 >>> 0 > 15 >>> 0) {
    break label$1
   }
   $7_1 = HEAPU8[($6_1 + 10592 | 0) >> 0] | 0;
   HEAP8[($1_1 + 4 | 0) >> 0] = $7_1;
   $6_1 = ($5_1 >>> 26 | 0) & 15 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = HEAPU16[(($6_1 << 1 | 0) + 10608 | 0) >> 1] | 0;
   if (!((14798 >>> $6_1 | 0) & 1 | 0)) {
    break label$1
   }
   $3_1 = $3_1 & 33554432 | 0;
   HEAP16[($1_1 + 6 | 0) >> 1] = HEAPU16[((($5_1 >>> 20 | 0) & 62 | 0) + 10640 | 0) >> 1] | 0;
   label$2 : {
    if (((($5_1 >>> 9 | 0) & 3 | 0) + -1 | 0) >>> 0 > 1 >>> 0) {
     break label$2
    }
    HEAP8[($1_1 + 4 | 0) >> 0] = $7_1 + 1 | 0;
   }
   label$3 : {
    label$4 : {
     if ($3_1) {
      break label$4
     }
     $0_1 = ($778($0_1 | 0) | 0) >>> 30 | 0 | (($5_1 << 2 | 0) & 4 | 0) | 0;
     break label$3;
    }
    $0_1 = (($778($0_1 | 0) | 0) >>> 14 | 0) & 7 | 0;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($0_1 + 10704 | 0) >> 0] | 0;
   label$5 : {
    switch ($0_1 + -4 | 0 | 0) {
    case 0:
    case 3:
     break label$1;
    default:
     break label$5;
    };
   }
   $2_1 = $4_1 + -15 | 0;
  }
  return $2_1 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $19_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $783($1_1 + 16 | 0 | 0, $1_1 | 0);
  $792($1_1 + 16 | 0 | 0, 8 | 0);
  $792($1_1 + 16 | 0 | 0, 2 | 0);
  $0_1 = $789($1_1 + 16 | 0 | 0) | 0;
  $790($1_1 + 16 | 0 | 0, ($0_1 ? 12 : 8) | 0) | 0;
  $0_1 = $790($1_1 + 16 | 0 | 0, ($0_1 ? 20 : 16) | 0) | 0;
  $2_1 = $784($1_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($2_1 ? 0 : ($0_1 + 1 | 0) >>> 0 < 4 >>> 0 ? 0 : $0_1 + -3 | 0) | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 83 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 10720 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(10743 | 0, 10751 | 0, 44 | 0);
  abort();
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 66 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $146($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 77 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 89 | 0);
  }
  $762($3_1 | 0, $1_1 | 0);
  $0_1 = 0;
  label$5 : {
   if (($764($3_1 | 0) | 0 | 0) != (32 | 0)) {
    break label$5
   }
   if ($764($3_1 | 0) | 0) {
    break label$5
   }
   $1_1 = $764($3_1 | 0) | 0;
   label$6 : while (1) {
    label$7 : {
     if (($1_1 | 0) == (15 | 0)) {
      break label$7
     }
     if (($1_1 | 0) != (255 | 0)) {
      break label$5
     }
     label$8 : {
      if ((HEAP8[(0 + 61800 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61800 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $827(10837 | 0, 0 | 0);
     }
     $0_1 = $813(328 | 0) | 0;
     if (!$0_1) {
      break label$5
     }
     $218($0_1 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = 4;
     break label$5;
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    $1_1 = $764($3_1 | 0) | 0;
    if (($1_1 | 0) == (-1 | 0)) {
     break label$5
    }
    $4_1 = $764($3_1 | 0) | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$5
    }
    $1_1 = $4_1 | ($1_1 << 8 | 0) | 0;
    if (($766($3_1 | 0, $1_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
     break label$5
    }
    $1_1 = $764($3_1 | 0) | 0;
    if (($1_1 | 0) != (-1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  label$9 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $0_1 | 0;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 87 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   $827(11039 | 0, $4_1 + 16 | 0 | 0);
  }
  label$6 : {
   if (!$1_1) {
    break label$6
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   label$7 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(11093 | 0, $4_1 | 0);
   }
   label$8 : {
    $6_1 = $4_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(11085 | 0, 10960 | 0, 89 | 0);
  abort();
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 102 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(11139 | 0, $2_1 + 16 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(11184 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(11085 | 0, 10960 | 0, 103 | 0);
  abort();
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(11229 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 172 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 80 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP8[($0_1 + 88 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(11255 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
   $827(11281 | 0, $2_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        $3_1 = $813(112 | 0) | 0;
        if ($3_1) {
         break label$9
        }
        $152(222 | 0);
        break label$8;
       }
       $845($3_1 | 0, 112 | 0, $3_1 | 0, 10944 | 0);
       HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($3_1 + 100 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
       $0_1 = $736($0_1 | 0) | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
       if ($0_1) {
        break label$7
       }
       $152(231 | 0);
       $815($3_1 | 0);
      }
      $3_1 = 0;
      if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      $3_1 = 0;
      if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      $3_1 = 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = 0;
      HEAP32[$2_1 >> 2] = $1_1;
      $827(11318 | 0, $2_1 | 0);
      break label$6;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     $150($3_1 | 0);
     if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
     $827(11318 | 0, $2_1 + 16 | 0 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 48 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(11306 | 0, 10960 | 0, 217 | 0);
   abort();
  }
  $859(11310 | 0, 10960 | 0, 218 | 0);
  abort();
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  $862(10960 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(11306 | 0, 10960 | 0, 265 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 69;
  HEAP32[($0_1 + 4 | 0) >> 2] = 70;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $154($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $735($1_1 | 0);
  return 1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
   $827(11346 | 0, $1_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 278 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   label$7 : while (1) {
    label$8 : {
     if (!($834(61816 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $827(11367 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[(HEAP32[($0_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $150($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 112 | 0, $0_1 | 0, 0 | 0);
  label$9 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$9
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$9
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(11416 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$10 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $6_1 = 0, $132_1 = 0, $135_1 = 0, $268_1 = 0, $271_1 = 0;
  label$1 : {
   $2_1 = global$0 - 208 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 309 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 100 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 104 | 0) >> 2] = $4_1 + $3_1 | 0;
   $827(11437 | 0, $2_1 + 96 | 0 | 0);
  }
  HEAP8[($0_1 + 89 | 0) >> 0] = 0;
  $5_1 = $0_1 + 56 | 0;
  $6_1 = $0_1 + 32 | 0;
  $3_1 = 0;
  $7_1 = 0;
  label$6 : while (1) {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       if ($3_1 & 255 | 0) {
        break label$10
       }
       $3_1 = $798($1_1 | 0) | 0;
       if (!$3_1) {
        break label$9
       }
       $4_1 = $756($3_1 | 0) | 0;
       $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $7_1 = $4_1 + $7_1 | 0;
      }
      HEAP8[($0_1 + 89 | 0) >> 0] = 0;
      label$11 : while (1) {
       $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
       $763($2_1 + 192 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
       label$12 : {
        label$13 : {
         switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
         case 0:
          if (($776($2_1 + 192 | 0 | 0) | 0 | 0) != (1130450022 | 0)) {
           break label$12
          }
          $158($0_1 | 0, $2_1 + 192 | 0 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 1;
          continue label$11;
         case 1:
          label$17 : {
           if ($167($2_1 + 192 | 0 | 0, $6_1 | 0) | 0) {
            break label$17
           }
           if ((HEAP32[($2_1 + 196 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$7
           }
           break label$12;
          }
          label$18 : {
           $3_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
           if (($3_1 | 0) != (127 | 0)) {
            break label$18
           }
           label$19 : {
            if (!($834(61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$19
            }
            HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            $827(11465 | 0, $2_1 + 32 | 0 | 0);
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = 3;
           continue label$11;
          }
          $4_1 = $159($0_1 | 0, $3_1 | 0) | 0;
          label$20 : {
           label$21 : {
            if (!$3_1) {
             break label$21
            }
            if (!$4_1) {
             break label$20
            }
           }
           label$22 : {
            if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$22
            }
            if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$22
            }
            $3_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            HEAP32[($2_1 + 68 | 0) >> 2] = $3_1;
            HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
            $827(11523 | 0, $2_1 + 64 | 0 | 0);
           }
           i64toi32_i32$2 = ($2_1 + 192 | 0) + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $132_1 = i64toi32_i32$0;
           i64toi32_i32$0 = ($2_1 + 176 | 0) + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $132_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $2_1;
           i64toi32_i32$1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
           $135_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[($2_1 + 176 | 0) >> 2] = $135_1;
           HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$0;
           if (($766($2_1 + 192 | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0)) {
            continue label$11
           }
           $3_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $2_1 + 192 | 0 | 0, 0 | 0, 0 | 0) | 0;
           label$23 : {
            if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$23
            }
            if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$23
            }
            $8_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            HEAP32[($2_1 + 52 | 0) >> 2] = $8_1;
            HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
            $827(11565 | 0, $2_1 + 48 | 0 | 0);
           }
           $158($0_1 | 0, $2_1 + 192 | 0 | 0);
           if (!$3_1) {
            continue label$11
           }
           label$24 : {
            if (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) {
             break label$24
            }
            $762($2_1 + 160 | 0 | 0, $3_1 | 0);
            HEAP8[($0_1 + 88 | 0) >> 0] = $168($2_1 + 160 | 0 | 0, $5_1 | 0) | 0;
           }
           if (!$4_1) {
            continue label$11
           }
           $3_1 = (FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0]($4_1, $3_1) | 0 | 0) == (1 | 0);
           HEAP8[($0_1 + 89 | 0) >> 0] = $3_1;
           if (!$3_1) {
            continue label$11
           }
           break label$9;
          }
          HEAP32[($0_1 + 16 | 0) >> 2] = 2;
          HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 4 | 0;
          continue label$11;
         case 2:
          label$25 : {
           if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$25
           }
           if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$25
           }
           $4_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
           $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
           HEAP32[($2_1 + 88 | 0) >> 2] = $8_1;
           HEAP32[($2_1 + 84 | 0) >> 2] = $4_1;
           HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
           $827(11606 | 0, $2_1 + 80 | 0 | 0);
          }
          $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          $3_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $4_1 : $3_1;
          $766($2_1 + 192 | 0 | 0, $3_1 | 0) | 0;
          $158($0_1 | 0, $2_1 + 192 | 0 | 0);
          $3_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $3_1 | 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
          if ($3_1) {
           break label$7
          }
          HEAP32[($0_1 + 16 | 0) >> 2] = HEAPU8[($0_1 + 32 | 0) >> 0] | 0 ? 3 : 1;
          continue label$11;
         case 3:
          break label$13;
         default:
          break label$8;
         };
        }
        label$26 : {
         $4_1 = $171($2_1 + 192 | 0 | 0, $2_1 + 144 | 0 | 0, $5_1 | 0) | 0;
         if (($4_1 | 0) < (0 | 0)) {
          break label$26
         }
         label$27 : while (1) {
          HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
          HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 200 | 0) >> 1] | 0;
          label$28 : {
           if (!($169($2_1 + 192 | 0 | 0, 0 | 0, $4_1 | 0) | 0)) {
            break label$28
           }
           label$29 : while (1) {
            i64toi32_i32$2 = ($2_1 + 192 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $268_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($2_1 + 176 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $268_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
            $271_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $2_1;
            HEAP32[($2_1 + 176 | 0) >> 2] = $271_1;
            HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$0;
            label$30 : {
             $3_1 = $171($2_1 + 176 | 0 | 0, $2_1 + 120 | 0 | 0, $5_1 | 0) | 0;
             if (($3_1 | 0) < (1 | 0)) {
              break label$30
             }
             $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
             $3_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 160 | 0 | 0, $2_1 + 192 | 0 | 0, 0 | 0, 0 | 0) | 0;
             $158($0_1 | 0, $2_1 + 192 | 0 | 0);
             if (!$3_1) {
              break label$28
             }
             label$31 : {
              if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$31
              }
              if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$31
              }
              HEAP32[($2_1 + 4 | 0) >> 2] = $756($3_1 | 0) | 0;
              HEAP32[$2_1 >> 2] = $3_1;
              $827(11653 | 0, $2_1 | 0);
             }
             $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 104 | 0) >> 2] | 0](HEAP32[($0_1 + 96 | 0) >> 2] | 0, $3_1, $2_1 + 144 | 0) | 0;
             HEAP8[($0_1 + 89 | 0) >> 0] = ($3_1 | 0) == (1 | 0);
             if (($3_1 | 0) != (1 | 0)) {
              break label$28
             }
             $859(11675 | 0, 10960 | 0, 443 | 0);
             abort();
            }
            if (($3_1 | 0) == (-1 | 0)) {
             break label$28
            }
            $3_1 = $754($2_1 + 192 | 0 | 0) | 0;
            label$32 : {
             label$33 : {
              $8_1 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
              if (($8_1 | 0) < (0 | 0)) {
               break label$33
              }
              if ((HEAP32[($2_1 + 140 | 0) >> 2] | 0 | 0) != (HEAPU16[($2_1 + 200 | 0) >> 1] | 0 | 0)) {
               break label$33
              }
              $9_1 = HEAP32[($2_1 + 136 | 0) >> 2] | 0;
              HEAP32[($2_1 + 196 | 0) >> 2] = $9_1;
              HEAP32[($2_1 + 192 | 0) >> 2] = (HEAP32[($2_1 + 192 | 0) >> 2] | 0) + ($8_1 - $9_1 | 0) | 0;
              break label$32;
             }
             $769($2_1 + 192 | 0 | 0, $2_1 + 136 | 0 | 0);
            }
            label$34 : {
             if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$34
             }
             if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$34
             }
             HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
             $827(11702 | 0, $2_1 + 16 | 0 | 0);
            }
            HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
            HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 200 | 0) >> 1] | 0;
            if ($169($2_1 + 192 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0) {
             continue label$29
            }
            break label$29;
           };
          }
          $4_1 = $171($2_1 + 192 | 0 | 0, $2_1 + 144 | 0 | 0, $5_1 | 0) | 0;
          if (($4_1 | 0) >= (0 | 0)) {
           continue label$27
          }
          break label$27;
         };
        }
        if (($4_1 | 0) == (-1 | 0)) {
         break label$7
        }
       }
       $160($0_1 | 0);
       continue label$11;
      };
     }
     label$35 : {
      $11_1 = $2_1 + 208 | 0;
      if ($11_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $11_1;
     }
     return $7_1 | 0;
    }
    $766($2_1 + 192 | 0 | 0, $3_1 | 0) | 0;
    $158($0_1 | 0, $2_1 + 192 | 0 | 0);
   }
   $3_1 = HEAPU8[($0_1 + 89 | 0) >> 0] | 0;
   continue label$6;
  };
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $34_1 = 0, $36$hi = 0, $38$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $754($1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(11756 | 0, $2_1 + 16 | 0 | 0);
  }
  $3_1 = $754($1_1 | 0) | 0;
  $4_1 = $0_1 + 24 | 0;
  $34_1 = $4_1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $38$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $36$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $38$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $34_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  label$4 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(11779 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  $763($1_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $766($1_1 | 0, 1 | 0) | 0;
  $158($0_1 | 0, $1_1 | 0);
  label$3 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (1130450022 | 0)) {
    break label$3
   }
   if (!($167($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   $2_1 = !(HEAPU8[($1_1 + 9 | 0) >> 0] | 0);
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(72 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61832 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 72;
    $827(11856 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 72 | 0, $2_1 | 0, 11798 | 0);
   $153($1_1 + 16 | 0 | 0);
   $3_1 = $151($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
   label$5 : {
    if ($3_1) {
     break label$5
    }
    $163(83 | 0);
    $815($2_1 | 0);
    $2_1 = 0;
    break label$3;
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $2_1;
   $148($3_1 | 0, $2_1 + 12 | 0 | 0, 0 | 0, 71 | 0);
  }
  label$6 : {
   $5_1 = $1_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  $862(11901 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$5 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(12006 | 0, $2_1 | 0);
    }
    label$6 : {
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
       break label$6
      }
     }
     $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 61 | 0);
    }
    $762($2_1 + 16 | 0 | 0, $1_1 | 0);
    HEAP8[($0_1 + 64 | 0) >> 0] = $168($2_1 + 16 | 0 | 0, $0_1 + 32 | 0 | 0) | 0;
    $735($1_1 | 0);
    label$8 : {
     $4_1 = $2_1 + 32 | 0;
     if ($4_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $4_1;
    }
    return 1 | 0;
   }
   $859(11991 | 0, 11901 | 0, 57 | 0);
   abort();
  }
  $859(11999 | 0, 11901 | 0, 58 | 0);
  abort();
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 100 | 0);
  }
  $149(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $0_1 + 12 | 0 | 0);
  $156(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 72 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $166($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $8_1 = 0, $7_1 = 0, $37_1 = 0, $43_1 = 0, $45$hi = 0, $67_1 = 0, $82$hi = 0, $25_1 = 0, $124$hi = 0, $126$hi = 0, $26_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 116 | 0);
  }
  HEAP8[($0_1 + 64 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  $9_1 = 0;
  $9$hi = i64toi32_i32$0;
  label$5 : {
   label$6 : while (1) {
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 16384;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$5
    }
    label$7 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $37_1 = $4_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($37_1 + 20 | 0) >> 2] = i64toi32_i32$4;
     $827(12033 | 0, $4_1 + 16 | 0 | 0);
    }
    $43_1 = $1_1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $45$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $45$hi;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = $50($43_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 28 | 0 | 0) | 0;
    if (!$5_1) {
     break label$5
    }
    $6_1 = $756($5_1 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $67_1 = $4_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     HEAP32[($67_1 + 4 | 0) >> 2] = i64toi32_i32$5;
     $827(12070 | 0, $4_1 | 0);
    }
    $797($2_1 | 0, $5_1 | 0);
    $5_1 = $157(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
    if (HEAPU8[($0_1 + 64 | 0) >> 0] | 0) {
     break label$5
    }
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = 0;
    $82$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$3 = $82$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = i64toi32_i32$0 + $6_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < $6_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($5_1 | 0) == ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  $150(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $5_1 = 0;
  label$9 : {
   if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
    break label$9
   }
   label$10 : {
    $5_1 = $813(40 | 0) | 0;
    if ($5_1) {
     break label$10
    }
    $163(147 | 0);
    $5_1 = 0;
    break label$9;
   }
   $214($5_1 | 0, 18 | 0);
   label$11 : {
    $6_1 = $813(328 | 0) | 0;
    if ($6_1) {
     break label$11
    }
    $163(150 | 0);
    $815($5_1 | 0);
    $5_1 = 0;
    break label$9;
   }
   $218($6_1 | 0);
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = 1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$5;
   HEAP8[(i64toi32_i32$0 + 24 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
   HEAP8[(i64toi32_i32$0 + 25 | 0) >> 0] = HEAPU8[($0_1 + 49 | 0) >> 0] | 0;
   $2_1 = $0_1 + 44 | 0;
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 147;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = 18;
   label$12 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$12
    }
    i64toi32_i32$2 = $0_1 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $124$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $126$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $124$hi;
    $26_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $126$hi;
    i64toi32_i32$5 = __wasm_i64_udiv($26_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$5;
    $3_1 = HEAPU16[($0_1 + 32 | 0) >> 1] | 0;
    $1_1 = HEAPU16[($0_1 + 34 | 0) >> 1] | 0;
    if (!($3_1 | $1_1 | 0)) {
     break label$12
    }
    HEAP16[($6_1 + 26 | 0) >> 1] = ((Math_imul($2_1, (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + (HEAP32[($0_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) >>> 0) / (($1_1 + $3_1 | 0) >>> 0) | 0;
   }
   $215($5_1 | 0, $6_1 | 0);
  }
  label$13 : {
   $8_1 = $4_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $764($0_1 | 0) | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $3_1 & 127 | 0;
  HEAP8[$1_1 >> 0] = ($3_1 & 128 | 0) >>> 7 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAPU8[$1_1 >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $4_1 ? 12147 : 12152;
   $827(12110 | 0, $2_1 | 0);
  }
  label$4 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $9_1 = 0, $8_1 = 0, $45_1 = 0, $49$hi = 0, $52$hi = 0, $53_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $782($0_1 | 0) | 0;
  $3_1 = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $3_1 >>> 12 | 0;
  HEAP8[($1_1 + 17 | 0) >> 0] = (($3_1 >>> 4 | 0) & 31 | 0) + 1 | 0;
  HEAP8[($1_1 + 16 | 0) >> 0] = (($3_1 >>> 9 | 0) & 7 | 0) + 1 | 0;
  $45_1 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 & 15 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $49$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $52$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$0 = $21_1;
  i64toi32_i32$2 = $52$hi;
  i64toi32_i32$3 = $778($0_1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $53_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $45_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $53_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$2;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $4_1 = HEAPU16[$1_1 >> 1] | 0;
    $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $6_1 = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 17 | 0) >> 0] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $10_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(12153 | 0, $2_1 | 0);
   }
   $3_1 = 1;
  }
  label$5 : {
   $9_1 = $2_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $3_1 | 0;
 }
 
 function $169($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $11_1 = 0, $89_1 = 0, $92_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $4_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  $7_1 = 0;
  $8_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($9_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + -1 | 0;
       $9_1 = HEAP32[$0_1 >> 2] | 0;
       HEAP32[$0_1 >> 2] = $9_1 + 1 | 0;
       $6_1 = $6_1 + 1 | 0;
       $9_1 = HEAPU8[$9_1 >> 0] | 0;
       break label$6;
      }
      $6_1 = $6_1 + 1 | 0;
      $9_1 = $764($0_1 | 0) | 0;
      if (($9_1 | 0) == (-1 | 0)) {
       break label$4
      }
     }
     $8_1 = $8_1 + 1 | 0;
     label$8 : {
      label$9 : {
       label$10 : {
        if (($7_1 | 0) == (1 | 0)) {
         break label$10
        }
        $10_1 = 0;
        label$11 : {
         switch ($7_1 | 0) {
         case 0:
          break label$11;
         case 2:
          break label$9;
         default:
          break label$8;
         };
        }
        $7_1 = ($6_1 | 0) == ($2_1 | 0);
        $6_1 = $7_1 ? 0 : $6_1;
        $10_1 = $9_1;
        break label$8;
       }
       $7_1 = ($6_1 | 0) == (2 | 0) ? 2 : 1;
       $5_1 = $9_1 | (($5_1 & 65535 | 0) << 8 | 0) | 0;
       continue label$5;
      }
      $7_1 = $5_1 & 65535 | 0;
      $10_1 = $7_1 >>> 8 | 0;
      $5_1 = $9_1 | ($7_1 << 8 | 0) | 0;
      $7_1 = 2;
     }
     $4_1 = $170($4_1 & 65535 | 0 | 0, $10_1 & 255 | 0 | 0) | 0;
     if ($8_1 >>> 0 <= $1_1 >>> 0) {
      continue label$5
     }
     if (($7_1 | 0) != (2 | 0)) {
      continue label$5
     }
     $7_1 = 2;
     if (($4_1 | 0) != ($5_1 & 65535 | 0 | 0)) {
      continue label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3_1 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $92_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $92_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $9_1 = $777($3_1 + 32 | 0 | 0) | 0;
     label$12 : {
      if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$12
      }
      label$13 : {
       if (($9_1 & 65532 | 0 | 0) != (65528 | 0)) {
        break label$13
       }
       label$14 : {
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$14
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$14
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = $5_1 & 65535 | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $6_1;
        $827(12258 | 0, $3_1 + 16 | 0 | 0);
       }
       $0_1 = 1;
       break label$3;
      }
      $4_1 = $5_1;
      continue label$5;
     }
     break label$5;
    };
    $7_1 = 2;
   }
   $0_1 = 0;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   $0_1 = 0;
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$3_1 >> 2] = $7_1;
   $827(12309 | 0, $3_1 | 0);
  }
  label$15 : {
   $12_1 = $3_1 + 48 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $0_1 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[(((($0_1 >>> 8 | 0) ^ $1_1 | 0) << 1 | 0) + 12720 | 0) >> 1] | 0) ^ (($0_1 << 8 | 0) & 65280 | 0) | 0 | 0;
 }
 
 function $171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $23_1 = 0, $26_1 = 0, $5_1 = 0, $7_1 = 0, $266_1 = 0, $269_1 = 0;
  label$1 : {
   $3_1 = global$0 - 288 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 256 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 256 | 0) >> 2] = $26_1;
  HEAP32[($3_1 + 260 | 0) >> 2] = i64toi32_i32$0;
  $783($3_1 + 272 | 0 | 0, $3_1 + 256 | 0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = $790($3_1 + 272 | 0 | 0, 14 | 0) | 0;
     if (($4_1 | 0) == (16382 | 0)) {
      break label$5
     }
     $0_1 = -2;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 292;
     HEAP32[($3_1 + 232 | 0) >> 2] = 16382;
     HEAP32[($3_1 + 236 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3_1 + 228 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 224 | 0) >> 2] = 12377;
     $827(12339 | 0, $3_1 + 224 | 0 | 0);
     break label$4;
    }
    label$6 : {
     if (!($789($3_1 + 272 | 0 | 0) | 0)) {
      break label$6
     }
     $0_1 = -2;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 220 | 0) >> 2] = 296;
     HEAP32[($3_1 + 216 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 212 | 0) >> 2] = 12377;
     HEAP32[($3_1 + 208 | 0) >> 2] = 12377;
     $827(12382 | 0, $3_1 + 208 | 0 | 0);
     break label$4;
    }
    HEAP8[$1_1 >> 0] = ($789($3_1 + 272 | 0 | 0) | 0 | 0) != (0 | 0);
    $4_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $5_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $6_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $7_1 = $790($3_1 + 272 | 0 | 0, 3 | 0) | 0;
    label$7 : {
     if (!($789($3_1 + 272 | 0 | 0) | 0)) {
      break label$7
     }
     $0_1 = -4;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 204 | 0) >> 2] = 305;
     HEAP32[($3_1 + 200 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 196 | 0) >> 2] = 12414;
     HEAP32[($3_1 + 192 | 0) >> 2] = 12377;
     $827(12382 | 0, $3_1 + 192 | 0 | 0);
     break label$4;
    }
    label$8 : {
     if (!($784($3_1 + 272 | 0 | 0) | 0)) {
      break label$8
     }
     $0_1 = -1;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 307;
     HEAP32[($3_1 + 8 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 4 | 0) >> 2] = 12427;
     HEAP32[$3_1 >> 2] = 12423;
     $827(12382 | 0, $3_1 | 0);
     break label$3;
    }
    label$9 : {
     label$10 : {
      label$11 : {
       if (!(HEAPU8[$1_1 >> 0] | 0)) {
        break label$11
       }
       if ($172($3_1 + 272 | 0 | 0, 56 | 0, $3_1 + 248 | 0 | 0) | 0) {
        break label$10
       }
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($3_1 + 188 | 0) >> 2] = 312;
       HEAP32[($3_1 + 184 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 180 | 0) >> 2] = 12445;
       HEAP32[($3_1 + 176 | 0) >> 2] = 12439;
       $827(12382 | 0, $3_1 + 176 | 0 | 0);
       break label$9;
      }
      if ($172($3_1 + 272 | 0 | 0, 48 | 0, $3_1 + 248 | 0 | 0) | 0) {
       break label$10
      }
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      HEAP32[($3_1 + 172 | 0) >> 2] = 317;
      HEAP32[($3_1 + 168 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 164 | 0) >> 2] = 12459;
      HEAP32[($3_1 + 160 | 0) >> 2] = 12439;
      $827(12382 | 0, $3_1 + 160 | 0 | 0);
      break label$9;
     }
     $8_1 = 192;
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         switch ($4_1 | 0) {
         case 0:
          $0_1 = -4;
          if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$4
          }
          if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 156 | 0) >> 2] = 321;
          HEAP32[($3_1 + 152 | 0) >> 2] = 12152;
          HEAP32[($3_1 + 148 | 0) >> 2] = 0;
          HEAP32[($3_1 + 144 | 0) >> 2] = 12439;
          $827(12472 | 0, $3_1 + 144 | 0 | 0);
          break label$4;
         case 1:
          break label$14;
         default:
          break label$15;
         };
        }
        label$17 : {
         if ($4_1 >>> 0 > 5 >>> 0) {
          break label$17
         }
         $8_1 = 576 << ($4_1 + -2 | 0) | 0;
         break label$14;
        }
        label$18 : {
         switch ($4_1 + -6 | 0 | 0) {
         case 0:
          $8_1 = ($790($3_1 + 272 | 0 | 0, 8 | 0) | 0) + 1 | 0;
          break label$14;
         case 1:
          $8_1 = ($790($3_1 + 272 | 0 | 0, 16 | 0) | 0) + 1 | 0;
          break label$14;
         default:
          break label$18;
         };
        }
        if ($4_1 >>> 0 >= 16 >>> 0) {
         break label$13
        }
        $8_1 = 256 << ($4_1 + -8 | 0) | 0;
       }
       HEAP16[($1_1 + 4 | 0) >> 1] = $8_1;
       $4_1 = 882e3;
       label$21 : {
        label$22 : {
         switch ($5_1 | 0) {
         case 2:
          $4_1 = 176400;
          break label$21;
         case 3:
          $4_1 = 192e3;
          break label$21;
         case 4:
          $4_1 = 8e3;
          break label$21;
         case 5:
          $4_1 = 16e3;
          break label$21;
         case 6:
          $4_1 = 22050;
          break label$21;
         case 7:
          $4_1 = 24e3;
          break label$21;
         case 8:
          $4_1 = 32e3;
          break label$21;
         case 9:
          $4_1 = 44100;
          break label$21;
         case 10:
          $4_1 = 48e3;
          break label$21;
         case 11:
          $4_1 = 96e3;
          break label$21;
         case 12:
          $4_1 = Math_imul($790($3_1 + 272 | 0 | 0, 8 | 0) | 0, 1e3);
          break label$21;
         case 13:
          $4_1 = $790($3_1 + 272 | 0 | 0, 16 | 0) | 0;
          break label$21;
         case 14:
          $4_1 = Math_imul($790($3_1 + 272 | 0 | 0, 16 | 0) | 0, 10);
          break label$21;
         default:
          $0_1 = -4;
          if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$4
          }
          if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 44 | 0) >> 2] = 367;
          HEAP32[($3_1 + 40 | 0) >> 2] = 12152;
          HEAP32[($3_1 + 36 | 0) >> 2] = 12414;
          HEAP32[($3_1 + 32 | 0) >> 2] = 12377;
          $827(12382 | 0, $3_1 + 32 | 0 | 0);
          break label$4;
         case 1:
          break label$21;
         case 0:
          break label$22;
         };
        }
        $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
       label$37 : {
        if ($6_1 >>> 0 > 7 >>> 0) {
         break label$37
        }
        $4_1 = $6_1 + 1 | 0;
        break label$12;
       }
       $4_1 = 2;
       if ($6_1 >>> 0 < 11 >>> 0) {
        break label$12
       }
       $0_1 = -4;
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$4
       }
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 140 | 0) >> 2] = 376;
       HEAP32[($3_1 + 136 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 132 | 0) >> 2] = 12414;
       HEAP32[($3_1 + 128 | 0) >> 2] = 12377;
       $827(12382 | 0, $3_1 + 128 | 0 | 0);
       break label$4;
      }
      $859(12523 | 0, 12541 | 0, 331 | 0);
      abort();
     }
     HEAP8[($1_1 + 1 | 0) >> 0] = $4_1;
     $4_1 = 8;
     label$38 : {
      label$39 : {
       switch ($7_1 | 0) {
       case 2:
        $4_1 = 12;
        break label$38;
       case 3:
        $0_1 = -4;
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$4
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 124 | 0) >> 2] = 386;
        HEAP32[($3_1 + 120 | 0) >> 2] = 12152;
        HEAP32[($3_1 + 116 | 0) >> 2] = 12414;
        HEAP32[($3_1 + 112 | 0) >> 2] = 12377;
        $827(12382 | 0, $3_1 + 112 | 0 | 0);
        break label$4;
       case 4:
        $4_1 = 16;
        break label$38;
       case 5:
        $4_1 = 20;
        break label$38;
       case 6:
        $4_1 = 24;
        break label$38;
       default:
        $0_1 = -4;
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$4
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 60 | 0) >> 2] = 395;
        HEAP32[($3_1 + 56 | 0) >> 2] = 12152;
        HEAP32[($3_1 + 52 | 0) >> 2] = 12414;
        HEAP32[($3_1 + 48 | 0) >> 2] = 12377;
        $827(12382 | 0, $3_1 + 48 | 0 | 0);
        break label$4;
       case 1:
        break label$38;
       case 0:
        break label$39;
       };
      }
      $4_1 = HEAPU8[($2_1 + 17 | 0) >> 0] | 0;
     }
     HEAP8[($1_1 + 2 | 0) >> 0] = $4_1;
     $2_1 = $785($3_1 + 272 | 0 | 0) | 0;
     $6_1 = $754($0_1 | 0) | 0;
     $4_1 = $790($3_1 + 272 | 0 | 0, 8 | 0) | 0;
     label$46 : {
      if (!($784($3_1 + 272 | 0 | 0) | 0)) {
       break label$46
      }
      $0_1 = -1;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 76 | 0) >> 2] = 400;
      HEAP32[($3_1 + 72 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 68 | 0) >> 2] = 12427;
      HEAP32[($3_1 + 64 | 0) >> 2] = 12423;
      $827(12382 | 0, $3_1 + 64 | 0 | 0);
      break label$3;
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $266_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3_1 + 256 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $266_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $269_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 256 | 0) >> 2] = $269_1;
     HEAP32[($3_1 + 260 | 0) >> 2] = i64toi32_i32$0;
     label$47 : {
      $0_1 = $2_1 - $6_1 | 0;
      $2_1 = $173($3_1 + 256 | 0 | 0, $0_1 | 0) | 0;
      if (($4_1 | 0) == ($2_1 | 0)) {
       break label$47
      }
      $0_1 = -3;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$4
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 108 | 0) >> 2] = 406;
      HEAP32[($3_1 + 104 | 0) >> 2] = $2_1;
      HEAP32[($3_1 + 100 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 96 | 0) >> 2] = 12439;
      $827(12618 | 0, $3_1 + 96 | 0 | 0);
      break label$4;
     }
     $0_1 = $0_1 + 1 | 0;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 84 | 0) >> 2] = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
     HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
     $827(12666 | 0, $3_1 + 80 | 0 | 0);
     break label$3;
    }
    $0_1 = -4;
   }
   if (!($784($3_1 + 272 | 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = -1;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 415;
   HEAP32[($3_1 + 24 | 0) >> 2] = 12152;
   HEAP32[($3_1 + 20 | 0) >> 2] = 12427;
   HEAP32[($3_1 + 16 | 0) >> 2] = 12423;
   $827(12382 | 0, $3_1 + 16 | 0 | 0);
  }
  label$48 : {
   $10_1 = $3_1 + 288 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, $17_1 = 0, $7_1 = 0, $6_1 = 0, $97$hi = 0, $99$hi = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1 & 7 | 0) {
       break label$6
      }
      $1_1 = $790($0_1 | 0, 8 | 0) | 0;
      label$7 : {
       if (!($784($0_1 | 0) | 0)) {
        break label$7
       }
       $0_1 = 0;
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$3
       }
       $0_1 = 0;
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$3
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 162;
       HEAP32[($3_1 + 8 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 4 | 0) >> 2] = 12427;
       HEAP32[$3_1 >> 2] = 12423;
       $827(12382 | 0, $3_1 | 0);
       break label$3;
      }
      label$8 : {
       if ($1_1 & 128 | 0) {
        break label$8
       }
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = $2_1;
       HEAP32[i64toi32_i32$1 >> 2] = $1_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       break label$4;
      }
      $4_1 = 31;
      $5_1 = 1;
      if (($1_1 & 224 | 0 | 0) == (192 | 0)) {
       break label$5
      }
      label$9 : {
       if (($1_1 & 240 | 0 | 0) != (224 | 0)) {
        break label$9
       }
       $5_1 = 2;
       $4_1 = 15;
       break label$5;
      }
      label$10 : {
       if (($1_1 & 248 | 0 | 0) != (240 | 0)) {
        break label$10
       }
       $5_1 = 3;
       $4_1 = 7;
       break label$5;
      }
      $4_1 = 3;
      $5_1 = 3;
      if (($1_1 & 252 | 0 | 0) == (248 | 0)) {
       break label$5
      }
      label$11 : {
       if (($1_1 & 254 | 0 | 0) != (252 | 0)) {
        break label$11
       }
       $5_1 = 4;
       $4_1 = 1;
       break label$5;
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 60 | 0) >> 2] = 186;
      HEAP32[($3_1 + 56 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 52 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 48 | 0) >> 2] = 13300;
      $827(13252 | 0, $3_1 + 48 | 0 | 0);
      break label$3;
     }
     $859(13232 | 0, 12541 | 0, 160 | 0);
     abort();
    }
    i64toi32_i32$0 = 0;
    $8_1 = $1_1 & $4_1 | 0;
    $8$hi = i64toi32_i32$0;
    $4_1 = 0;
    label$12 : while (1) {
     $1_1 = $790($0_1 | 0, 8 | 0) | 0;
     label$13 : {
      if (!($784($0_1 | 0) | 0)) {
       break label$13
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = 193;
      HEAP32[($3_1 + 24 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 20 | 0) >> 2] = 12427;
      HEAP32[($3_1 + 16 | 0) >> 2] = 12423;
      $827(12382 | 0, $3_1 + 16 | 0 | 0);
      break label$3;
     }
     label$14 : {
      if (($1_1 & 192 | 0 | 0) == (128 | 0)) {
       break label$14
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 195;
      HEAP32[($3_1 + 40 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = 13300;
      $827(13305 | 0, $3_1 + 32 | 0 | 0);
      break label$3;
     }
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 6;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $17_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $97$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $99$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $97$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$2 = $99$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $8_1 = i64toi32_i32$0 | $1_1 | 0;
     $8$hi = i64toi32_i32$2;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $8_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   }
   $0_1 = 1;
  }
  label$15 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($4_1 | 0) < (1 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + -1 | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $4_1 + 1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$5;
     }
     $4_1 = $764($0_1 | 0) | 0;
     if (($4_1 | 0) != (-1 | 0)) {
      break label$5
     }
     if (!($834(61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = $1_1;
     $827(13351 | 0, $2_1 | 0);
     break label$3;
    }
    $3_1 = $174($3_1 & 255 | 0 | 0, $4_1 & 255 | 0 | 0) | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$7 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 & 255 | 0 | 0;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAPU8[(($1_1 ^ $0_1 | 0) + 13392 | 0) >> 0] | 0 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(556 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 556 | 0, $1_1 | 0, 13648 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $176($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(13760 | 0, 13768 | 0, 110 | 0);
  abort();
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 90 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 351 | 0) >> 0] = 0;
  HEAP32[($0_1 + 340 | 0) >> 2] = 33;
  HEAP32[($0_1 + 32 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $219($0_1 + 36 | 0 | 0);
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 133 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 556 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $178($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $4_1 = 0, $6_1 = 0, $17_1 = 0, $17$hi = 0, $5_1 = 0, $9_1 = 0, $16_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $157_1 = 0, $225_1 = 0, $272_1 = 0;
  label$1 : {
   $3_1 = global$0 - 560 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 305 | 0);
  }
  $219($3_1 + 240 | 0 | 0);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 544 | 0 | 0, $4_1 | 0);
  HEAP8[($3_1 + 239 | 0) >> 0] = 0;
  $1_1 = $179($3_1 + 544 | 0 | 0) | 0;
  $5_1 = $772($3_1 + 544 | 0 | 0) | 0;
  $6_1 = $754($3_1 + 544 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    if ((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$6
    }
    $7_1 = $0_1 + 36 | 0;
    $8_1 = $0_1 + 344 | 0;
    $9_1 = $1_1 << 8 | 0 | $5_1 | 0;
    $10_1 = $3_1 + 156 | 0;
    $11_1 = $3_1 + 152 | 0;
    $12_1 = $3_1 + 144 | 0;
    $13_1 = $3_1 + 148 | 0;
    label$7 : while (1) {
     $14_1 = $1_1 & 128 | 0;
     $1_1 = ($1_1 >>> 1 | 0) & 63 | 0;
     label$8 : {
      if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[$10_1 >> 2] = $6_1;
      HEAP32[$11_1 >> 2] = $5_1 & 7 | 0;
      HEAP32[$12_1 >> 2] = $1_1;
      HEAP32[($3_1 + 136 | 0) >> 2] = $9_1;
      HEAP32[$13_1 >> 2] = ($9_1 >>> 3 | 0) & 63 | 0;
      HEAP32[($3_1 + 132 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 128 | 0) >> 2] = 13926;
      HEAP32[($3_1 + 140 | 0) >> 2] = $14_1 >>> 7 | 0;
      $827(13852 | 0, $3_1 + 128 | 0 | 0);
     }
     label$9 : {
      label$10 : {
       if ($14_1) {
        break label$10
       }
       label$11 : {
        label$12 : {
         switch ($1_1 | 0) {
         case 33:
          $1_1 = $180($0_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 240 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
          if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
           break label$6
          }
          if (!$1_1) {
           break label$10
          }
          $252($8_1 | 0, $3_1 + 160 | 0 | 0, 64 | 0) | 0;
          label$15 : {
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU8[($0_1 + 346 | 0) >> 0] | 0;
           HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 48 | 0) >> 2] = 13926;
           HEAP32[($3_1 + 56 | 0) >> 2] = $3_1 + 160 | 0;
           $827(13950 | 0, $3_1 + 48 | 0 | 0);
          }
          $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($0_1 + 8 | 0) >> 2] = $14_1;
          label$16 : {
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            break label$16
           }
           if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
            break label$16
           }
           if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
            break label$16
           }
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
           $157_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1 + 32 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $157_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 24 | 0) >> 2] = $17_1;
           HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 13926;
           $827(13980 | 0, $3_1 + 16 | 0 | 0);
           break label$11;
          }
          label$17 : {
           $1_1 = HEAPU8[($0_1 + 346 | 0) >> 0] | 0;
           if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$17
           }
           HEAP32[($0_1 + 32 | 0) >> 2] = -1;
           HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
           $973($7_1 | 0, $3_1 + 240 | 0 | 0, 304 | 0) | 0;
           break label$9;
          }
          label$18 : {
           if ((HEAPU16[($3_1 + 248 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 44 | 0) >> 1] | 0 | 0)) {
            break label$18
           }
           if ((HEAPU16[($3_1 + 250 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 46 | 0) >> 1] | 0 | 0)) {
            break label$9
           }
          }
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = -1;
          HEAP32[($0_1 + 28 | 0) >> 2] = -1;
          HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = 0;
          HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 34:
          $1_1 = $181($0_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
          if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
           break label$6
          }
          if (!$1_1) {
           break label$10
          }
          $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($0_1 + 12 | 0) >> 2] = $14_1;
          label$19 : {
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            break label$19
           }
           if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
            break label$19
           }
           if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
            break label$19
           }
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
           $225_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1 + 80 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $225_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 72 | 0) >> 2] = $17_1;
           HEAP32[($3_1 + 76 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 64 | 0) >> 2] = 13926;
           $827(13980 | 0, $3_1 + 64 | 0 | 0);
           break label$11;
          }
          $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
          if (($1_1 | 0) != (HEAPU8[($0_1 + 353 | 0) >> 0] | 0 | 0)) {
           break label$9
          }
          if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
           break label$9
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
          break label$9;
         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 7:
         case 8:
         case 9:
         case 16:
         case 17:
         case 18:
         case 19:
         case 20:
         case 21:
          break label$12;
         default:
          break label$9;
         };
        }
        $1_1 = $182($0_1 | 0, $1_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
        if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
         break label$6
        }
        if (!$1_1) {
         break label$10
        }
        if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
         break label$9
        }
        if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        $272_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $3_1 + 112 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $272_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($3_1 + 100 | 0) >> 2] = $0_1;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$1 = $3_1;
        HEAP32[($3_1 + 104 | 0) >> 2] = $17_1;
        HEAP32[($3_1 + 108 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($3_1 + 96 | 0) >> 2] = 13926;
        $827(13980 | 0, $3_1 + 96 | 0 | 0);
       }
       $0_1 = $183($0_1 | 0) | 0;
       break label$5;
      }
      HEAP8[$2_1 >> 0] = 1;
      $738($4_1 | 0);
      $0_1 = 0;
      break label$5;
     }
     HEAP8[($3_1 + 239 | 0) >> 0] = 0;
     $1_1 = $179($3_1 + 544 | 0 | 0) | 0;
     $5_1 = $772($3_1 + 544 | 0 | 0) | 0;
     $9_1 = $1_1 << 8 | 0 | $5_1 | 0;
     $6_1 = $754($3_1 + 544 | 0 | 0) | 0;
     if ((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   label$20 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$20
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = 13926;
    $827(14019 | 0, $3_1 | 0);
   }
   $0_1 = 0;
   if ($6_1 >>> 0 < 6 >>> 0) {
    break label$5
   }
   $763($3_1 + 544 | 0 | 0, $4_1 | 0);
   $766($3_1 + 544 | 0 | 0, $6_1 + -5 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 544 | 0 | 0);
  }
  label$21 : {
   $16_1 = $3_1 + 560 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $0_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  return $262($0_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = 0;
  HEAP8[$3_1 >> 0] = 0;
  $185($0_1 | 0, $1_1 | 0, $4_1 + 8 | 0 | 0);
  label$3 : {
   label$4 : {
    $1_1 = $0_1 + 344 | 0;
    if ($249($1_1 | 0, $2_1 | 0, $4_1 + 8 | 0 | 4 | 0 | 0) | 0) {
     break label$4
    }
    if (!($784($4_1 + 36 | 0 | 0) | 0)) {
     break label$3
    }
    label$5 : {
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (200 | 0)) {
      break label$5
     }
     $5_1 = 0;
     if (!($834(61864 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = $0_1;
     $827(14051 | 0, $4_1 | 0);
     break label$3;
    }
    HEAP8[$3_1 >> 0] = 1;
    break label$3;
   }
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   $8_1 = $1_1 + 3 | 0;
   $9_1 = $2_1 + 19 | 0;
   $10_1 = HEAPU8[$8_1 >> 0] | 0 | ((HEAPU8[($8_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$9_1 >> 0] = $10_1;
   HEAP8[($9_1 + 1 | 0) >> 0] = $10_1 >>> 8 | 0;
   HEAP8[($9_1 + 2 | 0) >> 0] = $10_1 >>> 16 | 0;
   HEAP8[($9_1 + 3 | 0) >> 0] = $10_1 >>> 24 | 0;
   $5_1 = 1;
  }
  label$6 : {
   $7_1 = $4_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  HEAP8[$2_1 >> 0] = 0;
  $185($0_1 | 0, $1_1 | 0, $3_1 + 24 | 0 | 0);
  $1_1 = $3_1 + 52 | 0;
  HEAP8[($0_1 + 352 | 0) >> 0] = $791($1_1 | 0) | 0;
  HEAP8[($0_1 + 353 | 0) >> 0] = $791($1_1 | 0) | 0;
  HEAP8[($0_1 + 354 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
  $792($1_1 | 0, 1 | 0);
  HEAP8[($0_1 + 355 | 0) >> 0] = $790($1_1 | 0, 3 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!($784($1_1 | 0) | 0)) {
     break label$4
    }
    HEAP8[$2_1 >> 0] = 1;
    break label$3;
   }
   HEAP8[($0_1 + 351 | 0) >> 0] = 1;
   label$5 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    $1_1 = HEAPU8[($0_1 + 352 | 0) >> 0] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU8[($0_1 + 353 | 0) >> 0] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = 13926;
    $827(14097 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$6 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP8[$3_1 >> 0] = 0;
  $185($0_1 | 0, $2_1 | 0, $4_1 + 40 | 0 | 0);
  $5_1 = 1;
  label$3 : {
   if (!(HEAPU8[($0_1 + 351 | 0) >> 0] | 0)) {
    break label$3
   }
   $2_1 = $4_1 + 68 | 0;
   $6_1 = $789($2_1 | 0) | 0;
   label$4 : {
    if (($1_1 & -8 | 0 | 0) != (16 | 0)) {
     break label$4
    }
    $792($2_1 | 0, 1 | 0);
   }
   $1_1 = $791($2_1 | 0) | 0;
   label$5 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$5
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   label$6 : {
    if (($1_1 | 0) == (HEAPU8[($0_1 + 352 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAPU8[($0_1 + 352 | 0) >> 0] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
    $827(14135 | 0, $4_1 + 16 | 0 | 0);
    break label$3;
   }
   if (HEAPU8[($0_1 + 354 | 0) >> 0] | 0) {
    break label$3
   }
   label$7 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$7
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   if (!$6_1) {
    break label$3
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 355 | 0) >> 0] | 0)) {
     break label$8
    }
    $5_1 = 0;
    label$9 : while (1) {
     $792($2_1 | 0, 1 | 0);
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 >>> 0 < (HEAPU8[($0_1 + 355 | 0) >> 0] | 0) >>> 0) {
      continue label$9
     }
     break label$9;
    };
   }
   $1_1 = $791($2_1 | 0) | 0;
   label$10 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$10
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   label$11 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$4_1 >> 2] = 14243;
    $827(14213 | 0, $4_1 | 0);
   }
   $5_1 = 1;
   HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
   if (($1_1 | 0) != (2 | 0)) {
    break label$3
   }
   $5_1 = 1;
   HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  }
  label$12 : {
   $8_1 = $4_1 + 80 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 36 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 449 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = ($6_1 | 0) == (33 | 0) ? 14346 : 14336;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(14266 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$7
    }
    if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $252($0_1 + 52 | 0 | 0, $2_1 + 48 | 0 | 0, 64 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[$2_1 >> 2] = $2_1 + 48 | 0;
     $827(14347 | 0, $2_1 | 0);
    }
    HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0 ? 90 : 50;
    $0_1 = $183($0_1 | 0) | 0;
    break label$6;
   }
   label$9 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 340 | 0) >> 2] | 0 | 0) == (33 | 0)) {
     break label$9
    }
    HEAP32[$1_1 >> 2] = 50;
    $0_1 = $183($0_1 | 0) | 0;
    break label$6;
   }
   $0_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
  }
  label$10 : {
   $10_1 = $2_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $6_1 = 0, $11_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $2_1 + 4 | 0;
  $3_1 = $0_1 + 356 | 0;
  $0_1 = $279($1_1 | 0, $3_1 | 0, 200 | 0) | 0;
  HEAP16[($2_1 + 26 | 0) >> 1] = 1;
  HEAP16[($2_1 + 24 | 0) >> 1] = $0_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $760($1_1 | 0, $2_1 + 20 | 0 | 0, 1 | 0);
  $783($2_1 + 28 | 0 | 0, $1_1 | 0);
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $778($0_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(14379 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return ($0_1 >>> 2 | 0) & 2080768 | 0 | ($0_1 & 127 | 0) | 0 | (($0_1 >>> 3 | 0) & 266338304 | 0) | 0 | (($0_1 >>> 1 | 0) & 16256 | 0) | 0 | 0;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($782($0_1 | 0) | 0 | 0) != (4801587 | 0)) {
    break label$3
   }
   HEAP16[$1_1 >> 1] = $775($0_1 | 0) | 0;
   $3_1 = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 8 | 0) >> 0] = $3_1 >>> 7 | 0;
   HEAP8[($1_1 + 11 | 0) >> 0] = ($3_1 >>> 4 | 0) & 1 | 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = ($3_1 >>> 5 | 0) & 1 | 0;
   HEAP8[($1_1 + 9 | 0) >> 0] = ($3_1 >>> 6 | 0) & 1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $186($0_1 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
    $4_1 = HEAPU16[$1_1 >> 1] | 0;
    $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $6_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU8[($1_1 + 11 | 0) >> 0] | 0 ? 14515 : 14475;
    HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 ? 14492 : 14475;
    HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$2_1 >> 2] = $4_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $3_1 ? 14476 : 14475;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 ? 14457 : 14475;
    $827(14404 | 0, $2_1 | 0);
   }
   $3_1 = 1;
  }
  label$5 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  $4_1 = $186($0_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 0;
  label$3 : {
   if ($4_1 >>> 0 < 5 >>> 0) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(14530 | 0, $2_1 | 0);
   }
   $766($0_1 | 0, $4_1 + -4 | 0 | 0) | 0;
   $3_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $189($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[$2_1 >> 2] = $778($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAPU16[$1_1 >> 1] | 0) >>> 0 < 4 >>> 0) {
     break label$4
    }
    $1_1 = $186($0_1 | 0) | 0;
    break label$3;
   }
   $1_1 = $778($0_1 | 0) | 0;
  }
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
  $1_1 = $777($0_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1 & 1 | 0;
  HEAP8[($2_1 + 10 | 0) >> 0] = ($1_1 >>> 12 | 0) & 1 | 0;
  HEAP8[($2_1 + 9 | 0) >> 0] = ($1_1 >>> 13 | 0) & 1 | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = ($1_1 >>> 14 | 0) & 1 | 0;
  $1_1 = $1_1 & 255 | 0;
  HEAP8[($2_1 + 14 | 0) >> 0] = ($1_1 >>> 1 | 0) & 1 | 0;
  HEAP8[($2_1 + 13 | 0) >> 0] = ($1_1 >>> 2 | 0) & 1 | 0;
  HEAP8[($2_1 + 12 | 0) >> 0] = ($1_1 >>> 3 | 0) & 1 | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = ($1_1 >>> 6 | 0) & 1 | 0;
  $1_1 = 0;
  label$5 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    $0_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    $4_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
    $5_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($2_1 + 12 | 0) >> 0] | 0;
    $8_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
    $9_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
    $10_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 48 | 0) >> 2] = $10_1 ? 14729 : 14475;
    HEAP32[($3_1 + 44 | 0) >> 2] = $9_1 ? 14457 : 14475;
    HEAP32[($3_1 + 40 | 0) >> 2] = $8_1 ? 14718 : 14475;
    HEAP32[($3_1 + 36 | 0) >> 2] = $7_1 ? 14706 : 14475;
    HEAP32[($3_1 + 32 | 0) >> 2] = $6_1 ? 14688 : 14475;
    HEAP32[($3_1 + 28 | 0) >> 2] = $5_1 ? 14678 : 14475;
    HEAP32[($3_1 + 24 | 0) >> 2] = $4_1 ? 14654 : 14475;
    HEAP32[($3_1 + 20 | 0) >> 2] = $0_1 ? 14631 : 14475;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1 & 255 | 0;
    HEAP32[$3_1 >> 2] = $1_1 >>> 24 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
    $827(14562 | 0, $3_1 | 0);
   }
   $1_1 = 1;
  }
  label$7 : {
   $12_1 = $3_1 + 64 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!(HEAPU8[($2_1 + 11 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($2_1 + 16 | 0) >> 0] = $772($0_1 | 0) | 0;
  }
  label$2 : {
   if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
    break label$2
   }
   HEAP8[($2_1 + 17 | 0) >> 0] = $772($0_1 | 0) | 0;
  }
  label$3 : {
   if (!(HEAPU8[($2_1 + 15 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = $186($0_1 | 0) | 0;
  }
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(14751 | 0, $1_1 | 0);
  }
  label$4 : {
   if (($782($0_1 | 0) | 0 | 0) != (4801587 | 0)) {
    break label$4
   }
   if (($775($0_1 | 0) | 0) >>> 0 > 4 >>> 0) {
    break label$4
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$4
   }
   $766($0_1 | 0, 1 | 0) | 0;
   $3_1 = $778($0_1 | 0) | 0;
   $2_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$4
   }
   $2_1 = !($3_1 & -2139062144 | 0);
  }
  label$5 : {
   $5_1 = $1_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (($776($0_1 | 0) | 0 | 0) != (1179011410 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $766($0_1 | 0, 4 | 0) | 0;
   $1_1 = ($776($0_1 | 0) | 0 | 0) == (1096303683 | 0) & (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61896 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(14926 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 14788 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (14788 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 14788 | 0, 14848 | 0, 113 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $195($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (14788 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 14788 | 0, 14848 | 0, 131 | 0);
  }
  label$5 : {
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    if (!$3_1) {
     break label$5
    }
    $5_1 = 0;
    label$7 : {
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $0_1 = $50($1_1 | 0, HEAP32[$3_1 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 44 | 0, $4_1 + 12 | 0 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $762($4_1 + 16 | 0 | 0, $0_1 | 0);
     $1_1 = $192($4_1 + 16 | 0 | 0) | 0;
     $735($0_1 | 0);
     if (!$1_1) {
      break label$7
     }
     $0_1 = $813(40 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $214($0_1 | 0, 22 | 0);
     $5_1 = $0_1;
    }
    label$8 : {
     $7_1 = $4_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $5_1 | 0;
   }
   $859(14971 | 0, 14848 | 0, 132 | 0);
   abort();
  }
  $859(14975 | 0, 14848 | 0, 133 | 0);
  abort();
 }
 
 function $196() {
  var $1_1 = 0, $2_1 = 0, $0_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $0_1 = global$0 - 16 | 0;
   $3_1 = $0_1;
   if ($0_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $1_1 = $813(88 | 0) | 0;
    if ($1_1) {
     break label$4
    }
    $1_1 = 0;
    if (!($835(61912 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = 88;
    $827(15024 | 0, $0_1 | 0);
    break label$3;
   }
   $845($1_1 | 0, 88 | 0, $1_1 | 0, 15008 | 0);
   $2_1 = $732(56088 | 0, 16 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   label$5 : {
    if (!$2_1) {
     break label$5
    }
    $2_1 = $794($2_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $974($1_1 + 12 | 0 | 0, 0 | 0, 76 | 0) | 0;
     break label$3;
    }
    $733(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
   }
   $815($1_1 | 0);
   $1_1 = 0;
  }
  label$7 : {
   $4_1 = $0_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 178 | 0);
  }
  $1_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 16 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 15152 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($3_1);
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $235($1_1 | 0);
  }
  $795(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $733(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 88 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 1;
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   if (!$1_1) {
    break label$3
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$3
   }
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    break label$3
   }
   $3_1 = 0;
   $4_1 = $0_1;
   label$4 : {
    label$5 : while (1) {
     if (!($199($4_1 | 0, $1_1 | 0) | 0)) {
      break label$4
     }
     $3_1 = $3_1 + 1 | 0;
     $4_1 = $0_1 + Math_imul($3_1, 6) | 0;
     if (HEAPU8[$4_1 >> 0] | 0) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $1_1;
   $827(15224 | 0, $2_1 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3_1 = HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0;
      $4_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $3_1 = 0;
      break label$1;
     }
     $3_1 = ((((($3_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 223 | 0 : $3_1) << 24 | 0) >> 24 | 0) - ((((($4_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0 ? $4_1 & 223 | 0 : $4_1) << 24 | 0) >> 24 | 0) | 0;
     if ($3_1) {
      break label$1
     }
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $13$hi = 0, $12_1 = 0, $11_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $451$hi = 0, $20_1 = 0;
  label$1 : {
   $3_1 = global$0 - 576 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $1_1 = -1;
     break label$4;
    }
    HEAP32[($3_1 + 424 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 416 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 420 | 0) >> 2] = 0;
    label$6 : {
     if ($0_1) {
      break label$6
     }
     $1_1 = $820($1_1 | 0, $2_1 | 0, 15275 | 0, 0 | 0) | 0;
     break label$4;
    }
    HEAP8[($3_1 + 432 | 0) >> 0] = 0;
    $4_1 = 15275;
    label$7 : {
     label$8 : {
      switch ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0 | 0) {
      case 0:
       $4_1 = 15283;
       if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) != (32768 | 0)) {
        break label$7
       }
       $5_1 = 15286;
       label$28 : {
        $4_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + -1 | 0;
        if ($4_1 >>> 0 > 3 >>> 0) {
         break label$28
        }
        $5_1 = HEAP32[(($4_1 << 2 | 0) + 17576 | 0) >> 2] | 0;
       }
       $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
       $8_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($3_1 + 308 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
       HEAP32[($3_1 + 304 | 0) >> 2] = $8_1 ? 15339 : 15286;
       HEAP32[($3_1 + 300 | 0) >> 2] = $7_1;
       HEAP32[($3_1 + 292 | 0) >> 2] = $6_1;
       HEAP32[($3_1 + 288 | 0) >> 2] = $5_1;
       HEAP32[($3_1 + 296 | 0) >> 2] = $4_1 ? 15339 : 15286;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15321 | 0, $3_1 + 288 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 1:
       $4_1 = 15343;
       break label$7;
      case 2:
       $4_1 = 15347;
       break label$7;
      case 3:
       $4_1 = 15351;
       break label$7;
      case 4:
       $4_1 = 15360;
       break label$7;
      case 5:
       $4_1 = 15367;
       break label$7;
      case 6:
       $4_1 = 15375;
       break label$7;
      case 8:
       $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $4_1 = ($5_1 >>> 0) / (1e3 >>> 0) | 0;
       HEAP32[($3_1 + 320 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 324 | 0) >> 2] = $5_1 - Math_imul($4_1, 1e3) | 0;
       $820($3_1 + 432 | 0 | 0, 16 | 0, 15387 | 0, $3_1 + 320 | 0 | 0) | 0;
       $4_1 = 15383;
       break label$7;
      case 9:
       $4_1 = 15400;
       break label$7;
      case 21:
       $4_1 = 15406;
       break label$7;
      case 10:
       $5_1 = HEAPU8[($0_1 + 120 | 0) >> 0] | 0;
       $4_1 = HEAPU8[($0_1 + 121 | 0) >> 0] | 0;
       HEAP32[($3_1 + 336 | 0) >> 2] = $0_1 + 122 | 0;
       HEAP32[($3_1 + 344 | 0) >> 2] = $4_1 ? 15440 : 15286;
       HEAP32[($3_1 + 340 | 0) >> 2] = $5_1 ? 15286 : 15424;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15411 | 0, $3_1 + 336 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 12:
       $5_1 = HEAPU8[($0_1 + 56 | 0) >> 0] | 0;
       HEAP32[($3_1 + 352 | 0) >> 2] = $0_1 + 84 | 0;
       HEAP32[($3_1 + 356 | 0) >> 2] = $5_1 ? 15463 : 15286;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15452 | 0, $3_1 + 352 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 11:
       $4_1 = 15476;
       break label$7;
      case 13:
       $4_1 = 15480;
       break label$7;
      case 16:
       $4_1 = 15484;
       break label$7;
      case 17:
       $4_1 = 15488;
       break label$7;
      case 14:
       $4_1 = 15493;
       break label$7;
      case 18:
       $4_1 = 15498;
       break label$7;
      case 19:
       $4_1 = 15502;
       break label$7;
      case 20:
       break label$8;
      default:
       break label$7;
      };
     }
     $4_1 = 15507;
    }
    $6_1 = 15286;
    label$29 : {
     $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0;
     if ($5_1 >>> 0 > 4 >>> 0) {
      break label$29
     }
     $6_1 = HEAP32[(($5_1 << 2 | 0) + 17592 | 0) >> 2] | 0;
    }
    $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[(($3_1 + 240 | 0) + 32 | 0) >> 2] = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 16 | 0) >> 2] = ($5_1 >>> 0) / (36e5 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 24 | 0) >> 2] = ((($5_1 >>> 0) / (1e3 >>> 0) | 0) >>> 0) % (60 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 20 | 0) >> 2] = ((($5_1 >>> 0) / (6e4 >>> 0) | 0) >>> 0) % (60 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 28 | 0) >> 2] = $3_1 + 432 | 0;
    HEAP32[($3_1 + 252 | 0) >> 2] = $8_1;
    HEAP32[($3_1 + 248 | 0) >> 2] = $7_1;
    HEAP32[($3_1 + 244 | 0) >> 2] = $6_1;
    HEAP32[($3_1 + 240 | 0) >> 2] = $4_1;
    $201($3_1 + 416 | 0 | 0, $820($1_1 | 0, $2_1 | 0, 15556 | 0, $3_1 + 240 | 0 | 0) | 0 | 0);
    label$30 : {
     $1_1 = HEAP32[$0_1 >> 2] | 0;
     if (!$1_1) {
      break label$30
     }
     $9_1 = $3_1 + 368 | 0 | 1 | 0;
     $10_1 = ($3_1 + 64 | 0) + 20 | 0;
     $4_1 = 0;
     label$31 : while (1) {
      HEAP16[($3_1 + 368 | 0) >> 1] = 0;
      label$32 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) == ($2_1 | 0)) {
        break label$32
       }
       $4_1 = $2_1;
       if (($1_1 | 0) == (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$32
       }
       $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 15593 | 0, 0 | 0) | 0 | 0);
       $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      }
      label$33 : {
       label$34 : {
        label$35 : {
         switch (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) {
         case 1:
          label$39 : {
           label$40 : {
            label$41 : {
             label$42 : {
              label$43 : {
               label$44 : {
                label$45 : {
                 label$46 : {
                  label$47 : {
                   label$48 : {
                    label$49 : {
                     label$50 : {
                      label$51 : {
                       label$52 : {
                        label$53 : {
                         label$54 : {
                          label$55 : {
                           label$56 : {
                            label$57 : {
                             label$58 : {
                              label$59 : {
                               label$60 : {
                                label$61 : {
                                 label$62 : {
                                  label$63 : {
                                   label$64 : {
                                    label$65 : {
                                     label$66 : {
                                      label$67 : {
                                       label$68 : {
                                        label$69 : {
                                         label$70 : {
                                          label$71 : {
                                           label$72 : {
                                            label$73 : {
                                             $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                                             if (($5_1 | 0) > (128 | 0)) {
                                              break label$73
                                             }
                                             $2_1 = 15597;
                                             label$74 : {
                                              switch ($5_1 + -1 | 0 | 0) {
                                              case 2:
                                               break label$39;
                                              case 5:
                                               break label$41;
                                              case 1:
                                              case 3:
                                              case 4:
                                               break label$42;
                                              case 0:
                                               break label$72;
                                              default:
                                               break label$74;
                                              };
                                             }
                                             switch ($5_1 + -15 | 0 | 0) {
                                             case 3:
                                              break label$69;
                                             case 2:
                                              break label$70;
                                             case 0:
                                              break label$71;
                                             default:
                                              break label$42;
                                             };
                                            }
                                            $2_1 = 15648;
                                            label$75 : {
                                             switch ($5_1 + -129 | 0 | 0) {
                                             case 0:
                                              break label$40;
                                             case 22:
                                             case 23:
                                              break label$42;
                                             case 27:
                                              break label$43;
                                             case 26:
                                              break label$44;
                                             case 25:
                                              break label$45;
                                             case 24:
                                              break label$46;
                                             case 20:
                                              break label$47;
                                             case 19:
                                              break label$48;
                                             case 11:
                                              break label$49;
                                             case 4:
                                              break label$50;
                                             case 3:
                                              break label$51;
                                             case 2:
                                              break label$52;
                                             case 1:
                                              break label$53;
                                             case 14:
                                              break label$54;
                                             case 12:
                                              break label$55;
                                             case 21:
                                              break label$56;
                                             case 13:
                                              break label$57;
                                             case 18:
                                              break label$59;
                                             case 17:
                                              break label$60;
                                             case 16:
                                              break label$61;
                                             case 15:
                                              break label$62;
                                             case 9:
                                              break label$63;
                                             case 10:
                                              break label$64;
                                             case 8:
                                              break label$65;
                                             case 7:
                                              break label$66;
                                             case 6:
                                              break label$67;
                                             case 5:
                                              break label$68;
                                             default:
                                              break label$75;
                                             };
                                            }
                                            if (($5_1 | 0) == (218 | 0)) {
                                             break label$58
                                            }
                                            if (($5_1 | 0) != (240 | 0)) {
                                             break label$42
                                            }
                                            $2_1 = 15735;
                                            break label$39;
                                           }
                                           $2_1 = 15614;
                                           break label$39;
                                          }
                                          $2_1 = 15629;
                                          break label$39;
                                         }
                                         $2_1 = 15633;
                                         break label$39;
                                        }
                                        $2_1 = 15638;
                                        break label$39;
                                       }
                                       $2_1 = 15657;
                                       break label$39;
                                      }
                                      $2_1 = 15669;
                                      break label$39;
                                     }
                                     $2_1 = 15681;
                                     break label$39;
                                    }
                                    $2_1 = 15689;
                                    break label$39;
                                   }
                                   $2_1 = 15697;
                                   break label$39;
                                  }
                                  $2_1 = 15706;
                                  break label$39;
                                 }
                                 $2_1 = 15710;
                                 break label$39;
                                }
                                $2_1 = 15717;
                                break label$39;
                               }
                               $2_1 = 15724;
                               break label$39;
                              }
                              $2_1 = 15488;
                              break label$39;
                             }
                             $2_1 = 15731;
                             break label$39;
                            }
                            $2_1 = 15740;
                            break label$39;
                           }
                           $2_1 = 15745;
                           break label$39;
                          }
                          $2_1 = 15750;
                          break label$39;
                         }
                         $2_1 = 15756;
                         break label$39;
                        }
                        $2_1 = 15766;
                        break label$39;
                       }
                       $2_1 = 15770;
                       break label$39;
                      }
                      $2_1 = 15777;
                      break label$39;
                     }
                     $2_1 = 15784;
                     break label$39;
                    }
                    $2_1 = 15792;
                    break label$39;
                   }
                   $2_1 = 15498;
                   break label$39;
                  }
                  $2_1 = 15802;
                  break label$39;
                 }
                 $2_1 = 15806;
                 break label$39;
                }
                $2_1 = 15811;
                break label$39;
               }
               $2_1 = 15815;
               break label$39;
              }
              $2_1 = 15824;
              break label$39;
             }
             $2_1 = 15275;
             break label$39;
            }
            $2_1 = 15652;
           }
           if (!(HEAPU8[($1_1 + 32 | 0) >> 0] | 0)) {
            break label$39
           }
           HEAP8[($3_1 + 368 | 0) >> 0] = 32;
           label$76 : {
            label$77 : {
             $5_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
             if (($5_1 | 0) == (6 | 0)) {
              break label$77
             }
             if (($5_1 | 0) != (129 | 0)) {
              break label$76
             }
             $820($9_1 | 0, 47 | 0, 15648 | 0, 0 | 0) | 0;
             break label$39;
            }
            $820($9_1 | 0, 47 | 0, 15652 | 0, 0 | 0) | 0;
            break label$39;
           }
           $820($9_1 | 0, 47 | 0, 15828 | 0, 0 | 0) | 0;
          }
          $5_1 = HEAPU8[($1_1 + 24 | 0) >> 0] | 0;
          $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
          $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $8_1 = HEAPU16[($1_1 + 26 | 0) >> 1] | 0;
          HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
          HEAP32[(($3_1 + 32 | 0) + 20 | 0) >> 2] = $8_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $7_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
          HEAP32[($3_1 + 40 | 0) >> 2] = $6_1;
          HEAP32[($3_1 + 44 | 0) >> 2] = $5_1;
          HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $3_1 + 368 | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 15836 | 0, $3_1 + 32 | 0 | 0) | 0;
          break label$34;
         case 0:
          label$78 : {
           label$79 : {
            label$80 : {
             label$81 : {
              label$82 : {
               label$83 : {
                label$84 : {
                 label$85 : {
                  label$86 : {
                   label$87 : {
                    label$88 : {
                     label$89 : {
                      label$90 : {
                       label$91 : {
                        label$92 : {
                         label$93 : {
                          label$94 : {
                           label$95 : {
                            label$96 : {
                             label$97 : {
                              label$98 : {
                               $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                               if (($5_1 | 0) > (65 | 0)) {
                                break label$98
                               }
                               $2_1 = 15892;
                               label$99 : {
                                switch ($5_1 + -26 | 0 | 0) {
                                case 7:
                                 break label$79;
                                case 1:
                                 break label$83;
                                case 5:
                                 break label$84;
                                case 2:
                                case 3:
                                case 4:
                                 break label$85;
                                case 6:
                                 break label$96;
                                case 0:
                                 break label$97;
                                default:
                                 break label$99;
                                };
                               }
                               $2_1 = 15400;
                               switch ($5_1 + -1 | 0 | 0) {
                               case 0:
                                break label$81;
                               case 1:
                                break label$82;
                               default:
                                break label$86;
                               };
                              }
                              label$100 : {
                               switch ($5_1 + -234 | 0 | 0) {
                               case 2:
                               case 3:
                               case 4:
                               case 5:
                                break label$85;
                               case 11:
                                break label$87;
                               case 12:
                                break label$88;
                               case 10:
                                break label$89;
                               case 9:
                                break label$90;
                               case 8:
                                break label$91;
                               case 6:
                                break label$92;
                               case 7:
                                break label$93;
                               case 1:
                                break label$94;
                               case 0:
                                break label$95;
                               default:
                                break label$100;
                               };
                              }
                              if (($5_1 | 0) == (66 | 0)) {
                               break label$80
                              }
                              if (($5_1 | 0) != (785 | 0)) {
                               break label$85
                              }
                              $2_1 = 15943;
                              break label$78;
                             }
                             $2_1 = 15886;
                             break label$78;
                            }
                            $2_1 = 15908;
                            break label$83;
                           }
                           $2_1 = 15924;
                           break label$78;
                          }
                          $2_1 = 15932;
                          break label$78;
                         }
                         $2_1 = 15957;
                         break label$78;
                        }
                        $2_1 = 15961;
                        break label$78;
                       }
                       $2_1 = 15973;
                       break label$78;
                      }
                      $2_1 = 15978;
                      break label$78;
                     }
                     $2_1 = 15982;
                     break label$78;
                    }
                    $2_1 = 15986;
                    break label$78;
                   }
                   $2_1 = 15990;
                   break label$78;
                  }
                  $2_1 = 15874;
                  if (($5_1 | 0) == (16 | 0)) {
                   break label$78
                  }
                 }
                 $2_1 = 15275;
                 break label$78;
                }
                $2_1 = 15898;
               }
               $5_1 = $1_1 + 36 | 0;
               if (!(HEAPU8[$5_1 >> 0] | 0)) {
                break label$78
               }
               HEAP8[($3_1 + 368 | 0) >> 0] = 32;
               $248($5_1 | 0, $9_1 | 0, 47 | 0) | 0;
               break label$78;
              }
              $2_1 = 15868;
             }
             $6_1 = 15286;
             $7_1 = 15286;
             label$101 : {
              $5_1 = (HEAPU8[($1_1 + 48 | 0) >> 0] | 0) + -1 | 0;
              if (($5_1 & 255 | 0) >>> 0 > 4 >>> 0) {
               break label$101
              }
              $7_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 17612 | 0) >> 2] | 0;
             }
             label$102 : {
              $5_1 = (HEAPU8[($1_1 + 49 | 0) >> 0] | 0) + -4 | 0;
              if (($5_1 & 255 | 0) >>> 0 > 6 >>> 0) {
               break label$102
              }
              $6_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 17632 | 0) >> 2] | 0;
             }
             $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
             HEAP32[(($3_1 + 144 | 0) + 16 | 0) >> 2] = HEAPU8[($1_1 + 50 | 0) >> 0] | 0 ? 16080 : 15286;
             HEAP32[($3_1 + 156 | 0) >> 2] = $6_1;
             HEAP32[($3_1 + 152 | 0) >> 2] = $7_1;
             $6_1 = ($5_1 >>> 0) / (1e3 >>> 0) | 0;
             HEAP32[($3_1 + 144 | 0) >> 2] = $6_1;
             HEAP32[($3_1 + 148 | 0) >> 2] = $5_1 - Math_imul($6_1, 1e3) | 0;
             $820($3_1 + 368 | 0 | 0, 48 | 0, 16059 | 0, $3_1 + 144 | 0 | 0) | 0;
             break label$78;
            }
            $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
            $5_1 = ($2_1 >>> 0) / (1e3 >>> 0) | 0;
            HEAP32[($3_1 + 176 | 0) >> 2] = $5_1;
            HEAP32[($3_1 + 180 | 0) >> 2] = $2_1 - Math_imul($5_1, 1e3) | 0;
            $820($3_1 + 368 | 0 | 0, 48 | 0, 16093 | 0, $3_1 + 176 | 0 | 0) | 0;
            $2_1 = 15953;
            break label$78;
           }
           $2_1 = 15918;
           $5_1 = $1_1 + 36 | 0;
           if (!(HEAPU8[$5_1 >> 0] | 0)) {
            break label$78
           }
           HEAP8[($3_1 + 368 | 0) >> 0] = 32;
           $252($5_1 | 0, $9_1 | 0, 47 | 0) | 0;
          }
          $5_1 = $202($3_1 + 368 | 0 | 0) | 0;
          label$103 : {
           label$104 : {
            label$105 : {
             label$106 : {
              $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              switch ($6_1 + -9 | 0 | 0) {
              case 1:
               break label$103;
              case 2:
               break label$105;
              case 0:
               break label$106;
              default:
               break label$104;
              };
             }
             $6_1 = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
             HEAP32[($3_1 + 108 | 0) >> 2] = $6_1 >>> 24 | 0;
             HEAP32[($3_1 + 96 | 0) >> 2] = $6_1 & 255 | 0;
             HEAP32[($3_1 + 104 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
             HEAP32[($3_1 + 100 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
             $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16105 | 0, $3_1 + 96 | 0 | 0) | 0;
             break label$103;
            }
            i64toi32_i32$2 = $1_1 + 336 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $13_1 = i64toi32_i32$0;
            $13$hi = i64toi32_i32$1;
            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
             break label$103
            }
            i64toi32_i32$2 = $1_1;
            i64toi32_i32$1 = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
            i64toi32_i32$0 = 0;
            HEAP32[($3_1 + 120 | 0) >> 2] = HEAPU8[($1_1 + 348 | 0) >> 0] | 0 ? 16132 : 15286;
            $19_1 = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, 1e6 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $451$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $13$hi;
            i64toi32_i32$0 = $451$hi;
            $20_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $13$hi;
            i64toi32_i32$1 = __wasm_i64_udiv($20_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $6_1 = i64toi32_i32$1;
            $7_1 = ($6_1 >>> 0) / (1e3 >>> 0) | 0;
            HEAP32[($3_1 + 112 | 0) >> 2] = $7_1;
            HEAP32[($3_1 + 116 | 0) >> 2] = $6_1 - Math_imul($7_1, 1e3) | 0;
            $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16117 | 0, $3_1 + 112 | 0 | 0) | 0;
            break label$103;
           }
           if (($6_1 | 0) != (4 | 0)) {
            break label$103
           }
           if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
            break label$103
           }
           if ((HEAP32[($1_1 + 328 | 0) >> 2] | 0 | 0) != (6 | 0)) {
            break label$103
           }
           if (!(HEAP32[($1_1 + 360 | 0) >> 2] | 0)) {
            break label$103
           }
           HEAP32[($3_1 + 128 | 0) >> 2] = ($1_1 + 356 | 0) + 8 | 0;
           $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16136 | 0, $3_1 + 128 | 0 | 0) | 0;
          }
          $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
          $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
          $7_1 = HEAPU16[($1_1 + 30 | 0) >> 1] | 0;
          $8_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[(($3_1 + 64 | 0) + 16 | 0) >> 2] = HEAPU16[($1_1 + 28 | 0) >> 1] | 0;
          HEAP32[$10_1 >> 2] = $7_1;
          HEAP32[(($3_1 + 64 | 0) + 24 | 0) >> 2] = ($6_1 | 0) == (1 | 0) ? 16186 : 15286;
          HEAP32[($3_1 + 64 | 0) >> 2] = $8_1;
          HEAP32[($3_1 + 68 | 0) >> 2] = $2_1;
          HEAP32[($3_1 + 76 | 0) >> 2] = $5_1;
          HEAP32[($3_1 + 72 | 0) >> 2] = $3_1 + 368 | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16151 | 0, $3_1 + 64 | 0 | 0) | 0;
          break label$34;
         case 2:
          HEAP32[($3_1 + 192 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16191 | 0, $3_1 + 192 | 0 | 0) | 0;
          break label$34;
         case 4:
          break label$35;
         default:
          break label$33;
         };
        }
        $2_1 = 15275;
        label$107 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (4 | 0)) {
          break label$107
         }
         if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
          break label$107
         }
         label$108 : {
          switch ((HEAP32[($1_1 + 328 | 0) >> 2] | 0) + -1 | 0 | 0) {
          case 0:
           $2_1 = 16203;
           break label$107;
          case 1:
           $2_1 = 16217;
           break label$107;
          case 2:
           $2_1 = 16226;
           break label$107;
          case 3:
           $2_1 = 16230;
           break label$107;
          case 4:
           $2_1 = 16234;
           break label$107;
          case 5:
           break label$108;
          default:
           break label$107;
          };
         }
         $2_1 = 16238;
         if (!(HEAP32[($1_1 + 360 | 0) >> 2] | 0)) {
          break label$107
         }
         HEAP32[($3_1 + 224 | 0) >> 2] = ($1_1 + 356 | 0) + 8 | 0;
         $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 + 224 | 0 | 0) | 0 | 0);
        }
        HEAP32[($3_1 + 208 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        HEAP32[($3_1 + 212 | 0) >> 2] = $2_1;
        $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16252 | 0, $3_1 + 208 | 0 | 0) | 0;
       }
       $201($3_1 + 416 | 0 | 0, $2_1 | 0);
      }
      label$114 : {
       label$115 : {
        label$116 : {
         label$117 : {
          switch ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0 | 0) {
          case 9:
           $2_1 = $1_1 + 345 | 0;
           $5_1 = $1_1 + 329 | 0;
           if (!(HEAPU8[($1_1 + 328 | 0) >> 0] | 0)) {
            break label$115
           }
           $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16263 | 0, 0 | 0) | 0 | 0);
           break label$115;
          case 7:
           $5_1 = $1_1 + 349 | 0;
           break label$116;
          case 0:
           if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
            break label$114
           }
           if (!(HEAPU8[($1_1 + 348 | 0) >> 0] | 0)) {
            break label$114
           }
           $5_1 = $1_1 + 350 | 0;
           break label$116;
          case 5:
           break label$117;
          default:
           break label$114;
          };
         }
         $5_1 = $1_1 + 357 | 0;
        }
        $2_1 = 0;
       }
       label$121 : {
        if (!(HEAPU8[$5_1 >> 0] | 0)) {
         break label$121
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 + 16 | 0 | 0) | 0 | 0);
       }
       if (!$2_1) {
        break label$114
       }
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        break label$114
       }
       HEAP32[$3_1 >> 2] = $2_1;
       $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 | 0) | 0 | 0);
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if ($1_1) {
       continue label$31
      }
      break label$31;
     };
    }
    $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16275 | 0, 0 | 0) | 0 | 0);
    $1_1 = HEAP32[($3_1 + 420 | 0) >> 2] | 0;
   }
   label$122 : {
    $12_1 = $3_1 + 576 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $1_1 | 0;
  }
  $859(15266 | 0, 15069 | 0, 384 | 0);
  abort();
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $1_1 | 0;
    label$3 : {
     if ($2_1 >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[$0_1 >> 2] = $2_1 - $1_1 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
     return;
    }
    HEAP32[$0_1 >> 2] = 1;
    HEAP32[($0_1 + 8 | 0) >> 2] = ($2_1 + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0) + -1 | 0;
   }
   return;
  }
  $859(16545 | 0, 15069 | 0, 357 | 0);
  abort();
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[$2_1 >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 - $0_1 | 0 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10_1 = 0, $9_1 = 0, $139_1 = 0, $139$hi = 0, $141_1 = 0, $141$hi = 0, $143$hi = 0, $145$hi = 0, $31_1 = 0, $153_1 = 0, $153$hi = 0, $155_1 = 0, $155$hi = 0, $157$hi = 0, $159$hi = 0, $32_1 = 0;
  label$1 : {
   $3_1 = global$0 - 288 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1486 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if (!$1_1) {
         break label$10
        }
        if (!$2_1) {
         break label$9
        }
        $4_1 = 0;
        $5_1 = 0;
        label$11 : {
         $6_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($6_1) {
          break label$11
         }
         label$12 : {
          $5_1 = $813(1048576 | 0) | 0;
          if ($5_1) {
           break label$12
          }
          $7_1 = 0;
          break label$5;
         }
         $55($3_1 + 256 | 0 | 0);
         HEAP32[($3_1 + 276 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 268 | 0) >> 2] = $5_1;
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$0 = 1048576;
         HEAP32[($3_1 + 260 | 0) >> 2] = 128;
         HEAP32[($3_1 + 264 | 0) >> 2] = i64toi32_i32$0;
         $6_1 = $57(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 256 | 0 | 0) | 0;
         if ($6_1) {
          break label$11
         }
         $7_1 = 0;
         label$13 : {
          if (!($835(61912 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          HEAP32[$3_1 >> 2] = $0_1;
          $827(16287 | 0, $3_1 | 0);
         }
         $815($5_1 | 0);
         break label$5;
        }
        label$14 : {
         $7_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$7_1) {
          break label$14
         }
         $7_1 = $204($7_1 | 0) | 0;
         $8_1 = $7_1 + 1 | 0;
         $4_1 = $7_1 ? $8_1 : 0;
         if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         $9_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = $7_1 ? $8_1 : 16372;
         HEAP32[($3_1 + 32 | 0) >> 2] = $9_1;
         $827(16332 | 0, $3_1 + 32 | 0 | 0);
        }
        $7_1 = $205($0_1 | 0, $1_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
        label$15 : {
         if (!$4_1) {
          break label$15
         }
         if ($7_1) {
          break label$15
         }
         label$16 : {
          if (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) {
           break label$16
          }
          $7_1 = 0;
          break label$15;
         }
         $7_1 = $205($0_1 | 0, $1_1 | 0, $6_1 | 0, $2_1 | 0, 0 | 0) | 0;
        }
        $8_1 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, 0, i64toi32_i32$0, 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $796(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
        label$17 : {
         if ($7_1) {
          break label$17
         }
         if (!(HEAPU8[($2_1 + 8 | 0) >> 0] | 0)) {
          break label$7
         }
         $7_1 = $206($0_1 | 0, $4_1 | 0, $6_1 | 0) | 0;
         label$18 : {
          if (!$4_1) {
           break label$18
          }
          if ($7_1) {
           break label$18
          }
          if (!(HEAPU8[($2_1 + 9 | 0) >> 0] | 0)) {
           break label$8
          }
          $7_1 = $206($0_1 | 0, 0 | 0, $6_1 | 0) | 0;
         }
         if (!$7_1) {
          break label$8
         }
        }
        label$19 : {
         label$20 : {
          if (!(HEAP32[($7_1 + 20 | 0) >> 2] | 0)) {
           break label$20
          }
          if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
           break label$19
          }
         }
         if (FUNCTION_TABLE[HEAP32[($1_1 + 8 | 0) >> 2] | 0]($1_1, $3_1 + 48 | 0, $3_1 + 248 | 0) | 0) {
          break label$19
         }
         label$21 : {
          $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
          if (!$0_1) {
           break label$21
          }
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$1 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
          $139_1 = i64toi32_i32$1;
          $139$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$0 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
          $141_1 = i64toi32_i32$0;
          $141$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $139$hi;
          i64toi32_i32$2 = $139_1;
          i64toi32_i32$0 = $141$hi;
          i64toi32_i32$3 = $141_1;
          i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          i64toi32_i32$2 = 0;
          i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 8e3 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          $143$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $145$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $143$hi;
          $31_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $145$hi;
          i64toi32_i32$2 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$5 | 0, $0_1 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$2;
          break label$19;
         }
         $0_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
         if (!$0_1) {
          break label$19
         }
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$5 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
         $153_1 = i64toi32_i32$5;
         $153$hi = i64toi32_i32$2;
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$2 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
         $155_1 = i64toi32_i32$2;
         $155$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $153$hi;
         i64toi32_i32$1 = $153_1;
         i64toi32_i32$2 = $155$hi;
         i64toi32_i32$3 = $155_1;
         i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
         $157$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $159$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $157$hi;
         $32_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $159$hi;
         i64toi32_i32$1 = __wasm_i64_sdiv($32_1 | 0, i64toi32_i32$4 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
         HEAP32[($7_1 + 16 | 0) >> 2] = i64toi32_i32$1;
        }
        label$22 : {
         $1_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
         if ($1_1 >>> 0 > 17 >>> 0) {
          break label$22
         }
         label$23 : {
          $0_1 = $1_1 + -7 | 0;
          if ($0_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          if (!((801 >>> ($0_1 & 65535 | 0) | 0) & 1 | 0)) {
           break label$23
          }
          $1_1 = HEAP32[(($0_1 << 2 | 0) + 17660 | 0) >> 2] | 0;
          HEAP32[($7_1 + 32 | 0) >> 2] = $1_1;
         }
         $0_1 = HEAP32[$7_1 >> 2] | 0;
         if (!$0_1) {
          break label$22
         }
         label$24 : while (1) {
          label$25 : {
           if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
            break label$25
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
          }
          $0_1 = HEAP32[$0_1 >> 2] | 0;
          if ($0_1) {
           continue label$24
          }
          break label$24;
         };
        }
        $8_1 = 1;
        if ((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        $0_1 = HEAP32[$7_1 >> 2] | 0;
        if (!$0_1) {
         break label$6
        }
        if (HEAP32[$0_1 >> 2] | 0) {
         break label$6
        }
        $8_1 = 1;
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        label$26 : {
         label$27 : {
          $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          switch ($0_1 + -15 | 0 | 0) {
          case 0:
          case 3:
           break label$26;
          case 1:
          case 2:
           break label$6;
          default:
           break label$27;
          };
         }
         if (($0_1 | 0) == (129 | 0)) {
          break label$26
         }
         if (($0_1 | 0) != (6 | 0)) {
          break label$6
         }
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = 5;
        break label$6;
       }
       $859(16277 | 0, 15069 | 0, 1487 | 0);
       abort();
      }
      $859(16280 | 0, 15069 | 0, 1488 | 0);
      abort();
     }
     $8_1 = 0;
    }
    $7_1 = 0;
   }
   label$28 : {
    if (HEAP32[($2_1 + 16 | 0) >> 2] | 0) {
     break label$28
    }
    $59($6_1 | 0);
   }
   label$29 : {
    if (!$5_1) {
     break label$29
    }
    $815($5_1 | 0);
   }
   if (!$8_1) {
    break label$5
   }
   $200($7_1 | 0, $3_1 + 48 | 0 | 0, 196 | 0) | 0;
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $3_1 + 48 | 0;
   $827(16377 | 0, $3_1 + 16 | 0 | 0);
  }
  label$30 : {
   $11_1 = $3_1 + 288 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $207($0_1 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $0_1 + $1_1 | 0;
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) == (46 | 0)) {
      break label$1
     }
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $2_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) == (46 | 0) ? $0_1 : 0;
  }
  return $2_1 | 0;
 }
 
 function $205($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $24_1 = 0, $38_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  i64toi32_i32$0 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $24_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 72 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0;
  HEAP8[($5_1 + 73 | 0) >> 0] = HEAPU8[($3_1 + 13 | 0) >> 0] | 0;
  HEAP16[($5_1 + 74 | 0) >> 1] = HEAPU16[($3_1 + 14 | 0) >> 1] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = -1;
  $38_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 80 | 0) >> 2] = $38_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = 0;
  $974($5_1 + 96 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP16[($5_1 + 240 | 0) >> 1] = 257;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 16843009;
  HEAP32[($5_1 + 232 | 0) >> 2] = 16843009;
  HEAP32[($5_1 + 236 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 16843009;
  HEAP32[($5_1 + 224 | 0) >> 2] = 16843009;
  HEAP32[($5_1 + 228 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$5
     }
     if (!($208($5_1 + 224 | 0 | 0, $7_1 | 0) | 0)) {
      break label$4
     }
    }
    if (!($209($5_1 + 224 | 0 | 0, $4_1 | 0) | 0)) {
     break label$4
    }
    $8_1 = 0;
    if (!($210($5_1 + 224 | 0 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0) | 0)) {
     break label$3
    }
    $9_1 = 0;
    $8_1 = 0;
    $6_1 = 0;
    label$6 : {
     label$7 : while (1) {
      label$8 : {
       if (!(HEAPU8[(($5_1 + 224 | 0) + $9_1 | 0) >> 0] | 0)) {
        break label$8
       }
       label$9 : {
        $4_1 = $9_1 << 2 | 0;
        $7_1 = ($0_1 + $4_1 | 0) + 16 | 0;
        if (HEAP32[$7_1 >> 2] | 0) {
         break label$9
        }
        $10_1 = HEAP32[($4_1 + 15152 | 0) >> 2] | 0;
        $11_1 = FUNCTION_TABLE[HEAP32[($10_1 + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
        HEAP32[$7_1 >> 2] = $11_1;
        if ($11_1) {
         break label$9
        }
        if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1;
        $827(16556 | 0, $5_1 | 0);
        break label$8;
       }
       $796(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
       label$10 : {
        if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 15152 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
        $827(16619 | 0, $5_1 + 48 | 0 | 0);
       }
       label$11 : {
        $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($4_1 + 15152 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0](HEAP32[$7_1 >> 2] | 0, $2_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0, $5_1 + 64 | 0) | 0;
        if ($8_1) {
         break label$11
        }
        $8_1 = 0;
        break label$8;
       }
       HEAP32[($8_1 + 32 | 0) >> 2] = $9_1;
       label$12 : {
        if (!(HEAPU8[($3_1 + 11 | 0) >> 0] | 0)) {
         break label$12
        }
        label$13 : {
         label$14 : {
          switch ((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + -3 | 0 | 0) {
          case 1:
           $4_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$4_1) {
            break label$12
           }
           label$17 : while (1) {
            label$18 : {
             if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (2 | 0)) {
              break label$18
             }
             $4_1 = $556(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
             break label$13;
            }
            $4_1 = HEAP32[$4_1 >> 2] | 0;
            if ($4_1) {
             continue label$17
            }
            break label$12;
           };
          case 0:
          case 4:
           $4_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$4_1) {
            break label$12
           }
           label$19 : while (1) {
            label$20 : {
             if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
              break label$20
             }
             $4_1 = $516(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
             break label$13;
            }
            $4_1 = HEAP32[$4_1 >> 2] | 0;
            if ($4_1) {
             continue label$19
            }
            break label$12;
           };
          case 7:
           break label$14;
          default:
           break label$12;
          };
         }
         $4_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$4_1) {
          break label$12
         }
         label$21 : while (1) {
          label$22 : {
           if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
            break label$22
           }
           $4_1 = $486(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
           break label$13;
          }
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if ($4_1) {
           continue label$21
          }
          break label$12;
         };
        }
        if (!$4_1) {
         break label$12
        }
        label$23 : {
         $7_1 = $211($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
         if (!$7_1) {
          break label$23
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = 0;
         HEAP32[($8_1 + 20 | 0) >> 2] = $7_1;
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1);
       }
       label$24 : {
        label$25 : {
         if (HEAPU8[($3_1 + 8 | 0) >> 0] | 0) {
          break label$25
         }
         if (!(HEAPU8[($3_1 + 10 | 0) >> 0] | 0)) {
          break label$24
         }
        }
        $11_1 = 0;
        HEAP32[($5_1 + 88 | 0) >> 2] = 0;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$0 = 0;
        HEAP32[($5_1 + 80 | 0) >> 2] = 0;
        HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
        $7_1 = (HEAPU8[($3_1 + 56 | 0) >> 0] | 0 | 0) != (0 | 0);
        label$26 : {
         $4_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$4_1) {
          break label$26
         }
         label$27 : while (1) {
          $11_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          label$28 : {
           label$29 : {
            if (!($7_1 & 1 | 0)) {
             break label$29
            }
            $7_1 = 1;
            label$30 : {
             if (($11_1 | 0) != (1 | 0)) {
              break label$30
             }
             label$31 : {
              label$32 : {
               switch ($9_1 + -12 | 0 | 0) {
               case 0:
               case 4:
                break label$32;
               default:
                break label$31;
               };
              }
              if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
               break label$31
              }
              if (!(HEAPU8[($4_1 + 348 | 0) >> 0] | 0)) {
               break label$31
              }
              $7_1 = 0;
              if (HEAPU8[($4_1 + 349 | 0) >> 0] | 0) {
               break label$30
              }
             }
             label$33 : {
              $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
              if (($11_1 | 0) > (31 | 0)) {
               break label$33
              }
              HEAP32[((($5_1 + 64 | 0) + ($11_1 << 2 | 0) | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
              $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
             }
             $7_1 = 1;
             HEAP32[($5_1 + 88 | 0) >> 2] = $11_1 + 1 | 0;
            }
            label$34 : {
             if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$34
             }
             if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$34
             }
             $11_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
             $10_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             HEAP32[($5_1 + 40 | 0) >> 2] = $7_1;
             HEAP32[($5_1 + 36 | 0) >> 2] = $10_1;
             HEAP32[($5_1 + 32 | 0) >> 2] = $11_1;
             $827(16660 | 0, $5_1 + 32 | 0 | 0);
            }
            if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
             break label$28
            }
            label$35 : {
             $7_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
             if (($7_1 | 0) > (31 | 0)) {
              break label$35
             }
             HEAP32[((($5_1 + 64 | 0) + ($7_1 << 2 | 0) | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
             $7_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
            }
            HEAP32[($5_1 + 88 | 0) >> 2] = $7_1 + 1 | 0;
            break label$28;
           }
           if ($11_1 >>> 0 > 1 >>> 0) {
            break label$28
           }
           HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 1 | 0;
          }
          $7_1 = (HEAPU8[($3_1 + 56 | 0) >> 0] | 0 | 0) != (0 | 0);
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if ($4_1) {
           continue label$27
          }
          break label$27;
         };
         $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
        }
        HEAP8[($5_1 + 92 | 0) >> 0] = $7_1 & ($11_1 | 0) != (0 | 0) | 0;
        label$36 : {
         if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$36
         }
         if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$36
         }
         HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
         $827(16700 | 0, $5_1 + 16 | 0 | 0);
        }
        label$37 : {
         switch ($9_1 + -12 | 0 | 0) {
         case 0:
          $212($0_1 | 0, $8_1 | 0, 44960 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0, $3_1 | 0);
          break label$24;
         case 4:
          break label$37;
         default:
          break label$24;
         };
        }
        $212($0_1 | 0, $8_1 | 0, 44992 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0, $3_1 | 0);
       }
       label$39 : {
        label$40 : {
         switch ((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + -3 | 0 | 0) {
         case 1:
          $4_1 = HEAP32[$8_1 >> 2] | 0;
          if (!$4_1) {
           break label$39
          }
          $11_1 = 0;
          $7_1 = 0;
          label$42 : while (1) {
           label$43 : {
            label$44 : {
             switch (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) {
             case 2:
              $11_1 = 1;
              break label$43;
             case 0:
              break label$44;
             default:
              break label$43;
             };
            }
            $7_1 = 1;
           }
           label$46 : {
            if (!($7_1 & 1 | 0)) {
             break label$46
            }
            if (!($11_1 & 1 | 0)) {
             break label$46
            }
            HEAP32[($8_1 + 12 | 0) >> 2] = 5;
           }
           $4_1 = HEAP32[$4_1 >> 2] | 0;
           if ($4_1) {
            continue label$42
           }
           break label$39;
          };
         case 0:
         case 4:
          break label$40;
         default:
          break label$39;
         };
        }
        $4_1 = HEAP32[$8_1 >> 2] | 0;
        if (!$4_1) {
         break label$39
        }
        label$47 : {
         label$48 : while (1) {
          if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
           break label$47
          }
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$4_1) {
           break label$39
          }
          continue label$48;
         };
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = 5;
       }
       label$49 : {
        if (!$6_1) {
         break label$49
        }
        $213($0_1 | 0, $6_1 | 0);
       }
       if (HEAP32[$8_1 >> 2] | 0) {
        break label$6
       }
       $6_1 = $8_1;
      }
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) != (18 | 0)) {
       continue label$7
      }
      break label$3;
     };
    }
    $6_1 = 0;
    break label$3;
   }
   $8_1 = 0;
  }
  label$50 : {
   $13_1 = $5_1 + 256 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return ($8_1 ? $8_1 : $6_1) | 0;
 }
 
 function $206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $11$hi = 0, $11_1 = 0, i64toi32_i32$5 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $78$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if ($4_1) {
      break label$5
     }
     $4_1 = $234(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
     if (!$4_1) {
      break label$4
     }
    }
    $237($4_1 | 0, $1_1 | 0);
    i64toi32_i32$0 = 0;
    $11_1 = 0;
    $11$hi = i64toi32_i32$0;
    $5_1 = $3_1 + 20 | 0;
    $6_1 = $3_1 + 16 | 0;
    label$6 : while (1) {
     i64toi32_i32$0 = $11$hi;
     $4_1 = $50($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 8192 | 0, $3_1 + 28 | 0 | 0) | 0;
     label$7 : {
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$7
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$7
      }
      i64toi32_i32$0 = $11$hi;
      $1_1 = $11_1;
      $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
      label$8 : {
       label$9 : {
        if ($4_1) {
         break label$9
        }
        $8_1 = 0;
        break label$8;
       }
       $8_1 = $756($4_1 | 0) | 0;
      }
      HEAP32[$5_1 >> 2] = $8_1;
      HEAP32[$6_1 >> 2] = $4_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = 8192;
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(17508 | 0, $3_1 | 0);
     }
     label$10 : {
      label$11 : {
       if ($4_1) {
        break label$11
       }
       $4_1 = $240(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       break label$10;
      }
      $1_1 = $756($4_1 | 0) | 0;
      $4_1 = $239(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0, $3_1 + 24 | 0 | 0) | 0;
      if ($4_1) {
       break label$10
      }
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = 0;
      $78$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1 + $1_1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + $78$hi | 0;
      if (i64toi32_i32$4 >>> 0 < $1_1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $11_1 = i64toi32_i32$4;
      $11$hi = i64toi32_i32$5;
      if (HEAP32[($3_1 + 24 | 0) >> 2] | 0) {
       continue label$6
      }
     }
     break label$6;
    };
    $236(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
    $1_1 = 0;
    if (!$4_1) {
     break label$3
    }
    label$12 : {
     $1_1 = $813(40 | 0) | 0;
     if (!$1_1) {
      break label$12
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = 1;
     HEAP32[($1_1 + 32 | 0) >> 2] = 18;
     $214($1_1 | 0, 1 | 0);
     label$13 : {
      label$14 : {
       switch (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) {
       case 1:
        if (HEAP32[($1_1 + 16 | 0) >> 2] | 0) {
         break label$13
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAPU16[($4_1 + 26 | 0) >> 1] | 0, 1e3);
        break label$13;
       case 0:
        break label$14;
       default:
        break label$13;
       };
      }
      HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 32 | 0) >> 2] | 0, 1e3);
     }
     $215($1_1 | 0, $4_1 | 0);
     break label$3;
    }
    $815($4_1 | 0);
   }
   $1_1 = 0;
  }
  label$16 : {
   $10_1 = $3_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $1_1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 | 0;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 0;
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = $0_1 + $4_1 | 0;
    if (!(HEAPU8[$5_1 >> 0] | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP32[(HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + 1 | 0;
     break label$4;
    }
    HEAP8[$5_1 >> 0] = 0;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$6 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$2_1 >> 2] = $3_1;
   $827(16724 | 0, $2_1 | 0);
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = 0;
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = $0_1 + $4_1 | 0;
    if (!(HEAPU8[$5_1 >> 0] | 0)) {
     break label$4
    }
    $6_1 = $198(HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $6_1;
    $3_1 = $3_1 + $6_1 | 0;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$2_1 >> 2] = $1_1 ? $1_1 : 16372;
   $827(16761 | 0, $2_1 | 0);
  }
  label$6 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $210($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $12_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $13_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $4_1 = 0;
  $5_1 = 4;
  label$3 : while (1) {
   label$4 : {
    if (!(HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0)) {
     break label$4
    }
    $6_1 = HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $5_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $6_1 : $5_1;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   label$6 : {
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $5_1 | 0, $3_1 + 12 | 0 | 0) | 0;
    if (!$1_1) {
     break label$6
    }
    $6_1 = 0;
    $4_1 = 0;
    label$7 : while (1) {
     label$8 : {
      $5_1 = $0_1 + $4_1 | 0;
      if (!(HEAPU8[$5_1 >> 0] | 0)) {
       break label$8
      }
      $762($3_1 + 16 | 0 | 0, $1_1 | 0);
      label$9 : {
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1 + 16 | 0) | 0)) {
        break label$9
       }
       $6_1 = $6_1 + 1 | 0;
       break label$8;
      }
      HEAP8[$5_1 >> 0] = 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (18 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $735($1_1 | 0);
    break label$5;
   }
   i64toi32_i32$0 = $0_1;
   i64toi32_i32$1 = 0;
   $13_1 = 0;
   HEAP8[$0_1 >> 0] = $13_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
   HEAP8[($0_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
   HEAP8[($0_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
   HEAP8[($0_1 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[($0_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[($0_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[($0_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   $6_1 = 0;
   $15_1 = $0_1 + 16 | 0;
   $16_1 = 0;
   HEAP8[$15_1 >> 0] = $16_1;
   HEAP8[($15_1 + 1 | 0) >> 0] = $16_1 >>> 8 | 0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   $12_1 = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   $14_1 = 0;
   HEAP8[$12_1 >> 0] = $14_1;
   HEAP8[($12_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($12_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($12_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   HEAP8[($12_1 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[($12_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[($12_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[($12_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  }
  label$10 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$3_1 >> 2] = $6_1;
   $827(16804 | 0, $3_1 | 0);
  }
  label$11 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $211($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0, $11$hi = 0, $11_1 = 0, $8_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $13$hi = 0, $12_1 = 0, $13_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $10_1 = 0, $9_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $54$hi = 0, $56_1 = 0, $56$hi = 0, $70$hi = 0, $77$hi = 0, $85_1 = 0, $81$hi = 0, $98_1 = 0, $101_1 = 0, $134_1 = 0, $134$hi = 0, $136_1 = 0, $136$hi = 0, $150_1 = 0, $152_1 = 0, $153_1 = 0, $153$hi = 0, $207_1 = 0, $207$hi = 0, $209_1 = 0, $209$hi = 0, $211$hi = 0, $215$hi = 0, $86_1 = 0, $224_1 = 0, $224$hi = 0, $226_1 = 0, $226$hi = 0, $228$hi = 0, $232$hi = 0, $87_1 = 0, $268_1 = 0, $269_1 = 0, $270_1 = 0, $271_1 = 0, $274_1 = 0, $274$hi = 0, $277_1 = 0, $277$hi = 0, $279_1 = 0, $279$hi = 0, $281_1 = 0, $282_1 = 0, $283_1 = 0, $284_1 = 0, $286_1 = 0, $286$hi = 0, $291$hi = 0, $88_1 = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $326$hi = 0, $328$hi = 0, $89_1 = 0;
  label$1 : {
   $5_1 = global$0 - 160 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1186 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$3_1) {
      break label$7
     }
     if (!$2_1) {
      break label$6
     }
     if (!$1_1) {
      break label$5
     }
     $6_1 = 0;
     label$8 : {
      if (FUNCTION_TABLE[HEAP32[($1_1 + 8 | 0) >> 2] | 0]($1_1, $5_1 + 104 | 0, $5_1 + 96 | 0) | 0) {
       break label$8
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      if ($221($0_1 | 0, $2_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $5_1 + 144 | 0 | 0) | 0) {
       break label$8
      }
      $50_1 = $0_1;
      $51_1 = $2_1;
      $52_1 = $3_1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $54_1 = i64toi32_i32$1;
      $54$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      $56_1 = i64toi32_i32$0;
      $56$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $54$hi;
      i64toi32_i32$2 = $54_1;
      i64toi32_i32$0 = $56$hi;
      i64toi32_i32$3 = $56_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$2 = 0;
      i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      if ($221($50_1 | 0, $51_1 | 0, $52_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, $5_1 + 112 | 0 | 0) | 0) {
       break label$8
      }
      $1_1 = 8192;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$2;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         i64toi32_i32$1 = $5_1;
         i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
         $12_1 = i64toi32_i32$2;
         $12$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $13_1 = $1_1;
         $13$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $12$hi;
         i64toi32_i32$1 = i64toi32_i32$2;
         i64toi32_i32$2 = $13$hi;
         i64toi32_i32$3 = $1_1;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $70$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $11$hi;
         i64toi32_i32$4 = $70$hi;
         i64toi32_i32$5 = i64toi32_i32$0;
         i64toi32_i32$1 = $11$hi;
         i64toi32_i32$3 = $11_1;
         if ((i64toi32_i32$4 | 0) > (i64toi32_i32$1 | 0)) {
          $79_1 = 1
         } else {
          if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $80_1 = 0
           } else {
            $80_1 = 1
           }
           $81_1 = $80_1;
          } else {
           $81_1 = 0
          }
          $79_1 = $81_1;
         }
         if ($79_1) {
          break label$11
         }
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$5 = $13$hi;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$4 = $13$hi;
         i64toi32_i32$1 = $13_1;
         i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
         i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
         i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
         i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
         $11_1 = i64toi32_i32$2;
         $11$hi = i64toi32_i32$0;
         break label$10;
        }
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $77$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $77$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$1 = $12_1;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 4 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $85_1 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($85_1 | 0, i64toi32_i32$2 | 0, 3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $81$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = $81$hi;
        i64toi32_i32$3 = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$4;
       }
       label$12 : {
        i64toi32_i32$4 = $11$hi;
        if (!($221($0_1 | 0, $2_1 | 0, $3_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, $5_1 + 128 | 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$2 = ($5_1 + 112 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $98_1 = i64toi32_i32$4;
        i64toi32_i32$4 = ($5_1 + 128 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $98_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
        $101_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $5_1;
        HEAP32[($5_1 + 128 | 0) >> 2] = $101_1;
        HEAP32[($5_1 + 132 | 0) >> 2] = i64toi32_i32$4;
        $6_1 = $1_1 >>> 0 < 2097152 >>> 0;
        $1_1 = $1_1 << 1 | 0;
        if ($6_1) {
         continue label$9
        }
       }
       break label$9;
      };
      $6_1 = 0;
      label$13 : {
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
       HEAP32[($5_1 + 80 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$3 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
       HEAP32[($5_1 + 64 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
       HEAP32[($5_1 + 72 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
       $827(16864 | 0, $5_1 + 64 | 0 | 0);
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$3;
      $134$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$4 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
      $136_1 = i64toi32_i32$4;
      $136$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $134$hi;
      i64toi32_i32$2 = $134_1;
      i64toi32_i32$4 = $136$hi;
      i64toi32_i32$1 = $136_1;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$4 | 0)) {
       $82_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         $83_1 = 0
        } else {
         $83_1 = 1
        }
        $84_1 = $83_1;
       } else {
        $84_1 = 0
       }
       $82_1 = $84_1;
      }
      if ($82_1) {
       break label$8
      }
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$3 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$3 = $12$hi;
      $6_1 = $222($5_1 + 144 | 0 | 0, $5_1 + 128 | 0 | 0, $11_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$3 | 0) | 0;
      $150_1 = $5_1 + 144 | 0;
      $152_1 = $5_1 + 112 | 0;
      i64toi32_i32$3 = i64toi32_i32$2;
      $153_1 = $11_1;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 2 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $153$hi;
      i64toi32_i32$1 = $13$hi;
      $1_1 = $222($150_1 | 0, $152_1 | 0, $153_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$0 = $12$hi;
      $7_1 = $222($5_1 + 112 | 0 | 0, $5_1 + 128 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
      label$14 : {
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($5_1 + 48 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 36 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
       HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 40 | 0) >> 2] = $7_1 + $1_1 | 0;
       $827(16932 | 0, $5_1 + 32 | 0 | 0);
      }
      label$15 : {
       label$16 : {
        $8_1 = $6_1 >>> 4 | 0;
        $1_1 = $7_1 + $1_1 | 0;
        if (Math_imul($8_1, 9) >>> 0 > $1_1 >>> 0) {
         break label$16
        }
        if (Math_imul($8_1, 21) >>> 0 >= $1_1 >>> 0) {
         break label$15
        }
       }
       $1_1 = 0;
       $7_1 = 0;
       label$17 : {
        $6_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
        $8_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
        if ($6_1 >>> 0 <= $8_1 >>> 0) {
         break label$17
        }
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        $207_1 = i64toi32_i32$0;
        $207$hi = i64toi32_i32$1;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
        $209_1 = i64toi32_i32$1;
        $209$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $207$hi;
        i64toi32_i32$3 = $207_1;
        i64toi32_i32$1 = $209$hi;
        i64toi32_i32$4 = $209_1;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, 36e4 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $211$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $215$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $211$hi;
        $86_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $215$hi;
        i64toi32_i32$3 = __wasm_i64_sdiv($86_1 | 0, i64toi32_i32$5 | 0, $6_1 - $8_1 | 0 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$3;
       }
       label$18 : {
        $8_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
        if ($8_1 >>> 0 <= $6_1 >>> 0) {
         break label$18
        }
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$5 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
        $224_1 = i64toi32_i32$5;
        $224$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        $226_1 = i64toi32_i32$3;
        $226$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $224$hi;
        i64toi32_i32$0 = $224_1;
        i64toi32_i32$3 = $226$hi;
        i64toi32_i32$4 = $226_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 36e4 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $228$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $232$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $228$hi;
        $87_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $232$hi;
        i64toi32_i32$0 = __wasm_i64_sdiv($87_1 | 0, i64toi32_i32$2 | 0, $8_1 - $6_1 | 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $1_1 = i64toi32_i32$0;
       }
       label$19 : {
        if (!(HEAP32[($4_1 + 40 | 0) >> 2] | 0)) {
         break label$19
        }
        if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
         break label$19
        }
        $6_1 = $7_1 >>> 0 > $1_1 >>> 0;
        $8_1 = (Math_imul(HEAP32[($4_1 + 36 | 0) >> 2] | 0, $6_1 ? $1_1 : $7_1) >>> 0) / (100 >>> 0) | 0;
        label$20 : {
         if (!$7_1) {
          break label$20
         }
         if (!$1_1) {
          break label$20
         }
         if ((($6_1 ? $7_1 - $1_1 | 0 : $1_1 - $7_1 | 0) | 0) <= ($8_1 | 0)) {
          break label$19
         }
        }
        $268_1 = $0_1;
        $269_1 = $2_1;
        $270_1 = $3_1;
        $271_1 = $4_1;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$0;
        $274_1 = i64toi32_i32$2;
        $274$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $277_1 = i64toi32_i32$0;
        $277$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $277$hi;
        i64toi32_i32$4 = $277_1;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $279_1 = i64toi32_i32$5;
        $279$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $274$hi;
        i64toi32_i32$5 = $279$hi;
        $7_1 = $223($268_1 | 0, $269_1 | 0, $270_1 | 0, $271_1 | 0, $274_1 | 0, i64toi32_i32$1 | 0, $279_1 | 0, i64toi32_i32$5 | 0, 1 | 0) | 0;
        $281_1 = $0_1;
        $282_1 = $2_1;
        $283_1 = $3_1;
        $284_1 = $4_1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$5 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $286_1 = i64toi32_i32$5;
        $286$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $286$hi;
        i64toi32_i32$2 = $286_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$4 = $11_1;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        i64toi32_i32$2 = 0;
        i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $291$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $291$hi;
        $88_1 = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        $1_1 = $223($281_1 | 0, $282_1 | 0, $283_1 | 0, $284_1 | 0, $88_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$2 | 0, 1 | 0) | 0;
       }
       $3_1 = $1_1 + -245760 | 0;
       label$21 : {
        label$22 : {
         label$23 : {
          $6_1 = $7_1 + -245760 | 0;
          if ($6_1 >>> 0 < 40714241 >>> 0) {
           break label$23
          }
          $2_1 = $1_1;
          if ($3_1 >>> 0 < 40714241 >>> 0) {
           break label$22
          }
         }
         label$24 : {
          if ($6_1 >>> 0 > 40714240 >>> 0) {
           break label$24
          }
          $2_1 = $7_1;
          if ($3_1 >>> 0 > 40714240 >>> 0) {
           break label$22
          }
         }
         $2_1 = $1_1 ? ($7_1 ? ($7_1 >>> 0 < $1_1 >>> 0 ? $7_1 : $1_1) : $1_1) : $7_1;
         if ($2_1) {
          break label$22
         }
         $6_1 = 0;
         break label$21;
        }
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$2 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$2;
        $322$hi = i64toi32_i32$3;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $324_1 = i64toi32_i32$3;
        $324$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $322$hi;
        i64toi32_i32$5 = $322_1;
        i64toi32_i32$3 = $324$hi;
        i64toi32_i32$4 = $324_1;
        i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 8e3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $326$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $328$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $326$hi;
        $89_1 = i64toi32_i32$5;
        i64toi32_i32$5 = $328$hi;
        i64toi32_i32$5 = __wasm_i64_sdiv($89_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $6_1 = i64toi32_i32$5;
       }
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
       HEAP32[$5_1 >> 2] = $0_1;
       $827(16991 | 0, $5_1 | 0);
       break label$8;
      }
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $6_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      $827(17086 | 0, $5_1 + 16 | 0 | 0);
     }
     label$25 : {
      $10_1 = $5_1 + 160 | 0;
      if ($10_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $10_1;
     }
     return $6_1 | 0;
    }
    $859(16843 | 0, 15069 | 0, 1187 | 0);
    abort();
   }
   $859(16860 | 0, 15069 | 0, 1188 | 0);
   abort();
  }
  $859(16277 | 0, 15069 | 0, 1189 | 0);
  abort();
 }
 
 function $212($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $13_1 = 0, $8_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, $21_1 = 0, $20_1 = 0, $185_1 = 0;
  label$1 : {
   $6_1 = global$0 - 48 | 0;
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  $7_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : while (1) {
       label$8 : {
        if ((HEAP32[(($7_1 << 2 | 0) + 15152 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$8
        }
        label$9 : {
         $8_1 = ($0_1 + ($7_1 << 2 | 0) | 0) + 16 | 0;
         $7_1 = HEAP32[$8_1 >> 2] | 0;
         if ($7_1) {
          break label$9
         }
         $7_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
         HEAP32[$8_1 >> 2] = $7_1;
         if ($7_1) {
          break label$9
         }
         if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$3
         }
         HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$6_1 >> 2] = $0_1;
         $827(17292 | 0, $6_1 | 0);
         break label$3;
        }
        $9_1 = FUNCTION_TABLE[HEAP32[($2_1 + 24 | 0) >> 2] | 0]($7_1, $3_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0, $4_1) | 0;
        if (!$9_1) {
         break label$3
        }
        if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$4
        }
        label$10 : {
         if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
          break label$10
         }
         HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($9_1 + 20 | 0) >> 2] | 0;
        }
        label$11 : {
         if (HEAP32[($1_1 + 16 | 0) >> 2] | 0) {
          break label$11
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
        }
        $10_1 = HEAP32[$9_1 >> 2] | 0;
        if (!$10_1) {
         break label$5
        }
        $11_1 = 0;
        $12_1 = 0;
        label$12 : while (1) {
         label$13 : {
          label$14 : {
           if (($10_1 | 0) != (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0)) {
            break label$14
           }
           i64toi32_i32$1 = $9_1;
           i64toi32_i32$0 = 0;
           HEAP32[$9_1 >> 2] = 0;
           HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $13_1 = 0;
           break label$13;
          }
          $13_1 = HEAP32[$10_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $13_1;
         }
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             $7_1 = HEAP32[$1_1 >> 2] | 0;
             if (!$7_1) {
              break label$18
             }
             $14_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
             $3_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
             $0_1 = 0;
             label$19 : {
              label$20 : while (1) {
               $15_1 = $0_1;
               $4_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
               $16_1 = ($3_1 ^ $4_1 | 0) & 8191 | 0;
               label$21 : {
                label$22 : {
                 $17_1 = ($4_1 | 0) == ($3_1 | 0);
                 if ($17_1) {
                  break label$22
                 }
                 if (($14_1 | 0) == (4 | 0) & !$16_1 | 0) {
                  break label$22
                 }
                 $0_1 = $15_1;
                 break label$21;
                }
                $18_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
                label$23 : {
                 label$24 : {
                  $19_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                  if (($19_1 | 0) == (4 | 0)) {
                   break label$24
                  }
                  if (($19_1 | 0) != ($18_1 | 0)) {
                   break label$23
                  }
                 }
                 $0_1 = 1;
                 label$25 : {
                  switch ($19_1 | 0) {
                  case 4:
                   HEAP32[($7_1 + 4 | 0) >> 2] = $18_1;
                   label$28 : {
                    switch (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) {
                    case 0:
                     break label$17;
                    case 1:
                     break label$28;
                    default:
                     break label$16;
                    };
                   }
                   $973($7_1 + 20 | 0 | 0, $10_1 + 20 | 0 | 0, 44 | 0) | 0;
                   break label$16;
                  case 0:
                   $0_1 = $10_1 + 20 | 0;
                   $3_1 = $7_1 + 20 | 0;
                   label$29 : {
                    label$30 : {
                     $4_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                     if (!$4_1) {
                      break label$30
                     }
                     if (($4_1 | 0) == (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0)) {
                      break label$30
                     }
                     if (!(HEAPU8[($5_1 + 57 | 0) >> 0] | 0)) {
                      break label$29
                     }
                     if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$30
                     }
                     $4_1 = HEAP32[$3_1 >> 2] | 0;
                     HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
                     HEAP32[($6_1 + 16 | 0) >> 2] = $4_1;
                     $827(17360 | 0, $6_1 + 16 | 0 | 0);
                    }
                    $973($3_1 | 0, $0_1 | 0, 304 | 0) | 0;
                   }
                   $0_1 = 0;
                   label$31 : {
                    $3_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
                    if (($3_1 | 0) < (1 | 0)) {
                     break label$31
                    }
                    label$32 : while (1) {
                     $3_1 = $0_1 << 3 | 0;
                     i64toi32_i32$2 = ($7_1 + $3_1 | 0) + 68 | 0;
                     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                     $185_1 = i64toi32_i32$0;
                     i64toi32_i32$0 = ($10_1 + $3_1 | 0) + 68 | 0;
                     HEAP32[i64toi32_i32$0 >> 2] = $185_1;
                     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                     $0_1 = $0_1 + 1 | 0;
                     $3_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
                     if (($0_1 | 0) < ($3_1 | 0)) {
                      continue label$32
                     }
                     break label$32;
                    };
                   }
                   HEAP32[($10_1 + 316 | 0) >> 2] = $3_1;
                   break label$16;
                  case 1:
                   break label$25;
                  default:
                   break label$21;
                  };
                 }
                 label$33 : {
                  label$34 : {
                   if ($17_1) {
                    break label$34
                   }
                   if (($14_1 | 0) != (4 | 0)) {
                    break label$34
                   }
                   if (!$16_1) {
                    break label$33
                   }
                  }
                  if (($4_1 | 0) != ($3_1 | 0)) {
                   break label$16
                  }
                  $0_1 = $10_1 + 20 | 0;
                  $3_1 = $7_1 + 20 | 0;
                  label$35 : {
                   label$36 : {
                    $7_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                    if (!$7_1) {
                     break label$36
                    }
                    $4_1 = HEAP32[($10_1 + 20 | 0) >> 2] | 0;
                    if (($7_1 | 0) != ($4_1 | 0)) {
                     break label$35
                    }
                   }
                   $973($3_1 | 0, $0_1 | 0, 44 | 0) | 0;
                   break label$16;
                  }
                  label$37 : {
                   if (($7_1 | 0) != (131 | 0)) {
                    break label$37
                   }
                   if (($4_1 | 0) != (130 | 0)) {
                    break label$37
                   }
                   HEAP32[($973($3_1 | 0, $0_1 | 0, 44 | 0) | 0) >> 2] = 131;
                   break label$16;
                  }
                  if (!(HEAPU8[($5_1 + 57 | 0) >> 0] | 0)) {
                   break label$16
                  }
                  label$38 : {
                   if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$38
                   }
                   $7_1 = HEAP32[$3_1 >> 2] | 0;
                   HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
                   HEAP32[($6_1 + 32 | 0) >> 2] = $7_1;
                   $827(17434 | 0, $6_1 + 32 | 0 | 0);
                  }
                  $973($3_1 | 0, $0_1 | 0, 44 | 0) | 0;
                  break label$16;
                 }
                 $4_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                 $16_1 = HEAP32[($10_1 + 20 | 0) >> 2] | 0;
                 $0_1 = $15_1 | ($4_1 | 0) == ($16_1 | 0) | 0;
                 if (($4_1 | 0) != ($16_1 | 0)) {
                  break label$21
                 }
                 break label$19;
                }
                $0_1 = $15_1 | ($18_1 | 0) == (4 | 0) | 0;
               }
               $7_1 = HEAP32[$7_1 >> 2] | 0;
               if ($7_1) {
                continue label$20
               }
               break label$20;
              };
             }
             if ($0_1 & 1 | 0) {
              break label$16
             }
            }
            HEAP32[$10_1 >> 2] = $12_1;
            $11_1 = $11_1 ? $11_1 : $10_1;
            $12_1 = $10_1;
            break label$15;
           }
           $973($7_1 + 20 | 0 | 0, $10_1 + 20 | 0 | 0, 304 | 0) | 0;
          }
          $815($10_1 | 0);
          $13_1 = HEAP32[$9_1 >> 2] | 0;
         }
         $10_1 = $13_1;
         if (!$10_1) {
          break label$6
         }
         continue label$12;
        };
       }
       $7_1 = $7_1 + 1 | 0;
       if (($7_1 | 0) != (18 | 0)) {
        continue label$7
       }
       break label$3;
      };
     }
     if (!$12_1) {
      break label$5
     }
     $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     label$39 : while (1) {
      $7_1 = $12_1;
      $12_1 = 0;
      $3_1 = 0;
      label$40 : {
       if (($7_1 | 0) == ($11_1 | 0)) {
        break label$40
       }
       $12_1 = HEAP32[$7_1 >> 2] | 0;
       $3_1 = $11_1;
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = -1;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[($0_1 ? $0_1 : $1_1) >> 2] = $7_1;
      $0_1 = $7_1;
      $11_1 = $3_1;
      if ($12_1) {
       continue label$39
      }
      break label$39;
     };
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
    }
    $7_1 = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$4
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = $7_1;
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 28 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $9_1);
  }
  label$41 : {
   $21_1 = $6_1 + 48 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1633 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
             switch ($2_1 + -36864 | 0 | 0) {
             case 0:
              break label$10;
             case 2:
              break label$11;
             case 1:
              break label$12;
             default:
              break label$13;
             };
            }
            if (($2_1 | 0) != (32768 | 0)) {
             break label$8
            }
            $3_1 = 31084;
            break label$9;
           }
           $3_1 = 46008;
           break label$9;
          }
          $3_1 = 42528;
          break label$9;
         }
         $3_1 = 45976;
        }
        $2_1 = 0;
        label$14 : while (1) {
         if ((HEAP32[(($2_1 << 2 | 0) + 15152 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
          break label$5
         }
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != (18 | 0)) {
          continue label$14
         }
         break label$4;
        };
       }
       if (($2_1 | 0) != (37119 | 0)) {
        break label$6
       }
       break label$4;
      }
      $859(16401 | 0, 15069 | 0, 1634 | 0);
      abort();
     }
     label$15 : {
      if ($2_1 >>> 0 < 19 >>> 0) {
       break label$15
      }
      $859(16408 | 0, 15069 | 0, 1657 | 0);
      abort();
     }
     if (($2_1 | 0) == (18 | 0)) {
      break label$4
     }
    }
    $2_1 = $2_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 16 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 15152 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1, $1_1);
    return;
   }
   $217($2_1 | 0, $1_1 | 0);
   return;
  }
  $859(16445 | 0, 15069 | 0, 1671 | 0);
  abort();
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$1_1) {
        break label$6
       }
       $3_1 = 1;
       label$8 : {
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        if (!$4_1) {
         break label$8
        }
        $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        $6_1 = $4_1;
        label$9 : while (1) {
         label$10 : {
          if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
           break label$10
          }
          if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          label$11 : {
           if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
           $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
           HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
           HEAP32[($2_1 + 8 | 0) >> 2] = $6_1;
           HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
           HEAP32[$2_1 >> 2] = $0_1;
           $827(16479 | 0, $2_1 | 0);
          }
          $815($1_1 | 0);
          break label$3;
         }
         $6_1 = HEAP32[$6_1 >> 2] | 0;
         if ($6_1) {
          continue label$9
         }
         break label$9;
        };
        if (!$4_1) {
         break label$8
        }
        label$12 : {
         label$13 : {
          $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if ($5_1 >>> 0 <= $3_1 >>> 0) {
           break label$13
          }
          $7_1 = 0;
          $3_1 = 1;
          break label$12;
         }
         $6_1 = $4_1;
         label$14 : {
          label$15 : {
           label$16 : while (1) {
            $8_1 = $5_1;
            $7_1 = $6_1;
            $6_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$6_1) {
             break label$15
            }
            $5_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
            if ($5_1 >>> 0 > $3_1 >>> 0) {
             break label$14
            }
            continue label$16;
           };
          }
          $3_1 = ($8_1 | 0) != ($3_1 | 0);
          break label$5;
         }
         $3_1 = ($8_1 | 0) != ($3_1 | 0);
        }
        if ($7_1) {
         break label$5
        }
       }
       HEAP32[$1_1 >> 2] = $4_1;
       label$17 : {
        if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
         break label$17
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
       }
       HEAP32[$0_1 >> 2] = $1_1;
       HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       if (!$3_1) {
        break label$3
       }
       break label$4;
      }
      $859(16401 | 0, 15069 | 0, 1725 | 0);
      abort();
     }
     $859(16469 | 0, 15069 | 0, 1726 | 0);
     abort();
    }
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
    label$18 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break label$18
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    }
    HEAP32[$7_1 >> 2] = $1_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    if (!$3_1) {
     break label$3
    }
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  }
  label$19 : {
   $10_1 = $2_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 64 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 16843009;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 524288;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 56 | 0) >> 1] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = 0;
       break label$4;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     }
     $815($2_1 | 0);
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $815($1_1 | 0);
   return;
  }
  $859(16401 | 0, 15069 | 0, 1701 | 0);
  abort();
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 328 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 304 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 300 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $220() {
  return 18 | 0;
 }
 
 function $221($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $11_1 = 0, $10_1 = 0, $9_1 = 0, $16_1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $16$hi = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $37_1 = 0, $39$hi = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[HEAP32[(HEAP32[$2_1 >> 2] | 0) >> 2] | 0]($2_1, $3_1, i64toi32_i32$0);
  HEAP32[$4_1 >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = $5_1 + 40 | 0;
  $7_1 = $5_1 + 36 | 0;
  $8_1 = $5_1 + 32 | 0;
  $9_1 = 0;
  label$3 : {
   label$4 : while (1) {
    $37_1 = $1_1;
    i64toi32_i32$0 = 0;
    $39$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $39$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$4 = $9_1 + $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + $3$hi | 0;
    if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$5;
    $10_1 = $50($37_1 | 0, $16_1 | 0, i64toi32_i32$5 | 0, 8192 | 0, $5_1 + 76 | 0 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$5 = $16$hi;
     $11_1 = $16_1;
     $12_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       if ($10_1) {
        break label$7
       }
       $13_1 = 0;
       break label$6;
      }
      $13_1 = $756($10_1 | 0) | 0;
     }
     HEAP32[$6_1 >> 2] = $13_1;
     HEAP32[$7_1 >> 2] = $10_1;
     HEAP32[$8_1 >> 2] = $12_1;
     HEAP32[($5_1 + 28 | 0) >> 2] = 8192;
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     HEAP32[($5_1 + 20 | 0) >> 2] = $11_1;
     HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
     $827(17154 | 0, $5_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!$10_1) {
      break label$8
     }
     $12_1 = $756($10_1 | 0) | 0;
     $762($5_1 + 56 | 0 | 0, $10_1 | 0);
     $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0]($2_1, $5_1 + 56 | 0, $4_1) | 0;
     label$9 : {
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$2;
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[i64toi32_i32$0 >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[($5_1 + 4 | 0) >> 2] = $11_1;
      HEAP32[$5_1 >> 2] = $0_1;
      $827(17231 | 0, $5_1 | 0);
     }
     $735($10_1 | 0);
     label$10 : {
      if (!$11_1) {
       break label$10
      }
      if (($11_1 | 0) != (1 | 0)) {
       break label$3
      }
      $11_1 = 0;
      break label$3;
     }
     $9_1 = $12_1 + $9_1 | 0;
     if ($9_1 >>> 0 < 4194304 >>> 0) {
      continue label$4
     }
    }
    break label$4;
   };
   $11_1 = -1;
  }
  label$11 : {
   $15_1 = $5_1 + 80 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $222($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $6_1 = 0, $7$hi = 0, i64toi32_i32$6 = 0, $4_1 = 0, $5_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $7_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $28$hi = 0, $30$hi = 0, $31_1 = 0, $38_1 = 0, $38$hi = 0, $40_1 = 0, $40$hi = 0;
  $4_1 = 0;
  label$1 : {
   $5_1 = (HEAP32[$1_1 >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $25_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $26_1 = 0
     } else {
      $26_1 = 1
     }
     $27_1 = $26_1;
    } else {
     $27_1 = 0
    }
    $25_1 = $27_1;
   }
   if ($25_1) {
    break label$1
   }
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
    $28_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0) {
      $29_1 = 0
     } else {
      $29_1 = 1
     }
     $30_1 = $29_1;
    } else {
     $30_1 = 0
    }
    $28_1 = $30_1;
   }
   if ($28_1) {
    break label$1
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $28$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   $30$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $28$hi;
   $31_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$1 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$5 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
   if (!i64toi32_i32$1) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $38_1 = i64toi32_i32$3;
   $38$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $40_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
   $40$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $38$hi;
   i64toi32_i32$5 = $40$hi;
   i64toi32_i32$5 = __wasm_i64_sdiv($38_1 | 0, i64toi32_i32$3 | 0, $40_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $4_1 = i64toi32_i32$5;
  }
  return $4_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $15$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $16$hi = 0, $17$hi = 0, $15_1 = 0, $14$hi = 0, $16_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $49_1 = 0, $14_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $17_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $13_1 = 0, $12_1 = 0, $34$hi = 0, $37_1 = 0, $37$hi = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $88$hi = 0, $92$hi = 0, $59_1 = 0, $103$hi = 0, $107$hi = 0, $60_1 = 0;
  label$1 : {
   $7_1 = global$0 - 48 | 0;
   $12_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $8_1 = 0;
  label$3 : {
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $41_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $42_1 = 0
     } else {
      $42_1 = 1
     }
     $43_1 = $42_1;
    } else {
     $43_1 = 0
    }
    $41_1 = $43_1;
   }
   if ($41_1) {
    break label$3
   }
   label$4 : {
    if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) <= ($6_1 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $3_1 + 44 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = 0;
    $37_1 = i64toi32_i32$5;
    $37$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$5 = $37$hi;
    i64toi32_i32$1 = $37_1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $49_1 = $45_1;
     } else {
      $49_1 = 0
     }
     $44_1 = $49_1;
    }
    if ($44_1) {
     break label$4
    }
    i64toi32_i32$2 = $4$hi;
    if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 + 32 | 0 | 0) | 0) {
     break label$3
    }
    $46_1 = $0_1;
    $47_1 = $1_1;
    $48_1 = $2_1;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 2 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$4;
    if ($221($46_1 | 0, $47_1 | 0, $48_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, $7_1 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$4 = $5$hi;
    if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, i64toi32_i32$4 | 0, $7_1 + 16 | 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $16_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
     $50_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $51_1 = 0
      } else {
       $51_1 = 1
      }
      $52_1 = $51_1;
     } else {
      $52_1 = 0
     }
     $50_1 = $52_1;
    }
    if ($50_1) {
     break label$3
    }
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$1 = $15_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $53_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0) {
       $54_1 = 0
      } else {
       $54_1 = 1
      }
      $55_1 = $54_1;
     } else {
      $55_1 = 0
     }
     $53_1 = $55_1;
    }
    if ($53_1) {
     break label$3
    }
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$2 = $17_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$4 | 0)) {
     $56_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       $57_1 = 0
      } else {
       $57_1 = 1
      }
      $58_1 = $57_1;
     } else {
      $58_1 = 0
     }
     $56_1 = $58_1;
    }
    if ($56_1) {
     break label$3
    }
    $9_1 = 0;
    $8_1 = 0;
    label$5 : {
     $10_1 = HEAP32[$7_1 >> 2] | 0;
     $11_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
     if ($10_1 >>> 0 <= $11_1 >>> 0) {
      break label$5
     }
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $88$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $92$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $88$hi;
     $59_1 = i64toi32_i32$2;
     i64toi32_i32$2 = $92$hi;
     i64toi32_i32$2 = __wasm_i64_sdiv($59_1 | 0, i64toi32_i32$0 | 0, $10_1 - $11_1 | 0 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $8_1 = i64toi32_i32$2;
    }
    label$6 : {
     $11_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if ($11_1 >>> 0 <= $10_1 >>> 0) {
      break label$6
     }
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $103$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $107$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $103$hi;
     $60_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $107$hi;
     i64toi32_i32$1 = __wasm_i64_sdiv($60_1 | 0, i64toi32_i32$3 | 0, $11_1 - $10_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $9_1 = i64toi32_i32$1;
    }
    $10_1 = ($8_1 | 0) > ($9_1 | 0);
    $11_1 = (Math_imul($10_1 ? $9_1 : $8_1, HEAP32[($3_1 + 36 | 0) >> 2] | 0) | 0) / (100 | 0) | 0;
    label$7 : {
     label$8 : {
      if (!$8_1) {
       break label$8
      }
      if (!$9_1) {
       break label$8
      }
      if ((($10_1 ? $8_1 - $9_1 | 0 : $9_1 - $8_1 | 0) | 0) <= ($11_1 | 0)) {
       break label$7
      }
     }
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $14$hi;
     $6_1 = $6_1 + 1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $14$hi;
     $8_1 = $223($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0) | 0;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$3 = $5$hi;
     $3_1 = $223($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $14_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0) | 0;
     $8_1 = $8_1 ? $8_1 : $3_1 ? $3_1 : $8_1;
     $9_1 = $3_1 ? $3_1 : $8_1 ? $8_1 : $3_1;
    }
    $8_1 = ($9_1 + $8_1 | 0 | 0) / (2 | 0) | 0;
    break label$3;
   }
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $5$hi;
   $8_1 = $224($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
  }
  label$9 : {
   $13_1 = $7_1 + 48 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $8_1 | 0;
 }
 
 function $224($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $15$hi = 0, $7_1 = 0, $14$hi = 0, $15_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $16$hi = 0, $17$hi = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $14_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $10_1 = 0, $11_1 = 0, $16_1 = 0, $17_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $13_1 = 0, $12_1 = 0, $30$hi = 0, $35_1 = 0, $35$hi = 0, $80$hi = 0, $84$hi = 0, $50_1 = 0, $95_1 = 0, $98_1 = 0;
  label$1 : {
   $6_1 = global$0 - 32 | 0;
   $12_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $7_1 = 0;
  label$3 : {
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $38_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $39_1 = 0
     } else {
      $39_1 = 1
     }
     $40_1 = $39_1;
    } else {
     $40_1 = 0
    }
    $38_1 = $40_1;
   }
   if ($38_1) {
    break label$3
   }
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $30$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $30$hi;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $14_1 = i64toi32_i32$3;
   $14$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $6_1 + 16 | 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$2 = $14_1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $15$hi;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$1 = $5_1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
    $41_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      $42_1 = 0
     } else {
      $42_1 = 1
     }
     $43_1 = $42_1;
    } else {
     $43_1 = 0
    }
    $41_1 = $43_1;
   }
   if ($41_1) {
    break label$3
   }
   if ((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $8_1 = 0;
   $7_1 = 0;
   $9_1 = 0;
   label$4 : {
    label$5 : while (1) {
     i64toi32_i32$5 = $15$hi;
     if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $15_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0) | 0) {
      break label$4
     }
     label$6 : {
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $4_1;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0) {
       break label$6
      }
      $10_1 = HEAP32[$6_1 >> 2] | 0;
      $11_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
      if ($10_1 >>> 0 <= $11_1 >>> 0) {
       break label$6
      }
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $44_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0) {
         $45_1 = 0
        } else {
         $45_1 = 1
        }
        $46_1 = $45_1;
       } else {
        $46_1 = 0
       }
       $44_1 = $46_1;
      }
      if ($44_1) {
       break label$6
      }
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = $16_1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$4 = __wasm_i64_mul(i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $80$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $84$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $80$hi;
      $50_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $84$hi;
      i64toi32_i32$4 = __wasm_i64_sdiv($50_1 | 0, i64toi32_i32$0 | 0, $10_1 - $11_1 | 0 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8_1 = $8_1 + i64toi32_i32$4 | 0;
      $9_1 = $9_1 + 1 | 0;
     }
     i64toi32_i32$2 = $6_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $95_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($6_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $95_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98_1 = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $98_1;
     HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = $14_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$5 = $5_1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $47_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        $48_1 = 0
       } else {
        $48_1 = 1
       }
       $49_1 = $48_1;
      } else {
       $49_1 = 0
      }
      $47_1 = $49_1;
     }
     if ($47_1) {
      break label$4
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) < (HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   label$7 : {
    if ($9_1) {
     break label$7
    }
    $7_1 = 0;
    break label$3;
   }
   $7_1 = ($8_1 >>> 0) / ($9_1 >>> 0) | 0;
  }
  label$8 : {
   $13_1 = $6_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $7_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  $226($0_1 | 0);
  $974($0_1 + 44 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $6_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = HEAP32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     label$6 : {
      if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
       break label$6
      }
      label$7 : {
       if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
       HEAP32[$1_1 >> 2] = $0_1;
       $827(17700 | 0, $1_1 | 0);
      }
      $235(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     }
     $228($0_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     $815($3_1 | 0);
     $3_1 = $4_1;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (8 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$8 : {
   $7_1 = $1_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $2_1 = $0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $0_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $0_1;
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$0_1) {
       break label$2
      }
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
     return;
    }
    HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
   }
   return;
  }
  $859(18153 | 0, 17900 | 0, 40 | 0);
  abort();
 }
 
 function $229($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $6_1 = 0;
  label$3 : {
   label$4 : {
    if (!($230($0_1 | 0, $2_1 | 0) | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $7_1 = $231($0_1 | 0, $2_1 | 0) | 0;
         if ($7_1) {
          break label$9
         }
         label$10 : {
          $7_1 = $813(16 | 0) | 0;
          if ($7_1) {
           break label$10
          }
          $6_1 = 0;
          if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($5_1 + 4 | 0) >> 2] = 16;
          HEAP32[$5_1 >> 2] = $0_1;
          $827(17765 | 0, $5_1 | 0);
          break label$4;
         }
         HEAP8[($7_1 + 12 | 0) >> 0] = 0;
         HEAP32[($7_1 + 4 | 0) >> 2] = $2_1;
         $1_1 = $234($1_1 | 0) | 0;
         HEAP32[($7_1 + 8 | 0) >> 2] = $1_1;
         label$11 : {
          if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          label$12 : {
           if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$12
           }
           $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
           HEAP32[($5_1 + 72 | 0) >> 2] = $2_1;
           HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
           HEAP32[($5_1 + 64 | 0) >> 2] = $0_1;
           $827(17817 | 0, $5_1 + 64 | 0 | 0);
          }
          $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
         }
         label$13 : {
          if ($1_1) {
           break label$13
          }
          $815($7_1 | 0);
          break label$8;
         }
         label$14 : {
          if (($3_1 | 0) == (4 | 0)) {
           break label$14
          }
          if ($238($1_1 | 0, $3_1 | 0) | 0) {
           break label$14
          }
          label$15 : {
           if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $827(17877 | 0, 0 | 0);
          }
          HEAP8[($7_1 + 12 | 0) >> 0] = 1;
          HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
         }
         $232($0_1 | 0, $2_1 | 0, $7_1 | 0);
         HEAP32[($0_1 + 32 | 0) >> 2] = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        }
        $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$3
        }
        if (HEAPU8[($7_1 + 12 | 0) >> 0] | 0) {
         break label$5
        }
        label$16 : {
         $6_1 = $239($1_1 | 0, $4_1 | 0, $5_1 + 76 | 0 | 0) | 0;
         if ($6_1) {
          break label$16
         }
         if (HEAP32[($5_1 + 76 | 0) >> 2] | 0) {
          break label$16
         }
         $6_1 = $813(328 | 0) | 0;
         if ($6_1) {
          break label$7
         }
         $6_1 = 0;
         if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$4
         }
         HEAP32[($5_1 + 52 | 0) >> 2] = 328;
         HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
         $827(17765 | 0, $5_1 + 48 | 0 | 0);
         break label$4;
        }
        if ($6_1) {
         break label$6
        }
       }
       $6_1 = 0;
       break label$4;
      }
      $218($6_1 | 0);
      HEAP32[($6_1 + 4 | 0) >> 2] = 4;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
     HEAP8[($7_1 + 12 | 0) >> 0] = 1;
     HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
     $827(18002 | 0, $5_1 + 16 | 0 | 0);
     break label$4;
    }
    $735($4_1 | 0);
   }
   label$17 : {
    $9_1 = $5_1 + 80 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(17985 | 0, 17900 | 0, 116 | 0);
  abort();
 }
 
 function $230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$2
    }
    $2_1 = 0;
    label$3 : while (1) {
     $3_1 = 0;
     $4_1 = HEAP32[(($0_1 + ($2_1 << 2 | 0) | 0) + 44 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$1
     }
     if (($4_1 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) == (32 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      return $0_1 | 0;
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return 0 | 0;
  }
  $859(18153 | 0, 17900 | 0, 40 | 0);
  abort();
 }
 
 function $232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(18153 | 0, 17900 | 0, 40 | 0);
   abort();
  }
  $0_1 = $0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    label$5 : while (1) {
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$6 : {
      if (HEAPU8[($5_1 + 12 | 0) >> 0] | 0) {
       break label$6
      }
      label$7 : {
       $7_1 = $240(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       if ($7_1) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!$2_1) {
          break label$9
         }
         $7_1 = FUNCTION_TABLE[$2_1]() | 0;
         break label$8;
        }
        $7_1 = $813(328 | 0) | 0;
       }
       label$10 : {
        if ($7_1) {
         break label$10
        }
        if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 328;
        HEAP32[$3_1 >> 2] = $0_1;
        $827(18075 | 0, $3_1 | 0);
        break label$4;
       }
       $218($7_1 | 0);
       HEAP32[($7_1 + 4 | 0) >> 2] = 4;
      }
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      $215($1_1 | 0, $7_1 | 0);
     }
     $5_1 = $6_1;
     if ($5_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (8 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$11 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(64 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61944 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 64;
    $827(18179 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 64 | 0, $2_1 | 0, 18160 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   $974($2_1 + 8 | 0 | 0, 0 | 0, 44 | 0) | 0;
   $7_1 = $2_1 + 60 | 0;
   $8_1 = 257;
   HEAP8[$7_1 >> 0] = $8_1;
   HEAP8[($7_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
   $5_1 = 16843009;
   HEAP8[($2_1 + 52 | 0) >> 0] = $5_1;
   HEAP8[($2_1 + 53 | 0) >> 0] = $5_1 >>> 8 | 0;
   HEAP8[($2_1 + 54 | 0) >> 0] = $5_1 >>> 16 | 0;
   HEAP8[($2_1 + 55 | 0) >> 0] = $5_1 >>> 24 | 0;
   $6_1 = 16843009;
   HEAP8[($2_1 + 56 | 0) >> 0] = $6_1;
   HEAP8[($2_1 + 57 | 0) >> 0] = $6_1 >>> 8 | 0;
   HEAP8[($2_1 + 58 | 0) >> 0] = $6_1 >>> 16 | 0;
   HEAP8[($2_1 + 59 | 0) >> 0] = $6_1 >>> 24 | 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 97 | 0);
  }
  $1_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 18320 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($3_1);
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
  $845($0_1 | 0, 64 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 115 | 0);
  }
  $1_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 18320 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1);
   }
   HEAP8[(($0_1 + $1_1 | 0) + 52 | 0) >> 0] = 1;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 132 | 0);
  }
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = ($0_1 + $2_1 | 0) + 52 | 0;
    if (!(HEAPU8[$3_1 >> 0] | 0)) {
     break label$4
    }
    HEAP8[$3_1 >> 0] = $198(HEAP32[((HEAP32[(($2_1 << 2 | 0) + 18320 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 148 | 0);
  }
  $2_1 = 0;
  $3_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $4_1 = ($0_1 + $3_1 | 0) + 52 | 0;
    if (!(HEAPU8[$4_1 >> 0] | 0)) {
     break label$4
    }
    $5_1 = (HEAP32[(HEAP32[(($3_1 << 2 | 0) + 18320 | 0) >> 2] | 0) >> 2] | 0 | 0) == ($1_1 | 0);
    HEAP8[$4_1 >> 0] = $5_1;
    $2_1 = $2_1 | $5_1 | 0;
   }
   $3_1 = $3_1 + 1 | 0;
   if (($3_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
  return $2_1 & 1 | 0 | 0;
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 168 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = ($756($1_1 | 0) | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  $4_1 = 0;
  $5_1 = 0;
  label$5 : {
   label$6 : while (1) {
    label$7 : {
     $6_1 = ($0_1 + $5_1 | 0) + 52 | 0;
     if (!(HEAPU8[$6_1 >> 0] | 0)) {
      break label$7
     }
     label$8 : {
      label$9 : {
       $7_1 = $5_1 << 2 | 0;
       $8_1 = ($0_1 + $7_1 | 0) + 12 | 0;
       if (HEAP32[$8_1 >> 2] | 0) {
        break label$9
       }
       $9_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($7_1 + 18320 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
       HEAP32[$8_1 >> 2] = $9_1;
       if (!$9_1) {
        break label$8
       }
      }
      $734($1_1 | 0);
      HEAP8[($3_1 + 15 | 0) >> 0] = 0;
      $9_1 = HEAP32[($7_1 + 18320 | 0) >> 2] | 0;
      $7_1 = FUNCTION_TABLE[HEAP32[($9_1 + 24 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $1_1, $3_1 + 15 | 0) | 0;
      $735($1_1 | 0);
      $4_1 = $4_1 + 1 | 0;
      label$10 : {
       if ($7_1) {
        break label$10
       }
       label$11 : {
        if (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) {
         break label$11
        }
        label$12 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($9_1 + 12 | 0) >> 2] | 0) >>> 0) {
          break label$12
         }
         HEAP8[($3_1 + 15 | 0) >> 0] = 1;
         HEAP32[($3_1 + 8 | 0) >> 2] = 0;
         label$13 : {
          $7_1 = FUNCTION_TABLE[HEAP32[($9_1 + 32 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $3_1 + 8 | 0) | 0;
          if (!$7_1) {
           break label$13
          }
          if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 > 49 >>> 0) {
           break label$13
          }
          $815($7_1 | 0);
          break label$12;
         }
         if ($7_1) {
          break label$10
         }
        }
        if (!(HEAPU8[($3_1 + 15 | 0) >> 0] | 0)) {
         break label$7
        }
       }
       FUNCTION_TABLE[HEAP32[($9_1 + 28 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0);
       break label$8;
      }
      HEAP8[$6_1 >> 0] = 0;
      break label$5;
     }
     HEAP8[$6_1 >> 0] = 0;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != (10 | 0)) {
     continue label$6
    }
    break label$6;
   };
   $7_1 = 0;
  }
  $735($1_1 | 0);
  HEAP32[$2_1 >> 2] = $4_1;
  label$14 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $7_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 223 | 0);
  }
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$5 : while (1) {
   label$6 : {
    $5_1 = $4_1 << 2 | 0;
    $6_1 = HEAP32[(($0_1 + $5_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 18320 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0]($6_1, $1_1 + 12 | 0) | 0;
    if (!$5_1) {
     break label$6
    }
    $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      if ($2_1) {
       break label$8
      }
      $3_1 = $6_1;
      break label$7;
     }
     label$9 : {
      if ($6_1 >>> 0 >= $3_1 >>> 0) {
       break label$9
      }
      $815($5_1 | 0);
      break label$6;
     }
     $815($2_1 | 0);
     $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    }
    $2_1 = $5_1;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (10 | 0)) {
    continue label$5
   }
   break label$5;
  };
  label$10 : {
   $8_1 = $1_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
  return 0 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(18376 | 0, 18380 | 0, 58 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 7;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $1_1 = $866(HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    return $1_1 | 0;
   }
   $859(18464 | 0, 18380 | 0, 70 | 0);
   abort();
  }
  $859(18464 | 0, 18380 | 0, 72 | 0);
  abort();
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $1_1 = $863(HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    return $1_1 | 0;
   }
   $859(18464 | 0, 18380 | 0, 80 | 0);
   abort();
  }
  $859(18464 | 0, 18380 | 0, 82 | 0);
  abort();
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = HEAPU8[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     $1_1 = $3_1 + -1 | 0;
     break label$2;
    }
    $4_1 = -1;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = 7;
   }
   $4_1 = ($2_1 >>> $3_1 | 0) & 1 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3_1 = $245($0_1 | 0) | 0;
     if (($3_1 | 0) >= (0 | 0)) {
      break label$3
     }
     return -1 | 0;
    }
    $2_1 = $3_1 & 1 | 0 | ($2_1 << 1 | 0) | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$1_1) {
         break label$6
        }
        if (!$0_1) {
         break label$5
        }
        $3_1 = 0;
        HEAP32[($0_1 + 8 | 0) >> 2] = 0;
        HEAP8[$0_1 >> 0] = 0;
        if ($2_1 >>> 0 < 3 >>> 0) {
         break label$1
        }
        HEAP8[$0_1 >> 0] = 1;
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $2_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
            if (($2_1 | 0) > (-1 | 0)) {
             break label$10
            }
            if (($4_1 | 0) == (66 | 0)) {
             break label$9
            }
            HEAP8[($0_1 + 8 | 0) >> 0] = 1;
            $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
           }
           if (($4_1 | 0) == (77 | 0)) {
            break label$7
           }
           if ($2_1 & 64 | 0) {
            break label$8
           }
           break label$7;
          }
          if (!($2_1 & 64 | 0)) {
           break label$4
          }
         }
         HEAP8[($0_1 + 9 | 0) >> 0] = 1;
         $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
        }
        $3_1 = 1;
        if (!($2_1 & 32 | 0)) {
         break label$1
        }
        if (($4_1 | 0) == (88 | 0)) {
         break label$2
        }
        break label$3;
       }
       $859(18487 | 0, 18380 | 0, 122 | 0);
       abort();
      }
      $859(18491 | 0, 18380 | 0, 123 | 0);
      abort();
     }
     $3_1 = 1;
     if (!($2_1 & 32 | 0)) {
      break label$1
     }
    }
    $3_1 = 1;
    HEAP8[($0_1 + 10 | 0) >> 0] = 1;
    if (($4_1 | 0) == (100 | 0)) {
     break label$1
    }
    if (!((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) & 32 | 0)) {
     break label$1
    }
   }
   $3_1 = 1;
   HEAP8[($0_1 + 11 | 0) >> 0] = 1;
  }
  return $3_1 | 0;
 }
 
 function $248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (HEAPU8[$0_1 >> 0] | 0) {
     break label$4
    }
    $4_1 = 0;
    HEAP8[$1_1 >> 0] = 0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($4_1 | 0) > (99 | 0)) {
          break label$10
         }
         label$11 : {
          if (($4_1 | 0) != (66 | 0)) {
           break label$11
          }
          $5_1 = 18495;
          break label$5;
         }
         if (($4_1 | 0) == (77 | 0)) {
          break label$9
         }
         if (($4_1 | 0) != (88 | 0)) {
          break label$6
         }
         $5_1 = 18509;
         break label$5;
        }
        label$12 : {
         if (($4_1 | 0) > (121 | 0)) {
          break label$12
         }
         if (($4_1 | 0) == (100 | 0)) {
          break label$8
         }
         if (($4_1 | 0) != (110 | 0)) {
          break label$6
         }
         $5_1 = 18523;
         break label$5;
        }
        if (($4_1 | 0) == (122 | 0)) {
         break label$7
        }
        if (($4_1 | 0) != (144 | 0)) {
         break label$6
        }
        $5_1 = 18540;
        break label$5;
       }
       $5_1 = 18504;
       break label$5;
      }
      $5_1 = 18518;
      break label$5;
     }
     $5_1 = 18531;
     break label$5;
    }
    HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
    $820($3_1 + 88 | 0 | 0, 8 | 0, 18549 | 0, $3_1 + 80 | 0 | 0) | 0;
    $5_1 = $3_1 + 88 | 0;
   }
   label$13 : {
    label$14 : {
     if (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) {
      break label$14
     }
     $4_1 = 1;
     break label$13;
    }
    HEAP32[($3_1 + 64 | 0) >> 2] = 18495;
    $4_1 = $820($3_1 + 96 | 0 | 1 | 0 | 0, 63 | 0, 18552 | 0, $3_1 + 64 | 0 | 0) | 0;
    $4_1 = ($4_1 | 0) < (1 | 0) ? 1 : $4_1 + 1 | 0;
   }
   label$15 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$15
    }
    if (!((HEAPU8[($0_1 + 9 | 0) >> 0] | 0) & 255 | 0)) {
     break label$15
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = 18504;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 48 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$16 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$16
    }
    if (!((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) & 255 | 0)) {
     break label$16
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = 18509;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 32 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$17 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$17
    }
    if (!((HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 255 | 0)) {
     break label$17
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 18518;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 16 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$18 : {
    label$19 : {
     if ($4_1 >>> 0 < 2 >>> 0) {
      break label$19
     }
     HEAP8[($3_1 + 96 | 0) >> 0] = 91;
     if ($4_1 >>> 0 > 63 >>> 0) {
      break label$18
     }
     HEAP8[(($4_1 + ($3_1 + 96 | 0) | 0) + -1 | 0) >> 0] = 93;
     break label$18;
    }
    HEAP8[($3_1 + 96 | 0) >> 0] = 0;
   }
   $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
   HEAP32[$3_1 >> 2] = $5_1;
   $0_1 = (($4_1 & 255 | 0) >>> 0) / (10 >>> 0) | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = ($4_1 - Math_imul($0_1, 10) | 0) & 255 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 96 | 0;
   $4_1 = $820($1_1 | 0, $2_1 | 0, 18556 | 0, $3_1 | 0) | 0;
  }
  label$20 : {
   $8_1 = $3_1 + 160 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $249($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$2_1) {
     break label$3
    }
    $783($3_1 | 0, $2_1 | 0);
    $2_1 = 0;
    label$5 : {
     if (!($250($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0)) {
      break label$5
     }
     $2_1 = 1;
     HEAP8[$0_1 >> 0] = 1;
    }
    label$6 : {
     $5_1 = $3_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $2_1 | 0;
   }
   $859(18491 | 0, 18380 | 0, 622 | 0);
   abort();
  }
  $859(18567 | 0, 18380 | 0, 623 | 0);
  abort();
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 592 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = 0;
  $974($3_1 + 336 | 0 | 0, 0 | 0, 256 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $827(18621 | 0, 0 | 0);
  }
  HEAP8[($0_1 + 2 | 0) >> 0] = $790($2_1 | 0, 4 | 0) | 0;
  $5_1 = $790($2_1 | 0, 3 | 0) | 0;
  $792($2_1 | 0, 1 | 0);
  label$4 : {
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   if (!($251($0_1 | 0, $2_1 | 0, $5_1 | 0) | 0)) {
    break label$4
   }
   $791($2_1 | 0) | 0;
   $6_1 = $791($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   label$5 : {
    if (($6_1 | 0) != (3 | 0)) {
     break label$5
    }
    $792($2_1 | 0, 1 | 0);
   }
   HEAP16[($1_1 + 8 | 0) >> 1] = $791($2_1 | 0) | 0;
   HEAP16[($1_1 + 10 | 0) >> 1] = $791($2_1 | 0) | 0;
   $6_1 = $789($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   label$6 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    label$7 : {
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
     HEAP32[($3_1 + 324 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
     HEAP32[($3_1 + 320 | 0) >> 2] = $4_1;
     $827(18651 | 0, $3_1 + 320 | 0 | 0);
    }
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 304 | 0) >> 2] = ($6_1 | 0) != (0 | 0);
    $827(18701 | 0, $3_1 + 304 | 0 | 0);
   }
   label$8 : {
    if (!$6_1) {
     break label$8
    }
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
   }
   HEAP8[($0_1 + 5 | 0) >> 0] = ($791($2_1 | 0) | 0) + 8 | 0;
   HEAP8[($0_1 + 6 | 0) >> 0] = ($791($2_1 | 0) | 0) + 8 | 0;
   $4_1 = 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $6_1 = ($791($2_1 | 0) | 0) + 4 | 0;
   if ($6_1 >>> 0 > 16 >>> 0) {
    break label$4
   }
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $0_1 = $789($2_1 | 0) | 0;
   label$9 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$9
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$9
    }
    HEAP32[($3_1 + 288 | 0) >> 2] = $5_1;
    $827(18759 | 0, $3_1 + 288 | 0 | 0);
   }
   $0_1 = $0_1 ? 0 : $5_1;
   label$10 : while (1) {
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    if ($0_1 >>> 0 <= $5_1 >>> 0) {
     continue label$10
    }
    break label$10;
   };
   $4_1 = 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $0_1 = $789($2_1 | 0) | 0;
   label$11 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[($3_1 + 272 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
    $827(18819 | 0, $3_1 + 272 | 0 | 0);
   }
   label$12 : {
    label$13 : {
     if (!$0_1) {
      break label$13
     }
     $7_1 = 0;
     $0_1 = $789($2_1 | 0) | 0;
     label$14 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$14
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$14
      }
      HEAP32[($3_1 + 256 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(18879 | 0, $3_1 + 256 | 0 | 0);
     }
     if (!$0_1) {
      break label$13
     }
     label$15 : while (1) {
      $0_1 = 1 << (($7_1 << 1 | 0) + 4 | 0) | 0;
      $0_1 = $0_1 >>> 0 < 64 >>> 0 ? $0_1 : 64;
      $4_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
      $8_1 = ($7_1 | 0) == (3 | 0) ? 3 : 1;
      $5_1 = 0;
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         if ($789($2_1 | 0) | 0) {
          break label$18
         }
         $791($2_1 | 0) | 0;
         break label$17;
        }
        label$19 : {
         if ($7_1 >>> 0 < 2 >>> 0) {
          break label$19
         }
         $791($2_1 | 0) | 0;
        }
        $0_1 = 0;
        label$20 : while (1) {
         $791($2_1 | 0) | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($4_1 | 0)) {
          continue label$20
         }
         break label$20;
        };
       }
       if ($784($2_1 | 0) | 0) {
        break label$12
       }
       $5_1 = $5_1 + $8_1 | 0;
       if ($5_1 >>> 0 < 6 >>> 0) {
        continue label$16
       }
       break label$16;
      };
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != (4 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $4_1 = 0;
    if ($784($2_1 | 0) | 0) {
     break label$4
    }
    $792($2_1 | 0, 1 | 0);
    $792($2_1 | 0, 1 | 0);
    $0_1 = $789($2_1 | 0) | 0;
    label$21 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$21
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$21
     }
     HEAP32[($3_1 + 240 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(18948 | 0, $3_1 + 240 | 0 | 0);
    }
    label$22 : {
     if (!$0_1) {
      break label$22
     }
     $792($2_1 | 0, 4 | 0);
     $792($2_1 | 0, 4 | 0);
     $791($2_1 | 0) | 0;
     $791($2_1 | 0) | 0;
     $792($2_1 | 0, 1 | 0);
    }
    $7_1 = 0;
    $9_1 = $791($2_1 | 0) | 0;
    label$23 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$23
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$23
     }
     HEAP32[($3_1 + 224 | 0) >> 2] = $9_1;
     $827(18999 | 0, $3_1 + 224 | 0 | 0);
    }
    label$24 : {
     if (!$9_1) {
      break label$24
     }
     label$25 : while (1) {
      label$26 : {
       label$27 : {
        if (!$7_1) {
         break label$27
        }
        $0_1 = $789($2_1 | 0) | 0;
        label$28 : {
         if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$28
         }
         if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$28
         }
         HEAP32[($3_1 + 208 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
         $827(19061 | 0, $3_1 + 208 | 0 | 0);
        }
        if (!$0_1) {
         break label$27
        }
        $792($2_1 | 0, 1 | 0);
        $791($2_1 | 0) | 0;
        $4_1 = 0;
        $8_1 = ($3_1 + 336 | 0) + ($7_1 << 2 | 0) | 0;
        HEAP32[$8_1 >> 2] = 0;
        $0_1 = 0;
        $5_1 = HEAP32[($8_1 + -4 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$26
        }
        label$29 : while (1) {
         label$30 : {
          label$31 : {
           if ($789($2_1 | 0) | 0) {
            break label$31
           }
           if (!($789($2_1 | 0) | 0)) {
            break label$30
           }
          }
          $4_1 = $4_1 + 1 | 0;
          HEAP32[$8_1 >> 2] = $4_1;
         }
         if ($784($2_1 | 0) | 0) {
          break label$12
         }
         $0_1 = $0_1 + 1 | 0;
         if ($0_1 >>> 0 >= $5_1 >>> 0) {
          break label$26
         }
         continue label$29;
        };
       }
       $5_1 = $791($2_1 | 0) | 0;
       $8_1 = $791($2_1 | 0) | 0;
       label$32 : {
        if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$32
        }
        label$33 : {
         if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$33
         }
         HEAP32[($3_1 + 192 | 0) >> 2] = $5_1;
         $827(19129 | 0, $3_1 + 192 | 0 | 0);
        }
        if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$32
        }
        if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$32
        }
        HEAP32[($3_1 + 176 | 0) >> 2] = $8_1;
        $827(19181 | 0, $3_1 + 176 | 0 | 0);
       }
       if ($784($2_1 | 0) | 0) {
        break label$12
       }
       $4_1 = 0;
       $0_1 = 0;
       label$34 : {
        if (!$5_1) {
         break label$34
        }
        label$35 : while (1) {
         $791($2_1 | 0) | 0;
         $792($2_1 | 0, 1 | 0);
         if ($784($2_1 | 0) | 0) {
          break label$4
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($5_1 | 0)) {
          continue label$35
         }
         break label$35;
        };
       }
       $4_1 = 0;
       $0_1 = 0;
       label$36 : {
        if (!$8_1) {
         break label$36
        }
        label$37 : while (1) {
         $791($2_1 | 0) | 0;
         $792($2_1 | 0, 1 | 0);
         if ($784($2_1 | 0) | 0) {
          break label$4
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($8_1 | 0)) {
          continue label$37
         }
         break label$37;
        };
       }
       HEAP32[(($3_1 + 336 | 0) + ($7_1 << 2 | 0) | 0) >> 2] = $8_1 + $5_1 | 0;
      }
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != ($9_1 | 0)) {
       continue label$25
      }
      break label$25;
     };
    }
    $0_1 = $789($2_1 | 0) | 0;
    label$38 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$38
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$38
     }
     HEAP32[($3_1 + 160 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(19233 | 0, $3_1 + 160 | 0 | 0);
    }
    label$39 : {
     if (!$0_1) {
      break label$39
     }
     $0_1 = 0;
     $4_1 = $791($2_1 | 0) | 0;
     label$40 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$40
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$40
      }
      HEAP32[($3_1 + 144 | 0) >> 2] = $4_1;
      $827(19299 | 0, $3_1 + 144 | 0 | 0);
     }
     if (!$4_1) {
      break label$39
     }
     label$41 : while (1) {
      $792($2_1 | 0, $6_1 | 0);
      $792($2_1 | 0, 1 | 0);
      if ($784($2_1 | 0) | 0) {
       break label$12
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($4_1 | 0)) {
       continue label$41
      }
      break label$41;
     };
    }
    $4_1 = 0;
    if ($784($2_1 | 0) | 0) {
     break label$4
    }
    $0_1 = $789($2_1 | 0) | 0;
    $4_1 = $789($2_1 | 0) | 0;
    label$42 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$42
     }
     label$43 : {
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$43
      }
      HEAP32[($3_1 + 128 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19360 | 0, $3_1 + 128 | 0 | 0);
     }
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$42
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$42
     }
     HEAP32[($3_1 + 112 | 0) >> 2] = ($4_1 | 0) != (0 | 0);
     $827(19424 | 0, $3_1 + 112 | 0 | 0);
    }
    $0_1 = $789($2_1 | 0) | 0;
    label$44 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$44
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$44
     }
     HEAP32[($3_1 + 96 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(19494 | 0, $3_1 + 96 | 0 | 0);
    }
    label$45 : {
     if (!$0_1) {
      break label$45
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$46 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$46
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$46
      }
      HEAP32[($3_1 + 80 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19556 | 0, $3_1 + 80 | 0 | 0);
     }
     label$47 : {
      if (!$0_1) {
       break label$47
      }
      if (($790($2_1 | 0, 8 | 0) | 0 | 0) != (255 | 0)) {
       break label$47
      }
      $792($2_1 | 0, 16 | 0);
      $792($2_1 | 0, 16 | 0);
     }
     label$48 : {
      if (!($789($2_1 | 0) | 0)) {
       break label$48
      }
      $792($2_1 | 0, 1 | 0);
     }
     label$49 : {
      if (!($789($2_1 | 0) | 0)) {
       break label$49
      }
      $792($2_1 | 0, 3 | 0);
      $792($2_1 | 0, 1 | 0);
      $0_1 = $789($2_1 | 0) | 0;
      label$50 : {
       if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$50
       }
       if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$50
       }
       HEAP32[($3_1 + 64 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
       $827(19621 | 0, $3_1 + 64 | 0 | 0);
      }
      if (!$0_1) {
       break label$49
      }
      $792($2_1 | 0, 8 | 0);
      $792($2_1 | 0, 8 | 0);
      $792($2_1 | 0, 8 | 0);
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$51 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$51
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$51
      }
      HEAP32[($3_1 + 48 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19687 | 0, $3_1 + 48 | 0 | 0);
     }
     label$52 : {
      if (!$0_1) {
       break label$52
      }
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
     }
     $792($2_1 | 0, 1 | 0);
     $792($2_1 | 0, 1 | 0);
     $792($2_1 | 0, 1 | 0);
     $0_1 = $789($2_1 | 0) | 0;
     label$53 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$53
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$53
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19750 | 0, $3_1 + 32 | 0 | 0);
     }
     label$54 : {
      if (!$0_1) {
       break label$54
      }
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$55 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$55
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$55
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19812 | 0, $3_1 + 16 | 0 | 0);
     }
     if (!$0_1) {
      break label$45
     }
     $0_1 = $790($2_1 | 0, 16 | 0) | 0;
     $4_1 = $790($2_1 | 0, 16 | 0) | 0;
     $5_1 = ($790($2_1 | 0, 16 | 0) | 0) << 16 | 0 | ($790($2_1 | 0, 16 | 0) | 0) | 0;
     label$56 : {
      $0_1 = $4_1 | ($0_1 << 16 | 0) | 0;
      if (!$0_1) {
       break label$56
      }
      HEAPF32[($1_1 + 300 | 0) >> 2] = Math_fround(Math_fround($5_1 >>> 0) / Math_fround($0_1 >>> 0));
     }
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$45
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$45
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(19875 | 0, $3_1 | 0);
    }
    $4_1 = ($784($2_1 | 0) | 0) ^ 1 | 0;
    break label$4;
   }
   $4_1 = 0;
  }
  label$57 : {
   $11_1 = $3_1 + 592 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $251($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 < 8 >>> 0) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $2_1;
    $827(19967 | 0, $3_1 | 0);
    break label$3;
   }
   $4_1 = 0;
   $5_1 = $790($1_1 | 0, 2 | 0) | 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   if ($5_1) {
    break label$3
   }
   $4_1 = 0;
   HEAP8[($0_1 + 1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($0_1 + 4 | 0) >> 0] = $790($1_1 | 0, 5 | 0) | 0;
   label$5 : while (1) {
    $792($1_1 | 0, 1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (33 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $792($1_1 | 0, 1 | 0);
   $792($1_1 | 0, 1 | 0);
   $792($1_1 | 0, 1 | 0);
   $790($1_1 | 0, 22 | 0) | 0;
   $4_1 = 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   $790($1_1 | 0, 22 | 0) | 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $790($1_1 | 0, 8 | 0) | 0;
   label$6 : {
    if (!$2_1) {
     break label$6
    }
    $4_1 = 0;
    label$7 : while (1) {
     HEAP8[(($3_1 + 24 | 0) + $4_1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
     HEAP8[(($3_1 + 16 | 0) + $4_1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
    label$8 : {
     if (($2_1 + -1 | 0) >>> 0 >= 7 >>> 0) {
      break label$8
     }
     $0_1 = $2_1;
     label$9 : while (1) {
      $4_1 = 0;
      $5_1 = $790($1_1 | 0, 2 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (8 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    if (!$2_1) {
     break label$6
    }
    $0_1 = 0;
    label$10 : while (1) {
     label$11 : {
      if (!(HEAPU8[(($3_1 + 24 | 0) + $0_1 | 0) >> 0] | 0)) {
       break label$11
      }
      $792($1_1 | 0, 2 | 0);
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 5 | 0);
      $4_1 = 0;
      label$12 : while (1) {
       $792($1_1 | 0, 1 | 0);
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (33 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 1 | 0);
      $4_1 = 0;
      $5_1 = $790($1_1 | 0, 22 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
      $5_1 = $790($1_1 | 0, 22 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
     }
     label$13 : {
      if (!(HEAPU8[(($3_1 + 16 | 0) + $0_1 | 0) >> 0] | 0)) {
       break label$13
      }
      $792($1_1 | 0, 8 | 0);
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($2_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   $4_1 = ($784($1_1 | 0) | 0) ^ 1 | 0;
  }
  label$14 : {
   $7_1 = $3_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
    $5_1 = $4_1 + -1 | 0;
    $6_1 = $5_1 & 255 | 0;
    if ($6_1 >>> 0 >= 9 >>> 0) {
     break label$4
    }
    if (!((279 >>> $6_1 | 0) & 1 | 0)) {
     break label$4
    }
    $6_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 20040 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   $820($3_1 + 24 | 0 | 0, 8 | 0, 18600 | 0, $3_1 + 16 | 0 | 0) | 0;
   $6_1 = $3_1 + 24 | 0;
  }
  $4_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $0_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  HEAP32[$3_1 >> 2] = $6_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 ? 18518 : 18504;
  HEAP32[($3_1 + 4 | 0) >> 2] = ($4_1 >>> 0) / (30 >>> 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((($4_1 >>> 0) / (3 >>> 0) | 0) >>> 0) % (10 >>> 0) | 0;
  $0_1 = $820($1_1 | 0, $2_1 | 0, 18603 | 0, $3_1 | 0) | 0;
  label$5 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $0_1 | 0;
 }
 
 function $253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2$hi = 0, $2_1 = 0, $12$hi = 0, $18_1 = 0, $18$hi = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, 4500 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   label$2 : {
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($2_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    return i64toi32_i32$1 | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = 0 - $1_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$1 = __wasm_i64_udiv($2_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   return i64toi32_i32$1 ^ -1 | 0 | 0;
  }
  $859(20076 | 0, 20082 | 0, 78 | 0);
  abort();
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $255($1_1 | 0, $2_1 + 24 | 0 | 0);
    label$5 : {
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAPU8[($2_1 + 26 | 0) >> 0] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($2_1 + 25 | 0) >> 0] | 0;
     $827(20171 | 0, $2_1 | 0);
    }
    $7_1 = 61951;
    HEAP8[$0_1 >> 0] = $7_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $7_1 >>> 8 | 0;
    $1_1 = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($2_1 + 26 | 0) >> 0] | 0;
    $4_1 = HEAPU8[($2_1 + 25 | 0) >> 0] | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $4_1 << 6 | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 << 2 | 0 | ($3_1 << 6 | 0) | 0 | (($4_1 >>> 2 | 0) & 1 | 0) | 0;
    label$6 : {
     $6_1 = $2_1 + 32 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return;
   }
   $859(20160 | 0, 20082 | 0, 144 | 0);
   abort();
  }
  $859(20167 | 0, 20082 | 0, 145 | 0);
  abort();
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $11_1 = 0, $6_1 = 0, $13$hi = 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $6_1 = $1_1;
  $2_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) + -1 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 3;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $10_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $10_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 1;
  i64toi32_i32$1 = 50462976;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$3 = $10_1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $11_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $11_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  HEAP8[($6_1 + 2 | 0) >> 0] = ($2_1 & 255 | 0) >>> 0 < 5 >>> 0 ? $11_1 : 1;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (5 | 0)) {
     break label$2
    }
    if ($257($1_1 | 0, ($256($2_1 | 0) | 0) >>> 1 | 0 | 0) | 0) {
     break label$1
    }
    HEAP8[$1_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
    return;
   }
   HEAP8[$1_1 >> 0] = $2_1;
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (15 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($0_1 << 2 | 0) + 20272 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     $3_1 = 0;
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : while (1) {
         label$10 : {
          $4_1 = HEAP32[(($3_1 << 2 | 0) + 20272 | 0) >> 2] | 0;
          if (($4_1 | 0) != ($1_1 | 0)) {
           break label$10
          }
          HEAP8[$0_1 >> 0] = $3_1;
          break label$6;
         }
         if ($4_1 >>> 0 < $1_1 >>> 0) {
          break label$8
         }
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != (12 | 0)) {
          continue label$9
         }
         break label$9;
        };
        $4_1 = 11;
        if ($1_1) {
         break label$7
        }
        break label$4;
       }
       label$11 : {
        if (!$3_1) {
         break label$11
        }
        $4_1 = 11;
        if (($3_1 | 0) == (12 | 0)) {
         break label$7
        }
        $4_1 = $3_1 + -1 | 0;
        if (($1_1 - (HEAP32[(($3_1 << 2 | 0) + 20272 | 0) >> 2] | 0) | 0) >>> 0 > ((HEAP32[(($4_1 << 2 | 0) + 20272 | 0) >> 2] | 0) - $1_1 | 0) >>> 0) {
         break label$7
        }
       }
       $4_1 = $3_1;
      }
      if ((((Math_imul(HEAP32[(($4_1 << 2 | 0) + 20272 | 0) >> 2] | 0, 1e3) >>> 0) / ($1_1 >>> 0) | 0) + -995 | 0) >>> 0 > 10 >>> 0) {
       break label$4
      }
      HEAP8[$0_1 >> 0] = $4_1;
     }
     $3_1 = 1;
     break label$3;
    }
    $859(20167 | 0, 20082 | 0, 344 | 0);
    abort();
   }
   $3_1 = 0;
   if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $1_1;
   $827(20320 | 0, $2_1 | 0);
  }
  label$12 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = 252;
    $1_1 = $2_1 + 7 | 0;
    HEAP8[($0_1 + 5 | 0) >> 0] = $1_1 << 5 | 0 | 31 | 0;
    HEAP8[($0_1 + 4 | 0) >> 0] = $1_1 >>> 3 | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $3_1 | (($1_1 >>> 11 | 0) & 3 | 0) | 0;
    return 7 | 0;
   }
   $859(20264 | 0, 20082 | 0, 177 | 0);
   abort();
  }
  $859(20160 | 0, 20082 | 0, 178 | 0);
  abort();
 }
 
 function $259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   $3_1 = 0;
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if ((HEAPU8[($3_1 + 20387 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
       break label$6
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $3_1;
      $3_1 = 1;
      break label$4;
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (8 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
    if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $1_1;
    $827(20395 | 0, $2_1 | 0);
   }
   label$7 : {
    $5_1 = $2_1 + 16 | 0;
    if ($5_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $5_1;
   }
   return $3_1 | 0;
  }
  $859(20167 | 0, 20082 | 0, 390 | 0);
  abort();
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $7_1 = 0, $22_1 = 0, $25_1 = 0, $5_1 = 0, $6_1 = 0, $142_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 96 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 96 | 0) >> 2] = $25_1;
  HEAP32[($2_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[$0_1 >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 2 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$4
    }
    $1_1 = 0;
    if (!($835(61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = 20493;
    $827(20468 | 0, $2_1 | 0);
    break label$3;
   }
   $3_1 = $775($1_1 | 0) | 0;
   HEAP16[($0_1 + 16 | 0) >> 1] = $3_1;
   label$5 : {
    label$6 : {
     label$7 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      label$8 : {
       $1_1 = $3_1 + 18 | 0;
       $4_1 = $771($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
       if (($4_1 | 0) == ($1_1 | 0)) {
        break label$8
       }
       if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 88 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 80 | 0) >> 2] = 20493;
       $827(20513 | 0, $2_1 + 80 | 0 | 0);
       break label$6;
      }
      label$9 : {
       if ($3_1 >>> 0 < 111 >>> 0) {
        break label$9
       }
       if (!($835(61976 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 72 | 0) >> 2] = 128;
       HEAP32[($2_1 + 68 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 64 | 0) >> 2] = 20493;
       $827(20566 | 0, $2_1 + 64 | 0 | 0);
       break label$6;
      }
      if (($1_1 | 0) == ($768($2_1 + 96 | 0 | 0, $0_1 + 24 | 0 | 0, $1_1 | 0) | 0 | 0)) {
       break label$5
      }
      $859(20610 | 0, 20082 | 0, 435 | 0);
      abort();
     }
     if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = 20493;
     $827(20634 | 0, $2_1 + 48 | 0 | 0);
    }
    HEAP16[($0_1 + 16 | 0) >> 1] = 0;
    $768($2_1 + 96 | 0 | 0, $0_1 + 24 | 0 | 0, 16 | 0) | 0;
    $15_1 = $0_1 + 40 | 0;
    $16_1 = 0;
    HEAP8[$15_1 >> 0] = $16_1;
    HEAP8[($15_1 + 1 | 0) >> 0] = $16_1 >>> 8 | 0;
    $1_1 = 18;
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
   $1_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
   $4_1 = HEAPU16[$0_1 >> 1] | 0;
   $5_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
   $6_1 = HEAPU16[($0_1 + 14 | 0) >> 1] | 0;
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($0_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
   $142_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = $142_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 16 | 0) >> 2] = 20493;
   $827(20657 | 0, $2_1 + 16 | 0 | 0);
  }
  label$10 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $74_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[$0_1 >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($1_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $0_1 >>> 24 | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
   $74_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $74_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
   $827(20762 | 0, $2_1 | 0);
  }
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  label$4 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return ($1_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = 255;
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($4_1 | 0) < (1 | 0)) {
       break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + -1 | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $4_1 + 1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$3;
     }
     $4_1 = $764($0_1 | 0) | 0;
     if (($4_1 | 0) == (-1 | 0)) {
      break label$1
     }
    }
    label$5 : {
     $2_1 = $4_1 | ($2_1 << 8 | 0) | 0;
     if (($2_1 & -256 | 0 | 0) == (256 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     continue label$2;
    }
    break label$2;
   };
   return $2_1 | 0;
  }
  return 0 | 0;
 }
 
 function $263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP16[($0_1 + 4 | 0) >> 1] = 1536;
  HEAP8[($0_1 + 6 | 0) >> 0] = 4;
  HEAP16[($0_1 + 16 | 0) >> 1] = 0;
  $1_1 = $1_1 + 10 | 0;
  HEAP8[($0_1 + 15 | 0) >> 0] = $1_1;
  HEAP8[($0_1 + 14 | 0) >> 0] = $1_1 >>> 8 | 0;
  HEAP8[($0_1 + 13 | 0) >> 0] = $1_1 >>> 16 | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $1_1 >>> 24 | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) >= (16 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    HEAP8[($1_1 + (HEAPU8[($2_1 + 20928 | 0) >> 0] | 0) | 0) >> 0] = $772($0_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (16 | 0)) {
     continue label$2
    }
    break label$2;
   };
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 31 | 0 | 0;
  }
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = 0;
  label$3 : while (1) {
   HEAP8[($1_1 + (HEAPU8[($2_1 + 20928 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($3_1 + $2_1 | 0) >> 0] | 0;
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (16 | 0)) {
    continue label$3
   }
   break label$3;
  };
  HEAP32[$0_1 >> 2] = $3_1 + 16 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -16 | 0;
  return 1 | 0;
 }
 
 function $265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) - (HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (16 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $266($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $20_1 = 0, $19_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  $4_1 = HEAPU8[$0_1 >> 0] | 0;
  $5_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $6_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $7_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $8_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
  $9_1 = HEAPU8[($0_1 + 5 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
  $17_1 = HEAPU8[($0_1 + 13 | 0) >> 0] | 0;
  $18_1 = HEAPU8[($0_1 + 14 | 0) >> 0] | 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU8[($0_1 + 15 | 0) >> 0] | 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = $18_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $17_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $16_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $15_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $14_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $13_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $12_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $11_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $9_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $8_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $4_1;
  $820($1_1 | 0, $2_1 | 0, 20944 | 0, $3_1 | 0) | 0;
  label$3 : {
   $20_1 = $3_1 + 64 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $1_1 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) != (65534 | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 < 18 >>> 0) {
    break label$3
   }
   HEAP16[($2_1 + 110 | 0) >> 1] = 1;
   HEAP16[($2_1 + 108 | 0) >> 1] = $4_1 + -18 | 0;
   HEAP32[($2_1 + 104 | 0) >> 2] = $0_1 + 42 | 0;
   $760($2_1 + 88 | 0 | 0, $2_1 + 104 | 0 | 0, 1 | 0);
   HEAP16[$1_1 >> 1] = $775($2_1 + 88 | 0 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($2_1 + 88 | 0 | 0) | 0;
   $3_1 = $1_1 + 8 | 0;
   $264($2_1 + 88 | 0 | 0, $3_1 | 0) | 0;
   label$4 : {
    $0_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$4
    }
    $0_1 = $266($3_1 | 0, $2_1 + 16 | 0 | 0, 64 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU16[$1_1 >> 1] | 0;
     $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $3_1;
     $827(21013 | 0, $2_1 | 0);
    }
    $0_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
   }
   $3_1 = ($0_1 | 0) > (-1 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 112 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 1;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) == (1 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($267($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($265($1_1 + 16 | 0 | 0, 21081 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 1;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) == (8192 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($267($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($265($1_1 + 16 | 0 | 0, 21097 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $4_1 = $775($0_1 | 0) | 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         switch ($2_1 | 0) {
         case 0:
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          if (($4_1 | 0) != (32766 | 0)) {
           break label$6
          }
          break label$5;
         case 3:
          $2_1 = 4;
          label$12 : {
           switch ($4_1 + -32766 | 0 | 0) {
           case 3:
            break label$3;
           case 0:
            break label$5;
           case 1:
           case 2:
            break label$6;
           default:
            break label$12;
           };
          }
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          break label$6;
         case 1:
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          label$13 : {
           if (($4_1 | 0) != (59392 | 0)) {
            break label$13
           }
           $2_1 = 2;
           break label$3;
          }
          if (($4_1 | 0) == (32766 | 0)) {
           break label$5
          }
          break label$6;
         case 4:
          label$14 : {
           if ($4_1 >>> 0 < 64512 >>> 0) {
            break label$14
           }
           $3_1 = $3_1 + 1 | 0;
           break label$6;
          }
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          if (($4_1 | 0) == (32766 | 0)) {
           break label$5
          }
          break label$6;
         case 2:
          break label$7;
         default:
          break label$3;
         };
        }
        label$15 : {
         if (($4_1 & 65520 | 0 | 0) != (2032 | 0)) {
          break label$15
         }
         $1_1 = $1_1 + 1 | 0;
         break label$6;
        }
        if (($4_1 | 0) == (8191 | 0)) {
         break label$4
        }
        if (($4_1 | 0) == (32766 | 0)) {
         break label$5
        }
       }
       $2_1 = 0;
       break label$3;
      }
      $2_1 = 3;
      break label$3;
     }
     $2_1 = 1;
    }
    if (($3_1 | 0) > (1 | 0)) {
     break label$1
    }
    if (($1_1 | 0) < (2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 | 0) > (1 | 0) | ($1_1 | 0) > (1 | 0) | 0 | 0;
 }
 
 function $271($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $83_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    $802($3_1 + 40 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $760($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0, 1 | 0);
    HEAP8[$0_1 >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = (($764($3_1 + 24 | 0 | 0) | 0) & 3 | 0) + 1 | 0;
    $1_1 = 0;
    label$5 : {
     $2_1 = $764($3_1 + 24 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$5
     }
     if (!($272($0_1 + 8 | 0 | 0, $3_1 + 24 | 0 | 0, $2_1 & 31 | 0 | 0) | 0)) {
      break label$5
     }
     $2_1 = $764($3_1 + 24 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$5
     }
     if (!($272($0_1 + 16 | 0 | 0, $3_1 + 24 | 0 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $1_1 = 1;
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $83_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[$3_1 >> 2] = $83_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $827(21123 | 0, $3_1 | 0);
    }
    label$6 : {
     $5_1 = $3_1 + 48 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $1_1 | 0;
   }
   $859(21113 | 0, 20082 | 0, 1196 | 0);
   abort();
  }
  $859(21118 | 0, 20082 | 0, 1197 | 0);
  abort();
 }
 
 function $272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    label$3 : while (1) {
     $0_1 = $777($1_1 | 0) | 0;
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$2
     }
     if (($766($1_1 | 0, $0_1 | 0) | 0 | 0) != ($0_1 | 0)) {
      break label$2
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   return 0 | 0;
  }
  return 1 | 0;
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $4_1 = 0;
      label$5 : while (1) {
       $5_1 = $0_1 + 2 | 0;
       $0_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) | 0;
       if (($4_1 | 0) == ($1_1 | 0)) {
        break label$3
       }
       $0_1 = $5_1 + $0_1 | 0;
       $4_1 = $4_1 + 1 | 0;
       if ($4_1 >>> 0 < $3_1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
     }
     $0_1 = 0;
     $5_1 = 0;
    }
    HEAP32[$2_1 >> 2] = $0_1;
    return $5_1 | 0;
   }
   $859(21172 | 0, 20082 | 0, 1234 | 0);
   abort();
  }
  $859(21182 | 0, 20082 | 0, 1235 | 0);
  abort();
 }
 
 function $274($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $19_1 = 0, $9_1 = 0, $8_1 = 0, $39_1 = 0, $42$hi = 0, $44$hi = 0, $45_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = 0;
  $5_1 = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = $5_1 & 31 | 0;
  HEAP8[$1_1 >> 0] = $5_1 >>> 6 | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = ($5_1 >>> 5 | 0) & 1 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $778($0_1 | 0) | 0;
  $39_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $19_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $19_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $42$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $44$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$1 = $19_1;
  i64toi32_i32$2 = $44$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  $45_1 = i64toi32_i32$1 | $5_1 | 0;
  i64toi32_i32$1 = $39_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $45_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  HEAP8[($1_1 + 16 | 0) >> 0] = $772($0_1 | 0) | 0;
  HEAP16[($1_1 + 18 | 0) >> 1] = ($777($0_1 | 0) | 0) & 4095 | 0;
  HEAP8[($1_1 + 20 | 0) >> 0] = ($772($0_1 | 0) | 0) & 3 | 0;
  HEAP8[($1_1 + 21 | 0) >> 0] = ($772($0_1 | 0) | 0) & 3 | 0;
  HEAP8[($1_1 + 22 | 0) >> 0] = ($772($0_1 | 0) | 0) & 7 | 0 | 8 | 0;
  HEAP8[($1_1 + 23 | 0) >> 0] = ($772($0_1 | 0) | 0) & 7 | 0 | 8 | 0;
  HEAP16[($1_1 + 24 | 0) >> 1] = $777($0_1 | 0) | 0;
  $5_1 = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 26 | 0) >> 0] = $5_1 >>> 6 | 0;
  HEAP8[($1_1 + 29 | 0) >> 0] = ($5_1 & 3 | 0) + 1 | 0;
  HEAP8[($1_1 + 28 | 0) >> 0] = ($5_1 >>> 2 | 0) & 1 | 0;
  HEAP8[($1_1 + 27 | 0) >> 0] = ($5_1 >>> 3 | 0) & 7 | 0;
  $5_1 = $772($0_1 | 0) | 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $4_1 = HEAPU8[($1_1 + 29 | 0) >> 0] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
    $827(21187 | 0, $3_1 + 16 | 0 | 0);
   }
   label$5 : {
    if ($5_1) {
     break label$5
    }
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = 0;
    HEAP32[($1_1 + 32 | 0) >> 2] = 0;
    HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$2;
    $4_1 = 1;
    break label$3;
   }
   $4_1 = 0;
   if (!($275($0_1 | 0, $5_1 | 0, $3_1 + 24 | 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
   $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = $7_1;
   $7_1 = $6_1 + Math_imul($7_1, 12) | 0;
   $6_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2] | 0]($2_1, $7_1) | 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = $6_1;
   if (!$6_1) {
    break label$3
   }
   label$6 : {
    if ($276($0_1 | 0, $5_1 | 0, $1_1 | 0) | 0) {
     break label$6
    }
    FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0);
    break label$3;
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 22 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 23 | 0) >> 0] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[$3_1 >> 2] = $7_1;
   $827(21239 | 0, $3_1 | 0);
  }
  label$7 : {
   $9_1 = $3_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $22_1 = 0, $25_1 = 0, $77_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 16 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $25_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $4_1 = 0;
     label$6 : while (1) {
      if (!($277($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0) | 0)) {
       break label$4
      }
      $5_1 = HEAPU16[($3_1 + 10 | 0) >> 1] | 0;
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $5_1 | 0;
      $6_1 = 0;
      label$7 : {
       if (!$5_1) {
        break label$7
       }
       label$8 : while (1) {
        $0_1 = $777($3_1 + 16 | 0 | 0) | 0;
        if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $0_1 | 0;
        $766($3_1 + 16 | 0 | 0, $0_1 | 0) | 0;
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) != ($5_1 | 0)) {
         continue label$8
        }
        break label$8;
       };
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != ($1_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $0_1 = 0;
    if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $0_1 = 1;
    if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $77_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[$3_1 >> 2] = $77_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $827(21554 | 0, $3_1 | 0);
    break label$3;
   }
   $0_1 = 0;
  }
  label$9 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $0_1 | 0;
 }
 
 function $276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $7_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1) {
       break label$6
      }
      $4_1 = 0;
      break label$5;
     }
     $5_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($2_1 + 32 | 0) >> 2] | 0, 12) | 0;
     $4_1 = 0;
     $6_1 = 0;
     label$7 : while (1) {
      if (!($277($0_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
       break label$4
      }
      label$8 : {
       $7_1 = HEAPU16[($3_1 + 10 | 0) >> 1] | 0;
       if (!$7_1) {
        break label$8
       }
       $8_1 = $4_1 + ($7_1 >>> 0 > 1 >>> 0 ? $7_1 : 1) | 0;
       label$9 : while (1) {
        $7_1 = $777($0_1 | 0) | 0;
        if ($4_1 >>> 0 >= (HEAP32[($2_1 + 32 | 0) >> 2] | 0) >>> 0) {
         break label$4
        }
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        $9_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + Math_imul($4_1, 12) | 0;
        HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
        HEAP16[($9_1 + 10 | 0) >> 1] = 1;
        HEAP16[($9_1 + 8 | 0) >> 1] = $7_1;
        $768($0_1 | 0, $5_1 | 0, $7_1 | 0) | 0;
        $5_1 = $5_1 + $7_1 | 0;
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != ($8_1 | 0)) {
         continue label$9
        }
        break label$9;
       };
       $4_1 = $8_1;
      }
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($1_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $4_1 = ($4_1 | 0) == (HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $4_1 = 0;
  }
  label$10 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$1_1 >> 0] = ($772($0_1 | 0) | 0) & 63 | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $2_1);
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
 }
 
 function $279($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = -1;
   label$2 : while (1) {
    $5_1 = $764($0_1 | 0) | 0;
    if (($5_1 | 0) == (-1 | 0)) {
     break label$1
    }
    label$3 : {
     $4_1 = ($5_1 | ($4_1 << 8 | 0) | 0) & 16777215 | 0;
     if (($4_1 | 0) == (3 | 0)) {
      break label$3
     }
     HEAP8[($1_1 + $3_1 | 0) >> 0] = $5_1;
     $3_1 = $3_1 + 1 | 0;
    }
    if ($3_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $862(20082 | 0, $0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $27_1 = 0, $30_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $13_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 64 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $30_1;
  HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $783($2_1 + 48 | 0 | 0, $2_1 + 64 | 0 | 0);
  $3_1 = $789($2_1 + 48 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$4
    }
    $280(1753 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$5 : {
    if ($3_1) {
     break label$5
    }
    $280(1755 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   HEAP8[$1_1 >> 0] = $790($2_1 + 48 | 0 | 0, 7 | 0) | 0;
   label$6 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$6
    }
    $280(1758 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$7 : {
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (1 | 0)) {
     break label$7
    }
    $280(1759 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 3 | 0) | 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 5 | 0) | 0;
   $3_1 = 0;
   HEAP8[($1_1 + 3 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 4 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 5 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 6 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 7 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 8 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 9 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 2 | 0) | 0;
   $4_1 = $790($2_1 + 48 | 0 | 0, 3 | 0) | 0;
   label$8 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$8
    }
    $280(1772 | 0, 10 | 0);
    break label$3;
   }
   label$9 : {
    if (!$4_1) {
     break label$9
    }
    $280(1773 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   label$10 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$10
    }
    $280(1776 | 0, 10 | 0);
    break label$3;
   }
   HEAP8[($1_1 + 11 | 0) >> 0] = 0;
   label$11 : {
    label$12 : {
     if (!(HEAPU8[($1_1 + 10 | 0) >> 0] | 0)) {
      break label$12
     }
     HEAP8[($1_1 + 11 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 4 | 0) | 0;
     break label$11;
    }
    $792($2_1 + 48 | 0 | 0, 4 | 0);
   }
   label$13 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$13
    }
    $280(1784 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   $766($0_1 | 0, $785($2_1 + 48 | 0 | 0) | 0 | 0) | 0;
   $3_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   $7_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
   $8_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
   $3_1 = 1;
   HEAP32[($2_1 + 40 | 0) >> 2] = $12_1 + 1 | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $11_1 ? 21515 : 21431;
   HEAP32[($2_1 + 28 | 0) >> 2] = $10_1 ? 21493 : 21431;
   HEAP32[($2_1 + 24 | 0) >> 2] = $9_1 ? 21471 : 21431;
   HEAP32[($2_1 + 20 | 0) >> 2] = $8_1 ? 21459 : 21431;
   HEAP32[($2_1 + 16 | 0) >> 2] = $7_1 ? 21447 : 21431;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$2_1 >> 2] = $5_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $4_1 ? 21432 : 21431;
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 ? 21419 : 21431;
   $827(21305 | 0, $2_1 | 0);
  }
  label$14 : {
   $14_1 = $2_1 + 80 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $3_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 237 | 0);
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 219 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 219 | 0) >> 0] = 0;
   $345($0_1 + 56 | 0 | 0);
  }
  label$4 : {
   if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
    break label$4
   }
   HEAP8[($0_1 + 217 | 0) >> 0] = 0;
   $347($0_1 + 8 | 0 | 0);
  }
  label$5 : {
   if (!(HEAPU8[($0_1 + 218 | 0) >> 0] | 0)) {
    break label$5
   }
   HEAP8[($0_1 + 218 | 0) >> 0] = 0;
   $343($0_1 + 36 | 0 | 0);
  }
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $845($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0);
  $284($0_1 | 0);
  $303($2_1 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 85;
  HEAP32[($2_1 + 4 | 0) >> 2] = 86;
  HEAP32[$2_1 >> 2] = $0_1;
  $1_1 = $302($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   $294($1_1 | 0, $0_1 + 320 | 0 | 0, 440786851 | 0, 87 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 336 | 0 | 0, 290298740 | 0, 88 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 352 | 0 | 0, 374648427 | 0, 89 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 368 | 0 | 0, 357149030 | 0, 90 | 0);
   $1_1 = 0;
   HEAP16[($0_1 + 384 | 0) >> 1] = 0;
  }
  label$5 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  HEAP8[($0_1 + 302 | 0) >> 0] = 0;
  HEAP16[($0_1 + 300 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 0;
  HEAP32[($0_1 + 292 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = 0;
  HEAP32[($0_1 + 220 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 380 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 364 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 348 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 332 | 0) >> 2] = $0_1;
  i64toi32_i32$1 = $0_1 + 248 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67($0_1 + 224 | 0 | 0);
  $67($0_1 + 256 | 0 | 0);
  $67($0_1 + 272 | 0 | 0);
 }
 
 function $285($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $827(22103 | 0, $3_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 81 | 0);
  }
  label$6 : {
   if ((HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$6
   }
   HEAP32[($0_1 + 296 | 0) >> 2] = 0;
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(22149 | 0, $3_1 | 0);
  }
  $4_1 = 0;
  label$7 : {
   if (($1_1 | 0) != (408125543 | 0)) {
    break label$7
   }
   $4_1 = 1;
   HEAP8[($0_1 + 302 | 0) >> 0] = 1;
  }
  label$8 : {
   $6_1 = $3_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $286($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $85_1 = 0, $106_1 = 0, $112_1 = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $3$hi;
   HEAP32[($4_1 + 144 | 0) >> 2] = $3_1;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($4_1 + 140 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 136 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 132 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 128 | 0) >> 2] = 22020;
   $827(21990 | 0, $4_1 + 128 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 40 | 0);
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($1_1 | 0) > (408125542 | 0)) {
         break label$11
        }
        if (($1_1 | 0) == (236 | 0)) {
         break label$9
        }
        if (($1_1 | 0) == (272869232 | 0)) {
         break label$10
        }
        if (($1_1 | 0) != (290298740 | 0)) {
         break label$6
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 252 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$6
        }
        $1_1 = $0_1 + 240 | 0;
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$7
        }
        i64toi32_i32$2 = $3$hi;
        HEAP32[($4_1 + 112 | 0) >> 2] = $3_1;
        i64toi32_i32$2 = $2$hi;
        HEAP32[($4_1 + 108 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 104 | 0) >> 2] = 22088;
        HEAP32[($4_1 + 100 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 96 | 0) >> 2] = 22020;
        $827(22051 | 0, $4_1 + 96 | 0 | 0);
        break label$7;
       }
       if (($1_1 | 0) == (408125543 | 0)) {
        break label$8
       }
       if (($1_1 | 0) == (524531317 | 0)) {
        break label$9
       }
       if (($1_1 | 0) != (423732329 | 0)) {
        break label$6
       }
       label$12 : {
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$2 = $3$hi;
        HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
        i64toi32_i32$2 = $2$hi;
        HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = 21942;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 22020;
        $827(22051 | 0, $4_1 | 0);
       }
       $85_1 = $0_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$0 = $2_1;
       i64toi32_i32$4 = $3_1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$3 = $85_1;
       HEAP32[(i64toi32_i32$3 + 288 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$3 + 292 | 0) >> 2] = i64toi32_i32$5;
       $1_1 = $0_1 + 256 | 0;
       break label$7;
      }
      label$13 : {
       if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$5 = $3$hi;
       HEAP32[($4_1 + 48 | 0) >> 2] = $3_1;
       i64toi32_i32$5 = $2$hi;
       HEAP32[($4_1 + 44 | 0) >> 2] = $2_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = 21953;
       HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
       HEAP32[($4_1 + 32 | 0) >> 2] = 22020;
       $827(22051 | 0, $4_1 + 32 | 0 | 0);
      }
      $106_1 = $0_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + $2$hi | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = $106_1;
      HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] = i64toi32_i32$4;
      $1_1 = $0_1 + 272 | 0;
      break label$7;
     }
     $112_1 = $0_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = $3$hi + $2$hi | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$5 = $112_1;
     HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] = i64toi32_i32$3;
     HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] = i64toi32_i32$1;
     break label$6;
    }
    label$14 : {
     if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$14
     }
     if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$14
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $3$hi;
     HEAP32[($4_1 + 80 | 0) >> 2] = $3_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $2$hi;
     HEAP32[($4_1 + 76 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 72 | 0) >> 2] = 22080;
     HEAP32[($4_1 + 68 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 64 | 0) >> 2] = 22020;
     $827(22051 | 0, $4_1 + 64 | 0 | 0);
    }
    $1_1 = $0_1 + 224 | 0;
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = $2$hi;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $2_1;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $3$hi;
   HEAP32[i64toi32_i32$5 >> 2] = $3_1;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = $3$hi;
  }
  label$15 : {
   $6_1 = $4_1 + 160 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return 0 | 0;
 }
 
 function $287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $88_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 72 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = 22234;
   $827(22210 | 0, $3_1 + 64 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 101 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (!(HEAPU8[($4_1 + 216 | 0) >> 0] | 0)) {
      break label$10
     }
     label$11 : {
      if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      HEAP32[($3_1 + 52 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 48 | 0) >> 2] = 22234;
      $827(22257 | 0, $3_1 + 48 | 0 | 0);
     }
     $0_1 = 1;
     HEAP8[($4_1 + 301 | 0) >> 0] = 1;
     if ($2_1) {
      break label$9
     }
     break label$8;
    }
    label$12 : {
     if ($2_1) {
      break label$12
     }
     $0_1 = 0;
     break label$8;
    }
    $762($3_1 + 96 | 0 | 0, $2_1 | 0);
    label$13 : {
     label$14 : {
      if (!($339($3_1 + 96 | 0 | 0, $756($2_1 | 0) | 0 | 0, $3_1 + 112 | 0 | 0) | 0)) {
       break label$14
      }
      if (!($341($3_1 + 112 | 0 | 0) | 0)) {
       break label$13
      }
      $0_1 = ($3_1 + 112 | 0) + 16 | 0;
      $823($4_1 + 303 | 0 | 0, $0_1 | 0, 16 | 0) | 0;
      HEAP8[($4_1 + 216 | 0) >> 0] = 1;
      if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$13
      }
      if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$13
      }
      i64toi32_i32$0 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
      $88_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $88_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[$3_1 >> 2] = 22234;
      HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
      $827(22305 | 0, $3_1 | 0);
      break label$13;
     }
     label$15 : {
      if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      HEAP32[($3_1 + 40 | 0) >> 2] = 22398;
      HEAP32[($3_1 + 36 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = 22234;
      $827(22345 | 0, $3_1 + 32 | 0 | 0);
     }
     HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    }
    $0_1 = 0;
   }
   $735($2_1 | 0);
  }
  label$16 : {
   $7_1 = $3_1 + 160 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$3_1 >> 2] = 22403;
   $827(22210 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 140 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   $762($3_1 + 32 | 0 | 0, $2_1 | 0);
   label$9 : {
    if (HEAPU8[($4_1 + 218 | 0) >> 0] | 0) {
     break label$9
    }
    $1_1 = $4_1 + 36 | 0;
    $0_1 = $342($3_1 + 32 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 218 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    $343($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$10 : {
   $7_1 = $3_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $289($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $5_1 = 0;
     break label$4;
    }
    $5_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = 22430;
   $827(22210 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 163 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   label$9 : {
    if (HEAPU8[($4_1 + 217 | 0) >> 0] | 0) {
     break label$9
    }
    $762($3_1 + 48 | 0 | 0, $2_1 | 0);
    $1_1 = $4_1 + 8 | 0;
    $0_1 = $346($3_1 + 48 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 217 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    label$10 : {
     if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 21915;
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = 22430;
     $827(22345 | 0, $3_1 | 0);
    }
    HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    $347($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $290($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $5_1 = 0;
     break label$4;
    }
    $5_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = 22455;
   $827(22210 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 188 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   label$9 : {
    if (HEAPU8[($4_1 + 219 | 0) >> 0] | 0) {
     break label$9
    }
    $762($3_1 + 48 | 0 | 0, $2_1 | 0);
    $1_1 = $4_1 + 56 | 0;
    $0_1 = $344($3_1 + 48 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 219 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    label$10 : {
     if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 22537;
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = 22455;
     $827(22486 | 0, $3_1 | 0);
    }
    HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    $345($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 283 | 0);
  }
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 320 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 368 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 352 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 336 | 0 | 0);
  $306(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0, $14$hi = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, $4_1 = 0, $113$hi = 0, $9_1 = 0, $202_1 = 0, $204_1 = 0, $204$hi = 0, $206_1 = 0, $206$hi = 0, $226_1 = 0, $226$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $231$hi = 0, $246_1 = 0, $246$hi = 0;
  label$1 : {
   $3_1 = global$0 - 192 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $284($0_1 | 0);
  $4_1 = $3_1 + 128 | 0;
  i64toi32_i32$0 = 0;
  $13_1 = 0;
  $13$hi = i64toi32_i32$0;
  $5_1 = 0;
  $6_1 = 1;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 156 | 0) >> 2] = 4096;
      i64toi32_i32$0 = $13$hi;
      HEAP32[($3_1 + 152 | 0) >> 2] = $13_1;
      HEAP32[($3_1 + 148 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 144 | 0) >> 2] = 21740;
      $827(21719 | 0, $3_1 + 144 | 0 | 0);
     }
     label$7 : {
      i64toi32_i32$0 = $13$hi;
      $7_1 = $50($1_1 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 4096 | 0, $3_1 + 188 | 0 | 0) | 0;
      if (!$7_1) {
       break label$7
      }
      $8_1 = $756($7_1 | 0) | 0;
      label$8 : {
       if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[$4_1 >> 2] = $7_1;
       HEAP32[($3_1 + 124 | 0) >> 2] = $8_1;
       i64toi32_i32$0 = $13$hi;
       HEAP32[($3_1 + 120 | 0) >> 2] = $13_1;
       HEAP32[($3_1 + 116 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 112 | 0) >> 2] = 21740;
       $827(21764 | 0, $3_1 + 112 | 0 | 0);
      }
      label$9 : {
       if ($8_1) {
        break label$9
       }
       $735($7_1 | 0);
       break label$7;
      }
      $797($2_1 | 0, $7_1 | 0);
      $7_1 = $307(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
      label$10 : {
       if (!($6_1 & 1 | 0)) {
        break label$10
       }
       if (HEAPU8[($0_1 + 216 | 0) >> 0] | 0) {
        break label$10
       }
       if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
       HEAP32[$3_1 >> 2] = 21827;
       $827(21789 | 0, $3_1 | 0);
       break label$4;
      }
      label$11 : {
       if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
        break label$11
       }
       if (!(HEAPU8[($0_1 + 219 | 0) >> 0] | 0)) {
        break label$11
       }
       if (($5_1 ^ 1 | 0) & 1 | 0) {
        break label$11
       }
       label$12 : {
        if (!(HEAPU8[($0_1 + 384 | 0) >> 0] | 0)) {
         break label$12
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 264 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
        if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
         break label$11
        }
       }
       if (!(HEAPU8[($0_1 + 385 | 0) >> 0] | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$1 = HEAP32[($0_1 + 280 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 284 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$7
       }
      }
      if (HEAPU8[($0_1 + 302 | 0) >> 0] | 0) {
       break label$4
      }
      label$13 : {
       if ($7_1) {
        break label$13
       }
       if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = 21827;
       $827(21855 | 0, $3_1 + 16 | 0 | 0);
       break label$4;
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = 0;
      $113$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $113$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $13_1 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$5;
      label$14 : {
       if (HEAP32[($0_1 + 296 | 0) >> 2] | 0) {
        break label$14
       }
       label$15 : {
        label$16 : {
         if (HEAPU8[($0_1 + 218 | 0) >> 0] | 0) {
          break label$16
         }
         $7_1 = 0;
         break label$15;
        }
        label$17 : {
         label$18 : {
          $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          if ($6_1) {
           break label$18
          }
          $7_1 = 0;
          $8_1 = 1;
          break label$17;
         }
         $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         $7_1 = 0;
         label$19 : while (1) {
          label$20 : {
           $8_1 = $9_1 + Math_imul($7_1, 24) | 0;
           if (!(HEAPU8[($8_1 + 17 | 0) >> 0] | 0)) {
            break label$20
           }
           if (!(HEAPU8[($8_1 + 16 | 0) >> 0] | 0)) {
            break label$20
           }
           label$21 : {
            label$22 : {
             label$23 : {
              $10_1 = HEAP32[$8_1 >> 2] | 0;
              if (($10_1 | 0) > (374648426 | 0)) {
               break label$23
              }
              if (($10_1 | 0) == (272869232 | 0)) {
               break label$22
              }
              if (($10_1 | 0) != (357149030 | 0)) {
               break label$20
              }
              if (HEAPU8[($0_1 + 221 | 0) >> 0] | 0) {
               break label$20
              }
              HEAP8[($0_1 + 221 | 0) >> 0] = 1;
              if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$21
              }
              HEAP32[($3_1 + 72 | 0) >> 2] = 21922;
              HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 64 | 0) >> 2] = 21827;
              $827(21892 | 0, $3_1 + 64 | 0 | 0);
              break label$21;
             }
             label$24 : {
              if (($10_1 | 0) == (423732329 | 0)) {
               break label$24
              }
              if (($10_1 | 0) != (374648427 | 0)) {
               break label$20
              }
              if (HEAPU8[($0_1 + 220 | 0) >> 0] | 0) {
               break label$20
              }
              HEAP8[($0_1 + 220 | 0) >> 0] = 1;
              if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$21
              }
              HEAP32[($3_1 + 56 | 0) >> 2] = 21915;
              HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 48 | 0) >> 2] = 21827;
              $827(21892 | 0, $3_1 + 48 | 0 | 0);
              break label$21;
             }
             if (HEAPU8[($0_1 + 222 | 0) >> 0] | 0) {
              break label$20
             }
             HEAP8[($0_1 + 222 | 0) >> 0] = 1;
             if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$21
             }
             if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$21
             }
             HEAP32[($3_1 + 88 | 0) >> 2] = 21942;
             HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
             HEAP32[($3_1 + 80 | 0) >> 2] = 21827;
             $827(21892 | 0, $3_1 + 80 | 0 | 0);
             break label$21;
            }
            if (HEAPU8[($0_1 + 223 | 0) >> 0] | 0) {
             break label$20
            }
            HEAP8[($0_1 + 223 | 0) >> 0] = 1;
            if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$21
            }
            if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$21
            }
            HEAP32[($3_1 + 104 | 0) >> 2] = 21953;
            HEAP32[($3_1 + 100 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 96 | 0) >> 2] = 21827;
            $827(21892 | 0, $3_1 + 96 | 0 | 0);
           }
           HEAP32[($0_1 + 296 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
           $202_1 = $0_1;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$5 = HEAP32[($0_1 + 224 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
           $204_1 = i64toi32_i32$5;
           $204$hi = i64toi32_i32$3;
           i64toi32_i32$2 = $8_1;
           i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $206_1 = i64toi32_i32$3;
           $206$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $204$hi;
           i64toi32_i32$2 = $204_1;
           i64toi32_i32$3 = $206$hi;
           i64toi32_i32$1 = $206_1;
           i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           i64toi32_i32$2 = $202_1;
           HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] = i64toi32_i32$4;
           $7_1 = 1;
           $8_1 = 0;
           break label$17;
          }
          $8_1 = 1;
          $7_1 = $7_1 + 1 | 0;
          if ($7_1 >>> 0 < $6_1 >>> 0) {
           continue label$19
          }
          break label$19;
         };
         $7_1 = 0;
        }
        $5_1 = $5_1 | $8_1 | 0;
       }
       i64toi32_i32$5 = $0_1;
       i64toi32_i32$4 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$4;
       $14$hi = i64toi32_i32$2;
       if (!(i64toi32_i32$4 | i64toi32_i32$2 | 0)) {
        break label$14
       }
       i64toi32_i32$4 = $0_1;
       i64toi32_i32$2 = 0;
       HEAP32[($0_1 + 288 | 0) >> 2] = 0;
       HEAP32[($0_1 + 292 | 0) >> 2] = i64toi32_i32$2;
       $296(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 160 | 0 | 0);
       label$25 : {
        if ($7_1) {
         break label$25
        }
        i64toi32_i32$2 = $14$hi;
        $226_1 = $14_1;
        $226$hi = i64toi32_i32$2;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
        $228_1 = i64toi32_i32$2;
        $228$hi = i64toi32_i32$4;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$4 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
        i64toi32_i32$2 = 0;
        $230_1 = i64toi32_i32$4;
        $230$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $228$hi;
        i64toi32_i32$5 = $228_1;
        i64toi32_i32$4 = $230$hi;
        i64toi32_i32$1 = $230_1;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $231$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $226$hi;
        i64toi32_i32$2 = $226_1;
        i64toi32_i32$5 = $231$hi;
        i64toi32_i32$1 = i64toi32_i32$3;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
         break label$14
        }
       }
       $796($2_1 | 0);
       label$26 : {
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$26
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$26
        }
        HEAP32[($3_1 + 32 | 0) >> 2] = 21827;
        HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
        i64toi32_i32$2 = $14$hi;
        HEAP32[($3_1 + 40 | 0) >> 2] = $14_1;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
        $246_1 = i64toi32_i32$2;
        $246$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$1 = $14_1;
        i64toi32_i32$2 = $246$hi;
        i64toi32_i32$5 = $246_1;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$4 - (HEAP32[($3_1 + 168 | 0) >> 2] | 0) | 0;
        $827(21962 | 0, $3_1 + 32 | 0 | 0);
       }
       i64toi32_i32$3 = $14$hi;
       $299(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $14_1 | 0, i64toi32_i32$3 | 0) | 0;
       $13_1 = $14_1;
       $13$hi = i64toi32_i32$3;
      }
      $6_1 = 0;
      continue label$5;
     }
     break label$5;
    };
    if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
     break label$4
    }
    $7_1 = (((HEAPU8[($0_1 + 219 | 0) >> 0] | 0) << 24 | 0) + -16777216 | 0) >> 24 | 0;
    break label$3;
   }
   $7_1 = -1;
  }
  $298(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$27 : {
   $12_1 = $3_1 + 192 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $7_1 | 0;
 }
 
 function $293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0;
  $822($1_1 | 0, 0 | 0, 16 | 0) | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = 0;
  HEAP16[$1_1 >> 1] = 256;
  label$1 : {
   if (!(HEAPU8[($0_1 + 276 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP16[$1_1 >> 1] = 1;
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!(HEAPU8[($0_1 + 38 | 0) >> 0] | 0)) {
     break label$2
    }
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 37 | 0) >> 0] | 0)) {
     break label$3
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 39 | 0) >> 0] | 0)) {
     break label$4
    }
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 2 | 0) >> 0] = 1;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   if (!(HEAPU8[($0_1 + 13 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = ($2_1 | 0) == (3 | 0);
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
 }
 
 function $294($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 107 | 0);
  }
  $4_1 = $0_1 + 12 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     $6_1 = 0;
     $7_1 = $5_1;
     label$6 : {
      label$7 : {
       label$8 : while (1) {
        $0_1 = $7_1;
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$9 : {
         if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
          break label$9
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         if ($6_1) {
          break label$7
         }
         break label$4;
        }
        $6_1 = $0_1;
        $7_1 = HEAP32[$0_1 >> 2] | 0;
        if ($7_1) {
         continue label$8
        }
        break label$8;
       };
       HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
       $6_1 = $0_1;
      }
      $5_1 = HEAP32[$6_1 >> 2] | 0;
      break label$3;
     }
     $859(22660 | 0, 22582 | 0, 111 | 0);
     abort();
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   }
   $6_1 = $4_1;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = $1_1;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 131 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(22675 | 0, 22582 | 0, 132 | 0);
  abort();
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 323 | 0);
  }
  i64toi32_i32$2 = $0_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = 0;
  $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  label$3 : {
   $3_1 = $297($0_1 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  label$4 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 3 >>> 0) {
    break label$4
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 23188 | 0) >> 2] | 0;
  }
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 24) + ($0_1 + 48 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 356 | 0);
  }
  $822($0_1 + 16 | 0 | 0, 0 | 0, 32 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
 }
 
 function $299($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $8$hi = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $10$hi = 0, i64toi32_i32$6 = 0, $10_1 = 0, $9$hi = 0, $9_1 = 0, $4_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $44_1 = 0, $45_1 = 0, $7_1 = 0, $6_1 = 0, $27_1 = 0, $27$hi = 0, $31_1 = 0, $31$hi = 0, $32$hi = 0, $43_1 = 0, $51_1 = 0, $51$hi = 0, $63_1 = 0, $122_1 = 0, $125_1 = 0, $125$hi = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 371 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        i64toi32_i32$2 = $0_1 + 24 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $27_1 = i64toi32_i32$0;
        $27$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $31_1 = i64toi32_i32$0;
        $31$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $27$hi;
        i64toi32_i32$2 = $27_1;
        i64toi32_i32$0 = $31$hi;
        i64toi32_i32$3 = $31_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $32$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$5 = $32$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$3 = $1_1;
        if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
         break label$10
        }
        if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$9
        }
        if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        HEAP32[$2_1 >> 2] = $0_1;
        i64toi32_i32$1 = $1$hi;
        HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
        $43_1 = $2_1;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = 0;
         $34_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        } else {
         i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
         $34_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
        }
        HEAP32[($43_1 + 4 | 0) >> 2] = $34_1;
        $827(22718 | 0, $2_1 | 0);
        break label$9;
       }
       $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
       $51_1 = i64toi32_i32$5;
       $51$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$5 = $51$hi;
       i64toi32_i32$2 = $51_1;
       i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
       $8_1 = i64toi32_i32$0;
       $8$hi = i64toi32_i32$4;
       label$11 : {
        if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$4 = $8$hi;
        HEAP32[($2_1 + 28 | 0) >> 2] = $8_1;
        HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
        i64toi32_i32$4 = $1$hi;
        HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
        $63_1 = $2_1;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $35_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
         $35_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
        }
        HEAP32[($63_1 + 20 | 0) >> 2] = $35_1;
        $827(22754 | 0, $2_1 + 16 | 0 | 0);
       }
       label$12 : {
        label$13 : {
         label$14 : {
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$4 = $8_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = 1;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
           $36_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
             $37_1 = 0
            } else {
             $37_1 = 1
            }
            $38_1 = $37_1;
           } else {
            $38_1 = 0
           }
           $36_1 = $38_1;
          }
          if ($36_1) {
           break label$14
          }
          $3_1 = $297($0_1 | 0) | 0;
          if (!$3_1) {
           break label$13
          }
          label$15 : while (1) {
           label$16 : {
            i64toi32_i32$4 = $8$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
            $9_1 = i64toi32_i32$4;
            $9$hi = i64toi32_i32$1;
            i64toi32_i32$2 = i64toi32_i32$4;
            i64toi32_i32$4 = 0;
            i64toi32_i32$3 = -1;
            i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
            $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
            $10$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $8$hi;
            i64toi32_i32$1 = $8_1;
            i64toi32_i32$2 = $10$hi;
            i64toi32_i32$3 = $10_1;
            if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$16
            }
            i64toi32_i32$1 = $8$hi;
            $300($0_1 | 0, $8_1 | 0) | 0;
            break label$13;
           }
           i64toi32_i32$1 = $9$hi;
           $3_1 = $9_1;
           if ($300($0_1 | 0, $3_1 | 0) | 0) {
            break label$8
           }
           $301($0_1 | 0, $3_1 | 0);
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$3 = $8_1;
           i64toi32_i32$4 = $10$hi;
           i64toi32_i32$2 = $10_1;
           i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
           i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
           i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
           i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
           $8_1 = i64toi32_i32$5;
           $8$hi = i64toi32_i32$0;
           $3_1 = $297($0_1 | 0) | 0;
           if ($3_1) {
            continue label$15
           }
           break label$15;
          };
          i64toi32_i32$0 = $8$hi;
          i64toi32_i32$1 = $8_1;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = -1;
          if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
           $39_1 = 1
          } else {
           if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
             $40_1 = 0
            } else {
             $40_1 = 1
            }
            $41_1 = $40_1;
           } else {
            $41_1 = 0
           }
           $39_1 = $41_1;
          }
          if ($39_1) {
           break label$13
          }
          $859(22797 | 0, 22582 | 0, 400 | 0);
          abort();
         }
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$2 = $8_1;
         i64toi32_i32$0 = -1;
         i64toi32_i32$3 = -1;
         if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
          $42_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $44_1 = 0
           } else {
            $44_1 = 1
           }
           $45_1 = $44_1;
          } else {
           $45_1 = 0
          }
          $42_1 = $45_1;
         }
         if ($42_1) {
          break label$12
         }
         $3_1 = $297($0_1 | 0) | 0;
         if (!$3_1) {
          break label$13
         }
         i64toi32_i32$2 = $8$hi;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$0 = $8_1;
         i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
         i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
         i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
         $8_1 = i64toi32_i32$4;
         $8$hi = i64toi32_i32$5;
         label$17 : while (1) {
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $9_1 = i64toi32_i32$3;
          $9$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$0 = $9_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
           break label$7
          }
          label$18 : {
           i64toi32_i32$2 = $8$hi;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$2 = $9$hi;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$0 = $10_1;
           i64toi32_i32$5 = $9$hi;
           i64toi32_i32$3 = $9_1;
           i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
           i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
           i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
           i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
           i64toi32_i32$2 = i64toi32_i32$1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
           $10_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           $10$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$4 = $8_1;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$3 = $10_1;
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$18
           }
           $122_1 = $3_1;
           i64toi32_i32$4 = $9$hi;
           i64toi32_i32$4 = $8$hi;
           i64toi32_i32$3 = $8_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$2 = -1;
           i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
           $125_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
           $125$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $9$hi;
           i64toi32_i32$4 = $9_1;
           i64toi32_i32$3 = $125$hi;
           i64toi32_i32$2 = $125_1;
           i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           i64toi32_i32$4 = $122_1;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$5;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
           break label$13;
          }
          $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          if (!$3_1) {
           break label$6
          }
          if ($3_1 >>> 0 >= 17 >>> 0) {
           break label$5
          }
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$0 = $8_1;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
          i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          $8_1 = i64toi32_i32$3;
          $8$hi = i64toi32_i32$5;
          label$19 : {
           label$20 : while (1) {
            label$21 : {
             $4_1 = $3_1 + -1 | 0;
             if ($4_1) {
              break label$21
             }
             $4_1 = 0;
             break label$19;
            }
            $5_1 = Math_imul($3_1, 24);
            $3_1 = $4_1;
            i64toi32_i32$1 = ($5_1 + $0_1 | 0) + 16 | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            if (!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
             continue label$20
            }
            break label$20;
           };
          }
          HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
          $3_1 = $297($0_1 | 0) | 0;
          if ($3_1) {
           continue label$17
          }
          break label$17;
         };
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       }
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$5 = $0_1;
       HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $1_1;
       HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$0;
      }
      label$22 : {
       $7_1 = $2_1 + 32 | 0;
       if ($7_1 >>> 0 < global$2 >>> 0) {
        fimport$11()
       }
       global$0 = $7_1;
      }
      return 0 | 0;
     }
     $859(22789 | 0, 22582 | 0, 397 | 0);
     abort();
    }
    $859(22805 | 0, 22582 | 0, 408 | 0);
    abort();
   }
   $859(22834 | 0, 22582 | 0, 417 | 0);
   abort();
  }
  $859(22857 | 0, 22582 | 0, 418 | 0);
  abort();
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $3$hi = 0, i64toi32_i32$5 = 0, $2_1 = 0, $4$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 >= 17 >>> 0) {
      break label$2
     }
     $0_1 = ($0_1 + Math_imul($2_1 + -1 | 0, 24) | 0) + 64 | 0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $3_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $0_1;
     HEAP32[i64toi32_i32$3 >> 2] = $3_1;
     HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
     return $3_1 | 0;
    }
    $859(23063 | 0, 22582 | 0, 249 | 0);
    abort();
   }
   $859(22857 | 0, 22582 | 0, 250 | 0);
   abort();
  }
  $859(23084 | 0, 22582 | 0, 252 | 0);
  abort();
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $7$hi = 0, $8$hi = 0, $7_1 = 0, $8_1 = 0, $6$hi = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $26_1 = 0, $33_1 = 0, $35$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 > 16 >>> 0) {
      break label$2
     }
     i64toi32_i32$0 = 0;
     $6_1 = $1_1;
     $6$hi = i64toi32_i32$0;
     $3_1 = $0_1 + 48 | 0;
     $1_1 = $0_1 + 56 | 0;
     label$4 : {
      label$5 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
       $26_1 = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
       $4_1 = Math_imul($2_1, 24);
       $33_1 = HEAP32[(($3_1 + $4_1 | 0) + 28 | 0) >> 2] | 0;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $35$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$1 = $35$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 448 | 0) >> 2] | 0]($26_1, $33_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($2_1 | 0) == (1 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$4
       }
       $5_1 = (Math_imul($2_1, 24) + $1_1 | 0) + -16 | 0;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$5;
       $7$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $1_1 + $4_1 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $8_1 = i64toi32_i32$2;
       $8$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$3 = $8_1;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$1
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$2 = $8_1;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
        continue label$5
       }
       break label$5;
      };
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$4 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      i64toi32_i32$2 = $5_1;
      HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
     }
     return;
    }
    $859(22834 | 0, 22582 | 0, 210 | 0);
    abort();
   }
   $859(22857 | 0, 22582 | 0, 211 | 0);
   abort();
  }
  $859(23104 | 0, 22582 | 0, 223 | 0);
  abort();
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(456 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62008 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 456;
      $827(22909 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 456 | 0, $3_1 | 0, 22567 | 0);
     HEAP32[($3_1 + 448 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 440 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 444 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      $298($3_1 | 0);
      break label$5;
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(22897 | 0, 22582 | 0, 451 | 0);
   abort();
  }
  $859(22901 | 0, 22582 | 0, 452 | 0);
  abort();
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(22897 | 0, 22582 | 0, 501 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 91;
  HEAP32[($0_1 + 4 | 0) >> 2] = 92;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $304($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $305($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 513 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     if (!($834(62008 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $827(22939 | 0, $1_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!($834(62008 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$1_1 >> 2] = $0_1;
     $827(22987 | 0, $1_1 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $298($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 456 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
  label$9 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $5_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $6_1 = 0, $60$hi = 0, $88$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 534 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $3_1 = $798($1_1 | 0) | 0;
       if ($3_1) {
        break label$9
       }
       $4_1 = 0;
       break label$8;
      }
      $4_1 = 0;
      label$10 : while (1) {
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $4_1 = ($756($3_1 | 0) | 0) + $4_1 | 0;
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : while (1) {
           $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
           $763($2_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
           label$15 : {
            switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
            case 0:
             if (!($308($0_1 | 0, $2_1 | 0) | 0)) {
              break label$11
             }
             $309($0_1 | 0, $2_1 | 0);
             continue label$14;
            case 1:
             $5_1 = $297($0_1 | 0) | 0;
             if (!$5_1) {
              break label$7
             }
             i64toi32_i32$0 = 0;
             $8_1 = $3_1;
             $8$hi = i64toi32_i32$0;
             i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
             $9_1 = i64toi32_i32$0;
             $60$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $8$hi;
             i64toi32_i32$1 = $60$hi;
             i64toi32_i32$0 = $8$hi;
             i64toi32_i32$3 = $3_1;
             i64toi32_i32$4 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $9_1 >>> 0 > $3_1 >>> 0 | 0) | 0;
             i64toi32_i32$0 = i64toi32_i32$4 ? $3_1 : $9_1;
             i64toi32_i32$3 = i64toi32_i32$4 ? $8$hi : i64toi32_i32$1;
             $3_1 = i64toi32_i32$0;
             $766($2_1 | 0, $3_1 | 0) | 0;
             if ($300($0_1 | 0, $3_1 | 0) | 0) {
              break label$12
             }
             $301($0_1 | 0, $3_1 | 0);
             HEAP32[($0_1 + 16 | 0) >> 2] = 0;
             $3_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
             $309($0_1 | 0, $2_1 | 0);
             if (!$3_1) {
              continue label$14
             }
             break label$11;
            case 3:
             break label$13;
            case 2:
             break label$15;
            default:
             break label$11;
            };
           }
           $5_1 = $297($0_1 | 0) | 0;
           if (!$5_1) {
            break label$6
           }
           i64toi32_i32$4 = $5_1;
           i64toi32_i32$3 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $8_1 = i64toi32_i32$3;
           $8$hi = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           $88$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$4 = i64toi32_i32$3;
           i64toi32_i32$3 = $88$hi;
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > $3_1 >>> 0 | 0) | 0) {
            break label$11
           }
           i64toi32_i32$4 = $8$hi;
           i64toi32_i32$4 = $8$hi;
           $3_1 = $8_1;
           if ($300($0_1 | 0, $3_1 | 0) | 0) {
            break label$5
           }
           $310($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0);
           HEAP32[($0_1 + 32 | 0) >> 2] = 0;
           $301($0_1 | 0, $3_1 | 0);
           $5_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
           $766($2_1 | 0, $3_1 | 0) | 0;
           $309($0_1 | 0, $2_1 | 0);
           HEAP32[($0_1 + 16 | 0) >> 2] = 0;
           if (!$5_1) {
            continue label$14
           }
           break label$8;
          };
         }
         $766($2_1 | 0, $3_1 | 0) | 0;
        }
        $309($0_1 | 0, $2_1 | 0);
       }
       $3_1 = $798($1_1 | 0) | 0;
       if ($3_1) {
        continue label$10
       }
       break label$10;
      };
     }
     label$18 : {
      $7_1 = $2_1 + 16 | 0;
      if ($7_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $7_1;
     }
     return $4_1 | 0;
    }
    $859(23036 | 0, 22582 | 0, 562 | 0);
    abort();
   }
   $859(23036 | 0, 22582 | 0, 575 | 0);
   abort();
  }
  $859(23043 | 0, 22582 | 0, 583 | 0);
  abort();
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  label$3 : {
   label$4 : {
    if (!($329($1_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    $3_1 = 0;
    $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$3
    }
    i64toi32_i32$0 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) == (-1 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    $3_1 = $311($0_1 | 0, $4_1 | 0) | 0;
    $4_1 = $297($0_1 | 0) | 0;
    label$5 : {
     if (!($312($0_1 | 0, $2_1 + 8 | 0 | 0, $3_1 | 0, $754($1_1 | 0) | 0 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (408125543 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      $3_1 = 1;
      break label$3;
     }
     if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     label$7 : {
      if ($3_1) {
       break label$7
      }
      if (!$4_1) {
       break label$5
      }
      if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 2;
     HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
     $3_1 = 1;
     break label$3;
    }
    $3_1 = 1;
    HEAP32[($0_1 + 16 | 0) >> 2] = 1;
    break label$3;
   }
   $769($1_1 | 0, $2_1 + 24 | 0 | 0);
   $3_1 = 0;
  }
  label$8 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $310($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $47_1 = 0, $50_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
       HEAP32[$5_1 >> 2] = $7_1;
       $827(23131 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $47_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $47_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $50_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 16 | 0) >> 2] = $50_1;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $7_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 16 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$7_1) {
         break label$3
        }
        $7_1 = FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0]($6_1, $2_1, $7_1) | 0;
        break label$8;
       }
       $7_1 = FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0]($6_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($7_1 | 0) == (1 | 0) | 0;
      $6_1 = HEAP32[$6_1 >> 2] | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $9_1 = $5_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return;
   }
   $859(23166 | 0, 22582 | 0, 175 | 0);
   abort();
  }
  $859(23180 | 0, 22582 | 0, 177 | 0);
  abort();
 }
 
 function $311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $312($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $40$hi = 0, $43$hi = 0, $45$hi = 0, $46$hi = 0;
  $4_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($5_1 >>> 0 > 15 >>> 0) {
    break label$1
   }
   $4_1 = ($0_1 + 48 | 0) + Math_imul($5_1, 24) | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 28 | 0) >> 2] = $1_1;
   $4_1 = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $5_1 + 1 | 0;
   $36_1 = $0_1 + 44 | 0;
   $38_1 = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
   $39_1 = $1_1;
   $40_1 = $6_1;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $43$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $45$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $43$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $45$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $46$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $40$hi;
   i64toi32_i32$2 = $46$hi;
   $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 444 | 0) >> 2] | 0]($38_1, $39_1, $40_1, i64toi32_i32$5, i64toi32_i32$4, i64toi32_i32$2) | 0;
   HEAP32[$36_1 >> 2] = $1_1;
   $0_1 = $0_1 + 40 | 0;
   HEAP8[$0_1 >> 0] = HEAPU8[$0_1 >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 64 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (!($329($0_1 | 0, $1_1 + 48 | 0 | 0) | 0)) {
    break label$3
   }
   if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (440786851 | 0)) {
    break label$3
   }
   if (!($339($0_1 | 0, HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $2_1 = $341($1_1 | 0) | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 64 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(656 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 656;
    $827(23284 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 656 | 0, $2_1 | 0, 23204 | 0);
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   if (($283($2_1 + 176 | 0 | 0, $0_1 | 0) | 0 | 0) >= (0 | 0)) {
    break label$3
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 204 | 0);
  }
  $291($0_1 + 176 | 0 | 0);
  $845($0_1 | 0, 656 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $316($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 876 | 0);
  }
  HEAP8[($0_1 + 560 | 0) >> 0] = HEAPU8[($3_1 + 10 | 0) >> 0] | 0;
  $5_1 = 0;
  label$5 : {
   $6_1 = $0_1 + 176 | 0;
   if ($292($6_1 | 0, $1_1 | 0, $2_1 | 0) | 0) {
    break label$5
   }
   if (!(HEAPU8[($0_1 + 395 | 0) >> 0] | 0)) {
    break label$5
   }
   label$6 : {
    $5_1 = $813(104 | 0) | 0;
    if ($5_1) {
     break label$6
    }
    $5_1 = 0;
    if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 104;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(23416 | 0, $4_1 | 0);
    break label$5;
   }
   $822($5_1 | 0, 0 | 0, 104 | 0) | 0;
   $823($5_1 + 84 | 0 | 0, $0_1 + 479 | 0 | 0, 16 | 0) | 0;
   label$7 : {
    $2_1 = $0_1 + 16 | 0;
    if (($70($2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 61440 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $7_1 = $0_1 + 96 | 0;
    if (($70($7_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 61440 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $214($5_1 | 0, 13 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 3;
    i64toi32_i32$1 = $5_1 + 48 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 56 | 0) >> 0] = 0;
    label$8 : {
     if (!(HEAPU8[($0_1 + 385 | 0) >> 0] | 0)) {
      break label$8
     }
     if (!(HEAPU8[($0_1 + 384 | 0) >> 0] | 0)) {
      break label$8
     }
     label$9 : {
      label$10 : {
       $11_1 = +HEAPF64[($0_1 + 336 | 0) >> 3] * +((HEAP32[($0_1 + 332 | 0) >> 2] | 0) >>> 0) / 1.0e6;
       if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
        break label$10
       }
       $8_1 = ~~$11_1 >>> 0;
       break label$9;
      }
      $8_1 = 0;
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $8_1;
    }
    $317($0_1 | 0, $5_1 | 0);
    label$11 : {
     i64toi32_i32$2 = $0_1 + 440 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$11
     }
     $318($0_1 | 0, $5_1 | 0, $0_1 + 432 | 0 | 0);
    }
    label$12 : {
     i64toi32_i32$2 = $0_1 + 456 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
      break label$12
     }
     $319($0_1 | 0, $5_1 | 0, $0_1 + 448 | 0 | 0);
    }
    label$13 : {
     if (!(HEAPU8[($3_1 + 11 | 0) >> 0] | 0)) {
      break label$13
     }
     $320($0_1 | 0, $5_1 | 0, $1_1 | 0);
    }
    $71($2_1 | 0);
    $71($7_1 | 0);
    break label$5;
   }
   $815($5_1 | 0);
   $5_1 = 0;
  }
  $282($6_1 | 0);
  label$14 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $9_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $15_1 = 0, $17_1 = 0.0, $8_1 = 0, $16_1 = Math_fround(0), $14_1 = 0, $13_1 = 0, $12_1 = 0, $215_1 = 0, $230_1 = 0, $238_1 = 0, $245_1 = 0, $15$hi = 0;
  label$1 : {
   $2_1 = global$0 - 224 | 0;
   $13_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 393 | 0) >> 0] | 0)) {
    break label$3
   }
   if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = 1;
   label$4 : {
    $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    $4_1 = 0;
    label$5 : while (1) {
     label$6 : {
      $5_1 = (HEAP32[($0_1 + 192 | 0) >> 2] | 0) + Math_imul($4_1, 280) | 0;
      if (!(HEAPU8[($5_1 + 244 | 0) >> 0] | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        $6_1 = $5_1 + 260 | 0;
        if (HEAPU8[$6_1 >> 0] | 0) {
         break label$8
        }
        $3_1 = 0;
        break label$7;
       }
       $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
      }
      label$9 : {
       $7_1 = $5_1 + 261 | 0;
       if (!(HEAPU8[$7_1 >> 0] | 0)) {
        break label$9
       }
       $3_1 = (HEAP32[($5_1 + 120 | 0) >> 2] | 0) + $3_1 | 0;
      }
      label$10 : {
       $8_1 = $5_1 + 274 | 0;
       if (!(HEAPU8[$8_1 >> 0] | 0)) {
        break label$10
       }
       if (!(HEAP32[($5_1 + 212 | 0) >> 2] | 0)) {
        break label$10
       }
       label$11 : {
        $9_1 = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
        if (!(HEAPU8[($9_1 + 94 | 0) >> 0] | 0)) {
         break label$11
        }
        $3_1 = (HEAP32[($9_1 + 64 | 0) >> 2] | 0) + $3_1 | 0;
       }
       if (!(HEAPU8[($9_1 + 95 | 0) >> 0] | 0)) {
        break label$10
       }
       $3_1 = (HEAP32[($9_1 + 72 | 0) >> 2] | 0) + $3_1 | 0;
      }
      label$12 : {
       $9_1 = $813($3_1 + 488 | 0 | 0) | 0;
       if ($9_1) {
        break label$12
       }
       if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$0 = 488;
       HEAP32[($2_1 + 4 | 0) >> 2] = 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[$2_1 >> 2] = 23493;
       $827(23462 | 0, $2_1 | 0);
       break label$4;
      }
      $218($9_1 | 0);
      HEAP32[($1_1 + 28 | 0) >> 2] = (HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$0 = 0;
      HEAP32[($9_1 + 424 | 0) >> 2] = 0;
      HEAP32[($9_1 + 428 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($9_1 + 345 | 0) >> 0] = 0;
      HEAP8[($9_1 + 329 | 0) >> 0] = 0;
      HEAP8[($9_1 + 379 | 0) >> 0] = 0;
      $10_1 = $9_1 + 384 | 0;
      $822($10_1 | 0, 0 | 0, 32 | 0) | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[($9_1 + 416 | 0) >> 2] = 0;
      HEAP32[($9_1 + 8 | 0) >> 2] = $3_1;
      HEAP8[($9_1 + 377 | 0) >> 0] = 0;
      HEAP8[($9_1 + 328 | 0) >> 0] = 0;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$0 = 0;
      HEAP32[($9_1 + 456 | 0) >> 2] = 0;
      HEAP32[($9_1 + 460 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$9_1 >> 2] = 0;
      i64toi32_i32$1 = $9_1 + 464 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $9_1 + 472 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $9_1 + 480 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      label$13 : {
       label$14 : {
        $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$14
        }
        HEAP32[$3_1 >> 2] = $9_1;
        break label$13;
       }
       HEAP32[$1_1 >> 2] = $9_1;
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $9_1;
      label$15 : {
       if (!(HEAPU8[($5_1 + 258 | 0) >> 0] | 0)) {
        break label$15
       }
       $823($9_1 + 329 | 0 | 0, $5_1 + 64 | 0 | 0, 16 | 0) | 0;
      }
      $11_1 = $9_1 + 488 | 0;
      label$16 : {
       if (!(HEAPU8[$6_1 >> 0] | 0)) {
        break label$16
       }
       HEAP32[($9_1 + 420 | 0) >> 2] = $11_1;
       $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
       HEAP32[($9_1 + 416 | 0) >> 2] = $3_1;
       $823($11_1 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
       $11_1 = $11_1 + (HEAP32[($5_1 + 112 | 0) >> 2] | 0) | 0;
      }
      label$17 : {
       if (!(HEAPU8[($5_1 + 259 | 0) >> 0] | 0)) {
        break label$17
       }
       $823($9_1 + 345 | 0 | 0, $5_1 + 80 | 0 | 0, 32 | 0) | 0;
      }
      label$18 : {
       if (!(HEAPU8[$7_1 >> 0] | 0)) {
        break label$18
       }
       HEAP32[($9_1 + 428 | 0) >> 2] = $11_1;
       $3_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
       HEAP32[($9_1 + 424 | 0) >> 2] = $3_1;
       $823($11_1 | 0, HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
       $11_1 = $11_1 + (HEAP32[($5_1 + 120 | 0) >> 2] | 0) | 0;
      }
      label$19 : {
       if (!(HEAPU8[($5_1 + 262 | 0) >> 0] | 0)) {
        break label$19
       }
       label$20 : {
        $7_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$20
        }
        $12_1 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
        $3_1 = 0;
        label$21 : while (1) {
         i64toi32_i32$2 = $12_1 + ($3_1 << 4 | 0) | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $215_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $10_1 + ($3_1 << 3 | 0) | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $215_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         if ($3_1 >>> 0 > 2 >>> 0) {
          break label$20
         }
         $3_1 = $3_1 + 1 | 0;
         if ($3_1 >>> 0 < $7_1 >>> 0) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP8[($9_1 + 379 | 0) >> 0] = 1;
      }
      label$22 : {
       if (!(HEAPU8[($5_1 + 245 | 0) >> 0] | 0)) {
        break label$22
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $230_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $9_1;
       HEAP32[($9_1 + 448 | 0) >> 2] = $230_1;
       HEAP32[($9_1 + 452 | 0) >> 2] = i64toi32_i32$0;
      }
      label$23 : {
       if (!(HEAPU8[($5_1 + 268 | 0) >> 0] | 0)) {
        break label$23
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$0 = HEAP32[($5_1 + 176 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($5_1 + 180 | 0) >> 2] | 0;
       $238_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $9_1 + 456 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $238_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      }
      label$24 : {
       if (!(HEAPU8[($5_1 + 270 | 0) >> 0] | 0)) {
        break label$24
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$1 = HEAP32[($5_1 + 184 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
       $245_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $9_1;
       HEAP32[($9_1 + 464 | 0) >> 2] = $245_1;
       HEAP32[($9_1 + 468 | 0) >> 2] = i64toi32_i32$0;
      }
      label$25 : {
       if (!(HEAPU8[($5_1 + 272 | 0) >> 0] | 0)) {
        break label$25
       }
       HEAP8[($9_1 + 377 | 0) >> 0] = HEAPU8[($5_1 + 192 | 0) >> 0] | 0;
      }
      $293($5_1 | 0, $2_1 + 208 | 0 | 0);
      HEAP8[($9_1 + 328 | 0) >> 0] = (HEAPU8[($2_1 + 209 | 0) >> 0] | 0) ^ 1 | 0;
      HEAP8[($9_1 + 378 | 0) >> 0] = HEAPU8[($2_1 + 210 | 0) >> 0] | 0;
      HEAP32[($9_1 + 380 | 0) >> 2] = HEAP32[($2_1 + 212 | 0) >> 2] | 0;
      label$26 : {
       label$27 : {
        label$28 : {
         label$29 : {
          label$30 : {
           label$31 : {
            label$32 : {
             if (!(HEAPU8[$8_1 >> 0] | 0)) {
              break label$32
             }
             HEAP32[($9_1 + 20 | 0) >> 2] = 0;
             HEAP32[($9_1 + 4 | 0) >> 2] = 0;
             if (!(HEAP32[($5_1 + 212 | 0) >> 2] | 0)) {
              break label$26
             }
             label$33 : {
              $3_1 = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
              if (!(HEAPU8[($3_1 + 94 | 0) >> 0] | 0)) {
               break label$33
              }
              HEAP32[($9_1 + 472 | 0) >> 2] = $11_1;
              HEAP32[($9_1 + 476 | 0) >> 2] = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
              $823($11_1 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) | 0;
              $11_1 = $11_1 + (HEAP32[($3_1 + 64 | 0) >> 2] | 0) | 0;
             }
             label$34 : {
              if (!(HEAPU8[($3_1 + 95 | 0) >> 0] | 0)) {
               break label$34
              }
              HEAP32[($9_1 + 480 | 0) >> 2] = $11_1;
              HEAP32[($9_1 + 484 | 0) >> 2] = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
              $823($11_1 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0;
             }
             label$35 : {
              if (!(HEAPU8[($3_1 + 82 | 0) >> 0] | 0)) {
               break label$35
              }
              HEAP16[($9_1 + 28 | 0) >> 1] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
             }
             label$36 : {
              if (!(HEAPU8[($3_1 + 83 | 0) >> 0] | 0)) {
               break label$36
              }
              HEAP16[($9_1 + 30 | 0) >> 1] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
             }
             label$37 : {
              if (!(HEAPU8[($3_1 + 88 | 0) >> 0] | 0)) {
               break label$37
              }
              HEAP32[($9_1 + 432 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
             }
             label$38 : {
              if (!(HEAPU8[($3_1 + 89 | 0) >> 0] | 0)) {
               break label$38
              }
              HEAP32[($9_1 + 436 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
             }
             i64toi32_i32$2 = $5_1;
             i64toi32_i32$0 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
             $15_1 = i64toi32_i32$0;
             $15$hi = i64toi32_i32$1;
             i64toi32_i32$0 = $9_1;
             HEAP32[($9_1 + 440 | 0) >> 2] = $15_1;
             HEAP32[($9_1 + 444 | 0) >> 2] = i64toi32_i32$1;
             label$39 : {
              if (!($15_1 | i64toi32_i32$1 | 0)) {
               break label$39
              }
              label$40 : {
               label$41 : {
                if (HEAPU8[($3_1 + 80 | 0) >> 0] | 0) {
                 break label$41
                }
                $16_1 = Math_fround(1.0e9);
                break label$40;
               }
               $16_1 = HEAPU8[$3_1 >> 0] | 0 ? Math_fround(2.0e9) : Math_fround(1.0e9);
              }
              i64toi32_i32$1 = $15$hi;
              i64toi32_i32$0 = $15_1;
              i64toi32_i32$2 = 0;
              HEAPF32[($9_1 + 320 | 0) >> 2] = Math_fround($16_1 / Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)));
             }
             label$42 : {
              if (!($348($5_1 | 0) | 0)) {
               break label$42
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 27;
              if (!(HEAPU8[$6_1 >> 0] | 0)) {
               break label$26
              }
              $3_1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
              if (!$3_1) {
               break label$26
              }
              $5_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
              if ($5_1 >>> 0 < 8 >>> 0) {
               break label$26
              }
              $802($2_1 + 184 | 0 | 0, $3_1 | 0, $5_1 | 0);
              $760($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0, 1 | 0);
              $766($2_1 + 24 | 0 | 0, 5 | 0) | 0;
              $3_1 = $764($2_1 + 24 | 0 | 0) | 0;
              if (($3_1 | 0) == (-1 | 0)) {
               break label$26
              }
              $10_1 = $3_1 & 31 | 0;
              if (!$10_1) {
               break label$26
              }
              $3_1 = $9_1 + 36 | 0;
              $5_1 = 0;
              label$43 : while (1) {
               $9_1 = $777($2_1 + 24 | 0 | 0) | 0;
               if (!$9_1) {
                break label$26
               }
               if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                break label$26
               }
               $247($3_1 | 0, (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0, $9_1 + -1 | 0 | 0) | 0;
               if (HEAPU8[$3_1 >> 0] | 0) {
                break label$26
               }
               $5_1 = $5_1 + 1 | 0;
               if ($5_1 >>> 0 < $10_1 >>> 0) {
                continue label$43
               }
               break label$26;
              };
             }
             label$44 : {
              if (!($349($5_1 | 0) | 0)) {
               break label$44
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 33;
              if (!(HEAPU8[$6_1 >> 0] | 0)) {
               break label$26
              }
              $3_1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
              if (!$3_1) {
               break label$26
              }
              if ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) >>> 0 < 18 >>> 0) {
               break label$26
              }
              HEAP8[($9_1 + 41 | 0) >> 0] = (HEAPU8[($3_1 + 16 | 0) >> 0] | 0) & 7 | 0 | 8 | 0;
              HEAP8[($9_1 + 42 | 0) >> 0] = (HEAPU8[($3_1 + 17 | 0) >> 0] | 0) & 7 | 0 | 8 | 0;
              break label$26;
             }
             if ($351($5_1 | 0) | 0) {
              break label$27
             }
             label$45 : {
              if (!($350($5_1 | 0) | 0)) {
               break label$45
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 2;
              break label$26;
             }
             if ($353($5_1 | 0) | 0) {
              break label$28
             }
             label$46 : {
              if (!($364($5_1 | 0) | 0)) {
               break label$46
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 243;
              break label$26;
             }
             label$47 : {
              if (!($365($5_1 | 0) | 0)) {
               break label$47
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 244;
              break label$26;
             }
             label$48 : {
              if (!($366($5_1 | 0) | 0)) {
               break label$48
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 246;
              break label$26;
             }
             if (!($352($5_1 | 0) | 0)) {
              break label$26
             }
             HEAP32[($9_1 + 24 | 0) >> 2] = 1;
             $802($2_1 + 200 | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
             $760($2_1 + 184 | 0 | 0, $2_1 + 200 | 0 | 0, 1 | 0);
             if (!($261($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
              break label$26
             }
             label$49 : {
              $3_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
              if (($3_1 | 0) > (875967079 | 0)) {
               break label$49
              }
              label$50 : {
               if (($3_1 | 0) > (829843762 | 0)) {
                break label$50
               }
               label$51 : {
                if (($3_1 | 0) > (826496576 | 0)) {
                 break label$51
                }
                label$52 : {
                 if (($3_1 | 0) > (808802371 | 0)) {
                  break label$52
                 }
                 if (($3_1 | 0) == (541283905 | 0)) {
                  break label$31
                 }
                 if (($3_1 | 0) == (543389281 | 0)) {
                  break label$31
                 }
                 break label$26;
                }
                if (($3_1 | 0) == (808802372 | 0)) {
                 break label$28
                }
                if (($3_1 | 0) == (808810596 | 0)) {
                 break label$28
                }
                break label$26;
               }
               label$53 : {
                if (($3_1 | 0) > (827738418 | 0)) {
                 break label$53
                }
                if (($3_1 | 0) == (826496577 | 0)) {
                 break label$31
                }
                if (($3_1 | 0) == (826496599 | 0)) {
                 break label$29
                }
                break label$26;
               }
               if (($3_1 | 0) == (827738419 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (828601953 | 0)) {
                break label$31
               }
               if (($3_1 | 0) != (828601975 | 0)) {
                break label$26
               }
               break label$29;
              }
              label$54 : {
               if (($3_1 | 0) > (859066444 | 0)) {
                break label$54
               }
               label$55 : {
                if (($3_1 | 0) > (844515634 | 0)) {
                 break label$55
                }
                if (($3_1 | 0) == (829843763 | 0)) {
                 break label$28
                }
                if (($3_1 | 0) == (844313677 | 0)) {
                 break label$28
                }
                break label$26;
               }
               if (($3_1 | 0) == (844515635 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (846410861 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (846620979 | 0)) {
                break label$28
               }
               break label$26;
              }
              label$56 : {
               if (($3_1 | 0) > (861292867 | 0)) {
                break label$56
               }
               if (($3_1 | 0) == (859066445 | 0)) {
                break label$30
               }
               if (($3_1 | 0) != (859074669 | 0)) {
                break label$26
               }
               break label$30;
              }
              if (($3_1 | 0) == (861292868 | 0)) {
               break label$30
              }
              if (($3_1 | 0) == (863398244 | 0)) {
               break label$30
              }
              if (($3_1 | 0) != (875967048 | 0)) {
               break label$26
              }
              break label$31;
             }
             label$57 : {
              if (($3_1 | 0) > (1096174934 | 0)) {
               break label$57
              }
              label$58 : {
               if (($3_1 | 0) > (880175459 | 0)) {
                break label$58
               }
               label$59 : {
                if (($3_1 | 0) > (878070083 | 0)) {
                 break label$59
                }
                if (($3_1 | 0) == (875967080 | 0)) {
                 break label$31
                }
                if (($3_1 | 0) == (877677894 | 0)) {
                 break label$28
                }
                break label$26;
               }
               if (($3_1 | 0) == (878070084 | 0)) {
                break label$30
               }
               if (($3_1 | 0) == (879783270 | 0)) {
                break label$28
               }
               break label$26;
              }
              label$60 : {
               if (($3_1 | 0) > (896952675 | 0)) {
                break label$60
               }
               if (($3_1 | 0) == (880175460 | 0)) {
                break label$30
               }
               if (($3_1 | 0) == (894847300 | 0)) {
                break label$28
               }
               break label$26;
              }
              if (($3_1 | 0) == (896952676 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (911624516 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (913729892 | 0)) {
               break label$28
              }
              break label$26;
             }
             label$61 : {
              if (($3_1 | 0) > (1635151222 | 0)) {
               break label$61
              }
              label$62 : {
               if (($3_1 | 0) > (1213420373 | 0)) {
                break label$62
               }
               if (($3_1 | 0) == (1096174935 | 0)) {
                break label$29
               }
               if (($3_1 | 0) == (1145656920 | 0)) {
                break label$28
               }
               break label$26;
              }
              if (($3_1 | 0) == (1213420374 | 0)) {
               break label$31
              }
              if (($3_1 | 0) == (1395937357 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (1482049860 | 0)) {
               break label$28
              }
              break label$26;
             }
             label$63 : {
              if (($3_1 | 0) > (1752396661 | 0)) {
               break label$63
              }
              if (($3_1 | 0) == (1635151223 | 0)) {
               break label$29
              }
              if (($3_1 | 0) == (1684633208 | 0)) {
               break label$28
              }
              break label$26;
             }
             if (($3_1 | 0) == (1752396662 | 0)) {
              break label$31
             }
             if (($3_1 | 0) == (2021026148 | 0)) {
              break label$28
             }
             if (($3_1 | 0) == (1932816493 | 0)) {
              break label$28
             }
             break label$26;
            }
            label$64 : {
             label$65 : {
              label$66 : {
               if (!(HEAPU8[($5_1 + 275 | 0) >> 0] | 0)) {
                break label$66
               }
               HEAP32[($9_1 + 20 | 0) >> 2] = 0;
               HEAP32[($9_1 + 4 | 0) >> 2] = 1;
               if (!(HEAP32[($5_1 + 224 | 0) >> 2] | 0)) {
                break label$26
               }
               label$67 : {
                $3_1 = HEAP32[($5_1 + 228 | 0) >> 2] | 0;
                if (!(HEAPU8[($3_1 + 32 | 0) >> 0] | 0)) {
                 break label$67
                }
                label$68 : {
                 label$69 : {
                  $17_1 = +HEAPF64[$3_1 >> 3];
                  if (!($17_1 < 4294967296.0 & $17_1 >= 0.0 | 0)) {
                   break label$69
                  }
                  $10_1 = ~~$17_1 >>> 0;
                  break label$68;
                 }
                 $10_1 = 0;
                }
                HEAP32[($9_1 + 28 | 0) >> 2] = $10_1;
               }
               label$70 : {
                if (!(HEAPU8[($3_1 + 34 | 0) >> 0] | 0)) {
                 break label$70
                }
                HEAP8[($9_1 + 24 | 0) >> 0] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
               }
               label$71 : {
                if (!(HEAPU8[($3_1 + 36 | 0) >> 0] | 0)) {
                 break label$71
                }
                HEAP8[($9_1 + 25 | 0) >> 0] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
               }
               label$72 : {
                label$73 : {
                 if ($354($5_1 | 0) | 0) {
                  break label$73
                 }
                 if (!($355($5_1 | 0, $2_1 + 200 | 0 | 0) | 0)) {
                  break label$72
                 }
                }
                $802($2_1 + 176 | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
                $760($2_1 + 24 | 0 | 0, $2_1 + 176 | 0 | 0, 1 | 0);
                label$74 : {
                 label$75 : {
                  if (!($580($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
                   break label$75
                  }
                  HEAP32[($9_1 + 28 | 0) >> 2] = $256(HEAPU8[($2_1 + 184 | 0) >> 0] | 0 | 0) | 0;
                  $3_1 = HEAPU8[($2_1 + 186 | 0) >> 0] | 0;
                  HEAP32[($9_1 + 20 | 0) >> 2] = ($3_1 | 0) == (5 | 0) ? 18 : 15;
                  $3_1 = $3_1 >>> 0 < 6 >>> 0 ? $3_1 : 0;
                  break label$74;
                 }
                 HEAP32[($9_1 + 20 | 0) >> 2] = 15;
                 $3_1 = 2;
                }
                HEAP32[($9_1 + 32 | 0) >> 2] = $3_1;
                break label$26;
               }
               if ($360($5_1 | 0) | 0) {
                break label$27
               }
               if ($361($5_1 | 0) | 0) {
                break label$64
               }
               label$76 : {
                if (!($356($5_1 | 0) | 0)) {
                 break label$76
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 129;
                break label$26;
               }
               label$77 : {
                if (!($358($5_1 | 0) | 0)) {
                 break label$77
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 6;
                break label$26;
               }
               if ($357($5_1 | 0) | 0) {
                break label$65
               }
               label$78 : {
                if (!($359($5_1 | 0) | 0)) {
                 break label$78
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 149;
                break label$26;
               }
               label$79 : {
                if (!($363($5_1 | 0) | 0)) {
                 break label$79
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 146;
                break label$26;
               }
               label$80 : {
                if (!($367($5_1 | 0) | 0)) {
                 break label$80
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 153;
                break label$26;
               }
               label$81 : {
                if (!($368($5_1 | 0) | 0)) {
                 break label$81
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 138;
                break label$26;
               }
               if (!($362($5_1 | 0) | 0)) {
                break label$26
               }
               HEAP32[($2_1 + 176 | 0) >> 2] = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
               $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
               HEAP16[($2_1 + 182 | 0) >> 1] = 1;
               HEAP16[($2_1 + 180 | 0) >> 1] = $3_1;
               $760($2_1 + 184 | 0 | 0, $2_1 + 176 | 0 | 0, 1 | 0);
               if (!($260($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
                break label$26
               }
               $3_1 = HEAPU16[($2_1 + 24 | 0) >> 1] | 0;
               if (($3_1 | 0) == (8193 | 0)) {
                break label$65
               }
               if (($3_1 | 0) == (85 | 0)) {
                break label$27
               }
               if (($3_1 | 0) == (80 | 0)) {
                break label$64
               }
               break label$26;
              }
              HEAP32[($9_1 + 4 | 0) >> 2] = 4;
              break label$26;
             }
             HEAP32[($9_1 + 20 | 0) >> 2] = 130;
             break label$26;
            }
            HEAP32[($9_1 + 20 | 0) >> 2] = 3;
            break label$26;
           }
           HEAP32[($9_1 + 20 | 0) >> 2] = 27;
           break label$26;
          }
          HEAP32[($9_1 + 20 | 0) >> 2] = 785;
          break label$26;
         }
         HEAP32[($9_1 + 20 | 0) >> 2] = 234;
         break label$26;
        }
        HEAP32[($9_1 + 20 | 0) >> 2] = 16;
        break label$26;
       }
       HEAP32[($9_1 + 20 | 0) >> 2] = 1;
      }
      $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $5_1 = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$3
   }
   $9_1 = 0;
   label$82 : while (1) {
    label$83 : {
     $3_1 = (HEAP32[($0_1 + 204 | 0) >> 2] | 0) + Math_imul($9_1, 20) | 0;
     if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
      break label$83
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
    }
    label$84 : {
     if (!(HEAPU8[($3_1 + 17 | 0) >> 0] | 0)) {
      break label$84
     }
     HEAP32[($1_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    }
    label$85 : {
     if (!(HEAPU8[($3_1 + 18 | 0) >> 0] | 0)) {
      break label$85
     }
     $5_1 = $813(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($1_1 + 80 | 0) >> 2] = $5_1;
     $823($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     $5_1 = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
    }
    $9_1 = $9_1 + 1 | 0;
    if ($9_1 >>> 0 < $5_1 >>> 0) {
     continue label$82
    }
    break label$82;
   };
  }
  label$86 : {
   $14_1 = $2_1 + 224 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
 }
 
 function $318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $16$hi = 0, $8_1 = 0, $16_1 = 0, $11_1 = 0, $17_1 = 0, $17$hi = 0, $6_1 = 0, $7_1 = 0, $15_1 = 0, $14_1 = 0, $31_1 = 0, $31$hi = 0, $33_1 = 0, $33$hi = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $62$hi = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $95$hi = 0, $100_1 = 0, $103$hi = 0, $107$hi = 0, $114$hi = 0, $163_1 = 0, $165_1 = 0, $165$hi = 0, $167_1 = 0, $167$hi = 0, $175_1 = 0, $18_1 = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  $4_1 = $0_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$0;
  $31$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  $33$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$1 = $33$hi;
  $74($4_1 | 0, $31_1 | 0, i64toi32_i32$0 | 0, $33_1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $72($4_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   if (!($76($4_1 | 0, 12 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 + 40 | 0;
   $6_1 = $0_1 + 576 | 0;
   $7_1 = $0_1 + 584 | 0;
   $8_1 = $0_1 + 568 | 0;
   $9_1 = $3_1 + 20 | 0;
   $10_1 = $3_1 + 16 | 0;
   label$4 : while (1) {
    if (!($329($4_1 | 0, $3_1 + 48 | 0 | 0) | 0)) {
     break label$3
    }
    $11_1 = $754($4_1 | 0) | 0;
    label$5 : {
     label$6 : {
      if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) == (24999 | 0)) {
       break label$6
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = 0;
      $62$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$0 = $62$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $63$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
      $65_1 = i64toi32_i32$5;
      $65$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $63$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $65$hi;
      i64toi32_i32$3 = $65_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$4;
      break label$5;
     }
     $322($8_1 | 0);
     $67($3_1 + 32 | 0 | 0);
     $12_1 = $11_1;
     label$7 : {
      label$8 : while (1) {
       $76($4_1 | 0, 16384 | 0) | 0;
       HEAP8[($0_1 + 612 | 0) >> 0] = 0;
       if (!($331($4_1 | 0, ($11_1 - $12_1 | 0) + (HEAP32[($3_1 + 56 | 0) >> 2] | 0) | 0 | 0, 23520 | 0, 23640 | 0, $8_1 | 0) | 0)) {
        break label$7
       }
       $337(23520 | 0, 2 | 0, 0 | 0, 23640 | 0, $8_1 | 0);
       $13_1 = $754($4_1 | 0) | 0;
       label$9 : {
        if (!(HEAPU8[($0_1 + 612 | 0) >> 0] | 0)) {
         break label$9
        }
        i64toi32_i32$4 = $73($4_1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $93_1 = i64toi32_i32$4;
        $93$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 600 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 604 | 0) >> 2] | 0;
        $95_1 = i64toi32_i32$1;
        $95$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $93$hi;
        i64toi32_i32$1 = $95$hi;
        $68($3_1 + 32 | 0 | 0, $93_1 | 0, i64toi32_i32$4 | 0, $95_1 | 0, i64toi32_i32$1 | 0);
        $13_1 = $13_1 + (HEAP32[(i64toi32_i32$2 + 600 | 0) >> 2] | 0) | 0;
       }
       $100_1 = $4_1;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$1 = 0;
       $103$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$2 = $16_1;
       i64toi32_i32$4 = $103$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $16_1 = i64toi32_i32$5;
       $16$hi = i64toi32_i32$0;
       $72($100_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
       $107$hi = i64toi32_i32$2;
       $12_1 = $13_1 + $12_1 | 0;
       i64toi32_i32$2 = 0;
       $114$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $107$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = $114$hi;
       i64toi32_i32$3 = $12_1 - $11_1 | 0;
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
        continue label$8
       }
       break label$8;
      };
      $13_1 = $813((((HEAP32[$8_1 >> 2] | 0) + (HEAP32[$7_1 >> 2] | 0) | 0) + (HEAP32[$6_1 >> 2] | 0) | 0) + 48 | 0 | 0) | 0;
      if (!$13_1) {
       break label$3
      }
      $822($13_1 | 0, 0 | 0, 48 | 0) | 0;
      $12_1 = $13_1 + 48 | 0;
      label$10 : {
       if (!(HEAPU8[($0_1 + 609 | 0) >> 0] | 0)) {
        break label$10
       }
       HEAP32[($13_1 + 32 | 0) >> 2] = $12_1;
       $12_1 = $323($12_1 | 0, $6_1 | 0) | 0;
      }
      label$11 : {
       if (!(HEAPU8[($0_1 + 608 | 0) >> 0] | 0)) {
        break label$11
       }
       HEAP32[($13_1 + 36 | 0) >> 2] = $12_1;
       $12_1 = $323($12_1 | 0, $8_1 | 0) | 0;
      }
      label$12 : {
       if (!(HEAPU8[($0_1 + 610 | 0) >> 0] | 0)) {
        break label$12
       }
       HEAP32[($13_1 + 40 | 0) >> 2] = $12_1;
       $323($12_1 | 0, $7_1 | 0) | 0;
      }
      label$13 : {
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$1;
       $17$hi = i64toi32_i32$2;
       if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$1 = $13_1;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = 1;
       $163_1 = i64toi32_i32$1;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $165_1 = i64toi32_i32$2;
       $165$hi = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
       $167_1 = i64toi32_i32$1;
       $167$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $165$hi;
       i64toi32_i32$3 = $165_1;
       i64toi32_i32$1 = $167$hi;
       i64toi32_i32$0 = $167_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$3 = $163_1;
       HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$5;
      }
      label$14 : {
       if (!(HEAPU8[($0_1 + 611 | 0) >> 0] | 0)) {
        break label$14
       }
       HEAP8[($13_1 + 5 | 0) >> 0] = 1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 592 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 596 | 0) >> 2] | 0;
       $175_1 = i64toi32_i32$5;
       i64toi32_i32$5 = $13_1;
       HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $175_1;
       HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$3;
      }
      label$15 : {
       if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$15
       }
       if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$15
       }
       i64toi32_i32$2 = $13_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$3;
       $17$hi = i64toi32_i32$5;
       $12_1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$3;
       $19$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       HEAP32[$9_1 >> 2] = i64toi32_i32$5;
       i64toi32_i32$3 = $19$hi;
       HEAP32[$10_1 >> 2] = $19_1;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$5 = $3_1;
       HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = $18_1;
       HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = $12_1;
       i64toi32_i32$3 = $17$hi;
       HEAP32[i64toi32_i32$5 >> 2] = $17_1;
       $827(23653 | 0, i64toi32_i32$5 | 0);
      }
      HEAP32[$13_1 >> 2] = 0;
      $12_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($12_1 ? $12_1 : $5_1) >> 2] = $13_1;
      HEAP32[($1_1 + 44 | 0) >> 2] = $13_1;
      $335(23520 | 0, $8_1 | 0);
      i64toi32_i32$3 = $73($4_1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $72($4_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
      break label$5;
     }
     $335(23520 | 0, $8_1 | 0);
     break label$3;
    }
    i64toi32_i32$5 = $16$hi;
    $72($4_1 | 0, $16_1 | 0, i64toi32_i32$5 | 0);
    if ($76($4_1 | 0, 12 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$16 : {
   $15_1 = $3_1 + 64 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $3_1 = 0, $10_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $14_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $19_1 = 0, $19$hi = 0, $12_1 = 0, $18_1 = 0, $18$hi = 0, $38_1 = 0, $13_1 = 0, $39_1 = 0, $17_1 = 0, $16_1 = 0, $33_1 = 0, $33$hi = 0, $35_1 = 0, $35$hi = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $89_1 = 0, $123_1 = 0, $11_1 = 0, $161_1 = 0, $40_1 = 0, $41_1 = 0, $20_1 = 0, $20$hi = 0, $242_1 = 0, $250_1 = 0;
  label$1 : {
   $3_1 = global$0 - 112 | 0;
   $16_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  $4_1 = $0_1 + 96 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  $33$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  $35$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$1 = $35$hi;
  $74($4_1 | 0, $33_1 | 0, i64toi32_i32$0 | 0, $35_1 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   if (!($76($4_1 | 0, 12 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 + 48 | 0;
   $6_1 = $0_1 + 616 | 0;
   $7_1 = ($3_1 + 48 | 0) + 16 | 0;
   $8_1 = $3_1 + 32 | 0;
   $9_1 = $3_1 + 24 | 0;
   label$4 : while (1) {
    if (!($329($4_1 | 0, $3_1 + 96 | 0 | 0) | 0)) {
     break label$3
    }
    if (!($76($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if ((HEAP32[($3_1 + 96 | 0) >> 2] | 0 | 0) == (17849 | 0)) {
       break label$6
      }
      $766($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) | 0;
      break label$5;
     }
     $754($4_1 | 0) | 0;
     $324($6_1 | 0);
     $67($3_1 + 80 | 0 | 0);
     label$7 : {
      if ($331($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, 23760 | 0, 23880 | 0, $6_1 | 0) | 0) {
       break label$7
      }
      $335(23760 | 0, $6_1 | 0);
      break label$3;
     }
     $337(23760 | 0, 2 | 0, 0 | 0, 23880 | 0, $6_1 | 0);
     $10_1 = $813(40 | 0) | 0;
     if (!$10_1) {
      break label$3
     }
     $822($10_1 | 0, 0 | 0, 40 | 0) | 0;
     label$8 : {
      if (!(HEAPU8[($0_1 + 648 | 0) >> 0] | 0)) {
       break label$8
      }
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $89_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $10_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $89_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     }
     label$9 : {
      if (!(HEAPU8[($0_1 + 649 | 0) >> 0] | 0)) {
       break label$9
      }
      HEAP32[($10_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 624 | 0) >> 2] | 0;
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 650 | 0) >> 0] | 0)) {
       break label$10
      }
      HEAP32[($10_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 628 | 0) >> 2] | 0;
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 651 | 0) >> 0] | 0)) {
       break label$11
      }
      HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 632 | 0) >> 2] | 0;
     }
     label$12 : {
      if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$12
      }
      if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$12
      }
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      HEAP32[($3_1 + 52 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$1 = $3_1;
      HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $18_1;
      HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
      $123_1 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $38_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[($123_1 + 48 | 0) >> 2] = $38_1;
      $827(23893 | 0, $3_1 + 48 | 0 | 0);
     }
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = i64toi32_i32$1;
     label$13 : {
      if (!(HEAP32[($0_1 + 640 | 0) >> 2] | 0)) {
       break label$13
      }
      $11_1 = HEAP32[($0_1 + 644 | 0) >> 2] | 0;
      $12_1 = 0;
      $13_1 = 0;
      label$14 : while (1) {
       $14_1 = 0;
       label$15 : {
        $15_1 = $11_1 + Math_imul($12_1, 88) | 0;
        if (!(HEAPU8[($15_1 + 85 | 0) >> 0] | 0)) {
         break label$15
        }
        $14_1 = HEAP32[($15_1 + 72 | 0) >> 2] | 0;
        $13_1 = (HEAP32[$14_1 >> 2] | 0) + 32 | 0;
       }
       $2_1 = $813($13_1 + 48 | 0 | 0) | 0;
       if (!$2_1) {
        break label$13
       }
       $822($2_1 | 0, 0 | 0, 48 | 0) | 0;
       label$16 : {
        if (!(HEAPU8[($15_1 + 76 | 0) >> 0] | 0)) {
         break label$16
        }
        HEAP8[($2_1 + 4 | 0) >> 0] = 1;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $161_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $161_1;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
       }
       label$17 : {
        if (!(HEAPU8[($15_1 + 77 | 0) >> 0] | 0)) {
         break label$17
        }
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
        $40_1 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$2 = __wasm_i64_udiv($40_1 | 0, i64toi32_i32$1 | 0, 1e6 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$2;
       }
       label$18 : {
        if (!(HEAPU8[($15_1 + 78 | 0) >> 0] | 0)) {
         break label$18
        }
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $41_1 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv($41_1 | 0, i64toi32_i32$2 | 0, 1e6 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
       }
       label$19 : {
        if (!(HEAPU8[($15_1 + 79 | 0) >> 0] | 0)) {
         break label$19
        }
        HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($15_1 + 24 | 0) >> 2] | 0;
       }
       label$20 : {
        if (!(HEAPU8[($15_1 + 80 | 0) >> 0] | 0)) {
         break label$20
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($15_1 + 28 | 0) >> 2] | 0;
       }
       label$21 : {
        if (!$14_1) {
         break label$21
        }
        $15_1 = $2_1 + 48 | 0;
        label$22 : {
         if (!(HEAPU8[($14_1 + 40 | 0) >> 0] | 0)) {
          break label$22
         }
         HEAP32[($2_1 + 32 | 0) >> 2] = $15_1;
         $15_1 = $323($15_1 | 0, $14_1 | 0) | 0;
        }
        label$23 : {
         if (!(HEAPU8[($14_1 + 41 | 0) >> 0] | 0)) {
          break label$23
         }
         HEAP32[($2_1 + 36 | 0) >> 2] = $15_1;
         $823($15_1 | 0, $14_1 + 8 | 0 | 0, 16 | 0) | 0;
         $15_1 = $15_1 + 16 | 0;
        }
        if (!(HEAPU8[($14_1 + 42 | 0) >> 0] | 0)) {
         break label$21
        }
        HEAP32[($2_1 + 40 | 0) >> 2] = $15_1;
        $823($15_1 | 0, $14_1 + 24 | 0 | 0, 16 | 0) | 0;
       }
       label$24 : {
        if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$2;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        HEAP32[$8_1 >> 2] = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
        $242_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $9_1;
        HEAP32[i64toi32_i32$1 >> 2] = $242_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$1 = $3_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $20_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        HEAP32[($3_1 + 4 | 0) >> 2] = $19_1;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$1 = $3_1;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $18_1;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
        $250_1 = i64toi32_i32$1;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$250_1 >> 2] = $39_1;
        $827(23931 | 0, $3_1 | 0);
       }
       HEAP32[$2_1 >> 2] = 0;
       label$25 : {
        label$26 : {
         $15_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
         if (!$15_1) {
          break label$26
         }
         HEAP32[$15_1 >> 2] = $2_1;
         break label$25;
        }
        HEAP32[($10_1 + 28 | 0) >> 2] = $2_1;
       }
       HEAP32[($10_1 + 32 | 0) >> 2] = $2_1;
       $12_1 = $12_1 + 1 | 0;
       if ($12_1 >>> 0 < (HEAP32[($0_1 + 640 | 0) >> 2] | 0) >>> 0) {
        continue label$14
       }
       break label$14;
      };
     }
     HEAP32[$10_1 >> 2] = 0;
     $2_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
     HEAP32[($2_1 ? $2_1 : $5_1) >> 2] = $10_1;
     HEAP32[($1_1 + 52 | 0) >> 2] = $10_1;
     $335(23760 | 0, $6_1 | 0);
     i64toi32_i32$1 = $73($4_1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $72($4_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    }
    if ($76($4_1 | 0, 12 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$27 : {
   $17_1 = $3_1 + 112 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
 }
 
 function $320($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $14_1 = 0, $17_1 = 0, $17$hi = 0, $20_1 = 0, $20$hi = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   $14_1 = $2_1;
   i64toi32_i32$2 = $0_1 + 408 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 400 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$2 = $17_1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   $2_1 = $50($14_1 | 0, $6_1 | 0, i64toi32_i32$5 | 0, 12 | 0, $3_1 + 44 | 0 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $800($2_1 | 0, 24756 | 0);
   $762($3_1 + 24 | 0 | 0, $2_1 | 0);
   label$4 : {
    if (!($329($3_1 + 24 | 0 | 0, $3_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (440786851 | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(24761 | 0, $3_1 | 0);
    }
    HEAP8[($1_1 + 56 | 0) >> 0] = 1;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $1_1 + 64 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
   }
   $735($2_1 | 0);
  }
  label$6 : {
   $5_1 = $3_1 + 48 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 947 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       i64toi32_i32$0 = 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       break label$6;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$8 : {
    $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$8
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0)) {
        break label$11
       }
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 40 | 0) >> 2] = 0;
       HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$0;
       break label$10;
      }
      HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$9;
    };
   }
   label$12 : {
    $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$12
    }
    label$13 : while (1) {
     label$14 : {
      label$15 : {
       if (($2_1 | 0) != (HEAP32[($1_1 + 52 | 0) >> 2] | 0 | 0)) {
        break label$15
       }
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 48 | 0) >> 2] = 0;
       HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
       break label$14;
      }
      HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
     }
     label$16 : {
      label$17 : while (1) {
       $0_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$16
       }
       label$18 : {
        label$19 : {
         if (($0_1 | 0) != (HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0)) {
          break label$19
         }
         i64toi32_i32$0 = 0;
         HEAP32[($2_1 + 28 | 0) >> 2] = 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
         break label$18;
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
       }
       $815($0_1 | 0);
       continue label$17;
      };
     }
     $815($2_1 | 0);
     $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$13
     }
     break label$13;
    };
   }
   label$20 : {
    $0_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$20
    }
    $815($0_1 | 0);
   }
   $815($1_1 | 0);
   return;
  }
  $859(24815 | 0, 23339 | 0, 950 | 0);
  abort();
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 48 | 0) | 0;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $823($0_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 + (HEAP32[$1_1 >> 2] | 0) | 0 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 40 | 0) | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 88 | 0) | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 8 | 0) | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $19_1 = 0, $7_1 = 0, $6_1 = 0, $68$hi = 0, $71$hi = 0, $88_1 = 0, $88$hi = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $6_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) < (4 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      $4_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!($4_1 & 128 | 0)) {
       break label$6
      }
      $5_1 = $4_1 & 127 | 0;
      $4_1 = 1;
      break label$5;
     }
     label$7 : {
      if (!($4_1 & 64 | 0)) {
       break label$7
      }
      $5_1 = ($4_1 << 8 | 0) & 16128 | 0 | (HEAPU8[($3_1 + 1 | 0) >> 0] | 0) | 0;
      $4_1 = 2;
      break label$5;
     }
     if (!($4_1 & 32 | 0)) {
      break label$4
     }
     $5_1 = (HEAPU8[($3_1 + 1 | 0) >> 0] | 0) << 8 | 0 | (($4_1 << 16 | 0) & 2031616 | 0) | 0 | (HEAPU8[($3_1 + 2 | 0) >> 0] | 0) | 0;
     $4_1 = 3;
    }
    HEAP32[$0_1 >> 2] = $3_1 + $4_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
    i64toi32_i32$0 = 0;
    $8_1 = $5_1;
    $8$hi = i64toi32_i32$0;
    break label$3;
   }
   label$8 : {
    $4_1 = $764($0_1 | 0) | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$8
    }
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    $2_1 = 0;
    label$9 : {
     if ($4_1 & 128 | 0) {
      break label$9
     }
     label$10 : while (1) {
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $19_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $19_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $68$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $71$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $68$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = $71$hi;
      i64toi32_i32$3 = $772($0_1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $8_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$2;
      $2_1 = $2_1 + 1 | 0;
      if (!(($4_1 << $2_1 | 0) & 128 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$0 = ((127 >>> $2_1 | 0) & $4_1 | 0) << ($2_1 << 3 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $88_1 = i64toi32_i32$0;
    $88$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = $88$hi;
    i64toi32_i32$3 = $88_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    break label$3;
   }
   label$11 : {
    if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[$1_1 >> 2] = $0_1;
    $827(24822 | 0, $1_1 | 0);
   }
   $766($0_1 | 0, ($770($0_1 | 0) | 0) + 1 | 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $8_1 = 0;
   $8$hi = i64toi32_i32$0;
  }
  label$12 : {
   $7_1 = $1_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $20_1 = 0, $8_1 = 0, $7_1 = 0, $119_1 = 0, $126_1 = 0, $126$hi = 0, $134$hi = 0, $21_1 = 0, $140_1 = 0, $140$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) < (6 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $5_1 = HEAPU8[$4_1 >> 0] | 0;
      if (!($5_1 & 128 | 0)) {
       break label$6
      }
      $6_1 = $4_1;
      break label$5;
     }
     if (!($5_1 & 64 | 0)) {
      break label$4
     }
     $6_1 = $4_1 + 1 | 0;
     $5_1 = $5_1 << 8 | 0 | (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) | 0;
    }
    HEAP32[$1_1 >> 2] = $5_1;
    label$7 : {
     label$8 : {
      $5_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
      if (!($5_1 & 128 | 0)) {
       break label$8
      }
      $5_1 = $5_1 & 127 | 0;
      if (($5_1 | 0) != (127 | 0)) {
       break label$7
      }
      break label$4;
     }
     label$9 : {
      if (!($5_1 & 64 | 0)) {
       break label$9
      }
      $5_1 = ($5_1 << 8 | 0) & 16128 | 0 | (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) | 0;
      if (($5_1 | 0) == (16383 | 0)) {
       break label$4
      }
      $6_1 = $6_1 + 1 | 0;
      break label$7;
     }
     if (!($5_1 & 32 | 0)) {
      break label$4
     }
     $5_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 8 | 0 | (($5_1 << 16 | 0) & 2031616 | 0) | 0 | (HEAPU8[($6_1 + 3 | 0) >> 0] | 0) | 0;
     if (($5_1 | 0) == (2097151 | 0)) {
      break label$4
     }
     $6_1 = $6_1 + 2 | 0;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = $6_1 + 2 | 0;
    HEAP32[$0_1 >> 2] = $5_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = ($3_1 - $5_1 | 0) + $4_1 | 0;
    $5_1 = 1;
    break label$3;
   }
   label$10 : {
    label$11 : {
     $3_1 = $764($0_1 | 0) | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$11
     }
     label$12 : {
      label$13 : {
       if (!($3_1 & 128 | 0)) {
        break label$13
       }
       $5_1 = $3_1;
       break label$12;
      }
      $6_1 = 0;
      $5_1 = $3_1;
      label$14 : while (1) {
       $5_1 = $5_1 << 8 | 0 | ($772($0_1 | 0) | 0) | 0;
       $6_1 = $6_1 + 1 | 0;
       if (!(($3_1 << $6_1 | 0) & 128 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     HEAP32[$1_1 >> 2] = $5_1;
     $6_1 = $754($0_1 | 0) | 0;
     i64toi32_i32$0 = $328($0_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $119_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $119_1;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$10
     }
     $3_1 = $754($0_1 | 0) | 0;
     $5_1 = 1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $126_1 = i64toi32_i32$1;
     $126$hi = i64toi32_i32$0;
     $6_1 = $3_1 - $6_1 | 0;
     $3_1 = Math_imul($6_1, 7);
     i64toi32_i32$0 = 0;
     $134$hi = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = $134$hi;
     i64toi32_i32$3 = 64 - $3_1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$4 = $3_1 >>> 0 < 65 >>> 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ? $20_1 : 0;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
     i64toi32_i32$2 = $6_1;
     $21_1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $6_1 ? $21_1 : 0;
     i64toi32_i32$4 = $6_1 ? i64toi32_i32$0 : i64toi32_i32$3;
     $140_1 = i64toi32_i32$1;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $126$hi;
     i64toi32_i32$2 = $126_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $140_1;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$3
     }
     label$15 : {
      if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$15
      }
      if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      HEAP32[$2_1 >> 2] = $0_1;
      $827(24915 | 0, $2_1 | 0);
     }
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$2 = -1;
     HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = -2;
     HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
     break label$3;
    }
    if (($3_1 | 0) == (-1 | 0)) {
     break label$10
    }
    label$16 : {
     if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$16
     }
     if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$16
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(24880 | 0, $2_1 + 16 | 0 | 0);
    }
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[i64toi32_i32$4 >> 2] = -1;
    $5_1 = 1;
    break label$3;
   }
   $5_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  label$17 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $4$hi = 0, $4_1 = 0, $2_1 = 0, $5$hi = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0;
  i64toi32_i32$0 = 0;
  $4_1 = 0;
  $4$hi = i64toi32_i32$0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($3_1 | 0) < (1 | 0)) {
       break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + -1 | 0;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
      $3_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$3;
     }
     $3_1 = $764($0_1 | 0) | 0;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $13_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $13_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $4_1 = $13_1;
    $4$hi = i64toi32_i32$1;
    label$5 : {
     label$6 : {
      if ($2_1) {
       break label$6
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 56;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $14_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $14_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 56;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $15_1 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $5_1 = $15_1;
      $5$hi = i64toi32_i32$0;
      break label$5;
     }
     i64toi32_i32$0 = 0;
     $5_1 = $3_1 & 255 | 0;
     $5$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $331($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $14_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $19$hi = 0, $15_1 = 0, $16_1 = 0, $10_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $18_1 = 0, $17_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $431_1 = 0, $534_1 = 0, $559_1 = 0, $611_1 = 0, $675_1 = 0, $710_1 = 0, $735_1 = 0, $735$hi = 0, $856_1 = 0, $856$hi = 0, $900_1 = 0;
  label$1 : {
   $5_1 = global$0 - 944 | 0;
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       label$8 : {
        if (!$2_1) {
         break label$8
        }
        $6_1 = ($754($0_1 | 0) | 0) + $1_1 | 0;
        $7_1 = 0;
        label$9 : {
         if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == (14 | 0)) {
          break label$9
         }
         $8_1 = $2_1 + 4 | 0;
         $9_1 = $2_1;
         label$10 : while (1) {
          label$11 : {
           $1_1 = $9_1;
           if ((HEAPU16[($1_1 + 14 | 0) >> 1] | 0 | 0) == (1 | 0)) {
            break label$11
           }
           if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           $9_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
           $10_1 = HEAPU16[($1_1 + 14 | 0) >> 1] | 0;
           HEAP32[(($5_1 + 896 | 0) + 20 | 0) >> 2] = 1;
           HEAP32[(($5_1 + 896 | 0) + 16 | 0) >> 2] = $10_1;
           HEAP32[($5_1 + 908 | 0) >> 2] = $9_1;
           HEAP32[($5_1 + 904 | 0) >> 2] = $3_1;
           HEAP32[($5_1 + 900 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 896 | 0) >> 2] = 25113;
           $827(25067 | 0, $5_1 + 896 | 0 | 0);
          }
          label$12 : {
           label$13 : {
            switch (HEAP32[$8_1 >> 2] | 0 | 0) {
            case 0:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 500 | 0) >> 2] = 4;
             HEAP32[($5_1 + 496 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 492 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 488 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 484 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 480 | 0) >> 2] = 25113;
             $827(25132 | 0, $5_1 + 480 | 0 | 0);
             break label$4;
            case 7:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 532 | 0) >> 2] = 4;
             HEAP32[($5_1 + 528 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 524 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 520 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 516 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 512 | 0) >> 2] = 25113;
             $827(25187 | 0, $5_1 + 512 | 0 | 0);
             break label$4;
            case 6:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 564 | 0) >> 2] = 8;
             HEAP32[($5_1 + 560 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 556 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 552 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 548 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 544 | 0) >> 2] = 25113;
             $827(25235 | 0, $5_1 + 544 | 0 | 0);
             break label$4;
            case 1:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 596 | 0) >> 2] = 4;
             HEAP32[($5_1 + 592 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 588 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 584 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 580 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 576 | 0) >> 2] = 25113;
             $827(25292 | 0, $5_1 + 576 | 0 | 0);
             break label$4;
            case 2:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (16 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 628 | 0) >> 2] = 16;
             HEAP32[(($5_1 + 608 | 0) + 16 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 620 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 616 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 612 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 608 | 0) >> 2] = 25113;
             $827(25347 | 0, $5_1 + 608 | 0 | 0);
             break label$4;
            case 3:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 660 | 0) >> 2] = 8;
             HEAP32[($5_1 + 656 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 652 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 648 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 644 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 640 | 0) >> 2] = 25113;
             $827(25402 | 0, $5_1 + 640 | 0 | 0);
             break label$4;
            case 4:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 692 | 0) >> 2] = 8;
             HEAP32[($5_1 + 688 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 684 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 680 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 676 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 672 | 0) >> 2] = 25113;
             $827(25452 | 0, $5_1 + 672 | 0 | 0);
             break label$4;
            case 8:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 724 | 0) >> 2] = 8;
             HEAP32[($5_1 + 720 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 716 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 712 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 708 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 704 | 0) >> 2] = 25113;
             $827(25503 | 0, $5_1 + 704 | 0 | 0);
             break label$4;
            case 11:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 756 | 0) >> 2] = 8;
             HEAP32[($5_1 + 752 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 748 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 744 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 740 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 736 | 0) >> 2] = 25113;
             $827(25553 | 0, $5_1 + 736 | 0 | 0);
             break label$4;
            case 10:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 788 | 0) >> 2] = 8;
             HEAP32[($5_1 + 784 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 780 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 776 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 772 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 768 | 0) >> 2] = 25113;
             $827(25603 | 0, $5_1 + 768 | 0 | 0);
             break label$4;
            case 9:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (12 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 820 | 0) >> 2] = 12;
             HEAP32[($5_1 + 816 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 812 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 808 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 804 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 800 | 0) >> 2] = 25113;
             $827(25503 | 0, $5_1 + 800 | 0 | 0);
             break label$4;
            case 12:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (1 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 852 | 0) >> 2] = 4;
             HEAP32[($5_1 + 848 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 844 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 840 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 836 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 832 | 0) >> 2] = 25113;
             $827(25655 | 0, $5_1 + 832 | 0 | 0);
             break label$4;
            case 13:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 884 | 0) >> 2] = 8;
             HEAP32[($5_1 + 880 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 876 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 872 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 868 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 864 | 0) >> 2] = 25113;
             $827(25705 | 0, $5_1 + 864 | 0 | 0);
             break label$4;
            case 5:
            case 14:
             break label$12;
            default:
             break label$13;
            };
           }
           if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$4
           }
           $1_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
           HEAP32[($5_1 + 464 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
           HEAP32[($5_1 + 460 | 0) >> 2] = $1_1;
           HEAP32[($5_1 + 456 | 0) >> 2] = $3_1;
           HEAP32[($5_1 + 452 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 448 | 0) >> 2] = 25113;
           $827(25755 | 0, $5_1 + 448 | 0 | 0);
           break label$4;
          }
          $9_1 = $1_1 + 20 | 0;
          $7_1 = $7_1 + 1 | 0;
          $8_1 = $1_1 + 24 | 0;
          if ((HEAP32[$8_1 >> 2] | 0 | 0) != (14 | 0)) {
           continue label$10
          }
          break label$10;
         };
        }
        $1_1 = 1;
        if (($754($0_1 | 0) | 0) >>> 0 >= $6_1 >>> 0) {
         break label$3
        }
        $9_1 = $7_1 >>> 0 > 1 >>> 0 ? $7_1 : 1;
        $11_1 = !$7_1;
        $12_1 = ($5_1 + 416 | 0) + 16 | 0;
        $13_1 = $5_1 + 440 | 0;
        $1_1 = 0;
        label$27 : {
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $8_1 = $2_1 + Math_imul($1_1, 20) | 0;
            if (HEAP32[$8_1 >> 2] | 0) {
             break label$30
            }
            $1_1 = $1_1 + 1 | 0;
            break label$29;
           }
           if (!($329($0_1 | 0, $5_1 + 928 | 0 | 0) | 0)) {
            break label$4
           }
           label$31 : {
            label$32 : {
             label$33 : {
              if ($1_1 >>> 0 >= $7_1 >>> 0) {
               break label$33
              }
              $431_1 = HEAP32[$8_1 >> 2] | 0;
              $8_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
              $10_1 = ($431_1 | 0) == ($8_1 | 0);
              if (!($10_1 | $11_1 | 0)) {
               break label$32
              }
              $1_1 = $10_1 ? $1_1 : 0;
              break label$31;
             }
             label$34 : {
              if ($7_1) {
               break label$34
              }
              $1_1 = 0;
              break label$31;
             }
             $8_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
            }
            $1_1 = 0;
            label$35 : while (1) {
             if ((HEAP32[($2_1 + Math_imul($1_1, 20) | 0) >> 2] | 0 | 0) == ($8_1 | 0)) {
              break label$31
             }
             $1_1 = $1_1 + 1 | 0;
             if (($1_1 | 0) != ($9_1 | 0)) {
              continue label$35
             }
             break label$35;
            };
            $1_1 = $9_1;
           }
           $8_1 = $2_1 + Math_imul($1_1, 20) | 0;
           $10_1 = $8_1 + 4 | 0;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) == (14 | 0)) {
                 break label$40
                }
                label$41 : {
                 if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$41
                 }
                 if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$41
                 }
                 $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                 HEAP32[$12_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
                 HEAP32[(($5_1 + 416 | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
                 i64toi32_i32$2 = $5_1;
                 i64toi32_i32$0 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                 HEAP32[$13_1 >> 2] = i64toi32_i32$0;
                 HEAP32[($5_1 + 416 | 0) >> 2] = 25113;
                 HEAP32[($5_1 + 420 | 0) >> 2] = $0_1;
                 HEAP32[($5_1 + 424 | 0) >> 2] = $3_1;
                 HEAP32[($5_1 + 428 | 0) >> 2] = $14_1;
                 $827(25795 | 0, $5_1 + 416 | 0 | 0);
                }
                HEAP8[($4_1 + (HEAPU16[($8_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 1;
                $1_1 = $1_1 + 1 | 0;
                $14_1 = $4_1 + (HEAPU16[($8_1 + 8 | 0) >> 1] | 0) | 0;
                label$42 : {
                 switch (HEAP32[$10_1 >> 2] | 0 | 0) {
                 case 0:
                 case 6:
                 case 7:
                 case 12:
                  label$53 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$0 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$1;
                   $19$hi = i64toi32_i32$0;
                   i64toi32_i32$2 = $19_1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$3 = 8;
                   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
                    break label$53
                   }
                   i64toi32_i32$2 = $19$hi;
                   i64toi32_i32$2 = $332($0_1 | 0, $19_1 | 0) | 0;
                   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                   $19_1 = i64toi32_i32$2;
                   $19$hi = i64toi32_i32$0;
                   label$54 : {
                    $15_1 = HEAP32[$10_1 >> 2] | 0;
                    if (($15_1 | 0) == (6 | 0)) {
                     break label$54
                    }
                    label$55 : {
                     if (($15_1 | 0) == (12 | 0)) {
                      break label$55
                     }
                     label$56 : {
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$3 = $19_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$1 = -2;
                      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                       break label$56
                      }
                      i64toi32_i32$3 = $19$hi;
                      HEAP32[$14_1 >> 2] = $19_1;
                      break label$38;
                     }
                     if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$36
                     }
                     $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                     i64toi32_i32$3 = $19$hi;
                     HEAP32[(($5_1 + 32 | 0) + 20 | 0) >> 2] = $19_1;
                     $534_1 = ($5_1 + 32 | 0) + 16 | 0;
                     i64toi32_i32$1 = $19_1;
                     i64toi32_i32$0 = 0;
                     i64toi32_i32$2 = 32;
                     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                      i64toi32_i32$0 = 0;
                      $38_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                     } else {
                      i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                      $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                     }
                     HEAP32[$534_1 >> 2] = $38_1;
                     HEAP32[($5_1 + 44 | 0) >> 2] = $14_1;
                     HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
                     HEAP32[($5_1 + 36 | 0) >> 2] = $0_1;
                     HEAP32[($5_1 + 32 | 0) >> 2] = 25113;
                     $827(25847 | 0, $5_1 + 32 | 0 | 0);
                     break label$36;
                    }
                    label$57 : {
                     label$58 : {
                      i64toi32_i32$0 = $19$hi;
                      switch ($19_1 | 0) {
                      case 0:
                       break label$39;
                      case 1:
                       break label$58;
                      default:
                       break label$57;
                      };
                     }
                     HEAP8[$14_1 >> 0] = 1;
                     break label$38;
                    }
                    if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$36
                    }
                    $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                    i64toi32_i32$0 = $19$hi;
                    HEAP32[(($5_1 + 64 | 0) + 20 | 0) >> 2] = $19_1;
                    $559_1 = ($5_1 + 64 | 0) + 16 | 0;
                    i64toi32_i32$3 = $19_1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                     i64toi32_i32$1 = 0;
                     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                    } else {
                     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                    }
                    HEAP32[$559_1 >> 2] = $39_1;
                    HEAP32[($5_1 + 76 | 0) >> 2] = $14_1;
                    HEAP32[($5_1 + 72 | 0) >> 2] = $3_1;
                    HEAP32[($5_1 + 68 | 0) >> 2] = $0_1;
                    HEAP32[($5_1 + 64 | 0) >> 2] = 25113;
                    $827(25909 | 0, $5_1 + 64 | 0 | 0);
                    break label$36;
                   }
                   i64toi32_i32$1 = $19$hi;
                   i64toi32_i32$3 = $14_1;
                   HEAP32[i64toi32_i32$3 >> 2] = $19_1;
                   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$1 = $19$hi;
                  HEAP32[(($5_1 + 96 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 108 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 104 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 100 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 96 | 0) >> 2] = 25113;
                  $827(25962 | 0, $5_1 + 96 | 0 | 0);
                  break label$37;
                 case 1:
                  label$59 : {
                   i64toi32_i32$0 = $5_1;
                   i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$3 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$1;
                   $19$hi = i64toi32_i32$3;
                   i64toi32_i32$0 = $19_1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$2 = 8;
                   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & $19_1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                    break label$59
                   }
                   label$60 : {
                    i64toi32_i32$0 = $19$hi;
                    i64toi32_i32$0 = $330($0_1 | 0, $19_1 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $19_1 = i64toi32_i32$0;
                    $19$hi = i64toi32_i32$3;
                    i64toi32_i32$2 = $19_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$1 = 2147483646;
                    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                    }
                    i64toi32_i32$3 = i64toi32_i32$4;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$1 = -3;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
                     break label$60
                    }
                    if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$36
                    }
                    $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                    i64toi32_i32$3 = $19$hi;
                    HEAP32[(($5_1 + 128 | 0) + 20 | 0) >> 2] = $19_1;
                    $611_1 = ($5_1 + 128 | 0) + 16 | 0;
                    i64toi32_i32$1 = $19_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                     i64toi32_i32$5 = 0;
                     $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                    } else {
                     i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                     $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
                    }
                    HEAP32[$611_1 >> 2] = $40_1;
                    HEAP32[($5_1 + 140 | 0) >> 2] = $14_1;
                    HEAP32[($5_1 + 136 | 0) >> 2] = $3_1;
                    HEAP32[($5_1 + 132 | 0) >> 2] = $0_1;
                    HEAP32[($5_1 + 128 | 0) >> 2] = 25113;
                    $827(26019 | 0, $5_1 + 128 | 0 | 0);
                    break label$36;
                   }
                   i64toi32_i32$5 = $19$hi;
                   HEAP32[$14_1 >> 2] = $19_1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$5 = $19$hi;
                  HEAP32[(($5_1 + 160 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 172 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 168 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 164 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 160 | 0) >> 2] = 25113;
                  $827(26079 | 0, $5_1 + 160 | 0 | 0);
                  break label$37;
                 case 2:
                  label$61 : {
                   i64toi32_i32$3 = $5_1;
                   i64toi32_i32$5 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$5;
                   $19$hi = i64toi32_i32$1;
                   i64toi32_i32$3 = $19_1;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$2 = 16;
                   if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
                    break label$61
                   }
                   $768($0_1 | 0, $14_1 | 0, 16 | 0) | 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[(($5_1 + 192 | 0) + 20 | 0) >> 2] = 16;
                  i64toi32_i32$3 = $19$hi;
                  HEAP32[(($5_1 + 192 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 204 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 200 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 196 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 192 | 0) >> 2] = 25113;
                  $827(26136 | 0, $5_1 + 192 | 0 | 0);
                  break label$37;
                 case 3:
                  label$62 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$3 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$3;
                   $19$hi = i64toi32_i32$1;
                   i64toi32_i32$2 = i64toi32_i32$3;
                   i64toi32_i32$3 = 0;
                   i64toi32_i32$5 = 8;
                   if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
                    break label$62
                   }
                   i64toi32_i32$2 = $780($0_1 | 0) | 0;
                   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                   $675_1 = i64toi32_i32$2;
                   i64toi32_i32$2 = $14_1;
                   HEAP32[$14_1 >> 2] = $675_1;
                   HEAP32[($14_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[(($5_1 + 224 | 0) + 20 | 0) >> 2] = 8;
                  i64toi32_i32$1 = $19$hi;
                  HEAP32[(($5_1 + 224 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 236 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 232 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 228 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 224 | 0) >> 2] = 25113;
                  $827(26191 | 0, $5_1 + 224 | 0 | 0);
                  break label$37;
                 case 4:
                  label$63 : {
                   label$64 : {
                    label$65 : {
                     i64toi32_i32$5 = $5_1;
                     i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                     i64toi32_i32$2 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                     $19_1 = i64toi32_i32$1;
                     $19$hi = i64toi32_i32$2;
                     i64toi32_i32$5 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -4;
                     i64toi32_i32$0 = $19_1 + i64toi32_i32$3 | 0;
                     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                     }
                     switch (i64toi32_i32$0 | 0) {
                     case 4:
                      break label$64;
                     case 0:
                      break label$65;
                     default:
                      break label$63;
                     };
                    }
                    HEAP32[$14_1 >> 2] = $778($0_1 | 0) | 0;
                    HEAPF64[$14_1 >> 3] = +Math_fround(HEAPF32[$14_1 >> 2]);
                    break label$38;
                   }
                   i64toi32_i32$4 = $780($0_1 | 0) | 0;
                   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                   $710_1 = i64toi32_i32$4;
                   i64toi32_i32$4 = $14_1;
                   HEAP32[$14_1 >> 2] = $710_1;
                   HEAP32[($14_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$4 = ($5_1 + 256 | 0) + 20 | 0;
                  i64toi32_i32$5 = 8;
                  HEAP32[i64toi32_i32$4 >> 2] = 4;
                  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
                  i64toi32_i32$5 = $19$hi;
                  HEAP32[(($5_1 + 256 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 268 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 264 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 260 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 256 | 0) >> 2] = 25113;
                  $827(26241 | 0, $5_1 + 256 | 0 | 0);
                  break label$37;
                 case 5:
                  label$66 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$5 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$4 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$5;
                   $19$hi = i64toi32_i32$4;
                   i64toi32_i32$2 = $8_1;
                   i64toi32_i32$4 = HEAPU16[(i64toi32_i32$2 + 10 | 0) >> 1] | 0;
                   i64toi32_i32$5 = 0;
                   $735_1 = i64toi32_i32$4;
                   $735$hi = i64toi32_i32$5;
                   i64toi32_i32$5 = $19$hi;
                   i64toi32_i32$2 = $19_1;
                   i64toi32_i32$4 = $735$hi;
                   i64toi32_i32$3 = $735_1;
                   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                    break label$66
                   }
                   i64toi32_i32$2 = $19$hi;
                   $15_1 = $19_1;
                   $768($0_1 | 0, $14_1 | 0, $19_1 | 0) | 0;
                   HEAP8[($14_1 + $19_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  $15_1 = HEAPU16[($8_1 + 10 | 0) >> 1] | 0;
                  i64toi32_i32$2 = $19$hi;
                  HEAP32[(($5_1 + 288 | 0) + 20 | 0) >> 2] = $19_1;
                  HEAP32[(($5_1 + 288 | 0) + 16 | 0) >> 2] = $15_1;
                  HEAP32[($5_1 + 300 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 296 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 292 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 288 | 0) >> 2] = 25113;
                  $827(26295 | 0, $5_1 + 288 | 0 | 0);
                  break label$37;
                 case 9:
                  if ($333($0_1 | 0, HEAP32[($5_1 + 936 | 0) >> 2] | 0 | 0, $14_1 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
                   break label$38
                  }
                  break label$36;
                 case 10:
                  label$67 : {
                   $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                   if (!$15_1) {
                    break label$67
                   }
                   $815($15_1 | 0);
                  }
                  $16_1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                  $15_1 = $813($16_1 + 1 | 0 | 0) | 0;
                  HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  label$68 : {
                   if (!$15_1) {
                    break label$68
                   }
                   $768($0_1 | 0, $15_1 | 0, $16_1 | 0) | 0;
                   HEAP8[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + $16_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 320 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[($5_1 + 332 | 0) >> 2] = $16_1;
                  HEAP32[($5_1 + 328 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 324 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 320 | 0) >> 2] = 25113;
                  $827(26355 | 0, $5_1 + 320 | 0 | 0);
                  break label$37;
                 case 11:
                  label$69 : {
                   $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                   if (!$15_1) {
                    break label$69
                   }
                   $815($15_1 | 0);
                  }
                  $16_1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                  $15_1 = $813($16_1 | 0) | 0;
                  HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  label$70 : {
                   if (!$15_1) {
                    break label$70
                   }
                   HEAP32[$14_1 >> 2] = $16_1;
                   $768($0_1 | 0, $15_1 | 0, $16_1 | 0) | 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 352 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[($5_1 + 364 | 0) >> 2] = $16_1;
                  HEAP32[($5_1 + 360 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 356 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 352 | 0) >> 2] = 25113;
                  $827(26415 | 0, $5_1 + 352 | 0 | 0);
                  break label$37;
                 case 8:
                  $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                  label$71 : {
                   i64toi32_i32$3 = $5_1;
                   i64toi32_i32$2 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$5 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$2;
                   $19$hi = i64toi32_i32$5;
                   i64toi32_i32$3 = $14_1;
                   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                   i64toi32_i32$2 = 0;
                   $856_1 = i64toi32_i32$5;
                   $856$hi = i64toi32_i32$2;
                   i64toi32_i32$2 = $19$hi;
                   i64toi32_i32$3 = $19_1;
                   i64toi32_i32$5 = $856$hi;
                   i64toi32_i32$4 = $856_1;
                   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
                    break label$71
                   }
                   label$72 : {
                    if (!$15_1) {
                     break label$72
                    }
                    $815($15_1 | 0);
                   }
                   i64toi32_i32$3 = $19$hi;
                   $15_1 = $813($19_1 + 1 | 0 | 0) | 0;
                   HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  }
                  label$73 : {
                   if (!$15_1) {
                    break label$73
                   }
                   i64toi32_i32$3 = $19$hi;
                   $16_1 = $19_1;
                   HEAP32[$14_1 >> 2] = $19_1 + 1 | 0;
                   $768($0_1 | 0, $15_1 | 0, $19_1 | 0) | 0;
                   HEAP8[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + $19_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 384 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$3 = $19$hi;
                  HEAP32[($5_1 + 396 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 392 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 388 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 384 | 0) >> 2] = 25113;
                  $827(26473 | 0, $5_1 + 384 | 0 | 0);
                  break label$37;
                 case 14:
                  break label$40;
                 case 13:
                  break label$42;
                 default:
                  break label$38;
                 };
                }
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$3 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                $900_1 = i64toi32_i32$3;
                i64toi32_i32$3 = $14_1;
                HEAP32[i64toi32_i32$3 >> 2] = $900_1;
                HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
                break label$27;
               }
               $14_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
               if (($14_1 | 0) == (191 | 0)) {
                break label$37
               }
               if (($14_1 | 0) == (236 | 0)) {
                break label$37
               }
               if (($14_1 | 0) == (-1 | 0)) {
                break label$4
               }
               if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                break label$37
               }
               if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$37
               }
               HEAP32[($5_1 + 12 | 0) >> 2] = $14_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
               HEAP32[$5_1 >> 2] = 25113;
               $827(26532 | 0, $5_1 | 0);
               break label$37;
              }
              HEAP8[$14_1 >> 0] = 0;
             }
             if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              break label$29
             }
             if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$36
             }
             HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 16 | 0) >> 2] = 25113;
             $827(26565 | 0, $5_1 + 16 | 0 | 0);
             break label$36;
            }
            $766($0_1 | 0, HEAP32[($5_1 + 936 | 0) >> 2] | 0 | 0) | 0;
           }
           label$74 : {
            if ((HEAP32[$10_1 >> 2] | 0 | 0) == (14 | 0)) {
             break label$74
            }
            HEAP8[($4_1 + (HEAPU16[($8_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 0;
           }
           if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
            break label$29
           }
           $1_1 = 0;
           break label$3;
          }
          if (($754($0_1 | 0) | 0) >>> 0 < $6_1 >>> 0) {
           continue label$28
          }
          break label$28;
         };
        }
        $1_1 = 1;
        break label$3;
       }
       $859(25059 | 0, 24971 | 0, 452 | 0);
       abort();
      }
      $859(25052 | 0, 24971 | 0, 451 | 0);
      abort();
     }
     $859(25047 | 0, 24971 | 0, 450 | 0);
     abort();
    }
    $859(24961 | 0, 24971 | 0, 449 | 0);
    abort();
   }
   $1_1 = 0;
   if (($754($0_1 | 0) | 0) >>> 0 <= $6_1 >>> 0) {
    break label$3
   }
   $766($0_1 | 0, $6_1 - ($754($0_1 | 0) | 0) | 0 | 0) | 0;
  }
  label$75 : {
   $18_1 = $5_1 + 944 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $1_1 | 0;
 }
 
 function $332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, $2_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $39_1 = 0, $40_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $26_1 = 0, $26$hi = 0, $29$hi = 0, $30_1 = 0, $30$hi = 0, $32_1 = 0, $32$hi = 0, $38_1 = 0, $38$hi = 0, $41$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $46_1 = 0, $46$hi = 0, $48_1 = 0, $48$hi = 0, $61$hi = 0, $65$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) < (5 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$0;
     label$4 : {
      label$5 : {
       switch ($1_1 | 0) {
       case 1:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
        i64toi32_i32$1 = 0;
        $4_1 = i64toi32_i32$0;
        $4$hi = i64toi32_i32$1;
        break label$4;
       case 2:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $33_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $33_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $18$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = HEAPU8[(i64toi32_i32$0 + 1 | 0) >> 0] | 0;
        i64toi32_i32$2 = 0;
        $20_1 = i64toi32_i32$1;
        $20$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$0 = $33_1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        $4_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $4$hi = i64toi32_i32$1;
        break label$4;
       case 3:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $34_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $34_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $26_1 = $34_1;
        $26$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = HEAPU8[i64toi32_i32$0 >> 0] | 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 16;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $35_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $35_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $29$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$2 = $26_1;
        i64toi32_i32$0 = $29$hi;
        i64toi32_i32$3 = $35_1;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        $30_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
        $30$hi = i64toi32_i32$0;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0;
        i64toi32_i32$2 = 0;
        $32_1 = i64toi32_i32$0;
        $32$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $30$hi;
        i64toi32_i32$1 = $30_1;
        i64toi32_i32$0 = $32$hi;
        i64toi32_i32$3 = $32_1;
        i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        $4$hi = i64toi32_i32$0;
        break label$4;
       case 0:
        break label$1;
       case 4:
        break label$5;
       default:
        break label$2;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $36_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $36_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $38_1 = $36_1;
      $38$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 24;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $37_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $37_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $41$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$2 = $38_1;
      i64toi32_i32$1 = $41$hi;
      i64toi32_i32$3 = $37_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $42_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $42$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$0 + 2 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $39_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $39_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $45$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $42$hi;
      i64toi32_i32$2 = $42_1;
      i64toi32_i32$0 = $45$hi;
      i64toi32_i32$3 = $39_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $46_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $46$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $48_1 = i64toi32_i32$0;
      $48$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $46$hi;
      i64toi32_i32$1 = $46_1;
      i64toi32_i32$0 = $48$hi;
      i64toi32_i32$3 = $48_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - $1_1 | 0;
     HEAP32[$0_1 >> 2] = $3_1 + $1_1 | 0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
     return i64toi32_i32$1 | 0;
    }
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   }
   i64toi32_i32$0 = 0;
   $4_1 = 0;
   $4$hi = i64toi32_i32$0;
   label$9 : while (1) {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $40_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $61$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $65$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $61$hi;
    i64toi32_i32$0 = $40_1;
    i64toi32_i32$2 = $65$hi;
    i64toi32_i32$3 = ($764($0_1 | 0) | 0) & 255 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$2;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$9
    }
    break label$9;
   };
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[$2_1 >> 2] | 0;
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 <= $6_1 >>> 0) {
         break label$8
        }
        $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        break label$7;
       }
       $7_1 = Math_imul($5_1, 3) >>> 1 | 0;
       $8_1 = $7_1 + 1 | 0;
       $5_1 = $813(Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, $8_1) | 0) | 0;
       $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $6_1 >>> 0) {
        break label$4
       }
       if (!$5_1) {
        break label$6
       }
       label$9 : {
        label$10 : {
         if ($6_1) {
          break label$10
         }
         $6_1 = 0;
         break label$9;
        }
        $7_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$3
        }
        $823($5_1 | 0, $7_1 | 0, Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, $6_1) | 0) | 0;
        $815(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       HEAP32[$2_1 >> 2] = $8_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      }
      $7_1 = 1;
      $8_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      if ($334($0_1 | 0, $3_1 | 0, $1_1 | 0, $5_1 + Math_imul($8_1, $6_1) | 0 | 0) | 0) {
       break label$5
      }
      $769($0_1 | 0, $4_1 + 8 | 0 | 0);
      $766($0_1 | 0, $1_1 | 0) | 0;
     }
     $7_1 = 0;
    }
    label$11 : {
     $10_1 = $4_1 + 16 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $7_1 | 0;
   }
   $859(27857 | 0, 24971 | 0, 384 | 0);
   abort();
  }
  $859(27886 | 0, 24971 | 0, 389 | 0);
  abort();
 }
 
 function $334($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $9$hi = 0, i64toi32_i32$3 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $8_1 = 0, $7_1 = 0, $58_1 = 0, $81_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    FUNCTION_TABLE[$5_1]($3_1);
    break label$3;
   }
   $822($3_1 | 0, 0 | 0, HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     if (HEAP32[$5_1 >> 2] | 0) {
      break label$7
     }
     if ($2_1 >>> 0 >= 9 >>> 0) {
      break label$5
     }
     $6_1 = $3_1 + (HEAPU16[($5_1 + 8 | 0) >> 1] | 0) | 0;
     i64toi32_i32$0 = $332($0_1 | 0, $2_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     label$8 : {
      label$9 : {
       $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (6 | 0)) {
        break label$9
       }
       label$10 : {
        if (($2_1 | 0) == (12 | 0)) {
         break label$10
        }
        label$11 : {
         i64toi32_i32$1 = $9$hi;
         i64toi32_i32$2 = $9_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = -2;
         if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
          break label$11
         }
         i64toi32_i32$2 = $9$hi;
         HEAP32[$6_1 >> 2] = $9_1;
         break label$8;
        }
        $2_1 = 0;
        if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$6
        }
        $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = $9$hi;
        HEAP32[($4_1 + 20 | 0) >> 2] = $9_1;
        $58_1 = $4_1 + 16 | 0;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $18_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$58_1 >> 2] = $18_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 25113;
        $827(25847 | 0, $4_1 | 0);
        break label$6;
       }
       label$12 : {
        label$13 : {
         label$14 : {
          i64toi32_i32$1 = $9$hi;
          switch ($9_1 | 0) {
          case 1:
           break label$13;
          case 0:
           break label$14;
          default:
           break label$12;
          };
         }
         HEAP8[$6_1 >> 0] = 0;
         break label$8;
        }
        HEAP8[$6_1 >> 0] = 1;
        break label$8;
       }
       $2_1 = 0;
       if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = $9$hi;
       HEAP32[($4_1 + 52 | 0) >> 2] = $9_1;
       $81_1 = $4_1 + 48 | 0;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       HEAP32[$81_1 >> 2] = $19_1;
       HEAP32[($4_1 + 44 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
       HEAP32[($4_1 + 32 | 0) >> 2] = 25113;
       $827(25909 | 0, $4_1 + 32 | 0 | 0);
       break label$6;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = $9$hi;
      HEAP32[i64toi32_i32$2 >> 2] = $9_1;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = $9$hi;
     }
     $2_1 = 1;
     HEAP8[($3_1 + (HEAPU16[($5_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 1;
     break label$6;
    }
    $2_1 = $331($0_1 | 0, $2_1 | 0, $5_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
   }
   label$15 : {
    $8_1 = $4_1 + 64 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return $2_1 | 0;
  }
  $859(31043 | 0, 24971 | 0, 340 | 0);
  abort();
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) == (14 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      HEAP8[($1_1 + (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 0;
      $3_1 = $1_1 + (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ($2_1 + -8 | 0 | 0) {
          case 2:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 3:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 0:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 1:
           break label$8;
          default:
           break label$5;
          };
         }
         $336($3_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
         break label$5;
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 0;
       }
       HEAP32[$3_1 >> 2] = 0;
      }
      $3_1 = $0_1 + 24 | 0;
      $0_1 = $0_1 + 20 | 0;
      $2_1 = HEAP32[$3_1 >> 2] | 0;
      if (($2_1 | 0) != (14 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    return;
   }
   $859(25047 | 0, 24971 | 0, 782 | 0);
   abort();
  }
  $859(25059 | 0, 24971 | 0, 781 | 0);
  abort();
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = 0;
   label$2 : while (1) {
    $335(HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, $2_1 | 0);
    $2_1 = $2_1 + (HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1 >>> 0 < (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$3
   }
   $815($2_1 | 0);
  }
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $337($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $13_1 = 0, $6_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $25_1 = 0, $8_1 = 0, $26_1 = 0, $16_1 = 0, $15_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $17_1 = 0, $17$hi = 0, $110_1 = 0;
  label$1 : {
   $5_1 = global$0 - 368 | 0;
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if (!$4_1) {
      break label$4
     }
     if (!$3_1) {
      break label$3
     }
     label$6 : {
      $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($6_1 | 0) == (14 | 0)) {
       break label$6
      }
      $7_1 = 33 - ($5_1 + 320 | 0) | 0;
      $8_1 = ($5_1 + 320 | 0) + 33 | 0;
      $9_1 = $1_1 + -2 | 0;
      $10_1 = $5_1 + 16 | 0;
      label$7 : while (1) {
       label$8 : {
        $11_1 = $0_1;
        if (!(HEAPU8[($4_1 + (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >> 0] | 0)) {
         break label$8
        }
        $0_1 = HEAPU16[($11_1 + 8 | 0) >> 1] | 0;
        $12_1 = 0;
        HEAP8[($5_1 + 320 | 0) >> 0] = 0;
        $13_1 = $4_1 + $0_1 | 0;
        $14_1 = $5_1 + 320 | 0;
        $0_1 = $14_1;
        label$9 : {
         label$10 : {
          switch ($6_1 | 0) {
          case 12:
           $14_1 = HEAPU8[$13_1 >> 0] | 0 ? 26601 : 26604;
           break label$9;
          case 0:
           label$23 : {
            $0_1 = HEAP32[$13_1 >> 2] | 0;
            if ($0_1 >>> 0 > 32 >>> 0) {
             break label$23
            }
            HEAP32[($5_1 + 128 | 0) >> 2] = $0_1;
            $820($5_1 + 320 | 0 | 0, 33 | 0, 26608 | 0, $5_1 + 128 | 0 | 0) | 0;
            break label$9;
           }
           HEAP32[($5_1 + 148 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 144 | 0) >> 2] = $0_1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26611 | 0, $5_1 + 144 | 0 | 0) | 0;
           break label$9;
          case 7:
           HEAP32[($5_1 + 160 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26618 | 0, $5_1 + 160 | 0 | 0) | 0;
           break label$9;
          case 6:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$0 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           $0_1 = i64toi32_i32$0;
           label$24 : {
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 15;
            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $0_1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$24
            }
            HEAP32[($5_1 + 176 | 0) >> 2] = $0_1;
            $820($5_1 + 320 | 0 | 0, 33 | 0, 26622 | 0, $5_1 + 176 | 0 | 0) | 0;
            break label$9;
           }
           HEAP32[($5_1 + 200 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 192 | 0) >> 2] = $0_1;
           $110_1 = $5_1;
           i64toi32_i32$2 = $17$hi;
           i64toi32_i32$3 = $17_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 32;
           i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP32[($110_1 + 196 | 0) >> 2] = $26_1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26626 | 0, $5_1 + 192 | 0 | 0) | 0;
           break label$9;
          case 1:
           HEAP32[($5_1 + 208 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26639 | 0, $5_1 + 208 | 0 | 0) | 0;
           break label$9;
          case 11:
           HEAP32[($5_1 + 240 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $0_1 = $820($5_1 + 320 | 0 | 0, 33 | 0, 26642 | 0, $5_1 + 240 | 0 | 0) | 0;
           if (($0_1 | 0) < (0 | 0)) {
            break label$9
           }
           $6_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           if (!$6_1) {
            break label$9
           }
           $0_1 = ($5_1 + 320 | 0) + $0_1 | 0;
           $12_1 = 0;
           label$25 : while (1) {
            if ((HEAP32[$13_1 >> 2] | 0) >>> 0 <= $12_1 >>> 0) {
             break label$9
            }
            label$26 : {
             if ($0_1 >>> 0 < $8_1 >>> 0) {
              break label$26
             }
             $25_1 = 3026478;
             HEAP8[($5_1 + 349 | 0) >> 0] = $25_1;
             HEAP8[($5_1 + 350 | 0) >> 0] = $25_1 >>> 8 | 0;
             HEAP8[($5_1 + 351 | 0) >> 0] = $25_1 >>> 16 | 0;
             HEAP8[($5_1 + 352 | 0) >> 0] = $25_1 >>> 24 | 0;
             break label$9;
            }
            HEAP32[($5_1 + 224 | 0) >> 2] = HEAPU8[($6_1 + $12_1 | 0) >> 0] | 0;
            $6_1 = $820($0_1 | 0, $8_1 - $0_1 | 0 | 0, 26647 | 0, $5_1 + 224 | 0 | 0) | 0;
            if (($6_1 | 0) < (0 | 0)) {
             break label$9
            }
            $12_1 = $12_1 + 1 | 0;
            $0_1 = $0_1 + $6_1 | 0;
            $6_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
            if ($6_1) {
             continue label$25
            }
            break label$9;
           };
          case 2:
           label$27 : while (1) {
            HEAP32[($5_1 + 256 | 0) >> 2] = HEAPU8[($13_1 + $12_1 | 0) >> 0] | 0;
            $6_1 = $820($0_1 | 0, $7_1 + $0_1 | 0 | 0, 26647 | 0, $5_1 + 256 | 0 | 0) | 0;
            if (($6_1 | 0) < (0 | 0)) {
             break label$9
            }
            $0_1 = $0_1 + $6_1 | 0;
            if ($0_1 >>> 0 >= $8_1 >>> 0) {
             break label$9
            }
            $6_1 = $12_1 >>> 0 < 15 >>> 0;
            $12_1 = $12_1 + 1 | 0;
            if ($6_1) {
             continue label$27
            }
            break label$9;
           };
          case 3:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$1 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           HEAP32[($5_1 + 272 | 0) >> 2] = i64toi32_i32$1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26622 | 0, $5_1 + 272 | 0 | 0) | 0;
           break label$9;
          case 4:
           HEAPF64[($5_1 + 288 | 0) >> 3] = +Math_fround(+HEAPF64[$13_1 >> 3]);
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26652 | 0, $5_1 + 288 | 0 | 0) | 0;
           break label$9;
          case 9:
           $338($13_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
           break label$8;
          case 13:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$3 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           HEAP32[($5_1 + 304 | 0) >> 2] = i64toi32_i32$3;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26642 | 0, $5_1 + 304 | 0 | 0) | 0;
           break label$8;
          case 8:
          case 10:
           $13_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           break;
          case 5:
           break label$10;
          default:
           break label$9;
          };
         }
         $14_1 = $13_1;
         if (!$13_1) {
          break label$8
         }
        }
        label$28 : {
         switch ($9_1 | 0) {
         case 0:
          if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$8
          }
          if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[$10_1 >> 2] = $14_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 4 | 0) >> 2] = 32;
          HEAP32[$5_1 >> 2] = $2_1;
          $827(26655 | 0, $5_1 | 0);
          break label$8;
         case 1:
          if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[(($5_1 + 32 | 0) + 16 | 0) >> 2] = $14_1;
          HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 36 | 0) >> 2] = 32;
          HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
          $827(26655 | 0, $5_1 + 32 | 0 | 0);
          break label$8;
         case 2:
          if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[(($5_1 + 64 | 0) + 16 | 0) >> 2] = $14_1;
          HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 72 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 68 | 0) >> 2] = 32;
          HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
          $827(26655 | 0, $5_1 + 64 | 0 | 0);
          break label$8;
         case 3:
          break label$28;
         default:
          break label$8;
         };
        }
        if (!($836(62040 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        HEAP32[(($5_1 + 96 | 0) + 16 | 0) >> 2] = $14_1;
        HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 104 | 0) >> 2] = $3_1;
        HEAP32[($5_1 + 100 | 0) >> 2] = 32;
        HEAP32[($5_1 + 96 | 0) >> 2] = $2_1;
        $827(26655 | 0, $5_1 + 96 | 0 | 0);
       }
       $0_1 = $11_1 + 20 | 0;
       $6_1 = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
       if (($6_1 | 0) != (14 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     label$32 : {
      $16_1 = $5_1 + 368 | 0;
      if ($16_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $16_1;
     }
     return;
    }
    $859(25059 | 0, 24971 | 0, 837 | 0);
    abort();
   }
   $859(25047 | 0, 24971 | 0, 838 | 0);
   abort();
  }
  $859(26596 | 0, 24971 | 0, 840 | 0);
  abort();
 }
 
 function $338($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$3
   }
   $6_1 = $2_1 + 4 | 0;
   $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $8_1 = $1_1 + -2 | 0;
   $9_1 = 0;
   label$4 : while (1) {
    label$5 : {
     if ($5_1 >>> 0 < 2 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($8_1 | 0) {
      case 0:
       if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$5
       }
       if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 4 | 0) >> 2] = 32;
       HEAP32[$4_1 >> 2] = $2_1;
       $827(27898 | 0, $4_1 | 0);
       break label$5;
      case 1:
       if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 20 | 0) >> 2] = 32;
       HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
       $827(27898 | 0, $4_1 + 16 | 0 | 0);
       break label$5;
      case 2:
       if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 44 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = 32;
       HEAP32[($4_1 + 32 | 0) >> 2] = $2_1;
       $827(27898 | 0, $4_1 + 32 | 0 | 0);
       break label$5;
      case 3:
       break label$6;
      default:
       break label$5;
      };
     }
     if (!($836(62040 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = $9_1;
     HEAP32[($4_1 + 56 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 52 | 0) >> 2] = 32;
     HEAP32[($4_1 + 48 | 0) >> 2] = $2_1;
     $827(27898 | 0, $4_1 + 48 | 0 | 0);
    }
    $337(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0, $3_1 | 0, $7_1 | 0);
    $7_1 = $7_1 + (HEAP32[($3_1 + 36 | 0) >> 2] | 0) | 0;
    $9_1 = $9_1 + 1 | 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($9_1 >>> 0 < $5_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$10 : {
   $11_1 = $4_1 + 64 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $339($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $340($2_1 | 0);
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 26688 | 0, 26848 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(26688 | 0, 2 | 0, 0 | 0, 26848 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(27909 | 0, 24971 | 0, 956 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 48 | 0) | 0;
  i64toi32_i32$0 = 8;
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[$0_1 >> 2] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $823($0_1 + 16 | 0 | 0, 26667 | 0, 9 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 16843009;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 32 | 0) >> 2] = 1;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 43 | 0;
  $3_1 = 16843009;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 42 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 > 4 >>> 0) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 43 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 41 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$2
    }
    $1_1 = 1;
    $0_1 = $0_1 + 16 | 0;
    if (!($824(26667 | 0, $0_1 | 0, 9 | 0) | 0)) {
     break label$1
    }
    if (!($824(26676 | 0, $0_1 | 0, 5 | 0) | 0)) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 16 | 0) | 0;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 26976 | 0, 27016 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(26976 | 0, 2 | 0, 0 | 0, 27016 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  $335(26976 | 0, $0_1 | 0);
 }
 
 function $344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 160 | 0) | 0;
  HEAP8[($2_1 + 152 | 0) >> 0] = 1;
  HEAP32[($2_1 + 100 | 0) >> 2] = 1e6;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 27040 | 0, 27320 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(27040 | 0, 2 | 0, 0 | 0, 27320 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  $335(27040 | 0, $0_1 | 0);
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 28 | 0) | 0;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 27344 | 0, 27404 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(27344 | 0, 2 | 0, 0 | 0, 27404 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  $335(27344 | 0, $0_1 | 0);
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27424 | 0, 16 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1446 | 0);
  abort();
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27440 | 0, 17 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1453 | 0);
  abort();
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27457 | 0, 8 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1460 | 0);
  abort();
 }
 
 function $351($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27465 | 0, 8 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1467 | 0);
  abort();
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27488 | 0, 16 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1475 | 0);
  abort();
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return !($824($0_1 + 80 | 0 | 0, 27504 | 0, 16 | 0) | 0) | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27520 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1489 | 0);
  abort();
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    $2_1 = 0;
    label$3 : {
     if (!(HEAPU8[($0_1 + 259 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAPU8[($0_1 + 275 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAP32[($0_1 + 224 | 0) >> 2] | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
     if (!(HEAPU8[($3_1 + 32 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAPU8[($3_1 + 34 | 0) >> 0] | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $5_1 = +HEAPF64[$3_1 >> 3];
       if (!($5_1 < 4294967296.0 & $5_1 >= 0.0 | 0)) {
        break label$5
       }
       $4_1 = ~~$5_1 >>> 0;
       break label$4;
      }
      $4_1 = 0;
     }
     if (!($257($1_1 | 0, ($4_1 + 1 | 0) & -2 | 0 | 0) | 0)) {
      break label$3
     }
     if (!($259($1_1 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        $0_1 = $0_1 + 80 | 0;
        if (!($824($0_1 | 0, 27553 | 0, 15 | 0) | 0)) {
         break label$8
        }
        if (!($824($0_1 | 0, 27568 | 0, 19 | 0) | 0)) {
         break label$8
        }
        if (!($824($0_1 | 0, 27616 | 0, 15 | 0) | 0)) {
         break label$8
        }
        if ($824($0_1 | 0, 27632 | 0, 19 | 0) | 0) {
         break label$7
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 0;
       break label$6;
      }
      label$9 : {
       label$10 : {
        if (!($824($0_1 | 0, 27536 | 0, 17 | 0) | 0)) {
         break label$10
        }
        if ($824($0_1 | 0, 27664 | 0, 17 | 0) | 0) {
         break label$9
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 1;
       return 1 | 0;
      }
      label$11 : {
       label$12 : {
        if (!($824($0_1 | 0, 27600 | 0, 16 | 0) | 0)) {
         break label$12
        }
        if ($824($0_1 | 0, 27696 | 0, 16 | 0) | 0) {
         break label$11
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 2;
       break label$6;
      }
      if ($824($0_1 | 0, 27712 | 0, 16 | 0) | 0) {
       break label$3
      }
      HEAP8[($1_1 + 2 | 0) >> 0] = 3;
     }
     $2_1 = 1;
    }
    return $2_1 | 0;
   }
   $859(27411 | 0, 24971 | 0, 1510 | 0);
   abort();
  }
  $859(27728 | 0, 24971 | 0, 1511 | 0);
  abort();
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27732 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1554 | 0);
  abort();
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27738 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1561 | 0);
  abort();
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27744 | 0, 7 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1568 | 0);
  abort();
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27751 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1575 | 0);
  abort();
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27760 | 0, 10 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1582 | 0);
  abort();
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = $0_1 + 80 | 0;
    if ($824($0_1 | 0, 27770 | 0, 10 | 0) | 0) {
     break label$2
    }
    return 1 | 0;
   }
   return !($824($0_1 | 0, 27780 | 0, 10 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1591 | 0);
  abort();
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27790 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1605 | 0);
  abort();
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27799 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1612 | 0);
  abort();
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27808 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1619 | 0);
  abort();
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27814 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1626 | 0);
  abort();
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27820 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1633 | 0);
  abort();
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27826 | 0, 7 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1640 | 0);
  abort();
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27833 | 0, 14 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1647 | 0);
  abort();
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 280 | 0) | 0;
  HEAP8[($0_1 + 254 | 0) >> 0] = 1;
  i64toi32_i32$0 = 1072693248;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 16777473;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 16843009;
  HEAP8[($0_1 + 247 | 0) >> 0] = $2_1;
  HEAP8[($0_1 + 248 | 0) >> 0] = $2_1 >>> 8 | 0;
  HEAP8[($0_1 + 249 | 0) >> 0] = $2_1 >>> 16 | 0;
  HEAP8[($0_1 + 250 | 0) >> 0] = $2_1 >>> 24 | 0;
  HEAP8[($0_1 + 251 | 0) >> 0] = 1;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $822($0_1 | 0, 0 | 0, 96 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP8[$0_1 >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 90 | 0) >> 1] = 257;
  HEAP16[($0_1 + 80 | 0) >> 1] = 257;
  HEAP32[($0_1 + 84 | 0) >> 2] = 16843009;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 40 | 0) | 0;
  HEAP8[($0_1 + 34 | 0) >> 0] = 1;
  HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1086275584;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
  HEAP8[($0_1 + 38 | 0) >> 0] = 1;
  HEAP16[($0_1 + 36 | 0) >> 1] = 257;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 16 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
  HEAP16[($0_1 + 40 | 0) >> 1] = 257;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 20 | 0) | 0;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $19_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 1;
  label$3 : {
   if ($377(i64toi32_i32$2 | 0) | 0) {
    break label$3
   }
   $2_1 = $378($1_1 | 0) | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = global$0 - 64 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(31116 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $777($0_1 | 0) | 0;
   if ($3_1 >>> 0 < 65504 >>> 0) {
    break label$4
   }
   $2_1 = ($596($0_1 | 0, $3_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 8 | 0 | 0) | 0 | 0) != (0 | 0);
  }
  label$5 : {
   $5_1 = $1_1 + 64 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  return $191($0_1 | 0) | 0 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $827(31165 | 0, 0 | 0);
  }
  label$4 : {
   label$5 : {
    $2_1 = $813(24 | 0) | 0;
    if ($2_1) {
     break label$5
    }
    $3_1 = 0;
    if (!($835(62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$1_1 >> 2] = 24;
    $827(31184 | 0, $1_1 | 0);
    break label$4;
   }
   $845($2_1 | 0, 24 | 0, $2_1 | 0, 31056 | 0);
   $3_1 = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   $4_1 = $736($0_1 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   label$6 : {
    if (!$4_1) {
     break label$6
    }
    $0_1 = FUNCTION_TABLE[HEAP32[(0 + 48472 | 0) >> 2] | 0]($0_1) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    label$7 : {
     if (!$0_1) {
      break label$7
     }
     $3_1 = $2_1;
     break label$4;
    }
    $739(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
   }
   $815($2_1 | 0);
  }
  label$8 : {
   $6_1 = $1_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (31056 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 | 0, 31056 | 0, 31228 | 0, 144 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[HEAP32[(0 + 48476 | 0) >> 2] | 0](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
  $845($0_1 | 0, 24 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $381($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $15$hi = 0, $15_1 = 0, $9_1 = 0, $11_1 = 0, $8_1 = 0, $10_1 = 0, $16$hi = 0, $6_1 = 0, $7_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $16_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $14_1 = 0, $13_1 = 0, $48_1 = 0, $52_1 = 0, $55$hi = 0, $157_1 = 0, $157$hi = 0, $159_1 = 0, $159$hi = 0, $49_1 = 0, $161$hi = 0, $163$hi = 0, $50_1 = 0, $51_1 = 0, $173_1 = 0, $173$hi = 0, $175_1 = 0, $175$hi = 0, $214_1 = 0, $214$hi = 0, $216_1 = 0, $216$hi = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  HEAP16[($4_1 + 20 | 0) >> 1] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (31056 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 | 0, 31056 | 0, 31228 | 0, 694 | 0);
  }
  $5_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = $0_1;
   $827(31305 | 0, $4_1 | 0);
  }
  $6_1 = HEAP32[(0 + 48484 | 0) >> 2] | 0;
  FUNCTION_TABLE[$6_1](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $48_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         $7_1 = HEAP32[(0 + 48468 | 0) >> 2] | 0;
         if (!$7_1) {
          break label$12
         }
         $8_1 = 0;
         $5_1 = 0;
         $9_1 = 0;
         $10_1 = 0;
         $11_1 = 0;
         label$13 : while (1) {
          $52_1 = $1_1;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$0 = 0;
          $55$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$2 = $15_1;
          i64toi32_i32$1 = $55$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $12_1 = $50($52_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 8192 | 0, $4_1 + 76 | 0 | 0) | 0;
          if (!$12_1) {
           break label$8
          }
          $762($4_1 + 56 | 0 | 0, $12_1 | 0);
          label$14 : {
           label$15 : {
            label$16 : {
             label$17 : {
              label$18 : {
               label$19 : {
                label$20 : {
                 label$21 : {
                  switch ($9_1 | 0) {
                  case 0:
                   label$23 : {
                    if (!($378($4_1 + 56 | 0 | 0) | 0)) {
                     break label$23
                    }
                    $9_1 = $382($0_1 | 0, $12_1 | 0, $1_1 | 0) | 0;
                    if (!$5_1) {
                     break label$16
                    }
                    label$24 : {
                     if ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($5_1 + 40 | 0) >> 2] | 0) >>> 0) {
                      break label$24
                     }
                     $815($5_1 | 0);
                     break label$16;
                    }
                    $815($9_1 | 0);
                    break label$15;
                   }
                   if ($5_1) {
                    break label$17
                   }
                   $5_1 = 0;
                   if ($60($1_1 | 0, $4_1 + 48 | 0 | 0, $4_1 + 40 | 0 | 0) | 0) {
                    break label$18
                   }
                   i64toi32_i32$0 = $4_1;
                   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
                   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
                   $15_1 = i64toi32_i32$5;
                   $15$hi = i64toi32_i32$2;
                   i64toi32_i32$0 = i64toi32_i32$5;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$3 = 128;
                   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
                    $42_1 = 1
                   } else {
                    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
                     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                      $43_1 = 0
                     } else {
                      $43_1 = 1
                     }
                     $44_1 = $43_1;
                    } else {
                     $44_1 = 0
                    }
                    $42_1 = $44_1;
                   }
                   if ($42_1) {
                    break label$18
                   }
                   label$25 : {
                    if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
                     break label$25
                    }
                    i64toi32_i32$0 = $15$hi;
                    i64toi32_i32$3 = $15_1;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$5 = -128;
                    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                    }
                    $15_1 = i64toi32_i32$1;
                    $15$hi = i64toi32_i32$4;
                    $5_1 = 0;
                    $9_1 = 1;
                    break label$14;
                   }
                   $5_1 = $383(0 | 0, 0 | 0) | 0;
                   if (!$5_1) {
                    break label$20
                   }
                   $9_1 = 2;
                   i64toi32_i32$4 = 0;
                   $15_1 = 0;
                   $15$hi = i64toi32_i32$4;
                   break label$14;
                  case 2:
                   break label$19;
                  case 1:
                   break label$21;
                  default:
                   break label$14;
                  };
                 }
                 $5_1 = $384($4_1 + 56 | 0 | 0) | 0;
                 if ($5_1) {
                  break label$17
                 }
                 $5_1 = $383(0 | 0, 0 | 0) | 0;
                 if ($5_1) {
                  break label$17
                 }
                }
                $8_1 = $12_1;
                break label$9;
               }
               $11_1 = $590(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $12_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
               $9_1 = $11_1 ? 3 : 2;
               $10_1 = ($756($12_1 | 0) | 0) + $10_1 | 0;
               break label$14;
              }
              $8_1 = $12_1;
              break label$8;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
             i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
             $15_1 = i64toi32_i32$4;
             $15$hi = i64toi32_i32$3;
             $9_1 = 2;
             break label$14;
            }
            $5_1 = $9_1;
           }
           i64toi32_i32$0 = $0_1;
           i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$3;
           $15$hi = i64toi32_i32$4;
           $9_1 = 0;
          }
          $735($12_1 | 0);
          label$26 : {
           if (($9_1 | 0) == (3 | 0)) {
            break label$26
           }
           if ($10_1 >>> 0 < $7_1 >>> 0) {
            continue label$13
           }
          }
          break label$13;
         };
         if ($11_1) {
          break label$11
         }
        }
        $8_1 = 0;
        $11_1 = FUNCTION_TABLE[HEAP32[(0 + 48488 | 0) >> 2] | 0](HEAP32[($0_1 + 12 | 0) >> 2] | 0, $4_1 + 12 | 0) | 0;
        if (!$11_1) {
         break label$10
        }
       }
       if (!$5_1) {
        break label$7
       }
       HEAP32[($11_1 + 8 | 0) >> 2] = 1;
       label$27 : {
        if (!(HEAP32[($4_1 + 24 | 0) >> 2] | 0)) {
         break label$27
        }
        $12_1 = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
        if (!$12_1) {
         break label$6
        }
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$4 = HEAPU16[(i64toi32_i32$0 + 20 | 0) >> 1] | 0;
        i64toi32_i32$3 = 0;
        $157_1 = i64toi32_i32$4;
        $157$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
        i64toi32_i32$4 = 0;
        $159_1 = i64toi32_i32$3;
        $159$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $157$hi;
        i64toi32_i32$3 = $159$hi;
        i64toi32_i32$3 = __wasm_i64_mul($157_1 | 0, i64toi32_i32$4 | 0, $159_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $49_1 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$3 = __wasm_i64_mul($49_1 | 0, i64toi32_i32$4 | 0, 1e3 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $161$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        $163$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $161$hi;
        $50_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $163$hi;
        i64toi32_i32$3 = __wasm_i64_udiv($50_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$4;
        $12_1 = i64toi32_i32$3;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$3;
        if (!i64toi32_i32$3) {
         break label$27
        }
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$3 = 0;
        $51_1 = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$3 | 0, 8e3 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $173_1 = i64toi32_i32$4;
        $173$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = -1;
        i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
        $175_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $175$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $173$hi;
        i64toi32_i32$0 = $175$hi;
        i64toi32_i32$0 = __wasm_i64_udiv($173_1 | 0, i64toi32_i32$4 | 0, $175_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $12_1 = i64toi32_i32$0;
        HEAP32[($5_1 + 16 | 0) >> 2] = i64toi32_i32$0;
        if (!i64toi32_i32$0) {
         break label$27
        }
        HEAP16[($11_1 + 26 | 0) >> 1] = ($12_1 >>> 0) / (1e3 >>> 0) | 0;
       }
       label$28 : {
        $12_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($12_1) {
         break label$28
        }
        $12_1 = Math_imul(HEAPU16[($11_1 + 26 | 0) >> 1] | 0, 1e3);
        HEAP32[($5_1 + 16 | 0) >> 2] = $12_1;
       }
       label$29 : {
        if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
         break label$29
        }
        if (!$12_1) {
         break label$29
        }
        if ($60($1_1 | 0, $4_1 + 48 | 0 | 0, $4_1 + 40 | 0 | 0) | 0) {
         break label$29
        }
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$4;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$3 = $15_1;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$5 = $16_1;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
         $45_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) {
           $46_1 = 0
          } else {
           $46_1 = 1
          }
          $47_1 = $46_1;
         } else {
          $47_1 = 0
         }
         $45_1 = $47_1;
        }
        if ($45_1) {
         break label$29
        }
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$5 = $15_1;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$0 = $16_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 8e3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $214_1 = i64toi32_i32$5;
        $214$hi = i64toi32_i32$1;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
        i64toi32_i32$5 = 0;
        $216_1 = i64toi32_i32$1;
        $216$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $214$hi;
        i64toi32_i32$1 = $216$hi;
        i64toi32_i32$1 = __wasm_i64_sdiv($214_1 | 0, i64toi32_i32$5 | 0, $216_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$1;
       }
       $215($5_1 | 0, $11_1 | 0);
       $8_1 = 0;
       break label$8;
      }
      $815($5_1 | 0);
     }
     $5_1 = 0;
    }
    FUNCTION_TABLE[$6_1](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
    $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    label$30 : {
     if (!$8_1) {
      break label$30
     }
     $735($8_1 | 0);
    }
    label$31 : {
     $14_1 = $4_1 + 80 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return $5_1 | 0;
   }
   $859(31328 | 0, 31228 | 0, 791 | 0);
   abort();
  }
  $859(31335 | 0, 31228 | 0, 795 | 0);
  abort();
 }
 
 function $382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $12$hi = 0, i64toi32_i32$3 = 0, $12_1 = 0, $11_1 = 0, $10_1 = 0, $36_1 = 0, $39$hi = 0, $49_1 = 0, $51$hi = 0, $55$hi = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  $763($3_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  $1_1 = $756($1_1 | 0) | 0;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = -1;
  HEAP32[($3_1 + 24 | 0) >> 2] = -1;
  HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  $36_1 = $3_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = i64toi32_i32$2 + $1_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $1_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $36_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
  $1_1 = 0;
  label$3 : {
   if (!($385($3_1 | 0, 16 | 0) | 0)) {
    break label$3
   }
   if (!($187($3_1 | 0, $3_1 + 80 | 0 | 0) | 0)) {
    break label$3
   }
   $49_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
   $51$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $55$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $51$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $55$hi;
   i64toi32_i32$3 = (HEAP32[($3_1 + 84 | 0) >> 2] | 0) + 10 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $49_1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$4;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$4;
   label$4 : {
    if (!(HEAPU8[($3_1 + 89 | 0) >> 0] | 0)) {
     break label$4
    }
    if (!($385($3_1 | 0, 16 | 0) | 0)) {
     break label$3
    }
    if (!($188($3_1 | 0, $3_1 + 56 | 0 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = $383($3_1 + 40 | 0 | 0, 3072 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $1_1 = 4;
   label$5 : {
    $4_1 = HEAP16[($3_1 + 80 | 0) >> 1] | 0;
    if ($4_1 >>> 0 > 3 >>> 0) {
     break label$5
    }
    $1_1 = HEAP32[(($4_1 << 2 | 0) + 33444 | 0) >> 2] | 0;
   }
   HEAP32[($2_1 + 40 | 0) >> 2] = $1_1;
   label$6 : {
    if (!($385($3_1 | 0, 10 | 0) | 0)) {
     break label$6
    }
    $4_1 = $2_1 + 52 | 0;
    $5_1 = $2_1 + 44 | 0;
    $6_1 = $2_1 + 60 | 0;
    $7_1 = $2_1 + 68 | 0;
    $8_1 = $2_1 + 76 | 0;
    $9_1 = $2_1 + 100 | 0;
    label$7 : while (1) {
     if (!($189($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0) | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              $1_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
              if (($1_1 | 0) > (1413697357 | 0)) {
               break label$16
              }
              if (!$1_1) {
               break label$14
              }
              if (($1_1 | 0) == (1129270605 | 0)) {
               break label$9
              }
              if (($1_1 | 0) != (1413565506 | 0)) {
               break label$15
              }
              $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $6_1 | 0);
              break label$8;
             }
             label$17 : {
              if (($1_1 | 0) > (1414091825 | 0)) {
               break label$17
              }
              if (($1_1 | 0) == (1413697358 | 0)) {
               break label$10
              }
              if (($1_1 | 0) != (1413762898 | 0)) {
               break label$15
              }
              $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $7_1 | 0);
              break label$8;
             }
             if (($1_1 | 0) == (1414091826 | 0)) {
              break label$11
             }
             if (($1_1 | 0) == (1414546737 | 0)) {
              break label$12
             }
            }
            $1_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
            break label$13;
           }
           $1_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
           if (!$1_1) {
            break label$6
           }
          }
          $387($3_1 | 0, $1_1 | 0);
          break label$8;
         }
         $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $4_1 | 0);
         break label$8;
        }
        $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $5_1 | 0);
        break label$8;
       }
       $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $8_1 | 0);
       break label$8;
      }
      $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $9_1 | 0);
     }
     if ($385($3_1 | 0, 10 | 0) | 0) {
      continue label$7
     }
     break label$7;
    };
   }
   $1_1 = $2_1;
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$18 : {
   $11_1 = $3_1 + 96 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $1_1 | 0;
 }
 
 function $383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 112 | 0;
   $3_1 = $813($2_1 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  $822($3_1 | 0, 0 | 0, $2_1 | 0) | 0;
  $214($3_1 | 0, 1 | 0);
  HEAP16[($3_1 + 108 | 0) >> 1] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 5;
  $388($3_1 | 0, $3_1 + 44 | 0 | 0);
  $388($3_1 | 0, $3_1 + 52 | 0 | 0);
  $388($3_1 | 0, $3_1 + 60 | 0 | 0);
  $388($3_1 | 0, $3_1 + 68 | 0 | 0);
  $388($3_1 | 0, $3_1 + 100 | 0 | 0);
  label$2 : {
   if (!$0_1) {
    break label$2
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = 2;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + 110 | 0;
  }
  return $3_1 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $1_1 = global$0 - 112 | 0;
   $13_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 80 | 0) >> 2] = $0_1;
   $827(31648 | 0, $1_1 + 80 | 0 | 0);
  }
  label$4 : {
   if (($782($0_1 | 0) | 0 | 0) != (5521735 | 0)) {
    break label$4
   }
   $3_1 = $383($1_1 + 96 | 0 | 0, 128 | 0) | 0;
   if (!$3_1) {
    break label$4
   }
   $389($3_1 + 44 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 52 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 60 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 68 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 4 | 0);
   $389($3_1 + 100 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 4 | 0);
   $4_1 = $772($0_1 | 0) | 0;
   label$5 : {
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$5
    }
    $815($3_1 | 0);
    break label$4;
   }
   label$6 : {
    label$7 : {
     if ($4_1 >>> 0 > 125 >>> 0) {
      break label$7
     }
     $0_1 = HEAP32[(($4_1 << 2 | 0) + 31680 | 0) >> 2] | 0;
     break label$6;
    }
    $0_1 = 32184;
   }
   HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
   $0_1 = $390($0_1 | 0) | 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = 1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
   label$8 : {
    if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$8
    }
    if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    $0_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    $2_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    $4_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
    $5_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
    $6_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
    $7_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    $8_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
    $9_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
    $10_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    $11_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
    $12_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = $12_1 ? 32267 : 32266;
    HEAP32[($1_1 + 60 | 0) >> 2] = $12_1 ? 32295 : 32266;
    HEAP32[($1_1 + 56 | 0) >> 2] = $11_1;
    HEAP32[($1_1 + 44 | 0) >> 2] = $10_1;
    HEAP32[($1_1 + 32 | 0) >> 2] = $9_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = $8_1;
    HEAP32[($1_1 + 52 | 0) >> 2] = $6_1 ? 32267 : 32266;
    HEAP32[($1_1 + 48 | 0) >> 2] = $6_1 ? 32287 : 32266;
    HEAP32[($1_1 + 40 | 0) >> 2] = $5_1 ? 32267 : 32266;
    HEAP32[($1_1 + 36 | 0) >> 2] = $5_1 ? 32282 : 32266;
    HEAP32[($1_1 + 28 | 0) >> 2] = $4_1 ? 32267 : 32266;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 ? 32276 : 32266;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1 ? 32267 : 32266;
    HEAP32[($1_1 + 8 | 0) >> 2] = $7_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1 ? 32269 : 32266;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 ? 32267 : 32266;
    HEAP32[$1_1 >> 2] = $0_1 ? 32260 : 32266;
    $827(32192 | 0, $1_1 | 0);
   }
   $2_1 = $3_1;
  }
  label$9 : {
   $14_1 = $1_1 + 112 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $2_1 | 0;
 }
 
 function $385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $3_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, i64toi32_i32$6 = 0, $10_1 = 0, $5_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $80_1 = 0, $82$hi = 0, $84$hi = 0, $119_1 = 0, $119$hi = 0, $121_1 = 0, $121$hi = 0, $134_1 = 0, $134$hi = 0, $136_1 = 0, $136$hi = 0, $143_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $745($3_1 | 0, $0_1 | 0);
  $4_1 = $740($3_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $9$hi;
   HEAP32[($2_1 + 36 | 0) >> 2] = $9_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$2;
   $827(31368 | 0, $2_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $9_1 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $32_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $33_1 = 0
         } else {
          $33_1 = 1
         }
         $34_1 = $33_1;
        } else {
         $34_1 = 0
        }
        $32_1 = $34_1;
       }
       if ($32_1) {
        break label$8
       }
       i64toi32_i32$3 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = $9$hi;
       i64toi32_i32$0 = $9_1;
       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $35_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          $36_1 = 0
         } else {
          $36_1 = 1
         }
         $37_1 = $36_1;
        } else {
         $37_1 = 0
        }
        $35_1 = $37_1;
       }
       if ($35_1) {
        break label$7
       }
      }
      $5_1 = 1;
      if ($4_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$9 : while (1) {
       label$10 : {
        if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$0 = $0_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $9_1 = i64toi32_i32$3;
        $9$hi = i64toi32_i32$1;
        HEAP32[($2_1 + 8 | 0) >> 2] = 8192;
        HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[$2_1 >> 2] = i64toi32_i32$0;
        $827(31411 | 0, $2_1 | 0);
       }
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
       $4_1 = $50(HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, 8192 | 0, $2_1 + 64 | 0 | 0) | 0;
       if (!$4_1) {
        break label$6
       }
       $6_1 = $756($4_1 | 0) | 0;
       $80_1 = $0_1;
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
       $82$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $84$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $82$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = $84$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = $80_1;
       HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
       $744($3_1 | 0, $4_1 | 0);
       $735($4_1 | 0);
       if (($740($3_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
        continue label$9
       }
       break label$5;
      };
     }
     $5_1 = 1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$0 = $9_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $40_1 = $39_1;
      } else {
       $40_1 = 0
      }
      $38_1 = $40_1;
     }
     if ($38_1) {
      break label$4
     }
     label$11 : {
      if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$11
      }
      if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$2;
      $9$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$2;
      HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$3;
      $827(31479 | 0, $2_1 + 16 | 0 | 0);
     }
     label$12 : {
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $119_1 = i64toi32_i32$4;
      $119$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
      $121_1 = i64toi32_i32$0;
      $121$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $119$hi;
      i64toi32_i32$2 = $119_1;
      i64toi32_i32$0 = $121$hi;
      i64toi32_i32$5 = $121_1;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
      if ($4_1 >>> 0 <= i64toi32_i32$1 >>> 0) {
       break label$12
      }
      $763($0_1 | 0, $3_1 | 0);
      $763($2_1 + 64 | 0 | 0, $3_1 | 0);
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$3 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$3;
      $134$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$2 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $136_1 = i64toi32_i32$2;
      $136$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $134$hi;
      i64toi32_i32$4 = $134_1;
      i64toi32_i32$2 = $136$hi;
      i64toi32_i32$5 = $136_1;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $766($2_1 + 64 | 0 | 0, $4_1 + i64toi32_i32$0 | 0 | 0) | 0;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $143_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $143_1;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$4;
      $4_1 = $753($3_1 | 0, i64toi32_i32$1 | 0, $2_1 + 64 | 0 | 0, 0 | 0, 0 | 0) | 0;
      $738($3_1 | 0);
      if (!$4_1) {
       break label$5
      }
      $744($3_1 | 0, $4_1 | 0);
      $735($4_1 | 0);
      break label$5;
     }
     $738($3_1 | 0);
     break label$5;
    }
    $738($3_1 | 0);
    $5_1 = 0;
   }
   $763($0_1 | 0, $3_1 | 0);
   label$13 : {
    $8_1 = $2_1 + 80 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return $5_1 | 0;
  }
  $859(31456 | 0, 31228 | 0, 460 | 0);
  abort();
 }
 
 function $386($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) {
      break label$5
     }
     if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
      break label$4
     }
    }
    label$6 : {
     if (!($834(62056 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[$5_1 >> 2] = $0_1;
     $827(31525 | 0, $5_1 | 0);
    }
    $387($0_1 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   label$7 : {
    if ((HEAP32[$3_1 >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $387($0_1 | 0, $6_1 | 0);
    break label$3;
   }
   if (!($385($0_1 | 0, $6_1 | 0) | 0)) {
    break label$3
   }
   if (!($190($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0)) {
    break label$3
   }
   $7_1 = $754($0_1 | 0) | 0;
   $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if ($8_1 >>> 0 <= $7_1 >>> 0) {
    break label$3
   }
   $9_1 = HEAP32[$3_1 >> 2] | 0;
   $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + $9_1 | 0;
   HEAP32[$4_1 >> 2] = $6_1;
   $7_1 = $8_1 - $7_1 | 0;
   label$8 : {
    label$9 : {
     if (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) {
      break label$9
     }
     if (!(HEAPU8[($2_1 + 14 | 0) >> 0] | 0)) {
      break label$8
     }
    }
    $772($0_1 | 0) | 0;
    label$10 : {
     if ($7_1 >>> 0 < 2 >>> 0) {
      break label$10
     }
     $2_1 = 0;
     label$11 : while (1) {
      HEAP8[$6_1 >> 0] = $2_1;
      label$12 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) < (1 | 0)) {
        break label$12
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
       HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
       break label$10;
      }
      if (($764($0_1 | 0) | 0 | 0) != (-1 | 0)) {
       break label$10
      }
      $2_1 = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
      HEAP32[$3_1 >> 2] = $2_1;
      $6_1 = $6_1 + 1 | 0;
      label$13 : {
       if ($2_1 >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 - (HEAP32[$4_1 >> 2] | 0) | 0;
       $766($0_1 | 0, $7_1 | 0) | 0;
       break label$3;
      }
      $2_1 = 255;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1 >>> 0 > 1 >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = ($6_1 - (HEAP32[$4_1 >> 2] | 0) | 0) + 1 | 0;
    break label$3;
   }
   label$14 : {
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($9_1 + $7_1 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$14
    }
    $768($0_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
    break label$3;
   }
   $1_1 = $2_1 - $9_1 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $2_1;
   $768($0_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
   $766($0_1 | 0, ((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) - (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0 | 0) | 0;
  }
  label$15 : {
   $11_1 = $5_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $6$hi = 0, $44_1 = 0, $46$hi = 0, $50$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = $766($0_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $6$hi;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(31605 | 0, $2_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (($3_1 | 0) != ($1_1 | 0)) {
     break label$5
    }
    $745(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $0_1 | 0);
    break label$4;
   }
   $44_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $46$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $50$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $46$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $50$hi;
   i64toi32_i32$3 = $1_1 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $44_1;
   HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
   $738(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
   $763($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  HEAP32[$1_1 >> 2] = $0_1 + 108 | 0;
 }
 
 function $389($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = $4_1;
  label$1 : {
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (($5_1 | 0) != ($6_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!($834(62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$2
    }
    $827(32301 | 0, 0 | 0);
   }
   $766($2_1 | 0, $3_1 | 0) | 0;
   return;
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   $7_1 = ($6_1 + $4_1 | 0) + -1 | 0;
   $4_1 = $4_1 + $5_1 | 0;
   $6_1 = 0;
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
       $5_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$6;
      }
      $5_1 = $764($2_1 | 0) | 0;
      if (($5_1 | 0) == (-1 | 0)) {
       break label$4
      }
     }
     label$8 : {
      if ($4_1 >>> 0 >= $7_1 >>> 0) {
       break label$8
      }
      HEAP8[$4_1 >> 0] = $5_1;
      $6_1 = $5_1 & -33 | 0 ? $4_1 : $6_1;
      $4_1 = $4_1 + 1 | 0;
     }
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   if (!$6_1) {
    break label$3
   }
   HEAP8[($6_1 + 1 | 0) >> 0] = 0;
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $4_1 = $2_1 + (HEAP32[$1_1 >> 2] | 0) | 0;
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = ($6_1 + 1 | 0) - $4_1 | 0;
   HEAP32[$1_1 >> 2] = ($6_1 - $2_1 | 0) + 2 | 0;
  }
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 | 0;
 }
 
 function $391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 121 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 52 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[(($4_1 + 32 | 0) + 16 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 40 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   $827(33553 | 0, $4_1 + 32 | 0 | 0);
  }
  $5_1 = $0_1 + 12 | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = 0;
      label$10 : {
       if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$10
       }
       $8_1 = $6_1;
       label$11 : while (1) {
        label$12 : {
         $7_1 = $8_1;
         $8_1 = HEAP32[$7_1 >> 2] | 0;
         if ($8_1) {
          break label$12
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$7;
        }
        if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$11
        }
        break label$11;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($7_1) {
       break label$7
      }
      break label$8;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $7_1 = $5_1;
    break label$6;
   }
   $6_1 = HEAP32[$7_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$13 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   $827(33604 | 0, $4_1 | 0);
  }
  label$14 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 144 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    $827(33663 | 0, $2_1 + 32 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    $827(33713 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 64 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(33655 | 0, 33475 | 0, 145 | 0);
  abort();
 }
 
 function $393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 376 | 0);
  }
  i64toi32_i32$2 = $0_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = 0;
  $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  label$3 : {
   $3_1 = $394($0_1 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  label$4 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 3 >>> 0) {
    break label$4
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 34980 | 0) >> 2] | 0;
  }
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 ? (($1_1 << 5 | 0) + ($0_1 + 48 | 0) | 0) + -24 | 0 : 0) | 0;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(33798 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 409 | 0);
  }
  $822($0_1 + 16 | 0 | 0, 0 | 0, 32 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  label$6 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(33816 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $396($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0, $18$hi = 0, $18_1 = 0, $7_1 = 0, $19$hi = 0, $19_1 = 0, i64toi32_i32$6 = 0, $6_1 = 0, $20$hi = 0, $21$hi = 0, $4_1 = 0, $20_1 = 0, $21_1 = 0, $5_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $10_1 = 0, $17_1 = 0, $16_1 = 0, $38_1 = 0, $38$hi = 0, $42_1 = 0, $42$hi = 0, $43$hi = 0, $54_1 = 0, $62_1 = 0, $62$hi = 0, $74_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $237_1 = 0, $240_1 = 0, $240$hi = 0;
  label$1 : {
   $2_1 = global$0 - 160 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 424 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       i64toi32_i32$2 = $0_1 + 24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $38_1 = i64toi32_i32$0;
       $38$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $42_1 = i64toi32_i32$0;
       $42$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $38$hi;
       i64toi32_i32$2 = $38_1;
       i64toi32_i32$0 = $42$hi;
       i64toi32_i32$3 = $42_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $43$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$5 = $43$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$9
       }
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[$2_1 >> 2] = $0_1;
       i64toi32_i32$1 = $1$hi;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       $54_1 = $2_1;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 32;
       i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $46_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP32[($54_1 + 4 | 0) >> 2] = $46_1;
       $827(33834 | 0, $2_1 | 0);
       break label$8;
      }
      $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
      $62_1 = i64toi32_i32$5;
      $62$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$5 = $62$hi;
      i64toi32_i32$2 = $62_1;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      label$10 : {
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       i64toi32_i32$4 = $18$hi;
       HEAP32[($2_1 + 156 | 0) >> 2] = $18_1;
       HEAP32[($2_1 + 144 | 0) >> 2] = $0_1;
       i64toi32_i32$4 = $1$hi;
       HEAP32[($2_1 + 152 | 0) >> 2] = $1_1;
       $74_1 = $2_1;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 32;
       i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $47_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
        $47_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
       }
       HEAP32[($74_1 + 148 | 0) >> 2] = $47_1;
       $827(33870 | 0, $2_1 + 144 | 0 | 0);
      }
      label$11 : {
       label$12 : {
        label$13 : {
         i64toi32_i32$1 = $18$hi;
         i64toi32_i32$4 = $18_1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$2 = 1;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $48_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $49_1 = 0
           } else {
            $49_1 = 1
           }
           $50_1 = $49_1;
          } else {
           $50_1 = 0
          }
          $48_1 = $50_1;
         }
         if ($48_1) {
          break label$13
         }
         $3_1 = $394($0_1 | 0) | 0;
         if (!$3_1) {
          break label$12
         }
         $4_1 = $2_1 + 44 | 0;
         $5_1 = $2_1 + 36 | 0;
         label$14 : while (1) {
          label$15 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
           $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $19_1 = i64toi32_i32$4;
           $19$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $18$hi;
           HEAP32[$4_1 >> 2] = $18_1;
           i64toi32_i32$4 = $20$hi;
           HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$4 = $19$hi;
           HEAP32[$5_1 >> 2] = $19_1;
           HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $7_1 & 255 | 0;
           HEAP32[($2_1 + 20 | 0) >> 2] = $7_1 >>> 24 | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 + -1 | 0;
           HEAP32[($2_1 + 28 | 0) >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
           HEAP32[($2_1 + 24 | 0) >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
           $827(33905 | 0, $2_1 + 16 | 0 | 0);
          }
          label$16 : {
           i64toi32_i32$4 = $18$hi;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $19_1 = i64toi32_i32$4;
           $19$hi = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$4;
           i64toi32_i32$4 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
           $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
           $20$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $18$hi;
           i64toi32_i32$1 = $18_1;
           i64toi32_i32$2 = $20$hi;
           i64toi32_i32$3 = $20_1;
           if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$16
           }
           i64toi32_i32$1 = $18$hi;
           $397($0_1 | 0, $18_1 | 0) | 0;
           break label$12;
          }
          i64toi32_i32$1 = $19$hi;
          $3_1 = $19_1;
          if ($397($0_1 | 0, $3_1 | 0) | 0) {
           break label$7
          }
          $398($0_1 | 0, $3_1 | 0);
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $20$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$4 = $20$hi;
          i64toi32_i32$2 = $20_1;
          i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
          i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
          $18_1 = i64toi32_i32$5;
          $18$hi = i64toi32_i32$0;
          $3_1 = $394($0_1 | 0) | 0;
          if ($3_1) {
           continue label$14
          }
          break label$14;
         };
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$1 = $18_1;
         i64toi32_i32$3 = -1;
         i64toi32_i32$2 = -1;
         if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
          $51_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
            $52_1 = 0
           } else {
            $52_1 = 1
           }
           $53_1 = $52_1;
          } else {
           $53_1 = 0
          }
          $51_1 = $53_1;
         }
         if ($51_1) {
          break label$12
         }
         $859(33971 | 0, 33475 | 0, 453 | 0);
         abort();
        }
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $55_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $56_1 = 0
          } else {
           $56_1 = 1
          }
          $57_1 = $56_1;
         } else {
          $57_1 = 0
         }
         $55_1 = $57_1;
        }
        if ($55_1) {
         break label$11
        }
        $3_1 = $394($0_1 | 0) | 0;
        if (!$3_1) {
         break label$12
        }
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$0 = $18_1;
        i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        $21_1 = i64toi32_i32$4;
        $21$hi = i64toi32_i32$5;
        $8_1 = ($2_1 + 112 | 0) + 28 | 0;
        $9_1 = ($2_1 + 112 | 0) + 20 | 0;
        $10_1 = $0_1 + 56 | 0;
        $11_1 = $2_1 + 96 | 0;
        $12_1 = $2_1 + 92 | 0;
        $13_1 = $2_1 + 88 | 0;
        $14_1 = $2_1 + 84 | 0;
        $15_1 = $2_1 + 80 | 0;
        label$17 : while (1) {
         label$18 : {
          if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$18
          }
          if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$18
          }
          $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$5;
          $18$hi = i64toi32_i32$3;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $21$hi;
          HEAP32[$8_1 >> 2] = $21_1;
          i64toi32_i32$5 = $19$hi;
          HEAP32[(($2_1 + 112 | 0) + 24 | 0) >> 2] = i64toi32_i32$3;
          i64toi32_i32$5 = $18$hi;
          HEAP32[$9_1 >> 2] = $18_1;
          HEAP32[(($2_1 + 112 | 0) + 16 | 0) >> 2] = $7_1 & 255 | 0;
          HEAP32[($2_1 + 116 | 0) >> 2] = $7_1 >>> 24 | 0;
          HEAP32[($2_1 + 112 | 0) >> 2] = $6_1 + -1 | 0;
          HEAP32[($2_1 + 124 | 0) >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
          HEAP32[($2_1 + 120 | 0) >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
          $827(33905 | 0, $2_1 + 112 | 0 | 0);
         }
         i64toi32_i32$2 = $3_1;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$3;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $19$hi;
         i64toi32_i32$2 = $19_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$0 = $18_1;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
          break label$6
         }
         label$19 : {
          i64toi32_i32$2 = $21$hi;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$5 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
          i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
          $19_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $21$hi;
          i64toi32_i32$4 = $21_1;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$3 = $19_1;
          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$19
          }
          $237_1 = $3_1;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$4 = $21$hi;
          i64toi32_i32$3 = $21_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = -1;
          i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
          $240_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
          $240$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$4 = $18_1;
          i64toi32_i32$3 = $240$hi;
          i64toi32_i32$2 = $240_1;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          i64toi32_i32$4 = $237_1;
          HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$5;
          HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
          break label$12;
         }
         $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$5
         }
         label$20 : {
          label$21 : {
           if ($3_1 >>> 0 >= 17 >>> 0) {
            break label$21
           }
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$1 = $19$hi;
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$0 = $21_1;
           i64toi32_i32$4 = $19$hi;
           i64toi32_i32$2 = $19_1;
           i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
           i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
           i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
           $21_1 = i64toi32_i32$3;
           $21$hi = i64toi32_i32$5;
           break label$20;
          }
          $859(34022 | 0, 33475 | 0, 471 | 0);
          abort();
         }
         label$22 : {
          label$23 : while (1) {
           $7_1 = $3_1 + -1 | 0;
           HEAP32[($0_1 + 48 | 0) >> 2] = $7_1;
           if (!$7_1) {
            break label$22
           }
           $3_1 = $3_1 + -2 | 0;
           label$24 : {
            if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $4_1 = $10_1 + ($3_1 << 5 | 0) | 0;
            $6_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
            $5_1 = $10_1 + ($7_1 << 5 | 0) | 0;
            $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
            $18_1 = i64toi32_i32$5;
            $18$hi = i64toi32_i32$0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$0;
            $19$hi = i64toi32_i32$5;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
            $20_1 = i64toi32_i32$5;
            $20$hi = i64toi32_i32$0;
            $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            HEAP32[$11_1 >> 2] = i64toi32_i32$0;
            i64toi32_i32$5 = $20$hi;
            HEAP32[$12_1 >> 2] = $20_1;
            i64toi32_i32$5 = $19$hi;
            HEAP32[(($2_1 + 48 | 0) + 24 | 0) >> 2] = $19_1;
            i64toi32_i32$5 = $18$hi;
            HEAP32[(($2_1 + 48 | 0) + 20 | 0) >> 2] = $18_1;
            HEAP32[$13_1 >> 2] = $7_1 & 255 | 0;
            HEAP32[(($2_1 + 48 | 0) + 28 | 0) >> 2] = $7_1 >>> 24 | 0;
            HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
            HEAP32[$14_1 >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
            HEAP32[$15_1 >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
            HEAP32[($2_1 + 48 | 0) >> 2] = $4_1 + -1 | 0;
            HEAP32[($2_1 + 52 | 0) >> 2] = $6_1 >>> 24 | 0;
            HEAP32[($2_1 + 60 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
            HEAP32[($2_1 + 56 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
            $827(34055 | 0, $2_1 + 48 | 0 | 0);
           }
           i64toi32_i32$1 = ($0_1 + ($3_1 << 5 | 0) | 0) + 64 | 0;
           i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           if (!!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
            break label$22
           }
           $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
           if ($3_1) {
            continue label$23
           }
           break label$23;
          };
         }
         $3_1 = $394($0_1 | 0) | 0;
         if ($3_1) {
          continue label$17
         }
         break label$17;
        };
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $0_1;
      HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $1_1;
      HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$0;
     }
     label$25 : {
      $17_1 = $2_1 + 160 | 0;
      if ($17_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $17_1;
     }
     return 0 | 0;
    }
    $859(33963 | 0, 33475 | 0, 450 | 0);
    abort();
   }
   $859(33979 | 0, 33475 | 0, 461 | 0);
   abort();
  }
  $859(34002 | 0, 33475 | 0, 470 | 0);
  abort();
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9$hi = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ($3_1 >>> 0 >= 17 >>> 0) {
     break label$3
    }
    $3_1 = $3_1 + -1 | 0;
    label$5 : {
     if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = ($0_1 + 48 | 0) + ($3_1 << 5 | 0) | 0;
     $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = $4_1 + 16 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $8_1 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $5_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $4_1 + -1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 >>> 24 | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
     $827(34579 | 0, $2_1 | 0);
    }
    label$6 : {
     label$7 : {
      $3_1 = ($0_1 + ($3_1 << 5 | 0) | 0) + 64 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $9_1 = $1_1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$3 = $1_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$7
      }
      $399($0_1 | 0, 34619 | 0, 290 | 0);
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $0_1 = 0;
      break label$6;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $8_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $3_1;
     HEAP32[$3_1 >> 2] = $8_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$5;
     $0_1 = $8_1;
    }
    label$8 : {
     $7_1 = $2_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $0_1 | 0;
   }
   $859(34561 | 0, 33475 | 0, 287 | 0);
   abort();
  }
  $859(34022 | 0, 33475 | 0, 288 | 0);
  abort();
 }
 
 function $398($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $15$hi = 0, i64toi32_i32$4 = 0, $15_1 = 0, $16$hi = 0, $10_1 = 0, $11_1 = 0, $16_1 = 0, $14$hi = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $14_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $55_1 = 0, $59_1 = 0, $61$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($3_1 >>> 0 > 16 >>> 0) {
      break label$5
     }
     i64toi32_i32$0 = 0;
     $14_1 = $1_1;
     $14$hi = i64toi32_i32$0;
     $4_1 = $0_1 + 48 | 0;
     $5_1 = $2_1 + 40 | 0;
     $6_1 = $2_1 + 36 | 0;
     $7_1 = $2_1 + 32 | 0;
     $8_1 = $2_1 + 20 | 0;
     break label$4;
    }
    $859(34022 | 0, 33475 | 0, 235 | 0);
    abort();
   }
   label$6 : {
    label$7 : while (1) {
     $3_1 = $3_1 + -1 | 0;
     HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     $3_1 = $4_1 + ($3_1 << 5 | 0) | 0;
     $400($0_1 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0);
     $55_1 = HEAP32[($0_1 + 568 | 0) >> 2] | 0;
     $9_1 = $3_1 + 28 | 0;
     $59_1 = HEAP32[$9_1 >> 2] | 0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $61$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $61$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 576 | 0) >> 2] | 0]($55_1, $59_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     $3_1 = $3_1 + 8 | 0;
     $1_1 = $1_1 + -1 | 0;
     label$8 : {
      if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $10_1 = $4_1 + ($1_1 << 5 | 0) | 0;
      $11_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = $10_1 + 16 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$2;
      $10_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      $9_1 = HEAP32[$9_1 >> 2] | 0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      HEAP32[$5_1 >> 2] = i64toi32_i32$2;
      HEAP32[$6_1 >> 2] = $9_1 & 255 | 0;
      HEAP32[$7_1 >> 2] = ($9_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = ($9_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = $9_1 >>> 24 | 0;
      i64toi32_i32$5 = $15$hi;
      HEAP32[$8_1 >> 2] = $15_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $11_1 & 255 | 0;
      HEAP32[$2_1 >> 2] = $10_1 + -1 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $11_1 >>> 24 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = ($11_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = ($11_1 >>> 16 | 0) & 255 | 0;
      $827(34674 | 0, $2_1 | 0);
     }
     label$9 : {
      label$10 : {
       label$11 : {
        $1_1 = ($0_1 + ($1_1 << 5 | 0) | 0) + 64 | 0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$5;
        $15$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$1 = $15_1;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$3 = $16_1;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$11
        }
        $399($0_1 | 0, 34726 | 0, 248 | 0);
        break label$10;
       }
       i64toi32_i32$1 = $15$hi;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$1 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$5 = $16$hi;
       i64toi32_i32$2 = $16_1;
       if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$9
       }
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$6
      }
      continue label$7;
     }
     break label$7;
    };
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $16_1;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    i64toi32_i32$2 = $1_1;
    HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
   }
   label$12 : {
    $13_1 = $2_1 + 48 | 0;
    if ($13_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $13_1;
   }
   return;
  }
  $859(34002 | 0, 33475 | 0, 234 | 0);
  abort();
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if (!($835(62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = 33475;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(34636 | 0, $3_1 | 0);
  }
  label$4 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $400($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $93_1 = 0, $96_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $16_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $2_1 & 255 | 0;
     $7_1 = $2_1 >>> 24 | 0;
     $8_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $9_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $10_1 = $5_1 + 36 | 0;
     $11_1 = $5_1 + 32 | 0;
     $12_1 = $5_1 + 28 | 0;
     $13_1 = $5_1 + 20 | 0;
     $14_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$10_1 >> 2] = $1_1;
       HEAP32[$11_1 >> 2] = $4_1;
       HEAP32[$12_1 >> 2] = $6_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $8_1;
       HEAP32[$13_1 >> 2] = $9_1;
       HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $15_1 & 255 | 0;
       HEAP32[$5_1 >> 2] = $15_1 >>> 24 | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = ($15_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = ($15_1 >>> 16 | 0) & 255 | 0;
       $827(34917 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $93_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $93_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $96_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $96_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 48 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $15_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 48 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$15_1) {
         break label$3
        }
        $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, $15_1) | 0;
        break label$8;
       }
       $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($15_1 | 0) == (1 | 0) | 0;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      if ($14_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $17_1 = $5_1 + 64 | 0;
     if ($17_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $17_1;
    }
    return;
   }
   $859(34961 | 0, 33475 | 0, 188 | 0);
   abort();
  }
  $859(34975 | 0, 33475 | 0, 190 | 0);
  abort();
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   $827(34137 | 0, $2_1 + 48 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $3_1 = $813(584 | 0) | 0;
       if ($3_1) {
        break label$8
       }
       if (!($835(62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = 584;
       $827(34168 | 0, $2_1 + 16 | 0 | 0);
       break label$7;
      }
      $845($3_1 | 0, 584 | 0, $3_1 | 0, 33460 | 0);
      HEAP32[($3_1 + 576 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 568 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($3_1 + 572 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      $0_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       $395($3_1 | 0);
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
       HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
       $827(34198 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      $815($3_1 | 0);
     }
     $3_1 = 0;
     if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     $3_1 = 0;
     if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $3_1 = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(34198 | 0, $2_1 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(34156 | 0, 33475 | 0, 503 | 0);
   abort();
  }
  $859(34160 | 0, 33475 | 0, 504 | 0);
  abort();
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(34156 | 0, 33475 | 0, 554 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 112;
  HEAP32[($0_1 + 4 | 0) >> 2] = 113;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $403($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $404($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  return 0 | 0;
 }
 
 function $405($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 64 | 0) >> 2] = $0_1;
   $827(34222 | 0, $1_1 + 64 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 566 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   $3_1 = $1_1 + 36 | 0;
   label$7 : while (1) {
    label$8 : {
     if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 52 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
     $827(34242 | 0, $1_1 + 48 | 0 | 0);
    }
    label$9 : {
     if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 & 255 | 0;
     HEAP32[(($1_1 + 16 | 0) + 16 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 >>> 24 | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     $827(34287 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $395($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 584 | 0, $0_1 | 0, 0 | 0);
  label$10 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(34339 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$11 : {
   $6_1 = $1_1 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $9$hi = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $3_1 = 0, $10_1 = 0, $8_1 = 0, $7_1 = 0, $112$hi = 0, $156$hi = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 588 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 88 | 0) >> 2] = $5_1 + $4_1 | 0;
   $827(34359 | 0, $2_1 + 80 | 0 | 0);
  }
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  label$6 : {
   $4_1 = $798($1_1 | 0) | 0;
   if (!$4_1) {
    break label$6
   }
   label$7 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($2_1 + 72 | 0) >> 2] = $756($4_1 | 0) | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
    $827(34387 | 0, $2_1 + 64 | 0 | 0);
   }
   $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 | 0);
   $3_1 = $756($4_1 | 0) | 0;
   $735($4_1 | 0);
  }
  $1_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $763($2_1 + 96 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$8 : {
   label$9 : {
    if ($4_1) {
     break label$9
    }
    if (!$1_1) {
     break label$8
    }
   }
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
         case 0:
          if (!($407($0_1 | 0, $2_1 + 96 | 0 | 0) | 0)) {
           break label$8
          }
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          break label$11;
         case 1:
          $5_1 = $394($0_1 | 0) | 0;
          if (!$5_1) {
           break label$14
          }
          label$19 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $9_1 = i64toi32_i32$0;
           $9$hi = i64toi32_i32$1;
           HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
           HEAP32[$2_1 >> 2] = i64toi32_i32$0;
           $827(34430 | 0, $2_1 | 0);
          }
          i64toi32_i32$1 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $112$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$0 = $112$hi;
          i64toi32_i32$1 = $9$hi;
          i64toi32_i32$3 = $1_1;
          i64toi32_i32$4 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & $10_1 >>> 0 > $1_1 >>> 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$4 ? $1_1 : $10_1;
          i64toi32_i32$3 = i64toi32_i32$4 ? $9$hi : i64toi32_i32$0;
          $1_1 = i64toi32_i32$1;
          $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          label$20 : {
           if (!($397($0_1 | 0, $1_1 | 0) | 0)) {
            break label$20
           }
           $408($0_1 | 0, $2_1 + 96 | 0 | 0);
           break label$8;
          }
          $398($0_1 | 0, $1_1 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          $1_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          if ($1_1) {
           break label$8
          }
          break label$11;
         case 2:
          $5_1 = $394($0_1 | 0) | 0;
          if (!$5_1) {
           break label$13
          }
          label$21 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$21
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$21
           }
           i64toi32_i32$4 = $5_1;
           i64toi32_i32$3 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $9_1 = i64toi32_i32$3;
           $9$hi = i64toi32_i32$1;
           HEAP32[($2_1 + 52 | 0) >> 2] = $1_1;
           HEAP32[($2_1 + 48 | 0) >> 2] = i64toi32_i32$3;
           $827(34462 | 0, $2_1 + 48 | 0 | 0);
          }
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
          $9_1 = i64toi32_i32$1;
          $9$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $156$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$4 = i64toi32_i32$1;
          i64toi32_i32$1 = $156$hi;
          if ($9$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($9$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > $1_1 >>> 0 | 0) | 0) {
           break label$8
          }
          i64toi32_i32$4 = $9$hi;
          i64toi32_i32$4 = $9$hi;
          $1_1 = $9_1;
          label$22 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$22
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$22
           }
           $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
           HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $1_1;
           HEAP32[($2_1 + 28 | 0) >> 2] = $6_1 & 255 | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 >>> 24 | 0;
           HEAP32[($2_1 + 24 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
           HEAP32[($2_1 + 20 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
           $827(34494 | 0, $2_1 + 16 | 0 | 0);
          }
          if ($397($0_1 | 0, $1_1 | 0) | 0) {
           break label$12
          }
          $400($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, $1_1 | 0);
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          label$23 : {
           $6_1 = $409($0_1 | 0) | 0;
           if (!$6_1) {
            break label$23
           }
           $6_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
           if (!$6_1) {
            break label$23
           }
           $400($0_1 | 0, $6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, $1_1 | 0);
          }
          $398($0_1 | 0, $1_1 | 0);
          $5_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
          $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          if (!$5_1) {
           break label$11
          }
          break label$8;
         case 3:
          break label$15;
         default:
          break label$8;
         };
        }
        $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
        $408($0_1 | 0, $2_1 + 96 | 0 | 0);
        break label$8;
       }
       $859(34426 | 0, 33475 | 0, 623 | 0);
       abort();
      }
      $859(34426 | 0, 33475 | 0, 636 | 0);
      abort();
     }
     $859(34541 | 0, 33475 | 0, 645 | 0);
     abort();
    }
    $1_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    $763($2_1 + 96 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    if ($4_1) {
     continue label$10
    }
    if ($1_1) {
     continue label$10
    }
    break label$10;
   };
  }
  label$24 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $84$hi = 0, $86$hi = 0;
  label$1 : {
   $2_1 = global$0 - 144 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $3_1 = $427($1_1 | 0, $2_1 + 120 | 0 | 0) | 0;
       if (!$3_1) {
        break label$7
       }
       label$8 : {
        if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
        HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = i64toi32_i32$0;
        $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
        HEAP32[($2_1 + 96 | 0) >> 2] = $1_1 >>> 24 | 0;
        HEAP32[($2_1 + 108 | 0) >> 2] = $1_1 & 255 | 0;
        HEAP32[($2_1 + 100 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($2_1 + 104 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
        $827(34750 | 0, $2_1 + 96 | 0 | 0);
       }
       $1_1 = $410($0_1 | 0, HEAP32[($2_1 + 128 | 0) >> 2] | 0 | 0) | 0;
       $4_1 = $394($0_1 | 0) | 0;
       label$9 : {
        if (!($411($0_1 | 0, $2_1 + 120 | 0 | 0, $3_1 | 0, $1_1 | 0) | 0)) {
         break label$9
        }
        label$10 : {
         label$11 : {
          $5_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
          if (($5_1 | 0) > (1836475767 | 0)) {
           break label$11
          }
          if (($5_1 | 0) == (1835297121 | 0)) {
           break label$10
          }
          if (($5_1 | 0) == (1835626086 | 0)) {
           break label$10
          }
          if (($5_1 | 0) == (1836019574 | 0)) {
           break label$10
          }
          break label$6;
         }
         if (($5_1 | 0) == (1836475768 | 0)) {
          break label$10
         }
         if (($5_1 | 0) == (1953653099 | 0)) {
          break label$10
         }
         if (($5_1 | 0) != (1937007212 | 0)) {
          break label$6
         }
        }
        label$12 : {
         i64toi32_i32$1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
         $84$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $86$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $84$hi;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = $86$hi;
         if ((i64toi32_i32$2 | 0) == ($3_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
          break label$12
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = 0;
         $1_1 = 1;
         if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$3
         }
         if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$3
         }
         $0_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
         HEAP32[($2_1 + 64 | 0) >> 2] = $0_1 >>> 24 | 0;
         HEAP32[($2_1 + 76 | 0) >> 2] = $0_1 & 255 | 0;
         HEAP32[($2_1 + 68 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 72 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
         $827(34780 | 0, $2_1 + 64 | 0 | 0);
         break label$3;
        }
        label$13 : {
         if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$13
         }
         $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
         HEAP32[($2_1 + 48 | 0) >> 2] = $1_1 >>> 24 | 0;
         HEAP32[($2_1 + 60 | 0) >> 2] = $1_1 & 255 | 0;
         HEAP32[($2_1 + 52 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 56 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
         $827(34797 | 0, $2_1 + 48 | 0 | 0);
        }
        HEAP32[($0_1 + 44 | 0) >> 2] = 2;
        break label$5;
       }
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$4
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
       HEAP32[($2_1 + 80 | 0) >> 2] = $1_1 >>> 24 | 0;
       HEAP32[($2_1 + 92 | 0) >> 2] = $1_1 & 255 | 0;
       HEAP32[($2_1 + 84 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 88 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
       $827(34861 | 0, $2_1 + 80 | 0 | 0);
       break label$4;
      }
      $769($1_1 | 0, $2_1 + 136 | 0 | 0);
      $1_1 = 0;
      break label$3;
     }
     if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     label$14 : {
      if ($1_1) {
       break label$14
      }
      if (!$4_1) {
       break label$5
      }
      if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     label$15 : {
      if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$15
      }
      if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      $3_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
      HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(34833 | 0, $2_1 + 16 | 0 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 2;
     HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     $1_1 = 1;
     break label$3;
    }
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 >>> 24 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1 & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
    $827(34861 | 0, $2_1 | 0);
   }
   $1_1 = 1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  }
  label$16 : {
   $7_1 = $2_1 + 144 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $1_1 | 0;
 }
 
 function $408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (($1_1 << 5 | 0) + ($0_1 + 48 | 0) | 0) + -56 | 0 : 0) | 0;
 }
 
 function $410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $411($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $14$hi = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $14_1 = 0, $15$hi = 0, $9_1 = 0, $72_1 = 0, $74_1 = 0, $76_1 = 0, $77_1 = 0, $77$hi = 0, $80$hi = 0, $82$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $5_1 = 0;
  label$3 : {
   $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > 15 >>> 0) {
    break label$3
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$4 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
   i64toi32_i32$1 = 1073741824;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$4 ? 0 : $13_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $13_1 = i64toi32_i32$3;
   $13$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $14_1 = $2_1;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$1 = $2_1;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
    break label$3
   }
   $5_1 = ($0_1 + 48 | 0) + ($6_1 << 5 | 0) | 0;
   $7_1 = $5_1 + 16 | 0;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$1 = $13_1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
   $15$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
   $8_1 = $5_1 + 8 | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = i64toi32_i32$4;
   HEAP32[i64toi32_i32$1 >> 2] = $13_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
   $9_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   $10_1 = $5_1 + 28 | 0;
   HEAP32[$10_1 >> 2] = $9_1;
   $5_1 = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 + 1 | 0;
   $400($0_1 | 0, $3_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   $72_1 = $0_1 + 44 | 0;
   $74_1 = HEAP32[($0_1 + 568 | 0) >> 2] | 0;
   $76_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$5 = $15$hi;
   $77_1 = i64toi32_i32$0;
   $77$hi = i64toi32_i32$5;
   i64toi32_i32$4 = $0_1 + 24 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $80$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $82$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $77$hi;
   i64toi32_i32$4 = $82$hi;
   $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 572 | 0) >> 2] | 0]($74_1, $76_1, $77_1, i64toi32_i32$0, i64toi32_i32$2, i64toi32_i32$4, $2_1) | 0;
   HEAP32[$72_1 >> 2] = $1_1;
   $2_1 = $0_1 + 40 | 0;
   HEAP8[$2_1 >> 0] = HEAPU8[$2_1 >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $0_1 = HEAP32[$10_1 >> 2] | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$4;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$4 = $13$hi;
   HEAP32[($4_1 + 20 | 0) >> 2] = $13_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1 & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 >>> 24 | 0;
   HEAP32[$4_1 >> 2] = $1_1 + -1 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   $827(34880 | 0, $4_1 | 0);
  }
  label$4 : {
   $12_1 = $4_1 + 32 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (!($427($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($0_1 | 0) > (1836019557 | 0)) {
      break label$5
     }
     label$6 : {
      if (($0_1 | 0) > (1835295091 | 0)) {
       break label$6
      }
      if (($0_1 | 0) == (1718773093 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1718909296 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1786080875 | 0)) {
       break label$4
      }
      break label$3;
     }
     label$7 : {
      if (($0_1 | 0) > (1835365472 | 0)) {
       break label$7
      }
      if (($0_1 | 0) == (1835295092 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1835361135 | 0)) {
       break label$4
      }
      break label$3;
     }
     if (($0_1 | 0) == (1835365473 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1835430497 | 0)) {
      break label$4
     }
     break label$3;
    }
    label$8 : {
     if (($0_1 | 0) > (1886285683 | 0)) {
      break label$8
     }
     label$9 : {
      if (($0_1 | 0) > (1885628781 | 0)) {
       break label$9
      }
      if (($0_1 | 0) == (1836019558 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1836019574 | 0)) {
       break label$4
      }
      break label$3;
     }
     if (($0_1 | 0) == (1885628782 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1885954932 | 0)) {
      break label$4
     }
     break label$3;
    }
    label$10 : {
     if (($0_1 | 0) > (1970628963 | 0)) {
      break label$10
     }
     if (($0_1 | 0) == (1886285684 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1936419184 | 0)) {
      break label$4
     }
     break label$3;
    }
    if (($0_1 | 0) == (2003395685 | 0)) {
     break label$4
    }
    if (($0_1 | 0) != (1970628964 | 0)) {
     break label$3
    }
   }
   $2_1 = 1;
  }
  label$11 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(176 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 176;
    $827(35056 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 176 | 0, $2_1 | 0, 34996 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 72 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 172 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 156 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 140 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 124 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 108 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 92 | 0) >> 2] = $2_1;
   $402($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 20 | 0) >> 2] = 114;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $401($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $391($0_1 | 0, $2_1 + 80 | 0 | 0, 1718909296 | 0, 115 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, 1836019574 | 0, 116 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 112 | 0 | 0, 1953653099 | 0, 117 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 128 | 0 | 0, 1835297121 | 0, 118 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 144 | 0 | 0, 1835626086 | 0, 119 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 160 | 0 | 0, 1937007212 | 0, 120 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $414($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $137_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $3$hi;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $1_1 & 255 | 0;
   HEAP32[$5_1 >> 2] = $0_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $1_1 >>> 24 | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
   $827(35208 | 0, $5_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 297 | 0);
  }
  $6_1 = 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          if (($1_1 | 0) > (1919775328 | 0)) {
           break label$13
          }
          label$14 : {
           if (($1_1 | 0) > (1836019557 | 0)) {
            break label$14
           }
           if (($1_1 | 0) == (1835295092 | 0)) {
            break label$12
           }
           if (($1_1 | 0) != (1835296868 | 0)) {
            break label$6
           }
           $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           if (!$7_1) {
            break label$6
           }
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$1 = $7_1;
           HEAP32[(i64toi32_i32$1 + 504 | 0) >> 2] = $3_1;
           HEAP32[(i64toi32_i32$1 + 508 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$1 = i64toi32_i32$1 + 512 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $2_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           break label$6;
          }
          label$15 : {
           if (($1_1 | 0) == (1836019558 | 0)) {
            break label$15
           }
           if (($1_1 | 0) == (1836019574 | 0)) {
            break label$11
           }
           if (($1_1 | 0) != (1836475768 | 0)) {
            break label$6
           }
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$1 = $3$hi;
           $424($0_1 | 0, 72 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
          }
          $7_1 = $425($0_1 | 0) | 0;
          if (!$7_1) {
           break label$7
          }
          $6_1 = 1;
          HEAP8[($7_1 + 121 | 0) >> 0] = 1;
          break label$6;
         }
         label$16 : {
          if (($1_1 | 0) > (1937011577 | 0)) {
           break label$16
          }
          if (($1_1 | 0) == (1919775329 | 0)) {
           break label$10
          }
          if (($1_1 | 0) != (1937011556 | 0)) {
           break label$6
          }
          $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          if (!$7_1) {
           break label$6
          }
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$0 = $7_1;
          HEAP32[(i64toi32_i32$0 + 488 | 0) >> 2] = $3_1;
          HEAP32[(i64toi32_i32$0 + 492 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = i64toi32_i32$0 + 496 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $2_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          break label$6;
         }
         if (($1_1 | 0) == (1937011578 | 0)) {
          break label$8
         }
         if (($1_1 | 0) == (1937013298 | 0)) {
          break label$9
         }
         if (($1_1 | 0) != (1970628964 | 0)) {
          break label$6
         }
         i64toi32_i32$1 = $2$hi;
         i64toi32_i32$1 = $3$hi;
         i64toi32_i32$1 = $2$hi;
         i64toi32_i32$0 = $3$hi;
         $424($0_1 | 0, 104 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
         break label$6;
        }
        HEAP8[($0_1 + 32 | 0) >> 0] = 1;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$1 = $3$hi;
        $424($0_1 | 0, 56 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
        break label$6;
       }
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$0 = $3$hi;
       $424($0_1 | 0, 40 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
       break label$6;
      }
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      $424($0_1 | 0, 88 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
      break label$6;
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     $68($0_1 + 56 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
     break label$7;
    }
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $2$hi;
    $68($0_1 + 40 | 0 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0);
   }
   $6_1 = 1;
  }
  label$17 : {
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1024;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $2_1 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$17
   }
   $7_1 = 0;
   label$18 : {
    label$19 : while (1) {
     if ((HEAP32[(($7_1 << 2 | 0) + 35120 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$18
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) == (22 | 0)) {
      break label$17
     }
     continue label$19;
    };
   }
   $137_1 = $0_1;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$4 = $3_1 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = $3$hi + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$3 = $137_1;
   HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$5;
   $6_1 = 1;
  }
  label$20 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $415($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $10_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(35420 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 183 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1718909296 | 0)) {
    break label$8
   }
   label$9 : {
    if (!$2_1) {
     break label$9
    }
    if (!($430($2_1 | 0, $3_1 + 48 | 0 | 0) | 0)) {
     break label$8
    }
    $0_1 = $425($4_1 | 0) | 0;
    if (!$0_1) {
     break label$8
    }
    $1_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    $5_1 = 0;
    HEAP8[($0_1 + 126 | 0) >> 0] = 0;
    HEAP8[($0_1 + 125 | 0) >> 0] = $1_1;
    HEAP8[($0_1 + 124 | 0) >> 0] = $1_1 >>> 8 | 0;
    HEAP8[($0_1 + 123 | 0) >> 0] = $1_1 >>> 16 | 0;
    HEAP8[($0_1 + 122 | 0) >> 0] = $1_1 >>> 24 | 0;
    $6_1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
    label$10 : while (1) {
     $4_1 = 0;
     label$11 : {
      label$12 : {
       label$13 : while (1) {
        if (($1_1 | 0) == (HEAP32[(($4_1 << 2 | 0) + 35392 | 0) >> 2] | 0 | 0)) {
         break label$12
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) == (7 | 0)) {
         break label$11
        }
        continue label$13;
       };
      }
      HEAP8[($0_1 + 120 | 0) >> 0] = 1;
      break label$8;
     }
     if (($5_1 | 0) == ($6_1 | 0)) {
      break label$8
     }
     $1_1 = HEAP32[((($3_1 + 48 | 0) + ($5_1 << 2 | 0) | 0) + 8 | 0) >> 2] | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$10;
    };
   }
   $859(35477 | 0, 35264 | 0, 186 | 0);
   abort();
  }
  label$14 : {
   if (!$2_1) {
    break label$14
   }
   $735($2_1 | 0);
  }
  label$15 : {
   $14_1 = $3_1 + 128 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $416($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $120_1 = 0, $120$hi = 0, $122_1 = 0, $122$hi = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(35481 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 366 | 0);
  }
  $0_1 = 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       switch ($1_1 + 1 | 0 | 0) {
       case 1:
        $425($4_1 | 0) | 0;
        break label$11;
       default:
        if (($1_1 | 0) != (1836476516 | 0)) {
         break label$11
        }
        if (!$2_1) {
         break label$8
        }
        $1_1 = $431($2_1 | 0, $3_1 + 72 | 0 | 0) | 0;
        HEAP8[($4_1 + 24 | 0) >> 0] = $1_1;
        label$15 : {
         if ($1_1) {
          break label$15
         }
         label$16 : {
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          HEAP32[$3_1 >> 2] = $4_1;
          $827(35534 | 0, $3_1 | 0);
         }
         $0_1 = 1;
         HEAP8[($4_1 + 26 | 0) >> 0] = 1;
         break label$10;
        }
        $0_1 = 0;
        $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$10
        }
        i64toi32_i32$0 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
        $21_1 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $120_1 = i64toi32_i32$0;
        $120$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$0 = 0;
        $122_1 = i64toi32_i32$1;
        $122$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $120$hi;
        i64toi32_i32$1 = $122$hi;
        i64toi32_i32$1 = __wasm_i64_udiv($120_1 | 0, i64toi32_i32$0 | 0, $122_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
        break label$10;
       case 0:
        break label$12;
       };
      }
      label$17 : {
       if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$17
       }
       if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$17
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(35583 | 0, $3_1 + 16 | 0 | 0);
      }
      $0_1 = 1;
      HEAP8[($4_1 + 25 | 0) >> 0] = 1;
     }
     if (!$2_1) {
      break label$9
     }
    }
    $735($2_1 | 0);
   }
   label$18 : {
    $14_1 = $3_1 + 160 | 0;
    if ($14_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $14_1;
   }
   return $0_1 | 0;
  }
  $859(35477 | 0, 35264 | 0, 372 | 0);
  abort();
 }
 
 function $417($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $20_1 = 0, $15$hi = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 224 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 116 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 112 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 108 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 80 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 100 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 80 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 92 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 88 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
   $827(35624 | 0, $3_1 + 80 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 444 | 0);
  }
  $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        switch ($1_1 + 1 | 0 | 0) {
        default:
         if (($1_1 | 0) != (1953196132 | 0)) {
          break label$12
         }
         if (!$2_1) {
          break label$9
         }
         if (!$0_1) {
          break label$11
         }
         $1_1 = $432($2_1 | 0, $3_1 + 128 | 0 | 0) | 0;
         HEAP8[($4_1 + 27 | 0) >> 0] = $1_1;
         if (!$1_1) {
          break label$11
         }
         HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
         break label$11;
        case 1:
         label$16 : {
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
          $827(35677 | 0, $3_1 + 16 | 0 | 0);
         }
         label$17 : {
          $1_1 = $813(536 | 0) | 0;
          if ($1_1) {
           break label$17
          }
          if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$12
          }
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = 536;
          HEAP32[$3_1 >> 2] = 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $827(35717 | 0, $3_1 | 0);
          break label$12;
         }
         $218($1_1 | 0);
         HEAP8[($1_1 + 481 | 0) >> 0] = 0;
         HEAP8[($1_1 + 348 | 0) >> 0] = 0;
         HEAP32[($1_1 + 328 | 0) >> 2] = 0;
         i64toi32_i32$1 = $1_1;
         i64toi32_i32$0 = 0;
         HEAP32[($1_1 + 336 | 0) >> 2] = 0;
         HEAP32[($1_1 + 340 | 0) >> 2] = i64toi32_i32$0;
         $974($1_1 + 488 | 0 | 0, 0 | 0, 48 | 0) | 0;
         HEAP8[($4_1 + 31 | 0) >> 0] = 0;
         $20_1 = 0;
         HEAP8[($4_1 + 27 | 0) >> 0] = $20_1;
         HEAP8[($4_1 + 28 | 0) >> 0] = $20_1 >>> 8 | 0;
         HEAP8[($4_1 + 29 | 0) >> 0] = $20_1 >>> 16 | 0;
         HEAP8[($4_1 + 30 | 0) >> 0] = $20_1 >>> 24 | 0;
         $67($4_1 + 56 | 0 | 0);
         $67($4_1 + 40 | 0 | 0);
         HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
         break label$12;
        case 0:
         break label$13;
        };
       }
       if (!$0_1) {
        break label$12
       }
       label$18 : {
        label$19 : {
         if (!(HEAPU8[($4_1 + 27 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 28 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 30 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 31 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
          break label$8
         }
         label$20 : {
          label$21 : {
           label$22 : {
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($1_1 | 0) != (1 | 0)) {
             break label$22
            }
            if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
             break label$21
            }
            if (!(HEAP32[($0_1 + 28 | 0) >> 2] | 0)) {
             break label$21
            }
            $426($4_1 | 0, $0_1 | 0);
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           }
           if ($1_1) {
            break label$21
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$0;
           $15$hi = i64toi32_i32$1;
           if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
            break label$21
           }
           i64toi32_i32$1 = $15$hi;
           i64toi32_i32$0 = $15_1;
           i64toi32_i32$2 = 0;
           HEAPF32[($0_1 + 320 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP32[($0_1 + 328 | 0) >> 2] | 0) >>> 0) * Math_fround(1.0e3)) / Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)));
           if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$20
           }
           if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$21
           }
           $1_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$1;
           $15$hi = i64toi32_i32$0;
           HEAPF64[($3_1 + 64 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 320 | 0) >> 2]);
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $15_1;
           HEAP32[($3_1 + 60 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 48 | 0) >> 2] = $1_1;
           $827(35777 | 0, $3_1 + 48 | 0 | 0);
          }
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$20
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$20
          }
          $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 488 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 492 | 0) >> 2] | 0;
          $15_1 = i64toi32_i32$0;
          $15$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $0_1 + 496 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $15$hi;
          HEAP32[($3_1 + 36 | 0) >> 2] = $15_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
          $827(35838 | 0, $3_1 + 32 | 0 | 0);
         }
         $215(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0);
         break label$18;
        }
        $815($0_1 | 0);
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      }
      if (!$2_1) {
       break label$10
      }
     }
     $735($2_1 | 0);
    }
    label$23 : {
     $14_1 = $3_1 + 224 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return 0 | 0;
   }
   $859(35477 | 0, 35264 | 0, 448 | 0);
   abort();
  }
  $859(35763 | 0, 35264 | 0, 490 | 0);
  abort();
 }
 
 function $418($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $22_1 = 0, $111_1 = 0, $111$hi = 0, $113_1 = 0, $113$hi = 0, $114_1 = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(36129 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 532 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$12
       }
       label$13 : {
        if (($1_1 | 0) == (1751411826 | 0)) {
         break label$13
        }
        if (($1_1 | 0) != (1835296868 | 0)) {
         break label$12
        }
        if (!$2_1) {
         break label$9
        }
        $1_1 = $433($2_1 | 0, $3_1 + 80 | 0 | 0) | 0;
        HEAP8[($4_1 + 30 | 0) >> 0] = $1_1;
        label$14 : {
         if (!$1_1) {
          break label$14
         }
         i64toi32_i32$0 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$0 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $111_1 = i64toi32_i32$0;
         $111$hi = i64toi32_i32$1;
         i64toi32_i32$1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
         i64toi32_i32$0 = 0;
         $113_1 = i64toi32_i32$1;
         $113$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $111$hi;
         i64toi32_i32$1 = $113$hi;
         i64toi32_i32$1 = __wasm_i64_udiv($111_1 | 0, i64toi32_i32$0 | 0, $113_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $114_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 336 | 0) >> 2] = $114_1;
         HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
         $823($0_1 + 349 | 0 | 0, $3_1 + 120 | 0 | 0, 4 | 0) | 0;
         break label$11;
        }
        if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[$3_1 >> 2] = $4_1;
        $827(36182 | 0, $3_1 | 0);
        break label$11;
       }
       if (!$2_1) {
        break label$8
       }
       $1_1 = $435($2_1 | 0, $3_1 + 80 | 0 | 0) | 0;
       HEAP8[($4_1 + 31 | 0) >> 0] = $1_1;
       label$15 : {
        if ($1_1) {
         break label$15
        }
        if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
        $827(36245 | 0, $3_1 + 16 | 0 | 0);
       }
       HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
       break label$11;
      }
      if (!$2_1) {
       break label$10
      }
     }
     $735($2_1 | 0);
    }
    label$16 : {
     $14_1 = $3_1 + 128 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return 0 | 0;
   }
   $859(35477 | 0, 35264 | 0, 537 | 0);
   abort();
  }
  $859(35477 | 0, 35264 | 0, 548 | 0);
  abort();
 }
 
 function $419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $1_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $8_1 = $0_1 & 255 | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(36313 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 788 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   $735($2_1 | 0);
  }
  label$9 : {
   $13_1 = $3_1 + 48 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return 0 | 0;
 }
 
 function $420($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $12_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $13_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $304_1 = 0, $305_1 = 0, $307_1 = 0, $307$hi = 0, $310_1 = 0, $310$hi = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 84 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 48 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 56 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 48 | 0) >> 2] = $4_1;
   $827(36372 | 0, $3_1 + 48 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 574 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1937011556 | 0)) {
    break label$8
   }
   $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   label$9 : {
    if (!(HEAPU8[($4_1 + 31 | 0) >> 0] | 0)) {
     break label$9
    }
    $0_1 = $440($2_1 | 0, $3_1 + 104 | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[($4_1 + 28 | 0) >> 0] = $0_1;
    HEAP8[($1_1 + 348 | 0) >> 0] = 0;
    label$10 : {
     if (!$0_1) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if (!(HEAP32[($3_1 + 112 | 0) >> 2] | 0)) {
        break label$12
       }
       $4_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
       HEAP8[($1_1 + 348 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
       HEAP32[($1_1 + 344 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       $823($1_1 + 353 | 0 | 0, $4_1 + 44 | 0 | 0, 128 | 0) | 0;
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    label$26 : {
                     label$27 : {
                      label$28 : {
                       label$29 : {
                        label$30 : {
                         label$31 : {
                          label$32 : {
                           label$33 : {
                            label$34 : {
                             label$35 : {
                              $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                              switch ($0_1 | 0) {
                              case 14:
                               break label$14;
                              case 23:
                               break label$16;
                              case 24:
                               break label$17;
                              case 22:
                               break label$18;
                              case 20:
                               break label$19;
                              case 19:
                               break label$20;
                              case 18:
                               break label$21;
                              case 17:
                               break label$22;
                              case 15:
                              case 16:
                               break label$23;
                              case 12:
                               break label$24;
                              case 13:
                               break label$25;
                              case 9:
                              case 10:
                              case 11:
                               break label$26;
                              case 8:
                               break label$27;
                              case 6:
                              case 7:
                               break label$28;
                              case 21:
                               break label$29;
                              case 1:
                               break label$30;
                              case 5:
                               break label$31;
                              case 2:
                               break label$32;
                              case 3:
                               break label$33;
                              case 4:
                               break label$34;
                              case 0:
                               break label$35;
                              default:
                               break label$11;
                              };
                             }
                             HEAP32[($1_1 + 20 | 0) >> 2] = 27;
                             $5_1 = $4_1 + 264 | 0;
                             if (!(HEAP32[$5_1 >> 2] | 0)) {
                              break label$15
                             }
                             $8_1 = $1_1 + 36 | 0;
                             $0_1 = 0;
                             label$36 : while (1) {
                              $6_1 = $273($5_1 | 0, $0_1 | 0, $3_1 + 100 | 0 | 0) | 0;
                              if (!$6_1) {
                               break label$15
                              }
                              label$37 : {
                               $7_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
                               if (!$7_1) {
                                break label$37
                               }
                               $247($8_1 | 0, $6_1 + 1 | 0 | 0, $7_1 + -1 | 0 | 0) | 0;
                               if (HEAPU8[$8_1 >> 0] | 0) {
                                break label$15
                               }
                              }
                              $0_1 = $0_1 + 1 | 0;
                              if ($0_1 >>> 0 < (HEAP32[$5_1 >> 2] | 0) >>> 0) {
                               continue label$36
                              }
                              break label$15;
                             };
                            }
                            HEAP32[($1_1 + 20 | 0) >> 2] = 1;
                            break label$15;
                           }
                           HEAP32[($1_1 + 20 | 0) >> 2] = 2;
                           break label$15;
                          }
                          HEAP32[($1_1 + 20 | 0) >> 2] = 16;
                          break label$15;
                         }
                         HEAP32[($1_1 + 20 | 0) >> 2] = 26;
                         break label$15;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
                        HEAP8[($1_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 178 | 0) >> 0] | 0;
                        HEAP8[($1_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 180 | 0) >> 0] | 0;
                        label$38 : {
                         label$39 : {
                          $0_1 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
                          if (!$0_1) {
                           break label$39
                          }
                          $0_1 = $0_1 >>> 16 | 0;
                          break label$38;
                         }
                         label$40 : {
                          $0_1 = HEAPU8[($4_1 + 209 | 0) >> 0] | 0;
                          if (($0_1 | 0) == (15 | 0)) {
                           break label$40
                          }
                          $0_1 = $256($0_1 | 0) | 0;
                          break label$38;
                         }
                         $0_1 = HEAP32[($4_1 + 212 | 0) >> 2] | 0;
                        }
                        HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
                        label$41 : {
                         label$42 : {
                          $0_1 = HEAPU8[($4_1 + 208 | 0) >> 0] | 0;
                          if (($0_1 | 0) != (5 | 0)) {
                           break label$42
                          }
                          $0_1 = 18;
                          break label$41;
                         }
                         label$43 : {
                          label$44 : {
                           if (($0_1 | 0) == (39 | 0)) {
                            break label$44
                           }
                           if (($0_1 | 0) != (23 | 0)) {
                            break label$43
                           }
                          }
                          $0_1 = 17;
                          break label$41;
                         }
                         $0_1 = 15;
                        }
                        HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
                        label$45 : {
                         $4_1 = HEAPU8[($4_1 + 208 | 0) >> 0] | 0;
                         if ($4_1 >>> 0 > 5 >>> 0) {
                          break label$45
                         }
                         HEAP32[($1_1 + 32 | 0) >> 2] = $4_1;
                         break label$11;
                        }
                        HEAP32[($1_1 + 32 | 0) >> 2] = 0;
                        break label$11;
                       }
                       HEAP32[($1_1 + 20 | 0) >> 2] = 154;
                       $5_1 = $4_1 + 204 | 0;
                       $0_1 = $4_1 + 176 | 0;
                       break label$13;
                      }
                      HEAP32[($1_1 + 20 | 0) >> 2] = ($0_1 | 0) == (6 | 0) ? 129 : 6;
                      $0_1 = $4_1 + 176 | 0;
                      $5_1 = 0;
                      break label$13;
                     }
                     HEAP32[($1_1 + 20 | 0) >> 2] = 156;
                     $0_1 = $4_1 + 176 | 0;
                     $5_1 = 0;
                     break label$13;
                    }
                    HEAP32[($1_1 + 20 | 0) >> 2] = ($0_1 | 0) == (9 | 0) ? 144 : 145;
                    $0_1 = $4_1 + 176 | 0;
                    $5_1 = 0;
                    break label$13;
                   }
                   HEAP8[($1_1 + 348 | 0) >> 0] = 1;
                   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
                   HEAP32[($1_1 + 4 | 0) >> 2] = 1;
                   break label$11;
                  }
                  HEAP8[($1_1 + 348 | 0) >> 0] = 1;
                  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
                  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
                  break label$11;
                 }
                 HEAP32[($1_1 + 20 | 0) >> 2] = 143;
                 $0_1 = $4_1 + 176 | 0;
                 $5_1 = 0;
                 break label$13;
                }
                HEAP32[($1_1 + 20 | 0) >> 2] = 245;
                break label$15;
               }
               HEAP32[($1_1 + 20 | 0) >> 2] = 138;
               $0_1 = $4_1 + 176 | 0;
               $5_1 = 0;
               break label$13;
              }
              $0_1 = $4_1 + 176 | 0;
              label$46 : {
               if ((HEAP32[($4_1 + 204 | 0) >> 2] | 0 | 0) != (1685353317 | 0)) {
                break label$46
               }
               HEAP32[($1_1 + 20 | 0) >> 2] = 133;
               $5_1 = 0;
               break label$13;
              }
              HEAP32[($1_1 + 20 | 0) >> 2] = 130;
              $5_1 = 0;
              break label$13;
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 33;
             HEAP8[($1_1 + 41 | 0) >> 0] = HEAPU8[($4_1 + 278 | 0) >> 0] | 0;
             HEAP8[($1_1 + 42 | 0) >> 0] = HEAPU8[($4_1 + 279 | 0) >> 0] | 0;
             break label$15;
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 1;
            $0_1 = $4_1 + 176 | 0;
            $5_1 = 0;
            break label$13;
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = 4;
           break label$11;
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 246;
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = 0;
         HEAP16[($1_1 + 28 | 0) >> 1] = HEAPU16[($4_1 + 176 | 0) >> 1] | 0;
         HEAP16[($1_1 + 30 | 0) >> 1] = HEAPU16[($4_1 + 178 | 0) >> 1] | 0;
         label$47 : {
          if (!(HEAPU8[($4_1 + 224 | 0) >> 0] | 0)) {
           break label$47
          }
          HEAP8[($1_1 + 481 | 0) >> 0] = HEAPU8[($4_1 + 226 | 0) >> 0] | 0;
         }
         if (!(HEAPU8[($4_1 + 225 | 0) >> 0] | 0)) {
          break label$11
         }
         i64toi32_i32$2 = $1_1 + 496 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
          break label$11
         }
         i64toi32_i32$2 = $4_1 + 240 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $304_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $1_1 + 528 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $304_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $305_1 = $1_1;
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$0 = HEAP32[($1_1 + 488 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1_1 + 492 | 0) >> 2] | 0;
         $307_1 = i64toi32_i32$0;
         $307$hi = i64toi32_i32$1;
         i64toi32_i32$2 = $4_1 + 232 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $310_1 = i64toi32_i32$1;
         $310$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $307$hi;
         i64toi32_i32$2 = $307_1;
         i64toi32_i32$1 = $310$hi;
         i64toi32_i32$3 = $310_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         i64toi32_i32$2 = $305_1;
         HEAP32[(i64toi32_i32$2 + 520 | 0) >> 2] = i64toi32_i32$4;
         HEAP32[(i64toi32_i32$2 + 524 | 0) >> 2] = i64toi32_i32$5;
         break label$11;
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = 3;
        $5_1 = $4_1 + 204 | 0;
        $0_1 = $4_1 + 176 | 0;
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = 1;
       HEAP8[($1_1 + 24 | 0) >> 0] = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       HEAP8[($1_1 + 25 | 0) >> 0] = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
       $0_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 16 | 0;
       HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
       if (!$5_1) {
        break label$11
       }
       if ($0_1) {
        break label$11
       }
       if ((HEAPU8[($5_1 + 5 | 0) >> 0] | 0 | 0) != (15 | 0)) {
        break label$11
       }
       HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 212 | 0) >> 2] | 0;
       break label$11;
      }
      label$48 : {
       if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$48
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(36431 | 0, $3_1 + 16 | 0 | 0);
      }
      HEAP8[($4_1 + 28 | 0) >> 0] = 0;
     }
     $455($3_1 + 104 | 0 | 0);
     break label$8;
    }
    if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
    $827(36509 | 0, $3_1 + 32 | 0 | 0);
    break label$8;
   }
   if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(36578 | 0, $3_1 | 0);
  }
  label$49 : {
   if (!$2_1) {
    break label$49
   }
   $735($2_1 | 0);
  }
  label$50 : {
   $14_1 = $3_1 + 128 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $421($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 842 | 0);
  }
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 160 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 144 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 128 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 112 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 96 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 80 | 0 | 0);
  $405(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 176 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $422($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $12$hi = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $37_1 = 0, $7_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0, $64_1 = 0, $70_1 = 0, $72$hi = 0, $122_1 = 0, $132$hi = 0, $245_1 = 0, $248_1 = 0, $248$hi = 0, $251_1 = 0, $251$hi = 0, $253$hi = 0, $255$hi = 0, $38_1 = 0, $14_1 = 0, $14$hi = 0, $15$hi = 0;
  label$1 : {
   $4_1 = global$0 - 144 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 863 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
    break label$5
   }
   HEAP8[($0_1 + 29 | 0) >> 0] = 0;
   HEAP8[($0_1 + 32 | 0) >> 0] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 19 | 0;
   i64toi32_i32$0 = 0;
   $37_1 = 0;
   HEAP8[i64toi32_i32$1 >> 0] = $37_1;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $37_1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $37_1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $37_1 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   $5_1 = $0_1 + 56 | 0;
   $67($5_1 | 0);
   $6_1 = $0_1 + 40 | 0;
   $67($6_1 | 0);
   $7_1 = $0_1 + 12 | 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$6 : while (1) {
    label$7 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$7
     }
     i64toi32_i32$1 = $13$hi;
     $396(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     $12_1 = $13_1;
     $12$hi = i64toi32_i32$1;
    }
    label$8 : {
     if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 72 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
     $64_1 = $4_1;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($64_1 + 68 | 0) >> 2] = i64toi32_i32$4;
     $827(36689 | 0, $4_1 + 64 | 0 | 0);
    }
    label$9 : {
     label$10 : {
      label$11 : {
       $70_1 = $1_1;
       i64toi32_i32$0 = $3_1;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $72$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$2 = $72$hi;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $8_1 = $50($70_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 140 | 0 | 0) | 0;
       if ($8_1) {
        break label$11
       }
       $393(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 112 | 0 | 0);
       label$12 : {
        if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
        HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
        $827(36725 | 0, $4_1 + 32 | 0 | 0);
       }
       if ((HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) != (2 | 0)) {
        break label$9
       }
       $8_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
       if ((HEAP32[($4_1 + 124 | 0) >> 2] | 0) >>> 0 > $8_1 >>> 0) {
        break label$9
       }
       $9_1 = 0;
       if ($8_1 >>> 0 >= 16 >>> 0) {
        break label$10
       }
       break label$9;
      }
      $9_1 = $756($8_1 | 0) | 0;
      label$13 : {
       if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$4;
       $13$hi = i64toi32_i32$0;
       HEAP32[($4_1 + 60 | 0) >> 2] = $8_1;
       HEAP32[($4_1 + 56 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
       $122_1 = $4_1;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       HEAP32[($122_1 + 52 | 0) >> 2] = i64toi32_i32$5;
       $827(36775 | 0, $4_1 + 48 | 0 | 0);
      }
      $797($2_1 | 0, $8_1 | 0);
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = 0;
      $132$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = $132$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$0 + $9_1 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < $9_1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
     }
     label$14 : {
      if (($406(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) == ($9_1 | 0)) {
       break label$14
      }
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      if (!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
       break label$9
      }
     }
     if (HEAPU8[($0_1 + 26 | 0) >> 0] | 0) {
      break label$9
     }
     label$15 : {
      if (!(HEAPU8[($0_1 + 25 | 0) >> 0] | 0)) {
       break label$15
      }
      if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
       break label$9
      }
      $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$15
      }
      if (HEAPU8[($9_1 + 121 | 0) >> 0] | 0) {
       break label$9
      }
     }
     label$16 : {
      if (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) {
       break label$16
      }
      $9_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$9_1) {
       break label$16
      }
      label$17 : {
       if (!($69($6_1 | 0) | 0)) {
        break label$17
       }
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $8_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 128 | 0, $4_1 + 140 | 0 | 0) | 0;
       if (!$8_1) {
        break label$9
       }
       $762($4_1 + 96 | 0 | 0, $8_1 | 0);
       HEAP8[($0_1 + 29 | 0) >> 0] = $456($4_1 + 96 | 0 | 0, $4_1 + 80 | 0 | 0) | 0;
       $735($8_1 | 0);
       label$18 : {
        if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
         break label$18
        }
        HEAP32[($9_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
       }
       $67($6_1 | 0);
       break label$16;
      }
      if (!($69($6_1 | 0) | 0)) {
       break label$16
      }
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $8_1 = $50($1_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 128 | 0, $4_1 + 140 | 0 | 0) | 0;
      if (!$8_1) {
       break label$9
      }
      $762($4_1 + 96 | 0 | 0, $8_1 | 0);
      HEAP8[($0_1 + 29 | 0) >> 0] = $457($4_1 + 96 | 0 | 0, $4_1 + 80 | 0 | 0) | 0;
      $735($8_1 | 0);
      if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
       break label$16
      }
      HEAP32[($9_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
     }
     if ((HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      continue label$6
     }
     $393(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 112 | 0 | 0);
     if ((HEAP32[($4_1 + 124 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($4_1 + 120 | 0) >> 2] | 0) >>> 0) {
      continue label$6
     }
    }
    break label$6;
   };
   label$19 : {
    $9_1 = HEAP32[$7_1 >> 2] | 0;
    if (!$9_1) {
     break label$19
    }
    $815($9_1 | 0);
    HEAP32[$7_1 >> 2] = 0;
   }
   $395(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$20 : {
    $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$20
    }
    label$21 : {
     $8_1 = HEAP32[($9_1 + 20 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$21
     }
     $245_1 = $9_1;
     i64toi32_i32$1 = $9_1 + 48 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $248_1 = i64toi32_i32$0;
     $248$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $9_1 + 64 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $251_1 = i64toi32_i32$5;
     $251$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $248$hi;
     i64toi32_i32$1 = $248_1;
     i64toi32_i32$5 = $251$hi;
     i64toi32_i32$3 = $251_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $253$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $255$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $253$hi;
     $38_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $255$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($38_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     HEAP32[($245_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    }
    if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$20
    }
    if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$20
    }
    i64toi32_i32$0 = $9_1 + 48 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $9_1 + 64 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
    $15$hi = i64toi32_i32$4;
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) >>> 10 | 0;
    i64toi32_i32$4 = $13$hi;
    HEAP32[($4_1 + 16 | 0) >> 2] = $13_1;
    i64toi32_i32$4 = $15$hi;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$4 = $12$hi;
    HEAP32[($4_1 + 8 | 0) >> 2] = $12_1;
    i64toi32_i32$4 = $14$hi;
    HEAP32[($4_1 + 4 | 0) >> 2] = $14_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(36814 | 0, $4_1 | 0);
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   label$22 : {
    $11_1 = $4_1 + 144 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $9_1 | 0;
  }
  $859(36669 | 0, 35264 | 0, 864 | 0);
  abort();
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 972 | 0);
  }
  $217($0_1 | 0, $1_1 | 0);
 }
 
 function $424($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   $0_1 = $425($0_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = $0_1 + $1_1 | 0;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   HEAP32[$0_1 >> 2] = $3_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($2_1) {
    break label$3
   }
   label$4 : {
    $2_1 = $813(128 | 0) | 0;
    if (!$2_1) {
     break label$4
    }
    $214($2_1 | 0, 11 | 0);
    HEAP32[($2_1 + 12 | 0) >> 2] = 3;
    $974($2_1 + 40 | 0 | 0, 0 | 0, 83 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    break label$3;
   }
   $2_1 = 0;
   if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = 128;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(35341 | 0, $1_1 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $44$hi = 0, $11_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($257($2_1 + 40 | 0 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
       break label$6
      }
      if (!(HEAPU8[($0_1 + 30 | 0) >> 0] | 0)) {
       break label$6
      }
      i64toi32_i32$0 = HEAP32[($1_1 + 336 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 340 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$0;
      $6$hi = i64toi32_i32$1;
      if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
       break label$6
      }
      $0_1 = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
     }
     if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = 35978;
     $827(35873 | 0, $2_1 | 0);
     break label$3;
    }
    label$7 : {
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 1024e3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $44$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $44$hi;
     $11_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_udiv($11_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     if (!($257($2_1 + 40 | 0 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$7
     }
     $0_1 = $256(HEAPU8[($2_1 + 40 | 0) >> 0] | 0 | 0) | 0;
     label$8 : {
      if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = 35978;
      $827(36011 | 0, $2_1 + 16 | 0 | 0);
     }
     HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
     break label$3;
    }
    if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = 35978;
    $827(36083 | 0, $2_1 + 32 | 0 | 0);
    break label$3;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $256(HEAPU8[($2_1 + 40 | 0) >> 0] | 0 | 0) | 0;
  }
  label$9 : {
   $5_1 = $2_1 + 48 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $60_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $3_1 = $778($0_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
    $4_1 = 0;
    label$5 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (($3_1 | 0) == (1 | 0)) {
       break label$6
      }
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $1_1;
      HEAP32[$1_1 >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = 8;
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$5
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2_1 + 44 | 0) >> 2] = $0_1 & 255 | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = $0_1 >>> 24 | 0;
      $4_1 = 8;
      HEAP32[($2_1 + 40 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
      $827(36955 | 0, $2_1 + 32 | 0 | 0);
      break label$5;
     }
     i64toi32_i32$1 = $780($0_1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $60_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $1_1;
     HEAP32[$1_1 >> 2] = $60_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = 0;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     $4_1 = 16;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $4_1 = 16;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $0_1 >>> 24 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
     $827(36955 | 0, $2_1 | 0);
    }
    label$7 : {
     $6_1 = $2_1 + 64 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $4_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 61 | 0);
   abort();
  }
  $859(36951 | 0, 36875 | 0, 62 | 0);
  abort();
 }
 
 function $428($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $16$hi = 0, $15_1 = 0, $14_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $16_1 = 0, $96$hi = 0, $149_1 = 0, $154_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  $4_1 = $754($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    $5_1 = $427($0_1 | 0, $3_1 + 80 | 0 | 0) | 0;
    if (!$5_1) {
     break label$4
    }
    $6_1 = (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) < (3 | 0);
    label$5 : {
     if ((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$5
     }
     $7_1 = $1_1 & 255 | 0;
     $8_1 = $1_1 >>> 24 | 0;
     $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $10_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $11_1 = $3_1 + 60 | 0;
     $12_1 = $3_1 + 64 | 0;
     $13_1 = $3_1 + 52 | 0;
     label$6 : while (1) {
      label$7 : {
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $6_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
       HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $6_1 >>> 24 | 0;
       HEAP32[$11_1 >> 2] = $6_1 & 255 | 0;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$0 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
       HEAP32[$12_1 >> 2] = i64toi32_i32$0;
       HEAP32[$13_1 >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
       HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $8_1;
       HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
       HEAP32[($3_1 + 40 | 0) >> 2] = $9_1;
       HEAP32[($3_1 + 44 | 0) >> 2] = $7_1;
       $827(37019 | 0, $3_1 + 32 | 0 | 0);
      }
      label$8 : {
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$1;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $96$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $96$hi;
       i64toi32_i32$3 = $5_1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$8
       }
       i64toi32_i32$2 = $16$hi;
       $766($0_1 | 0, $16_1 - $5_1 | 0 | 0) | 0;
      }
      $4_1 = $754($0_1 | 0) | 0;
      $5_1 = $427($0_1 | 0, $3_1 + 80 | 0 | 0) | 0;
      if (!$5_1) {
       break label$4
      }
      $6_1 = (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) < (3 | 0);
      if ((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$9 : {
     if (!$6_1) {
      break label$9
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$2;
     $0_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $0_1 >>> 24 | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
     $827(36985 | 0, $3_1 | 0);
    }
    if (!$2_1) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = $4_1;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
    $149_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $149_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$3 = $3_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $154_1 = i64toi32_i32$2;
    i64toi32_i32$2 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $154_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$3;
   }
   $5_1 = 0;
  }
  label$10 : {
   $15_1 = $3_1 + 96 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $5_1 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $827(37076 | 0, $2_1 | 0);
    }
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
   }
   $859(36868 | 0, 36875 | 0, 126 | 0);
   abort();
  }
  $859(36951 | 0, 36875 | 0, 127 | 0);
  abort();
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 32 | 0 | 0, $0_1 | 0);
    HEAP32[$1_1 >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
    $0_1 = 0;
    label$5 : {
     if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : while (1) {
       HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 8 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
       label$8 : {
        if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
         break label$8
        }
        $3_1 = $0_1;
        break label$6;
       }
       $3_1 = 16;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != (16 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = $3_1;
     $0_1 = 1;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 12 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     $827(37126 | 0, $2_1 | 0);
    }
    label$9 : {
     $6_1 = $2_1 + 48 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 140 | 0);
   abort();
  }
  $859(37117 | 0, 36875 | 0, 141 | 0);
  abort();
 }
 
 function $431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $9$hi = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $36_1 = 0, $40_1 = 0, $3_1 = 0, $10_1 = 0, $10$hi = 0, $11_1 = 0, $11$hi = 0, $5_1 = 0, $6_1 = 0, $148$hi = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 64 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 64 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $36_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $36_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $40_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $40_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $9_1 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37221 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $9_1 = $778($2_1 + 64 | 0 | 0) | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $9_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($1_1 + 40 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
     HEAP16[($1_1 + 44 | 0) >> 1] = $777($2_1 + 64 | 0 | 0) | 0;
     $766($2_1 + 64 | 0 | 0, 10 | 0) | 0;
     $0_1 = 0;
     label$10 : while (1) {
      HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 48 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (9 | 0)) {
       continue label$10
      }
      break label$10;
     };
     $766($2_1 + 64 | 0 | 0, 4 | 0) | 0;
     HEAP32[($1_1 + 84 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
     $0_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & (HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) > (-1 | 0) | 0;
     if (($0_1 | 0) != (1 | 0)) {
      break label$5
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     $0_1 = 1;
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     $4_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$1;
     $9$hi = i64toi32_i32$0;
     $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     $6_1 = HEAPU16[($1_1 + 44 | 0) >> 1] | 0;
     HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     $148$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $148$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $4_1;
     i64toi32_i32$0 = $11$hi;
     HEAP32[($2_1 + 24 | 0) >> 2] = $11_1;
     i64toi32_i32$0 = $10$hi;
     HEAP32[($2_1 + 20 | 0) >> 2] = $10_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     $827(37264 | 0, $2_1 + 16 | 0 | 0);
    }
    label$11 : {
     $8_1 = $2_1 + 80 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 169 | 0);
   abort();
  }
  $859(37209 | 0, 36875 | 0, 170 | 0);
  abort();
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $9_1 = 0, $36_1 = 0, $40_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 48 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 48 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $36_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $36_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $40_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $40_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
        $766($2_1 + 48 | 0 | 0, 4 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37221 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      $766($2_1 + 48 | 0 | 0, 4 | 0) | 0;
      i64toi32_i32$1 = 0;
      $11_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $11$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $11_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     $766($2_1 + 48 | 0 | 0, 8 | 0) | 0;
     HEAP16[($1_1 + 40 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     HEAP16[($1_1 + 42 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     HEAP16[($1_1 + 44 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     $766($2_1 + 48 | 0 | 0, 2 | 0) | 0;
     $0_1 = 0;
     $3_1 = $778($2_1 + 48 | 0 | 0) | 0;
     label$10 : while (1) {
      HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 48 | 0) >> 2] = $3_1;
      $3_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (9 | 0)) {
       continue label$10
      }
      break label$10;
     };
     HEAP32[($1_1 + 84 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 88 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
     $3_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     $0_1 = ($3_1 | 0) > (-1 | 0);
     if (($3_1 | 0) < (0 | 0)) {
      break label$5
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     $0_1 = 1;
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU16[($1_1 + 86 | 0) >> 1] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$0;
     $6_1 = HEAPU16[($1_1 + 40 | 0) >> 1] | 0;
     $7_1 = HEAPU16[($1_1 + 42 | 0) >> 1] | 0;
     $8_1 = HEAPU16[($1_1 + 44 | 0) >> 1] | 0;
     HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 90 | 0) >> 1] | 0;
     HEAP32[($2_1 + 40 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     $827(37417 | 0, $2_1 + 16 | 0 | 0);
    }
    label$11 : {
     $10_1 = $2_1 + 64 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 219 | 0);
   abort();
  }
  $859(37405 | 0, 36875 | 0, 220 | 0);
  abort();
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $33_1 = 0, $37_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $131$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 48 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 48 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $33_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $33_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $37_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $37_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $6_1 = i64toi32_i32$0;
        $6$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37545 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $6_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $6$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $6_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     $0_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     HEAP8[($1_1 + 40 | 0) >> 0] = 0;
     $0_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & ($0_1 | 0) > (-1 | 0) | 0;
     $3_1 = $777($2_1 + 48 | 0 | 0) | 0;
     label$10 : {
      if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$10
      }
      HEAP8[($1_1 + 43 | 0) >> 0] = 0;
      HEAP8[($1_1 + 42 | 0) >> 0] = $3_1 & 31 | 0 | 96 | 0;
      HEAP8[($1_1 + 40 | 0) >> 0] = $3_1 >>> 10 | 0 | 96 | 0;
      HEAP8[($1_1 + 41 | 0) >> 0] = ($3_1 >>> 5 | 0) & 31 | 0 | 96 | 0;
     }
     if ($0_1 ^ 1 | 0 | (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0) | 0) {
      break label$5
     }
     label$11 : {
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      $3_1 = HEAPU8[$1_1 >> 0] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
      $0_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$0;
      HEAP32[($2_1 + 40 | 0) >> 2] = $1_1 + 40 | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      $131$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = $131$hi;
      i64toi32_i32$1 = __wasm_i64_udiv($6_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
      i64toi32_i32$0 = $8$hi;
      HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
      i64toi32_i32$0 = $7$hi;
      HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
      $827(37588 | 0, $2_1 + 16 | 0 | 0);
     }
     $0_1 = 1;
    }
    label$12 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 271 | 0);
   abort();
  }
  $859(37533 | 0, 36875 | 0, 272 | 0);
  abort();
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$0_1) {
         break label$6
        }
        if (!$2_1) {
         break label$5
        }
        if (!$1_1) {
         break label$4
        }
        $3_1 = 0;
        label$7 : while (1) {
         $4_1 = $764($0_1 | 0) | 0;
         if (($4_1 | 0) == (-1 | 0)) {
          break label$3
         }
         HEAP8[($1_1 + $3_1 | 0) >> 0] = $4_1;
         if (!$4_1) {
          break label$1
         }
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != ($2_1 | 0)) {
          continue label$7
         }
         break label$2;
        };
       }
       $859(36868 | 0, 36875 | 0, 317 | 0);
       abort();
      }
      $859(37706 | 0, 36875 | 0, 318 | 0);
      abort();
     }
     $859(37715 | 0, 36875 | 0, 319 | 0);
     abort();
    }
    $2_1 = $3_1 + 1 | 0;
   }
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = 0;
  }
  return 1 | 0;
 }
 
 function $435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 32 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 32 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     $766($2_1 + 32 | 0 | 0, 4 | 0) | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
     $766($2_1 + 32 | 0 | 0, 12 | 0) | 0;
     $3_1 = $1_1 + 12 | 0;
     if (!($434($2_1 + 32 | 0 | 0, $3_1 | 0, 32 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1 & 255 | 0;
      HEAP32[$2_1 >> 2] = $4_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 >>> 24 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
      $827(37730 | 0, $2_1 | 0);
     }
     $0_1 = 1;
     $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == (1936684398 | 0)) {
      break label$5
     }
     if (($1_1 | 0) == (1986618469 | 0)) {
      break label$5
     }
     $0_1 = 0;
    }
    label$7 : {
     $6_1 = $2_1 + 48 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 345 | 0);
   abort();
  }
  $859(37722 | 0, 36875 | 0, 346 | 0);
  abort();
 }
 
 function $436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $27_1 = 0, $30_1 = 0, $63_1 = 0, $66_1 = 0, $76_1 = 0, $78$hi = 0, $80$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 0;
  HEAP16[($1_1 + 48 | 0) >> 1] = 0;
  label$3 : {
   if (!($437($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $3_1 = ($2_1 + 32 | 0) + 8 | 0;
   $4_1 = $0_1 + 8 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $27_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $27_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $30_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $30_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($428($2_1 + 32 | 0 | 0, 1936995172 | 0, 0 | 0) | 0)) {
       break label$6
      }
      if (!($429($2_1 + 32 | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
       break label$5
      }
      HEAP8[($1_1 + 50 | 0) >> 0] = $772($2_1 + 32 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      HEAP8[($1_1 + 48 | 0) >> 0] = 1;
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU8[($1_1 + 50 | 0) >> 0] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
      $827(37795 | 0, $2_1 + 16 | 0 | 0);
     }
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $63_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[i64toi32_i32$0 >> 2] = $63_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $66_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $66_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $428($2_1 + 32 | 0 | 0, 1937126244 | 0, $1_1 + 56 | 0 | 0) | 0;
     if ($4_1) {
      break label$4
     }
    }
    $3_1 = 1;
    break label$3;
   }
   $3_1 = 1;
   HEAP8[($1_1 + 49 | 0) >> 0] = 1;
   $5_1 = $1_1 + 64 | 0;
   $76_1 = $5_1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $78$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $80$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $78$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $80$hi;
   i64toi32_i32$4 = i64toi32_i32$2 + $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $76_1;
   HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$5;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(37843 | 0, $2_1 | 0);
  }
  label$7 : {
   $7_1 = $2_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $10_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $766($0_1 | 0, 16 | 0) | 0;
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  HEAP16[($1_1 + 12 | 0) >> 1] = $777($0_1 | 0) | 0;
  $3_1 = $1_1 + 14 | 0;
  $768($0_1 | 0, $3_1 | 0, 32 | 0) | 0;
  HEAP8[($1_1 + 45 | 0) >> 0] = 0;
  HEAP16[($1_1 + 46 | 0) >> 1] = $777($0_1 | 0) | 0;
  $766($0_1 | 0, 2 | 0) | 0;
  label$3 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$3
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
   $5_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
   $6_1 = HEAPU16[$1_1 >> 1] | 0;
   $7_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $8_1 = HEAPU16[($1_1 + 12 | 0) >> 1] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = HEAPU16[($1_1 + 46 | 0) >> 1] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$2_1 >> 2] = $6_1;
   $827(39604 | 0, $2_1 | 0);
  }
  label$4 : {
   $10_1 = $2_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $9_1 = 0.0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $2_1 = global$0 - 96 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  $766($0_1 | 0, 6 | 0) | 0;
  label$3 : {
   label$4 : {
    $3_1 = HEAPU16[$1_1 >> 1] | 0;
    if ($3_1 >>> 0 > 1 >>> 0) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
     $827(37898 | 0, $2_1 + 16 | 0 | 0);
    }
    HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
    HEAP16[($1_1 + 4 | 0) >> 1] = $777($0_1 | 0) | 0;
    $766($0_1 | 0, 4 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
    label$6 : {
     label$7 : {
      if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$6;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 1;
     HEAP32[($1_1 + 20 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 3 | 0;
    }
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = ($0_1 | 0) > (-1 | 0);
    if (($0_1 | 0) < (0 | 0)) {
     break label$3
    }
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    $4_1 = 1;
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $0_1 = HEAPU16[$1_1 >> 1] | 0;
    $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $5_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(37929 | 0, $2_1 | 0);
    break label$3;
   }
   $4_1 = 0;
   if (($3_1 | 0) != (2 | 0)) {
    break label$3
   }
   $4_1 = 0;
   label$8 : {
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$8
    }
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[($2_1 + 80 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
    $827(37898 | 0, $2_1 + 80 | 0 | 0);
   }
   if (($777($0_1 | 0) | 0 | 0) != (3 | 0)) {
    break label$3
   }
   if (($777($0_1 | 0) | 0 | 0) != (16 | 0)) {
    break label$3
   }
   if (($777($0_1 | 0) | 0 | 0) != (65534 | 0)) {
    break label$3
   }
   if ($777($0_1 | 0) | 0) {
    break label$3
   }
   if (($778($0_1 | 0) | 0 | 0) != (65536 | 0)) {
    break label$3
   }
   $766($0_1 | 0, 4 | 0) | 0;
   i64toi32_i32$0 = $780($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   label$9 : {
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$9
    }
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$9
    }
    i64toi32_i32$1 = $8$hi;
    wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    HEAPF64[($2_1 + 64 | 0) >> 3] = +Math_fround(+wasm2js_scratch_load_f64());
    $827(38013 | 0, $2_1 + 64 | 0 | 0);
   }
   label$10 : {
    label$11 : {
     i64toi32_i32$1 = $8$hi;
     wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $9_1 = +wasm2js_scratch_load_f64();
     if (!($9_1 < 4294967296.0 & $9_1 >= 0.0 | 0)) {
      break label$11
     }
     $4_1 = ~~$9_1 >>> 0;
     break label$10;
    }
    $4_1 = 0;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $4_1 << 16 | 0;
   HEAP16[($1_1 + 2 | 0) >> 1] = $778($0_1 | 0) | 0;
   $4_1 = 0;
   if (($778($0_1 | 0) | 0 | 0) != (2130706432 | 0)) {
    break label$3
   }
   $4_1 = $778($0_1 | 0) | 0;
   HEAP16[($1_1 + 4 | 0) >> 1] = $4_1 & 65528 | 0;
   HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 >>> 3 | 0;
   $3_1 = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $4_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   label$12 : {
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$12
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
    $827(38028 | 0, $2_1 + 48 | 0 | 0);
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $5_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
   $827(37929 | 0, $2_1 + 32 | 0 | 0);
  }
  label$13 : {
   $7_1 = $2_1 + 96 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $439($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $55_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $4_1 = $1_1 + 104 | 0;
    $768($0_1 | 0, $4_1 | 0, $2_1 | 0) | 0;
    $0_1 = 0;
    label$5 : {
     if (!($271($1_1 + 80 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = 1;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $2_1 = HEAPU8[($1_1 + 83 | 0) >> 0] | 0;
     $4_1 = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
     $5_1 = HEAPU8[($1_1 + 81 | 0) >> 0] | 0;
     $6_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     $7_1 = HEAPU8[($1_1 + 80 | 0) >> 0] | 0;
     i64toi32_i32$2 = $1_1 + 84 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $55_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $55_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[$3_1 >> 2] = $7_1;
     $827(38058 | 0, $3_1 | 0);
    }
    label$6 : {
     $9_1 = $3_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $0_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 505 | 0);
   abort();
  }
  $859(38054 | 0, 36875 | 0, 506 | 0);
  abort();
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $16_1 = 0, $20$hi = 0, $14_1 = 0, $6_1 = 0, $20_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $19_1 = 0, $18_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $90$hi = 0, $93$hi = 0, $118_1 = 0, $121_1 = 0, $131_1 = 0, $134_1 = 0, $146$hi = 0, $154$hi = 0, $156$hi = 0, $171$hi = 0, $173$hi = 0, $196_1 = 0, $199_1 = 0, $502$hi = 0, $588$hi = 0, $710$hi = 0;
  label$1 : {
   $3_1 = global$0 - 240 | 0;
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$0_1) {
         break label$8
        }
        if (!$1_1) {
         break label$7
        }
        $762($3_1 + 224 | 0 | 0, $0_1 | 0);
        $4_1 = 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = 0;
        if (!($429($3_1 + 224 | 0 | 0, $1_1 | 0) | 0)) {
         break label$4
        }
        $5_1 = $778($3_1 + 224 | 0 | 0) | 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
        $4_1 = 0;
        if ((HEAP32[($3_1 + 228 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        label$9 : {
         if ($5_1 >>> 0 < 3 >>> 0) {
          break label$9
         }
         label$10 : {
          if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$10
          }
          $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[($3_1 + 148 | 0) >> 2] = 2;
          HEAP32[($3_1 + 144 | 0) >> 2] = $4_1;
          $827(38249 | 0, $3_1 + 144 | 0 | 0);
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = 2;
         break label$6;
        }
        if ($5_1) {
         break label$6
        }
        $6_1 = 0;
        break label$5;
       }
       $859(36951 | 0, 36875 | 0, 970 | 0);
       abort();
      }
      $859(38242 | 0, 36875 | 0, 971 | 0);
      abort();
     }
     $7_1 = ($2_1 | 0) == (1986618469 | 0) ? 78 : 28;
     $8_1 = $2_1 & 255 | 0;
     $9_1 = $2_1 >>> 24 | 0;
     $10_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $11_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $12_1 = ($3_1 + 112 | 0) + 20 | 0;
     $13_1 = ($2_1 | 0) == (1936684398 | 0);
     $6_1 = 0;
     label$11 : while (1) {
      $14_1 = $754($3_1 + 224 | 0 | 0) | 0;
      label$12 : {
       label$13 : {
        if (!($427($3_1 + 224 | 0 | 0, $3_1 + 208 | 0 | 0) | 0)) {
         break label$13
        }
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
        $90$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $93$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $90$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $93$hi;
        i64toi32_i32$3 = $756($0_1 | 0) | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$12
        }
       }
       if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[$3_1 >> 2] = $6_1;
       $827(38306 | 0, $3_1 | 0);
       break label$5;
      }
      $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
      label$14 : {
       label$15 : {
        label$16 : {
         $15_1 = ($2_1 | 0) != (1986618469 | 0);
         if ($15_1) {
          break label$16
         }
         $16_1 = 0;
         $4_1 = 0;
         if (($5_1 | 0) == (1701733238 | 0)) {
          break label$15
         }
         break label$14;
        }
        $16_1 = 0;
        label$17 : {
         if (($2_1 | 0) == (1936684398 | 0)) {
          break label$17
         }
         $4_1 = 0;
         break label$14;
        }
        $4_1 = 0;
        if (($5_1 | 0) != (1701733217 | 0)) {
         break label$14
        }
       }
       $17_1 = ($3_1 + 176 | 0) + 8 | 0;
       i64toi32_i32$3 = ($3_1 + 224 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $118_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $17_1;
       HEAP32[i64toi32_i32$2 >> 2] = $118_1;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 224 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($3_1 + 228 | 0) >> 2] | 0;
       $121_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[($3_1 + 176 | 0) >> 2] = $121_1;
       HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$2;
       $766($3_1 + 176 | 0 | 0, $7_1 | 0) | 0;
       $16_1 = ($3_1 + 192 | 0) + 8 | 0;
       i64toi32_i32$3 = $17_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $131_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $16_1;
       HEAP32[i64toi32_i32$2 >> 2] = $131_1;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
       $134_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[($3_1 + 192 | 0) >> 2] = $134_1;
       HEAP32[($3_1 + 196 | 0) >> 2] = i64toi32_i32$2;
       label$18 : {
        label$19 : {
         $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
         if (!$5_1) {
          break label$19
         }
         label$20 : while (1) {
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$2;
          $20$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $146$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $20$hi;
          i64toi32_i32$3 = i64toi32_i32$2;
          i64toi32_i32$2 = $146$hi;
          i64toi32_i32$0 = $5_1;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < $5_1 >>> 0 | 0) | 0) {
           break label$19
          }
          i64toi32_i32$3 = $20$hi;
          $4_1 = $771($3_1 + 192 | 0 | 0, $20_1 | 0) | 0;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$3 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
          $154$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $156$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $154$hi;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$3 = $156$hi;
          i64toi32_i32$2 = $4_1;
          if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
           break label$19
          }
          label$21 : {
           if ((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) != (1936289382 | 0)) {
            break label$21
           }
           if ($4_1 >>> 0 >= 129 >>> 0) {
            break label$18
           }
           $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
           if (!$5_1) {
            break label$19
           }
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$0 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
           $171$hi = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           $173$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $171$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $173$hi;
           i64toi32_i32$3 = $5_1;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < $5_1 >>> 0 | 0) | 0) {
            break label$19
           }
           label$22 : {
            if ((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) != (1718775137 | 0)) {
             break label$22
            }
            $5_1 = $778($3_1 + 176 | 0 | 0) | 0;
            if ((HEAP32[($3_1 + 180 | 0) >> 2] | 0 | 0) < (0 | 0)) {
             break label$19
            }
            HEAP32[($3_1 + 216 | 0) >> 2] = $5_1;
           }
           if (!$4_1) {
            break label$19
           }
           break label$18;
          }
          $766($3_1 + 176 | 0 | 0, $4_1 - $5_1 | 0 | 0) | 0;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
          $196_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $16_1;
          HEAP32[i64toi32_i32$2 >> 2] = $196_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
          $199_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $3_1;
          HEAP32[($3_1 + 192 | 0) >> 2] = $199_1;
          HEAP32[($3_1 + 196 | 0) >> 2] = i64toi32_i32$2;
          $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
          if ($5_1) {
           continue label$20
          }
          break label$20;
         };
        }
        $4_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$18
        }
        $4_1 = 0;
        $827(38343 | 0, 0 | 0);
       }
       $16_1 = 1;
      }
      label$23 : {
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$23
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$23
       }
       $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
       HEAP32[(($3_1 + 112 | 0) + 16 | 0) >> 2] = $5_1 >>> 24 | 0;
       HEAP32[(($3_1 + 112 | 0) + 28 | 0) >> 2] = $5_1 & 255 | 0;
       HEAP32[$12_1 >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
       HEAP32[(($3_1 + 112 | 0) + 24 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($3_1 + 112 | 0) >> 2] = $9_1;
       HEAP32[($3_1 + 116 | 0) >> 2] = $11_1;
       HEAP32[($3_1 + 120 | 0) >> 2] = $10_1;
       HEAP32[($3_1 + 124 | 0) >> 2] = $8_1;
       $827(38442 | 0, $3_1 + 112 | 0 | 0);
      }
      $17_1 = 24;
      label$24 : {
       label$25 : {
        label$26 : {
         label$27 : {
          label$28 : {
           if ($13_1) {
            break label$28
           }
           if ($15_1) {
            break label$24
           }
           label$29 : {
            label$30 : {
             $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
             if (($5_1 | 0) > (1685481572 | 0)) {
              break label$30
             }
             label$31 : {
              if (($5_1 | 0) > (1685220712 | 0)) {
               break label$31
              }
              if (($5_1 + -1635148593 | 0) >>> 0 < 4 >>> 0) {
               break label$25
              }
              if (($5_1 | 0) != (1635135537 | 0)) {
               break label$24
              }
              $17_1 = 23;
              if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$24
              }
              if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$24
              }
              $827(38689 | 0, 0 | 0);
              break label$24;
             }
             label$32 : {
              if (($5_1 | 0) > (1685479797 | 0)) {
               break label$32
              }
              if (($5_1 | 0) == (1685220713 | 0)) {
               break label$29
              }
              if (($5_1 | 0) != (1685479729 | 0)) {
               break label$24
              }
              break label$25;
             }
             if (($5_1 | 0) == (1685479798 | 0)) {
              break label$25
             }
             if (($5_1 | 0) != (1685481521 | 0)) {
              break label$24
             }
             break label$26;
            }
            label$33 : {
             label$34 : {
              label$35 : {
               if (($5_1 | 0) > (1835692128 | 0)) {
                break label$35
               }
               label$36 : {
                if (($5_1 | 0) > (1751479856 | 0)) {
                 break label$36
                }
                if (($5_1 | 0) == (1685481573 | 0)) {
                 break label$26
                }
                if (($5_1 | 0) == (1748121139 | 0)) {
                 break label$34
                }
                break label$24;
               }
               if (($5_1 | 0) == (1751479857 | 0)) {
                break label$26
               }
               if (($5_1 | 0) == (1752589105 | 0)) {
                break label$26
               }
               if (($5_1 | 0) != (1785750887 | 0)) {
                break label$24
               }
               break label$27;
              }
              if (($5_1 + -1835692129 | 0) >>> 0 < 2 >>> 0) {
               break label$27
              }
              if (($5_1 | 0) == (1836070006 | 0)) {
               break label$33
              }
              if (($5_1 | 0) != (1932670515 | 0)) {
               break label$24
              }
             }
             $17_1 = 5;
             if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$24
             }
             if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$24
             }
             $827(38587 | 0, 0 | 0);
             break label$24;
            }
            $17_1 = 2;
            if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            $17_1 = 2;
            if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $827(38550 | 0, 0 | 0);
            break label$24;
           }
           $17_1 = 12;
           if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$24
           }
           if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$24
           }
           $827(38660 | 0, 0 | 0);
           break label$24;
          }
          label$37 : {
           label$38 : {
            label$39 : {
             label$40 : {
              label$41 : {
               label$42 : {
                label$43 : {
                 label$44 : {
                  label$45 : {
                   $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
                   if (($5_1 | 0) > (1768775987 | 0)) {
                    break label$45
                   }
                   label$46 : {
                    if (($5_1 | 0) > (1685353314 | 0)) {
                     break label$46
                    }
                    label$47 : {
                     switch ($5_1 + -1633889587 | 0 | 0) {
                     case 1:
                      break label$43;
                     case 0:
                      break label$44;
                     default:
                      break label$47;
                     };
                    }
                    if (($5_1 | 0) == (778924083 | 0)) {
                     break label$38
                    }
                    if (($5_1 | 0) != (1685220723 | 0)) {
                     break label$24
                    }
                    $17_1 = 13;
                    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                     break label$24
                    }
                    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$24
                    }
                    $827(38934 | 0, 0 | 0);
                    break label$24;
                   }
                   $15_1 = $5_1 + -1685353315 | 0;
                   if ($15_1 >>> 0 <= 9 >>> 0) {
                    break label$39
                   }
                   break label$37;
                  }
                  label$48 : {
                   label$49 : {
                    label$50 : {
                     if (($5_1 | 0) > (1935764849 | 0)) {
                      break label$50
                     }
                     label$51 : {
                      if (($5_1 | 0) > (1836069984 | 0)) {
                       break label$51
                      }
                      if (($5_1 | 0) == (1768775988 | 0)) {
                       break label$40
                      }
                      if (($5_1 | 0) == (1819304813 | 0)) {
                       break label$49
                      }
                      break label$24;
                     }
                     if (($5_1 | 0) == (1836069985 | 0)) {
                      break label$48
                     }
                     if (($5_1 | 0) != (1836253201 | 0)) {
                      break label$24
                     }
                     $17_1 = 15;
                     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                      break label$24
                     }
                     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$24
                     }
                     $827(38963 | 0, 0 | 0);
                     break label$24;
                    }
                    label$52 : {
                     if (($5_1 | 0) > (1935767407 | 0)) {
                      break label$52
                     }
                     if (($5_1 | 0) == (1935764850 | 0)) {
                      break label$42
                     }
                     if (($5_1 | 0) != (1935767394 | 0)) {
                      break label$24
                     }
                     $17_1 = 10;
                     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                      break label$24
                     }
                     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$24
                     }
                     $827(38874 | 0, 0 | 0);
                     break label$24;
                    }
                    if (($5_1 | 0) == (1935767408 | 0)) {
                     break label$41
                    }
                    if (($5_1 | 0) == (1936684916 | 0)) {
                     break label$49
                    }
                    if (($5_1 | 0) != (1953984371 | 0)) {
                     break label$24
                    }
                   }
                   $17_1 = 18;
                   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                    break label$24
                   }
                   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$24
                   }
                   $827(39034 | 0, 0 | 0);
                   break label$24;
                  }
                  $17_1 = 1;
                  if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                   break label$24
                  }
                  if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$24
                  }
                  $827(38718 | 0, 0 | 0);
                  break label$24;
                 }
                 $17_1 = 6;
                 if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$24
                 }
                 if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$24
                 }
                 $827(38753 | 0, 0 | 0);
                 break label$24;
                }
                $17_1 = 8;
                if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$24
                }
                if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$24
                }
                $827(38814 | 0, 0 | 0);
                break label$24;
               }
               $17_1 = 9;
               if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                break label$24
               }
               if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$24
               }
               $827(38844 | 0, 0 | 0);
               break label$24;
              }
              $17_1 = 11;
              if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$24
              }
              if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$24
              }
              $827(38904 | 0, 0 | 0);
              break label$24;
             }
             $17_1 = 16;
             if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$24
             }
             if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$24
             }
             $827(38998 | 0, 0 | 0);
             break label$24;
            }
            if (!((1 << $15_1 | 0) & 549 | 0)) {
             break label$37
            }
            $17_1 = 19;
            if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
            HEAP32[($3_1 + 96 | 0) >> 2] = $5_1 >>> 24 | 0;
            HEAP32[($3_1 + 108 | 0) >> 2] = $5_1 & 255 | 0;
            HEAP32[($3_1 + 100 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
            HEAP32[($3_1 + 104 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
            $827(39064 | 0, $3_1 + 96 | 0 | 0);
            break label$24;
           }
           $17_1 = 22;
           if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$24
           }
           if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$24
           }
           $827(39104 | 0, 0 | 0);
           break label$24;
          }
          if (($5_1 | 0) != (1700998451 | 0)) {
           break label$24
          }
          $17_1 = 7;
          if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$24
          }
          if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$24
          }
          $827(38783 | 0, 0 | 0);
          break label$24;
         }
         $17_1 = 17;
         if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$24
         }
         if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$24
         }
         $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
         HEAP32[($3_1 + 80 | 0) >> 2] = $5_1 >>> 24 | 0;
         HEAP32[($3_1 + 92 | 0) >> 2] = $5_1 & 255 | 0;
         HEAP32[($3_1 + 84 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($3_1 + 88 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
         $827(38618 | 0, $3_1 + 80 | 0 | 0);
         break label$24;
        }
        $17_1 = 20;
        if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        $827(38520 | 0, 0 | 0);
        break label$24;
       }
       $17_1 = 0;
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$24
       }
       $17_1 = 0;
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$24
       }
       $17_1 = 0;
       $827(38491 | 0, 0 | 0);
      }
      label$53 : {
       $5_1 = $813(3352 | 0) | 0;
       if ($5_1) {
        break label$53
       }
       if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = 3352;
       $827(39133 | 0, $3_1 + 16 | 0 | 0);
       break label$5;
      }
      $15_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $17_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $15_1;
      $766($3_1 + 224 | 0 | 0, 6 | 0) | 0;
      $15_1 = $777($3_1 + 224 | 0 | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = $4_1;
      HEAP8[($5_1 + 2 | 0) >> 0] = $16_1;
      HEAP16[$5_1 >> 1] = $15_1;
      $16_1 = $5_1 + 16 | 0;
      $822($16_1 | 0, 0 | 0, 24 | 0) | 0;
      label$54 : {
       label$55 : {
        label$56 : {
         label$57 : {
          if (!$4_1) {
           break label$57
          }
          if ($4_1 >>> 0 >= 129 >>> 0) {
           break label$56
          }
          $768($3_1 + 192 | 0 | 0, $5_1 + 44 | 0 | 0, $4_1 | 0) | 0;
         }
         label$58 : {
          label$59 : {
           $4_1 = $754($3_1 + 224 | 0 | 0) | 0;
           if ($4_1 >>> 0 < $14_1 >>> 0) {
            break label$59
           }
           i64toi32_i32$3 = $3_1;
           i64toi32_i32$2 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
           $20_1 = i64toi32_i32$2;
           $20$hi = i64toi32_i32$1;
           $15_1 = $4_1 - $14_1 | 0;
           i64toi32_i32$1 = 0;
           $502$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$3 = i64toi32_i32$2;
           i64toi32_i32$2 = $502$hi;
           i64toi32_i32$0 = $15_1;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
            break label$59
           }
           i64toi32_i32$3 = $20$hi;
           $15_1 = $20_1 - $15_1 | 0;
           break label$58;
          }
          $15_1 = 0;
          if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$58
          }
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$3 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
          HEAP32[($3_1 + 64 | 0) >> 2] = i64toi32_i32$3;
          HEAP32[($3_1 + 68 | 0) >> 2] = $4_1 - $14_1 | 0;
          $827(39259 | 0, $3_1 + 64 | 0 | 0);
         }
         $4_1 = $5_1 + 8 | 0;
         label$60 : {
          switch ($17_1 | 0) {
          case 0:
           if ($441($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $15_1 | 0, $16_1 | 0) | 0) {
            break label$54
           }
           if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$55
           }
           $827(39310 | 0, 0 | 0);
           break label$55;
          case 1:
           label$76 : {
            if ($442($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $15_1 | 0, $16_1 | 0) | 0) {
             break label$76
            }
            label$77 : {
             if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$77
             }
             $827(39360 | 0, 0 | 0);
            }
            HEAP32[$4_1 >> 2] = 24;
           }
           label$78 : {
            $17_1 = HEAPU8[($5_1 + 206 | 0) >> 0] | 0;
            if (($17_1 | 0) == (64 | 0)) {
             break label$78
            }
            if (($17_1 | 0) != (107 | 0)) {
             break label$54
            }
            HEAP32[$4_1 >> 2] = 14;
            break label$54;
           }
           if ((HEAPU8[($5_1 + 208 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$54
           }
           HEAP32[$4_1 >> 2] = 21;
           break label$54;
          case 2:
           $443($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0);
           break label$54;
          case 5:
           if (!($444($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 6:
          case 7:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 8:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 9:
          case 10:
          case 11:
           label$79 : {
            $17_1 = $754($3_1 + 224 | 0 | 0) | 0;
            if ($17_1 >>> 0 < $14_1 >>> 0) {
             break label$79
            }
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$3;
            $16_1 = $17_1 - $14_1 | 0;
            i64toi32_i32$3 = 0;
            $588$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $20$hi;
            i64toi32_i32$0 = i64toi32_i32$1;
            i64toi32_i32$1 = $588$hi;
            i64toi32_i32$2 = $16_1;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
             break label$79
            }
            i64toi32_i32$0 = $20$hi;
            $17_1 = $20_1 - $16_1 | 0;
           }
           if (!($445($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $17_1 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 15:
           if (!($446($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 16:
           if (!($447($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 17:
           if (!($448($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 18:
           if (!($449($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 19:
           if (!($450($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 20:
           if (!($451($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $16_1 | 0, $3_1 + 208 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 22:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 23:
           if ($452($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $16_1 | 0) | 0) {
            break label$54
           }
           if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$55
           }
           $827(39411 | 0, 0 | 0);
           break label$55;
          default:
           break label$60;
          };
         }
         if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$54
         }
         HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
         HEAP32[(($3_1 + 32 | 0) + 20 | 0) >> 2] = $11_1;
         HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $10_1;
         HEAP32[(($3_1 + 32 | 0) + 28 | 0) >> 2] = $8_1;
         $17_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
         HEAP32[($3_1 + 32 | 0) >> 2] = $17_1 >>> 24 | 0;
         HEAP32[($3_1 + 44 | 0) >> 2] = $17_1 & 255 | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = ($17_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($3_1 + 40 | 0) >> 2] = ($17_1 >>> 8 | 0) & 255 | 0;
         $827(39461 | 0, $3_1 + 32 | 0 | 0);
         break label$54;
        }
        $859(39176 | 0, 36875 | 0, 1176 | 0);
        abort();
       }
       HEAP32[$4_1 >> 2] = 24;
      }
      $17_1 = $754($3_1 + 224 | 0 | 0) | 0;
      if ($17_1 >>> 0 < $14_1 >>> 0) {
       break label$3
      }
      label$80 : {
       label$81 : {
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$3;
        $14_1 = $17_1 - $14_1 | 0;
        i64toi32_i32$3 = 0;
        $710$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $710$hi;
        i64toi32_i32$1 = $14_1;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
         break label$81
        }
        i64toi32_i32$2 = $20$hi;
        $766($3_1 + 224 | 0 | 0, $20_1 - $14_1 | 0 | 0) | 0;
        break label$80;
       }
       label$82 : {
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$82
        }
        $827(39548 | 0, 0 | 0);
       }
       HEAP32[$4_1 >> 2] = 24;
      }
      HEAP32[(($1_1 + ($6_1 << 2 | 0) | 0) + 12 | 0) >> 2] = $5_1;
      $6_1 = $6_1 + 1 | 0;
      if ($6_1 >>> 0 < (HEAP32[($1_1 + 8 | 0) >> 2] | 0) >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    $4_1 = 1;
   }
   label$83 : {
    $19_1 = $3_1 + 240 | 0;
    if ($19_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $19_1;
   }
   return $4_1 | 0;
  }
  $859(39529 | 0, 36875 | 0, 1281 | 0);
  abort();
 }
 
 function $441($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $8_1 = 0, $12$hi = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, $12_1 = 0, $81$hi = 0, $111_1 = 0, $116_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!$0_1) {
       break label$6
      }
      if (!$1_1) {
       break label$5
      }
      $5_1 = 0;
      $6_1 = $754($0_1 | 0) | 0;
      if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
       break label$3
      }
      $7_1 = $754($0_1 | 0) | 0;
      $8_1 = $754($0_1 | 0) | 0;
      $9_1 = $427($0_1 | 0, $4_1 + 32 | 0 | 0) | 0;
      if (!$9_1) {
       break label$3
      }
      label$7 : {
       $2_1 = ($6_1 + $2_1 | 0) - $7_1 | 0;
       if ($2_1 >>> 0 <= $9_1 >>> 0) {
        break label$7
       }
       if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1635148611 | 0)) {
        break label$4
       }
      }
      label$8 : while (1) {
       label$9 : {
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
        HEAP32[($4_1 + 16 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
        $6_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
        HEAP32[$4_1 >> 2] = $6_1 >>> 24 | 0;
        HEAP32[($4_1 + 12 | 0) >> 2] = $6_1 & 255 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($4_1 + 8 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
        $827(39732 | 0, $4_1 | 0);
       }
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
       $12_1 = i64toi32_i32$1;
       $12$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $81$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $81$hi;
       i64toi32_i32$3 = $2_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > $2_1 >>> 0 | 0) | 0) {
        break label$3
       }
       i64toi32_i32$2 = $12$hi;
       $6_1 = $12_1;
       $766($0_1 | 0, $6_1 - $9_1 | 0 | 0) | 0;
       $8_1 = $754($0_1 | 0) | 0;
       $9_1 = $427($0_1 | 0, $4_1 + 32 | 0 | 0) | 0;
       if (!$9_1) {
        break label$3
       }
       $2_1 = $2_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= $9_1 >>> 0) {
        continue label$8
       }
       if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1635148611 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     $859(36868 | 0, 36875 | 0, 519 | 0);
     abort();
    }
    $859(38054 | 0, 36875 | 0, 520 | 0);
    abort();
   }
   HEAP32[$3_1 >> 2] = $8_1;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
   $111_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $3_1;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $111_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $4_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $116_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $116_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $5_1 = $439($0_1 | 0, $1_1 | 0, $2_1 - $9_1 | 0 | 0) | 0;
  }
  label$10 : {
   $11_1 = $4_1 + 48 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $442($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $7_1 = 0, $78_1 = 0, $83_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $5_1 = $754($0_1 | 0) | 0;
  $6_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $6_1 = $5_1 + $2_1 | 0;
   $2_1 = $754($0_1 | 0) | 0;
   HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($427($0_1 | 0, $4_1 + 56 | 0 | 0) | 0)) {
       break label$6
      }
      if ((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) == (1702061171 | 0)) {
       break label$5
      }
     }
     label$7 : while (1) {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$4
      }
      if (($754($0_1 | 0) | 0) >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      $769($0_1 | 0, $4_1 + 72 | 0 | 0);
      $766($0_1 | 0, 2 | 0) | 0;
      $2_1 = $754($0_1 | 0) | 0;
      HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      if (!($427($0_1 | 0, $4_1 + 56 | 0 | 0) | 0)) {
       continue label$7
      }
      if ((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (1702061171 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $6_1 = 0;
    if (!($429($0_1 | 0, $4_1 + 48 | 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $2_1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $78_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 64 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $83_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (!($578($0_1 | 0, $1_1 + 28 | 0 | 0) | 0)) {
     break label$4
    }
    $6_1 = 1;
    label$8 : {
     label$9 : {
      label$10 : {
       $0_1 = HEAPU8[($1_1 + 30 | 0) >> 0] | 0;
       switch ($0_1 + -103 | 0 | 0) {
       case 4:
        break label$3;
       case 1:
       case 2:
       case 3:
        break label$8;
       case 0:
        break label$9;
       default:
        break label$10;
       };
      }
      if (($0_1 | 0) != (64 | 0)) {
       break label$8
      }
     }
     $0_1 = 39593;
     label$11 : {
      $2_1 = (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) + -1 | 0;
      if (($2_1 & 255 | 0) >>> 0 > 4 >>> 0) {
       break label$11
      }
      $0_1 = HEAP32[(((($2_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 40708 | 0) >> 2] | 0;
     }
     $2_1 = 0;
     label$12 : {
      $5_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
      if ($5_1 >>> 0 > 12 >>> 0) {
       break label$12
      }
      $2_1 = HEAP32[(($5_1 << 2 | 0) + 39808 | 0) >> 2] | 0;
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     $5_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
     $3_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 34 | 0) >> 0] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $827(39900 | 0, $4_1 + 16 | 0 | 0);
     break label$3;
    }
    if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$4_1 >> 2] = HEAPU8[($1_1 + 30 | 0) >> 0] | 0;
    $827(39984 | 0, $4_1 | 0);
   }
   $6_1 = 0;
  }
  label$13 : {
   $8_1 = $4_1 + 80 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $443($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
     break label$4
    }
    if (!($428($0_1 | 0, 1702061171 | 0, 0 | 0) | 0)) {
     break label$4
    }
    if (!($429($0_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($578($0_1 | 0, $1_1 + 80 | 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
    if (($0_1 | 0) == (32 | 0)) {
     break label$3
    }
    label$5 : {
     if ((($0_1 + -96 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = 3;
     break label$3;
    }
    label$6 : {
     if (($0_1 | 0) != (106 | 0)) {
      break label$6
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$3;
    }
    if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$3_1 >> 2] = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
    $827(40046 | 0, $3_1 | 0);
   }
   HEAP32[$2_1 >> 2] = 24;
  }
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $436($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $445($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $4_1 = $754($0_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $5_1 = $4_1 + $2_1 | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   label$4 : {
    label$5 : {
     if (!($427($0_1 | 0, $3_1 + 40 | 0 | 0) | 0)) {
      break label$5
     }
     if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) == (1684106610 | 0)) {
      break label$4
     }
    }
    label$6 : while (1) {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$4
     }
     if (($754($0_1 | 0) | 0) >>> 0 >= $5_1 >>> 0) {
      break label$4
     }
     $769($0_1 | 0, $3_1 + 56 | 0 | 0);
     $766($0_1 | 0, 2 | 0) | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
     if (!($427($0_1 | 0, $3_1 + 40 | 0 | 0) | 0)) {
      continue label$6
     }
     if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) != (1684106610 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP8[($1_1 + 32 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP16[($1_1 + 34 | 0) >> 1] = $777($0_1 | 0) | 0;
   HEAP8[($1_1 + 36 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 37 | 0) >> 0] = $772($0_1 | 0) | 0;
   $5_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $5_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   $2_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
   $4_1 = HEAPU16[($1_1 + 34 | 0) >> 1] | 0;
   $6_1 = HEAPU8[($1_1 + 36 | 0) >> 0] | 0;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAPU8[($1_1 + 37 | 0) >> 0] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
   HEAP32[$3_1 >> 2] = $0_1 >>> 24 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   $827(40108 | 0, $3_1 | 0);
  }
  label$7 : {
   $8_1 = $3_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $2_1 = 0;
   if (!($428($0_1 | 0, 2002876005 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = 0;
   if (!($428($0_1 | 0, 1718775137 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = 0;
   if (!($428($0_1 | 0, $778($0_1 | 0) | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $260($1_1 + 28 | 0 | 0, $0_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
      break label$5
     }
     if ($453($0_1 | 0, $1_1 + 28 | 0 | 0) | 0) {
      break label$4
     }
     break label$3;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = 64;
    HEAP32[($1_1 + 32 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, 34);
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $827(40225 | 0, $2_1 | 0);
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $448($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 80 | 0) >> 2] = $2_1;
  return $436($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
  $2_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
      break label$5
     }
     if ($453($0_1 | 0, $1_1 + 32 | 0 | 0) | 0) {
      break label$4
     }
     break label$3;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    HEAP32[($1_1 + 36 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 3 | 0;
   }
   $2_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $827(40400 | 0, $3_1 | 0);
  }
  label$6 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
  return $438($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $451($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $28_1 = 0, $31_1 = 0, $63$hi = 0, $65$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $5_1 = 0;
    label$5 : {
     if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $28_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $28_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $31_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = 0;
     HEAP8[($1_1 + 120 | 0) >> 0] = 0;
     if (!($428($0_1 | 0, 1752589123 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $2_1 = $772($0_1 | 0) | 0;
     $5_1 = 0;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (($2_1 | 0) == (1 | 0)) {
       break label$6
      }
      $5_1 = 0;
      if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$4_1 >> 2] = $2_1;
      $827(40467 | 0, $4_1 | 0);
      break label$5;
     }
     label$7 : {
      if ($274($0_1 | 0, $1_1 + 80 | 0 | 0, 56088 | 0) | 0) {
       break label$7
      }
      $5_1 = 0;
      if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $5_1 = 0;
      $827(40517 | 0, 0 | 0);
      break label$5;
     }
     $5_1 = 0;
     label$8 : {
      if (!($428($4_1 + 16 | 0 | 0, 1685480259 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $0_1 = $754($4_1 + 16 | 0 | 0) | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $63$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $65$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $63$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $65$hi;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 <= $0_1 >>> 0 | 0) | 0) {
       break label$8
      }
      $5_1 = 0;
      if (!($679($4_1 + 16 | 0 | 0, $1_1 + 121 | 0 | 0) | 0)) {
       break label$5
      }
      $5_1 = 1;
      HEAP8[($1_1 + 120 | 0) >> 0] = 1;
      break label$5;
     }
     $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if (($0_1 | 0) == (1685481521 | 0)) {
      break label$5
     }
     if (($0_1 | 0) == (1685481573 | 0)) {
      break label$5
     }
     $5_1 = 1;
    }
    label$9 : {
     $7_1 = $4_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $5_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 553 | 0);
   abort();
  }
  $859(40462 | 0, 36875 | 0, 554 | 0);
  abort();
 }
 
 function $452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $9$hi = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0, $62$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $4_1 = 0;
    label$5 : {
     if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     $5_1 = $428($0_1 | 0, 1635135811 | 0, $2_1 | 0) | 0;
     if (!$5_1) {
      break label$5
     }
     $6_1 = $754($0_1 | 0) | 0;
     if (!($281($0_1 | 0, $1_1 + 80 | 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = $754($0_1 | 0) | 0;
     label$6 : {
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
      HEAP32[($3_1 + 20 | 0) >> 2] = $4_1 - $6_1 | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      $827(40568 | 0, $3_1 + 16 | 0 | 0);
     }
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       $9_1 = i64toi32_i32$1;
       $9$hi = i64toi32_i32$0;
       $4_1 = $4_1 - $6_1 | 0;
       i64toi32_i32$0 = 0;
       $62$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $62$hi;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $4_1 >>> 0 | 0) | 0) {
        break label$8
       }
       $454(928 | 0);
       break label$7;
      }
      i64toi32_i32$2 = $9$hi;
      HEAP32[($1_1 + 92 | 0) >> 2] = $9_1 - ($4_1 + $5_1 | 0) | 0;
      label$9 : {
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
       $827(40661 | 0, $3_1 | 0);
      }
      $4_1 = 1;
      if (($768($0_1 | 0, $1_1 + 96 | 0 | 0, HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $454(934 | 0);
     }
     $4_1 = 0;
    }
    label$10 : {
     $8_1 = $3_1 + 32 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $4_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 910 | 0);
   abort();
  }
  $859(40564 | 0, 36875 | 0, 911 | 0);
  abort();
 }
 
 function $453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($458($0_1 | 0, $2_1 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $3_1 = 1;
  }
  label$4 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  $862(36875 | 0, $0_1 | 0, 8 | 0) | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $2_1 = ($0_1 + ($1_1 << 2 | 0) | 0) + 12 | 0;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (20 | 0)) {
       break label$4
      }
      $278($3_1 + 256 | 0 | 0, 56088 | 0);
      $3_1 = HEAP32[$2_1 >> 2] | 0;
     }
     $815($3_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 >>> 0 < (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   return;
  }
  $859(38242 | 0, 36875 | 0, 1301 | 0);
  abort();
 }
 
 function $456($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($429($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($429($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $782($0_1 | 0) | 0;
   HEAP8[($1_1 + 8 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $5$hi = 0, $37_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[$1_1 >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
  label$3 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$3
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $37_1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   HEAP32[i64toi32_i32$1 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $827(40287 | 0, i64toi32_i32$1 | 0);
  }
  label$4 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(40753 | 0, 40760 | 0, 93 | 0);
   abort();
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 126;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[$0_1 >> 1] = $1_1;
 }
 
 function $460($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 0 | 0;
 }
 
 function $461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $5_1 = -1;
    break label$3;
   }
   $859(40840 | 0, 40760 | 0, 110 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      $6_1 = $5_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
      $4_1 = $778($2_1 | 0) | 0;
      if (($4_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$7
      }
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         label$12 : {
          $5_1 = $4_1 & 255 | 0;
          if ($462($5_1 | 0) | 0) {
           break label$12
          }
          label$13 : {
           switch (($4_1 & 255 | 0) + -186 | 0 | 0) {
           case 0:
            $766($2_1 | 0, 8 | 0) | 0;
            break label$10;
           case 1:
            break label$13;
           default:
            break label$6;
           };
          }
          $4_1 = $777($2_1 | 0) | 0;
          if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$11
          }
          if (($766($2_1 | 0, $4_1 | 0) | 0 | 0) == ($4_1 | 0)) {
           break label$10
          }
          break label$11;
         }
         $7_1 = $777($2_1 | 0) | 0;
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             if (($5_1 | 0) != (HEAPU16[$0_1 >> 1] | 0 | 0)) {
              break label$18
             }
             label$19 : while (1) {
              $4_1 = $764($2_1 | 0) | 0;
              if (($4_1 | 0) == (255 | 0)) {
               continue label$19
              }
              break label$19;
             };
             if (($4_1 | 0) == (-1 | 0)) {
              break label$11
             }
             label$20 : {
              if (($4_1 & 192 | 0 | 0) != (64 | 0)) {
               break label$20
              }
              $772($2_1 | 0) | 0;
              $4_1 = $772($2_1 | 0) | 0;
             }
             label$21 : {
              if (($4_1 & 224 | 0 | 0) == (32 | 0)) {
               break label$21
              }
              $5_1 = $6_1;
              break label$18;
             }
             $5_1 = $778($2_1 | 0) | 0;
             $5_1 = ($5_1 >>> 3 | 0) & 536854528 | 0 | (($4_1 << 28 | 0) & -536870912 | 0) | 0 | (($5_1 >>> 2 | 0) & 16383 | 0) | 0;
             label$22 : {
              if (!($4_1 & 16 | 0)) {
               break label$22
              }
              $766($2_1 | 0, 5 | 0) | 0;
             }
             HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
             $5_1 = $6_1;
             if (FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0]($0_1, 0, $1_1, $2_1, $7_1) | 0) {
              break label$17
             }
            }
            $769($2_1 | 0, $3_1 + 8 | 0 | 0);
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            $6_1 = $7_1 + 6 | 0;
            if (($4_1 | 0) < ($6_1 | 0)) {
             break label$16
            }
            $4_1 = $4_1 - $6_1 | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
            HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $6_1 | 0;
            break label$15;
           }
           $769($2_1 | 0, $3_1 + 8 | 0 | 0);
           $5_1 = -2;
           break label$5;
          }
          $766($2_1 | 0, $6_1 | 0) | 0;
          $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         }
         if (($4_1 | 0) < (0 | 0)) {
          break label$5
         }
         continue label$8;
        }
        $5_1 = $6_1;
        break label$5;
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
       $4_1 = $778($2_1 | 0) | 0;
       if (($4_1 & -256 | 0 | 0) == (256 | 0)) {
        continue label$9
       }
       break label$9;
      };
      break label$8;
     };
    }
    if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(40847 | 0, $3_1 | 0);
   }
   $769($2_1 | 0, $3_1 + 8 | 0 | 0);
   $5_1 = -3;
  }
  label$23 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 & -4 | 0 | 0) == (188 | 0) | ($0_1 & 192 | 0 | 0) == (192 | 0) | 0 | 0;
 }
 
 function $463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9_1 = 0, i64toi32_i32$4 = 0, $11_1 = 0, $10_1 = 0, $3_1 = 0, $69_1 = 0, $72_1 = 0, $133_1 = 0, $135$hi = 0, $137$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 517 | 0);
  }
  $3_1 = $0_1 + 24 | 0;
  $4_1 = 0;
  $5_1 = 0;
  label$5 : {
   label$6 : while (1) {
    $6_1 = $798($1_1 | 0) | 0;
    label$7 : {
     if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(40933 | 0, $2_1 | 0);
    }
    label$8 : {
     if (!$6_1) {
      break label$8
     }
     $744(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $6_1 | 0);
     $735($6_1 | 0);
     $4_1 = ($756($6_1 | 0) | 0) + $4_1 | 0;
    }
    label$9 : while (1) {
     $7_1 = $740(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     $763($2_1 + 32 | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
           case 0:
            $8_1 = 0;
            $9_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            if ($7_1 >>> 0 < $9_1 >>> 0) {
             break label$10
            }
            i64toi32_i32$2 = ($2_1 + 32 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $69_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $69_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
            $72_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $2_1;
            HEAP32[($2_1 + 16 | 0) >> 2] = $72_1;
            HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
            $766($2_1 + 32 | 0 | 0, $9_1 | 0) | 0;
            label$18 : {
             $8_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 32 | 0 | 0, 14996 | 0, $3_1 | 0) | 0;
             if (!$8_1) {
              break label$18
             }
             label$19 : {
              $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$19
              }
              $5_1 = FUNCTION_TABLE[HEAP32[($7_1 + 8 | 0) >> 2] | 0]($7_1, HEAPU16[($0_1 + 20 | 0) >> 1] | 0, $8_1) | 0;
              break label$18;
             }
             $735($8_1 | 0);
             $5_1 = 0;
            }
            HEAP32[($0_1 + 36 | 0) >> 2] = 0;
            HEAP32[($0_1 + 16 | 0) >> 2] = 0;
            break label$14;
           case 1:
            $8_1 = $464($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
            break label$10;
           case 2:
            break label$11;
           case 4:
            break label$13;
           case 3:
            break label$15;
           default:
            break label$12;
           };
          }
          $8_1 = $766($2_1 + 32 | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
          $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
          if ($7_1 >>> 0 < $8_1 >>> 0) {
           break label$5
          }
          $7_1 = $7_1 - $8_1 | 0;
          HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
          $8_1 = 0;
          if ($7_1) {
           break label$10
          }
         }
         $465($0_1 | 0);
         $8_1 = 1;
         break label$10;
        }
        $8_1 = $466($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
        break label$10;
       }
       $859(40996 | 0, 40760 | 0, 576 | 0);
       abort();
      }
      $8_1 = $467($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
     }
     $7_1 = $754($2_1 + 32 | 0 | 0) | 0;
     $133_1 = $0_1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $135$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $137$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $135$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $137$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $7_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $7_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $133_1;
     HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$5;
     $745(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0);
     label$20 : {
      $7_1 = ($5_1 | 0) == (1 | 0);
      if ($7_1) {
       break label$20
      }
      if ($8_1) {
       continue label$9
      }
     }
     break label$9;
    };
    label$21 : {
     if ($7_1) {
      break label$21
     }
     if ($6_1) {
      continue label$6
     }
    }
    break label$6;
   };
   label$22 : {
    $11_1 = $2_1 + 48 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $4_1 | 0;
  }
  $859(40967 | 0, 40760 | 0, 566 | 0);
  abort();
 }
 
 function $464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $778($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$6
      }
      $4_1 = $3_1 & 255 | 0;
      if (!($462($4_1 | 0) | 0)) {
       break label$5
      }
      $5_1 = 1;
      if (!($469($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0)) {
       break label$4
      }
      break label$3;
     }
     $769($1_1 | 0, $2_1 + 8 | 0 | 0);
     $470($0_1 | 0);
     $5_1 = 1;
     break label$3;
    }
    $5_1 = 1;
    if ($468($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $5_1 = 0;
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 1;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : while (1) {
   $3_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = $764($1_1 | 0) | 0;
   if (($5_1 | 0) > (0 | 0)) {
    continue label$3
   }
   break label$3;
  };
  HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
  label$4 : {
   label$5 : {
    if ($5_1) {
     break label$5
    }
    $5_1 = $764($1_1 | 0) | 0;
    if ($5_1) {
     break label$5
    }
    $3_1 = 1;
    $5_1 = $764($1_1 | 0) | 0;
    if (($5_1 | 0) != (1 | 0)) {
     break label$5
    }
    $769($1_1 | 0, $2_1 + 8 | 0 | 0);
    $465($0_1 | 0);
    break label$4;
   }
   $3_1 = 1;
   if (($5_1 | 0) != (-1 | 0)) {
    break label$4
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $3_1 = 0;
  }
  label$6 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $778($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = 1;
    if ($468($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $4_1 = 0;
  }
  label$5 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $468($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($2_1 + -441 | 0 | 0) {
      case 1:
       $766($1_1 | 0, 8 | 0) | 0;
       $3_1 = $778($1_1 | 0) | 0;
       $2_1 = 0;
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$1
       }
       label$6 : {
        if (($3_1 | 0) != (443 | 0)) {
         break label$6
        }
        return $477($0_1 | 0, $1_1 | 0) | 0 | 0;
       }
       if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
        break label$3
       }
       $2_1 = $3_1 & 255 | 0;
       if (!($462($2_1 | 0) | 0)) {
        break label$3
       }
       return $469($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
      case 0:
       break label$4;
      default:
       break label$3;
      };
     }
     $465($0_1 | 0);
     break label$2;
    }
    $470($0_1 | 0);
   }
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $35_1 = 0, $38_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = $777($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = $479($0_1 | 0, $2_1 | 0) | 0;
   label$4 : {
    label$5 : {
     if ($2_1 >>> 0 < 189 >>> 0) {
      break label$5
     }
     if (!$6_1) {
      break label$5
     }
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $35_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $35_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $38_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[$3_1 >> 2] = $38_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     label$6 : while (1) {
      $7_1 = $764($1_1 | 0) | 0;
      if (($7_1 | 0) == (255 | 0)) {
       continue label$6
      }
      break label$6;
     };
     if (($7_1 | 0) == (-1 | 0)) {
      break label$3
     }
     label$7 : {
      if (($7_1 & 192 | 0 | 0) != (64 | 0)) {
       break label$7
      }
      $772($1_1 | 0) | 0;
      $7_1 = $772($1_1 | 0) | 0;
     }
     $8_1 = 0;
     $9_1 = 0;
     label$8 : {
      if (($7_1 & 224 | 0 | 0) != (32 | 0)) {
       break label$8
      }
      $8_1 = $778($1_1 | 0) | 0;
      $9_1 = ($8_1 >>> 3 | 0) & 536854528 | 0 | (($7_1 << 28 | 0) & -536870912 | 0) | 0 | (($8_1 >>> 2 | 0) & 16383 | 0) | 0;
      $8_1 = 1;
      if (!($7_1 & 16 | 0)) {
       break label$8
      }
      $766($1_1 | 0, 5 | 0) | 0;
     }
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$3
     }
     label$9 : {
      $1_1 = $767($3_1 | 0, $1_1 | 0) | 0;
      if ($1_1 >>> 0 > $4_1 >>> 0) {
       break label$9
      }
      $480($0_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 - $1_1 | 0 | 0, $8_1 | 0, $9_1 | 0);
      break label$4;
     }
     $470($0_1 | 0);
     break label$4;
    }
    $478($0_1 | 0, $4_1 | 0);
   }
   $5_1 = 1;
  }
  label$10 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(41071 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(40998 | 0, 40760 | 0, 593 | 0);
   abort();
  }
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 601 | 0);
  }
  $739(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 56 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 611 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$4;
    }
    label$6 : while (1) {
     $3_1 = $2_1;
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$7 : {
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$7
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   return;
  }
  $859(41002 | 0, 40760 | 0, 612 | 0);
  abort();
 }
 
 function $474($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 623 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(41002 | 0, 40760 | 0, 624 | 0);
   abort();
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
  HEAP16[($1_1 + 4 | 0) >> 1] = $2_1;
  HEAP16[($1_1 + 6 | 0) >> 1] = $3_1;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 635 | 0);
  }
  $738(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 2;
 }
 
 function $476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(56 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62120 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 56;
      $827(41018 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 56 | 0, $3_1 | 0, 40736 | 0);
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = $1_1;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      $475($3_1 | 0);
      break label$5;
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(40998 | 0, 40760 | 0, 649 | 0);
   abort();
  }
  $859(41010 | 0, 40760 | 0, 650 | 0);
  abort();
 }
 
 function $477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $777($1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $478($0_1 | 0, $2_1 | 0);
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 3;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
 }
 
 function $479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (((HEAPU16[($0_1 + 6 | 0) >> 1] | 0) & $1_1 | 0 | 0) != (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
  HEAP16[($0_1 + 20 | 0) >> 1] = $2_1;
  HEAP16[($0_1 + 32 | 0) >> 1] = 0;
  HEAP8[($0_1 + 31 | 0) >> 0] = $4_1;
  HEAP8[($0_1 + 30 | 0) >> 0] = 0;
  HEAP16[($0_1 + 28 | 0) >> 1] = 127;
  HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (($778($0_1 | 0) | 0 | 0) != (442 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if ((($778($0_1 | 0) | 0) & -251657984 | 0 | 0) != (553648384 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if ((($778($0_1 | 0) | 0) & 25165825 | 0 | 0) != (25165825 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if (($778($0_1 | 0) | 0 | 0) != (443 | 0)) {
    break label$3
   }
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$4 : {
   if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $754($0_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = $2_1 ? 41389 : 41396;
   $827(41352 | 0, $1_1 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = $813(240 | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $2_1 = 0;
     if (!($835(62136 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[$1_1 >> 2] = 240;
     $827(41411 | 0, $1_1 | 0);
     break label$4;
    }
    $845($2_1 | 0, 240 | 0, $2_1 + 12 | 0 | 0, 41104 | 0);
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 192 | 0) >> 2] = 0;
    $471($1_1 + 8 | 0 | 0);
    $0_1 = $476($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
    HEAP32[($2_1 + 196 | 0) >> 2] = $0_1;
    label$6 : {
     if (!$0_1) {
      break label$6
     }
     $474($0_1 | 0, $2_1 | 0, 0 | 0, 0 | 0, 127 | 0);
     break label$4;
    }
    $815($2_1 | 0);
    $2_1 = 0;
   }
   label$7 : {
    $4_1 = $1_1 + 16 | 0;
    if ($4_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $4_1;
   }
   return $2_1 | 0;
  }
  $859(41403 | 0, 41204 | 0, 175 | 0);
  abort();
 }
 
 function $483($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $44_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 119 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $3_1 = 1;
    label$5 : {
     label$6 : {
      if (($1_1 & 224 | 0 | 0) == (192 | 0)) {
       break label$6
      }
      $3_1 = 0;
      if (($1_1 & 240 | 0 | 0) == (224 | 0)) {
       break label$6
      }
      $735($2_1 | 0);
      break label$5;
     }
     $4_1 = $759($2_1 | 0) | 0;
     if (!$4_1) {
      break label$3
     }
     label$7 : {
      if (!(HEAPU8[($4_1 + 7 | 0) >> 0] | 0)) {
       break label$7
      }
      label$8 : {
       if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
        break label$8
       }
       if ((HEAPU8[($0_1 + 209 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 216 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
       i64toi32_i32$2 = $0_1 + 200 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $44_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $0_1;
       HEAP32[($0_1 + 232 | 0) >> 2] = $44_1;
       HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$1;
       break label$7;
      }
      HEAP8[($0_1 + 209 | 0) >> 0] = $1_1;
      HEAP8[($0_1 + 208 | 0) >> 0] = 1;
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[($0_1 + 212 | 0) >> 2] = $4_1;
      i64toi32_i32$2 = $0_1 + 200 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $5_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 224 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 232 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 216 | 0) >> 2] = $4_1;
     }
     label$9 : {
      $2_1 = $229($0_1 + 20 | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
      if ($2_1) {
       break label$9
      }
      if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
       break label$5
      }
      if ((HEAPU8[($0_1 + 209 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
       break label$5
      }
     }
     label$10 : {
      $3_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
      if ($3_1) {
       break label$10
      }
      label$11 : {
       $3_1 = $813(40 | 0) | 0;
       if ($3_1) {
        break label$11
       }
       $815($2_1 | 0);
       break label$5;
      }
      $214($3_1 | 0, 10 | 0);
      HEAP32[($0_1 + 192 | 0) >> 2] = $3_1;
     }
     if (!$2_1) {
      break label$5
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
     $215($3_1 | 0, $2_1 | 0);
    }
    return 0 | 0;
   }
   $859(41457 | 0, 41204 | 0, 120 | 0);
   abort();
  }
  $859(41464 | 0, 41204 | 0, 130 | 0);
  abort();
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 202 | 0);
  }
  $473(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0, $0_1 | 0);
  $472(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $485($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $11$hi = 0, $9_1 = 0, $8_1 = 0, $42_1 = 0, $48_1 = 0, $50$hi = 0, $72_1 = 0, $80_1 = 0, $83$hi = 0, $143_1 = 0, $143$hi = 0, $146_1 = 0, $146$hi = 0, $148$hi = 0, $152$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 218 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 192 | 0) >> 2] | 0) {
    break label$5
   }
   $5_1 = $0_1 + 20 | 0;
   $225($5_1 | 0);
   HEAP8[($0_1 + 208 | 0) >> 0] = 0;
   i64toi32_i32$0 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$0;
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$1;
     HEAP32[($4_1 + 40 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
     $42_1 = $4_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($42_1 + 36 | 0) >> 2] = i64toi32_i32$4;
     $827(41488 | 0, $4_1 + 32 | 0 | 0);
    }
    label$8 : {
     $48_1 = $1_1;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $50$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $50$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $6_1 = $50($48_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 44 | 0 | 0) | 0;
     if (!$6_1) {
      break label$8
     }
     $7_1 = $756($6_1 | 0) | 0;
     label$9 : {
      if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 28 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
      $72_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      HEAP32[($72_1 + 20 | 0) >> 2] = i64toi32_i32$5;
      $827(41526 | 0, $4_1 + 16 | 0 | 0);
     }
     $797($2_1 | 0, $6_1 | 0);
     $80_1 = $0_1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = $83$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $80_1;
     HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$5;
     if (($463(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
      break label$8
     }
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 131073;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      continue label$6
     }
     if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
      continue label$6
     }
    }
    break label$6;
   };
   label$10 : {
    if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    i64toi32_i32$0 = $10$hi;
    $7_1 = $10_1;
    label$11 : {
     label$12 : {
      $2_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
      if ($2_1) {
       break label$12
      }
      $2_1 = 0;
      break label$11;
     }
     $2_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(41567 | 0, $4_1 | 0);
   }
   $6_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
   HEAP32[($0_1 + 192 | 0) >> 2] = 0;
   label$13 : {
    if (!$6_1) {
     break label$13
    }
    $233($5_1 | 0, $6_1 | 0, 0 | 0);
    if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
     break label$13
    }
    $7_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
    if ($7_1 >>> 0 <= $2_1 >>> 0) {
     break label$13
    }
    i64toi32_i32$3 = $0_1 + 232 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $143_1 = i64toi32_i32$0;
    $143$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $0_1 + 224 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $146_1 = i64toi32_i32$5;
    $146$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $143$hi;
    i64toi32_i32$3 = $143_1;
    i64toi32_i32$5 = $146$hi;
    i64toi32_i32$1 = $146_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$4 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $152$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $148$hi;
    $31_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$3 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$4 | 0, $7_1 - $2_1 | 0 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    HEAP32[($6_1 + 16 | 0) >> 2] = i64toi32_i32$3;
   }
   $475(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0);
   $227($5_1 | 0);
   label$14 : {
    $9_1 = $4_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(41468 | 0, 41204 | 0, 219 | 0);
  abort();
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(56 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $487();
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 56 | 0, $3_1 + 4 | 0 | 0, 41184 | 0);
   label$5 : {
    if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(41283 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 41340;
   $459($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 36 | 0) >> 2] = 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 28 | 0) >> 2] = 128;
   i64toi32_i32$1 = $3_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 52 | 0) >> 2] = 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = $3_1;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $487() {
  $862(41204 | 0, 411 | 0, 3 | 0) | 0;
 }
 
 function $488($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $45_1 = 0, $46$hi = 0, $48$hi = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAPU16[$0_1 >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(41729 | 0, $5_1 | 0);
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($1_1) {
    break label$4
   }
   $859(41783 | 0, 41204 | 0, 396 | 0);
   abort();
  }
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = $754($3_1 | 0) | 0;
  $45_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $46$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $48$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $46$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $48$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $45_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$5 : {
   $9_1 = $5_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return 1 | 0;
 }
 
 function $489($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (41184 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 41184 | 0, 41204 | 0, 366 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(41649 | 0, 41204 | 0, 368 | 0);
   abort();
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $490($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $9$hi = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $42_1 = 0, $44$hi = 0, $47$hi = 0, $53_1 = 0, $55$hi = 0, $58$hi = 0, $65_1 = 0, $68_1 = 0, $121_1 = 0, $124$hi = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (41184 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 41184 | 0, 41204 | 0, 316 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if (!$1_1) {
       break label$8
      }
      if (!$2_1) {
       break label$7
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      $4_1 = $770($1_1 | 0) | 0;
      HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = $2_1;
      $5_1 = i64toi32_i32$2 + 16 | 0;
      label$9 : while (1) {
       label$10 : {
        $2_1 = $461($5_1 | 0, 0 | 0, $1_1 | 0) | 0;
        if (($2_1 | 0) < (0 | 0)) {
         break label$10
        }
        $42_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $44$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $47$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $44$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $47$hi;
        i64toi32_i32$3 = $754($1_1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $42_1;
        HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$5;
        continue label$9;
       }
       $6_1 = 0;
       label$11 : {
        switch ($2_1 + 3 | 0 | 0) {
        case 1:
         if (HEAP32[($0_1 + 36 | 0) >> 2] | 0) {
          break label$6
         }
         $53_1 = $0_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
         $55$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $58$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $55$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $58$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$0 = $53_1;
         HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$4;
         $6_1 = 1;
         break label$5;
        case 0:
         break label$11;
        case 2:
         break label$5;
        default:
         continue label$9;
        };
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 0;
       label$13 : while (1) {
        i64toi32_i32$2 = $1_1 + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $65_1 = i64toi32_i32$4;
        i64toi32_i32$4 = $3_1 + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $65_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $68_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[i64toi32_i32$0 >> 2] = $68_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
        label$14 : {
         label$15 : {
          $2_1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) < (4 | 0)) {
           break label$15
          }
          HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + -4 | 0;
          $2_1 = HEAP32[$3_1 >> 2] | 0;
          HEAP32[$3_1 >> 2] = $2_1 + 4 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $2_1 = $2_1 << 24 | 0 | (($2_1 << 8 | 0) & 16711680 | 0) | 0 | (($2_1 >>> 8 | 0) & 65280 | 0 | ($2_1 >>> 24 | 0) | 0) | 0;
          break label$14;
         }
         $2_1 = $774($3_1 | 0, 4 | 0) | 0;
        }
        label$16 : {
         if (($2_1 & -256 | 0 | 0) != (256 | 0)) {
          break label$16
         }
         if ($462($2_1 & 255 | 0 | 0) | 0) {
          continue label$9
         }
        }
        if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$5
        }
        label$17 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) < (1 | 0)) {
          break label$17
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
         HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
         continue label$13;
        }
        if (($764($1_1 | 0) | 0 | 0) != (-1 | 0)) {
         continue label$13
        }
        break label$13;
       };
       break label$9;
      };
      $859(41707 | 0, 41204 | 0, 351 | 0);
      abort();
     }
     $859(41659 | 0, 41204 | 0, 317 | 0);
     abort();
    }
    $859(41666 | 0, 41204 | 0, 318 | 0);
    abort();
   }
   $859(41676 | 0, 41204 | 0, 328 | 0);
   abort();
  }
  $121_1 = $0_1;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = 0;
  $124$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = $124$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = $121_1;
  HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$1;
  label$18 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $492($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(41804 | 0, 41811 | 0, 76 | 0);
   abort();
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 136;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[$0_1 >> 1] = $1_1;
 }
 
 function $493($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 2 | 0;
 }
 
 function $494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
   $5_1 = -1;
   label$4 : {
    label$5 : {
     label$6 : {
      $6_1 = $778($2_1 | 0) | 0;
      if (($6_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$6
      }
      $7_1 = -1;
      label$7 : while (1) {
       $8_1 = $777($2_1 | 0) | 0;
       label$8 : {
        label$9 : {
         $5_1 = $6_1 & 255 | 0;
         switch (($495($5_1 | 0) | 0) + -1 | 0 | 0) {
         case 1:
          break label$5;
         case 0:
          break label$8;
         default:
          break label$9;
         };
        }
        if (($5_1 | 0) != (HEAPU16[$0_1 >> 1] | 0 | 0)) {
         break label$8
        }
        $5_1 = $782($2_1 | 0) | 0;
        $4_1 = $5_1 & 262144 | 0 | $4_1 | 0;
        label$10 : {
         if ($5_1 & 32768 | 0) {
          break label$10
         }
         $5_1 = $7_1;
         break label$8;
        }
        $5_1 = $772($2_1 | 0) | 0;
        $6_1 = $778($2_1 | 0) | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = ($6_1 >>> 3 | 0) & 536854528 | 0 | (($6_1 >>> 2 | 0) & 16383 | 0) | 0 | (($5_1 << 28 | 0) & -536870912 | 0) | 0;
        $5_1 = $7_1;
        $4_1 = $4_1 | 65536 | 0;
        if ((FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0]($0_1, $4_1, $1_1, $2_1, $8_1) | 0 | 0) == (2 | 0)) {
         break label$8
        }
        $769($2_1 | 0, $3_1 + 8 | 0 | 0);
        $5_1 = -2;
        break label$4;
       }
       $769($2_1 | 0, $3_1 + 8 | 0 | 0);
       label$11 : {
        label$12 : {
         $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $8_1 = $8_1 + 6 | 0;
         if (($6_1 | 0) < ($8_1 | 0)) {
          break label$12
         }
         $6_1 = $6_1 - $8_1 | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
         HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $8_1 | 0;
         break label$11;
        }
        $766($2_1 | 0, $8_1 | 0) | 0;
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       if (($6_1 | 0) < (0 | 0)) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
       $7_1 = $5_1;
       $6_1 = $778($2_1 | 0) | 0;
       if (($6_1 & -256 | 0 | 0) == (256 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$4
     }
     if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(41901 | 0, $3_1 | 0);
    }
    $769($2_1 | 0, $3_1 + 8 | 0 | 0);
    $5_1 = -3;
   }
   label$13 : {
    $10_1 = $3_1 + 16 | 0;
    if ($10_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $10_1;
   }
   return $5_1 | 0;
  }
  $859(41894 | 0, 41811 | 0, 93 | 0);
  abort();
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($0_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     $1_1 = $0_1 + -240 | 0;
     if ($1_1 >>> 0 > 15 >>> 0) {
      break label$2
     }
     if (!((1 << $1_1 | 0) & 33031 | 0)) {
      break label$2
     }
     break label$1;
    }
    $859(41990 | 0, 41811 | 0, 221 | 0);
    abort();
   }
   label$4 : {
    $1_1 = $0_1 + -188 | 0;
    if ($1_1 >>> 0 > 3 >>> 0) {
     break label$4
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   return ($0_1 >>> 0 < 189 >>> 0) << 1 | 0 | 0;
  }
  return 1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP8[($0_1 + 13 | 0) >> 0] = 0;
  HEAP8[($0_1 + 32 | 0) >> 0] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $497($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = $736($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return -1 | 0;
  }
  HEAP32[($1_1 + 40 | 0) >> 2] = 137;
  HEAP32[($1_1 + 36 | 0) >> 2] = 0;
  HEAP8[($1_1 + 12 | 0) >> 0] = $2_1;
  $496($1_1 | 0);
  return 0 | 0;
 }
 
 function $498($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $766($2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $499($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $52_1 = 0, $55_1 = 0, $148_1 = 0, $151_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
       if (!$2_1) {
        break label$5
       }
       $6_1 = 0;
       if (HEAPU8[($0_1 + 13 | 0) >> 0] | 0) {
        break label$3
       }
       label$8 : {
        if ((HEAP32[$0_1 >> 2] | 0 | 0) != (2 | 0)) {
         break label$8
        }
        label$9 : {
         $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
         if (!$6_1) {
          break label$9
         }
         $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
         if ($7_1 >>> 0 < $6_1 >>> 0) {
          break label$8
         }
         HEAP32[$0_1 >> 2] = 1;
         if ($7_1 >>> 0 <= $6_1 >>> 0) {
          break label$8
         }
         HEAP32[$0_1 >> 2] = 0;
         $1_1 = $1_1 | 131072 | 0;
         break label$8;
        }
        if ($4_1 >>> 0 < 4 >>> 0) {
         break label$8
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $52_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $52_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $55_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 16 | 0) >> 2] = $55_1;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        label$10 : {
         label$11 : {
          $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (($6_1 | 0) < (4 | 0)) {
           break label$11
          }
          HEAP32[($5_1 + 20 | 0) >> 2] = $6_1 + -4 | 0;
          $6_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          HEAP32[($5_1 + 16 | 0) >> 2] = $6_1 + 4 | 0;
          $6_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $6_1 = $6_1 << 24 | 0 | (($6_1 << 8 | 0) & 16711680 | 0) | 0 | (($6_1 >>> 8 | 0) & 65280 | 0 | ($6_1 >>> 24 | 0) | 0) | 0;
          break label$10;
         }
         $6_1 = $774($5_1 + 16 | 0 | 0, 4 | 0) | 0;
        }
        if (($6_1 | 0) != (HEAPU8[($0_1 + 32 | 0) >> 0] | 0 | 256 | 0 | 0)) {
         break label$8
        }
        label$12 : {
         if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
         HEAP32[($5_1 + 4 | 0) >> 2] = $6_1;
         HEAP32[$5_1 >> 2] = $0_1;
         $827(42028 | 0, $5_1 | 0);
        }
        HEAP32[$0_1 >> 2] = 1;
       }
       label$13 : {
        if (!($1_1 & 4194304 | 0)) {
         break label$13
        }
        HEAP32[$0_1 >> 2] = 1;
        HEAP32[($0_1 + 28 | 0) >> 2] = 0;
        break label$4;
       }
       $6_1 = 1;
       label$14 : {
        switch (HEAP32[$0_1 >> 2] | 0 | 0) {
        case 2:
         HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0;
         label$16 : {
          if (!$4_1) {
           break label$16
          }
          FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0](HEAP32[($0_1 + 36 | 0) >> 2] | 0, $2_1, $3_1, $4_1, $0_1 + 16 | 0);
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = 0;
         $0_1 = $0_1 + 28 | 0;
         HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $4_1 | 0;
         break label$3;
        case 0:
         break label$14;
        case 1:
         break label$4;
        default:
         break label$3;
        };
       }
       $766($3_1 | 0, $4_1 | 0) | 0;
       break label$3;
      }
      $859(42006 | 0, 41811 | 0, 336 | 0);
      abort();
     }
     $859(42010 | 0, 41811 | 0, 337 | 0);
     abort();
    }
    $859(42024 | 0, 41811 | 0, 338 | 0);
    abort();
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $148_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $148_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $151_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $151_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $766($3_1 | 0, $4_1 | 0) | 0;
   $755($1_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0, $3_1 | 0) | 0;
   $763($5_1 + 16 | 0 | 0, $1_1 | 0);
   $6_1 = 1;
   label$17 : {
    switch ($500($0_1 | 0, $5_1 + 16 | 0 | 0) | 0 | 0) {
    case 0:
     $745($1_1 | 0, $5_1 + 16 | 0 | 0);
     label$19 : {
      $3_1 = $740($1_1 | 0) | 0;
      if (!$3_1) {
       break label$19
      }
      $763($5_1 + 16 | 0 | 0, $1_1 | 0);
      FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0](HEAP32[($0_1 + 36 | 0) >> 2] | 0, $1_1, $5_1 + 16 | 0, $3_1, $0_1 + 16 | 0);
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
     }
     $738($1_1 | 0);
     HEAP32[$0_1 >> 2] = 2;
     $0_1 = $0_1 + 28 | 0;
     HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $3_1 | 0;
     break label$3;
    case 1:
    case 2:
    case 3:
     break label$17;
    default:
     break label$3;
    };
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 131072;
   HEAP32[$0_1 >> 2] = 0;
   $738($1_1 | 0);
  }
  label$20 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $3_1 = 4;
  label$3 : {
   if (($771($1_1 | 0, 9 | 0) | 0 | 0) != (9 | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$4 : {
    $5_1 = $778($1_1 | 0) | 0;
    if (($5_1 & -256 | 0 | 0) == (256 | 0)) {
     break label$4
    }
    $3_1 = 1;
    if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(42322 | 0, $2_1 + 16 | 0 | 0);
    break label$3;
   }
   HEAP8[($0_1 + 32 | 0) >> 0] = $5_1;
   label$5 : {
    $3_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$5
    }
    if (($3_1 | 0) == ($5_1 & 255 | 0 | 0)) {
     break label$5
    }
    $3_1 = 2;
    if (!($834(62152 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $1_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(42403 | 0, $2_1 | 0);
    break label$3;
   }
   HEAP16[($0_1 + 10 | 0) >> 1] = $777($1_1 | 0) | 0;
   $3_1 = 1;
   label$6 : {
    switch (($495($5_1 & 255 | 0 | 0) | 0) + -1 | 0 | 0) {
    case 0:
     HEAP16[($0_1 + 8 | 0) >> 1] = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
     $766($1_1 | 0, 6 | 0) | 0;
     $3_1 = 0;
     break label$3;
    case 1:
     break label$3;
    default:
     break label$6;
    };
   }
   $4_1 = $4_1 & -327681 | 0;
   $5_1 = 0;
   label$8 : {
    $6_1 = $782($1_1 | 0) | 0;
    if (!($6_1 & 32768 | 0)) {
     break label$8
    }
    $3_1 = $772($1_1 | 0) | 0;
    $5_1 = $778($1_1 | 0) | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = ($5_1 >>> 3 | 0) & 536854528 | 0 | (($5_1 >>> 2 | 0) & 16383 | 0) | 0 | (($3_1 << 28 | 0) & -536870912 | 0) | 0;
    $4_1 = $4_1 | 65536 | 0;
    $5_1 = 5;
   }
   label$9 : {
    if (!($6_1 & 16384 | 0)) {
     break label$9
    }
    $3_1 = $772($1_1 | 0) | 0;
    $7_1 = $778($1_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = ($7_1 >>> 3 | 0) & 536854528 | 0 | (($7_1 >>> 2 | 0) & 16383 | 0) | 0 | (($3_1 << 28 | 0) & -536870912 | 0) | 0;
    $5_1 = $5_1 + 5 | 0;
    $4_1 = $4_1 | 262144 | 0;
   }
   $3_1 = 3;
   $6_1 = $6_1 & 255 | 0;
   if ($6_1 >>> 0 < $5_1 >>> 0) {
    break label$3
   }
   $766($1_1 | 0, $6_1 - $5_1 | 0 | 0) | 0;
   $3_1 = 4;
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   label$10 : {
    $1_1 = $6_1 + 3 | 0;
    $3_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
    if ($1_1 >>> 0 >= $3_1 >>> 0) {
     break label$10
    }
    HEAP16[($0_1 + 8 | 0) >> 1] = $3_1 - $1_1 | 0;
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  }
  label$11 : {
   $9_1 = $2_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $3_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(42006 | 0, 41811 | 0, 442 | 0);
   abort();
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 137;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     $2_1 = $813(80 | 0) | 0;
     if (!$2_1) {
      break label$3
     }
     $845($2_1 | 0, 80 | 0, $2_1 | 0, 42096 | 0);
     $3_1 = $736($0_1 | 0) | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      label$5 : {
       if ($497($0_1 | 0, $2_1 + 20 | 0 | 0, 0 | 0) | 0) {
        break label$5
       }
       HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $504($2_1 | 0);
       return $2_1 | 0;
      }
      $739(HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0);
     }
     $815($2_1 | 0);
    }
    return 0 | 0;
   }
   $859(42115 | 0, 41811 | 0, 472 | 0);
   abort();
  }
  $859(42123 | 0, 41811 | 0, 473 | 0);
  abort();
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 504 | 0);
  }
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $496($0_1 + 20 | 0 | 0);
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 528 | 0);
  }
  $739(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $501($0_1 + 20 | 0 | 0);
  $845($0_1 | 0, 80 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $17_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 559 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(42130 | 0, 41811 | 0, 560 | 0);
   abort();
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 72 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $65_1 = 0, $68_1 = 0, $139_1 = 0, $141$hi = 0, $143$hi = 0, $228_1 = 0, $230$hi = 0, $232$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 572 | 0);
  }
  $3_1 = $0_1 + 20 | 0;
  $4_1 = $798($1_1 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $6_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       label$10 : {
        label$11 : {
         if ($4_1) {
          break label$11
         }
         $7_1 = 0;
         break label$10;
        }
        $7_1 = $756($4_1 | 0) | 0;
       }
       HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
       $827(42137 | 0, $2_1 + 16 | 0 | 0);
      }
      label$12 : {
       if (!$4_1) {
        break label$12
       }
       $744($5_1 | 0, $4_1 | 0);
       $7_1 = $756($4_1 | 0) | 0;
       $735($4_1 | 0);
       $6_1 = $7_1 + $6_1 | 0;
      }
      label$13 : {
       label$14 : while (1) {
        $763($2_1 + 48 | 0 | 0, $5_1 | 0);
        i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $65_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $65_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
        $68_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $68_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
              case 0:
               $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               label$23 : {
                label$24 : {
                 $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if (!$7_1) {
                  break label$24
                 }
                 if ($7_1 >>> 0 <= $4_1 >>> 0) {
                  break label$13
                 }
                 $4_1 = $766($2_1 + 48 | 0 | 0, $7_1 - $4_1 | 0 | 0) | 0;
                 if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
                  break label$23
                 }
                 $859(42206 | 0, 41811 | 0, 597 | 0);
                 abort();
                }
                label$25 : {
                 if ($4_1) {
                  break label$25
                 }
                 $766($2_1 + 48 | 0 | 0, 6 | 0) | 0;
                }
                label$26 : {
                 label$27 : {
                  label$28 : while (1) {
                   $4_1 = $508($2_1 + 48 | 0 | 0) | 0;
                   $8_1 = $754($2_1 + 48 | 0 | 0) | 0;
                   $7_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
                   if ($4_1 >>> 0 > 184 >>> 0) {
                    break label$27
                   }
                   if (($7_1 | 0) > (-1 | 0)) {
                    continue label$28
                   }
                   break label$28;
                  };
                  if ($8_1 >>> 0 > 4 >>> 0) {
                   break label$26
                  }
                  break label$18;
                 }
                 if (($7_1 | 0) <= (-1 | 0)) {
                  break label$7
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = 1;
                 if ($8_1 >>> 0 <= 3 >>> 0) {
                  break label$6
                 }
                }
                $4_1 = $8_1 + -4 | 0;
               }
               if (!$4_1) {
                break label$18
               }
               $7_1 = $499($3_1 | 0, !(HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 22 | 0 | 0, $5_1 | 0, $2_1 + 32 | 0 | 0, $4_1 | 0) | 0;
               $8_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               label$29 : {
                if (($8_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
                 break label$29
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = 1;
               }
               $139_1 = $0_1;
               i64toi32_i32$2 = $0_1;
               i64toi32_i32$0 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
               $141$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               $143$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $141$hi;
               i64toi32_i32$2 = i64toi32_i32$0;
               i64toi32_i32$0 = $143$hi;
               i64toi32_i32$4 = i64toi32_i32$2 + $4_1 | 0;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
               }
               i64toi32_i32$2 = $139_1;
               HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] = i64toi32_i32$4;
               HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] = i64toi32_i32$5;
               $745($5_1 | 0, $2_1 + 32 | 0 | 0);
               if ($7_1) {
                continue label$14
               }
               break label$17;
              case 1:
               $4_1 = $778($2_1 + 48 | 0 | 0) | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = 0;
               HEAP32[($0_1 + 8 | 0) >> 2] = $777($2_1 + 48 | 0 | 0) | 0;
               if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                break label$18
               }
               label$30 : {
                label$31 : {
                 label$32 : {
                  if (($4_1 & -256 | 0 | 0) != (256 | 0)) {
                   break label$32
                  }
                  if (($495($4_1 & 255 | 0 | 0) | 0 | 0) == (2 | 0)) {
                   break label$31
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
                  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  if (!$4_1) {
                   continue label$14
                  }
                  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + 6 | 0;
                  continue label$14;
                 }
                 if ($4_1 >>> 0 > 16777215 >>> 0) {
                  break label$30
                 }
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = 2;
                continue label$14;
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = 3;
               continue label$14;
              case 2:
               break label$19;
              case 3:
               break label$20;
              default:
               continue label$14;
              };
             }
             HEAP32[($0_1 + 64 | 0) >> 2] = (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 1 | 0;
             if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$19
             }
             if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$19
             }
             HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
             HEAP32[$2_1 >> 2] = $0_1;
             $827(42269 | 0, $2_1 | 0);
            }
            label$33 : while (1) {
             $4_1 = $495($508($2_1 + 48 | 0 | 0) | 0 | 0) | 0;
             $7_1 = $754($2_1 + 48 | 0 | 0) | 0;
             if (($4_1 | 0) != (2 | 0)) {
              break label$16
             }
             if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              continue label$33
             }
             break label$33;
            };
            $7_1 = $7_1 + 1 | 0;
            if ($7_1 >>> 0 > 4 >>> 0) {
             break label$15
            }
           }
           $4_1 = $798($1_1 | 0) | 0;
           if ($4_1) {
            continue label$8
           }
          }
          label$34 : {
           $10_1 = $2_1 + 64 | 0;
           if ($10_1 >>> 0 < global$2 >>> 0) {
            fimport$11()
           }
           global$0 = $10_1;
          }
          return $6_1 | 0;
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = 1;
         if ($7_1 >>> 0 <= 3 >>> 0) {
          break label$5
         }
        }
        $4_1 = $7_1 + -4 | 0;
        $766($2_1 + 32 | 0 | 0, $4_1 | 0) | 0;
        $228_1 = $0_1;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
        $230$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $232$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $230$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $232$hi;
        i64toi32_i32$0 = i64toi32_i32$1 + $4_1 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < $4_1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        i64toi32_i32$1 = $228_1;
        HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$4;
        $745($5_1 | 0, $2_1 + 32 | 0 | 0);
        continue label$14;
       };
      }
      break label$8;
     };
     $859(42172 | 0, 41811 | 0, 595 | 0);
     abort();
    }
    $859(42239 | 0, 41811 | 0, 614 | 0);
    abort();
   }
   $859(42262 | 0, 41811 | 0, 619 | 0);
   abort();
  }
  $859(42262 | 0, 41811 | 0, 685 | 0);
  abort();
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = -1;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) < (1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
     $2_1 = HEAPU8[$2_1 >> 0] | 0;
     break label$2;
    }
    $2_1 = $764($0_1 | 0) | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $1_1 = $2_1 | ($1_1 << 8 | 0) | 0;
   if (($1_1 & -256 | 0 | 0) != (256 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 & 255 | 0 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $510($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(42740 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $778($0_1 | 0) | 0;
  $4_1 = $777($0_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
   HEAP8[$1_1 >> 0] = $3_1;
   $5_1 = $495($3_1 & 255 | 0 | 0) | 0;
   label$4 : {
    if (($3_1 | 0) == (443 | 0)) {
     break label$4
    }
    if (($5_1 | 0) != (2 | 0)) {
     break label$4
    }
    $5_1 = 0;
    if (($3_1 | 0) != (442 | 0)) {
     break label$3
    }
    if (($4_1 & 49152 | 0 | 0) != (16384 | 0)) {
     break label$3
    }
    $766($0_1 | 0, 6 | 0) | 0;
    $3_1 = $772($0_1 | 0) | 0;
    $5_1 = 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$3
    }
    $3_1 = $772($0_1 | 0) | 0;
    $5_1 = 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 & 7 | 0 | 8 | 0;
   }
   $5_1 = 1;
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(42756 | 0, $2_1 | 0);
  }
  label$5 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(232 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 232;
    $827(42805 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 232 | 0, $2_1 | 0, 42464 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   $502($1_1 + 8 | 0 | 0);
   HEAP32[($1_1 + 12 | 0) >> 2] = 138;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   $0_1 = $503($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
   HEAP32[($2_1 + 188 | 0) >> 2] = $0_1;
   if ($0_1) {
    break label$3
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $512($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $11_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $34_1 = 0, $37_1 = 0, $60_1 = 0, $76_1 = 0, $78$hi = 0, $80$hi = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 171 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
         break label$10
        }
        i64toi32_i32$2 = $2_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $34_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $34_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $37_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $37_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        $766(i64toi32_i32$2 | 0, $3_1 | 0) | 0;
        $6_1 = 1;
        $7_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
        label$11 : {
         if (!((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) & 1 | 0)) {
          break label$11
         }
         label$12 : {
          if (!(HEAPU8[($0_1 + 200 | 0) >> 0] | 0)) {
           break label$12
          }
          if ((HEAPU8[($0_1 + 201 | 0) >> 0] | 0 | 0) != ($7_1 | 0)) {
           break label$11
          }
          HEAP32[($0_1 + 208 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
          $60_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 224 | 0) >> 2] = $60_1;
          HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$1;
          break label$11;
         }
         HEAP8[($0_1 + 201 | 0) >> 0] = $7_1;
         HEAP8[($0_1 + 200 | 0) >> 0] = 1;
         $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         HEAP32[($0_1 + 204 | 0) >> 2] = $8_1;
         i64toi32_i32$2 = $0_1;
         i64toi32_i32$1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
         $11_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 216 | 0) >> 2] = $11_1;
         HEAP32[($0_1 + 220 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 224 | 0) >> 2] = $11_1;
         HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($0_1 + 208 | 0) >> 2] = $8_1;
        }
        $76_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
        $78$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $80$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $78$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $80$hi;
        i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $76_1;
        HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] = i64toi32_i32$5;
        if (($7_1 & 224 | 0 | 0) == (192 | 0)) {
         break label$7
        }
        $6_1 = 0;
        if (($7_1 & 240 | 0 | 0) == (224 | 0)) {
         break label$7
        }
        label$13 : {
         switch ($7_1 + -189 | 0 | 0) {
         case 0:
          HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 7;
          label$15 : {
           if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
            break label$15
           }
           $7_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
           if (!$7_1) {
            break label$6
           }
           $7_1 = $7_1 << 8 | 0 | 189 | 0;
           break label$8;
          }
          HEAP32[($0_1 + 184 | 0) >> 2] = 0;
          if ($3_1 >>> 0 < 5 >>> 0) {
           break label$6
          }
          $8_1 = ($778($5_1 + 48 | 0 | 0) | 0) >>> 24 | 0;
          label$16 : {
           if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           HEAP32[($5_1 + 40 | 0) >> 2] = $8_1;
           HEAP32[($5_1 + 36 | 0) >> 2] = 189;
           HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
           $827(42868 | 0, $5_1 + 32 | 0 | 0);
          }
          $7_1 = $8_1 << 8 | 0 | 189 | 0;
          $6_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
          if (!$6_1) {
           break label$9
          }
          label$17 : while (1) {
           if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
            break label$6
           }
           $6_1 = HEAP32[$6_1 >> 2] | 0;
           if (!$6_1) {
            break label$9
           }
           continue label$17;
          };
         case 2:
          break label$13;
         default:
          break label$6;
         };
        }
        HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 7;
        break label$6;
       }
       $859(42854 | 0, 42583 | 0, 173 | 0);
       abort();
      }
      label$18 : {
       switch ((($8_1 & 240 | 0) + -128 | 0) >>> 4 | 0 | 0) {
       case 2:
        $6_1 = 1;
        if (!($519($0_1 | 0, $7_1 | 0, $5_1 + 48 | 0 | 0, $3_1 + -4 | 0 | 0) | 0)) {
         break label$7
        }
        break label$5;
       case 0:
       case 1:
       case 4:
        break label$18;
       default:
        break label$6;
       };
      }
      HEAP32[($0_1 + 184 | 0) >> 2] = $8_1;
     }
     $6_1 = 1;
    }
    $2_1 = $753($1_1 | 0, $5_1 + 48 | 0 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0;
    if (!$2_1) {
     break label$5
    }
    label$20 : {
     if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$20
     }
     if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$20
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $756($2_1 | 0) | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
     HEAP32[$5_1 >> 2] = $0_1;
     $827(42933 | 0, $5_1 | 0);
    }
    $2_1 = $229($0_1 + 12 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $7_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
    if (!$2_1) {
     break label$5
    }
    $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
    break label$5;
   }
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $2_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
   $827(42993 | 0, $5_1 + 16 | 0 | 0);
  }
  label$21 : {
   $10_1 = $5_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 292 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(43095 | 0, 42583 | 0, 293 | 0);
   abort();
  }
  $505(HEAP32[($0_1 + 188 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 232 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $514($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $12$hi = 0, $5_1 = 0, $12_1 = 0, $6_1 = 0, $13$hi = 0, $9_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $53_1 = 0, $59_1 = 0, $61$hi = 0, $79_1 = 0, $99_1 = 0, $119$hi = 0, $184_1 = 0, $184$hi = 0, $187_1 = 0, $187$hi = 0, $189$hi = 0, $193$hi = 0, $34_1 = 0;
  label$1 : {
   $4_1 = global$0 - 128 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 340 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
    break label$5
   }
   $5_1 = 0;
   label$6 : {
    $6_1 = $813(40 | 0) | 0;
    if (!$6_1) {
     break label$6
    }
    $214($6_1 | 0, 3 | 0);
    HEAP32[($0_1 + 184 | 0) >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    $7_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
    $8_1 = $0_1 + 12 | 0;
    $225($8_1 | 0);
    HEAP8[($0_1 + 200 | 0) >> 0] = 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $12_1 = 0;
    $12$hi = i64toi32_i32$0;
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$0;
       $13$hi = i64toi32_i32$1;
       HEAP32[($4_1 + 88 | 0) >> 2] = 8192;
       HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
       $53_1 = $4_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$1 = $13$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       HEAP32[($53_1 + 84 | 0) >> 2] = i64toi32_i32$4;
       $827(43115 | 0, $4_1 + 80 | 0 | 0);
      }
      label$10 : {
       label$11 : {
        $59_1 = $1_1;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $61$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$2 = $61$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $5_1 = $50($59_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 124 | 0 | 0) | 0;
        if ($5_1) {
         break label$11
        }
        if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$4;
        $13$hi = i64toi32_i32$1;
        HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
        $79_1 = $4_1;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        HEAP32[($79_1 + 24 | 0) >> 2] = i64toi32_i32$5;
        $827(43156 | 0, $4_1 + 16 | 0 | 0);
        break label$10;
       }
       $9_1 = $756($5_1 | 0) | 0;
       label$12 : {
        if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$2;
        HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + 72 | 0) >> 2] = $9_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
        $99_1 = $4_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        HEAP32[($99_1 + 68 | 0) >> 2] = i64toi32_i32$4;
        $827(43207 | 0, $4_1 + 64 | 0 | 0);
       }
       label$13 : {
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | ($12$hi | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        if ($515($1_1 | 0, $5_1 | 0, $3_1 | 0) | 0) {
         break label$13
        }
        $735($5_1 | 0);
        $815($6_1 | 0);
        $5_1 = 0;
        break label$6;
       }
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$5 = $0_1;
       HEAP32[($0_1 + 192 | 0) >> 2] = $12_1;
       HEAP32[($0_1 + 196 | 0) >> 2] = i64toi32_i32$2;
       $797($2_1 | 0, $5_1 | 0);
       i64toi32_i32$2 = 0;
       $119$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$5 = $119$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $12_1 = i64toi32_i32$0;
       $12$hi = i64toi32_i32$4;
       if (($507($7_1 | 0, $2_1 | 0) | 0 | 0) != ($9_1 | 0)) {
        break label$10
       }
       $506($7_1 | 0, $4_1 + 104 | 0 | 0);
       $5_1 = HEAP8[(0 + 62168 | 0) >> 0] | 0;
       label$14 : {
        if ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) >>> 0 < 9 >>> 0) {
         break label$14
        }
        if (($5_1 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
        $827(43251 | 0, $4_1 + 32 | 0 | 0);
        break label$10;
       }
       label$15 : {
        if (($5_1 | 0) > (2 | 0)) {
         break label$15
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$4;
        $13$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $12$hi;
        HEAP32[($4_1 + 52 | 0) >> 2] = $12_1;
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$4 = $4_1;
        HEAP32[($4_1 + 56 | 0) >> 2] = $13_1;
        HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[($4_1 + 48 | 0) >> 2] = i64toi32_i32$2;
        $827(43302 | 0, $4_1 + 48 | 0 | 0);
       }
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = 3145728;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
        continue label$8
       }
      }
      break label$8;
     };
     if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $12$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $12_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(43364 | 0, $4_1 | 0);
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 200 | 0) >> 0] | 0)) {
      break label$16
     }
     $5_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
     $9_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
     if ($5_1 >>> 0 <= $9_1 >>> 0) {
      break label$16
     }
     i64toi32_i32$1 = $0_1 + 224 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $184_1 = i64toi32_i32$2;
     $184$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $0_1 + 216 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $187_1 = i64toi32_i32$3;
     $187$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $184$hi;
     i64toi32_i32$1 = $184_1;
     i64toi32_i32$3 = $187$hi;
     i64toi32_i32$4 = $187_1;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$0 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $189$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $193$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $189$hi;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $193$hi;
     i64toi32_i32$1 = __wasm_i64_sdiv($34_1 | 0, i64toi32_i32$0 | 0, $5_1 - $9_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($6_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    }
    $233($8_1 | 0, $6_1 | 0, 0 | 0);
    $227($8_1 | 0);
    $504($7_1 | 0);
    $5_1 = $6_1;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   label$17 : {
    $11_1 = $4_1 + 128 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $5_1 | 0;
  }
  $859(43095 | 0, 42583 | 0, 342 | 0);
  abort();
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $44_1 = 0, $46$hi = 0, $48_1 = 0, $48$hi = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $762($3_1 + 24 | 0 | 0, $1_1 | 0);
  $1_1 = 0;
  label$3 : {
   if (!($510($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    if ($4_1) {
     break label$4
    }
    $1_1 = ((HEAPU8[($3_1 + 40 | 0) >> 0] | 0) & 240 | 0 | 0) == (224 | 0);
    break label$3;
   }
   $1_1 = 0;
   label$5 : {
    if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    $5_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 8192;
    HEAP32[$3_1 >> 2] = ($4_1 + $5_1 | 0) + 5 | 0;
    $827(43409 | 0, $3_1 | 0);
   }
   $44_1 = $0_1;
   i64toi32_i32$0 = 0;
   $46$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $46$hi;
   i64toi32_i32$0 = $48$hi;
   i64toi32_i32$3 = $48_1;
   i64toi32_i32$4 = $4_1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$3 = 5;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + 0 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = $50($44_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $3_1 + 20 | 0 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $762($3_1 + 24 | 0 | 0, $2_1 | 0);
   $1_1 = 1;
   $766($3_1 + 24 | 0 | 0, 1 | 0) | 0;
   label$6 : {
    if (!($771($3_1 + 24 | 0 | 0, 4 | 0) | 0)) {
     break label$6
    }
    $1_1 = $510($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0) | 0;
   }
   $735($2_1 | 0);
  }
  label$7 : {
   $7_1 = $3_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $1_1 | 0;
 }
 
 function $516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(64 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $517();
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 64 | 0, $3_1 + 4 | 0 | 0, 42560 | 0);
   label$5 : {
    if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(42665 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 42728;
   $492($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 40 | 0) >> 2] = 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = 139;
   i64toi32_i32$1 = $3_1 + 56 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 36 | 0) >> 2] = $3_1;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $517() {
  $862(42583 | 0, 572 | 0, 3 | 0) | 0;
 }
 
 function $518($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $23_1 = 0, $24$hi = 0, $26$hi = 0;
  $5_1 = 2;
  label$1 : {
   label$2 : {
    if (!($1_1 & 65536 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    $5_1 = $754($3_1 | 0) | 0;
    $23_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $26$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $5_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $5_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $23_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    $5_1 = 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   }
   return $5_1 | 0;
  }
  $859(43523 | 0, 42583 | 0, 556 | 0);
  abort();
 }
 
 function $519($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($3_1 >>> 0 < 3 >>> 0) {
     break label$2
    }
    $3_1 = $782($2_1 | 0) | 0;
    if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) <= (-1 | 0)) {
     break label$1
    }
    $2_1 = $813(328 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    $218($2_1 | 0);
    HEAP32[($2_1 + 20 | 0) >> 2] = 139;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    $4_1 = 1;
    HEAP32[($2_1 + 4 | 0) >> 2] = 1;
    $1_1 = (($3_1 >>> 8 | 0) & 7 | 0) + 1 | 0;
    HEAP8[($2_1 + 24 | 0) >> 0] = $1_1;
    $5_1 = HEAP32[((($3_1 >>> 10 | 0) & 12 | 0) + 43056 | 0) >> 2] | 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
    $3_1 = HEAPU8[((($3_1 >>> 14 | 0) & 3 | 0) + 43044 | 0) >> 0] | 0;
    HEAP8[($2_1 + 25 | 0) >> 0] = $3_1;
    HEAP16[($2_1 + 26 | 0) >> 1] = Math_imul(Math_imul($3_1, $1_1), $5_1) >>> 10 | 0;
    $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
   }
   return $4_1 | 0;
  }
  $859(43072 | 0, 42583 | 0, 143 | 0);
  abort();
 }
 
 function $520($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (42560 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 42560 | 0, 42583 | 0, 528 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(43465 | 0, 42583 | 0, 530 | 0);
   abort();
  }
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $9$hi = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $42_1 = 0, $44$hi = 0, $47$hi = 0, $53_1 = 0, $55$hi = 0, $58$hi = 0, $66_1 = 0, $69_1 = 0, $93_1 = 0, $96$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (42560 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 42560 | 0, 42583 | 0, 468 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if (!$1_1) {
       break label$8
      }
      if (!$2_1) {
       break label$7
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      $4_1 = $770($1_1 | 0) | 0;
      HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $2_1;
      $5_1 = i64toi32_i32$2 + 16 | 0;
      label$9 : while (1) {
       label$10 : {
        $2_1 = $494($5_1 | 0, 0 | 0, $1_1 | 0) | 0;
        if (($2_1 | 0) < (0 | 0)) {
         break label$10
        }
        $42_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        $44$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $47$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $44$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $47$hi;
        i64toi32_i32$3 = $754($1_1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $42_1;
        HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$5;
        continue label$9;
       }
       $6_1 = 0;
       label$11 : {
        switch ($2_1 + 3 | 0 | 0) {
        case 1:
         if (HEAP32[($0_1 + 40 | 0) >> 2] | 0) {
          break label$6
         }
         $53_1 = $0_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
         $55$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $58$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $55$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $58$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$0 = $53_1;
         HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$4;
         $6_1 = 1;
         break label$5;
        case 0:
         break label$11;
        case 2:
         break label$5;
        default:
         continue label$9;
        };
       }
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$4 = 0;
       HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$4;
       label$13 : while (1) {
        i64toi32_i32$2 = $1_1 + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $66_1 = i64toi32_i32$4;
        i64toi32_i32$4 = ($3_1 + 8 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $66_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $69_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $69_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
        label$14 : {
         if (!($510(i64toi32_i32$0 + 8 | 0 | 0, i64toi32_i32$0 + 24 | 0 | 0) | 0)) {
          break label$14
         }
         if (!($495(HEAPU8[($3_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
          continue label$9
         }
         $766($1_1 | 0, (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 6 | 0 | 0) | 0;
         if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$5
         }
         continue label$13;
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$5
        }
        $766($1_1 | 0, 1 | 0) | 0;
        continue label$13;
       };
      };
     }
     $859(43475 | 0, 42583 | 0, 469 | 0);
     abort();
    }
    $859(43482 | 0, 42583 | 0, 470 | 0);
    abort();
   }
   $859(43492 | 0, 42583 | 0, 480 | 0);
   abort();
  }
  $93_1 = $0_1;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = 0;
  $96$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = $96$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = $93_1;
  HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$1;
  label$15 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $738(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  $739(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $736($0_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return -1 | 0;
  }
  HEAP32[($1_1 + 84 | 0) >> 2] = 147;
  HEAP32[($1_1 + 80 | 0) >> 2] = 0;
  HEAP8[($1_1 + 12 | 0) >> 0] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $822($1_1 + 29 | 0 | 0, 255 | 0, 48 | 0) | 0;
  return 0 | 0;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $735($1_1 | 0);
 }
 
 function $527($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $67_1 = 0, $70_1 = 0, $97_1 = 0, $100_1 = 0, $171_1 = 0, $174_1 = 0;
  label$1 : {
   $5_1 = global$0 - 112 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
       if (!$2_1) {
        break label$5
       }
       $6_1 = 0;
       label$8 : {
        if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($5_1 + 60 | 0) >> 2] = $1_1;
        HEAP32[($5_1 + 76 | 0) >> 2] = $1_1 & 4194304 | 0 ? 43713 : 43699;
        HEAP32[($5_1 + 72 | 0) >> 2] = $1_1 & 128 | 0 ? 43706 : 43699;
        HEAP32[($5_1 + 68 | 0) >> 2] = $1_1 & 2 | 0 ? 43700 : 43699;
        HEAP32[($5_1 + 64 | 0) >> 2] = $1_1 & 1 | 0 ? 43694 : 43699;
        HEAP32[($5_1 + 56 | 0) >> 2] = $4_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = $3_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
        $827(43649 | 0, $5_1 + 48 | 0 | 0);
       }
       if (HEAPU8[($0_1 + 12 | 0) >> 0] | 0) {
        break label$3
       }
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       i64toi32_i32$2 = $3_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $67_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $67_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $70_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1;
       HEAP32[($5_1 + 96 | 0) >> 2] = $70_1;
       HEAP32[($5_1 + 100 | 0) >> 2] = i64toi32_i32$0;
       $766(i64toi32_i32$2 | 0, $4_1 | 0) | 0;
       label$9 : {
        label$10 : {
         if (!($1_1 & 4194304 | 0)) {
          break label$10
         }
         $738($7_1 | 0);
         if ($4_1 >>> 0 < 16 >>> 0) {
          break label$4
         }
         $1_1 = $772($5_1 + 96 | 0 | 0) | 0;
         if (($1_1 + 16 | 0) >>> 0 > $4_1 >>> 0) {
          break label$4
         }
         $766($5_1 + 96 | 0 | 0, $1_1 | 0) | 0;
         i64toi32_i32$2 = ($5_1 + 96 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $97_1 = i64toi32_i32$0;
         i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $97_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
         $100_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $5_1;
         HEAP32[($5_1 + 80 | 0) >> 2] = $100_1;
         HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
         $6_1 = $0_1 + 13 | 0;
         $768($5_1 + 80 | 0 | 0, $6_1 | 0, 16 | 0) | 0;
         $8_1 = ((HEAPU8[($0_1 + 14 | 0) >> 0] | 0) & 15 | 0) << 8 | 0 | (HEAPU8[($0_1 + 15 | 0) >> 0] | 0) | 0;
         HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $8_1 + 3 | 0;
         label$11 : {
          if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
          $827(43720 | 0, $5_1 + 32 | 0 | 0);
         }
         label$12 : {
          if (!($721($6_1 | 0, $0_1 + 29 | 0 | 0, $0_1 + 61 | 0 | 0, $0_1 + 45 | 0 | 0, 16 | 0) | 0)) {
           break label$12
          }
          $4_1 = $4_1 - $1_1 | 0;
          break label$9;
         }
         if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$4
         }
         if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$4
         }
         HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
         $827(43763 | 0, $5_1 + 16 | 0 | 0);
         break label$4;
        }
        if ($1_1 & 131 | 0) {
         break label$4
        }
       }
       $6_1 = 1;
       if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
        break label$3
       }
       label$13 : {
        $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($1_1 >>> 0 > $4_1 >>> 0) {
         break label$13
        }
        i64toi32_i32$2 = ($5_1 + 96 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $171_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $171_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $174_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 80 | 0) >> 2] = $174_1;
        HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
        $766($5_1 + 80 | 0 | 0, $1_1 | 0) | 0;
        $755($7_1 | 0, $2_1 | 0, $5_1 + 96 | 0 | 0, $5_1 + 80 | 0 | 0) | 0;
        $3_1 = $751($7_1 | 0, 0 | 0, 0 | 0) | 0;
        label$14 : {
         if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         label$15 : {
          label$16 : {
           if ($3_1) {
            break label$16
           }
           $1_1 = 0;
           break label$15;
          }
          $1_1 = $756($3_1 | 0) | 0;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
         HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
         HEAP32[$5_1 >> 2] = $0_1;
         $827(43810 | 0, $5_1 | 0);
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = 0;
        if (!$3_1) {
         break label$3
        }
        FUNCTION_TABLE[HEAP32[($0_1 + 84 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0, $3_1);
        break label$3;
       }
       HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 - $4_1 | 0;
       $755($7_1 | 0, $2_1 | 0, $5_1 + 96 | 0 | 0, $3_1 | 0) | 0;
       break label$3;
      }
      $859(43544 | 0, 43548 | 0, 77 | 0);
      abort();
     }
     $859(43631 | 0, 43548 | 0, 78 | 0);
     abort();
    }
    $859(43645 | 0, 43548 | 0, 79 | 0);
    abort();
   }
   $523($0_1 | 0);
   $6_1 = 1;
  }
  label$17 : {
   $10_1 = $5_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(43881 | 0, 43892 | 0, 48 | 0);
   abort();
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 4 | 0) >> 1] = $1_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 148;
  $4_1 = 188;
  HEAP16[($0_1 + 22 | 0) >> 1] = $4_1;
  HEAP16[($0_1 + 24 | 0) >> 1] = $4_1 >>> 16 | 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 14 | 0;
  i64toi32_i32$0 = 0;
  $5_1 = 0;
  HEAP16[i64toi32_i32$1 >> 1] = $5_1;
  HEAP16[(i64toi32_i32$1 + 2 | 0) >> 1] = $5_1 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 4 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
 }
 
 function $529($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 2 | 0;
 }
 
 function $530($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0, $5_1 = 0, $11_1 = 0, $9_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 144 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $5_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $6_1 = HEAPU16[($0_1 + 22 | 0) >> 1] | 0;
         if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) >= ($6_1 | 0)) {
          break label$9
         }
         if (($771($2_1 | 0, $6_1 | 0) | 0) >>> 0 >= (HEAPU16[($0_1 + 22 | 0) >> 1] | 0) >>> 0) {
          break label$9
         }
         $7_1 = -1;
         break label$8;
        }
        HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        HEAP32[($3_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
        $766($2_1 | 0, HEAPU16[($0_1 + 24 | 0) >> 1] | 0 | 0) | 0;
        label$10 : {
         label$11 : {
          $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          if (($6_1 | 0) < (4 | 0)) {
           break label$11
          }
          HEAP32[($2_1 + 4 | 0) >> 2] = $6_1 + -4 | 0;
          $6_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $6_1 + 4 | 0;
          $6_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $6_1 = $6_1 << 24 | 0 | (($6_1 << 8 | 0) & 16711680 | 0) | 0 | (($6_1 >>> 8 | 0) & 65280 | 0 | ($6_1 >>> 24 | 0) | 0) | 0;
          break label$10;
         }
         $6_1 = $774($2_1 | 0, 4 | 0) | 0;
        }
        label$12 : {
         label$13 : {
          if (($6_1 & -16777216 | 0 | 0) != (1191182336 | 0)) {
           break label$13
          }
          $7_1 = ($6_1 >>> 8 | 0) & 8191 | 0;
          label$14 : {
           label$15 : {
            if ($6_1 & 8388608 | 0) {
             break label$15
            }
            label$16 : {
             if (($7_1 | 0) != (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
              break label$16
             }
             $8_1 = ($6_1 >>> 4 | 0) & 3 | 0;
             $4_1 = $6_1 & 4194304 | 0 | $4_1 | 0;
             $7_1 = $6_1 & 15 | 0;
             if (($7_1 | 0) == ($5_1 | 0)) {
              break label$12
             }
             if (!($6_1 & 16 | 0)) {
              break label$12
             }
             if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
              break label$14
             }
             break label$12;
            }
            label$17 : {
             $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
             if (($6_1 | 0) < (0 | 0)) {
              break label$17
             }
             if ((HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) != (HEAPU16[($2_1 + 8 | 0) >> 1] | 0 | 0)) {
              break label$17
             }
             $4_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + ($6_1 - $4_1 | 0) | 0;
             break label$8;
            }
            $769($2_1 | 0, $3_1 + 136 | 0 | 0);
            break label$8;
           }
           label$18 : {
            if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$18
            }
            if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$18
            }
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(43981 | 0, $3_1 + 32 | 0 | 0);
           }
           $766($2_1 | 0, 184 | 0) | 0;
           $4_1 = $4_1 | ($7_1 | 0) == (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) | 0;
           break label$5;
          }
          label$19 : {
           if ((($6_1 + 1 | 0) & 15 | 0 | 0) == ($5_1 | 0)) {
            break label$19
           }
           if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           HEAP32[($3_1 + 24 | 0) >> 2] = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = $7_1;
           HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
           $827(44038 | 0, $3_1 + 16 | 0 | 0);
          }
          $4_1 = $4_1 | 2 | 0;
          break label$12;
         }
         $769($2_1 | 0, $3_1 + 136 | 0 | 0);
         $7_1 = -3;
         $6_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
         if (($6_1 | 0) == (255 | 0)) {
          break label$8
         }
         $4_1 = $6_1 + 1 | 0;
         HEAP8[($0_1 + 7 | 0) >> 0] = $4_1;
         label$20 : {
          if ($6_1 >>> 0 < 4 >>> 0) {
           break label$20
          }
          if (($6_1 | 0) != (253 | 0)) {
           break label$8
          }
         }
         $6_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
         $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         HEAP32[($3_1 + 64 | 0) >> 2] = 4;
         HEAP32[($3_1 + 60 | 0) >> 2] = $4_1 & 255 | 0;
         HEAP32[($3_1 + 56 | 0) >> 2] = $8_1;
         HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
         $820($3_1 + 80 | 0 | 0, 48 | 0, 44169 | 0, $3_1 + 48 | 0 | 0) | 0;
         $801($2_1 | 0, $3_1 + 80 | 0 | 0);
         break label$8;
        }
        $7_1 = 184;
        label$21 : {
         label$22 : {
          switch ($8_1 | 0) {
          default:
           label$24 : {
            label$25 : {
             $7_1 = $772($2_1 | 0) | 0;
             if (!$7_1) {
              break label$25
             }
             $9_1 = $772($2_1 | 0) | 0;
             $10_1 = $9_1 & 244 | 0;
             $11_1 = $7_1;
             label$26 : {
              if ($7_1 >>> 0 < 7 >>> 0) {
               break label$26
              }
              $11_1 = $7_1;
              if (!($9_1 & 16 | 0)) {
               break label$26
              }
              HEAP32[($0_1 + 16 | 0) >> 2] = $778($2_1 | 0) | 0;
              HEAP16[($0_1 + 20 | 0) >> 1] = ($777($2_1 | 0) | 0) & 511 | 0;
              $11_1 = $7_1 + -6 | 0;
             }
             $4_1 = $10_1 | $4_1 | 0;
             $766($2_1 | 0, $11_1 + -1 | 0 | 0) | 0;
             if ($7_1 >>> 0 > 183 >>> 0) {
              break label$24
             }
            }
            $7_1 = 183 - $7_1 | 0;
            if (($8_1 | 0) == (3 | 0)) {
             break label$21
            }
            $766($2_1 | 0, $7_1 | 0) | 0;
            $7_1 = 0;
            if ($4_1 & 16 | 0) {
             break label$21
            }
            break label$5;
           }
           label$27 : {
            if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$27
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $11_1;
            HEAP32[$3_1 >> 2] = $0_1;
            $827(44103 | 0, $3_1 | 0);
           }
           $769($2_1 | 0, $3_1 + 136 | 0 | 0);
           $766($2_1 | 0, 188 | 0) | 0;
           if (($8_1 | 0) == (3 | 0)) {
            break label$6
           }
           break label$5;
          case 1:
           break label$21;
          case 0:
           break label$22;
          };
         }
         $766($2_1 | 0, 184 | 0) | 0;
         break label$5;
        }
        $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 28 | 0) >> 2] | 0]($0_1, $4_1, $1_1, $2_1, $7_1) | 0;
        $4_1 = 0;
        label$28 : {
         switch ($8_1 + -1 | 0 | 0) {
         case 0:
          break label$6;
         case 1:
          break label$7;
         default:
          break label$28;
         };
        }
        $769($2_1 | 0, $3_1 + 136 | 0 | 0);
        $7_1 = -2;
       }
       HEAP8[($0_1 + 6 | 0) >> 0] = $5_1;
       label$29 : {
        $13_1 = $3_1 + 144 | 0;
        if ($13_1 >>> 0 < global$2 >>> 0) {
         fimport$11()
        }
        global$0 = $13_1;
       }
       return $7_1 | 0;
      }
      label$31 : {
       $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($8_1 | 0) < ($7_1 | 0)) {
        break label$31
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $8_1 - $7_1 | 0;
       HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $7_1 | 0;
       break label$6;
      }
      $766($2_1 | 0, $7_1 | 0) | 0;
     }
     $5_1 = ($6_1 + 1 | 0) & 15 | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $859(43974 | 0, 43892 | 0, 93 | 0);
  abort();
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 149;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 2 | 0;
 }
 
 function $533($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 288 | 0);
  }
  HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($0_1 + 144 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = 0;
  HEAP32[($0_1 + 136 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 68 | 0) >> 0] = 1;
  $738(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = HEAP32[(($0_1 + ($2_1 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     i64toi32_i32$0 = 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($3_1 + 6 | 0) >> 0] = 0;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (16 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 314 | 0);
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $1_1;
  $528($1_1 | 0, 8191 | 0);
  HEAP16[($0_1 + 112 | 0) >> 1] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
  $535($0_1 + 4 | 0 | 0);
  $533($0_1 | 0, 0 | 0, 0 | 0);
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  $974($0_1 | 0, 0 | 0, 64 | 0) | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(152 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $3_1 = 0;
    if (!($835(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 152;
    $827(44227 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 152 | 0, $3_1 | 0, 44208 | 0);
   HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($3_1 + 124 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = $736($0_1 | 0) | 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = $1_1;
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    $534($3_1 | 0);
    break label$3;
   }
   $815($3_1 | 0);
   $3_1 = 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 350 | 0);
  }
  $739(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 152 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 360 | 0);
  }
  label$5 : {
   $3_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
   if ($3_1 >>> 0 >= 8192 >>> 0) {
    break label$5
   }
   label$6 : {
    label$7 : {
     $4_1 = $0_1 + 4 | 0;
     if ($539($4_1 | 0, $3_1 | 0) | 0) {
      break label$7
     }
     $0_1 = HEAPU16[($0_1 + 128 | 0) >> 1] | 0;
     HEAP16[($1_1 + 24 | 0) >> 1] = $0_1;
     HEAP16[($1_1 + 22 | 0) >> 1] = $0_1 + 188 | 0;
     $540($4_1 | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0 | 0, $1_1 | 0);
     break label$6;
    }
    if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $1_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $539($4_1 | 0, $1_1 | 0) | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(44303 | 0, $2_1 | 0);
   }
   label$8 : {
    $6_1 = $2_1 + 16 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(44275 | 0, 43892 | 0, 362 | 0);
  abort();
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      return $0_1 | 0;
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return 0 | 0;
  }
  $859(44766 | 0, 43892 | 0, 246 | 0);
  abort();
 }
 
 function $540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(44766 | 0, 43892 | 0, 246 | 0);
   abort();
  }
  $0_1 = $0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 376 | 0);
  }
  label$5 : {
   label$6 : {
    if ($1_1 >>> 0 >= 8192 >>> 0) {
     break label$6
    }
    $3_1 = $0_1 + 4 | 0;
    if (!($539($3_1 | 0, $1_1 | 0) | 0)) {
     break label$5
    }
    HEAP32[($0_1 + 84 | 0) >> 2] = $0_1 + 88 | 0;
    label$7 : {
     if ($542($3_1 | 0, $1_1 | 0) | 0) {
      break label$7
     }
     if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(44434 | 0, $2_1 | 0);
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return;
   }
   $859(44358 | 0, 43892 | 0, 377 | 0);
   abort();
  }
  $859(44381 | 0, 43892 | 0, 378 | 0);
  abort();
 }
 
 function $542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAPU16[($3_1 + 4 | 0) >> 1] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $0_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $0_1;
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$0_1) {
       break label$1
      }
      if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     label$6 : {
      if ($4_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
      break label$5;
     }
     HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
    }
    return 1 | 0;
   }
   $859(44766 | 0, 43892 | 0, 246 | 0);
   abort();
  }
  return 0 | 0;
 }
 
 function $543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $3_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 418 | 0);
  }
  $3_1 = $0_1 + 88 | 0;
  $4_1 = $0_1 + 4 | 0;
  $5_1 = $798($1_1 | 0) | 0;
  $6_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  $8_1 = $2_1 + 32 | 0;
  $9_1 = 0;
  label$5 : {
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
     $827(44491 | 0, $2_1 + 48 | 0 | 0);
    }
    label$8 : {
     if (!$5_1) {
      break label$8
     }
     $744($7_1 | 0, $5_1 | 0);
     $10_1 = $756($5_1 | 0) | 0;
     $735($5_1 | 0);
     $9_1 = $10_1 + $9_1 | 0;
    }
    $763($2_1 + 64 | 0 | 0, $7_1 | 0);
    label$9 : {
     if (!(HEAPU8[($0_1 + 68 | 0) >> 0] | 0)) {
      break label$9
     }
     $544($0_1 | 0, $2_1 + 64 | 0 | 0, $6_1 | 0);
    }
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : while (1) {
        $10_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($0_1 + 84 | 0) >> 2] = $6_1;
        HEAP32[($0_1 + 80 | 0) >> 2] = $10_1;
        $5_1 = $530($6_1 | 0, $7_1 | 0, $2_1 + 64 | 0 | 0) | 0;
        $11_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($0_1 + 80 | 0) >> 2] = $11_1;
        HEAP32[($0_1 + 76 | 0) >> 2] = ($11_1 - $10_1 | 0) + (HEAP32[($0_1 + 76 | 0) >> 2] | 0) | 0;
        label$14 : {
         if (($5_1 | 0) < (0 | 0)) {
          break label$14
         }
         if (($5_1 | 0) >= (8192 | 0)) {
          break label$5
         }
         label$15 : {
          $10_1 = $5_1 & 65535 | 0;
          $11_1 = $539($4_1 | 0, $10_1 | 0) | 0;
          if (!$11_1) {
           break label$15
          }
          HEAP32[($0_1 + 84 | 0) >> 2] = $11_1;
          $6_1 = $11_1;
          continue label$13;
         }
         label$16 : {
          if (($5_1 | 0) != (8191 | 0)) {
           break label$16
          }
          $6_1 = $3_1;
          continue label$13;
         }
         label$17 : {
          $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 124 | 0) >> 2] | 0](HEAP32[($0_1 + 120 | 0) >> 2] | 0, $10_1) | 0;
          if (($5_1 | 0) == (2 | 0)) {
           break label$17
          }
          if (($5_1 | 0) != (1 | 0)) {
           break label$12
          }
          $6_1 = $539($4_1 | 0, $10_1 | 0) | 0;
          if ($6_1) {
           continue label$13
          }
          label$18 : {
           if (!($835(62200 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$18
           }
           HEAP32[$2_1 >> 2] = $0_1;
           $827(44557 | 0, $2_1 | 0);
          }
          $859(44655 | 0, 43892 | 0, 470 | 0);
          abort();
         }
         label$19 : {
          label$20 : {
           $10_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
           $5_1 = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0;
           if (($10_1 | 0) < ($5_1 | 0)) {
            break label$20
           }
           HEAP32[($2_1 + 68 | 0) >> 2] = $10_1 - $5_1 | 0;
           HEAP32[($2_1 + 64 | 0) >> 2] = (HEAP32[($2_1 + 64 | 0) >> 2] | 0) + $5_1 | 0;
           break label$19;
          }
          $766($2_1 + 64 | 0 | 0, $5_1 | 0) | 0;
         }
         HEAP32[($0_1 + 76 | 0) >> 2] = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + 1 | 0;
         continue label$13;
        }
        label$21 : {
         switch ($5_1 + 3 | 0 | 0) {
         case 2:
          break label$11;
         case 1:
          break label$12;
         case 0:
          break label$21;
         default:
          continue label$13;
         };
        }
        label$22 : {
         if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
          break label$22
         }
         if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$22
         }
         $5_1 = HEAPU16[($6_1 + 4 | 0) >> 1] | 0;
         $10_1 = HEAPU8[($6_1 + 7 | 0) >> 0] | 0;
         HEAP32[$8_1 >> 2] = (Math_imul((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0) + (HEAP32[($0_1 + 132 | 0) >> 2] | 0) | 0) + (HEAP32[($0_1 + 144 | 0) >> 2] | 0) | 0;
         HEAP32[($2_1 + 28 | 0) >> 2] = 510;
         HEAP32[($2_1 + 24 | 0) >> 2] = $10_1;
         HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
         $827(44657 | 0, $2_1 + 16 | 0 | 0);
        }
        $544($0_1 | 0, $2_1 + 64 | 0 | 0, $6_1 | 0);
        continue label$13;
       };
      }
      $745($7_1 | 0, $2_1 + 64 | 0 | 0);
      break label$10;
     }
     $745($7_1 | 0, $2_1 + 64 | 0 | 0);
     $5_1 = $798($1_1 | 0) | 0;
     if ($5_1) {
      continue label$6
     }
    }
    break label$6;
   };
   label$23 : {
    $13_1 = $2_1 + 80 | 0;
    if ($13_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $13_1;
   }
   return $9_1 | 0;
  }
  $859(44527 | 0, 43892 | 0, 447 | 0);
  abort();
 }
 
 function $544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, $19_1 = 0, $22_1 = 0, $29_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $22_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = $0_1 + 128 | 0;
     $29_1 = $766($3_1 + 32 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
     $4_1 = HEAP32[$4_1 >> 2] | 0;
     if (($29_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     if (($764($3_1 + 32 | 0 | 0) | 0 | 0) == (71 | 0)) {
      break label$4
     }
     $4_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = 0;
    label$6 : {
     if (!($545($1_1 | 0, $4_1 | 0, $3_1 + 28 | 0 | 0) | 0)) {
      break label$6
     }
     HEAP8[($0_1 + 68 | 0) >> 0] = 0;
    }
    $1_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = (HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($0_1 + 132 | 0) >> 2] = (HEAP32[($0_1 + 132 | 0) >> 2] | 0) + $1_1 | 0;
    if (HEAPU8[($0_1 + 68 | 0) >> 0] | 0) {
     break label$3
    }
    if ((HEAPU8[($2_1 + 7 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $1_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
    $4_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = (Math_imul((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0) + (HEAP32[($0_1 + 132 | 0) >> 2] | 0) | 0) + (HEAP32[($0_1 + 144 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 510;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(44768 | 0, $3_1 | 0);
    break label$3;
   }
   HEAP8[($0_1 + 68 | 0) >> 0] = 0;
  }
  label$7 : {
   $6_1 = $3_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $545($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $4_1 = 0, $27_1 = 0, $30_1 = 0, $65_1 = 0, $68_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $4_1 = $1_1 + 188 | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     $6_1 = ($3_1 + 32 | 0) + 8 | 0;
     $7_1 = $0_1 + 8 | 0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $27_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $27_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $30_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $30_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $766($3_1 + 32 | 0 | 0, $5_1 + $1_1 | 0 | 0) | 0;
     label$6 : {
      label$7 : {
       $8_1 = $764($3_1 + 32 | 0 | 0) | 0;
       if (($8_1 | 0) == (71 | 0)) {
        break label$7
       }
       if (($8_1 | 0) == (-1 | 0)) {
        break label$4
       }
       label$8 : while (1) {
        $8_1 = $764($3_1 + 32 | 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$4
        }
        if (($8_1 | 0) == (71 | 0)) {
         break label$6
        }
        $5_1 = $5_1 + 1 | 0;
        continue label$8;
       };
      }
      label$9 : {
       if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(44710 | 0, $3_1 + 16 | 0 | 0);
      }
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $65_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1;
      HEAP32[i64toi32_i32$0 >> 2] = $65_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $68_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = $68_1;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      $766($3_1 + 32 | 0 | 0, $5_1 | 0) | 0;
      $8_1 = 0;
      label$10 : {
       label$11 : while (1) {
        $766($3_1 + 32 | 0 | 0, $1_1 | 0) | 0;
        label$12 : {
         $6_1 = $764($3_1 + 32 | 0 | 0) | 0;
         if (($6_1 | 0) == (71 | 0)) {
          break label$12
         }
         if (($6_1 | 0) == (-1 | 0)) {
          break label$3
         }
         $7_1 = $8_1 + 1 | 0;
         break label$10;
        }
        $766($3_1 + 32 | 0 | 0, 187 | 0) | 0;
        $6_1 = $8_1 >>> 0 < 6 >>> 0;
        $7_1 = $8_1 + 1 | 0;
        $8_1 = $7_1;
        if ($6_1) {
         continue label$11
        }
        break label$11;
       };
      }
      $8_1 = 7;
      if (($7_1 | 0) == (7 | 0)) {
       break label$3
      }
     }
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   $8_1 = 0;
  }
  label$13 : {
   if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
   HEAP32[$3_1 >> 2] = $5_1;
   $827(44729 | 0, $3_1 | 0);
  }
  $766($0_1 | 0, $5_1 | 0) | 0;
  HEAP32[$2_1 >> 2] = $5_1;
  label$14 : {
   $10_1 = $3_1 + 48 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return ($8_1 | 0) != (0 | 0) | 0;
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $22_1 = 0, $24$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $40$hi = 0, $41_1 = 0, $41$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 502 | 0);
  }
  $2_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  $22_1 = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  $24$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $26$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $26$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $27_1 = i64toi32_i32$4;
  $27$hi = i64toi32_i32$5;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 188;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $31$hi = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  $40$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $31$hi;
  i64toi32_i32$1 = $40$hi;
  i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, ($2_1 + (HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) - (HEAP32[($0_1 + 80 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $41_1 = i64toi32_i32$1;
  $41$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $27$hi;
  i64toi32_i32$2 = $27_1;
  i64toi32_i32$1 = $41$hi;
  i64toi32_i32$3 = $41_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  i64toi32_i32$2 = $22_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  return $548($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = $545($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  $4_1 = 0;
  label$3 : {
   if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0 > 1316 >>> 0) {
    break label$3
   }
   if (!$3_1) {
    break label$3
   }
   $766($0_1 | 0, $1_1 + 188 | 0 | 0) | 0;
   $4_1 = 0;
   $3_1 = 0;
   label$4 : {
    label$5 : while (1) {
     $766($0_1 | 0, $1_1 | 0) | 0;
     label$6 : {
      $5_1 = $764($0_1 | 0) | 0;
      if (($5_1 | 0) == (71 | 0)) {
       break label$6
      }
      $6_1 = $3_1;
      if (($5_1 | 0) == (-1 | 0)) {
       break label$4
      }
      break label$3;
     }
     $766($0_1 | 0, 187 | 0) | 0;
     $6_1 = 1;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (7 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = ($6_1 | 0) != (0 | 0);
  }
  label$7 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  return $548($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  return $551($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(204 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $3_1 = 0;
    if (!($835(62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 204;
    $827(45192 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 204 | 0, $3_1 | 0, 44832 | 0);
   HEAP32[($3_1 + 196 | 0) >> 2] = $1_1 + 188 | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $531($2_1 + 16 | 0 | 0);
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = 150;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
   $0_1 = $536($0_1 | 0, $2_1 + 16 | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
   if ($0_1) {
    break label$3
   }
   $815($3_1 | 0);
   $3_1 = 0;
  }
  label$5 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 357 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(45407 | 0, 45046 | 0, 358 | 0);
   abort();
  }
  $537(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 204 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $15$hi = 0, $7_1 = 0, $15_1 = 0, $6_1 = 0, $14$hi = 0, $14_1 = 0, $5_1 = 0, $16$hi = 0, $17$hi = 0, $8_1 = 0, $19$hi = 0, i64toi32_i32$6 = 0, $52_1 = 0, $16_1 = 0, $17_1 = 0, $18$hi = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $13_1 = 0, $12_1 = 0, $65$hi = 0, $10_1 = 0, $18_1 = 0, $11_1 = 0, $89_1 = 0, $95_1 = 0, $97$hi = 0, $115_1 = 0, $135_1 = 0, $145$hi = 0, $170_1 = 0, $198$hi = 0, $201_1 = 0, $201$hi = 0, $207_1 = 0, $207$hi = 0, $320_1 = 0, $323_1 = 0, $323$hi = 0, $326_1 = 0, $326$hi = 0, $328$hi = 0, $332$hi = 0, $68_1 = 0;
  label$1 : {
   $4_1 = global$0 - 192 | 0;
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  $14$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 382 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break label$7
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     label$8 : {
      $6_1 = $813(44 | 0) | 0;
      if ($6_1) {
       break label$8
      }
      $554(389 | 0, 3 | 0);
      $7_1 = 0;
      break label$5;
     }
     $214($6_1 | 0, 4 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
     $8_1 = $0_1 + 24 | 0;
     $225($8_1 | 0);
     $973($0_1 + 68 | 0 | 0, $3_1 + 32 | 0 | 0, 128 | 0) | 0;
     $9_1 = HEAPU8[($3_1 + 28 | 0) >> 0] | 0;
     HEAP8[($0_1 + 200 | 0) >> 0] = 0;
     HEAP8[($0_1 + 64 | 0) >> 0] = $9_1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$0;
     fimport$0(1 | 0, $4_1 + 184 | 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $52_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $52_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $65$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = !($15_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $65$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? 1048576 : $52_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, 15 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$0;
     $10_1 = (HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) / (-1e6 | 0) | 0;
     i64toi32_i32$0 = 0;
     $15_1 = 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$3;
     $11_1 = $4_1 + 96 | 0;
     label$9 : {
      label$10 : {
       label$11 : while (1) {
        label$12 : {
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         i64toi32_i32$4 = $3_1;
         i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $19$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 136 | 0) >> 2] = 8192;
         HEAP32[($4_1 + 128 | 0) >> 2] = $0_1;
         $89_1 = $4_1;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$0 = $19$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         HEAP32[($89_1 + 132 | 0) >> 2] = i64toi32_i32$2;
         $827(45427 | 0, $4_1 + 128 | 0 | 0);
        }
        label$13 : {
         $95_1 = $1_1;
         i64toi32_i32$0 = $3_1;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $97$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $15$hi;
         i64toi32_i32$4 = $97$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $9_1 = $50($95_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 8192 | 0, $4_1 + 180 | 0 | 0) | 0;
         if ($9_1) {
          break label$13
         }
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         i64toi32_i32$4 = $3_1;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $14_1 = i64toi32_i32$2;
         $14$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
         HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 180 | 0) >> 2] | 0;
         $115_1 = $4_1;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$0 = $14$hi;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         HEAP32[($115_1 + 24 | 0) >> 2] = i64toi32_i32$5;
         $827(45467 | 0, $4_1 + 16 | 0 | 0);
         break label$10;
        }
        $7_1 = $756($9_1 | 0) | 0;
        label$14 : {
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         i64toi32_i32$0 = $3_1;
         i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $19$hi = i64toi32_i32$4;
         HEAP32[($4_1 + 124 | 0) >> 2] = $9_1;
         HEAP32[($4_1 + 120 | 0) >> 2] = $7_1;
         HEAP32[($4_1 + 112 | 0) >> 2] = $0_1;
         $135_1 = $4_1;
         i64toi32_i32$4 = $15$hi;
         i64toi32_i32$4 = $19$hi;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         HEAP32[($135_1 + 116 | 0) >> 2] = i64toi32_i32$2;
         $827(45517 | 0, $4_1 + 112 | 0 | 0);
        }
        $797($2_1 | 0, $9_1 | 0);
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$5 = 0;
        $145$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$4 = $15_1;
        i64toi32_i32$0 = $145$hi;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$2;
        if (($543($5_1 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
         break label$10
        }
        $546($5_1 | 0, $4_1 + 152 | 0 | 0);
        $9_1 = HEAP8[(0 + 62216 | 0) >> 0] | 0;
        label$15 : {
         label$16 : {
          if ((HEAP32[($4_1 + 156 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
           break label$16
          }
          if ((HEAP32[($4_1 + 160 | 0) >> 2] | 0) >>> 0 < 1505 >>> 0) {
           break label$15
          }
         }
         if (($9_1 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
         i64toi32_i32$5 = $4_1;
         i64toi32_i32$2 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
         $170_1 = i64toi32_i32$2;
         i64toi32_i32$2 = $4_1;
         HEAP32[($4_1 + 36 | 0) >> 2] = $170_1;
         HEAP32[($4_1 + 40 | 0) >> 2] = i64toi32_i32$4;
         $827(45560 | 0, $4_1 + 32 | 0 | 0);
         break label$10;
        }
        label$17 : {
         if (($9_1 | 0) > (2 | 0)) {
          break label$17
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$17
         }
         $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[$11_1 >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
         HEAP32[($4_1 + 92 | 0) >> 2] = $7_1;
         HEAP32[($4_1 + 88 | 0) >> 2] = $9_1;
         i64toi32_i32$4 = $15$hi;
         HEAP32[($4_1 + 84 | 0) >> 2] = $15_1;
         HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
         $827(45617 | 0, $4_1 + 80 | 0 | 0);
        }
        fimport$0(1 | 0, $4_1 + 184 | 0 | 0) | 0;
        label$18 : {
         i64toi32_i32$5 = $4_1;
         i64toi32_i32$4 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $198$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $18$hi;
         i64toi32_i32$2 = $198$hi;
         i64toi32_i32$5 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$1 = $18_1;
         i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
         i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
         i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 1e3 | 0, i64toi32_i32$5 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $201_1 = i64toi32_i32$5;
         $201$hi = i64toi32_i32$3;
         i64toi32_i32$5 = ((HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) / (1e6 | 0) | 0) + $10_1 | 0;
         i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
         $207_1 = i64toi32_i32$5;
         $207$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $201$hi;
         i64toi32_i32$2 = $201_1;
         i64toi32_i32$5 = $207$hi;
         i64toi32_i32$1 = $207_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$2 = 0;
         i64toi32_i32$1 = 3001;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$18
         }
         if (!($834(62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
         $14_1 = i64toi32_i32$3;
         $14$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
         i64toi32_i32$3 = $4_1;
         HEAP32[($4_1 + 56 | 0) >> 2] = $14_1;
         HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = $15$hi;
         HEAP32[($4_1 + 48 | 0) >> 2] = $15_1;
         $827(45686 | 0, $4_1 + 48 | 0 | 0);
         break label$10;
        }
        label$19 : {
         label$20 : {
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$0 = $14$hi;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$1 = $15_1;
          i64toi32_i32$3 = $14$hi;
          i64toi32_i32$2 = $14_1;
          if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
           $53_1 = 1
          } else {
           if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0) {
             $54_1 = 0
            } else {
             $54_1 = 1
            }
            $55_1 = $54_1;
           } else {
            $55_1 = 0
           }
           $53_1 = $55_1;
          }
          if ($53_1) {
           break label$20
          }
          $9_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          if (($9_1 | 0) != (HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0)) {
           break label$20
          }
          if ($9_1 >>> 0 < (HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0) {
           break label$20
          }
          if (HEAPU8[($0_1 + 200 | 0) >> 0] | 0) {
           break label$19
          }
         }
         label$21 : {
          i64toi32_i32$1 = $15$hi;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $15$hi;
          i64toi32_i32$2 = $15_1;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $56_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
             $57_1 = 0
            } else {
             $57_1 = 1
            }
            $58_1 = $57_1;
           } else {
            $58_1 = 0
           }
           $56_1 = $58_1;
          }
          if ($56_1) {
           break label$21
          }
          if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0)) {
           break label$21
          }
          if (HEAPU8[($0_1 + 200 | 0) >> 0] | 0) {
           break label$19
          }
          i64toi32_i32$2 = $15$hi;
          i64toi32_i32$2 = $16$hi;
          i64toi32_i32$2 = $15$hi;
          i64toi32_i32$3 = $15_1;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$0 = $16_1;
          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
           $59_1 = 1
          } else {
           if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
            if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
             $60_1 = 0
            } else {
             $60_1 = 1
            }
            $61_1 = $60_1;
           } else {
            $61_1 = 0
           }
           $59_1 = $61_1;
          }
          if ($59_1) {
           continue label$11
          }
          break label$19;
         }
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$0 = $15_1;
         i64toi32_i32$2 = $16$hi;
         i64toi32_i32$1 = $16_1;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $62_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) {
            $63_1 = 0
           } else {
            $63_1 = 1
           }
           $64_1 = $63_1;
          } else {
           $64_1 = 0
          }
          $62_1 = $64_1;
         }
         if ($62_1) {
          continue label$11
         }
        }
        break label$11;
       };
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$1 = $15_1;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $17_1;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
        $65_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0) {
          $66_1 = 0
         } else {
          $66_1 = 1
         }
         $67_1 = $66_1;
        } else {
         $67_1 = 0
        }
        $65_1 = $67_1;
       }
       if ($65_1) {
        break label$10
       }
       if (!($834(62216 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       $9_1 = HEAPU8[($0_1 + 200 | 0) >> 0] | 0;
       HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       HEAP32[($4_1 + 68 | 0) >> 2] = $9_1;
       i64toi32_i32$1 = $15$hi;
       HEAP32[($4_1 + 64 | 0) >> 2] = $15_1;
       $827(45766 | 0, $4_1 + 64 | 0 | 0);
      }
      if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$1 = $15$hi;
      HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(45836 | 0, $4_1 | 0);
     }
     $7_1 = 0;
     $233($8_1 | 0, $6_1 | 0, 0 | 0);
     $227($8_1 | 0);
     $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$6
     }
     label$22 : while (1) {
      HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 128 | 0) >> 2] | 0;
      $541($5_1 | 0, HEAPU16[($9_1 + 4 | 0) >> 1] | 0 | 0);
      $501($9_1 + 32 | 0 | 0);
      $739(HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0);
      label$23 : {
       if (!(HEAPU8[($9_1 + 84 | 0) >> 0] | 0)) {
        break label$23
       }
       $7_1 = $813(332 | 0) | 0;
       if (!$7_1) {
        break label$23
       }
       $218($7_1 | 0);
       HEAP32[($7_1 + 4 | 0) >> 2] = 2;
       HEAP32[($7_1 + 8 | 0) >> 2] = HEAPU16[($9_1 + 4 | 0) >> 1] | 0;
       HEAP32[($7_1 + 328 | 0) >> 2] = HEAP32[($9_1 + 124 | 0) >> 2] | 0;
       $215($6_1 | 0, $7_1 | 0);
       $7_1 = HEAP32[($9_1 + 104 | 0) >> 2] | 0;
       $3_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($3_1 | 0)) {
        break label$23
       }
       $320_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = $9_1 + 112 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $323_1 = i64toi32_i32$1;
       $323$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $9_1 + 96 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $326_1 = i64toi32_i32$0;
       $326$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $323$hi;
       i64toi32_i32$2 = $323_1;
       i64toi32_i32$0 = $326$hi;
       i64toi32_i32$3 = $326_1;
       i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $328$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $332$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $328$hi;
       $68_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $332$hi;
       i64toi32_i32$2 = __wasm_i64_sdiv($68_1 | 0, i64toi32_i32$4 | 0, $7_1 - $3_1 | 0 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$2;
       if ($320_1 >>> 0 >= i64toi32_i32$2 >>> 0) {
        break label$23
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $7_1;
      }
      $815($9_1 | 0);
      $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($9_1) {
       continue label$22
      }
      break label$22;
     };
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
     $7_1 = $6_1;
     break label$5;
    }
    $859(45407 | 0, 45046 | 0, 384 | 0);
    abort();
   }
   $815($6_1 | 0);
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  $534($5_1 | 0);
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  label$24 : {
   $13_1 = $4_1 + 192 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $7_1 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $862(45046 | 0, $0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  return $551($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1 >>> 0 > 187 >>> 0) {
     break label$4
    }
    $554(677 | 0, 2 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$5 : {
    $3_1 = $813(72 | 0) | 0;
    if ($3_1) {
     break label$5
    }
    $554(680 | 0, 3 | 0);
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 72 | 0, $3_1 + 4 | 0 | 0, 45024 | 0);
   label$6 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(45127 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 45180;
   $528($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 44 | 0) >> 2] = 151;
   i64toi32_i32$1 = $3_1 + 60 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 68 | 0) >> 2] = 0;
   HEAP16[($3_1 + 40 | 0) >> 1] = $1_1 + -188 | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $3_1;
  }
  label$7 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $557($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $24_1 = 0, $25$hi = 0, $27$hi = 0;
  $5_1 = 2;
  label$1 : {
   label$2 : {
    if (!($1_1 & 16 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1 + 48 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $5_1 = $754($3_1 | 0) | 0;
    $24_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $5_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $5_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $24_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    $5_1 = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   }
   return $5_1 | 0;
  }
  $859(45929 | 0, 45046 | 0, 662 | 0);
  abort();
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 2;
  label$3 : {
   if ($1_1 >>> 0 < 16 >>> 0) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(45240 | 0, $2_1 | 0);
   }
   label$5 : {
    label$6 : {
     if (!$0_1) {
      break label$6
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
      break label$5
     }
    }
    $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 269 | 0);
   }
   $3_1 = 2;
   $4_1 = $813(136 | 0) | 0;
   if (!$4_1) {
    break label$3
   }
   HEAP32[($4_1 + 124 | 0) >> 2] = 0;
   $528($4_1 | 0, $1_1 | 0);
   label$7 : {
    $1_1 = $4_1 + 32 | 0;
    if (($497(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $5_1 = $736(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
    label$8 : {
     if (!$5_1) {
      break label$8
     }
     $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     HEAP8[($4_1 + 84 | 0) >> 0] = 0;
     HEAP32[($4_1 + 80 | 0) >> 2] = 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = 152;
     HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 72 | 0) >> 2] = 153;
     HEAP32[($4_1 + 68 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
     $3_1 = 1;
     HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     break label$3;
    }
    $501($1_1 | 0);
   }
   $815($4_1 | 0);
  }
  label$9 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $559($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $40_1 = 0, $7_1 = 0, $79_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $6_1 = $0_1 + 124 | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + $4_1 | 0;
  label$3 : {
   if (!($1_1 & 16 | 0)) {
    break label$3
   }
   $546(HEAP32[((HEAP32[($0_1 + 120 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
   HEAP32[($0_1 + 104 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 112 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$4 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
    i64toi32_i32$1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    $827(45278 | 0, $5_1 | 0);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (HEAPU8[($0_1 + 84 | 0) >> 0] | 0) {
       break label$7
      }
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      break label$6;
     }
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ((HEAP32[($0_1 + 88 | 0) >> 2] | 0) >>> 0 <= $6_1 >>> 0) {
      break label$5
     }
    }
    HEAP8[($0_1 + 84 | 0) >> 0] = 1;
    HEAP32[($0_1 + 88 | 0) >> 2] = $6_1;
    i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $79_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 96 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$3;
   }
   HEAP8[((HEAP32[($0_1 + 120 | 0) >> 2] | 0) + 200 | 0) >> 0] = 1;
  }
  $6_1 = 2;
  label$8 : {
   if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == (2 | 0)) {
    break label$8
   }
   $6_1 = $499($0_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  }
  label$9 : {
   $9_1 = $5_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $560($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $33_1 = 0, $36_1 = 0, $78_1 = 0, $81_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    $6_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$4
    }
    if ((HEAP32[$6_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$3
    }
   }
   $846($6_1 | 0, 204 | 0, $6_1 | 0, 44832 | 0, 45046 | 0, 176 | 0);
  }
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $36_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  label$5 : {
   label$6 : {
    $7_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $8_1 = $740($7_1 | 0) | 0;
    if ($8_1 >>> 0 > 8192 >>> 0) {
     break label$6
    }
    $9_1 = 0;
    if (!$8_1) {
     break label$5
    }
    if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
     break label$5
    }
   }
   $9_1 = $751($7_1 | 0, 0 | 0, 0 | 0) | 0;
  }
  $766($2_1 | 0, $3_1 | 0) | 0;
  $755($7_1 | 0, $1_1 | 0, $5_1 + 48 | 0 | 0, $2_1 | 0) | 0;
  $7_1 = 4;
  label$7 : {
   if ($3_1 >>> 0 < 47 >>> 0) {
    break label$7
   }
   if (((HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 255 | 0 | 0) != (189 | 0)) {
    break label$7
   }
   $1_1 = (($3_1 + -1 | 0) >>> 0) / (46 >>> 0) | 0;
   if ((Math_imul($1_1, 46) | 1 | 0 | 0) != ($3_1 | 0)) {
    break label$7
   }
   i64toi32_i32$2 = ($5_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $78_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $78_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $81_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $81_1;
   HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = 4;
   if ((($764($5_1 + 32 | 0 | 0) | 0) & -16 | 0 | 0) != (16 | 0)) {
    break label$7
   }
   $7_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
   $2_1 = 0;
   label$8 : {
    label$9 : while (1) {
     label$10 : {
      $3_1 = $764($5_1 + 32 | 0 | 0) | 0;
      if (($3_1 + -2 | 0) >>> 0 < 2 >>> 0) {
       break label$10
      }
      if (($3_1 | 0) != (255 | 0)) {
       break label$8
      }
     }
     if (($764($5_1 + 32 | 0 | 0) | 0 | 0) != (44 | 0)) {
      break label$8
     }
     $766($5_1 + 32 | 0 | 0, 44 | 0) | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($7_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    $2_1 = $7_1;
   }
   $7_1 = ($2_1 | 0) == ($1_1 | 0) ? 3 : 4;
  }
  label$11 : {
   label$12 : {
    if (!$9_1) {
     break label$12
    }
    label$13 : {
     if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$13
     }
     if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$13
     }
     $2_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
     $3_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = $756($9_1 | 0) | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$5_1 >> 2] = $6_1;
     $827(45329 | 0, $5_1 | 0);
    }
    $2_1 = 1;
    label$14 : {
     $3_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
     if (($3_1 & 224 | 0 | 0) == (192 | 0)) {
      break label$14
     }
     $2_1 = $7_1;
     if (($3_1 & 240 | 0 | 0) != (224 | 0)) {
      break label$14
     }
     $2_1 = 0;
     $3_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$14
     }
     if (HEAP32[($3_1 + 36 | 0) >> 2] | 0) {
      break label$14
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    label$15 : {
     $2_1 = $229($6_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0, $2_1 | 0, $9_1 | 0) | 0;
     if ($2_1) {
      break label$15
     }
     HEAP32[($0_1 + 80 | 0) >> 2] = 1;
     break label$12;
    }
    HEAP32[($0_1 + 80 | 0) >> 2] = 2;
    $738(HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0);
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$11
    }
    label$16 : {
     $3_1 = $813(332 | 0) | 0;
     if (!$3_1) {
      break label$16
     }
     $3_1 = $973($3_1 | 0, $2_1 | 0, 328 | 0) | 0;
     HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $815($2_1 | 0);
     $215(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
     break label$12;
    }
    $554(246 | 0, 3 | 0);
    $815($2_1 | 0);
   }
   label$17 : {
    $11_1 = $5_1 + 64 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return;
  }
  $859(45393 | 0, 45046 | 0, 238 | 0);
  abort();
 }
 
 function $561($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (45024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 45024 | 0, 45046 | 0, 637 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(45895 | 0, 45046 | 0, 639 | 0);
   abort();
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$2;
  HEAP8[($0_1 + 22 | 0) >> 0] = 0;
 }
 
 function $562($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $9$hi = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $36_1 = 0, $36$hi = 0, $38_1 = 0, $38$hi = 0, $39$hi = 0, $43$hi = 0, $68_1 = 0, $70$hi = 0, $73$hi = 0, $94_1 = 0, $96$hi = 0, $99$hi = 0, $101_1 = 0, $104$hi = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (45024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 45024 | 0, 45046 | 0, 580 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     if (!$2_1) {
      break label$6
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     $4_1 = $770($1_1 | 0) | 0;
     HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = $2_1;
     label$8 : {
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $36_1 = i64toi32_i32$1;
      $36$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$0;
      $38$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $36$hi;
      i64toi32_i32$2 = $36_1;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$3 = $38_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
      i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      $39$hi = i64toi32_i32$5;
      $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $43$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $39$hi;
      i64toi32_i32$2 = $43$hi;
      i64toi32_i32$2 = __wasm_i64_srem(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $5_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $2_1 = i64toi32_i32$2;
      if (!i64toi32_i32$2) {
       break label$8
      }
      $2_1 = (($2_1 | 0) < (0 | 0) ? 0 : $5_1) - $2_1 | 0;
      if (($2_1 | 0) <= (0 | 0)) {
       break label$5
      }
      $766($1_1 | 0, $2_1 | 0) | 0;
      HEAP8[($0_1 + 22 | 0) >> 0] = 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$5;
     }
     $2_1 = $0_1 + 16 | 0;
     label$9 : {
      label$10 : {
       label$11 : while (1) {
        label$12 : {
         $5_1 = $530($2_1 | 0, 0 | 0, $1_1 | 0) | 0;
         if (($5_1 | 0) < (0 | 0)) {
          break label$12
         }
         $68_1 = $0_1;
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$5 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
         $70$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $73$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $70$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$5 = $73$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$1 = $68_1;
         HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$4;
         $766($1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         continue label$11;
        }
        $6_1 = 0;
        label$13 : {
         switch ($5_1 + 3 | 0 | 0) {
         case 1:
          break label$10;
         case 0:
          break label$13;
         case 2:
          break label$9;
         default:
          continue label$11;
         };
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
        label$14 : {
         if ((HEAPU8[($2_1 + 7 | 0) >> 0] | 0 | 0) == (255 | 0)) {
          break label$14
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = 0;
         HEAP8[($2_1 + 6 | 0) >> 0] = 0;
         HEAP32[($0_1 + 28 | 0) >> 2] = 0;
         if ($545($1_1 | 0, HEAPU16[($0_1 + 40 | 0) >> 1] | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
          continue label$11
         }
        }
        break label$11;
       };
       $6_1 = -3;
       break label$9;
      }
      $94_1 = $0_1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $96$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $99$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $99$hi;
      i64toi32_i32$3 = $754($1_1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$2 = $94_1;
      HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = 1;
     }
     $101_1 = $0_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = 0;
     $104$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $104$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = $101_1;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$5;
     label$15 : {
      $8_1 = $3_1 + 16 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return $6_1 | 0;
    }
    $859(45905 | 0, 45046 | 0, 581 | 0);
    abort();
   }
   $859(45912 | 0, 45046 | 0, 582 | 0);
   abort();
  }
  $859(45922 | 0, 45046 | 0, 595 | 0);
  abort();
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(1200 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = 0;
    if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 1200;
    $827(46040 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0);
   $4_1 = 0;
   HEAP32[($3_1 + 156 | 0) >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   HEAP32[($3_1 + 168 | 0) >> 2] = 0;
   HEAP32[($3_1 + 1196 | 0) >> 2] = $1_1 + 188 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   $531($2_1 + 16 | 0 | 0);
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   $0_1 = $536($0_1 | 0, $2_1 + 16 | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    label$6 : {
     if (($570($3_1 | 0, $3_1 + 16 | 0 | 0, 0 | 0, 163 | 0) | 0 | 0) < (0 | 0)) {
      break label$6
     }
     $4_1 = $3_1;
     break label$3;
    }
    $537(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   }
   $815($3_1 | 0);
  }
  label$7 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 1200 | 0, $0_1 | 0, 45952 | 0, 46162 | 0, 870 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(47373 | 0, 46162 | 0, 871 | 0);
   abort();
  }
  $524($0_1 + 64 | 0 | 0);
  $541(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAPU16[($0_1 + 20 | 0) >> 1] | 0 | 0);
  $537(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 1200 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $567($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $10$hi = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $11$hi = 0, $9_1 = 0, $8_1 = 0, $44_1 = 0, $50_1 = 0, $52$hi = 0, $74_1 = 0, $84$hi = 0, $125_1 = 0, $156_1 = 0, $156$hi = 0, $159_1 = 0, $159$hi = 0, $161$hi = 0, $165$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 112 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 1200 | 0, $0_1 | 0, 45952 | 0, 46162 | 0, 892 | 0);
  }
  label$5 : {
   label$6 : {
    if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
     break label$6
    }
    HEAP8[($0_1 + 152 | 0) >> 0] = 0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 160 | 0) >> 2] = 0;
    HEAP32[($0_1 + 164 | 0) >> 2] = i64toi32_i32$0;
    HEAP16[($0_1 + 154 | 0) >> 1] = 0;
    HEAP8[($0_1 + 48 | 0) >> 0] = 0;
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$7 : while (1) {
     label$8 : {
      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 72 | 0) >> 2] = 8192;
      HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
      $44_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      HEAP32[($44_1 + 68 | 0) >> 2] = i64toi32_i32$4;
      $827(47393 | 0, $4_1 + 64 | 0 | 0);
     }
     label$9 : {
      $50_1 = $1_1;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $52$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = $52$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = $50($50_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 108 | 0 | 0) | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = $756($6_1 | 0) | 0;
      label$10 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11$hi = i64toi32_i32$1;
       HEAP32[($4_1 + 60 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 56 | 0) >> 2] = $7_1;
       HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
       $74_1 = $4_1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       HEAP32[($74_1 + 52 | 0) >> 2] = i64toi32_i32$5;
       $827(47437 | 0, $4_1 + 48 | 0 | 0);
      }
      $797($2_1 | 0, $6_1 | 0);
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = 0;
      $84$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$2 = $84$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $10_1 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$5;
      if (($543($5_1 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
       break label$9
      }
      label$11 : {
       label$12 : {
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8388608;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$12
        }
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 6291456;
        if (!((i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) & !(HEAPU8[($0_1 + 48 | 0) >> 0] | 0) | 0)) {
         break label$11
        }
       }
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
       $827(47484 | 0, $4_1 + 16 | 0 | 0);
       break label$9;
      }
      $546($5_1 | 0, $4_1 + 80 | 0 | 0);
      label$13 : {
       label$14 : {
        if ((HEAP32[($4_1 + 84 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
         break label$14
        }
        if ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) >>> 0 < 1505 >>> 0) {
         break label$13
        }
       }
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
       $125_1 = i64toi32_i32$3;
       i64toi32_i32$3 = i64toi32_i32$1;
       HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = $125_1;
       HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
       $827(47533 | 0, i64toi32_i32$1 + 32 | 0 | 0);
       break label$9;
      }
      if (!(HEAPU8[($0_1 + 152 | 0) >> 0] | 0)) {
       continue label$7
      }
     }
     break label$7;
    };
    $3_1 = 0;
    label$15 : {
     if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$15
     }
     if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$15
     }
     i64toi32_i32$0 = $10$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $10_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(47590 | 0, $4_1 | 0);
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 152 | 0) >> 0] | 0)) {
      break label$16
     }
     $3_1 = 0;
     $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$16
     }
     label$17 : while (1) {
      label$18 : {
       $7_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
       $2_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($2_1 | 0)) {
        break label$18
       }
       i64toi32_i32$1 = $6_1 + 64 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $156_1 = i64toi32_i32$0;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$1 = $6_1 + 48 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $159_1 = i64toi32_i32$3;
       $159$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $156$hi;
       i64toi32_i32$1 = $156_1;
       i64toi32_i32$3 = $159$hi;
       i64toi32_i32$5 = $159_1;
       i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $161$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $165$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $161$hi;
       $31_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $165$hi;
       i64toi32_i32$1 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$4 | 0, $7_1 - $2_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$1;
       $3_1 = $3_1 >>> 0 < i64toi32_i32$1 >>> 0 ? i64toi32_i32$1 : $3_1;
      }
      $6_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      if ($6_1) {
       continue label$17
      }
      break label$17;
     };
    }
    $7_1 = 0;
    $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
    $2_1 = ($6_1 | 0) != (0 | 0);
    label$19 : {
     if (!(HEAP32[($0_1 + 160 | 0) >> 2] | 0)) {
      break label$19
     }
     label$20 : while (1) {
      if (!($2_1 & 1 | 0)) {
       break label$5
      }
      $2_1 = Math_imul($7_1, 136);
      $524(($6_1 + $2_1 | 0) + 48 | 0 | 0);
      label$21 : {
       $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
       $2_1 = $6_1 + $2_1 | 0;
       if (!(HEAP32[($2_1 + 36 | 0) >> 2] | 0)) {
        break label$21
       }
       $541($5_1 | 0, HEAPU16[($2_1 + 4 | 0) >> 1] | 0 | 0);
       $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
      }
      $2_1 = ($6_1 | 0) != (0 | 0);
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < (HEAP32[($0_1 + 160 | 0) >> 2] | 0) >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$22 : {
     if (!$2_1) {
      break label$22
     }
     $815($6_1 | 0);
     HEAP32[($0_1 + 156 | 0) >> 2] = 0;
    }
    $523($0_1 + 64 | 0 | 0);
    label$23 : {
     label$24 : while (1) {
      $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$23
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      $815($6_1 | 0);
      continue label$24;
     };
    }
    $534($5_1 | 0);
    $538($5_1 | 0, $0_1 + 16 | 0 | 0);
    label$25 : {
     $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$25
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 1196 | 0) >> 2] | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    }
    label$26 : {
     $9_1 = $4_1 + 112 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $6_1 | 0;
   }
   $859(47373 | 0, 46162 | 0, 894 | 0);
   abort();
  }
  $859(47638 | 0, 46162 | 0, 948 | 0);
  abort();
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $11_1 = 0, $13_1 = 0, $12_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0, 46162 | 0, 726 | 0);
  }
  HEAP16[($3_1 + 154 | 0) >> 1] = (HEAPU16[($3_1 + 154 | 0) >> 1] | 0) + 1 | 0;
  HEAP8[($0_1 + 33 | 0) >> 0] = (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) + 1 | 0;
  label$5 : {
   if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
    break label$5
   }
   $4_1 = $572($3_1 | 0, $1_1 | 0) | 0;
   label$6 : {
    if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 100 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 96 | 0) >> 2] = $3_1;
    $827(46247 | 0, $2_1 + 96 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     label$9 : {
      $5_1 = $3_1 + 172 | 0;
      if (!($709($5_1 | 0, $4_1 | 0) | 0)) {
       break label$9
      }
      HEAP8[($0_1 + 32 | 0) >> 0] = 1;
      $6_1 = $711($5_1 | 0) | 0;
      label$10 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 84 | 0) >> 2] = $6_1;
       HEAP32[($2_1 + 80 | 0) >> 2] = $3_1;
       $827(46292 | 0, $2_1 + 80 | 0 | 0);
      }
      label$11 : {
       $0_1 = Math_imul($6_1, 136);
       $7_1 = $813($0_1 | 0) | 0;
       if ($7_1) {
        break label$11
       }
       if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
       HEAP32[$2_1 >> 2] = $3_1;
       $827(46334 | 0, $2_1 | 0);
       break label$7;
      }
      $0_1 = $813(44 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$12 : {
       if ($0_1) {
        break label$12
       }
       if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[($2_1 + 20 | 0) >> 2] = 44;
       HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
       $827(46334 | 0, $2_1 + 16 | 0 | 0);
       break label$8;
      }
      $214($0_1 | 0, 4 | 0);
      if (!$6_1) {
       break label$8
      }
      $8_1 = 0;
      $9_1 = 0;
      label$13 : {
       label$14 : while (1) {
        if ($710($5_1 | 0, $4_1 | 0, $8_1 | 0, $2_1 + 104 | 0 | 0) | 0) {
         break label$13
        }
        label$15 : {
         label$16 : {
          $10_1 = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          if ($10_1) {
           break label$16
          }
          if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
          HEAP32[($2_1 + 36 | 0) >> 2] = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          $827(46386 | 0, $2_1 + 32 | 0 | 0);
          break label$15;
         }
         label$17 : {
          label$18 : {
           label$19 : {
            if (!(HEAPU16[($2_1 + 104 | 0) >> 1] | 0)) {
             break label$19
            }
            $0_1 = 0;
            label$20 : {
             if (!$9_1) {
              break label$20
             }
             label$21 : while (1) {
              $11_1 = $7_1 + Math_imul($0_1, 136) | 0;
              if (($10_1 | 0) == (HEAPU16[($11_1 + 4 | 0) >> 1] | 0 | 0)) {
               break label$18
              }
              $0_1 = $0_1 + 1 | 0;
              if (($0_1 | 0) != ($9_1 | 0)) {
               continue label$21
              }
              break label$21;
             };
            }
            if (($570($3_1 | 0, $7_1 + Math_imul($9_1, 136) | 0 | 0, $10_1 | 0, 164 | 0) | 0 | 0) >= (0 | 0)) {
             break label$17
            }
            break label$13;
           }
           if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $827(46440 | 0, 0 | 0);
           break label$15;
          }
          label$22 : {
           if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) >= (3 | 0)) {
            break label$22
           }
           if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$22
           }
           HEAP32[($2_1 + 68 | 0) >> 2] = HEAPU16[($11_1 + 4 | 0) >> 1] | 0;
           HEAP32[($2_1 + 64 | 0) >> 2] = $3_1;
           $827(46499 | 0, $2_1 + 64 | 0 | 0);
          }
          if (($574($3_1 | 0, $7_1 + Math_imul($9_1, 136) | 0 | 0, $11_1 | 0) | 0 | 0) < (0 | 0)) {
           break label$13
          }
         }
         $0_1 = $7_1 + Math_imul($9_1, 136) | 0;
         HEAP8[($0_1 + 93 | 0) >> 0] = 2;
         HEAP8[($0_1 + 77 | 0) >> 0] = 0;
         HEAP8[($0_1 + 80 | 0) >> 0] = 0;
         $10_1 = HEAPU8[($2_1 + 105 | 0) >> 0] | 0;
         HEAP8[($0_1 + 81 | 0) >> 0] = 0;
         HEAP8[($0_1 + 96 | 0) >> 0] = $10_1;
         HEAP8[($0_1 + 97 | 0) >> 0] = HEAPU8[($2_1 + 104 | 0) >> 0] | 0;
         HEAP16[($0_1 + 34 | 0) >> 1] = HEAPU16[($2_1 + 104 | 0) >> 1] | 0;
         label$23 : {
          if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$23
          }
          if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$23
          }
          HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
          HEAP32[($2_1 + 52 | 0) >> 2] = $9_1;
          HEAP32[($2_1 + 56 | 0) >> 2] = HEAPU16[($2_1 + 104 | 0) >> 1] | 0;
          HEAP32[($2_1 + 60 | 0) >> 2] = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          $827(46558 | 0, $2_1 + 48 | 0 | 0);
         }
         $9_1 = $9_1 + 1 | 0;
        }
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) != ($6_1 | 0)) {
         continue label$14
        }
        break label$14;
       };
      }
      if (!$9_1) {
       break label$8
      }
      HEAP32[($3_1 + 156 | 0) >> 2] = $7_1;
      HEAP32[($3_1 + 160 | 0) >> 2] = $9_1;
      break label$5;
     }
     $800($1_1 | 0, 46611 | 0);
     break label$5;
    }
    $815($7_1 | 0);
   }
   HEAP8[($3_1 + 152 | 0) >> 0] = 1;
  }
  $735($1_1 | 0);
  label$24 : {
   $13_1 = $2_1 + 112 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
 }
 
 function $570($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $528($1_1 | 0, $2_1 | 0);
  label$1 : {
   $2_1 = $525(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 + 48 | 0 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = 165;
   HEAP32[($1_1 + 44 | 0) >> 2] = $0_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = 0;
   HEAP16[($1_1 + 32 | 0) >> 1] = 0;
   HEAP32[($1_1 + 132 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 128 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = $1_1;
   $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $571($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0, $42_1 = 0, $45_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(46111 | 0, $5_1 | 0);
  }
  label$4 : {
   label$5 : {
    $0_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if ($0_1) {
     break label$5
    }
    $6_1 = 1;
    break label$4;
   }
   label$6 : while (1) {
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $42_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $42_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $45_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = $527($0_1 + 48 | 0 | 0, $1_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0, $4_1 | 0) | 0;
    $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $766($3_1 | 0, $4_1 | 0) | 0;
  label$7 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $762($2_1 | 0, $1_1 | 0);
  $0_1 = $768($2_1 | 0, $0_1 + 172 | 0 | 0, 1021 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 | 0;
 }
 
 function $573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $45_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0, 46162 | 0, 699 | 0);
  }
  HEAP8[($0_1 + 33 | 0) >> 0] = (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) + 1 | 0;
  label$5 : {
   label$6 : {
    if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
     break label$6
    }
    $4_1 = $572($3_1 | 0, $1_1 | 0) | 0;
    label$7 : {
     if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $5_1 = HEAPU16[($0_1 + 34 | 0) >> 1] | 0;
     $6_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
     $45_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 32 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $45_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     $827(46623 | 0, $2_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!($712($3_1 + 172 | 0 | 0, $4_1 | 0) | 0)) {
      break label$8
     }
     HEAP8[($0_1 + 32 | 0) >> 0] = 1;
     if ((HEAP32[($3_1 + 160 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($3_1 + 164 | 0) >> 2] | 0) >>> 0) {
      break label$5
     }
     $575($3_1 | 0, $4_1 | 0, HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0);
     $0_1 = (HEAP32[($3_1 + 164 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 164 | 0) >> 2] = $0_1;
     if (($0_1 | 0) != (HEAP32[($3_1 + 160 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     label$9 : {
      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = $3_1;
      $827(46741 | 0, $2_1 | 0);
     }
     HEAP8[($3_1 + 152 | 0) >> 0] = 1;
     break label$6;
    }
    $800($1_1 | 0, 46791 | 0);
   }
   $735($1_1 | 0);
   label$10 : {
    $8_1 = $2_1 + 48 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return;
  }
  $859(46702 | 0, 46162 | 0, 706 | 0);
  abort();
 }
 
 function $574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $528($1_1 | 0, HEAPU16[($2_1 + 4 | 0) >> 1] | 0 | 0);
  label$1 : {
   $3_1 = $525(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 + 48 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = 165;
   HEAP32[($1_1 + 44 | 0) >> 2] = $0_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 0;
   HEAP16[($1_1 + 32 | 0) >> 1] = 0;
   HEAP32[($1_1 + 132 | 0) >> 2] = 164;
   HEAP32[($1_1 + 128 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
  }
  return $3_1 | 0;
 }
 
 function $575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $21_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0, $7_1 = 0, $17_1 = 0, $12_1 = 0, $4_1 = 0, $11_1 = 0, $14_1 = 0, $20_1 = 0, $18_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $23_1 = 0, $22_1 = 0, $540_1 = 0, $633_1 = 0;
  label$1 : {
   $3_1 = global$0 - 352 | 0;
   $22_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
        break label$7
       }
       $4_1 = $0_1 + 172 | 0;
       $720($4_1 | 0, $3_1 + 336 | 0 | 0);
       label$8 : {
        $5_1 = $813(436 | 0) | 0;
        if ($5_1) {
         break label$8
        }
        if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 436;
        HEAP32[$3_1 >> 2] = $0_1;
        $827(46817 | 0, $3_1 | 0);
        break label$4;
       }
       $822($5_1 | 0, 0 | 0, 436 | 0) | 0;
       $218($5_1 | 0);
       HEAP32[($5_1 + 328 | 0) >> 2] = 5;
       HEAP32[($5_1 + 432 | 0) >> 2] = 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       $6_1 = $713($4_1 | 0, $1_1 | 0) | 0;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$0 = 0;
       HEAP32[($5_1 + 332 | 0) >> 2] = 0;
       HEAP32[($5_1 + 336 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 4 | 0) >> 2] = 2;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 324 | 0) >> 2] = $2_1;
       $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
       label$9 : {
        $5_1 = $813(436 | 0) | 0;
        if ($5_1) {
         break label$9
        }
        if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = 436;
        HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
        $827(46869 | 0, $3_1 + 16 | 0 | 0);
        break label$4;
       }
       $822($5_1 | 0, 0 | 0, 436 | 0) | 0;
       $218($5_1 | 0);
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = 4;
       HEAP32[($5_1 + 432 | 0) >> 2] = 0;
       $7_1 = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       HEAP32[($5_1 + 328 | 0) >> 2] = 3;
       HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
       $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
       $5_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$6
       }
       label$10 : while (1) {
        if (($6_1 | 0) == (HEAPU16[($5_1 + 4 | 0) >> 1] | 0 | 0)) {
         break label$5
        }
        $5_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$6
        }
        continue label$10;
       };
      }
      $859(46803 | 0, 46162 | 0, 226 | 0);
      abort();
     }
     $5_1 = $813(80 | 0) | 0;
     if (!$5_1) {
      break label$4
     }
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($5_1 + 56 | 0) >> 2] = 0;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 48 | 0) >> 2] = 0;
     HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($5_1 + 40 | 0) >> 2] = 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
     $528($5_1 | 0, $6_1 | 0);
     HEAP32[($5_1 + 28 | 0) >> 2] = 166;
     HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $5_1;
     $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0);
    }
    $8_1 = $715($4_1 | 0, $1_1 | 0) | 0;
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $3_1 + 232 | 0 | 2 | 0;
    $10_1 = $3_1 + 320 | 0 | 1 | 0;
    $11_1 = 0;
    label$11 : while (1) {
     $822($3_1 + 208 | 0 | 0, 0 | 0, 16 | 0) | 0;
     $822($3_1 + 320 | 0 | 0, 0 | 0, 8 | 0) | 0;
     $822($3_1 + 232 | 0 | 0, 0 | 0, 6 | 0) | 0;
     $822($3_1 + 318 | 0 | 0, 0 | 0, 2 | 0) | 0;
     $822($3_1 + 240 | 0 | 0, 0 | 0, 72 | 0) | 0;
     HEAP8[($3_1 + 232 | 0) >> 0] = 0;
     HEAP8[($3_1 + 320 | 0) >> 0] = 0;
     label$12 : {
      label$13 : {
       if (!($716($4_1 | 0, $1_1 | 0, $11_1 | 0, $3_1 + 328 | 0 | 0) | 0)) {
        break label$13
       }
       if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($3_1 + 192 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 196 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       HEAP32[($3_1 + 200 | 0) >> 2] = $11_1;
       $827(46938 | 0, $3_1 + 192 | 0 | 0);
       break label$12;
      }
      label$14 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($3_1 + 176 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
       HEAP32[($3_1 + 180 | 0) >> 2] = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
       $827(47006 | 0, $3_1 + 176 | 0 | 0);
      }
      $12_1 = 0;
      $13_1 = 0;
      label$15 : {
       label$16 : {
        label$17 : {
         label$18 : {
          label$19 : {
           label$20 : {
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                label$25 : {
                 label$26 : {
                  label$27 : {
                   label$28 : {
                    label$29 : {
                     label$30 : {
                      label$31 : {
                       label$32 : {
                        label$33 : {
                         label$34 : {
                          label$35 : {
                           label$36 : {
                            label$37 : {
                             label$38 : {
                              label$39 : {
                               label$40 : {
                                label$41 : {
                                 label$42 : {
                                  label$43 : {
                                   label$44 : {
                                    $5_1 = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
                                    if (($5_1 | 0) > (65 | 0)) {
                                     break label$44
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    label$45 : {
                                     switch ($5_1 + -1 | 0 | 0) {
                                     case 4:
                                     case 6:
                                     case 7:
                                     case 8:
                                     case 9:
                                     case 10:
                                     case 11:
                                     case 12:
                                     case 13:
                                      break label$15;
                                     case 0:
                                      break label$19;
                                     case 1:
                                      break label$20;
                                     case 15:
                                      break label$21;
                                     case 2:
                                     case 3:
                                      break label$29;
                                     case 14:
                                      break label$30;
                                     case 16:
                                      break label$31;
                                     case 5:
                                      break label$43;
                                     default:
                                      break label$45;
                                     };
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    switch ($5_1 + -31 | 0 | 0) {
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 6:
                                    case 7:
                                     break label$15;
                                    case 0:
                                     break label$23;
                                    case 1:
                                     break label$24;
                                    case 5:
                                    case 8:
                                     break label$26;
                                    default:
                                     break label$22;
                                    };
                                   }
                                   label$46 : {
                                    if (($5_1 | 0) > (217 | 0)) {
                                     break label$46
                                    }
                                    label$47 : {
                                     switch ($5_1 + -128 | 0 | 0) {
                                     case 1:
                                      break label$32;
                                     case 2:
                                      break label$33;
                                     case 4:
                                      break label$35;
                                     case 6:
                                      break label$36;
                                     case 3:
                                      break label$37;
                                     case 5:
                                     case 8:
                                      break label$38;
                                     case 7:
                                      break label$39;
                                     case 0:
                                      break label$42;
                                     default:
                                      break label$47;
                                     };
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    switch ($5_1 + -66 | 0 | 0) {
                                    case 0:
                                     break label$25;
                                    case 1:
                                     break label$40;
                                    default:
                                     break label$15;
                                    };
                                   }
                                   if (($5_1 | 0) == (218 | 0)) {
                                    break label$41
                                   }
                                   $14_1 = 0;
                                   $15_1 = 0;
                                   $16_1 = 0;
                                   if (($5_1 | 0) != (234 | 0)) {
                                    break label$15
                                   }
                                   $13_1 = 0;
                                   $5_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
                                   if (!$5_1) {
                                    break label$17
                                   }
                                   $15_1 = 0;
                                   $6_1 = 0;
                                   label$48 : while (1) {
                                    label$49 : {
                                     if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (5 | 0)) {
                                      break label$49
                                     }
                                     $7_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 5 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
                                     if (($7_1 << 24 | 0 | (($7_1 << 8 | 0) & 16711680 | 0) | 0 | (($7_1 >>> 8 | 0) & 65280 | 0 | ($7_1 >>> 24 | 0) | 0) | 0 | 0) != (1447243057 | 0)) {
                                      break label$49
                                     }
                                     if ((HEAPU8[($5_1 + 6 | 0) >> 0] | 0 | 0) != (1 | 0)) {
                                      break label$49
                                     }
                                     $15_1 = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) >>> 0 > 143 >>> 0 ? 234 : 235;
                                    }
                                    $13_1 = 0;
                                    $14_1 = 0;
                                    $16_1 = 0;
                                    $12_1 = 0;
                                    $6_1 = $6_1 + 1 | 0;
                                    $5_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $6_1 | 0) | 0;
                                    if ($5_1) {
                                     continue label$48
                                    }
                                    break label$15;
                                   };
                                  }
                                  $13_1 = 0;
                                  $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
                                  if (!$6_1) {
                                   break label$17
                                  }
                                  $12_1 = 0;
                                  $16_1 = 0;
                                  $15_1 = 0;
                                  $7_1 = 0;
                                  label$50 : while (1) {
                                   $17_1 = $15_1;
                                   label$51 : {
                                    if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                     break label$51
                                    }
                                    if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                     break label$51
                                    }
                                    $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                    HEAP32[($3_1 + 160 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
                                    HEAP32[($3_1 + 164 | 0) >> 2] = $5_1;
                                    $827(47035 | 0, $3_1 + 160 | 0 | 0);
                                   }
                                   label$52 : {
                                    label$53 : {
                                     label$54 : {
                                      label$55 : {
                                       label$56 : {
                                        label$57 : {
                                         label$58 : {
                                          label$59 : {
                                           label$60 : {
                                            label$61 : {
                                             label$62 : {
                                              label$63 : {
                                               label$64 : {
                                                label$65 : {
                                                 label$66 : {
                                                  label$67 : {
                                                   label$68 : {
                                                    label$69 : {
                                                     label$70 : {
                                                      label$71 : {
                                                       $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                                       if (($5_1 | 0) > (85 | 0)) {
                                                        break label$71
                                                       }
                                                       label$72 : {
                                                        if (($5_1 | 0) > (39 | 0)) {
                                                         break label$72
                                                        }
                                                        label$73 : {
                                                         switch ($5_1 + -2 | 0 | 0) {
                                                         case 1:
                                                          break label$65;
                                                         case 0:
                                                          break label$70;
                                                         default:
                                                          break label$73;
                                                         };
                                                        }
                                                        $15_1 = 16;
                                                        switch ($5_1 + -27 | 0 | 0) {
                                                        case 0:
                                                         break label$52;
                                                        case 1:
                                                         break label$63;
                                                        default:
                                                         break label$55;
                                                        };
                                                       }
                                                       switch ($5_1 + -40 | 0 | 0) {
                                                       case 1:
                                                       case 2:
                                                       case 4:
                                                       case 5:
                                                       case 6:
                                                       case 7:
                                                        break label$55;
                                                       case 3:
                                                        break label$64;
                                                       case 9:
                                                        break label$66;
                                                       case 8:
                                                        break label$67;
                                                       case 0:
                                                        break label$69;
                                                       default:
                                                        break label$68;
                                                       };
                                                      }
                                                      label$74 : {
                                                       if (($5_1 | 0) > (121 | 0)) {
                                                        break label$74
                                                       }
                                                       switch ($5_1 + -86 | 0 | 0) {
                                                       case 1:
                                                       case 2:
                                                        break label$55;
                                                       case 3:
                                                        break label$57;
                                                       case 0:
                                                        break label$58;
                                                       default:
                                                        break label$62;
                                                       };
                                                      }
                                                      switch ($5_1 + -122 | 0 | 0) {
                                                      case 3:
                                                      case 4:
                                                       break label$55;
                                                      case 5:
                                                       break label$56;
                                                      case 1:
                                                       break label$60;
                                                      case 0:
                                                       break label$61;
                                                      case 2:
                                                       break label$63;
                                                      default:
                                                       break label$59;
                                                      };
                                                     }
                                                     $15_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) & 4 | 0 ? 1 : 2;
                                                     break label$52;
                                                    }
                                                    $15_1 = 27;
                                                    break label$52;
                                                   }
                                                   if (($5_1 | 0) != (63 | 0)) {
                                                    break label$55
                                                   }
                                                   $15_1 = 66;
                                                   break label$52;
                                                  }
                                                  $15_1 = 31;
                                                  break label$52;
                                                 }
                                                 $15_1 = 32;
                                                 break label$52;
                                                }
                                                $16_1 = 3;
                                                break label$54;
                                               }
                                               $16_1 = 15;
                                               break label$54;
                                              }
                                              $16_1 = 17;
                                              break label$54;
                                             }
                                             if (($5_1 | 0) != (106 | 0)) {
                                              break label$55
                                             }
                                             $16_1 = 129;
                                             break label$54;
                                            }
                                            $16_1 = 6;
                                            break label$54;
                                           }
                                           $16_1 = 130;
                                           break label$54;
                                          }
                                          if (($5_1 | 0) != (160 | 0)) {
                                           break label$55
                                          }
                                          $16_1 = 218;
                                          break label$54;
                                         }
                                         $13_1 = 2;
                                         break label$53;
                                        }
                                        $823($10_1 | 0, $6_1 + 2 | 0 | 0, 3 | 0) | 0;
                                        $13_1 = 1;
                                        HEAP8[($3_1 + 320 | 0) >> 0] = 1;
                                        HEAP8[($3_1 + 325 | 0) >> 0] = HEAPU8[($6_1 + 5 | 0) >> 0] | 0;
                                        HEAP8[($3_1 + 326 | 0) >> 0] = HEAPU8[($6_1 + 7 | 0) >> 0] | 0;
                                        HEAP8[($3_1 + 327 | 0) >> 0] = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
                                        if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                         break label$53
                                        }
                                        if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                         break label$53
                                        }
                                        HEAP32[($3_1 + 128 | 0) >> 2] = $10_1;
                                        HEAP32[($3_1 + 132 | 0) >> 2] = HEAPU8[($3_1 + 325 | 0) >> 0] | 0;
                                        HEAP32[($3_1 + 136 | 0) >> 2] = HEAPU8[($3_1 + 326 | 0) >> 0] | 0;
                                        HEAP32[($3_1 + 140 | 0) >> 2] = HEAPU8[($3_1 + 327 | 0) >> 0] | 0;
                                        $827(47072 | 0, $3_1 + 128 | 0 | 0);
                                        break label$53;
                                       }
                                       label$75 : {
                                        if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                         break label$75
                                        }
                                        if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                         break label$75
                                        }
                                        $5_1 = HEAPU8[($6_1 + 2 | 0) >> 0] | 0;
                                        $18_1 = HEAPU8[$6_1 >> 0] | 0;
                                        HEAP32[($3_1 + 144 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
                                        HEAP32[($3_1 + 148 | 0) >> 2] = $18_1;
                                        HEAP32[($3_1 + 152 | 0) >> 2] = $5_1;
                                        $827(47145 | 0, $3_1 + 144 | 0 | 0);
                                       }
                                       $16_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0 | 0) == (21 | 0) ? 156 : $16_1;
                                       break label$54;
                                      }
                                      label$76 : {
                                       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                        break label$76
                                       }
                                       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                        break label$76
                                       }
                                       HEAP32[($3_1 + 112 | 0) >> 2] = HEAPU8[$6_1 >> 0] | 0;
                                       $827(47196 | 0, $3_1 + 112 | 0 | 0);
                                      }
                                      if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) >>> 0 < 4 >>> 0) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0 | 0) != (72 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 4 | 0) >> 0] | 0 | 0) != (86 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 5 | 0) >> 0] | 0 | 0) != (67 | 0)) {
                                       break label$54
                                      }
                                      $15_1 = 33;
                                      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                       break label$52
                                      }
                                      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                       break label$52
                                      }
                                      $827(47218 | 0, 0 | 0);
                                      break label$52;
                                     }
                                     $15_1 = $17_1;
                                     break label$52;
                                    }
                                    $15_1 = $17_1;
                                    $12_1 = $6_1;
                                   }
                                   $14_1 = 0;
                                   $7_1 = $7_1 + 1 | 0;
                                   $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $7_1 | 0) | 0;
                                   if ($6_1) {
                                    continue label$50
                                   }
                                   break label$15;
                                  };
                                 }
                                 $13_1 = 0;
                                 $5_1 = $577($0_1 | 0, $1_1 | 0) | 0;
                                 $16_1 = $5_1 ? 135 : 0;
                                 $15_1 = $5_1 ? 0 : 2;
                                 $14_1 = 0;
                                 $12_1 = 0;
                                 break label$15;
                                }
                                $13_1 = 0;
                                $16_1 = 218;
                                break label$28;
                               }
                               $13_1 = 0;
                               $16_1 = 67;
                               break label$28;
                              }
                              $13_1 = 0;
                              $16_1 = 6;
                              break label$28;
                             }
                             $13_1 = 0;
                             $16_1 = 131;
                             break label$28;
                            }
                            label$77 : {
                             if ($577($0_1 | 0, $1_1 | 0) | 0) {
                              break label$77
                             }
                             $13_1 = 0;
                             $16_1 = 140;
                             break label$28;
                            }
                            $16_1 = 149;
                            HEAP32[($3_1 + 220 | 0) >> 2] = 149;
                            HEAP8[($3_1 + 208 | 0) >> 0] = 118;
                            break label$34;
                           }
                           $13_1 = 0;
                           $16_1 = $577($0_1 | 0, $1_1 | 0) | 0 ? 131 : 0;
                           break label$28;
                          }
                          $16_1 = 6;
                          HEAP32[($3_1 + 220 | 0) >> 2] = 6;
                          HEAP8[($3_1 + 208 | 0) >> 0] = 113;
                         }
                         HEAP32[($3_1 + 212 | 0) >> 2] = 129;
                         HEAP8[($3_1 + 216 | 0) >> 0] = 114;
                         $13_1 = 0;
                         $14_1 = 1;
                         break label$27;
                        }
                        $13_1 = 0;
                        $16_1 = 130;
                        break label$28;
                       }
                       $13_1 = 0;
                       $16_1 = 129;
                       break label$28;
                      }
                      $13_1 = 0;
                      $16_1 = 17;
                      break label$28;
                     }
                     $13_1 = 0;
                     $16_1 = 15;
                     break label$28;
                    }
                    $13_1 = 0;
                    $16_1 = 3;
                   }
                   $14_1 = 0;
                  }
                  $15_1 = 0;
                  $12_1 = 0;
                  break label$15;
                 }
                 $13_1 = 0;
                 $15_1 = 33;
                 break label$18;
                }
                $13_1 = 0;
                $15_1 = 66;
                break label$18;
               }
               $13_1 = 0;
               $15_1 = 32;
               break label$18;
              }
              $13_1 = 0;
              $15_1 = 31;
              break label$18;
             }
             $14_1 = 0;
             $15_1 = 0;
             $16_1 = 0;
             if (($5_1 | 0) != (27 | 0)) {
              break label$15
             }
             $13_1 = 0;
             $15_1 = 27;
             break label$18;
            }
            $13_1 = 0;
            $15_1 = 16;
            break label$18;
           }
           $13_1 = 0;
           $15_1 = 2;
           break label$18;
          }
          $13_1 = 0;
          $15_1 = 1;
         }
         $14_1 = 0;
         break label$16;
        }
        $14_1 = 0;
        $15_1 = 0;
       }
       $16_1 = 0;
       $12_1 = 0;
      }
      $19_1 = 0;
      label$78 : while (1) {
       label$79 : {
        label$80 : {
         label$81 : {
          $20_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $19_1 | 0) | 0;
          if (!$20_1) {
           break label$81
          }
          label$82 : {
           $5_1 = HEAPU8[$20_1 >> 0] | 0;
           if (($5_1 | 0) == (134 | 0)) {
            break label$82
           }
           label$83 : {
            if (($5_1 | 0) == (129 | 0)) {
             break label$83
            }
            if (($5_1 | 0) != (10 | 0)) {
             break label$79
            }
            HEAP8[($3_1 + 232 | 0) >> 0] = 1;
            HEAP8[($3_1 + 233 | 0) >> 0] = HEAPU8[($20_1 + 5 | 0) >> 0] | 0;
            $823($9_1 | 0, $20_1 + 2 | 0 | 0, 3 | 0) | 0;
            HEAP8[($3_1 + 232 | 0) >> 0] = 1;
            HEAP8[($3_1 + 237 | 0) >> 0] = 0;
            if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$80
            }
            if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$80
            }
            HEAP32[($3_1 + 96 | 0) >> 2] = $9_1;
            HEAP32[($3_1 + 100 | 0) >> 2] = HEAPU8[($3_1 + 233 | 0) >> 0] | 0;
            $827(47230 | 0, $3_1 + 96 | 0 | 0);
            break label$80;
           }
           HEAP8[($3_1 + 318 | 0) >> 0] = 1;
           HEAP8[($3_1 + 319 | 0) >> 0] = (HEAPU8[($20_1 + 4 | 0) >> 0] | 0) >>> 5 | 0;
           break label$79;
          }
          HEAP8[($3_1 + 240 | 0) >> 0] = 1;
          $5_1 = (HEAPU8[($20_1 + 2 | 0) >> 0] | 0) & 31 | 0;
          $5_1 = $5_1 >>> 0 < 8 >>> 0 ? $5_1 : 8;
          HEAP32[($3_1 + 244 | 0) >> 2] = $5_1;
          $6_1 = 0;
          label$84 : {
           if ($5_1) {
            break label$84
           }
           $13_1 = 6;
           break label$79;
          }
          label$85 : while (1) {
           $13_1 = 6;
           $5_1 = ($3_1 + 240 | 0) + ($6_1 << 3 | 0) | 0;
           $7_1 = Math_imul($6_1, 6) + $20_1 | 0;
           $823($5_1 + 8 | 0 | 0, $7_1 + 3 | 0 | 0, 3 | 0) | 0;
           HEAP8[($5_1 + 11 | 0) >> 0] = 0;
           $17_1 = $7_1 + 6 | 0;
           $18_1 = HEAPU8[$17_1 >> 0] | 0;
           HEAP8[($5_1 + 12 | 0) >> 0] = $18_1 >>> 7 | 0;
           HEAP8[($5_1 + 13 | 0) >> 0] = (HEAPU8[$17_1 >> 0] | 0) & ((($18_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? 1 : 63) | 0;
           $7_1 = $7_1 + 7 | 0;
           HEAP8[($5_1 + 14 | 0) >> 0] = (HEAPU8[$7_1 >> 0] | 0) >>> 7 | 0;
           HEAP8[($5_1 + 15 | 0) >> 0] = ((HEAPU8[$7_1 >> 0] | 0) >>> 6 | 0) & 1 | 0;
           $6_1 = $6_1 + 1 | 0;
           if ($6_1 >>> 0 < (HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0) {
            continue label$85
           }
           break label$79;
          };
         }
         label$86 : {
          if (!$15_1) {
           break label$86
          }
          $5_1 = 0;
          label$87 : while (1) {
           $6_1 = $714($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
           if (!$6_1) {
            break label$86
           }
           $12_1 = (HEAPU8[$6_1 >> 0] | 0 | 0) == (136 | 0) ? $6_1 : $12_1;
           $5_1 = $5_1 + 1 | 0;
           continue label$87;
          };
         }
         label$88 : {
          label$89 : {
           if ($12_1) {
            break label$89
           }
           $5_1 = 0;
           break label$88;
          }
          $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
         }
         label$90 : {
          $21_1 = $813($5_1 + 436 | 0 | 0) | 0;
          if ($21_1) {
           break label$90
          }
          if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 36 | 0) >> 2] = 436;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          $827(46817 | 0, $3_1 + 32 | 0 | 0);
          break label$4;
         }
         $218($21_1 | 0);
         HEAP32[($21_1 + 432 | 0) >> 2] = 0;
         i64toi32_i32$0 = HEAP32[($3_1 + 320 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3_1 + 324 | 0) >> 2] | 0;
         $540_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $21_1;
         HEAP32[($21_1 + 340 | 0) >> 2] = $540_1;
         HEAP32[($21_1 + 344 | 0) >> 2] = i64toi32_i32$1;
         HEAP16[($21_1 + 428 | 0) >> 1] = HEAPU16[($3_1 + 318 | 0) >> 1] | 0;
         $973($21_1 + 356 | 0 | 0, $3_1 + 240 | 0 | 0, 72 | 0) | 0;
         $29_1 = $21_1 + 352 | 0;
         $30_1 = HEAPU16[($3_1 + 236 | 0) >> 1] | 0;
         HEAP8[$29_1 >> 0] = $30_1;
         HEAP8[($29_1 + 1 | 0) >> 0] = $30_1 >>> 8 | 0;
         $28_1 = HEAP32[($3_1 + 232 | 0) >> 2] | 0;
         HEAP8[($21_1 + 348 | 0) >> 0] = $28_1;
         HEAP8[($21_1 + 349 | 0) >> 0] = $28_1 >>> 8 | 0;
         HEAP8[($21_1 + 350 | 0) >> 0] = $28_1 >>> 16 | 0;
         HEAP8[($21_1 + 351 | 0) >> 0] = $28_1 >>> 24 | 0;
         HEAP32[($21_1 + 12 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
         $5_1 = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
         HEAP32[($21_1 + 328 | 0) >> 2] = $13_1;
         HEAP32[($21_1 + 8 | 0) >> 2] = $5_1;
         label$91 : {
          label$92 : {
           if (!$12_1) {
            break label$92
           }
           $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
           $6_1 = $21_1 + 436 | 0;
           HEAP32[($21_1 + 336 | 0) >> 2] = $6_1;
           HEAP32[($21_1 + 332 | 0) >> 2] = $5_1;
           $823($6_1 | 0, $12_1 + 2 | 0 | 0, $5_1 | 0) | 0;
           break label$91;
          }
          i64toi32_i32$0 = $21_1;
          i64toi32_i32$1 = 0;
          HEAP32[($21_1 + 332 | 0) >> 2] = 0;
          HEAP32[($21_1 + 336 | 0) >> 2] = i64toi32_i32$1;
         }
         label$93 : {
          label$94 : {
           if (!$15_1) {
            break label$94
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = $15_1;
           HEAP32[($21_1 + 4 | 0) >> 2] = 0;
           $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
           if (!$6_1) {
            break label$93
           }
           $13_1 = $21_1 + 68 | 0;
           $19_1 = 0;
           label$95 : while (1) {
            label$96 : {
             if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (134 | 0)) {
              break label$96
             }
             label$97 : {
              $20_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) & 31 | 0;
              if (!$20_1) {
               break label$97
              }
              $7_1 = 0;
              label$98 : while (1) {
               $5_1 = $13_1 + ($7_1 << 3 | 0) | 0;
               HEAP8[$5_1 >> 0] = HEAPU8[($6_1 + 3 | 0) >> 0] | 0;
               HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($6_1 + 4 | 0) >> 0] | 0;
               HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($6_1 + 5 | 0) >> 0] | 0;
               $17_1 = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
               $18_1 = (HEAPU8[($5_1 + 3 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) << 8 | 0) | 0) & -2 | 0 | ($17_1 >>> 7 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $18_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $18_1 >>> 8 | 0;
               $17_1 = (($17_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
               $633_1 = $18_1 & ($17_1 ? -253 : -3) | 0;
               $18_1 = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
               $17_1 = $633_1 | (($17_1 ? $18_1 << 2 | 0 : ($18_1 << 1 | 0) & 2 | 0) & 254 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $17_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $17_1 >>> 8 | 0;
               $17_1 = ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) << 1 | 0) & 256 | 0 | ($17_1 & -257 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $17_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $17_1 >>> 8 | 0;
               $31_1 = ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) << 3 | 0) & 512 | 0 | ($17_1 & 65023 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $31_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $31_1 >>> 8 | 0;
               $7_1 = $7_1 + 1 | 0;
               if (($7_1 | 0) != ($20_1 | 0)) {
                continue label$98
               }
               break label$98;
              };
             }
             HEAP32[($21_1 + 316 | 0) >> 2] = $20_1;
            }
            $19_1 = $19_1 + 1 | 0;
            $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $19_1 | 0) | 0;
            if ($6_1) {
             continue label$95
            }
            break label$93;
           };
          }
          label$99 : {
           if (!$16_1) {
            break label$99
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = $16_1;
           HEAP32[($21_1 + 4 | 0) >> 2] = 1;
           if (!$14_1) {
            break label$93
           }
           label$100 : {
            label$101 : {
             if ($12_1) {
              break label$101
             }
             $5_1 = 0;
             break label$100;
            }
            $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
           }
           label$102 : {
            label$103 : {
             $5_1 = $813($5_1 + 436 | 0 | 0) | 0;
             if (!$5_1) {
              break label$103
             }
             $218($5_1 | 0);
             $5_1 = $973($5_1 | 0, $21_1 | 0, 436 | 0) | 0;
             HEAP32[($5_1 + 8 | 0) >> 2] = (HEAPU8[($3_1 + 216 | 0) >> 0] | 0) << 16 | 0 | (HEAPU16[($3_1 + 330 | 0) >> 1] | 0) | 0;
             $6_1 = HEAP32[($3_1 + 220 | 0) >> 2] | 0;
             HEAP32[($5_1 + 324 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 20 | 0) >> 2] = $6_1;
             $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
             break label$102;
            }
            if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$102
            }
            HEAP32[($3_1 + 84 | 0) >> 2] = 436;
            HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
            $827(46817 | 0, $3_1 + 80 | 0 | 0);
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
           HEAP32[($21_1 + 8 | 0) >> 2] = (HEAPU8[($3_1 + 208 | 0) >> 0] | 0) << 16 | 0 | (HEAPU16[($3_1 + 330 | 0) >> 1] | 0) | 0;
           break label$93;
          }
          HEAP32[($21_1 + 4 | 0) >> 2] = 4;
         }
         label$104 : {
          if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$104
          }
          if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$104
          }
          $5_1 = HEAP32[($21_1 + 4 | 0) >> 2] | 0;
          $6_1 = HEAP32[($21_1 + 8 | 0) >> 2] | 0;
          $7_1 = HEAP32[($21_1 + 12 | 0) >> 2] | 0;
          HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
          HEAP32[($3_1 + 48 | 0) >> 2] = $21_1;
          HEAP32[($3_1 + 52 | 0) >> 2] = $7_1;
          HEAP32[($3_1 + 56 | 0) >> 2] = $6_1;
          HEAP32[($3_1 + 60 | 0) >> 2] = $5_1;
          $827(47262 | 0, $3_1 + 48 | 0 | 0);
         }
         HEAP32[($21_1 + 324 | 0) >> 2] = $2_1;
         $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $21_1 | 0);
         break label$12;
        }
        $12_1 = $20_1;
       }
       $19_1 = $19_1 + 1 | 0;
       continue label$78;
      };
     }
     $11_1 = $11_1 + 1 | 0;
     if (($11_1 | 0) != ($8_1 | 0)) {
      continue label$11
     }
     break label$3;
    };
   }
   HEAP8[($0_1 + 152 | 0) >> 0] = 1;
  }
  label$105 : {
   $23_1 = $3_1 + 352 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
 }
 
 function $576($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10$hi = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(47318 | 0, $5_1 | 0);
  }
  label$4 : {
   if (!($1_1 & 16 | 0)) {
    break label$4
   }
   $546(HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $0_1 + 64 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if ($4_1) {
      break label$6
     }
     i64toi32_i32$1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
      break label$5
     }
     break label$4;
    }
    if ($4_1 >>> 0 <= $1_1 >>> 0) {
     break label$4
    }
   }
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $10_1;
   HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 40 | 0) >> 2] = $1_1;
  }
  label$7 : {
   $9_1 = $5_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return 2 | 0;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = $0_1 + 172 | 0;
   $0_1 = $714($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (5 | 0)) {
      break label$3
     }
     $0_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     if (($0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0 | 0) != (1212435798 | 0)) {
      break label$3
     }
     return 1 | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    $0_1 = $714($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, $98_1 = 0, $101_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($579($0_1 | 0, $2_1 + 96 | 0 | 0, 3 | 0) | 0)) {
    break label$3
   }
   HEAP16[$1_1 >> 1] = $777($2_1 + 96 | 0 | 0) | 0;
   $0_1 = $764($2_1 + 96 | 0 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($0_1 & 128 | 0)) {
     break label$4
    }
    $766($2_1 + 96 | 0 | 0, 2 | 0) | 0;
   }
   label$5 : {
    if (!($0_1 & 64 | 0)) {
     break label$5
    }
    $4_1 = $764($2_1 + 96 | 0 | 0) | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $766($2_1 + 96 | 0 | 0, $4_1 | 0) | 0;
   }
   label$6 : {
    if (!($0_1 & 32 | 0)) {
     break label$6
    }
    $766($2_1 + 96 | 0 | 0, 2 | 0) | 0;
   }
   if (!($579($2_1 + 96 | 0 | 0, $2_1 + 80 | 0 | 0, 4 | 0) | 0)) {
    break label$3
   }
   $0_1 = $772($2_1 + 80 | 0 | 0) | 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = $0_1;
   if (!$0_1) {
    break label$3
   }
   $0_1 = $764($2_1 + 80 | 0 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$3
   }
   HEAP8[($1_1 + 3 | 0) >> 0] = ($0_1 & 252 | 0) >>> 2 | 0;
   $766($2_1 + 80 | 0 | 0, 11 | 0) | 0;
   label$7 : {
    label$8 : {
     $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
     if (($0_1 | 0) == (32 | 0)) {
      break label$8
     }
     label$9 : {
      if (($0_1 | 0) == (103 | 0)) {
       break label$9
      }
      if (($0_1 | 0) != (64 | 0)) {
       break label$7
      }
     }
     $0_1 = $579($2_1 + 80 | 0 | 0, $2_1 + 64 | 0 | 0, 5 | 0) | 0;
     if (!$0_1) {
      break label$3
     }
     i64toi32_i32$2 = ($2_1 + 64 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 40 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $98_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
     $101_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $101_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     if (!($580($2_1 + 64 | 0 | 0, $2_1 + 56 | 0 | 0) | 0)) {
      break label$3
     }
     HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[($2_1 + 58 | 0) >> 0] | 0;
     HEAP8[($1_1 + 6 | 0) >> 0] = HEAPU8[($2_1 + 57 | 0) >> 0] | 0;
     HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($2_1 + 56 | 0) >> 0] | 0;
     $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     label$10 : {
      if ($0_1 >>> 0 > 3072 >>> 0) {
       break label$10
      }
      $4_1 = $1_1 + 20 | 0;
      $3_1 = $768($2_1 + 40 | 0 | 0, $4_1 | 0, $0_1 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
      label$11 : {
       if (($3_1 | 0) != ($0_1 | 0)) {
        break label$11
       }
       HEAP32[($1_1 + 16 | 0) >> 2] = $581($4_1 | 0, $0_1 | 0) | 0;
       break label$7;
      }
      label$12 : {
       if (!($835(62248 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(47654 | 0, $2_1 | 0);
      }
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
      HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     }
     if (!($835(62248 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = 3072;
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(47679 | 0, $2_1 + 16 | 0 | 0);
     break label$7;
    }
    $0_1 = $579($2_1 + 80 | 0 | 0, $2_1 + 64 | 0 | 0, 5 | 0) | 0;
    if (!$0_1) {
     break label$3
    }
    label$13 : {
     if ($0_1 >>> 0 < 129 >>> 0) {
      break label$13
     }
     $3_1 = 0;
     if (!($834(62248 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 36 | 0) >> 2] = 128;
     HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
     $827(47717 | 0, $2_1 + 32 | 0 | 0);
     break label$3;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $768($2_1 + 64 | 0 | 0, $1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   }
   $3_1 = 1;
  }
  label$14 : {
   $6_1 = $2_1 + 112 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $579($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $11_1 = 0, $16_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((($764($0_1 | 0) | 0) & 255 | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $11_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $16_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = $582($1_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $3_1 = ($766($0_1 | 0, $1_1 | 0) | 0 | 0) == ($1_1 | 0) ? $1_1 : 0;
  }
  return $3_1 | 0;
 }
 
 function $580($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $783($2_1 | 0, $0_1 | 0);
  $1_1 = $583($2_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP16[($2_1 + 14 | 0) >> 1] = 1;
  HEAP16[($2_1 + 12 | 0) >> 1] = $1_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $760($2_1 + 32 | 0 | 0, $2_1 + 8 | 0 | 0, 1 | 0);
  $783($2_1 + 16 | 0 | 0, $2_1 + 32 | 0 | 0);
  $583($2_1 + 16 | 0 | 0, $2_1 | 0) | 0;
  $0_1 = $786($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $2_1 = $764($0_1 | 0) | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $1_1 = $2_1 & 127 | 0 | ($1_1 << 7 | 0) | 0;
   if ((($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $1_1 | 0;
 }
 
 function $583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP8[($1_1 + 2 | 0) >> 0] = $584($0_1 | 0) | 0;
  $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
  $4_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $790($0_1 | 0, 4 | 0) | 0;
  label$3 : {
   label$4 : {
    if ($784($0_1 | 0) | 0) {
     break label$4
    }
    label$5 : {
     if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (5 | 0)) {
      break label$5
     }
     $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
     $4_1 = $584($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
    }
    label$6 : {
     if (!($793($0_1 | 0, 8 | 0) | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if ($4_1 >>> 0 > 23 >>> 0) {
        break label$8
       }
       if (!((1 << $4_1 | 0) & 16384222 | 0)) {
        break label$8
       }
       $789($0_1 | 0) | 0;
       $5_1 = $789($0_1 | 0) | 0;
       if ($784($0_1 | 0) | 0) {
        break label$4
       }
       label$9 : {
        if (!$5_1) {
         break label$9
        }
        $792($0_1 | 0, 14 | 0);
       }
       $5_1 = $789($0_1 | 0) | 0;
       if ($784($0_1 | 0) | 0) {
        break label$4
       }
       label$10 : {
        label$11 : {
         if (($4_1 | 0) == (20 | 0)) {
          break label$11
         }
         if (($4_1 | 0) != (6 | 0)) {
          break label$10
         }
        }
        $792($0_1 | 0, 13 | 0);
       }
       if (!$5_1) {
        break label$7
       }
       label$12 : {
        $5_1 = $4_1 + -17 | 0;
        if ($5_1 >>> 0 > 6 >>> 0) {
         break label$12
        }
        if (!((109 >>> ($5_1 & 255 | 0) | 0) & 1 | 0)) {
         break label$12
        }
        $792($0_1 | 0, HEAP32[(($5_1 << 2 | 0) + 48040 | 0) >> 2] | 0 | 0);
       }
       $789($0_1 | 0) | 0;
       break label$7;
      }
      if (($4_1 | 0) != (39 | 0)) {
       break label$7
      }
      $586($0_1 | 0, $1_1 | 0);
     }
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     label$13 : {
      label$14 : {
       if (($4_1 + -19 | 0) >>> 0 < 9 >>> 0) {
        break label$14
       }
       if (($4_1 | 0) == (39 | 0)) {
        break label$14
       }
       if (($4_1 | 0) != (17 | 0)) {
        break label$13
       }
      }
      label$15 : {
       $5_1 = $790($0_1 | 0, 2 | 0) | 0;
       if (($5_1 & -2 | 0 | 0) != (2 | 0)) {
        break label$15
       }
       $587($0_1 | 0);
      }
      if (!$5_1) {
       break label$13
      }
      $789($0_1 | 0) | 0;
     }
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     label$16 : {
      if (($4_1 | 0) != (5 | 0)) {
       break label$16
      }
      $4_1 = 5;
      break label$6;
     }
     if (!($793($0_1 | 0, 16 | 0) | 0)) {
      break label$6
     }
     if (($790($0_1 | 0, 11 | 0) | 0 | 0) != (695 | 0)) {
      break label$6
     }
     $5_1 = $584($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     if (($5_1 | 0) != (5 | 0)) {
      break label$6
     }
     $5_1 = $789($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     if (!$5_1) {
      break label$6
     }
     $4_1 = 5;
     $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
    }
    $5_1 = 1;
    if ((HEAP8[(0 + 62248 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 62248 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $6_1 = HEAPU8[$1_1 >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(47872 | 0, $2_1 + 16 | 0 | 0);
    break label$3;
   }
   $5_1 = 0;
   if ((HEAP8[(0 + 62248 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   $5_1 = 0;
   if (!($828(2 | 0, 62248 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $827(47976 | 0, $2_1 | 0);
  }
  label$17 : {
   $9_1 = $2_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $790($0_1 | 0, 5 | 0) | 0;
   if (($1_1 | 0) != (31 | 0)) {
    break label$1
   }
   $1_1 = ($790($0_1 | 0, 6 | 0) | 0) + 32 | 0;
  }
  return $1_1 | 0;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $790($0_1 | 0, 4 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP8[$1_1 >> 0] = $2_1;
  }
  $1_1 = 0;
  label$2 : {
   if ($784($0_1 | 0) | 0) {
    break label$2
   }
   label$3 : {
    if (($2_1 | 0) != (15 | 0)) {
     break label$3
    }
    return $790($0_1 | 0, 24 | 0) | 0 | 0;
   }
   if ($2_1 >>> 0 > 12 >>> 0) {
    break label$2
   }
   $1_1 = HEAP32[(($2_1 << 2 | 0) + 47808 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  label$1 : {
   if (!($789($0_1 | 0) | 0)) {
    break label$1
   }
   $789($0_1 | 0) | 0;
   $789($0_1 | 0) | 0;
   $588($0_1 | 0, HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0);
  }
  label$2 : {
   if (!($790($0_1 | 0, 4 | 0) | 0)) {
    break label$2
   }
   label$3 : while (1) {
    label$4 : {
     $1_1 = $790($0_1 | 0, 4 | 0) | 0;
     if (($1_1 | 0) != (15 | 0)) {
      break label$4
     }
     $1_1 = ($790($0_1 | 0, 8 | 0) | 0) + 15 | 0;
    }
    label$5 : {
     if (($1_1 | 0) != (255 | 0)) {
      break label$5
     }
     $1_1 = ($790($0_1 | 0, 16 | 0) | 0) + 255 | 0;
    }
    if ($784($0_1 | 0) | 0) {
     break label$2
    }
    $792($0_1 | 0, $1_1 | 0);
    if ($790($0_1 | 0, 4 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
  }
  $784($0_1 | 0) | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0;
  $790($0_1 | 0, 8 | 0) | 0;
  $1_1 = $790($0_1 | 0, 2 | 0) | 0;
  $790($0_1 | 0, 3 | 0) | 0;
  $2_1 = $790($0_1 | 0, 3 | 0) | 0;
  label$1 : {
   if ($784($0_1 | 0) | 0) {
    break label$1
   }
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $3_1 = 0;
    $4_1 = ($1_1 | 0) != (2 | 0);
    label$3 : while (1) {
     $5_1 = $790($0_1 | 0, 6 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$1
     }
     $1_1 = $789($0_1 | 0) | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $1_1 = !$1_1;
      $6_1 = 0;
      label$5 : while (1) {
       $7_1 = $789($0_1 | 0) | 0;
       $8_1 = $789($0_1 | 0) | 0;
       label$6 : {
        if (($2_1 | 0) == (1 | 0)) {
         break label$6
        }
        $789($0_1 | 0) | 0;
       }
       label$7 : {
        $9_1 = $790($0_1 | 0, 2 | 0) | 0;
        if ($9_1) {
         break label$7
        }
        $789($0_1 | 0) | 0;
       }
       label$8 : {
        if ($4_1) {
         break label$8
        }
        $790($0_1 | 0, 2 | 0) | 0;
       }
       $789($0_1 | 0) | 0;
       $790($0_1 | 0, ($1_1 & 1 | 0 ? 16 : 4) | 0) | 0;
       label$9 : {
        if ($7_1) {
         break label$9
        }
        $790($0_1 | 0, ($9_1 ? 7 : 5) | 0) | 0;
       }
       label$10 : {
        if ($8_1) {
         break label$10
        }
        $790($0_1 | 0, 5 | 0) | 0;
       }
       $7_1 = $789($0_1 | 0) | 0;
       $1_1 = !$7_1;
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) != ($5_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $1_1 = 0;
      if (!$7_1) {
       break label$4
      }
      label$11 : while (1) {
       $790($0_1 | 0, 6 | 0) | 0;
       $1_1 = $1_1 + 1 | 0;
       if (($1_1 | 0) != ($5_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$12 : {
    if (!($789($0_1 | 0) | 0)) {
     break label$12
    }
    $790($0_1 | 0, 5 | 0) | 0;
    $790($0_1 | 0, 5 | 0) | 0;
   }
   $784($0_1 | 0) | 0;
  }
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > 6 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[(($1_1 << 2 | 0) + 48068 | 0) >> 2] | 0;
   $1_1 = 0;
   label$2 : while (1) {
    $589($0_1 | 0);
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $784($0_1 | 0) | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $789($0_1 | 0) | 0;
  $790($0_1 | 0, 4 | 0) | 0;
  $790($0_1 | 0, 4 | 0) | 0;
  $790($0_1 | 0, 3 | 0) | 0;
  $790($0_1 | 0, 2 | 0) | 0;
  $1_1 = $789($0_1 | 0) | 0;
  $2_1 = $789($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $790($0_1 | 0, 2 | 0) | 0;
   $789($0_1 | 0) | 0;
   $790($0_1 | 0, 2 | 0) | 0;
  }
  label$2 : {
   if (!$2_1) {
    break label$2
   }
   $790($0_1 | 0, 2 | 0) | 0;
   $790($0_1 | 0, 2 | 0) | 0;
   $789($0_1 | 0) | 0;
   $789($0_1 | 0) | 0;
  }
  $784($0_1 | 0) | 0;
 }
 
 function $590($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $13_1 = 0, $6_1 = 0, $7_1 = 0, $94_1 = 0, $97_1 = 0;
  label$1 : {
   $4_1 = global$0 - 176 | 0;
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 121 | 0);
  }
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $744($5_1 | 0, $1_1 | 0);
   $822($4_1 + 112 | 0 | 0, 0 | 0, 44 | 0) | 0;
   $6_1 = ($4_1 + 48 | 0) + 16 | 0;
   $7_1 = $4_1 + 68 | 0;
   label$6 : while (1) {
    $763($4_1 + 160 | 0 | 0, $5_1 | 0);
    $8_1 = 0;
    $9_1 = 0;
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : while (1) {
        $1_1 = $8_1;
        $10_1 = $764($4_1 + 160 | 0 | 0) | 0;
        if (($10_1 | 0) == (-1 | 0)) {
         break label$9
        }
        $8_1 = $1_1 + 1 | 0;
        $9_1 = $9_1 << 8 | 0 | $10_1 | 0;
        $10_1 = $9_1 & 65535 | 0;
        if ($10_1 >>> 0 < 65504 >>> 0) {
         continue label$10
        }
        break label$10;
       };
       $11_1 = 0;
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : while (1) {
           label$15 : {
            if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$15
            }
            if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$15
            }
            $9_1 = $754($4_1 + 160 | 0 | 0) | 0;
            HEAP32[($4_1 + 84 | 0) >> 2] = $10_1;
            HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
            HEAP32[($4_1 + 88 | 0) >> 2] = $9_1 + -2 | 0;
            $827(48211 | 0, $4_1 + 80 | 0 | 0);
           }
           $9_1 = $596($4_1 + 160 | 0 | 0, $10_1 | 0, $4_1 + 112 | 0 | 0, $2_1 | 0) | 0;
           label$16 : {
            if (!$3_1) {
             break label$16
            }
            if ($11_1) {
             break label$16
            }
            i64toi32_i32$2 = ($4_1 + 160 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $94_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($4_1 + 96 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $94_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $4_1;
            i64toi32_i32$1 = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($4_1 + 164 | 0) >> 2] | 0;
            $97_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $4_1;
            HEAP32[($4_1 + 96 | 0) >> 2] = $97_1;
            HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$0;
            $595($4_1 + 96 | 0 | 0, $2_1 | 0, $3_1 | 0);
           }
           if ((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$11
           }
           if (!$9_1) {
            break label$13
           }
           label$17 : {
            if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$17
            }
            if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$17
            }
            $12_1 = $754($4_1 + 160 | 0 | 0) | 0;
            HEAP32[$6_1 >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
            HEAP32[$7_1 >> 2] = HEAPU16[($4_1 + 118 | 0) >> 1] | 0;
            HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
            HEAP32[($4_1 + 52 | 0) >> 2] = $11_1;
            HEAP32[($4_1 + 56 | 0) >> 2] = $12_1;
            HEAP32[($4_1 + 60 | 0) >> 2] = $9_1;
            $827(48259 | 0, $4_1 + 48 | 0 | 0);
           }
           $766($4_1 + 160 | 0 | 0, $9_1 | 0) | 0;
           $9_1 = $777($4_1 + 160 | 0 | 0) | 0;
           if ((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$11
           }
           label$18 : {
            $12_1 = $9_1 >>> 5 | 0;
            if (($12_1 | 0) != (2047 | 0)) {
             break label$18
            }
            $11_1 = $11_1 + 1 | 0;
            if (($11_1 | 0) == (3 | 0)) {
             break label$12
            }
            continue label$14;
           }
           break label$14;
          };
          if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$13
          }
          if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          $8_1 = $754($4_1 + 160 | 0 | 0) | 0;
          HEAP32[(($4_1 + 16 | 0) + 16 | 0) >> 2] = 2047;
          HEAP32[($4_1 + 28 | 0) >> 2] = $12_1;
          HEAP32[($4_1 + 24 | 0) >> 2] = $9_1;
          HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 20 | 0) >> 2] = $8_1 + -2 | 0;
          $827(48336 | 0, $4_1 + 16 | 0 | 0);
         }
         $1_1 = $1_1 + 3 | 0;
         break label$9;
        }
        $738($5_1 | 0);
        $1_1 = $813(328 | 0) | 0;
        if (!$1_1) {
         break label$8
        }
        $218($1_1 | 0);
        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
        $973($1_1 + 20 | 0 | 0, $4_1 + 112 | 0 | 0, 44 | 0) | 0;
        break label$8;
       }
       $1_1 = $8_1;
      }
      label$19 : {
       if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$19
       }
       if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$19
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(48395 | 0, $4_1 | 0);
      }
      if ($1_1 >>> 0 >= 3 >>> 0) {
       break label$7
      }
      $1_1 = 0;
     }
     label$20 : {
      $14_1 = $4_1 + 176 | 0;
      if ($14_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $14_1;
     }
     return $1_1 | 0;
    }
    $763($4_1 + 160 | 0 | 0, $5_1 | 0);
    $766($4_1 + 160 | 0 | 0, $1_1 + -2 | 0 | 0) | 0;
    $745($5_1 | 0, $4_1 + 160 | 0 | 0);
    continue label$6;
   };
  }
  $859(48201 | 0, 48117 | 0, 122 | 0);
  abort();
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 48096 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(48510 | 0, 48117 | 0, 64 | 0);
  abort();
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 87 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $0_1 = $590($0_1 | 0, $1_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $0_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 99 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$2_1) {
     break label$3
    }
    $822($2_1 | 0, 0 | 0, 16 | 0) | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) == (3 | 0);
    $766($0_1 | 0, ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) == (3 | 0) ? ($4_1 ? 17 : 32) : $4_1 ? 9 : 17) | 0) | 0;
    $1_1 = $778($0_1 | 0) | 0;
    label$5 : {
     label$6 : {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (($1_1 | 0) != (1483304551 | 0)) {
         break label$8
        }
        $1_1 = 2;
        break label$7;
       }
       if (($1_1 | 0) != (1231971951 | 0)) {
        break label$6
       }
       $1_1 = 1;
      }
      HEAP32[$2_1 >> 2] = $1_1;
      $1_1 = $778($0_1 | 0) | 0;
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      label$9 : {
       if (!($1_1 & 1 | 0)) {
        break label$9
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
      }
      label$10 : {
       if (!($1_1 & 2 | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      }
      label$11 : {
       if (!($1_1 & 4 | 0)) {
        break label$11
       }
       $766($0_1 | 0, 100 | 0) | 0;
      }
      if (!($1_1 & 8 | 0)) {
       break label$5
      }
      HEAP32[($2_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     }
     $769($0_1 | 0, $3_1 + 8 | 0 | 0);
     $766($0_1 | 0, 32 | 0) | 0;
     if (($778($0_1 | 0) | 0 | 0) != (1447187017 | 0)) {
      break label$5
     }
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = 2;
     $766($0_1 | 0, 2 | 0) | 0;
     $766($0_1 | 0, 2 | 0) | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $777($0_1 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
    }
    label$12 : {
     $6_1 = $3_1 + 16 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return;
   }
   $859(48518 | 0, 48528 | 0, 133 | 0);
   abort();
  }
  $859(48611 | 0, 48528 | 0, 134 | 0);
  abort();
 }
 
 function $596($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $4_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $5_1 = ($1_1 >>> 1 | 0) & 3 | 0;
  $1_1 = ($1_1 >>> 3 | 0) & 3 | 0;
  $6_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62280 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62280 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$4_1 >> 2] = $1_1;
   $827(48620 | 0, $4_1 | 0);
  }
  label$4 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$4
   }
   if (!$5_1) {
    break label$4
   }
   $0_1 = $777($0_1 | 0) | 0;
   HEAP8[($3_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[$3_1 >> 0] = $5_1;
   $7_1 = ($0_1 >>> 6 | 0) & 3 | 0;
   HEAP8[($3_1 + 2 | 0) >> 0] = $7_1;
   label$5 : {
    label$6 : {
     if (($1_1 | 0) != (3 | 0)) {
      break label$6
     }
     $8_1 = 48688;
     if (($5_1 | 0) == (3 | 0)) {
      break label$5
     }
     $8_1 = ($5_1 | 0) == (2 | 0) ? 48720 : 48752;
     break label$5;
    }
    $8_1 = ($5_1 | 0) == (3 | 0) ? 48784 : 48816;
   }
   $9_1 = ($0_1 >>> 12 | 0) + -1 | 0;
   if ($9_1 >>> 0 > 13 >>> 0) {
    break label$4
   }
   HEAP32[$2_1 >> 2] = ($5_1 | 0) == (1 | 0) ? 1 : 3;
   $8_1 = HEAPU16[($8_1 + ($9_1 << 1 | 0) | 0) >> 1] | 0;
   HEAP16[($2_1 + 6 | 0) >> 1] = $8_1;
   $9_1 = ($0_1 >>> 10 | 0) & 3 | 0;
   if (($9_1 | 0) == (3 | 0)) {
    break label$4
   }
   $6_1 = $0_1 >>> 9 | 0;
   label$7 : {
    label$8 : {
     if (($1_1 | 0) != (3 | 0)) {
      break label$8
     }
     $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48844 | 0) >> 1] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     $1_1 = 0;
     break label$7;
    }
    label$9 : {
     if (($1_1 | 0) != (2 | 0)) {
      break label$9
     }
     $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48850 | 0) >> 1] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     $1_1 = ($5_1 | 0) == (1 | 0);
     break label$7;
    }
    $1_1 = 1;
    $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48856 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
   }
   $6_1 = $6_1 & 1 | 0;
   HEAP8[($2_1 + 5 | 0) >> 0] = 16;
   HEAP8[($2_1 + 4 | 0) >> 0] = ($7_1 | 0) == (3 | 0) ? 1 : 2;
   label$10 : {
    label$11 : {
     if (($5_1 | 0) != (3 | 0)) {
      break label$11
     }
     $5_1 = (((Math_imul($8_1, 12e3) >>> 0) / (($0_1 << $1_1 | 0) >>> 0) | 0) + $6_1 | 0) << 2 | 0;
     $6_1 = 384;
     break label$10;
    }
    $5_1 = ((Math_imul($8_1, 144e3) >>> 0) / (($0_1 << $1_1 | 0) >>> 0) | 0) + $6_1 | 0;
    $6_1 = 1152;
   }
   HEAP16[($3_1 + 4 | 0) >> 1] = $6_1 >>> $1_1 | 0;
   $6_1 = $5_1 + -4 | 0;
  }
  label$12 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(352 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 352 | 0, $1_1 | 0, 48880 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $598($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(48972 | 0, 48980 | 0, 73 | 0);
  abort();
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $27_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 55 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $219($0_1 + 32 | 0 | 0);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP8[($0_1 + 10 | 0) >> 0] = 255;
  i64toi32_i32$2 = $0_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 344 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 48 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 336 | 0) >> 2] = $27_1;
  HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 96 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 352 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $4_1 = 0, $8_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $7_1 = 0, $9_1 = 0, $109_1 = 0, $112_1 = 0, $11_1 = 0, $179_1 = 0, $182_1 = 0;
  label$1 : {
   $3_1 = global$0 - 432 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 191 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 416 | 0 | 0, $4_1 | 0);
  $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
  $1_1 = $262($3_1 + 416 | 0 | 0, -1 | 0) | 0;
  $6_1 = $754($3_1 + 416 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    $7_1 = $0_1 + 32 | 0;
    $8_1 = $0_1 + 336 | 0;
    $9_1 = $3_1 + 48 | 0;
    label$7 : while (1) {
     HEAP8[($0_1 + 10 | 0) >> 0] = $1_1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                $1_1 = $1_1 & 255 | 0;
                switch ($1_1 + -176 | 0 | 0) {
                case 8:
                 break label$12;
                case 2:
                case 4:
                case 6:
                 break label$13;
                case 0:
                case 1:
                 break label$14;
                case 7:
                 break label$15;
                case 3:
                 break label$16;
                case 5:
                 break label$17;
                default:
                 break label$18;
                };
               }
               if ($1_1) {
                break label$13
               }
               HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
               break label$8;
              }
              HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
              if (($5_1 & 255 | 0 | 0) != (179 | 0)) {
               break label$8
              }
              $1_1 = $778($3_1 + 416 | 0 | 0) | 0;
              $5_1 = $777($3_1 + 416 | 0 | 0) | 0;
              if ((HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0) < (0 | 0)) {
               break label$8
              }
              HEAP8[($0_1 + 336 | 0) >> 0] = 1;
              HEAP8[($0_1 + 351 | 0) >> 0] = ($5_1 & 128 | 0) >>> 7 | 0;
              HEAP8[($0_1 + 350 | 0) >> 0] = ($1_1 >>> 19 | 0) & 1 | 0;
              HEAP8[($0_1 + 349 | 0) >> 0] = ($1_1 >>> 20 | 0) & 15 | 0;
              HEAP8[($0_1 + 348 | 0) >> 0] = ($1_1 >>> 24 | 0) & 7 | 0;
              HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0 | (($1_1 << 17 | 0) & 1073479680 | 0) | 0;
              break label$8;
             }
             $5_1 = ($3_1 + 96 | 0) + 8 | 0;
             $10_1 = $8_1 + 8 | 0;
             i64toi32_i32$2 = $10_1;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $109_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $5_1;
             HEAP32[i64toi32_i32$0 >> 2] = $109_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $8_1;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $112_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $3_1;
             HEAP32[($3_1 + 96 | 0) >> 2] = $112_1;
             HEAP32[($3_1 + 100 | 0) >> 2] = i64toi32_i32$0;
             $1_1 = $601($3_1 + 416 | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
             if ((HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0) < (0 | 0)) {
              break label$6
             }
             label$19 : {
              if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$19
              }
              if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$19
              }
              HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 68 | 0) >> 2] = HEAPU16[($3_1 + 120 | 0) >> 1] | 0;
              HEAP32[($3_1 + 72 | 0) >> 2] = HEAPU16[($3_1 + 122 | 0) >> 1] | 0;
              $827(49064 | 0, $3_1 + 64 | 0 | 0);
             }
             label$20 : {
              if ($1_1) {
               break label$20
              }
              HEAP8[$2_1 >> 0] = 1;
              break label$11;
             }
             $1_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + 1 | 0;
             HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
             label$21 : {
              if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              label$22 : {
               if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$22
               }
               $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
               $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
               $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
               HEAP32[$9_1 >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
               HEAP32[($3_1 + 40 | 0) >> 2] = $6_1;
               HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
               HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
               $827(49106 | 0, $3_1 + 32 | 0 | 0);
              }
              $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
             }
             label$23 : {
              $1_1 = $1_1 & 65535 | 0;
              if (($1_1 | 0) != (1 | 0)) {
               break label$23
              }
              $973($7_1 | 0, $3_1 + 112 | 0 | 0, 304 | 0) | 0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $179_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $10_1;
              HEAP32[i64toi32_i32$0 >> 2] = $179_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
              $182_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $8_1;
              HEAP32[i64toi32_i32$1 >> 2] = $182_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              label$24 : {
               label$25 : {
                $1_1 = HEAPU16[($3_1 + 122 | 0) >> 1] | 0;
                if (($1_1 | 0) > (719 | 0)) {
                 break label$25
                }
                if (($1_1 | 0) == (480 | 0)) {
                 break label$24
                }
                if (($1_1 | 0) == (576 | 0)) {
                 break label$24
                }
                break label$9;
               }
               if (($1_1 | 0) == (1080 | 0)) {
                break label$24
               }
               if (($1_1 | 0) != (720 | 0)) {
                break label$9
               }
              }
              if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
               break label$9
              }
              if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0) >>> 0 > 1 >>> 0) {
               break label$9
              }
              break label$10;
             }
             label$26 : {
              label$27 : {
               if ((HEAPU16[($3_1 + 120 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 40 | 0) >> 1] | 0 | 0)) {
                break label$27
               }
               if ((HEAPU16[($3_1 + 122 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 42 | 0) >> 1] | 0 | 0)) {
                break label$26
               }
              }
              HEAP16[($0_1 + 8 | 0) >> 1] = 0;
              break label$8;
             }
             if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
              break label$8
             }
             if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
              break label$10
             }
             break label$8;
            }
            if (($764($3_1 + 416 | 0 | 0) | 0 | 0) != (-1 | 0)) {
             break label$8
            }
            if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
             break label$8
            }
            if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
             break label$10
            }
            break label$8;
           }
           HEAP8[$2_1 >> 0] = 1;
           if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           HEAP32[($3_1 + 84 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
           $827(49179 | 0, $3_1 + 80 | 0 | 0);
           break label$11;
          }
          label$28 : {
           if (($1_1 + -1 | 0) >>> 0 > 174 >>> 0) {
            break label$28
           }
           HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           break label$8;
          }
          if ($1_1 >>> 0 < 185 >>> 0) {
           break label$8
          }
          $5_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
          if ($5_1 >>> 0 < 11 >>> 0) {
           break label$8
          }
          HEAP8[$2_1 >> 0] = 1;
          if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
          $827(49179 | 0, $3_1 + 16 | 0 | 0);
          break label$11;
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         break label$8;
        }
        $738($4_1 | 0);
        $1_1 = 0;
        break label$5;
       }
       $1_1 = $602($0_1 | 0) | 0;
       break label$5;
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = 0;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     }
     $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
     $1_1 = $262($3_1 + 416 | 0 | 0, -1 | 0) | 0;
     $6_1 = $754($3_1 + 416 | 0 | 0) | 0;
     if ($1_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $1_1 = 0;
   label$29 : {
    if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$29
    }
    if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$29
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(49240 | 0, $3_1 | 0);
   }
   if ($6_1 >>> 0 < 5 >>> 0) {
    break label$5
   }
   $763($3_1 + 416 | 0 | 0, $4_1 | 0);
   $766($3_1 + 416 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 416 | 0 | 0);
  }
  label$30 : {
   $13_1 = $3_1 + 432 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $1_1 | 0;
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = $778($0_1 | 0) | 0;
  $4_1 = $778($0_1 | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $219($1_1 | 0);
   HEAP16[($1_1 + 8 | 0) >> 1] = $3_1 >>> 20 | 0;
   HEAP16[($1_1 + 10 | 0) >> 1] = ($3_1 >>> 8 | 0) & 4095 | 0;
   $5_1 = 0;
   $0_1 = $4_1 >>> 14 | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = ($0_1 | 0) == (262143 | 0) ? 0 : $0_1;
   if (!($3_1 & 240 | 0)) {
    break label$1
   }
   $0_1 = $3_1 & 15 | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[(($0_1 << 2 | 0) + 49280 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAPF32[($1_1 + 300 | 0) >> 2] = Math_fround(Math_fround($0_1 >>> 0) / Math_fround(1.0e3));
   $5_1 = 1;
  }
  return $5_1 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0, $36_1 = 0, $40_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = $0_1 + 344 | 0;
   HEAP16[$2_1 >> 1] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   HEAP16[($0_1 + 346 | 0) >> 1] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $218($1_1 | 0);
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0 ? 2 : 1;
   $3_1 = $0_1 + 44 | 0;
   HEAP32[$3_1 >> 2] = (((HEAP32[$3_1 >> 2] | 0) << 1 | 0) >>> 0) / (5 >>> 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $36_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 48 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 32 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 322 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(49362 | 0, $2_1 | 0);
  }
  label$6 : {
   if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
    break label$6
   }
   if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
    break label$6
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$6
   }
   if ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 1 | 0) + 2 | 0) >>> 0 < $4_1 >>> 0) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = 60;
   $3_1 = $602($0_1 | 0) | 0;
  }
  label$7 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $0_1 = $610($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$3 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 & ($2_1 | 0) == (2 | 0) | 0 | 0;
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62312 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(49501 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 49404 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (49404 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 49404 | 0, 49545 | 0, 64 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $607($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $52_1 = 0, $55_1 = 0, $68_1 = 0, $71_1 = 0, $94_1 = 0, $97_1 = 0;
  label$1 : {
   $4_1 = global$0 - 208 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (49404 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 49404 | 0, 49545 | 0, 96 | 0);
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  $68($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0, 1048576 | 0, i64toi32_i32$1 | 0);
  $5_1 = 0;
  label$5 : {
   if (($608($4_1 + 16 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $4_1 | 0) | 0 | 0) < (0 | 0)) {
    break label$5
   }
   if ((HEAPU8[($4_1 + 120 | 0) >> 0] | 0 | 0) != (2 | 0)) {
    break label$5
   }
   if ((HEAPU8[($4_1 + 121 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$5
   }
   if (HEAPU8[($4_1 + 148 | 0) >> 0] | 0) {
    break label$5
   }
   label$6 : {
    $5_1 = $813(40 | 0) | 0;
    if (!$5_1) {
     break label$6
    }
    $214($5_1 | 0, 17 | 0);
    $0_1 = ($4_1 + 168 | 0) + 8 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $52_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[$0_1 >> 2] = $52_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[($4_1 + 168 | 0) >> 2] = $55_1;
    HEAP32[($4_1 + 172 | 0) >> 2] = i64toi32_i32$1;
    label$7 : {
     if (($766($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($4_1 + 152 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 168 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
     $71_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1;
     HEAP32[($4_1 + 152 | 0) >> 2] = $71_1;
     HEAP32[($4_1 + 156 | 0) >> 2] = i64toi32_i32$1;
     label$8 : {
      label$9 : {
       label$10 : {
        if (!($613($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 0) | 0)) {
         break label$10
        }
        if (((HEAPU8[($4_1 + 184 | 0) >> 0] | 0) & 255 | 0 | 0) != (1 | 0)) {
         break label$10
        }
        $1_1 = 146;
        if ($614($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 4 | 0 | 0) | 0) {
         break label$9
        }
        break label$7;
       }
       i64toi32_i32$2 = ($4_1 + 152 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$1;
       i64toi32_i32$1 = ($4_1 + 168 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1;
       HEAP32[($4_1 + 168 | 0) >> 2] = $97_1;
       HEAP32[($4_1 + 172 | 0) >> 2] = i64toi32_i32$1;
       $1_1 = 153;
       if (!($615($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 0) | 0)) {
        break label$8
       }
      }
      $0_1 = $813(328 | 0) | 0;
      if (!$0_1) {
       break label$7
      }
      $218($0_1 | 0);
      HEAP32[$0_1 >> 2] = 0;
      $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 ? $6_1 : $5_1) >> 2] = $0_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = 1;
      $6_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $6_1 + 1 | 0;
      label$11 : {
       $1_1 = $1_1 & 15 | 0;
       if (($1_1 | 0) == (9 | 0)) {
        break label$11
       }
       if (($1_1 | 0) != (2 | 0)) {
        break label$8
       }
       $1_1 = HEAPU8[($4_1 + 190 | 0) >> 0] | 0;
       HEAP8[($0_1 + 25 | 0) >> 0] = 16;
       HEAP8[($0_1 + 24 | 0) >> 0] = $1_1;
       HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 192 | 0) >> 2] | 0;
       HEAP16[($0_1 + 26 | 0) >> 1] = ((HEAP32[(($4_1 + 184 | 0) + 16 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0;
       break label$8;
      }
      HEAP8[($0_1 + 25 | 0) >> 0] = 16;
      HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 185 | 0) >> 0] | 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 188 | 0) >> 2] | 0;
     }
     $609($4_1 + 16 | 0 | 0);
     break label$5;
    }
    $815($5_1 | 0);
   }
   $609($4_1 + 16 | 0 | 0);
   $5_1 = 0;
  }
  label$12 : {
   $8_1 = $4_1 + 208 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $608($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $23_1 = 0, $23$hi = 0, $25_1 = 0, $25$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP8[($0_1 + 133 | 0) >> 0] = 0;
  $5_1 = -1;
  label$3 : {
   if (($70($0_1 | 0, $2_1 | 0, $1_1 | 0, 4 | 0) | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $23_1 = i64toi32_i32$0;
   $23$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$1;
   $25$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$1 = $25$hi;
   $74($0_1 | 0, $23_1 | 0, i64toi32_i32$0 | 0, $25_1 | 0, i64toi32_i32$1 | 0);
   label$4 : {
    if (!($76($0_1 | 0, 282 | 0) | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 133 | 0) >> 0] = 1;
    $5_1 = $0_1 + 104 | 0;
    if (!($610($0_1 | 0, $5_1 | 0) | 0)) {
     break label$4
    }
    if (!($76($0_1 | 0, 16 | 0) | 0)) {
     break label$4
    }
    $3_1 = $0_1 + 80 | 0;
    if (!($611($3_1 | 0, $0_1 | 0, $5_1 | 0) | 0)) {
     break label$4
    }
    $3_1 = $612($3_1 | 0, $5_1 | 0, $0_1 + 132 | 0 | 0) | 0;
    HEAP32[($0_1 + 128 | 0) >> 2] = $3_1;
    label$5 : {
     if ((HEAP8[(0 + 62312 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     label$6 : {
      if (!($828(2 | 0, 62312 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(49460 | 0, $4_1 | 0);
     }
     $3_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $5_1 = 0;
    if ($76($0_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $71($0_1 | 0);
   HEAP8[($0_1 + 133 | 0) >> 0] = 0;
   $5_1 = -1;
  }
  label$7 : {
   $7_1 = $4_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 133 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 133 | 0) >> 0] = 0;
   $71($0_1 | 0);
  }
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $36_1 = 0, $7_1 = 0, $7$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (1399285583 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 0;
   label$4 : {
    label$5 : {
     $4_1 = $764($0_1 | 0) | 0;
     switch ($4_1 + 1 | 0 | 0) {
     case 0:
      break label$3;
     case 1:
      break label$4;
     default:
      break label$5;
     };
    }
    $3_1 = 0;
    if (!($834(62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(49633 | 0, $2_1 | 0);
    break label$3;
   }
   HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
   i64toi32_i32$0 = $779($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $36_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $36_1;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[$1_1 >> 0] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(49660 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $611($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $10_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 0;
  return ($766($1_1 | 0, HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0 | 0) == (HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0;
 }
 
 function $612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  HEAP8[$2_1 >> 0] = 0;
  $5_1 = -1;
  label$3 : {
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   if ($6_1 >>> 0 >= (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) >>> 0) {
    break label$3
   }
   $7_1 = $0_1 + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $6_1 = $6_1 + 1 | 0;
     $5_1 = $764($7_1 | 0) | 0;
     $4_1 = (($5_1 | 0) == (-1 | 0) ? -1 : $4_1) + $5_1 | 0;
     if (($5_1 | 0) != (255 | 0)) {
      break label$4
     }
     if ($6_1 >>> 0 < (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) >>> 0) {
      continue label$5
     }
     break label$5;
    };
    HEAP8[$2_1 >> 0] = 1;
   }
   HEAP32[$0_1 >> 2] = $6_1;
   label$6 : {
    if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $827(49778 | 0, $3_1 | 0);
   }
   $5_1 = $4_1;
  }
  label$7 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ($803($0_1 | 0, 49812 | 0, 6 | 0) | 0) {
    break label$3
   }
   $766($0_1 | 0, 6 | 0) | 0;
   $3_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
   $827(49818 | 0, $2_1 | 0);
  }
  label$4 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $62_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = $776($0_1 | 0) | 0;
  HEAP16[$1_1 >> 1] = $3_1;
  $4_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($3_1 & 65535 | 0)) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
    $827(49854 | 0, $2_1 + 32 | 0 | 0);
    break label$3;
   }
   HEAP8[($1_1 + 2 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $776($0_1 | 0) | 0;
   $772($0_1 | 0) | 0;
   $4_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $62_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $62_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(49916 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ($803($0_1 | 0, 50011 | 0, 8 | 0) | 0) {
    break label$1
   }
   $766($0_1 | 0, 8 | 0) | 0;
   HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP16[($1_1 + 2 | 0) >> 1] = $775($0_1 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP16[($1_1 + 8 | 0) >> 1] = $775($0_1 | 0) | 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = $772($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $616($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 90 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 52 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[(($4_1 + 32 | 0) + 16 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 40 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   $827(50127 | 0, $4_1 + 32 | 0 | 0);
  }
  $5_1 = $0_1 + 12 | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = 0;
      label$10 : {
       if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$10
       }
       $8_1 = $6_1;
       label$11 : while (1) {
        label$12 : {
         $7_1 = $8_1;
         $8_1 = HEAP32[$7_1 >> 2] | 0;
         if ($8_1) {
          break label$12
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$7;
        }
        if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$11
        }
        break label$11;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($7_1) {
       break label$7
      }
      break label$8;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $7_1 = $5_1;
    break label$6;
   }
   $6_1 = HEAP32[$7_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$13 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   $827(50179 | 0, $4_1 | 0);
  }
  label$14 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 113 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    $827(50239 | 0, $2_1 + 32 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    $827(50290 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 64 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(50231 | 0, 50048 | 0, 114 | 0);
  abort();
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 20) + ($0_1 + 56 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(50341 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 443 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 40 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 41 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(50360 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $57_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ($3_1 >>> 0 >= 9 >>> 0) {
     break label$3
    }
    $3_1 = $3_1 + -1 | 0;
    label$5 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = HEAP32[((($0_1 + 56 | 0) + Math_imul($3_1, 20) | 0) + 8 | 0) >> 2] | 0;
     $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$2_1 >> 2] = $5_1 + -1 | 0;
     $827(51036 | 0, $2_1 | 0);
    }
    $0_1 = $0_1 + Math_imul($3_1, 20) | 0;
    $3_1 = $0_1 + 76 | 0;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $1_1 | 0;
    $0_1 = $0_1 + 64 | 0;
    $57_1 = $0_1;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $0_1 - $1_1 | 0;
    $0_1 = $1_1 >>> 0 > $0_1 >>> 0 ? 0 : $1_1;
    HEAP32[$57_1 >> 2] = $0_1;
    label$6 : {
     $7_1 = $2_1 + 16 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $0_1 | 0;
   }
   $859(50832 | 0, 50048 | 0, 247 | 0);
   abort();
  }
  $859(50402 | 0, 50048 | 0, 248 | 0);
  abort();
 }
 
 function $621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9$hi = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $66_1 = 0, $69_1 = 0, $71$hi = 0, i64toi32_i32$2 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($3_1 >>> 0 > 8 >>> 0) {
       break label$6
      }
      i64toi32_i32$0 = 0;
      $9_1 = $1_1;
      $9$hi = i64toi32_i32$0;
      $4_1 = $0_1 + 56 | 0;
      break label$5;
     }
     $859(50402 | 0, 50048 | 0, 197 | 0);
     abort();
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = $3_1;
      $1_1 = Math_imul($3_1, 20);
      $3_1 = $4_1 + $1_1 | 0;
      label$9 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       $1_1 = HEAP32[(($0_1 + $1_1 | 0) + 72 | 0) >> 2] | 0;
       HEAP32[($2_1 + 28 | 0) >> 2] = $1_1 >>> 24 | 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 & 255 | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
       $827(51065 | 0, $2_1 + 16 | 0 | 0);
      }
      $622($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0);
      $66_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
      $69_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $71$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $71$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 228 | 0) >> 2] | 0]($66_1, $69_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$7
      }
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + -1 | 0;
      label$10 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       $5_1 = HEAP32[(($4_1 + Math_imul($1_1, 20) | 0) + 8 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
       HEAP32[$2_1 >> 2] = $6_1 + -1 | 0;
       $827(51085 | 0, $2_1 | 0);
      }
      $5_1 = ($0_1 + Math_imul($1_1, 20) | 0) + 64 | 0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $3_1 = HEAP32[$3_1 >> 2] | 0;
      if ($1_1 >>> 0 < $3_1 >>> 0) {
       break label$3
      }
      label$11 : {
       if ($1_1 >>> 0 > $3_1 >>> 0) {
        break label$11
       }
       $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$7
       }
       continue label$8;
      }
      break label$8;
     };
     HEAP32[$5_1 >> 2] = $1_1 - $3_1 | 0;
    }
    label$12 : {
     $8_1 = $2_1 + 32 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return;
   }
   $859(50379 | 0, 50048 | 0, 196 | 0);
   abort();
  }
  $859(51115 | 0, 50048 | 0, 211 | 0);
  abort();
 }
 
 function $622($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $114_1 = 0, $117_1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $8_1 = $6_1 + $4_1 | 0;
     $9_1 = $2_1 >>> 24 | 0;
     $10_1 = $2_1 & 255 | 0;
     $11_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $13_1 = $7_1 + 48 | 0;
     $14_1 = $7_1 + 44 | 0;
     $15_1 = $7_1 + 40 | 0;
     $16_1 = $7_1 + 36 | 0;
     $17_1 = $7_1 + 32 | 0;
     $18_1 = $7_1 + 28 | 0;
     $19_1 = $7_1 + 20 | 0;
     $20_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($20_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $21_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$13_1 >> 2] = $8_1;
       HEAP32[$14_1 >> 2] = $6_1;
       HEAP32[$15_1 >> 2] = $5_1;
       HEAP32[$16_1 >> 2] = $1_1;
       HEAP32[$17_1 >> 2] = $4_1;
       HEAP32[$18_1 >> 2] = $9_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
       HEAP32[$19_1 >> 2] = $12_1;
       HEAP32[($7_1 + 16 | 0) >> 2] = $10_1;
       HEAP32[($7_1 + 12 | 0) >> 2] = $21_1 >>> 24 | 0;
       HEAP32[$7_1 >> 2] = $21_1 & 255 | 0;
       HEAP32[($7_1 + 8 | 0) >> 2] = ($21_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = ($21_1 >>> 8 | 0) & 255 | 0;
       $827(51589 | 0, $7_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $114_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($7_1 + 64 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $114_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $117_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $7_1;
        HEAP32[($7_1 + 64 | 0) >> 2] = $117_1;
        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$0;
        if (($766($7_1 + 64 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $21_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $7_1 + 64 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$21_1) {
         break label$3
        }
        $21_1 = FUNCTION_TABLE[HEAP32[($20_1 + 8 | 0) >> 2] | 0]($20_1, $2_1, $5_1, $6_1, $21_1) | 0;
        break label$8;
       }
       $21_1 = FUNCTION_TABLE[HEAP32[($20_1 + 8 | 0) >> 2] | 0]($20_1, $2_1, 0, 0, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($21_1 | 0) == (1 | 0) | 0;
      $20_1 = HEAP32[$20_1 >> 2] | 0;
      if ($20_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $23_1 = $7_1 + 80 | 0;
     if ($23_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $23_1;
    }
    return;
   }
   $859(51643 | 0, 50048 | 0, 157 | 0);
   abort();
  }
  $859(51657 | 0, 50048 | 0, 159 | 0);
  abort();
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $38_1 = 0, $43_1 = 0, $48_1 = 0, $51_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   $827(50441 | 0, $2_1 + 48 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $3_1 = $813(256 | 0) | 0;
       if ($3_1) {
        break label$8
       }
       if (!($835(62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = 256;
       $827(50473 | 0, $2_1 + 16 | 0 | 0);
       break label$7;
      }
      $845($3_1 | 0, 256 | 0, $3_1 | 0, 50032 | 0);
      i64toi32_i32$2 = $1_1 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 244 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $38_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $43_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 236 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $43_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $48_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 228 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $48_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $51_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[($3_1 + 220 | 0) >> 2] = $51_1;
      HEAP32[($3_1 + 224 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      $0_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       $619($3_1 | 0);
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
       HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
       $827(50504 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      $815($3_1 | 0);
     }
     $3_1 = 0;
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     $3_1 = 0;
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $3_1 = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(50504 | 0, $2_1 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(50461 | 0, 50048 | 0, 565 | 0);
   abort();
  }
  $859(50465 | 0, 50048 | 0, 566 | 0);
  abort();
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(50461 | 0, 50048 | 0, 630 | 0);
   abort();
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 184;
  HEAP32[($0_1 + 8 | 0) >> 2] = 185;
  HEAP32[($0_1 + 4 | 0) >> 2] = 186;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 1179011410;
  HEAP32[($0_1 + 28 | 0) >> 2] = 1414744396;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 187;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $627($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 64 | 0) >> 2] = $0_1;
   $827(50529 | 0, $1_1 + 64 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 647 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   $3_1 = $1_1 + 36 | 0;
   label$7 : while (1) {
    label$8 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 52 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
     $827(50550 | 0, $1_1 + 48 | 0 | 0);
    }
    label$9 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 >>> 24 | 0;
     HEAP32[(($1_1 + 16 | 0) + 16 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 & 255 | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     $827(50599 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $619($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 256 | 0, $0_1 | 0, 0 | 0);
  label$10 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(50655 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$11 : {
   $6_1 = $1_1 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0, $13_1 = 0;
  label$1 : {
   $2_1 = global$0 - 192 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 667 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 164 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 160 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 168 | 0) >> 2] = $4_1 + $3_1 | 0;
   $827(50676 | 0, $2_1 + 160 | 0 | 0);
  }
  $5_1 = 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : while (1) {
          label$14 : {
           label$15 : {
            label$16 : {
             if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
              break label$16
             }
             $3_1 = $798($1_1 | 0) | 0;
             if (!$3_1) {
              break label$15
             }
             $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
             $4_1 = $756($3_1 | 0) | 0;
             $735($3_1 | 0);
             $5_1 = $4_1 + $5_1 | 0;
            }
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            label$17 : while (1) {
             $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
             $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
             HEAP8[($0_1 + 41 | 0) >> 0] = 0;
             label$18 : {
              switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
              case 0:
               label$22 : {
                i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                $12_1 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$0 = __wasm_i64_srem($12_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $4_1 = i64toi32_i32$0;
                if (($4_1 + -1 | 0) >>> 0 >= $3_1 >>> 0) {
                 break label$22
                }
                label$23 : {
                 if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$23
                 }
                 if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$23
                 }
                 i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                 HEAP32[$2_1 >> 2] = $4_1;
                 $827(50704 | 0, $2_1 | 0);
                }
                if (($4_1 | 0) != (1 | 0)) {
                 break label$12
                }
                label$24 : {
                 if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                  break label$24
                 }
                 if ($620($0_1 | 0, 1 | 0) | 0) {
                  break label$24
                 }
                 $621($0_1 | 0, 1 | 0);
                }
                $766($2_1 + 176 | 0 | 0, 1 | 0) | 0;
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                 continue label$17
                }
                $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               }
               label$25 : {
                label$26 : {
                 if (HEAP32[($0_1 + 56 | 0) >> 2] | 0) {
                  break label$26
                 }
                 if (!($632($0_1 | 0, $2_1 + 176 | 0 | 0) | 0)) {
                  continue label$13
                 }
                 break label$25;
                }
                if (!($633($0_1 | 0, $2_1 + 176 | 0 | 0) | 0)) {
                 continue label$13
                }
               }
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               continue label$17;
              case 3:
               label$27 : {
                if (HEAP32[($0_1 + 56 | 0) >> 2] | 0) {
                 break label$27
                }
                label$28 : {
                 if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$28
                 }
                 HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
                 $827(50745 | 0, $2_1 + 16 | 0 | 0);
                }
                HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 1 | 0;
                FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
                continue label$13;
               }
               $4_1 = $618($0_1 | 0) | 0;
               if (!$4_1) {
                break label$11
               }
               label$29 : {
                if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$29
                }
                if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$29
                }
                $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                HEAP32[($2_1 + 84 | 0) >> 2] = $3_1;
                HEAP32[($2_1 + 80 | 0) >> 2] = $4_1;
                $827(50800 | 0, $2_1 + 80 | 0 | 0);
               }
               label$30 : {
                i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                $13_1 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$0 = __wasm_i64_srem($13_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $4_1 = i64toi32_i32$0;
                if (($4_1 + -1 | 0) >>> 0 >= $3_1 >>> 0) {
                 break label$30
                }
                label$31 : {
                 if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$31
                 }
                 if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$31
                 }
                 i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                 HEAP32[($2_1 + 64 | 0) >> 2] = $4_1;
                 $827(50704 | 0, $2_1 + 64 | 0 | 0);
                }
                if (($4_1 | 0) != (1 | 0)) {
                 break label$10
                }
                if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                 break label$9
                }
                label$32 : {
                 if ($620($0_1 | 0, 1 | 0) | 0) {
                  break label$32
                 }
                 $621($0_1 | 0, 1 | 0);
                }
                $766($2_1 + 176 | 0 | 0, 1 | 0) | 0;
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                 continue label$17
                }
                $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               }
               $3_1 = $776($2_1 + 176 | 0 | 0) | 0;
               if ((HEAP32[($2_1 + 180 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                continue label$13
               }
               $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               label$33 : {
                if (!($634($0_1 | 0, $3_1 | 0) | 0)) {
                 break label$33
                }
                label$34 : {
                 if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$34
                 }
                 i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[(($2_1 + 32 | 0) + 20 | 0) >> 2] = i64toi32_i32$0;
                 HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
                 HEAP32[($2_1 + 36 | 0) >> 2] = $3_1 & 255 | 0;
                 HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
                 HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
                 HEAP32[($2_1 + 40 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
                 $827(50853 | 0, $2_1 + 32 | 0 | 0);
                }
                HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 1 | 0;
                FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
                continue label$17;
               }
               $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
               if (!$3_1) {
                break label$8
               }
               label$35 : {
                $3_1 = (HEAP32[((Math_imul($3_1, 20) + $0_1 | 0) + 44 | 0) >> 2] | 0) >>> 0 < 2 >>> 0 ? 1 : 2;
                if ($620($0_1 | 0, $3_1 | 0) | 0) {
                 break label$35
                }
                $621($0_1 | 0, $3_1 | 0);
               }
               $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                continue label$13
               }
               continue label$17;
              case 1:
               $4_1 = $618($0_1 | 0) | 0;
               if (!$4_1) {
                break label$7
               }
               label$36 : {
                if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$36
                }
                if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$36
                }
                $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                HEAP32[($2_1 + 100 | 0) >> 2] = $3_1;
                HEAP32[($2_1 + 96 | 0) >> 2] = $6_1;
                $827(50909 | 0, $2_1 + 96 | 0 | 0);
               }
               $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
               $3_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $3_1 : $4_1;
               $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
               label$37 : {
                if (!($620($0_1 | 0, $3_1 | 0) | 0)) {
                 break label$37
                }
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                continue label$13;
               }
               $621($0_1 | 0, $3_1 | 0);
               HEAP32[($0_1 + 16 | 0) >> 2] = 0;
               $3_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               if ($3_1) {
                continue label$13
               }
               continue label$17;
              case 4:
               break label$14;
              case 2:
               break label$18;
              default:
               continue label$13;
              };
             }
             $4_1 = $618($0_1 | 0) | 0;
             if (!$4_1) {
              break label$6
             }
             label$38 : {
              if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$38
              }
              if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$38
              }
              $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
              HEAP32[($2_1 + 148 | 0) >> 2] = $3_1;
              HEAP32[($2_1 + 144 | 0) >> 2] = $6_1;
              $827(50942 | 0, $2_1 + 144 | 0 | 0);
             }
             $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             label$39 : {
              label$40 : {
               if (!$3_1) {
                break label$40
               }
               $6_1 = $7_1;
               break label$39;
              }
              $6_1 = 0;
              if ($7_1) {
               continue label$13
              }
             }
             $3_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $3_1 : $6_1;
             label$41 : {
              if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$41
              }
              if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$41
              }
              $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
              HEAP32[(($2_1 + 112 | 0) + 16 | 0) >> 2] = $3_1;
              HEAP32[($2_1 + 124 | 0) >> 2] = $6_1 >>> 24 | 0;
              HEAP32[($2_1 + 112 | 0) >> 2] = $6_1 & 255 | 0;
              HEAP32[($2_1 + 120 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
              HEAP32[($2_1 + 116 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
              $827(50975 | 0, $2_1 + 112 | 0 | 0);
             }
             $622($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
             label$42 : {
              $6_1 = $635($0_1 | 0) | 0;
              if (!$6_1) {
               break label$42
              }
              $6_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
              if (!$6_1) {
               break label$42
              }
              $622($0_1 | 0, $6_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
             }
             $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
             $631($0_1 | 0, $2_1 + 176 | 0 | 0);
             label$43 : {
              if ($620($0_1 | 0, $3_1 | 0) | 0) {
               break label$43
              }
              HEAP32[($0_1 + 32 | 0) >> 2] = 0;
              $621($0_1 | 0, $3_1 | 0);
              HEAP32[($0_1 + 16 | 0) >> 2] = 0;
             }
             if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
              continue label$17
             }
             break label$17;
            };
           }
           label$44 : {
            $9_1 = $2_1 + 192 | 0;
            if ($9_1 >>> 0 < global$2 >>> 0) {
             fimport$11()
            }
            global$0 = $9_1;
           }
           return $5_1 | 0;
          }
          $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
          $631($0_1 | 0, $2_1 + 176 | 0 | 0);
          continue label$13;
         };
        }
        $859(50737 | 0, 50048 | 0, 699 | 0);
        abort();
       }
       $859(50796 | 0, 50048 | 0, 733 | 0);
       abort();
      }
      $859(50737 | 0, 50048 | 0, 739 | 0);
      abort();
     }
     $859(50832 | 0, 50048 | 0, 741 | 0);
     abort();
    }
    $859(50832 | 0, 50048 | 0, 769 | 0);
    abort();
   }
   $859(50796 | 0, 50048 | 0, 787 | 0);
   abort();
  }
  $859(50796 | 0, 50048 | 0, 800 | 0);
  abort();
 }
 
 function $631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $34_1 = 0, $36$hi = 0, $38$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $754($1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(51139 | 0, $2_1 + 16 | 0 | 0);
  }
  $3_1 = $754($1_1 | 0) | 0;
  $4_1 = $0_1 + 24 | 0;
  $34_1 = $4_1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $38$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $36$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $38$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $34_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  label$4 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(51162 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
     break label$4
    }
    $4_1 = $776($1_1 | 0) | 0;
    break label$3;
   }
   $4_1 = $778($1_1 | 0) | 0;
  }
  label$5 : {
   if ($4_1) {
    break label$5
   }
   $4_1 = -16;
   if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = -16;
   HEAP32[($2_1 + 100 | 0) >> 2] = -16;
   HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
   $827(51181 | 0, $2_1 + 96 | 0 | 0);
  }
  $5_1 = 0;
  label$6 : {
   label$7 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$7
    }
    label$8 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 76 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 72 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(51231 | 0, $2_1 + 64 | 0 | 0);
    }
    $6_1 = $776($1_1 | 0) | 0;
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$7
    }
    label$9 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$9
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1 >>> 24 | 0;
     HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
     HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(51263 | 0, $2_1 + 16 | 0 | 0);
    }
    label$10 : {
     if ($4_1 >>> 0 < 4 >>> 0) {
      break label$10
     }
     if (($3_1 | 0) != (HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0)) {
      break label$10
     }
     $5_1 = 0;
     if ((FUNCTION_TABLE[HEAP32[($0_1 + 232 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0, $6_1) | 0 | 0) == (1 | 0)) {
      break label$6
     }
     $636($0_1 | 0, $6_1 | 0, $4_1 | 0, 4 | 0, 0 | 0) | 0;
     $5_1 = 1;
     break label$6;
    }
    label$11 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$11
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(51311 | 0, $2_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 4;
    $5_1 = 1;
    $1_1 = $0_1 + 52 | 0;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
    break label$6;
   }
   $769($1_1 | 0, $2_1 + 104 | 0 | 0);
  }
  label$12 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 160 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($2_1 + 152 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 156 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
     break label$4
    }
    $4_1 = $776($1_1 | 0) | 0;
    break label$3;
   }
   $4_1 = $778($1_1 | 0) | 0;
  }
  $5_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$8
      }
      label$9 : {
       label$10 : {
        if (($3_1 | 0) == (HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0)) {
         break label$10
        }
        $6_1 = 0;
        $7_1 = 0;
        if (($3_1 | 0) != (HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0)) {
         break label$9
        }
       }
       $3_1 = $776($1_1 | 0) | 0;
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
       $7_1 = 4;
       $6_1 = 1;
      }
      $1_1 = $618($0_1 | 0) | 0;
      if (!$1_1) {
       break label$7
      }
      $620($0_1 | 0, 8 | 0) | 0;
      label$11 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$11
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$11
       }
       HEAP32[(($2_1 + 128 | 0) + 16 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 140 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 128 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 136 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 132 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51379 | 0, $2_1 + 128 | 0 | 0);
      }
      label$12 : {
       if ($4_1) {
        break label$12
       }
       $4_1 = 0;
       label$13 : {
        if (($3_1 | 0) != (1635017060 | 0)) {
         break label$13
        }
        $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       }
       if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($2_1 + 116 | 0) >> 2] = $4_1;
       HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
       HEAP32[($2_1 + 100 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 108 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 104 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51409 | 0, $2_1 + 96 | 0 | 0);
      }
      $5_1 = $634($0_1 | 0, $3_1 | 0) | 0;
      label$14 : {
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0) >>> 0 >= $4_1 >>> 0) {
        break label$14
       }
       label$15 : {
        if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
        HEAP32[$2_1 >> 2] = $0_1;
        $827(51475 | 0, $2_1 | 0);
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 3;
       $5_1 = 1;
       $1_1 = $0_1 + 44 | 0;
       HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
       FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
       break label$5;
      }
      label$16 : {
       if (!($636($0_1 | 0, $3_1 | 0, $4_1 | 0, $7_1 | 0, ($6_1 ? $5_1 : 0) | 0) | 0)) {
        break label$16
       }
       label$17 : {
        if (!$6_1) {
         break label$17
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 0;
        $5_1 = 1;
        if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$5
        }
        if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
        HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
        $827(51525 | 0, $2_1 + 16 | 0 | 0);
        break label$5;
       }
       label$18 : {
        label$19 : {
         if ($5_1) {
          break label$19
         }
         if (!(HEAP32[($1_1 + 8 | 0) >> 2] | 0)) {
          break label$18
         }
        }
        label$20 : {
         if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$20
         }
         if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$20
         }
         HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
         HEAP32[($2_1 + 48 | 0) >> 2] = $5_1;
         HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 & 255 | 0;
         HEAP32[($2_1 + 60 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 56 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
         $827(51542 | 0, $2_1 + 48 | 0 | 0);
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 2;
        HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
        HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
        $5_1 = 1;
        break label$5;
       }
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 44 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 40 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 36 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51570 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 92 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 80 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 88 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 84 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(51570 | 0, $2_1 + 80 | 0 | 0);
      break label$6;
     }
     $769($1_1 | 0, $2_1 + 152 | 0 | 0);
     break label$5;
    }
    $859(51372 | 0, 50048 | 0, 292 | 0);
    abort();
   }
   $5_1 = 1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  }
  label$21 : {
   $9_1 = $2_1 + 160 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (Math_imul($1_1, 20) + ($0_1 + 56 | 0) | 0) + -36 | 0 : 0) | 0;
 }
 
 function $636($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $12_1 = 0, $11_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $64$hi = 0, $67$hi = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $6_1 = 0;
  label$3 : {
   label$4 : {
    $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if ($7_1 >>> 0 > 7 >>> 0) {
     break label$4
    }
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     break label$3
    }
    $6_1 = ($0_1 + 56 | 0) + Math_imul($7_1, 20) | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
    $8_1 = $6_1 + 8 | 0;
    $9_1 = $2_1 - $3_1 | 0;
    HEAP32[$8_1 >> 2] = $9_1;
    $10_1 = $6_1 + 4 | 0;
    HEAP32[$10_1 >> 2] = $2_1;
    $6_1 = 1;
    HEAP32[($0_1 + 56 | 0) >> 2] = $7_1 + 1 | 0;
    $622($0_1 | 0, $4_1 | 0, 0 | 0, 0 | 0, 0 | 0, $9_1 | 0, 0 | 0);
    $59_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
    $60_1 = $1_1;
    $61_1 = $9_1;
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $64$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $67$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $64$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $67$hi;
    i64toi32_i32$3 = $3_1 + 8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 224 | 0) >> 2] | 0]($59_1, $60_1, $61_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
    $2_1 = $0_1 + 40 | 0;
    HEAP8[$2_1 >> 0] = HEAPU8[$2_1 >> 0] | 0 | ($3_1 | 0) == (1 | 0) | 0;
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $3_1 = HEAP32[$8_1 >> 2] | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$5_1 >> 2] = $0_1 + -1 | 0;
    $827(51346 | 0, $5_1 | 0);
   }
   label$5 : {
    $12_1 = $5_1 + 16 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $6_1 | 0;
  }
  $859(51333 | 0, 50048 | 0, 179 | 0);
  abort();
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $4_1 = 105;
  HEAP8[($1_1 + 14 | 0) >> 0] = $4_1;
  HEAP8[($1_1 + 15 | 0) >> 0] = $4_1 >>> 8 | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$14(51662 | 0, $1_1 + 14 | 0 | 0, $1_1 | 0) | 0;
  label$3 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $638() {
  var $0_1 = 0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = global$0 - 16 | 0;
   $1_1 = $0_1;
   if ($0_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1_1;
  }
  HEAP8[($0_1 + 15 | 0) >> 0] = 0;
  fimport$14(51771 | 0, $0_1 + 15 | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $2_1 = $0_1 + 16 | 0;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
 }
 
 function $639($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[$5_1 >> 2] = $661($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 + 28 | 0 | 0, $5_1 + 24 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  $3_1 = $887($3_1 | 0, $4_1 | 0, 51811 | 0, $5_1 | 0) | 0;
  label$3 : {
   $7_1 = $5_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  var $20_1 = 0, $5_1 = 0, $7_1 = 0, $19_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $17_1 = 0, $12_1 = 0, $18_1 = 0, $1_1 = 0, $11_1 = 0, $21_1 = 0, $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $28_1 = 0, $23_1 = 0, $22_1 = 0, $331_1 = 0, $374_1 = 0;
  label$1 : {
   $1_1 = global$0 - 1824 | 0;
   $22_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    $2_1 = 0;
    $3_1 = 0;
    $4_1 = 0;
    $5_1 = 0;
    label$5 : {
     switch ((HEAPU8[$0_1 >> 0] | 0) + -49 | 0 | 0) {
     case 0:
      $3_1 = 1;
      $2_1 = $1_1 + 448 | 0;
      $4_1 = $1_1 + 1152 | 0;
      break;
     case 1:
      break label$5;
     default:
      break label$3;
     };
    }
    $974($1_1 + 1152 | 0 | 0, 0 | 0, 640 | 0) | 0;
    $974($1_1 + 448 | 0 | 0, 0 | 0, 704 | 0) | 0;
    $6_1 = $974($1_1 | 0, 0 | 0, 448 | 0) | 0;
    $7_1 = 1;
    $5_1 = 0;
    $8_1 = 0;
    $9_1 = 0;
    $10_1 = 0;
    $11_1 = 0;
    $12_1 = 0;
    $13_1 = 0;
    $14_1 = 0;
    $15_1 = 0;
    $16_1 = 0;
    $17_1 = 0;
    $18_1 = 0;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               $19_1 = HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0;
               if (($19_1 | 0) == (124 | 0)) {
                break label$17
               }
               if ($19_1) {
                break label$16
               }
              }
              if (!$5_1) {
               break label$9
              }
              $20_1 = ($6_1 + 1792 | 0) + $5_1 | 0;
              $5_1 = 0;
              HEAP8[$20_1 >> 0] = 0;
              $20_1 = $875($6_1 + 1792 | 0 | 0, 61 | 0) | 0;
              if (!$20_1) {
               break label$3
              }
              HEAP8[$20_1 >> 0] = 0;
              $20_1 = $20_1 + 1 | 0;
              label$18 : {
               if ($869($6_1 + 1792 | 0 | 0, 51856 | 0, 3 | 0) | 0) {
                break label$18
               }
               $5_1 = 0;
               $8_1 = $641($20_1 | 0) | 0;
               if ($8_1) {
                break label$8
               }
               break label$3;
              }
              label$19 : {
               if ($869($6_1 + 1792 | 0 | 0, 51859 | 0, 3 | 0) | 0) {
                break label$19
               }
               $5_1 = 0;
               $9_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$20 : {
               if ($869($6_1 + 1792 | 0 | 0, 51862 | 0, 3 | 0) | 0) {
                break label$20
               }
               $10_1 = !($877($20_1 | 0, 51865 | 0) | 0);
               break label$9;
              }
              label$21 : {
               if ($869($6_1 + 1792 | 0 | 0, 51867 | 0, 3 | 0) | 0) {
                break label$21
               }
               label$22 : {
                label$23 : {
                 label$24 : {
                  if ($3_1) {
                   break label$24
                  }
                  $4_1 = 0;
                  if (($11_1 | 0) != (16 | 0)) {
                   break label$23
                  }
                  $11_1 = 16;
                  break label$9;
                 }
                 if ($4_1) {
                  break label$22
                 }
                 break label$10;
                }
                $4_1 = ($6_1 + 1152 | 0) + Math_imul($11_1, 40) | 0;
                $11_1 = $11_1 + 1 | 0;
               }
               HEAP32[($4_1 + 28 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$9;
              }
              label$25 : {
               if ($869($6_1 + 1792 | 0 | 0, 51870 | 0, 3 | 0) | 0) {
                break label$25
               }
               $20_1 = $642($20_1 | 0) | 0;
               if (!$20_1) {
                break label$3
               }
               $5_1 = 0;
               if ($4_1) {
                break label$15
               }
               break label$11;
              }
              label$26 : {
               label$27 : {
                $21_1 = HEAP32[($6_1 + 1792 | 0) >> 2] | 0;
                if (($21_1 | 0) == (5395265 | 0)) {
                 break label$27
                }
                if (($21_1 | 0) != (4735809 | 0)) {
                 break label$26
                }
                $5_1 = 0;
                if (!$4_1) {
                 break label$11
                }
                HEAP32[($4_1 + 20 | 0) >> 2] = $936($20_1 | 0) | 0;
                break label$8;
               }
               $5_1 = 0;
               if (!$4_1) {
                break label$11
               }
               HEAP32[($4_1 + 24 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$28 : {
               if ($869($6_1 + 1792 | 0 | 0, 51873 | 0, 3 | 0) | 0) {
                break label$28
               }
               if (!$4_1) {
                break label$10
               }
               $5_1 = 0;
               HEAP32[($4_1 + 36 | 0) >> 2] = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              label$29 : {
               if ($869($6_1 + 1792 | 0 | 0, 51876 | 0, 3 | 0) | 0) {
                break label$29
               }
               label$30 : {
                label$31 : {
                 label$32 : {
                  if ($3_1) {
                   break label$32
                  }
                  $2_1 = 0;
                  if (($12_1 | 0) != (16 | 0)) {
                   break label$31
                  }
                  $12_1 = 16;
                  break label$9;
                 }
                 if ($2_1) {
                  break label$30
                 }
                 break label$12;
                }
                $2_1 = ($6_1 + 448 | 0) + Math_imul($12_1, 44) | 0;
                $12_1 = $12_1 + 1 | 0;
               }
               HEAP32[($2_1 + 20 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$9;
              }
              label$33 : {
               if ($869($6_1 + 1792 | 0 | 0, 51879 | 0, 3 | 0) | 0) {
                break label$33
               }
               $20_1 = $643($20_1 | 0) | 0;
               if (!$20_1) {
                break label$3
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAP32[($2_1 + 16 | 0) >> 2] = $20_1;
               break label$8;
              }
              label$34 : {
               if ($869($6_1 + 1792 | 0 | 0, 51882 | 0, 3 | 0) | 0) {
                break label$34
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAP32[($2_1 + 32 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$35 : {
               if ($869($6_1 + 1792 | 0 | 0, 51885 | 0, 3 | 0) | 0) {
                break label$35
               }
               if (!$2_1) {
                break label$12
               }
               $5_1 = 0;
               HEAP32[($2_1 + 36 | 0) >> 2] = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              label$36 : {
               if (($21_1 | 0) != (5391958 | 0)) {
                break label$36
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround(+$928($20_1 | 0));
               break label$8;
              }
              label$37 : {
               label$38 : {
                label$39 : {
                 label$40 : {
                  label$41 : {
                   if (!($869($6_1 + 1792 | 0 | 0, 51888 | 0, 3 | 0) | 0)) {
                    break label$41
                   }
                   if ($869($6_1 + 1792 | 0 | 0, 51891 | 0, 3 | 0) | 0) {
                    break label$40
                   }
                  }
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     if ($3_1) {
                      break label$44
                     }
                     $17_1 = 0;
                     if (($18_1 | 0) != (16 | 0)) {
                      break label$43
                     }
                     $18_1 = 16;
                     break label$9;
                    }
                    if (!$17_1) {
                     break label$39
                    }
                    $21_1 = $18_1;
                    break label$42;
                   }
                   $21_1 = $18_1 + 1 | 0;
                   $17_1 = $6_1 + Math_imul($18_1, 28) | 0;
                  }
                  $5_1 = $869($6_1 + 1792 | 0 | 0, 51891 | 0, 3 | 0) | 0;
                  HEAP8[$17_1 >> 0] = !$5_1;
                  $20_1 = $936($20_1 | 0) | 0;
                  label$45 : {
                   if ($5_1) {
                    break label$45
                   }
                   HEAP32[($17_1 + 24 | 0) >> 2] = $20_1;
                   break label$14;
                  }
                  HEAP32[($17_1 + 20 | 0) >> 2] = $20_1;
                  break label$14;
                 }
                 label$46 : {
                  if (!($869($6_1 + 1792 | 0 | 0, 51894 | 0, 3 | 0) | 0)) {
                   break label$46
                  }
                  if ($869($6_1 + 1792 | 0 | 0, 51897 | 0, 3 | 0) | 0) {
                   break label$37
                  }
                 }
                 if ($17_1) {
                  break label$38
                 }
                }
                $17_1 = 0;
                break label$9;
               }
               $879($17_1 + 1 | 0 | 0, $20_1 | 0, 16 | 0) | 0;
               $5_1 = 0;
               HEAP8[($17_1 + 16 | 0) >> 0] = 0;
               break label$8;
              }
              label$47 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (87 | 0)) {
                break label$47
               }
               $5_1 = 0;
               $16_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$48 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (72 | 0)) {
                break label$48
               }
               $5_1 = 0;
               $15_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$49 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (68 | 0)) {
                break label$49
               }
               $5_1 = 0;
               $14_1 = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              $5_1 = 0;
              if ($869($6_1 + 1792 | 0 | 0, 51900 | 0, 3 | 0) | 0) {
               break label$8
              }
              $5_1 = 0;
              $13_1 = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
              break label$8;
             }
             HEAP8[(($6_1 + 1792 | 0) + $5_1 | 0) >> 0] = $19_1;
             $5_1 = $5_1 + 1 | 0;
             if ($5_1 >>> 0 > 18 >>> 0) {
              break label$4
             }
             break label$8;
            }
            HEAP32[($4_1 + 16 | 0) >> 2] = $20_1;
            break label$8;
           }
           $5_1 = 0;
           $18_1 = $21_1;
           break label$8;
          }
          $2_1 = 0;
          break label$8;
         }
         $2_1 = 0;
         break label$9;
        }
        $4_1 = 0;
        break label$8;
       }
       $4_1 = 0;
      }
      $5_1 = 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if ($19_1) {
      continue label$7
     }
     break label$7;
    };
    label$50 : {
     label$51 : {
      if (($8_1 | 0) != (4 | 0)) {
       break label$51
      }
      $5_1 = $813(44 | 0) | 0;
      $7_1 = $974($5_1 | 0, 0 | 0, 44 | 0) | 0;
      $19_1 = $220() | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = 4;
      HEAP32[($7_1 + 32 | 0) >> 2] = $19_1;
      $7_1 = $7_1 + 40 | 0;
      break label$50;
     }
     $5_1 = $813(40 | 0) | 0;
     $7_1 = $974($5_1 | 0, 0 | 0, 40 | 0) | 0;
     HEAP32[($7_1 + 32 | 0) >> 2] = $220() | 0;
     $7_1 = $7_1 + 8 | 0;
     $9_1 = $8_1;
    }
    HEAP32[$7_1 >> 2] = $9_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $13_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = $14_1;
    label$52 : {
     if (!($10_1 & 1 | 0)) {
      break label$52
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    }
    label$53 : {
     label$54 : {
      label$55 : {
       if (!$3_1) {
        break label$55
       }
       $20_1 = 1;
       $12_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0 ? 1 : $12_1;
       if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
        break label$54
       }
      }
      $20_1 = $11_1;
      if (!$20_1) {
       break label$53
      }
     }
     $0_1 = 0;
     label$56 : while (1) {
      $7_1 = $974($813(536 | 0) | 0 | 0, 0 | 0, 536 | 0) | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = 1;
      $19_1 = ($6_1 + 1152 | 0) + Math_imul($0_1, 40) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($19_1 + 28 | 0) >> 2] | 0;
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($19_1 + 16 | 0) >> 2] | 0;
      HEAP8[($7_1 + 24 | 0) >> 0] = HEAP32[($19_1 + 20 | 0) >> 2] | 0;
      HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($19_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($19_1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      $331_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1;
      HEAP32[($7_1 + 336 | 0) >> 2] = $331_1;
      HEAP32[($7_1 + 340 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$57 : {
       label$58 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$58
        }
        $19_1 = $5_1;
        break label$57;
       }
       $19_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$19_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($20_1 | 0)) {
       continue label$56
      }
      break label$56;
     };
    }
    label$59 : {
     label$60 : {
      if ($12_1) {
       break label$60
      }
      $0_1 = 0;
      break label$59;
     }
     $20_1 = 0;
     $0_1 = 0;
     label$61 : while (1) {
      $7_1 = $974($813(536 | 0) | 0 | 0, 0 | 0, 536 | 0) | 0;
      $19_1 = ($6_1 + 448 | 0) + Math_imul($20_1, 44) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($19_1 + 20 | 0) >> 2] | 0;
      $4_1 = HEAP32[($19_1 + 16 | 0) >> 2] | 0;
      HEAP16[($7_1 + 30 | 0) >> 1] = $15_1;
      HEAP16[($7_1 + 28 | 0) >> 1] = $16_1;
      HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 320 | 0) >> 2] = HEAP32[($19_1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($19_1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $374_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 336 | 0) >> 2] = $374_1;
      HEAP32[($7_1 + 340 | 0) >> 2] = i64toi32_i32$0;
      $19_1 = HEAPU8[($19_1 + 32 | 0) >> 0] | 0;
      HEAP8[($7_1 + 42 | 0) >> 0] = $19_1;
      HEAP8[($7_1 + 41 | 0) >> 0] = $19_1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$62 : {
       label$63 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$63
        }
        $19_1 = $5_1;
        break label$62;
       }
       $19_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$19_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
      $0_1 = $0_1 ? $0_1 : $7_1;
      $20_1 = $20_1 + 1 | 0;
      if (($20_1 | 0) != ($12_1 | 0)) {
       continue label$61
      }
      break label$61;
     };
    }
    if (!$18_1) {
     break label$3
    }
    $19_1 = 0;
    label$64 : while (1) {
     $7_1 = $974($813(436 | 0) | 0 | 0, 0 | 0, 436 | 0) | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = 37119;
     label$65 : {
      $20_1 = $6_1 + Math_imul($19_1, 28) | 0;
      if (HEAPU8[$20_1 >> 0] | 0) {
       break label$65
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = 4;
      $4_1 = HEAP32[($20_1 + 20 | 0) >> 2] | 0;
      HEAP8[($7_1 + 340 | 0) >> 0] = 1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      $879($7_1 + 341 | 0 | 0, $20_1 | 1 | 0 | 0, 4 | 0) | 0;
      HEAP8[($7_1 + 344 | 0) >> 0] = 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$66 : {
       label$67 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$67
        }
        $20_1 = $5_1;
        break label$66;
       }
       $20_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$20_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
     }
     $19_1 = $19_1 + 1 | 0;
     if (($19_1 | 0) != ($18_1 | 0)) {
      continue label$64
     }
     break label$64;
    };
    if (!$0_1) {
     break label$3
    }
    $7_1 = 0;
    label$68 : while (1) {
     label$69 : {
      $19_1 = $6_1 + Math_imul($7_1, 28) | 0;
      if (!(HEAPU8[$19_1 >> 0] | 0)) {
       break label$69
      }
      $20_1 = HEAP32[($0_1 + 316 | 0) >> 2] | 0;
      if (($20_1 | 0) > (30 | 0)) {
       break label$69
      }
      HEAP32[($0_1 + 316 | 0) >> 2] = $20_1 + 1 | 0;
      $20_1 = $0_1 + ($20_1 << 3 | 0) | 0;
      $879($20_1 + 68 | 0 | 0, $19_1 | 1 | 0 | 0, 3 | 0) | 0;
      $20_1 = $20_1 + 71 | 0;
      $28_1 = ((HEAPU16[($19_1 + 24 | 0) >> 1] | 0) << 2 | 0) & 252 | 0 | ((HEAPU8[$20_1 >> 0] | 0 | ((HEAPU8[($20_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0) & 65283 | 0) | 0;
      HEAP8[$20_1 >> 0] = $28_1;
      HEAP8[($20_1 + 1 | 0) >> 0] = $28_1 >>> 8 | 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($18_1 | 0)) {
      continue label$68
     }
     break label$3;
    };
   }
   $5_1 = 0;
  }
  label$70 : {
   $23_1 = $1_1 + 1824 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $5_1 | 0;
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52240 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52244 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (12 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52400 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52404 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (19 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52672 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52676 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (11 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $644($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    $5_1 = $893($0_1 | 0, 51903 | 0) | 0;
    if ($5_1) {
     break label$4
    }
    $0_1 = -1;
    break label$3;
   }
   $6_1 = $974($1_1 | 0, 0 | 0, $2_1 | 0) | 0;
   $645();
   label$5 : {
    if (!($3_1 & 2 | 0)) {
     break label$5
    }
    $839(2 | 0) | 0;
   }
   $7_1 = $78($5_1 | 0) | 0;
   $8_1 = $196() | 0;
   $216($4_1 | 0);
   HEAP8[($4_1 + 57 | 0) >> 0] = 1;
   HEAP8[($4_1 + 11 | 0) >> 0] = 1;
   label$6 : {
    label$7 : {
     $1_1 = $203($8_1 | 0, $7_1 | 0, $4_1 | 0) | 0;
     if ($1_1) {
      break label$7
     }
     $0_1 = -2;
     break label$6;
    }
    label$8 : {
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$0_1) {
      break label$8
     }
     label$9 : while (1) {
      label$10 : {
       if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$10
       }
       if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (138 | 0)) {
        break label$10
       }
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
        break label$10
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 139;
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$9
      }
      break label$9;
     };
    }
    $0_1 = $646($1_1 | 0, $6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $213($8_1 | 0, $1_1 | 0);
   }
   $79($7_1 | 0);
   $883($5_1 | 0) | 0;
   $197($8_1 | 0);
   $647();
  }
  label$11 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $645() {
  $816() | 0;
  $842() | 0;
 }
 
 function $646($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $4_1 = global$0 - 2592 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 748 | 0) >> 2] = 0;
  $974($4_1 + 752 | 0 | 0, 0 | 0, 1836 | 0) | 0;
  $5_1 = -3;
  label$3 : {
   if (!($652($0_1 | 0, $3_1 | 0, $4_1 + 752 | 0 | 0, 188 | 0, 189 | 0, 190 | 0, 191 | 0) | 0)) {
    break label$3
   }
   HEAP16[($4_1 + 720 | 0) >> 1] = 50;
   HEAP32[($4_1 + 704 | 0) >> 2] = 50;
   $5_1 = -4;
   if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52825 | 0, $4_1 + 704 | 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = $4_1 + 2556 | 0;
   HEAP32[($4_1 + 688 | 0) >> 2] = $0_1;
   $887($4_1 + 720 | 0 | 0, 20 | 0, 52843 | 0, $4_1 + 688 | 0 | 0) | 0;
   HEAP32[($4_1 + 672 | 0) >> 2] = $0_1;
   if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52850 | 0, $4_1 + 672 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[($4_1 + 2572 | 0) >> 2] | 0;
    if (($0_1 | 0) < (1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 656 | 0) >> 2] = $0_1;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 52870 | 0, $4_1 + 656 | 0 | 0) | 0;
    HEAP32[($4_1 + 640 | 0) >> 2] = HEAP32[($4_1 + 2572 | 0) >> 2] | 0;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52877 | 0, $4_1 + 640 | 0 | 0) | 0)) {
     break label$3
    }
   }
   label$5 : {
    if (!(HEAPU8[($4_1 + 2576 | 0) >> 0] | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 624 | 0) >> 2] = 89;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 52897 | 0, $4_1 + 624 | 0 | 0) | 0;
    HEAP32[($4_1 + 608 | 0) >> 2] = 89;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52904 | 0, $4_1 + 608 | 0 | 0) | 0)) {
     break label$3
    }
   }
   label$6 : {
    if (!(HEAP32[($4_1 + 752 | 0) >> 2] | 0)) {
     break label$6
    }
    $6_1 = 0;
    label$7 : while (1) {
     $0_1 = ($4_1 + 752 | 0) + Math_imul($6_1, 40) | 0;
     $7_1 = $0_1 + 32 | 0;
     HEAP32[($4_1 + 592 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52922 | 0, $4_1 + 592 | 0 | 0) | 0;
     HEAP32[($4_1 + 576 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52929 | 0, $4_1 + 576 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 | 4 | 0;
     HEAP32[($4_1 + 560 | 0) >> 2] = $7_1;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52948 | 0, $4_1 + 560 | 0 | 0) | 0;
     HEAP32[($4_1 + 544 | 0) >> 2] = $7_1;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52955 | 0, $4_1 + 544 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 24 | 0;
     HEAP32[($4_1 + 528 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52976 | 0, $4_1 + 528 | 0 | 0) | 0;
     HEAP32[($4_1 + 512 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52984 | 0, $4_1 + 512 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 28 | 0;
     HEAP32[($4_1 + 496 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53012 | 0, $4_1 + 496 | 0 | 0) | 0;
     HEAP32[($4_1 + 480 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53020 | 0, $4_1 + 480 | 0 | 0) | 0)) {
      break label$3
     }
     label$8 : {
      $7_1 = $0_1 + 40 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$8
      }
      HEAP32[($4_1 + 464 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53046 | 0, $4_1 + 464 | 0 | 0) | 0;
      HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53056 | 0, $4_1 + 448 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$9 : {
      $0_1 = $0_1 + 36 | 0;
      $7_1 = HEAP32[$0_1 >> 2] | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break label$9
      }
      HEAP32[($4_1 + 432 | 0) >> 2] = $7_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53081 | 0, $4_1 + 432 | 0 | 0) | 0;
      HEAP32[($4_1 + 416 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53090 | 0, $4_1 + 416 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $6_1 = $6_1 + 1 | 0;
     if ($6_1 >>> 0 < (HEAP32[($4_1 + 752 | 0) >> 2] | 0) >>> 0) {
      continue label$7
     }
     break label$7;
    };
   }
   label$10 : {
    if (!(HEAP32[($4_1 + 1396 | 0) >> 2] | 0)) {
     break label$10
    }
    $6_1 = 0;
    label$11 : while (1) {
     $0_1 = ($4_1 + 752 | 0) + Math_imul($6_1, 44) | 0;
     $7_1 = $0_1 + 668 | 0;
     HEAP32[($4_1 + 400 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53114 | 0, $4_1 + 400 | 0 | 0) | 0;
     HEAP32[($4_1 + 384 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53121 | 0, $4_1 + 384 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 648 | 0;
     HEAP32[($4_1 + 368 | 0) >> 2] = $7_1;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53140 | 0, $4_1 + 368 | 0 | 0) | 0;
     HEAP32[($4_1 + 352 | 0) >> 2] = $7_1;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53147 | 0, $4_1 + 352 | 0 | 0) | 0)) {
      break label$3
     }
     label$12 : {
      $7_1 = $0_1 + 672 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (($8_1 | 0) < (1 | 0)) {
       break label$12
      }
      HEAP32[($4_1 + 336 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53168 | 0, $4_1 + 336 | 0 | 0) | 0;
      HEAP32[($4_1 + 320 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53174 | 0, $4_1 + 320 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$13 : {
      $7_1 = $0_1 + 676 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (($8_1 | 0) < (1 | 0)) {
       break label$13
      }
      HEAP32[($4_1 + 304 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53190 | 0, $4_1 + 304 | 0 | 0) | 0;
      HEAP32[($4_1 + 288 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53196 | 0, $4_1 + 288 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$14 : {
      $7_1 = $0_1 + 684 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$14
      }
      HEAP32[($4_1 + 272 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53213 | 0, $4_1 + 272 | 0 | 0) | 0;
      HEAP32[($4_1 + 256 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53223 | 0, $4_1 + 256 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $7_1 = $0_1 + 680 | 0;
     HEAP32[($4_1 + 240 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53248 | 0, $4_1 + 240 | 0 | 0) | 0;
     HEAP32[($4_1 + 224 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53255 | 0, $4_1 + 224 | 0 | 0) | 0)) {
      break label$3
     }
     $0_1 = $0_1 + 688 | 0;
     HEAPF64[($4_1 + 208 | 0) >> 3] = +Math_fround(HEAPF32[$0_1 >> 2]);
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53276 | 0, $4_1 + 208 | 0 | 0) | 0;
     HEAPF64[($4_1 + 192 | 0) >> 3] = +Math_fround(HEAPF32[$0_1 >> 2]);
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53284 | 0, $4_1 + 192 | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     if ($6_1 >>> 0 < (HEAP32[($4_1 + 1396 | 0) >> 2] | 0) >>> 0) {
      continue label$11
     }
     break label$11;
    };
   }
   label$15 : {
    if (!(HEAP32[($4_1 + 2104 | 0) >> 2] | 0)) {
     break label$15
    }
    $0_1 = 0;
    label$16 : while (1) {
     label$17 : {
      label$18 : {
       $6_1 = ($4_1 + 752 | 0) + Math_imul($0_1, 28) | 0;
       if (!(HEAPU8[($6_1 + 1356 | 0) >> 0] | 0)) {
        break label$18
       }
       $7_1 = $6_1 + 1380 | 0;
       HEAP32[($4_1 + 176 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
       $887($4_1 + 720 | 0 | 0, 20 | 0, 53309 | 0, $4_1 + 176 | 0 | 0) | 0;
       HEAP32[($4_1 + 160 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
       if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53316 | 0, $4_1 + 160 | 0 | 0) | 0)) {
        break label$3
       }
       $6_1 = $6_1 + 1357 | 0;
       HEAP32[($4_1 + 144 | 0) >> 2] = $6_1;
       $887($4_1 + 720 | 0 | 0, 20 | 0, 53341 | 0, $4_1 + 144 | 0 | 0) | 0;
       HEAP32[($4_1 + 128 | 0) >> 2] = $6_1;
       if ($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53348 | 0, $4_1 + 128 | 0 | 0) | 0) {
        break label$17
       }
       break label$3;
      }
      $7_1 = $6_1 + 1376 | 0;
      HEAP32[($4_1 + 112 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53374 | 0, $4_1 + 112 | 0 | 0) | 0;
      HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53381 | 0, $4_1 + 96 | 0 | 0) | 0)) {
       break label$3
      }
      $6_1 = $6_1 + 1357 | 0;
      HEAP32[($4_1 + 80 | 0) >> 2] = $6_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53403 | 0, $4_1 + 80 | 0 | 0) | 0;
      HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53410 | 0, $4_1 + 64 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $0_1 = $0_1 + 1 | 0;
     if ($0_1 >>> 0 < (HEAP32[($4_1 + 2104 | 0) >> 2] | 0) >>> 0) {
      continue label$16
     }
     break label$16;
    };
   }
   label$19 : {
    $0_1 = HEAP32[($4_1 + 2580 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$19
    }
    HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 53437 | 0, $4_1 + 48 | 0 | 0) | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 2580 | 0) >> 2] | 0;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53446 | 0, $4_1 + 32 | 0 | 0) | 0)) {
     break label$3
    }
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 2584 | 0) >> 2] | 0;
   $887($4_1 + 720 | 0 | 0, 20 | 0, 53466 | 0, $4_1 + 16 | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 2584 | 0) >> 2] | 0;
   $3_1 = $653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53475 | 0, $4_1 | 0) | 0;
   $5_1 = (wasm2js_i32$0 = HEAP32[($4_1 + 748 | 0) >> 2] | 0, wasm2js_i32$1 = -4, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$20 : {
   $10_1 = $4_1 + 2592 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $647() {
  $825();
  $843();
 }
 
 function $648($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  HEAP32[($1_1 + 1832 | 0) >> 2] = $6_1;
  HEAP32[($1_1 + 1828 | 0) >> 2] = $5_1;
  HEAP8[($1_1 + 1824 | 0) >> 0] = $3_1;
  HEAP32[($1_1 + 1820 | 0) >> 2] = $4_1;
  label$1 : {
   $2_1 = $663($2_1 | 0, $0_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $879($1_1 + 1804 | 0 | 0, $2_1 | 0, 16 | 0) | 0;
  return 1 | 0;
 }
 
 function $649($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (($7_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = ($1_1 + 4 | 0) + Math_imul($7_1, 40) | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
   HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   $8_1 = HEAPU16[($2_1 + 26 | 0) >> 1] | 0;
   HEAP32[($7_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($7_1 + 32 | 0) >> 2] = $8_1;
   $2_1 = $664(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $879($7_1 | 0, $2_1 | 0, 16 | 0) | 0;
   $6_1 = 1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
  }
  return $6_1 | 0;
 }
 
 function $650($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $5_1 = 0;
  label$1 : {
   $6_1 = HEAP32[($1_1 + 644 | 0) >> 2] | 0;
   if (($6_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $6_1 = ($1_1 + 648 | 0) + Math_imul($6_1, 44) | 0;
   HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
   HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 320 | 0) >> 2] | 0;
   $2_1 = $665(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $879($6_1 | 0, $2_1 | 0, 16 | 0) | 0;
   $5_1 = 1;
   HEAP32[($1_1 + 644 | 0) >> 2] = (HEAP32[($1_1 + 644 | 0) >> 2] | 0) + 1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[($1_1 + 1352 | 0) >> 2] | 0;
   if (($7_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = ($1_1 + 1356 | 0) + Math_imul($7_1, 28) | 0;
   HEAP8[$7_1 >> 0] = $3_1;
   $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 20 | 0) >> 2] = $6_1;
   $6_1 = 1;
   $879($7_1 + 1 | 0 | 0, $5_1 | 0, 16 | 0) | 0;
   HEAP32[($1_1 + 1352 | 0) >> 2] = (HEAP32[($1_1 + 1352 | 0) >> 2] | 0) + 1 | 0;
  }
  return $6_1 | 0;
 }
 
 function $652($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $8_1 = 0, $9_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $14_1 = 0, $13_1 = 0, $12_1 = 0;
  label$1 : {
   $7_1 = global$0 - 16 | 0;
   $13_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    if ($0_1) {
     break label$4
    }
    $8_1 = 0;
    FUNCTION_TABLE[$3_1]($1_1, $2_1, 0, 0, 0, 0, 0) | 0;
    break label$3;
   }
   $8_1 = $663(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
   $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   label$5 : {
    if ($8_1) {
     break label$5
    }
    $8_1 = 0;
    FUNCTION_TABLE[$3_1]($1_1, $2_1, $9_1, 0, 0, 0, 0) | 0;
    break label$3;
   }
   $10_1 = 0;
   $11_1 = 0;
   label$6 : {
    if (($9_1 | 0) != (4 | 0)) {
     break label$6
    }
    $11_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   }
   label$7 : {
    switch ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0 | 0) {
    case 0:
    case 2:
     $10_1 = 1;
     break;
    default:
     break label$7;
    };
   }
   $8_1 = 0;
   if (!(FUNCTION_TABLE[$3_1]($1_1, $2_1, $9_1, $10_1, $11_1, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0)) {
    break label$3
   }
   label$9 : {
    $8_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$8_1) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       switch (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) {
       case 1:
        if (!($664(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
         break label$11
        }
        $10_1 = 0;
        $9_1 = 0;
        label$15 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
          break label$15
         }
         $9_1 = HEAP32[($8_1 + 336 | 0) >> 2] | 0;
        }
        label$16 : {
         label$17 : {
          $11_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
          if (($11_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
           break label$17
          }
          $3_1 = -1;
          if (($11_1 | 0) != (37119 | 0)) {
           break label$16
          }
         }
         $3_1 = -1;
         if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
          break label$16
         }
         $11_1 = $8_1 + 348 | 0;
         if (!(HEAPU8[$11_1 >> 0] | 0)) {
          break label$16
         }
         $10_1 = $11_1 + 2 | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
        }
        FUNCTION_TABLE[$4_1]($1_1, $2_1, $8_1, $9_1, $10_1, $3_1) | 0;
        break label$11;
       case 0:
        if (!($665(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
         break label$11
        }
        $9_1 = 0;
        $3_1 = 0;
        label$18 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
          break label$18
         }
         $3_1 = HEAP32[($8_1 + 336 | 0) >> 2] | 0;
        }
        label$19 : {
         if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) != (33 | 0)) {
          break label$19
         }
         label$20 : {
          if ((HEAPU8[($8_1 + 41 | 0) >> 0] | 0 | 0) == (10 | 0)) {
           break label$20
          }
          if ((HEAPU8[($8_1 + 42 | 0) >> 0] | 0 | 0) != (10 | 0)) {
           break label$19
          }
         }
         $9_1 = 10;
        }
        if (!(FUNCTION_TABLE[$5_1]($1_1, $2_1, $8_1, $3_1, $9_1) | 0)) {
         break label$11
        }
        label$21 : {
         $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
         if (($3_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
          break label$21
         }
         if (($3_1 | 0) != (37119 | 0)) {
          break label$11
         }
        }
        if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
         break label$11
        }
        $11_1 = $8_1 + 356 | 0;
        if (!(HEAPU8[$11_1 >> 0] | 0)) {
         break label$11
        }
        if (!(HEAP32[($11_1 + 4 | 0) >> 2] | 0)) {
         break label$11
        }
        $12_1 = $11_1 + 8 | 0;
        $9_1 = 0;
        label$22 : while (1) {
         $3_1 = $12_1 + ($9_1 << 3 | 0) | 0;
         HEAP8[($7_1 + 12 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
         HEAP8[($7_1 + 13 | 0) >> 0] = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
         HEAP8[($7_1 + 15 | 0) >> 0] = 0;
         HEAP8[($7_1 + 14 | 0) >> 0] = $10_1;
         if (!(FUNCTION_TABLE[$6_1]($1_1, $2_1, $8_1, 1, HEAPU8[($3_1 + 5 | 0) >> 0] | 0, $7_1 + 12 | 0) | 0)) {
          break label$11
         }
         $9_1 = $9_1 + 1 | 0;
         if ($9_1 >>> 0 >= (HEAP32[($11_1 + 4 | 0) >> 2] | 0) >>> 0) {
          break label$11
         }
         continue label$22;
        };
       case 4:
        break label$12;
       default:
        break label$11;
       };
      }
      label$23 : {
       $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       if (($3_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
        break label$23
       }
       if (($3_1 | 0) != (37119 | 0)) {
        break label$11
       }
      }
      if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
       break label$11
      }
      $3_1 = $8_1 + 340 | 0;
      if (!(HEAPU8[$3_1 >> 0] | 0)) {
       break label$11
      }
      FUNCTION_TABLE[$6_1]($1_1, $2_1, $8_1, 0, HEAPU8[($8_1 + 346 | 0) >> 0] | 0, $3_1 + 1 | 0) | 0;
     }
     $8_1 = HEAP32[$8_1 >> 2] | 0;
     if ($8_1) {
      continue label$10
     }
     break label$10;
    };
   }
   $8_1 = 1;
  }
  label$24 : {
   $14_1 = $7_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $653($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $7_1 = global$0 - 16 | 0;
   $9_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   if ($0_1 & 1 | 0) {
    break label$3
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = $6_1;
   $886($5_1 | 0, $6_1 | 0) | 0;
  }
  $5_1 = 0;
  label$4 : {
   $0_1 = HEAP32[$3_1 >> 2] | 0;
   $6_1 = $980($4_1 | 0) | 0;
   $8_1 = $0_1 + $6_1 | 0;
   if (($8_1 | 0) >= ($2_1 | 0)) {
    break label$4
   }
   $5_1 = 1;
   label$5 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$5
    }
    $2_1 = 0;
    label$6 : while (1) {
     HEAP8[($1_1 + ($0_1 + $2_1 | 0) | 0) >> 0] = HEAPU8[($4_1 + $2_1 | 0) >> 0] | 0;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($6_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $8_1 = $0_1 + $6_1 | 0;
   }
   HEAP32[$3_1 >> 2] = $8_1;
  }
  label$7 : {
   $10_1 = $7_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = $196() | 0;
  $0_1 = $640($0_1 | 0) | 0;
  $1_1 = $655($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $213($5_1 | 0, $0_1 | 0);
  }
  $197($5_1 | 0);
  return $1_1 | 0;
 }
 
 function $655($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $656($1_1 | 0, $2_1 | 0, $5_1 + 8 | 0 | 0);
  label$3 : {
   label$4 : {
    if ($0_1) {
     break label$4
    }
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     HEAP32[$3_1 >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    }
    $3_1 = 100;
    if (!$4_1) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $652($0_1 | 0, 0 | 0, $5_1 + 8 | 0 | 0, 192 | 0, 193 | 0, 194 | 0, 195 | 0) | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   }
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   }
   label$8 : {
    if (HEAPU8[($5_1 + 9 | 0) >> 0] | 0) {
     break label$8
    }
    $3_1 = 200;
    break label$3;
   }
   label$9 : {
    label$10 : {
     $4_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$10
     }
     label$11 : {
      $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$11
      }
      if (($3_1 | 0) != (300 | 0)) {
       break label$3
      }
      $3_1 = $4_1;
      break label$3;
     }
     if (($4_1 | 0) != (300 | 0)) {
      break label$9
     }
     $3_1 = 1;
     if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
      break label$9
     }
     break label$3;
    }
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
     break label$9
    }
    label$12 : {
     $0_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     if (($0_1 | 0) == (300 | 0)) {
      break label$12
     }
     if ($0_1) {
      break label$9
     }
     if ((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     $3_1 = 1;
     if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (139 | 0)) {
      break label$9
     }
     break label$3;
    }
    $3_1 = 1;
    if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) == (139 | 0)) {
     break label$3
    }
   }
   $3_1 = 0;
  }
  label$13 : {
   $7_1 = $5_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $974($2_1 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = 300;
  HEAP32[($2_1 + 20 | 0) >> 2] = 300;
  HEAP32[($2_1 + 8 | 0) >> 2] = $662($1_1 | 0) | 0;
  label$1 : {
   if ($873($0_1 | 0, 51906 | 0) | 0) {
    break label$1
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 1;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$2 : {
   if ($873($0_1 | 0, 51912 | 0) | 0) {
    break label$2
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 0;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$3 : {
   if ($873($0_1 | 0, 51923 | 0) | 0) {
    break label$3
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 0;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$4 : {
   if ($873($0_1 | 0, 51931 | 0) | 0) {
    break label$4
   }
   HEAP8[($2_1 + 14 | 0) >> 0] = 1;
   HEAP16[($2_1 + 12 | 0) >> 1] = 257;
   HEAP8[($2_1 + 6 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$5 : {
   if ($873($0_1 | 0, 51938 | 0) | 0) {
    break label$5
   }
   HEAP8[($2_1 + 6 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$6 : {
   label$7 : {
    if (!($873($0_1 | 0, 51950 | 0) | 0)) {
     break label$7
    }
    if ($873($0_1 | 0, 51957 | 0) | 0) {
     break label$6
    }
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$8 : {
   label$9 : {
    if (!($873($0_1 | 0, 51979 | 0) | 0)) {
     break label$9
    }
    if ($873($0_1 | 0, 51986 | 0) | 0) {
     break label$8
    }
   }
   HEAP16[($2_1 + 12 | 0) >> 1] = 257;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   $3_1 = 257;
   HEAP8[($2_1 + 5 | 0) >> 0] = $3_1;
   HEAP8[($2_1 + 6 | 0) >> 0] = $3_1 >>> 8 | 0;
   HEAP8[($2_1 + 24 | 0) >> 0] = 1;
   HEAP8[($2_1 + 14 | 0) >> 0] = 1;
   return;
  }
  label$10 : {
   label$11 : {
    if (!($873($0_1 | 0, 52008 | 0) | 0)) {
     break label$11
    }
    if ($873($0_1 | 0, 52016 | 0) | 0) {
     break label$10
    }
   }
   HEAP8[($2_1 + 4 | 0) >> 0] = 1;
   return;
  }
  label$12 : {
   if ($873($0_1 | 0, 52021 | 0) | 0) {
    break label$12
   }
   HEAP8[($2_1 + 27 | 0) >> 0] = 0;
   $4_1 = 257;
   HEAP8[($2_1 + 25 | 0) >> 0] = $4_1;
   HEAP8[($2_1 + 26 | 0) >> 0] = $4_1 >>> 8 | 0;
   return;
  }
  label$13 : {
   if ($873($0_1 | 0, 52029 | 0) | 0) {
    break label$13
   }
   HEAP8[($2_1 + 27 | 0) >> 0] = 1;
   $5_1 = 257;
   HEAP8[($2_1 + 25 | 0) >> 0] = $5_1;
   HEAP8[($2_1 + 26 | 0) >> 0] = $5_1 >>> 8 | 0;
  }
 }
 
 function $657($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 18 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $7_1 = 1 << $2_1 | 0;
     if ($7_1 & 19610 | 0) {
      break label$3
     }
     if ($7_1 & 406016 | 0) {
      break label$2
     }
     if (($2_1 | 0) != (8 | 0)) {
      break label$1
     }
     if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
      break label$3
     }
     HEAP8[($1_1 + 1 | 0) >> 0] = 0;
     break label$1;
    }
    HEAP8[($1_1 + 1 | 0) >> 0] = 1;
    break label$1;
   }
   label$4 : {
    if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
     break label$4
    }
    if (!(HEAPU8[($1_1 + 26 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = 1;
  }
  HEAP8[$1_1 >> 0] = ($2_1 | 0) == (11 | 0);
  return HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0;
 }
 
 function $658($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!(HEAPU8[($1_1 + 26 | 0) >> 0] | 0)) {
         break label$6
        }
        label$7 : {
         if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) >>> 0 < 192001 >>> 0) {
          break label$7
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 400;
         break label$1;
        }
        $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $7_1 = $6_1 + -129 | 0;
        if ($7_1 >>> 0 > 18 >>> 0) {
         break label$5
        }
        $7_1 = 1 << $7_1 | 0;
        if ($7_1 & 263776 | 0) {
         break label$2
        }
        if (!($7_1 & 3 | 0)) {
         break label$5
        }
        break label$4;
       }
       label$8 : {
        $7_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
        if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) >>> 0 <= ($7_1 ? 48e3 : 192e3) >>> 0) {
         break label$8
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = 400;
        break label$1;
       }
       label$9 : {
        label$10 : {
         $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         $8_1 = $6_1 + -129 | 0;
         if ($8_1 >>> 0 > 24 >>> 0) {
          break label$10
         }
         $9_1 = 1 << $8_1 | 0;
         if ($9_1 & 1635 | 0) {
          break label$9
         }
         label$11 : {
          if ($9_1 & 393216 | 0) {
           break label$11
          }
          if (($8_1 | 0) != (24 | 0)) {
           break label$10
          }
          if (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) {
           break label$9
          }
          HEAP32[($1_1 + 16 | 0) >> 2] = 401;
          break label$1;
         }
         if (!$7_1) {
          break label$9
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 401;
         break label$1;
        }
        label$12 : {
         label$13 : {
          label$14 : {
           switch ($6_1 + -1 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           case 1:
           case 3:
           case 4:
            break label$13;
           case 5:
            break label$9;
           default:
            break label$14;
           };
          }
          if ($6_1 >>> 0 > 18 >>> 0) {
           break label$13
          }
          if ((1 << $6_1 | 0) & 425984 | 0) {
           break label$9
          }
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 401;
         break label$1;
        }
        if ((HEAPU8[($2_1 + 24 | 0) >> 0] | 0) >>> 0 < 3 >>> 0) {
         break label$9
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = 402;
        break label$1;
       }
       HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 28 | 0) >> 2] = $6_1;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       break label$1;
      }
      label$15 : {
       switch ($6_1 + -1 | 0 | 0) {
       case 0:
       case 2:
        break label$2;
       case 1:
       case 3:
       case 4:
        break label$3;
       case 5:
        break label$4;
       default:
        break label$15;
       };
      }
      if ($6_1 >>> 0 > 18 >>> 0) {
       break label$3
      }
      if (!((1 << $6_1 | 0) & 425984 | 0)) {
       break label$3
      }
     }
     if (!(HEAPU8[($1_1 + 27 | 0) >> 0] | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = 401;
     break label$1;
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 401;
    break label$1;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   $2_1 = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
   label$16 : {
    label$17 : {
     if (!(HEAPU8[($1_1 + 27 | 0) >> 0] | 0)) {
      break label$17
     }
     if (($2_1 & 255 | 0) >>> 0 < 3 >>> 0) {
      break label$16
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = 402;
     break label$1;
    }
    if (($2_1 & 255 | 0) >>> 0 < 9 >>> 0) {
     break label$16
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 402;
    break label$1;
   }
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 28 | 0) >> 2] = $6_1;
  }
  return 1 | 0;
 }
 
 function $659($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($1_1 + 25 | 0) >> 0] | 0)) {
     break label$4
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = 300;
    break label$3;
   }
   if (!(HEAP32[($1_1 + 20 | 0) >> 2] | 0)) {
    break label$3
   }
   $666(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0);
   $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   $8_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $6_1 : $7_1;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $9_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                 if (($9_1 | 0) > (32 | 0)) {
                  break label$18
                 }
                 label$19 : {
                  switch ($9_1 + -1 | 0 | 0) {
                  case 1:
                   break label$15;
                  case 0:
                   break label$16;
                  default:
                   break label$19;
                  };
                 }
                 switch ($9_1 + -26 | 0 | 0) {
                 case 1:
                  break label$14;
                 case 0:
                  break label$16;
                 default:
                  break label$17;
                 };
                }
                if (($9_1 + -234 | 0) >>> 0 < 2 >>> 0) {
                 break label$16
                }
                switch ($9_1 + -243 | 0 | 0) {
                case 1:
                 break label$11;
                case 0:
                 break label$13;
                default:
                 break label$12;
                };
               }
               if (($9_1 | 0) != (16 | 0)) {
                break label$10
               }
              }
              if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
               break label$15
              }
              HEAP32[($1_1 + 20 | 0) >> 2] = 501;
              break label$3;
             }
             label$20 : {
              label$21 : {
               if (!$6_1) {
                break label$21
               }
               if ($7_1) {
                break label$20
               }
              }
              $7_1 = 1088;
              HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
              $6_1 = 1920;
              HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
             }
             label$22 : {
              if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
               break label$22
              }
              if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
               break label$8
              }
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 502;
             break label$3;
            }
            label$23 : {
             if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
              break label$23
             }
             label$24 : {
              label$25 : {
               if (!$6_1) {
                break label$25
               }
               if ($7_1) {
                break label$24
               }
              }
              $7_1 = 1088;
              HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
              $6_1 = 1920;
              HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
             }
             label$26 : {
              if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
               break label$26
              }
              if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
               break label$8
              }
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 502;
             break label$3;
            }
            label$27 : {
             $10_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
             $9_1 = $10_1 ? 4096 : 2048;
             $6_1 = $6_1 ? ($7_1 ? $8_1 : $9_1) : $9_1;
             $7_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
             if (($6_1 | 0) < ($7_1 | 0)) {
              break label$27
             }
             $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
             if (($6_1 | 0) < ($2_1 | 0)) {
              break label$27
             }
             if (Math_imul($2_1, $7_1) >>> 0 <= ($10_1 ? 8847360 : 2088960) >>> 0) {
              break label$9
             }
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 502;
            break label$3;
           }
           label$28 : {
            label$29 : {
             if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
              break label$29
             }
             if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
              break label$28
             }
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 501;
            break label$3;
           }
           label$30 : {
            label$31 : {
             if (!$6_1) {
              break label$31
             }
             if ($7_1) {
              break label$30
             }
            }
            $7_1 = 1088;
            HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
            $6_1 = 1920;
            HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
           }
           label$32 : {
            if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
             break label$32
            }
            if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
             break label$8
            }
           }
           HEAP32[($1_1 + 20 | 0) >> 2] = 502;
           break label$3;
          }
          if (($9_1 | 0) != (33 | 0)) {
           break label$10
          }
          label$33 : {
           if (!(HEAPU8[($1_1 + 2 | 0) >> 0] | 0)) {
            break label$33
           }
           label$34 : {
            label$35 : {
             if (!$6_1) {
              break label$35
             }
             if (!$7_1) {
              break label$35
             }
             $7_1 = Math_imul($7_1, $6_1);
             break label$34;
            }
            $6_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
            $7_1 = $6_1 ? 8847360 : 2211840;
            $8_1 = $6_1 ? 4096 : 2048;
           }
           label$36 : {
            $6_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
            if (($8_1 | 0) < ($6_1 | 0)) {
             break label$36
            }
            $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
            if (($8_1 | 0) < ($2_1 | 0)) {
             break label$36
            }
            if ((Math_imul($2_1, $6_1) | 0) <= ($7_1 | 0)) {
             break label$6
            }
           }
           HEAP32[($1_1 + 20 | 0) >> 2] = 502;
           break label$3;
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 503;
          break label$3;
         }
         label$37 : {
          if (!(HEAPU8[($1_1 + 3 | 0) >> 0] | 0)) {
           break label$37
          }
          label$38 : {
           label$39 : {
            if (!$6_1) {
             break label$39
            }
            if (!$7_1) {
             break label$39
            }
            $7_1 = Math_imul($7_1, $6_1);
            break label$38;
           }
           $6_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
           $7_1 = $6_1 ? 8847360 : 2211840;
           $8_1 = $6_1 ? 4096 : 2048;
          }
          label$40 : {
           $6_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
           if (($8_1 | 0) < ($6_1 | 0)) {
            break label$40
           }
           $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
           if (($8_1 | 0) < ($2_1 | 0)) {
            break label$40
           }
           if ((Math_imul($2_1, $6_1) | 0) <= ($7_1 | 0)) {
            break label$7
           }
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 502;
          break label$3;
         }
         HEAP32[($1_1 + 20 | 0) >> 2] = 501;
         break label$3;
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = 501;
        break label$3;
       }
       HEAP32[($1_1 + 20 | 0) >> 2] = 0;
       break label$5;
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = 0;
      break label$5;
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = 0;
     break label$5;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
  }
  label$41 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return 1 | 0;
 }
 
 function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return 0 | 0;
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $645();
  $0_1 = $654($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $647();
  return $0_1 | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if ($873($0_1 | 0, 52190 | 0) | 0) {
     break label$2
    }
    return 5 | 0;
   }
   label$3 : {
    if ($873($0_1 | 0, 52193 | 0) | 0) {
     break label$3
    }
    return 4 | 0;
   }
   label$4 : {
    if ($873($0_1 | 0, 52196 | 0) | 0) {
     break label$4
    }
    return 3 | 0;
   }
   label$5 : {
    if ($873($0_1 | 0, 52199 | 0) | 0) {
     break label$5
    }
    return 2 | 0;
   }
   if ($873($0_1 | 0, 52203 | 0) | 0) {
    break label$1
   }
   return 1 | 0;
  }
  return 0 | 0;
 }
 
 function $663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52244 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52240 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (12 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53500 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52404 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52400 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (19 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53546 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52676 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52672 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (11 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53588 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $666($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$1 : {
   $0_1 = $0_1 + -1 | 0;
   if ($0_1 >>> 0 > 4 >>> 0) {
    break label$1
   }
   $3_1 = $0_1 << 2 | 0;
   $4_1 = HEAP32[($3_1 + 53652 | 0) >> 2] | 0;
   $3_1 = HEAP32[($3_1 + 53632 | 0) >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $4_1;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (($0_1 | 0) > (299 | 0)) {
               break label$12
              }
              $1_1 = 52045;
              label$13 : {
               switch ($0_1 | 0) {
               case 0:
                break label$1;
               case 1:
                break label$11;
               default:
                break label$13;
               };
              }
              if (($0_1 | 0) == (100 | 0)) {
               break label$10
              }
              if (($0_1 | 0) != (200 | 0)) {
               break label$2
              }
              return 52076 | 0;
             }
             label$14 : {
              switch ($0_1 + -400 | 0 | 0) {
              case 2:
               break label$6;
              case 1:
               break label$7;
              case 0:
               break label$8;
              default:
               break label$14;
              };
             }
             switch ($0_1 + -501 | 0 | 0) {
             case 2:
              break label$3;
             case 1:
              break label$4;
             case 0:
              break label$5;
             default:
              break label$9;
             };
            }
            return 52054 | 0;
           }
           return 52063 | 0;
          }
          if (($0_1 | 0) != (300 | 0)) {
           break label$2
          }
          return 52086 | 0;
         }
         return 52095 | 0;
        }
        return 52119 | 0;
       }
       return 52130 | 0;
      }
      return 52145 | 0;
     }
     return 52156 | 0;
    }
    return 52173 | 0;
   }
   $1_1 = 52184;
  }
  return $1_1 | 0;
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   if ($0_1 >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -4 | 0 | 0) {
    case 1:
     $1_1 = $0_1 + -1 | 0;
     if ($1_1 >>> 0 >= 4 >>> 0) {
      break label$1
     }
     return HEAP32[(($1_1 << 2 | 0) + 53672 | 0) >> 2] | 0 | 0;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   if (($0_1 + -1 | 0) >>> 0 >= 3 >>> 0) {
    break label$1
   }
   return 6 - $0_1 | 0 | 0;
  }
  return $2_1 | 0;
 }
 
 function $669($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($873($0_1 | 0, 51906 | 0) | 0) {
      break label$3
     }
     $4_1 = 0;
     label$4 : {
      switch ($1_1 | 0) {
      case 0:
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$2_1 >> 2] = 5;
       break label$2;
      case 1:
       break label$4;
      default:
       break label$1;
      };
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$6 : {
     label$7 : {
      if (!($873($0_1 | 0, 51912 | 0) | 0)) {
       break label$7
      }
      if ($873($0_1 | 0, 52208 | 0) | 0) {
       break label$6
      }
     }
     $4_1 = 0;
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$8 : {
     if ($873($0_1 | 0, 51979 | 0) | 0) {
      break label$8
     }
     $4_1 = 0;
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$9 : {
     if ($873($0_1 | 0, 51986 | 0) | 0) {
      break label$9
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$10 : {
     if ($873($0_1 | 0, 51950 | 0) | 0) {
      break label$10
     }
     $4_1 = 0;
     label$11 : {
      switch ($1_1 | 0) {
      case 0:
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$2_1 >> 2] = 5;
       break label$2;
      case 1:
       break label$11;
      default:
       break label$1;
      };
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$13 : {
     label$14 : {
      if (!($873($0_1 | 0, 51957 | 0) | 0)) {
       break label$14
      }
      if ($873($0_1 | 0, 51931 | 0) | 0) {
       break label$13
      }
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$15 : {
     label$16 : {
      if (!($873($0_1 | 0, 52213 | 0) | 0)) {
       break label$16
      }
      if (!($873($0_1 | 0, 51923 | 0) | 0)) {
       break label$16
      }
      $4_1 = 0;
      if (!($873($0_1 | 0, 51938 | 0) | 0 | $1_1 | 0)) {
       break label$15
      }
      break label$1;
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
    }
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$2_1 >> 2] = 4;
   }
   $4_1 = 1;
  }
  return $4_1 | 0;
 }
 
 function $670($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = -1;
  label$3 : {
   if (!($669($0_1 | 0, $1_1 | 0, $4_1 + 24 | 0 | 0, $4_1 + 28 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    switch ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + -4 | 0 | 0) {
    case 1:
     label$6 : {
      $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
      if ($5_1) {
       break label$6
      }
      $5_1 = $887($2_1 | 0, $3_1 | 0, 52190 | 0, 0 | 0) | 0;
      break label$3;
     }
     HEAP32[$4_1 >> 2] = $5_1 + 1 | 0;
     $5_1 = $887($2_1 | 0, $3_1 | 0, 52220 | 0, $4_1 | 0) | 0;
     break label$3;
    case 0:
     break label$4;
    default:
     break label$3;
    };
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
   $5_1 = $887($2_1 | 0, $3_1 | 0, 52225 | 0, $4_1 + 16 | 0 | 0) | 0;
  }
  label$7 : {
   $7_1 = $4_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($669($0_1 | 0, $1_1 | 0, $3_1 + 8 | 0 | 0, $3_1 + 12 | 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = $668($662($2_1 | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  label$4 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($1_1 | 0) == (1179011410 | 0) & ($2_1 | 0) == (1163280727 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(48 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62360 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 48;
    $827(53748 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 48 | 0, $2_1 | 0, 53688 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   $624($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 28 | 0) >> 2] = 196;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $623($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = $2_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $2_1;
    $616($0_1 | 0, $2_1 + 16 | 0 | 0, 544501094 | 0, 197 | 0);
    $616(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, 1635017060 | 0, 198 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 95 | 0);
  }
  return ($1_1 | 0) != (1163280727 | 0) | 0;
 }
 
 function $675($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 108 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62360 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62360 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $10_1 = 0;
     break label$6;
    }
    $10_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(53880 | 0, $5_1 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
      break label$10
     }
     if ($3_1) {
      break label$10
     }
     if (($1_1 | 0) != (544501094 | 0)) {
      break label$10
     }
     if (!$4_1) {
      break label$10
     }
     $1_1 = 1;
     if (($756($4_1 | 0) | 0 | 0) != ($2_1 | 0)) {
      break label$9
     }
     $762($5_1 + 40 | 0 | 0, $4_1 | 0);
     $1_1 = 1;
     if (!($260($5_1 + 56 | 0 | 0, $5_1 + 40 | 0 | 0) | 0)) {
      break label$9
     }
     $3_1 = $813(328 | 0) | 0;
     if (!$3_1) {
      break label$9
     }
     $218($3_1 | 0);
     HEAP32[($3_1 + 4 | 0) >> 2] = 1;
     label$11 : {
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           if ($268($5_1 + 56 | 0 | 0) | 0) {
            break label$16
           }
           label$17 : {
            $1_1 = HEAPU16[($5_1 + 56 | 0) >> 1] | 0;
            if (($1_1 | 0) > (16 | 0)) {
             break label$17
            }
            switch ($1_1 + -2 | 0 | 0) {
            case 0:
             break label$14;
            case 4:
            case 5:
             break label$15;
            default:
             break label$12;
            };
           }
           label$18 : {
            if (($1_1 | 0) > (84 | 0)) {
             break label$18
            }
            if (($1_1 | 0) == (17 | 0)) {
             break label$14
            }
            if (($1_1 | 0) != (80 | 0)) {
             break label$12
            }
            HEAP32[($3_1 + 20 | 0) >> 2] = 3;
            break label$11;
           }
           if (($1_1 | 0) == (85 | 0)) {
            break label$13
           }
           if (($1_1 | 0) != (256 | 0)) {
            break label$12
           }
          }
          HEAP32[($3_1 + 20 | 0) >> 2] = 138;
          break label$11;
         }
         HEAP32[($3_1 + 20 | 0) >> 2] = 150;
         break label$11;
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = 141;
        break label$11;
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 1;
       break label$11;
      }
      label$19 : {
       if (!($269($5_1 + 56 | 0 | 0) | 0)) {
        break label$19
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 129;
       break label$11;
      }
      label$20 : {
       if ((HEAPU16[($5_1 + 56 | 0) >> 1] | 0 | 0) != (8193 | 0)) {
        break label$20
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 130;
       break label$11;
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 1;
     HEAP8[($3_1 + 24 | 0) >> 0] = HEAPU8[($5_1 + 58 | 0) >> 0] | 0;
     HEAP8[($3_1 + 25 | 0) >> 0] = HEAPU8[($5_1 + 70 | 0) >> 0] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     HEAP16[($3_1 + 26 | 0) >> 1] = (((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1e3 >>> 0) | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
     $1_1 = 0;
     break label$9;
    }
    $1_1 = 1;
    if (!$4_1) {
     break label$8
    }
   }
   $735($4_1 | 0);
  }
  label$21 : {
   $12_1 = $5_1 + 208 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $89_1 = 0, $92$hi = 0, $94_1 = 0, $94$hi = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 171 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62360 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62360 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $1_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $9_1 = 0;
     break label$6;
    }
    $9_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(53931 | 0, $5_1 | 0);
  }
  label$8 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$8
   }
   $1_1 = $813(40 | 0) | 0;
   if (!$1_1) {
    break label$8
   }
   $214($1_1 | 0, 14 | 0);
   $6_1 = 0;
   label$9 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$9
    }
    label$10 : {
     if (HEAPU16[($3_1 + 26 | 0) >> 1] | 0) {
      break label$10
     }
     $6_1 = $3_1;
     break label$9;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = 5;
    HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAPU16[($3_1 + 26 | 0) >> 1] | 0, 1e3);
    $89_1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $92$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = HEAPU16[($3_1 + 26 | 0) >> 1] | 0;
    i64toi32_i32$2 = 0;
    $94_1 = i64toi32_i32$1;
    $94$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $92$hi;
    i64toi32_i32$1 = $94$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$2 | 0, $94_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    HEAP32[($89_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    $6_1 = $3_1;
    if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) != (138 | 0)) {
     break label$9
    }
    $762($5_1 + 48 | 0 | 0, $4_1 | 0);
    label$11 : {
     if (!($270($5_1 + 48 | 0 | 0) | 0)) {
      break label$11
     }
     HEAP8[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 0] = 6;
     HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 132;
     HEAP32[($1_1 + 8 | 0) >> 2] = 1;
    }
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   $215($1_1 | 0, $6_1 | 0);
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  label$12 : {
   if (!$4_1) {
    break label$12
   }
   $735($4_1 | 0);
  }
  label$13 : {
   $11_1 = $5_1 + 64 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return 1 | 0;
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 250 | 0);
  }
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 16 | 0 | 0);
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 32 | 0 | 0);
  $629(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 48 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $678($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $24_1 = 0, $24$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 272 | 0);
  }
  label$5 : {
   label$6 : {
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    $31_1 = !(i64toi32_i32$1 | i64toi32_i32$0 | 0) ? 8192 : i64toi32_i32$1;
    i64toi32_i32$0 = $24$hi;
    $3_1 = $50($1_1 | 0, $24_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, $4_1 + 12 | 0 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    $3_1 = 0;
    break label$5;
   }
   $797($2_1 | 0, $3_1 | 0);
   $630(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $815($1_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $619(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$7 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $11_1 = 0, $33_1 = 0, $36_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $11_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $3_1 = $754($0_1 | 0) | 0;
  HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 48 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = $36_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  $783($2_1 + 64 | 0 | 0, $2_1 + 48 | 0 | 0);
  HEAP8[($1_1 + 2 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 7 | 0) | 0;
  HEAP8[($1_1 + 3 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
  $4_1 = 0;
  HEAP8[($1_1 + 4 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 5 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 6 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 7 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
  $792($2_1 + 64 | 0 | 0, 28 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     if (!($784($2_1 + 64 | 0 | 0) | 0)) {
      break label$5
     }
     $680();
     break label$4;
    }
    $4_1 = $785($2_1 + 64 | 0 | 0) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$3
    }
    $766($0_1 | 0, $4_1 - $3_1 | 0 | 0) | 0;
    $766($0_1 | 0, 16 | 0) | 0;
    $4_1 = 1;
   }
   label$6 : {
    if ((HEAP8[(0 + 62376 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62376 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $8_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    $9_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
    $10_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = $10_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $9_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 ? 54264 : 54265;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(54099 | 0, $2_1 | 0);
   }
   label$7 : {
    $12_1 = $2_1 + 80 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $4_1 | 0;
  }
  $859(54069 | 0, 53983 | 0, 74 | 0);
  abort();
 }
 
 function $680() {
  $862(53983 | 0, 70 | 0, 8 | 0) | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $197_1 = 0, $199$hi = 0, $201$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 472 | 0);
  }
  $3_1 = $798($1_1 | 0) | 0;
  $4_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(54393 | 0, $2_1 | 0);
      }
      label$10 : {
       if (!$3_1) {
        break label$10
       }
       $7_1 = $756($3_1 | 0) | 0;
       $744(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $6_1 = $7_1 + $6_1 | 0;
       $5_1 = !$7_1;
      }
      label$11 : while (1) {
       $7_1 = $740(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       $763($2_1 + 48 | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
       $3_1 = 0;
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
            case 1:
             $3_1 = $682($0_1 | 0, $2_1 + 48 | 0 | 0) | 0;
             break label$12;
            case 0:
             $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
             if ($7_1 >>> 0 < $8_1 >>> 0) {
              break label$12
             }
             i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $73_1 = i64toi32_i32$0;
             i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
             HEAP32[i64toi32_i32$0 >> 2] = $73_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $2_1;
             i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
             i64toi32_i32$0 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
             $76_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $2_1;
             HEAP32[($2_1 + 32 | 0) >> 2] = $76_1;
             HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
             $766($2_1 + 48 | 0 | 0, $8_1 | 0) | 0;
             HEAP16[($2_1 + 24 | 0) >> 1] = 0;
             HEAP32[($2_1 + 20 | 0) >> 2] = 16777343;
             HEAP32[($2_1 + 16 | 0) >> 2] = $253(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, 100 | 0) | 0;
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  $3_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                  switch ($3_1 + -8 | 0 | 0) {
                  case 1:
                   break label$21;
                  case 0:
                   break label$22;
                  default:
                   break label$23;
                  };
                 }
                 if (($3_1 | 0) != (18 | 0)) {
                  break label$19
                 }
                 $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
                 break label$20;
                }
                label$24 : {
                 if ((HEAPU8[($0_1 + 50 | 0) >> 0] | 0 | 0) != (10 | 0)) {
                  break label$24
                 }
                 $3_1 = $683($0_1 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                 break label$20;
                }
                $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
                break label$20;
               }
               label$25 : {
                label$26 : {
                 switch ((HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + -2 | 0 | 0) {
                 case 0:
                 case 2:
                 case 3:
                  $3_1 = $684($0_1 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                  break label$20;
                 case 5:
                  break label$26;
                 default:
                  break label$25;
                 };
                }
                if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                 break label$25
                }
                $3_1 = $685($0_1 | 0, $2_1 + 32 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                break label$20;
               }
               $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
              }
              if (!$3_1) {
               break label$19
              }
              $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$6
              }
              $4_1 = FUNCTION_TABLE[HEAP32[($7_1 + 8 | 0) >> 2] | 0]($7_1, $3_1, HEAPU8[($0_1 + 49 | 0) >> 0] | 0) | 0;
             }
             HEAP32[($0_1 + 44 | 0) >> 2] = 0;
             HEAP32[($0_1 + 36 | 0) >> 2] = 0;
             break label$15;
            case 4:
             break label$13;
            case 3:
             break label$14;
            case 2:
             break label$16;
            default:
             break label$12;
            };
           }
           $7_1 = $766($2_1 + 48 | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) | 0;
           $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
           if ($8_1 >>> 0 < $7_1 >>> 0) {
            break label$5
           }
           $7_1 = $8_1 - $7_1 | 0;
           HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
           if ($7_1) {
            break label$12
           }
          }
          $3_1 = 1;
          HEAP32[($0_1 + 8 | 0) >> 2] = 1;
          break label$12;
         }
         $3_1 = $686($0_1 | 0, $2_1 + 48 | 0 | 0) | 0;
         break label$12;
        }
        $766($2_1 + 48 | 0 | 0, $7_1 | 0) | 0;
       }
       $7_1 = $754($2_1 + 48 | 0 | 0) | 0;
       $197_1 = $0_1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
       $199$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $201$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $199$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $201$hi;
       i64toi32_i32$4 = i64toi32_i32$2 + $7_1 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $7_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$2 = $197_1;
       HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] = i64toi32_i32$5;
       $745(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 48 | 0 | 0);
       label$28 : {
        $7_1 = ($4_1 | 0) == (1 | 0);
        if ($7_1) {
         break label$28
        }
        if ($3_1) {
         continue label$11
        }
       }
       break label$11;
      };
      if ($7_1) {
       break label$7
      }
      $3_1 = $798($1_1 | 0) | 0;
      if ($3_1) {
       continue label$8
      }
      break label$8;
     };
     if (!($5_1 & 1 | 0)) {
      break label$7
     }
     $687($0_1 | 0);
    }
    label$29 : {
     $10_1 = $2_1 + 64 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $6_1 | 0;
   }
   $859(54425 | 0, 54311 | 0, 546 | 0);
   abort();
  }
  $859(54445 | 0, 54311 | 0, 559 | 0);
  abort();
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 76 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $766($1_1 | 0, 4 | 0) | 0;
  $3_1 = $772($1_1 | 0) | 0;
  $4_1 = $782($1_1 | 0) | 0;
  $5_1 = $782($1_1 | 0) | 0;
  $6_1 = $772($1_1 | 0) | 0;
  $7_1 = $782($1_1 | 0) | 0;
  $8_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      label$7 : {
       if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 68 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
       $827(54540 | 0, $2_1 + 64 | 0 | 0);
      }
      $688($0_1 | 0);
      break label$4;
     }
     $7_1 = $689($0_1 | 0, $3_1 | 0) | 0;
     HEAP8[($0_1 + 48 | 0) >> 0] = $3_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
     HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      if (!$7_1) {
       break label$8
      }
      $7_1 = $6_1 << 24 | 0 | $5_1 | 0;
      label$9 : {
       label$10 : {
        if (($3_1 & 254 | 0 | 0) != (8 | 0)) {
         break label$10
        }
        $5_1 = $764($1_1 | 0) | 0;
        if (($5_1 | 0) == (-1 | 0)) {
         break label$5
        }
        HEAP8[($0_1 + 49 | 0) >> 0] = $5_1;
        $1_1 = $4_1 + -1 | 0;
        HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
        label$11 : {
         if (($3_1 | 0) != (8 | 0)) {
          break label$11
         }
         HEAP8[($0_1 + 50 | 0) >> 0] = ($5_1 & 240 | 0) >>> 4 | 0;
         if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$9
         }
         $8_1 = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
         HEAP32[($2_1 + 24 | 0) >> 2] = $5_1 & 1 | 0 ? 54895 : 54902;
         HEAP32[($2_1 + 20 | 0) >> 2] = $5_1 & 2 | 0 ? 16 : 8;
         HEAP32[($2_1 + 16 | 0) >> 2] = HEAPU16[((($5_1 >>> 1 | 0) & 6 | 0) + 54806 | 0) >> 1] | 0;
         HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
         HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
         HEAP32[$2_1 >> 2] = $0_1;
         HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(($8_1 << 2 | 0) + 54592 | 0) >> 2] | 0;
         $827(54814 | 0, $2_1 | 0);
         break label$9;
        }
        HEAP8[($0_1 + 51 | 0) >> 0] = $5_1 & 15 | 0;
        if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$9
        }
        if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(((HEAPU8[($0_1 + 51 | 0) >> 0] | 0) << 2 | 0) + 55008 | 0) >> 2] | 0;
        HEAP32[($2_1 + 40 | 0) >> 2] = $7_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[((($5_1 >>> 2 | 0) & 60 | 0) + 54912 | 0) >> 2] | 0;
        $827(55188 | 0, $2_1 + 32 | 0 | 0);
        break label$9;
       }
       HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
       HEAP8[($0_1 + 49 | 0) >> 0] = 0;
      }
      $8_1 = 1;
      if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0)) {
       break label$3
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $7_1;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 2;
     break label$4;
    }
    $769($1_1 | 0, $2_1 + 72 | 0 | 0);
    break label$3;
   }
   $8_1 = 1;
  }
  label$12 : {
   $10_1 = $2_1 + 80 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $8_1 | 0;
 }
 
 function $683($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($3_1 >>> 0 < 2 >>> 0) {
       break label$6
      }
      label$7 : {
       switch ($772($1_1 | 0) | 0 | 0) {
       case 1:
        break label$5;
       case 0:
        break label$7;
       default:
        break label$6;
       };
      }
      if (!($580($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$6
      }
      $254($0_1 + 76 | 0 | 0, $5_1 + 8 | 0 | 0);
     }
     $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
     $0_1 = 0;
     break label$4;
    }
    $3_1 = $258($5_1 + 20 | 0 | 0, $0_1 + 76 | 0 | 0, $3_1 + -1 | 0 | 0) | 0;
    if ($3_1 >>> 0 >= 8 >>> 0) {
     break label$3
    }
    HEAP32[(($5_1 + 8 | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($5_1 + 14 | 0) >> 0] = 0;
    HEAP8[($5_1 + 13 | 0) >> 0] = $3_1;
    $0_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, 55336 | 0, $5_1 + 8 | 0 | 0) | 0;
   }
   label$8 : {
    $7_1 = $5_1 + 32 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return $0_1 | 0;
  }
  $859(55307 | 0, 54311 | 0, 399 | 0);
  abort();
 }
 
 function $684($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[(($5_1 + 8 | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  $263($5_1 + 8 | 0 | 0, $3_1 | 0);
  $4_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, 20908 | 0, $5_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $7_1 = $5_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $685($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $87_1 = 0, $90_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $5_1 = $772($1_1 | 0) | 0;
  $6_1 = $782($1_1 | 0) | 0;
  $7_1 = 0;
  label$3 : {
   if ($2_1 >>> 0 < 4 >>> 0) {
    break label$3
   }
   $2_1 = $2_1 + -4 | 0;
   label$4 : {
    label$5 : {
     switch ($5_1 | 0) {
     case 0:
      label$7 : {
       if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(55344 | 0, $4_1 | 0);
      }
      $7_1 = $690($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
      break label$3;
     case 1:
      break label$5;
     default:
      break label$4;
     };
    }
    $5_1 = ($6_1 << 8 | 0) >> 8 | 0;
    $7_1 = 0;
    label$8 : {
     if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $827(55382 | 0, $4_1 + 16 | 0 | 0);
    }
    HEAP8[($3_1 + 7 | 0) >> 0] = 1;
    HEAP32[$3_1 >> 2] = $253((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $5_1 | 0 | 0, 100 | 0) | 0;
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$3
    }
    label$9 : {
     if ($2_1 >>> 0 <= $5_1 >>> 0) {
      break label$9
     }
     $6_1 = $0_1 + 60 | 0;
     label$10 : while (1) {
      $7_1 = $774($1_1 | 0, $5_1 | 0) | 0;
      $2_1 = $2_1 - (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0;
      if ($2_1 >>> 0 < $7_1 >>> 0) {
       break label$4
      }
      i64toi32_i32$2 = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $87_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($4_1 + 32 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $87_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $90_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[($4_1 + 32 | 0) >> 2] = $90_1;
      HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      if (($766($1_1 | 0, $7_1 | 0) | 0 | 0) != ($7_1 | 0)) {
       break label$4
      }
      $741(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $6_1 | 0);
      $755(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0, $1_1 | 0) | 0;
      $2_1 = $2_1 - $7_1 | 0;
      $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if ($2_1 >>> 0 > $5_1 >>> 0) {
       continue label$10
      }
      break label$10;
     };
    }
    $7_1 = $751(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 14996 | 0, $3_1 | 0) | 0;
    break label$3;
   }
   $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
   $7_1 = 0;
  }
  label$11 : {
   $9_1 = $4_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $7_1 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $782($1_1 | 0) | 0;
  $4_1 = $764($1_1 | 0) | 0;
  $766($1_1 | 0, 1 | 0) | 0;
  $5_1 = $778($1_1 | 0) | 0;
  $6_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      if (($3_1 | 0) != (4607062 | 0)) {
       break label$5
      }
      label$7 : {
       if (($4_1 | 0) == (1 | 0)) {
        break label$7
       }
       if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(55418 | 0, $2_1 | 0);
       break label$5;
      }
      if ($5_1 >>> 0 < 9 >>> 0) {
       break label$5
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 2;
      HEAP32[($0_1 + 44 | 0) >> 2] = $5_1 + -9 | 0;
      break label$4;
     }
     $769($1_1 | 0, $2_1 + 8 | 0 | 0);
     break label$3;
    }
    $688($0_1 | 0);
   }
   $6_1 = 1;
  }
  label$8 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$4 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $7$hi = 0, $15_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $6_1 = 0, $5_1 = 0, $47_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(55467 | 0, $1_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 433 | 0);
  }
  label$6 : {
   $2_1 = $689($0_1 | 0, 9 | 0) | 0;
   if (!$2_1) {
    break label$6
   }
   HEAP16[($1_1 + 24 | 0) >> 1] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 127;
   $3_1 = 255;
   label$7 : {
    $4_1 = (HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + -2 | 0;
    if (($4_1 & 255 | 0) >>> 0 > 5 >>> 0) {
     break label$7
    }
    $3_1 = 255;
    if (!((45 >>> ($4_1 & 255 | 0) | 0) & 1 | 0)) {
     break label$7
    }
    $47_1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $15_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $15_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 513;
    i64toi32_i32$1 = 16843009;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $16_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $16_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    HEAP8[($47_1 + 20 | 0) >> 0] = $16_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = 33409;
    i64toi32_i32$2 = -2122219135;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $17_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $17_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $17_1;
   }
   HEAP8[($1_1 + 23 | 0) >> 0] = 1;
   HEAP8[($1_1 + 20 | 0) >> 0] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $253(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, 100 | 0) | 0;
   label$8 : {
    $3_1 = $749(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 14996 | 0, $1_1 + 16 | 0 | 0) | 0;
    if (!$3_1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[($2_1 + 8 | 0) >> 2] | 0]($2_1, $3_1, HEAPU8[($0_1 + 51 | 0) >> 0] | 0) | 0;
   }
   $3_1 = $749(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 14996 | 0, $1_1 + 16 | 0 | 0) | 0;
   if (!$3_1) {
    break label$6
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 8 | 0) >> 2] | 0]($2_1, $3_1, HEAPU8[($0_1 + 51 | 0) >> 0] | 0) | 0;
  }
  label$9 : {
   $6_1 = $1_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $688($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(55254 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $690($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $766($1_1 | 0, 4 | 0) | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = (($764($1_1 | 0) | 0) & 3 | 0) + 1 | 0;
  label$1 : {
   $3_1 = $764($1_1 | 0) | 0;
   if (($3_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (!($698($0_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $3_1 & 31 | 0 | 0) | 0)) {
    break label$1
   }
   $3_1 = $764($1_1 | 0) | 0;
   if (($3_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (!($698($0_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $3_1 & 31 | 0 | 0) | 0)) {
    break label$1
   }
   $741(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $0_1 + 68 | 0 | 0);
   HEAP8[($2_1 + 7 | 0) >> 0] = 0;
   return $751(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 14996 | 0, $2_1 | 0) | 0 | 0;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  return 0 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(54471 | 0, 54311 | 0, 591 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 4 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(96 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62392 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 96;
      $827(54483 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 96 | 0, $3_1 | 0, 54296 | 0);
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = 0;
     HEAP32[($3_1 + 88 | 0) >> 2] = $1_1;
     label$7 : {
      label$8 : {
       if (!$1_1) {
        break label$8
       }
       $4_1 = HEAPU16[(0 + 20904 | 0) >> 1] | 0;
       $5_1 = HEAPU16[(0 + 20892 | 0) >> 1] | 0;
       $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, $4_1 + $5_1 | 0) | 0;
       HEAP32[($3_1 + 56 | 0) >> 2] = $1_1;
       label$9 : {
        if ($1_1) {
         break label$9
        }
        $693();
        break label$7;
       }
       HEAP16[($3_1 + 74 | 0) >> 1] = 1;
       HEAP16[($3_1 + 72 | 0) >> 1] = $5_1;
       HEAP16[($3_1 + 66 | 0) >> 1] = 1;
       HEAP16[($3_1 + 64 | 0) >> 1] = $4_1;
       HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
       HEAP32[($3_1 + 68 | 0) >> 2] = $1_1 + $4_1 | 0;
       $823($1_1 | 0, HEAP32[(0 + 20900 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
       $823(HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(0 + 20888 | 0) >> 2] | 0 | 0, HEAPU16[($3_1 + 72 | 0) >> 1] | 0 | 0) | 0;
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = 20832;
      HEAP32[($3_1 + 28 | 0) >> 2] = 20868;
      HEAP32[($3_1 + 24 | 0) >> 2] = 20844;
      HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = 0;
      $1_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
      label$10 : {
       if (!$1_1) {
        break label$10
       }
       $0_1 = $736($0_1 | 0) | 0;
       HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
       label$11 : {
        if (!$0_1) {
         break label$11
        }
        $694($3_1 | 0);
        break label$5;
       }
       $739(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      }
      $0_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$7
      }
      FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0]($0_1, HEAP32[($3_1 + 56 | 0) >> 2] | 0);
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$12 : {
     $7_1 = $2_1 + 16 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $3_1 | 0;
   }
   $859(54471 | 0, 54311 | 0, 603 | 0);
   abort();
  }
  $859(54475 | 0, 54311 | 0, 604 | 0);
  abort();
 }
 
 function $693() {
  $862(54311 | 0, 618 | 0, 4 | 0) | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 692 | 0);
  }
  $738(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 3;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 658 | 0);
  }
  $739(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $739(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  label$3 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 56 | 0) >> 2] | 0);
  }
  $845($0_1 | 0, 96 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 672 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(54520 | 0, 54311 | 0, 673 | 0);
  abort();
 }
 
 function $697($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 681 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(54520 | 0, 54311 | 0, 682 | 0);
   abort();
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  HEAP8[($1_1 + 4 | 0) >> 0] = $2_1;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $698($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $31_1 = 0, $34_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $6_1 = $0_1 + 60 | 0;
    $7_1 = 0;
    $8_1 = 0;
    label$5 : while (1) {
     $0_1 = $777($2_1 | 0) | 0;
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[$5_1 >> 2] = $34_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     if (($766($2_1 | 0, $0_1 | 0) | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     $741($3_1 | 0, $6_1 | 0);
     if (!($755($3_1 | 0, $1_1 | 0, $5_1 | 0, $2_1 | 0) | 0)) {
      break label$3
     }
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) != ($4_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $7_1 = 1;
  }
  label$6 : {
   $10_1 = $5_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $7_1 | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $772($0_1 | 0) | 0;
  $2_1 = 0;
  $3_1 = $772($0_1 | 0) | 0;
  $4_1 = $772($0_1 | 0) | 0;
  label$1 : {
   if (($1_1 | 0) != (70 | 0)) {
    break label$1
   }
   if (($3_1 | 0) != (76 | 0)) {
    break label$1
   }
   if (($4_1 | 0) != (86 | 0)) {
    break label$1
   }
   if (($772($0_1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   if (($772($0_1 | 0) | 0) >>> 0 > 15 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(664 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 664;
    $827(55548 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 664 | 0, $2_1 | 0, 55487 | 0);
   HEAP32[($2_1 + 60 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $2_1;
   $691($1_1 + 8 | 0 | 0);
   $0_1 = $692($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $697($0_1 | 0, $2_1 + 28 | 0 | 0, 8 | 0, 203 | 0);
    $697(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 8 | 0 | 0, 9 | 0, 203 | 0);
    $697(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 48 | 0 | 0, 18 | 0, 203 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$1
    }
   }
   $846($3_1 | 0, 664 | 0, $3_1 | 0, 55487 | 0, 55603 | 0, 339 | 0);
  }
  label$3 : {
   if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (18 | 0)) {
    break label$3
   }
   $705(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
  $735($1_1 | 0);
  HEAP8[($0_1 + 17 | 0) >> 0] = $2_1;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  return 0 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 664 | 0, $0_1 | 0, 55487 | 0, 55603 | 0, 388 | 0);
  }
  $696(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0);
  $696(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 28 | 0 | 0);
  $695(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 664 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $703($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $4_1 = 0, $10$hi = 0, $10_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $43_1 = 0, $45$hi = 0, $85$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 664 | 0, $0_1 | 0, 55487 | 0, 55603 | 0, 447 | 0);
  }
  HEAP8[($0_1 + 84 | 0) >> 0] = 0;
  HEAP8[($0_1 + 76 | 0) >> 0] = 0;
  HEAP8[($0_1 + 68 | 0) >> 0] = 0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$5 : while (1) {
   label$6 : {
    if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = 16384;
    i64toi32_i32$0 = $10$hi;
    HEAP32[($4_1 + 20 | 0) >> 2] = $10_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
    $827(55934 | 0, $4_1 + 16 | 0 | 0);
   }
   label$7 : {
    $43_1 = $1_1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $45$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $45$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $10_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + $10$hi | 0;
    if (i64toi32_i32$4 >>> 0 < $10_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = $50($43_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 16384 | 0, $4_1 + 28 | 0 | 0) | 0;
    if (!$5_1) {
     break label$7
    }
    if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
     break label$7
    }
    $6_1 = $756($5_1 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
     i64toi32_i32$5 = $10$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $10_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(55970 | 0, $4_1 | 0);
    }
    $797($2_1 | 0, $5_1 | 0);
    if (($681(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($6_1 | 0)) {
     break label$7
    }
    label$9 : {
     if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
      break label$9
     }
     if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
      break label$7
     }
    }
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = 0;
    $85$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$2 = $85$hi;
    i64toi32_i32$0 = $10_1 + $6_1 | 0;
    i64toi32_i32$4 = $10$hi + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < $6_1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$1 = 0;
    if ($10$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($10$hi | 0) == (i64toi32_i32$1 | 0) & $10_1 >>> 0 < 1048576 >>> 0 | 0) | 0) {
     continue label$5
    }
   }
   break label$5;
  };
  $694(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$10 : {
   label$11 : {
    if (HEAPU8[($0_1 + 24 | 0) >> 0] | 0) {
     break label$11
    }
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$11
    }
    $6_1 = 0;
    break label$10;
   }
   $6_1 = 0;
   $5_1 = $813(40 | 0) | 0;
   if (!$5_1) {
    break label$10
   }
   $214($5_1 | 0, 12 | 0);
   label$12 : {
    label$13 : {
     if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
      break label$13
     }
     $2_1 = $813(328 | 0) | 0;
     if (!$2_1) {
      break label$12
     }
     $218($2_1 | 0);
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
     $3_1 = 0;
     label$14 : {
      $7_1 = ((HEAPU8[($0_1 + 25 | 0) >> 0] | 0) & 15 | 0) + -2 | 0;
      if ($7_1 >>> 0 > 5 >>> 0) {
       break label$14
      }
      $3_1 = HEAP32[(($7_1 << 2 | 0) + 56020 | 0) >> 2] | 0;
     }
     HEAP32[($2_1 + 28 | 0) >> 2] = 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     label$15 : {
      if (!(HEAPU8[($0_1 + 76 | 0) >> 0] | 0)) {
       break label$15
      }
      HEAP16[($2_1 + 28 | 0) >> 1] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
     }
     label$16 : {
      if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
       break label$16
      }
      HEAP16[($2_1 + 30 | 0) >> 1] = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     }
     HEAP32[$2_1 >> 2] = 0;
     $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 ? $3_1 : $5_1) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    }
    label$17 : {
     if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
      break label$17
     }
     $2_1 = $813(328 | 0) | 0;
     if (!$2_1) {
      break label$12
     }
     $218($2_1 | 0);
     $3_1 = 1;
     HEAP32[($2_1 + 4 | 0) >> 2] = 1;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
     $6_1 = $0_1 + 45 | 0;
     HEAP8[($2_1 + 24 | 0) >> 0] = (HEAPU8[$6_1 >> 0] | 0) & 1 | 0 ? 2 : 1;
     HEAP8[($2_1 + 25 | 0) >> 0] = (HEAPU8[$6_1 >> 0] | 0) & 2 | 0 ? 16 : 8;
     HEAP32[($2_1 + 28 | 0) >> 2] = HEAPU16[((((HEAPU8[$6_1 >> 0] | 0) >>> 1 | 0) & 6 | 0) + 56010 | 0) >> 1] | 0;
     label$18 : {
      label$19 : {
       label$20 : {
        label$21 : {
         $6_1 = (HEAPU8[$6_1 >> 0] | 0) >>> 4 | 0;
         switch ($6_1 + -10 | 0 | 0) {
         case 4:
          break label$18;
         case 1:
         case 2:
         case 3:
          break label$19;
         case 0:
          break label$21;
         default:
          break label$20;
         };
        }
        $3_1 = 15;
        break label$18;
       }
       if (($6_1 | 0) == (2 | 0)) {
        break label$18
       }
      }
      $3_1 = 0;
     }
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($6_1 ? $6_1 : $5_1) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    }
    label$22 : {
     if (!(HEAPU8[($0_1 + 68 | 0) >> 0] | 0)) {
      break label$22
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     $6_1 = $5_1;
     break label$10;
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = $704($1_1 | 0) | 0;
    $6_1 = $5_1;
    break label$10;
   }
   $217($0_1 | 0, $5_1 | 0);
  }
  label$23 : {
   $9_1 = $4_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $7$hi = 0, $8$hi = 0, $8_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $2_1 = 0;
  label$3 : {
   if ($60($0_1 | 0, $1_1 + 40 | 0 | 0, $1_1 + 32 | 0 | 0) | 0) {
    break label$3
   }
   $22_1 = $0_1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -4;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = $50($22_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 4 | 0, $1_1 + 28 | 0 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $762($1_1 + 8 | 0 | 0, $3_1 | 0);
   $4_1 = $778($1_1 + 8 | 0 | 0) | 0;
   $735($3_1 | 0);
   $2_1 = 0;
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $8_1 = $4_1 + 4 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$3 = $8_1;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $18_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0) {
      $19_1 = 0
     } else {
      $19_1 = 1
     }
     $20_1 = $19_1;
    } else {
     $20_1 = 0
    }
    $18_1 = $20_1;
   }
   if ($18_1) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$5 = $8_1;
   i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$4 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
   $0_1 = $50($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $4_1 | 0, $1_1 + 28 | 0 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   $762($1_1 + 8 | 0 | 0, $0_1 | 0);
   $766($1_1 + 8 | 0 | 0, 4 | 0) | 0;
   $3_1 = $782($1_1 + 8 | 0 | 0) | 0;
   $4_1 = $772($1_1 + 8 | 0 | 0) | 0;
   $735($0_1 | 0);
   $2_1 = 0;
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $2_1 = $4_1 << 24 | 0 | $3_1 | 0;
  }
  label$4 : {
   $6_1 = $1_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $2_1 | 0;
 }
 
 function $705($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0.0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 144 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $762($2_1 + 128 | 0 | 0, $1_1 | 0);
  label$3 : {
   $3_1 = $0_1 + 376 | 0;
   if (!($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0)) {
    break label$3
   }
   $4_1 = $0_1 + 96 | 0;
   $5_1 = $0_1 + 100 | 0;
   $1_1 = $0_1 + 232 | 0;
   $6_1 = $0_1 + 388 | 0;
   $7_1 = $0_1 + 384 | 0;
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 116 | 0) >> 2] = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
     HEAP32[($2_1 + 112 | 0) >> 2] = $0_1;
     $827(55684 | 0, $2_1 + 112 | 0 | 0);
     break label$3;
    }
    label$6 : {
     if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 96 | 0) >> 2] = $6_1;
     $827(55718 | 0, $2_1 + 96 | 0 | 0);
    }
    if (!($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0)) {
     break label$3
    }
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        switch ($8_1 + -8 | 0 | 0) {
        case 1:
         break label$7;
        case 2:
         break label$8;
        case 0:
         break label$9;
        default:
         break label$10;
        };
       }
       if (($8_1 | 0) != (3 | 0)) {
        break label$7
       }
      }
      if (!($707($2_1 + 128 | 0 | 0, 2 | 0, $4_1 | 0) | 0)) {
       break label$3
      }
      label$11 : while (1) {
       label$12 : {
        if (!(HEAP32[$4_1 >> 2] | 0)) {
         break label$12
        }
        if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        HEAP32[($2_1 + 68 | 0) >> 2] = $5_1;
        HEAP32[($2_1 + 64 | 0) >> 2] = $6_1;
        $827(55741 | 0, $2_1 + 64 | 0 | 0);
       }
       if (!($706($2_1 + 128 | 0 | 0, $1_1 | 0) | 0)) {
        break label$7
       }
       $8_1 = HEAP32[$1_1 >> 2] | 0;
       if (($8_1 | 0) == (9 | 0)) {
        break label$7
       }
       label$13 : {
        if ($708($8_1 | 0) | 0) {
         break label$13
        }
        if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
        HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
        $827(55756 | 0, $2_1 + 48 | 0 | 0);
        break label$3;
       }
       label$14 : {
        if ($824($6_1 | 0, 55730 | 0, 11 | 0) | 0) {
         break label$14
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        label$15 : {
         if ($824($5_1 | 0, 55788 | 0, 9 | 0) | 0) {
          break label$15
         }
         HEAP8[($0_1 + 68 | 0) >> 0] = 1;
         label$16 : {
          label$17 : {
           $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3] * 1.0e3;
           if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
            break label$17
           }
           $8_1 = ~~$11_1 >>> 0;
           break label$16;
          }
          $8_1 = 0;
         }
         HEAP32[($0_1 + 72 | 0) >> 2] = $8_1;
         if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
         $827(55810 | 0, $2_1 | 0);
         break label$14;
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        label$18 : {
         if ($824($5_1 | 0, 55797 | 0, 6 | 0) | 0) {
          break label$18
         }
         HEAP8[($0_1 + 76 | 0) >> 0] = 1;
         label$19 : {
          label$20 : {
           $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3];
           if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
            break label$20
           }
           $8_1 = ~~$11_1 >>> 0;
           break label$19;
          }
          $8_1 = 0;
         }
         HEAP32[($0_1 + 80 | 0) >> 2] = $8_1;
         if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
         $827(55822 | 0, $2_1 + 16 | 0 | 0);
         break label$14;
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        if ($824($5_1 | 0, 55803 | 0, 7 | 0) | 0) {
         break label$14
        }
        HEAP8[($0_1 + 84 | 0) >> 0] = 1;
        label$21 : {
         label$22 : {
          $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3];
          if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
           break label$22
          }
          $8_1 = ~~$11_1 >>> 0;
          break label$21;
         }
         $8_1 = 0;
        }
        HEAP32[($0_1 + 88 | 0) >> 2] = $8_1;
        if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$14
        }
        if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$14
        }
        HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
        $827(55831 | 0, $2_1 + 32 | 0 | 0);
       }
       if ($707($2_1 + 128 | 0 | 0, 2 | 0, $4_1 | 0) | 0) {
        continue label$11
       }
       break label$3;
      };
     }
     $8_1 = 0;
     if (!(HEAP32[$7_1 >> 2] | 0)) {
      break label$7
     }
     label$23 : while (1) {
      if (!($706($2_1 + 128 | 0 | 0, $1_1 | 0) | 0)) {
       break label$7
      }
      label$24 : {
       if (!($708(HEAP32[$1_1 >> 2] | 0 | 0) | 0)) {
        break label$24
       }
       $8_1 = $8_1 + 1 | 0;
       if ($8_1 >>> 0 >= (HEAP32[$7_1 >> 2] | 0) >>> 0) {
        break label$7
       }
       continue label$23;
      }
      break label$23;
     };
     if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
     $827(55841 | 0, $2_1 + 80 | 0 | 0);
     break label$3;
    }
    if ($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$25 : {
   $10_1 = $2_1 + 144 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $30_1 = 0, $51_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   $4_1 = $764($0_1 | 0) | 0;
   if (($4_1 | 0) == (-1 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(55877 | 0, $2_1 | 0);
   }
   HEAP32[$1_1 >> 2] = $4_1;
   label$5 : {
    label$6 : {
     switch ($4_1 | 0) {
     case 0:
      i64toi32_i32$0 = $780($0_1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $30_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $30_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      break label$5;
     case 1:
      HEAP8[($1_1 + 8 | 0) >> 0] = ($764($0_1 | 0) | 0 | 0) != (0 | 0);
      break label$5;
     case 2:
     case 12:
      if ($707($0_1 | 0, $4_1 | 0, $1_1 + 8 | 0 | 0) | 0) {
       break label$5
      }
      break label$3;
     case 7:
      HEAP16[($1_1 + 8 | 0) >> 1] = $777($0_1 | 0) | 0;
      break label$5;
     case 8:
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     case 10:
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     case 3:
     case 4:
     case 5:
     case 6:
     case 9:
      break label$5;
     case 11:
      break label$6;
     default:
      break label$3;
     };
    }
    i64toi32_i32$1 = $780($0_1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $51_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $51_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 16 | 0) >> 2] = (($777($0_1 | 0) | 0) << 16 | 0) >> 16 | 0;
   }
   $3_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$13 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (($1_1 | 0) != (2 | 0)) {
     break label$4
    }
    $1_1 = $777($0_1 | 0) | 0;
    break label$3;
   }
   $1_1 = $778($0_1 | 0) | 0;
  }
  $4_1 = 0;
  label$5 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$5
   }
   HEAP32[$2_1 >> 2] = $1_1;
   label$6 : {
    label$7 : {
     if ($1_1 >>> 0 < 128 >>> 0) {
      break label$7
     }
     $4_1 = 0;
     label$8 : {
      if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = 128;
      HEAP32[$3_1 >> 2] = $1_1;
      $827(55907 | 0, $3_1 | 0);
     }
     HEAP8[($2_1 + 131 | 0) >> 0] = 0;
     if (($768($0_1 | 0, $2_1 + 4 | 0 | 0, 127 | 0) | 0 | 0) != (127 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + -127 | 0;
     if (($766($0_1 | 0, $1_1 | 0) | 0 | 0) == ($1_1 | 0)) {
      break label$6
     }
     break label$5;
    }
    $4_1 = 0;
    $2_1 = $2_1 + 4 | 0;
    HEAP8[($2_1 + $1_1 | 0) >> 0] = 0;
    if (($768($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$5
    }
   }
   $4_1 = 1;
  }
  label$9 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 > 12 >>> 0) {
    break label$1
   }
   return (6375 >>> ($0_1 & 8191 | 0) | 0) & 1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return !(HEAPU8[$0_1 >> 0] | 0) | 0;
 }
 
 function $710($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = 2;
  label$1 : {
   $5_1 = $2_1 << 2 | 0;
   $2_1 = $5_1 + 8 | 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) >= ((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0 | 0)) {
    break label$1
   }
   $6_1 = $0_1 + $2_1 | 0;
   $4_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP16[$3_1 >> 1] = ($4_1 << 24 | 0 | (($4_1 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0;
   $0_1 = $5_1 + $0_1 | 0;
   HEAP16[($3_1 + 2 | 0) >> 1] = ((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0;
   $4_1 = 0;
  }
  return $4_1 | 0;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  return (((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -9 | 0 | 0) / (4 | 0) | 0) & 255 | 0 | 0;
 }
 
 function $712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 10 | 0;
  $3_1 = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  return $2_1 >>> 0 <= $3_1 >>> 0 & (((HEAPU8[$0_1 >> 0] | 0 | 0) == (2 | 0) & ($3_1 + 1 | 0 | 0) < ($1_1 | 0) | 0) & ($2_1 | 0) < ($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) | 0 | 0;
 }
 
 function $714($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = 0;
  label$3 : {
   if (($1_1 | 0) < (13 | 0)) {
    break label$3
   }
   label$4 : {
    $5_1 = $1_1 + -12 | 0;
    $1_1 = ((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0;
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(62424 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$3_1 >> 2] = $1_1;
    $827(56044 | 0, $3_1 | 0);
    break label$3;
   }
   $4_1 = $719($0_1 + 12 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  label$5 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 12 | 0;
   if (($3_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $4_1 = (((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = $2_1 + 1 | 0;
    $5_1 = $3_1 + $0_1 | 0;
    $3_1 = ($3_1 + (((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($5_1 + 4 | 0) >> 0] | 0) | 0) | 0) + 5 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $716($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $1_1 = $717($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   return 2 | 0;
  }
  $0_1 = $0_1 + $1_1 | 0;
  HEAP8[$3_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
  HEAP16[($3_1 + 2 | 0) >> 1] = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  return 0 | 0;
 }
 
 function $717($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 12 | 0;
  label$1 : {
   if (($2_1 | 0) >= (1 | 0)) {
    break label$1
   }
   return $3_1 | 0;
  }
  $4_1 = 0;
  label$2 : while (1) {
   label$3 : {
    if (($3_1 | 0) < ($1_1 | 0)) {
     break label$3
    }
    return -1 | 0;
   }
   $5_1 = -1;
   label$4 : {
    if (($3_1 | 0) >= ((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0 | 0)) {
     break label$4
    }
    $5_1 = $3_1 + $0_1 | 0;
    $3_1 = ($3_1 + (((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($5_1 + 4 | 0) >> 0] | 0) | 0) | 0) + 5 | 0;
    $5_1 = $3_1;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
   }
   break label$2;
  };
  return $5_1 | 0;
 }
 
 function $718($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  label$1 : {
   $2_1 = $717($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) != (-1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $4_1 = 0;
  label$2 : {
   $5_1 = $2_1 + 5 | 0;
   $1_1 = $1_1 - $5_1 | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$2
   }
   $21_1 = $0_1 + $5_1 | 0;
   $0_1 = $2_1 + $0_1 | 0;
   $0_1 = ((HEAPU8[($0_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) | 0;
   $4_1 = $719($21_1 | 0, (($0_1 | 0) > ($1_1 | 0) ? $1_1 : $0_1) | 0, $3_1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $719($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   label$2 : {
    label$3 : while (1) {
     if (($4_1 | 0) == ($2_1 | 0)) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     $3_1 = ($3_1 + (HEAPU8[(($3_1 + $0_1 | 0) + 1 | 0) >> 0] | 0) | 0) + 2 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $3_1 = $0_1 + $3_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP8[$1_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) >>> 7 | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) >>> 6 | 0) & 1 | 0;
  $2_1 = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  HEAP16[($1_1 + 4 | 0) >> 1] = $2_1;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP16[($1_1 + 6 | 0) >> 1] = ($3_1 << 24 | 0 | (($3_1 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0;
  HEAP8[($1_1 + 8 | 0) >> 0] = ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) >>> 1 | 0) & 31 | 0;
  HEAP8[($1_1 + 9 | 0) >> 0] = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 1 | 0;
  HEAP8[($1_1 + 10 | 0) >> 0] = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
  HEAP8[($1_1 + 11 | 0) >> 0] = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
  $4_1 = ($2_1 + $0_1 | 0) + -3 | 0;
  $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
 }
 
 function $721($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = 1;
  label$1 : {
   label$2 : {
    if ($4_1) {
     break label$2
    }
    $6_1 = 1;
    break label$1;
   }
   $7_1 = 0;
   $8_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $9_1 = HEAPU8[($3_1 + $7_1 | 0) >> 0] | 0;
     $10_1 = HEAPU8[($1_1 + $7_1 | 0) >> 0] | 0;
     $11_1 = HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0;
     if ((($9_1 | $10_1 | 0) & 255 | 0 | 0) == (($11_1 | $10_1 | 0) & 255 | 0 | 0)) {
      break label$4
     }
     $6_1 = 0;
     break label$1;
    }
    $6_1 = 1;
    $10_1 = HEAPU8[($2_1 + $7_1 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      if (!($8_1 & 1 | 0)) {
       break label$6
      }
      $8_1 = 1;
      break label$5;
     }
     $12_1 = $10_1 & 255 | 0;
     $8_1 = ($12_1 | 0) != (255 | 0);
     $5_1 = $5_1 & ($12_1 | 0) == (255 | 0) | 0;
    }
    $5_1 = $5_1 | ((($11_1 ^ $9_1 | 0) & ($10_1 ^ -1 | 0) | 0) & 255 | 0 | 0) != (0 | 0) | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($4_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $5_1 & $6_1 | 0 | 0;
 }
 
 function $722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $813($1_1 | 0) | 0 | 0;
 }
 
 function $723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $815($1_1 | 0);
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 79 | 0);
  }
  label$5 : {
   label$6 : {
    $1_1 = ($1_1 + 3 | 0) & -4 | 0;
    if ($1_1 >>> 0 > 262123 >>> 0) {
     break label$6
    }
    $1_1 = $1_1 + 16 | 0;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
        break label$8
       }
      }
      $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 89 | 0);
     }
     label$10 : {
      label$11 : {
       label$12 : {
        $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if ($3_1 >>> 0 < $1_1 >>> 0) {
         break label$12
        }
        $3_1 = $3_1 - $1_1 | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
        $3_1 = ($0_1 + $3_1 | 0) + 40 | 0;
        label$13 : {
         $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$13
         }
         HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
        }
        $5_1 = $0_1 + 20 | 0;
        label$14 : {
         if (HEAP32[($0_1 + 24 | 0) >> 2] | 0) {
          break label$14
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        HEAP32[$3_1 >> 2] = $4_1;
        HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
        HEAP16[($3_1 + 12 | 0) >> 1] = $1_1 >>> 2 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = 0;
        $0_1 = (($3_1 - $0_1 | 0) >>> 2 | 0) & 16383 | 0;
        break label$11;
       }
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = $3_1 - $1_1 | 0;
       $6_1 = $0_1 + 24 | 0;
       $5_1 = HEAP32[$6_1 >> 2] | 0;
       $7_1 = $0_1 + 20 | 0;
       $4_1 = $0_1 + ((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $3_1 | 0) | 0;
       $3_1 = $4_1 + 40 | 0;
       HEAP32[($5_1 ? $5_1 : $7_1) >> 2] = $3_1;
       HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[($4_1 + 48 | 0) >> 2] = $7_1;
       HEAP32[$6_1 >> 2] = $3_1;
       HEAP16[($4_1 + 52 | 0) >> 1] = $1_1 >>> 2 | 0;
       $0_1 = ($3_1 - $0_1 | 0) >>> 2 | 0;
      }
      HEAP16[($3_1 + 14 | 0) >> 1] = $0_1;
      $0_1 = $3_1 + 16 | 0;
      break label$5;
     }
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$7
     }
     break label$7;
    };
    $0_1 = 0;
    break label$5;
   }
   $0_1 = 0;
   if (!($834(62440 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = 262124;
   HEAP32[$2_1 >> 2] = $1_1;
   $827(56179 | 0, $2_1 | 0);
  }
  label$15 : {
   $9_1 = $2_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $0_1 | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 132 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 134 | 0);
   }
   label$6 : {
    if (!($726($0_1 | 0, $1_1 | 0) | 0)) {
     break label$6
    }
    return 1 | 0;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
  return 0 | 0;
 }
 
 function $726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (($0_1 + 40 | 0) >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $1_1 = 1;
    if ((($0_1 + (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) + 24 | 0) >>> 0 >= $0_1 >>> 0) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, $9_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 147 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if (!($725($0_1 | 0, $1_1 | 0) | 0)) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           if (!($726($0_1 | 0, $1_1 | 0) | 0)) {
            break label$11
           }
           $2_1 = $1_1 + -16 | 0;
           $3_1 = $1_1 + -2 | 0;
           if (((($2_1 - $0_1 | 0) >>> 2 | 0) & 16383 | 0 | 0) != (HEAPU16[$3_1 >> 1] | 0 | 0)) {
            break label$8
           }
           label$12 : {
            label$13 : {
             $4_1 = $1_1 + -12 | 0;
             $5_1 = HEAP32[$4_1 >> 2] | 0;
             if (!$5_1) {
              break label$13
             }
             if ($726($0_1 | 0, $5_1 | 0) | 0) {
              break label$12
             }
             $859(56298 | 0, 56106 | 0, 161 | 0);
             abort();
            }
            if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$7
            }
           }
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                $6_1 = HEAP32[$2_1 >> 2] | 0;
                if (!$6_1) {
                 break label$18
                }
                if ($726($0_1 | 0, $6_1 | 0) | 0) {
                 break label$17
                }
                $859(56449 | 0, 56106 | 0, 163 | 0);
                abort();
               }
               label$19 : {
                $7_1 = $0_1 + 24 | 0;
                if ((HEAP32[$7_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                 break label$19
                }
                HEAP16[$3_1 >> 1] = 0;
                $3_1 = $0_1 + 20 | 0;
                $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                break label$16;
               }
               $859(56531 | 0, 56106 | 0, 164 | 0);
               abort();
              }
              $7_1 = $0_1 + 24 | 0;
              $9_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP16[$3_1 >> 1] = 0;
              $3_1 = $0_1 + 20 | 0;
              $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
              if (($9_1 | 0) != ($2_1 | 0)) {
               break label$15
              }
             }
             label$20 : {
              if (!$5_1) {
               break label$20
              }
              $2_1 = (($0_1 + $8_1 | 0) - ($5_1 + ((HEAPU16[($5_1 + 12 | 0) >> 1] | 0) << 2 | 0) | 0) | 0) + 40 | 0;
              if ($2_1 >>> 0 < (((HEAPU16[($1_1 + -4 | 0) >> 1] | 0) << 2 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) >>> 0) {
               break label$6
              }
              HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
              break label$14;
             }
             HEAP32[($0_1 + 16 | 0) >> 2] = $8_1;
             HEAP32[($0_1 + 12 | 0) >> 2] = 0;
             break label$14;
            }
            if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$14
            }
            $2_1 = ($6_1 - $0_1 | 0) + -40 | 0;
            if ($2_1 >>> 0 < (((HEAPU16[($1_1 + -4 | 0) >> 1] | 0) << 2 | 0) + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >>> 0) {
             break label$5
            }
            HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
           }
           if (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >>> 0 > $8_1 >>> 0) {
            break label$4
           }
           if ((HEAP32[($1_1 + -8 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
            break label$3
           }
           label$21 : {
            label$22 : {
             if (!$6_1) {
              break label$22
             }
             HEAP32[($6_1 + 4 | 0) >> 2] = $5_1;
             $5_1 = HEAP32[$4_1 >> 2] | 0;
             break label$21;
            }
            HEAP32[$7_1 >> 2] = $5_1;
           }
           HEAP32[($5_1 ? $5_1 : $3_1) >> 2] = $6_1;
           return;
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($0_1) {
           continue label$10
          }
          break label$10;
         };
         $859(56821 | 0, 56106 | 0, 201 | 0);
         abort();
        }
        $859(56228 | 0, 56106 | 0, 149 | 0);
        abort();
       }
       $859(56258 | 0, 56106 | 0, 159 | 0);
       abort();
      }
      $859(56380 | 0, 56106 | 0, 162 | 0);
      abort();
     }
     $859(56599 | 0, 56106 | 0, 171 | 0);
     abort();
    }
    $859(56657 | 0, 56106 | 0, 181 | 0);
    abort();
   }
   $859(56715 | 0, 56106 | 0, 188 | 0);
   abort();
  }
  $859(56766 | 0, 56106 | 0, 195 | 0);
  abort();
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   $3_1 = ($1_1 + 3 | 0) & -4 | 0;
   $4_1 = $3_1 + 40 | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, $4_1) | 0;
   label$4 : {
    if ((HEAP8[(0 + 62440 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62440 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = 16;
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    $827(56829 | 0, $2_1 + 16 | 0 | 0);
   }
   label$5 : {
    label$6 : {
     if ($1_1) {
      break label$6
     }
     $1_1 = 0;
     if (!($835(62440 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = $4_1;
     $827(56880 | 0, $2_1 | 0);
     break label$5;
    }
    $845($1_1 | 0, 40 | 0, $1_1 + 36 | 0 | 0, 56096 | 0);
    HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 4 | 0) >> 2] = 210;
    HEAP32[$1_1 >> 2] = 211;
   }
   label$7 : {
    $6_1 = $2_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return $1_1 | 0;
  }
  $859(56823 | 0, 56106 | 0, 221 | 0);
  abort();
 }
 
 function $729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $727($0_1 | 0, $1_1 | 0);
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $724($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 249 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 251 | 0);
   }
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $845($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 0 | 0);
   FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
   $0_1 = $1_1;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, 72) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + 68 | 0;
  $845($2_1 | 0, 72 | 0, $3_1 | 0, 56928 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = $809($0_1 | 0, Math_imul($1_1, 3) >>> 2 | 0 | 0, 60 | 0) | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   $1_1 = $728($0_1 | 0, Math_imul($1_1 >>> 2 | 0, 60) | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    $822($2_1 + 12 | 0 | 0, 0 | 0, 56 | 0) | 0;
    return $2_1 | 0;
   }
   $812(HEAP32[$2_1 >> 2] | 0 | 0);
  }
  $845($2_1 | 0, 72 | 0, $3_1 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0]($0_1, $2_1);
  return 0 | 0;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 175 | 0);
  }
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $731(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $812(HEAP32[$0_1 >> 2] | 0 | 0);
  $845($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$4
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 238 | 0);
    }
    $1_1 = (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) + 1 | 0;
    HEAP16[($0_1 + 4 | 0) >> 1] = $1_1;
    if (($1_1 & 65535 | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
    return;
   }
   $859(57033 | 0, 56959 | 0, 235 | 0);
   abort();
  }
  $859(57038 | 0, 56959 | 0, 239 | 0);
  abort();
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (!$0_1) {
           break label$8
          }
          label$9 : {
           label$10 : {
            $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
            if (!$1_1) {
             break label$10
            }
            if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
             break label$9
            }
           }
           $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 253 | 0);
          }
          $2_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
          if (!$2_1) {
           break label$7
          }
          $2_1 = $2_1 + -1 | 0;
          HEAP16[($0_1 + 4 | 0) >> 1] = $2_1;
          label$11 : {
           if ($2_1 & 65535 | 0) {
            break label$11
           }
           $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           label$12 : {
            $2_1 = HEAP32[$2_1 >> 2] | 0;
            if (!$2_1) {
             break label$12
            }
            $3_1 = $0_1 + 24 | 0;
            $4_1 = 0;
            label$13 : {
             if (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) {
              break label$13
             }
             $4_1 = Math_imul(HEAPU16[($0_1 + 8 | 0) >> 1] | 0, 12);
            }
            FUNCTION_TABLE[$2_1]($0_1, $3_1 + $4_1 | 0);
            if (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) {
             break label$5
            }
           }
           label$14 : {
            label$15 : {
             switch (HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | 0) {
             case 1:
              $735(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
              break label$14;
             default:
              $859(57099 | 0, 56959 | 0, 276 | 0);
              abort();
             case 0:
              break label$15;
             };
            }
            $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
            if (!$4_1) {
             break label$14
            }
            $3_1 = $0_1 + 24 | 0;
            $5_1 = $3_1 + ($4_1 << 3 | 0) | 0;
            $2_1 = 0;
            label$18 : while (1) {
             HEAP32[($3_1 + ($2_1 << 3 | 0) | 0) >> 2] = 0;
             $2_1 = $2_1 + 1 | 0;
             if ($2_1 >>> 0 < $4_1 >>> 0) {
              continue label$18
             }
             break label$18;
            };
            if (!$4_1) {
             break label$14
            }
            $2_1 = 0;
            label$19 : while (1) {
             $3_1 = HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
             if (!$3_1) {
              break label$4
             }
             label$20 : {
              if (($3_1 | 0) == ($0_1 | 0)) {
               break label$20
              }
              $735($3_1 | 0);
              $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
             }
             $2_1 = $2_1 + 1 | 0;
             if ($2_1 >>> 0 < ($4_1 & 65535 | 0) >>> 0) {
              continue label$19
             }
             break label$19;
            };
           }
           if (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) {
            break label$3
           }
           $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$2
           }
           HEAP32[($1_1 + 12 | 0) >> 2] = $2_1 + -1 | 0;
           $2_1 = $1_1 + 20 | 0;
           HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP8[($0_1 + 6 | 0) >> 0] = 191;
           if (HEAP32[$0_1 >> 2] | 0) {
            break label$1
           }
           label$21 : {
            switch ((HEAPU8[($0_1 + 7 | 0) >> 0] | 0) + -160 | 0 | 0) {
            case 0:
             HEAP8[($0_1 + 7 | 0) >> 0] = 0;
             $2_1 = $1_1 + 36 | 0;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
             $808(HEAP32[$1_1 >> 2] | 0 | 0, $0_1 | 0);
             return;
            case 1:
             HEAP8[($0_1 + 7 | 0) >> 0] = 0;
             $2_1 = $1_1 + 40 | 0;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
             $727(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
             return;
            default:
             $859(57099 | 0, 56959 | 0, 316 | 0);
             abort();
            case 2:
             break label$21;
            };
           }
           HEAP8[($0_1 + 7 | 0) >> 0] = 0;
           $2_1 = $1_1 + 44 | 0;
           HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
           $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
           FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
          }
          return;
         }
         $859(57033 | 0, 56959 | 0, 249 | 0);
         abort();
        }
        $859(57056 | 0, 56959 | 0, 256 | 0);
        abort();
       }
       $859(57072 | 0, 56959 | 0, 263 | 0);
       abort();
      }
      $859(57082 | 0, 56959 | 0, 268 | 0);
      abort();
     }
     $859(57101 | 0, 56959 | 0, 290 | 0);
     abort();
    }
    $859(57082 | 0, 56959 | 0, 297 | 0);
    abort();
   }
   $859(57111 | 0, 56959 | 0, 298 | 0);
   abort();
  }
  $859(57138 | 0, 56959 | 0, 303 | 0);
  abort();
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 332 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, 216) | 0;
   if ($1_1) {
    break label$3
   }
   return 0 | 0;
  }
  $845($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56911 | 0);
  HEAP32[$1_1 >> 2] = $0_1;
  $737($1_1 | 0);
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP16[($1_1 + 6 | 0) >> 1] = 0;
  return $1_1 | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  HEAP16[($0_1 + 4 | 0) >> 1] = 16;
  HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 152 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $0_1 + 24 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 351 | 0);
  }
  label$3 : {
   $1_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
   if (!$1_1) {
    break label$3
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$4 : while (1) {
    label$5 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$3_1) {
      break label$5
     }
     $735($3_1 | 0);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 372 | 0);
  }
  label$3 : {
   label$4 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$3
    }
   }
   $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 374 | 0);
  }
  $738($0_1 | 0);
  $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($0_1 + 24 | 0 | 0)) {
    break label$5
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $2_1);
  }
  $845($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 437 | 0);
  }
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $40_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 445 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
      $3_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       break label$6
      }
      if (!($742($0_1 | 0) | 0)) {
       break label$5
      }
      $3_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
     }
     $2_1 = $2_1 & 65535 | 0;
     if ($2_1 >>> 0 >= ($3_1 & 65535 | 0) >>> 0) {
      break label$3
     }
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $40_1 = i64toi32_i32$0;
     i64toi32_i32$0 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $40_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
     HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = 0;
     $1_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
     HEAP16[($0_1 + 6 | 0) >> 1] = $2_1 + 1 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    }
    return;
   }
   $859(57176 | 0, 56959 | 0, 446 | 0);
   abort();
  }
  $859(57180 | 0, 56959 | 0, 453 | 0);
  abort();
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $7_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 405 | 0);
  }
  label$5 : {
   label$6 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
     break label$6
    }
    if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$5
    }
   }
   $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 407 | 0);
  }
  $3_1 = HEAP16[($0_1 + 4 | 0) >> 1] | 0;
  $4_1 = $3_1 & 65535 | 0;
  $5_1 = $4_1 << 1 | 0;
  label$7 : {
   label$8 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$8
    }
    $2_1 = 0;
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$1_1 >> 2] = $0_1;
    $827(58686 | 0, $1_1 | 0);
    break label$7;
   }
   label$9 : {
    $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $6_1 = Math_imul($4_1, 24);
    $3_1 = FUNCTION_TABLE[HEAP32[$3_1 >> 2] | 0]($3_1, $6_1) | 0;
    if ($3_1) {
     break label$9
    }
    $2_1 = 0;
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
    $827(58746 | 0, $1_1 + 16 | 0 | 0);
    break label$7;
   }
   $823($3_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 << 3 | 0 | 0) | 0;
   $6_1 = $3_1 + ($4_1 << 4 | 0) | 0;
   $823($6_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $4_1 << 2 | 0 | 0) | 0;
   label$10 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($0_1 + 24 | 0 | 0)) {
     break label$10
    }
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $4_1);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
   HEAP16[($0_1 + 4 | 0) >> 1] = $5_1;
   $2_1 = 1;
  }
  label$11 : {
   $8_1 = $1_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 467 | 0);
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  label$5 : {
   if ($2_1 >>> 0 < 65536 >>> 0) {
    break label$5
   }
   label$6 : while (1) {
    HEAP32[($3_1 + 12 | 0) >> 2] = 131068;
    $741($0_1 | 0, $3_1 + 8 | 0 | 0);
    $1_1 = $1_1 + 65532 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    $2_1 = $2_1 + -65532 | 0;
    if ($2_1 >>> 0 >= 65536 >>> 0) {
     continue label$6
    }
    break label$6;
   };
  }
  HEAP16[($3_1 + 14 | 0) >> 1] = 1;
  HEAP16[($3_1 + 12 | 0) >> 1] = $2_1;
  $741($0_1 | 0, $3_1 + 8 | 0 | 0);
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $100_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 498 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!$1_1) {
       break label$6
      }
      label$7 : {
       label$8 : {
        $2_1 = HEAP32[$0_1 >> 2] | 0;
        if (!$2_1) {
         break label$8
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$7
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 500 | 0);
      }
      label$9 : {
       label$10 : {
        $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$10
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$9
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 501 | 0);
      }
      $3_1 = $1_1;
      label$11 : {
       if (!(HEAPU8[($3_1 + 6 | 0) >> 0] | 0)) {
        break label$11
       }
       $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      }
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$13
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$12
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 503 | 0);
      }
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
      $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      if ($2_1 >>> 0 > $4_1 >>> 0) {
       break label$5
      }
      $5_1 = $3_1 + 24 | 0;
      $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
      $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0;
      $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $9_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
      label$14 : {
       label$15 : while (1) {
        if (!$9_1) {
         break label$14
        }
        label$16 : {
         if ($2_1 >>> 0 >= $4_1 >>> 0) {
          break label$16
         }
         $3_1 = (HEAPU16[($1_1 + 4 | 0) >> 1] | 0) + 1 | 0;
         HEAP16[($1_1 + 4 | 0) >> 1] = $3_1;
         if (($3_1 & 65535 | 0 | 0) != ($3_1 | 0)) {
          break label$4
         }
         HEAP32[$7_1 >> 2] = $1_1;
         $3_1 = HEAPU16[($5_1 + 4 | 0) >> 1] | 0;
         i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
         $100_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $6_1;
         HEAP32[i64toi32_i32$0 >> 2] = $100_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $6_1 = i64toi32_i32$0 + 8 | 0;
         $5_1 = $5_1 + 8 | 0;
         $7_1 = $7_1 + 4 | 0;
         $8_1 = $8_1 + $3_1 | 0;
         continue label$15;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
        HEAP16[($0_1 + 6 | 0) >> 1] = $2_1;
        if (!($742($0_1 | 0) | 0)) {
         break label$14
        }
        $3_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         break label$3
        }
        $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0;
        $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
        $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
        if ($3_1 >>> 0 < $4_1 >>> 0) {
         continue label$15
        }
        break label$15;
       };
       $859(57180 | 0, 56959 | 0, 547 | 0);
       abort();
      }
      HEAP16[($0_1 + 6 | 0) >> 1] = $2_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
      return;
     }
     $859(57033 | 0, 56959 | 0, 499 | 0);
     abort();
    }
    $859(57202 | 0, 56959 | 0, 516 | 0);
    abort();
   }
   $859(57038 | 0, 56959 | 0, 526 | 0);
   abort();
  }
  $859(57225 | 0, 56959 | 0, 546 | 0);
  abort();
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 562 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if (($2_1 | 0) != (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          $3_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
          if (($3_1 | 0) != (HEAPU16[($0_1 + 6 | 0) >> 1] | 0 | 0)) {
           break label$9
          }
          $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
          if ($4_1 >>> 0 > $3_1 >>> 0) {
           break label$8
          }
          if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < $3_1 >>> 0) {
           break label$7
          }
          label$11 : {
           $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           $6_1 = $4_1 - (($5_1 | 0) > (0 | 0)) | 0;
           if (!$6_1) {
            break label$11
           }
           if ($6_1 >>> 0 > $3_1 >>> 0) {
            break label$6
           }
           $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
           $5_1 = 0;
           $4_1 = 0;
           label$12 : while (1) {
            label$13 : {
             $7_1 = HEAP32[$3_1 >> 2] | 0;
             if (!$7_1) {
              break label$13
             }
             $735($7_1 | 0);
            }
            $3_1 = $3_1 + 4 | 0;
            $5_1 = $5_1 + (HEAPU16[($2_1 + 4 | 0) >> 1] | 0) | 0;
            $2_1 = $2_1 + 8 | 0;
            $4_1 = $4_1 + 1 | 0;
            if (($4_1 | 0) != ($6_1 | 0)) {
             continue label$12
            }
            break label$12;
           };
           $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $5_1 >>> 0) {
            break label$5
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $5_1 | 0;
           label$14 : {
            $4_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
            if ($6_1 >>> 0 >= $4_1 >>> 0) {
             break label$14
            }
            $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
            $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
            $5_1 = 0;
            $7_1 = $6_1 << 3 | 0;
            $8_1 = $6_1 << 2 | 0;
            label$15 : while (1) {
             i64toi32_i32$2 = $2_1 + $7_1 | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             HEAP32[$2_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
             HEAP32[$3_1 >> 2] = HEAP32[($3_1 + $8_1 | 0) >> 2] | 0;
             $3_1 = $3_1 + 4 | 0;
             $2_1 = $2_1 + 8 | 0;
             $5_1 = $5_1 + 1 | 0;
             if (($5_1 + $6_1 | 0) >>> 0 < $4_1 >>> 0) {
              continue label$15
             }
             break label$15;
            };
           }
           $3_1 = $4_1 - $6_1 | 0;
           HEAP16[($0_1 + 6 | 0) >> 1] = $3_1;
           $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          label$16 : {
           if (($5_1 | 0) < (1 | 0)) {
            break label$16
           }
           $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $4_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
           if (($5_1 | 0) > ($4_1 | 0)) {
            break label$4
           }
           $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           $4_1 = $4_1 - $5_1 | 0;
           if ($6_1 >>> 0 < $4_1 >>> 0) {
            break label$3
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $6_1 - $4_1 | 0;
           $4_1 = HEAP32[$1_1 >> 2] | 0;
           HEAP16[($2_1 + 4 | 0) >> 1] = $5_1;
           HEAP32[$2_1 >> 2] = $4_1;
          }
          HEAP16[($1_1 + 8 | 0) >> 1] = 0;
          HEAP16[($1_1 + 10 | 0) >> 1] = $3_1;
          i64toi32_i32$1 = 0;
          HEAP32[$1_1 >> 2] = 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          return;
         }
         $859(57247 | 0, 56959 | 0, 563 | 0);
         abort();
        }
        $859(57271 | 0, 56959 | 0, 564 | 0);
        abort();
       }
       $859(57299 | 0, 56959 | 0, 565 | 0);
       abort();
      }
      $859(57328 | 0, 56959 | 0, 566 | 0);
      abort();
     }
     $859(57353 | 0, 56959 | 0, 579 | 0);
     abort();
    }
    $859(57376 | 0, 56959 | 0, 589 | 0);
    abort();
   }
   $859(57397 | 0, 56959 | 0, 604 | 0);
   abort();
  }
  $859(57428 | 0, 56959 | 0, 605 | 0);
  abort();
 }
 
 function $746($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   $5_1 = $3_1 ? $3_1 : 58788;
   $3_1 = $747($0_1 | 0, (Math_imul($1_1, 12) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) + 24 | 0 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   $748($0_1 | 0, $3_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 60 >>> 0) {
      break label$3
     }
     label$4 : {
      $2_1 = $804(HEAP32[$0_1 >> 2] | 0 | 0, 60 | 0) | 0;
      if (!$2_1) {
       break label$4
      }
      $0_1 = $0_1 + 24 | 0;
      $1_1 = 160;
      break label$2;
     }
     $2_1 = $0_1 + 48 | 0;
     HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
    }
    label$5 : {
     $2_1 = $724(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
     if (!$2_1) {
      break label$5
     }
     $0_1 = $0_1 + 28 | 0;
     $1_1 = 161;
     break label$2;
    }
    $2_1 = $0_1 + 52 | 0;
    HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2] | 0]($2_1, $1_1) | 0;
    if (!$2_1) {
     break label$1
    }
    $0_1 = $0_1 + 32 | 0;
    $1_1 = 162;
   }
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
   HEAP8[($2_1 + 7 | 0) >> 0] = $1_1;
   return $2_1 | 0;
  }
  $859(57099 | 0, 56959 | 0, 651 | 0);
  abort();
 }
 
 function $748($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = $4_1;
  HEAP8[($1_1 + 6 | 0) >> 0] = $3_1;
  HEAP16[($1_1 + 4 | 0) >> 1] = 1;
  HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
  $6_1 = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  $0_1 = $0_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     HEAP16[($1_1 + 8 | 0) >> 1] = $2_1;
     $0_1 = $1_1 + 24 | 0;
     break label$2;
    }
    $0_1 = $1_1 + 24 | 0;
    if ($3_1 & 255 | 0) {
     break label$1
    }
    $2_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   }
   $6_1 = Math_imul($2_1 & 65535 | 0, 12);
  }
  $1_1 = $0_1 + $6_1 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          switch ($0_1 + -4 | 0 | 0) {
          case 4:
           break label$10;
          case 0:
           break label$11;
          case 1:
          case 2:
          case 3:
           break label$8;
          default:
           break label$9;
          };
         }
         if (!$5_1) {
          break label$6
         }
         HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
         return;
        }
        if (!$5_1) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        return;
       }
       if (!$0_1) {
        break label$7
       }
      }
      if (!$5_1) {
       break label$4
      }
      $823($1_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
     }
     return;
    }
    $859(58796 | 0, 56959 | 0, 678 | 0);
    abort();
   }
   $859(58796 | 0, 56959 | 0, 681 | 0);
   abort();
  }
  $859(58796 | 0, 56959 | 0, 685 | 0);
  abort();
 }
 
 function $749($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 856 | 0);
  }
  label$3 : {
   $0_1 = $746($0_1 | 0, 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $750($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $30_1 = 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     $6_1 = $5_1;
     label$4 : {
      $7_1 = HEAP32[$3_1 >> 2] | 0;
      if (!$7_1) {
       break label$4
      }
      $8_1 = (HEAPU16[($7_1 + 4 | 0) >> 1] | 0) + 1 | 0;
      HEAP16[($7_1 + 4 | 0) >> 1] = $8_1;
      $6_1 = $7_1;
      if (($8_1 & 65535 | 0 | 0) != ($8_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = $6_1;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $30_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $30_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2_1 = $2_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 8 | 0;
     $0_1 = i64toi32_i32$0 + 8 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return;
  }
  $859(57038 | 0, 56959 | 0, 762 | 0);
  abort();
 }
 
 function $751($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 911 | 0);
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 72 | 0, $3_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 913 | 0);
  }
  label$5 : {
   $4_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
   $3_1 = $746($3_1 | 0, $4_1 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (!$3_1) {
    break label$5
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = $3_1 + 24 | 0;
   $752($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 + ((HEAPU16[($3_1 + 8 | 0) >> 1] | 0) << 3 | 0) | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $4_1 | 0, $3_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
  return $3_1 | 0;
 }
 
 function $752($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $18_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   label$2 : while (1) {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $6_1 ? $6_1 : $5_1;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $18_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $1_1 + 8 | 0;
    $0_1 = i64toi32_i32$0 + 8 | 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $753($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 936 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) != (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
               break label$14
              }
              $6_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
              if (($6_1 | 0) != (HEAPU16[($0_1 + 6 | 0) >> 1] | 0 | 0)) {
               break label$13
              }
              $7_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
              if ($7_1 >>> 0 > $6_1 >>> 0) {
               break label$12
              }
              if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
               break label$11
              }
              if ((HEAPU16[($2_1 + 10 | 0) >> 1] | 0 | 0) != ($6_1 | 0)) {
               break label$10
              }
              $5_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
              if ($5_1 >>> 0 > $6_1 >>> 0) {
               break label$9
              }
              if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < $6_1 >>> 0) {
               break label$8
              }
              if ($7_1 >>> 0 > $5_1 >>> 0) {
               break label$7
              }
              if (($754($1_1 | 0) | 0) >>> 0 > ($754($2_1 | 0) | 0) >>> 0) {
               break label$6
              }
              label$15 : {
               label$16 : {
                $6_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$6_1) {
                 break label$16
                }
                if ((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
                 break label$15
                }
               }
               $846($6_1 | 0, 72 | 0, $6_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 948 | 0);
               $5_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               $7_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
              }
              $7_1 = ($7_1 & 65535 | 0) - ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0)) | 0;
              $5_1 = $5_1 & 65535 | 0;
              if ($7_1 >>> 0 > $5_1 >>> 0) {
               break label$5
              }
              label$17 : {
               $5_1 = $5_1 - $7_1 | 0;
               $6_1 = $746($6_1 | 0, $5_1 | 0, 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
               if (!$6_1) {
                break label$17
               }
               HEAP32[($6_1 + 12 | 0) >> 2] = ($754($2_1 | 0) | 0) - ($754($1_1 | 0) | 0) | 0;
               if (!$5_1) {
                break label$17
               }
               $3_1 = $6_1 + 24 | 0;
               $4_1 = $7_1 << 3 | 0;
               $750($3_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0 | 0, $3_1 + ((HEAPU16[($6_1 + 8 | 0) >> 1] | 0) << 3 | 0) | 0 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0 | 0, $5_1 | 0, $6_1 | 0);
               label$18 : {
                $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$18
                }
                $0_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
                if (($1_1 | 0) > (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
                 break label$4
                }
                HEAP16[($6_1 + 28 | 0) >> 1] = $1_1;
                HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) - $1_1 | 0) | 0;
               }
               $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
               if (($0_1 | 0) < (1 | 0)) {
                break label$17
               }
               $1_1 = (($5_1 << 3 | 0) + $3_1 | 0) + -4 | 0;
               $2_1 = HEAPU16[$1_1 >> 1] | 0;
               if (($0_1 | 0) > ($2_1 | 0)) {
                break label$3
               }
               HEAP16[$1_1 >> 1] = $2_1 - $0_1 | 0;
              }
              return $6_1 | 0;
             }
             $859(57486 | 0, 56959 | 0, 937 | 0);
             abort();
            }
            $859(57509 | 0, 56959 | 0, 938 | 0);
            abort();
           }
           $859(57536 | 0, 56959 | 0, 939 | 0);
           abort();
          }
          $859(57563 | 0, 56959 | 0, 940 | 0);
          abort();
         }
         $859(57585 | 0, 56959 | 0, 941 | 0);
         abort();
        }
        $859(57611 | 0, 56959 | 0, 942 | 0);
        abort();
       }
       $859(57328 | 0, 56959 | 0, 943 | 0);
       abort();
      }
      $859(57636 | 0, 56959 | 0, 944 | 0);
      abort();
     }
     $859(57660 | 0, 56959 | 0, 945 | 0);
     abort();
    }
    $859(57710 | 0, 56959 | 0, 956 | 0);
    abort();
   }
   $859(57731 | 0, 56959 | 0, 969 | 0);
   abort();
  }
  $859(57769 | 0, 56959 | 0, 975 | 0);
  abort();
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = 0;
   $2_1 = 0;
   label$2 : while (1) {
    $1_1 = $1_1 + (HEAPU16[(($4_1 + ($2_1 << 3 | 0) | 0) + 4 | 0) >> 1] | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $1_1 - (($2_1 | 0) > (0 | 0) ? $2_1 : 0) | 0 | 0;
 }
 
 function $755($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $4_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 994 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 995 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($4_1 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
                break label$17
               }
               $5_1 = HEAPU16[($2_1 + 10 | 0) >> 1] | 0;
               if (($5_1 | 0) != (HEAPU16[($1_1 + 6 | 0) >> 1] | 0 | 0)) {
                break label$16
               }
               $6_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               if ($6_1 >>> 0 > $5_1 >>> 0) {
                break label$15
               }
               if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
                break label$14
               }
               if ((HEAPU16[($3_1 + 10 | 0) >> 1] | 0 | 0) != ($5_1 | 0)) {
                break label$13
               }
               $4_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
               if ($4_1 >>> 0 > $5_1 >>> 0) {
                break label$12
               }
               if ((HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 0 < $5_1 >>> 0) {
                break label$11
               }
               if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < (HEAPU16[($0_1 + 6 | 0) >> 1] | 0) >>> 0) {
                break label$10
               }
               if ($6_1 >>> 0 > $4_1 >>> 0) {
                break label$9
               }
               if (($754($2_1 | 0) | 0) >>> 0 > ($754($3_1 | 0) | 0) >>> 0) {
                break label$8
               }
               label$18 : {
                label$19 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if (!$5_1) {
                  break label$19
                 }
                 if ((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
                  break label$18
                 }
                }
                $846($5_1 | 0, 72 | 0, $5_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1008 | 0);
                $4_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
                $6_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               }
               $7_1 = ($6_1 & 65535 | 0) - ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0)) | 0;
               $5_1 = $4_1 & 65535 | 0;
               if ($7_1 >>> 0 > $5_1 >>> 0) {
                break label$7
               }
               $4_1 = $5_1 - $7_1 | 0;
               $5_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
               label$20 : {
                label$21 : while (1) {
                 $8_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
                 $9_1 = $4_1 + $8_1 | 0;
                 $6_1 = $5_1 & 65535 | 0;
                 if ($9_1 >>> 0 < $6_1 >>> 0) {
                  break label$20
                 }
                 label$22 : {
                  if ($742($0_1 | 0) | 0) {
                   break label$22
                  }
                  return 0 | 0;
                 }
                 $5_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
                 if ($5_1 >>> 0 > $6_1 >>> 0) {
                  continue label$21
                 }
                 break label$21;
                };
                $859(57949 | 0, 56959 | 0, 1024 | 0);
                abort();
               }
               HEAP32[($0_1 + 8 | 0) >> 2] = (($754($3_1 | 0) | 0) - ($754($2_1 | 0) | 0) | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
               label$23 : {
                if ($4_1) {
                 break label$23
                }
                return 1 | 0;
               }
               HEAP16[($0_1 + 6 | 0) >> 1] = $9_1;
               $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               $5_1 = $6_1 + ($8_1 << 3 | 0) | 0;
               $9_1 = $7_1 << 3 | 0;
               $750($5_1 | 0, (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $9_1 | 0 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0 | 0, (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0 | 0, $4_1 | 0, 0 | 0);
               label$24 : {
                $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                if (($0_1 | 0) < (1 | 0)) {
                 break label$24
                }
                $9_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
                if (($0_1 | 0) > (HEAPU16[($9_1 + 4 | 0) >> 1] | 0 | 0)) {
                 break label$6
                }
                HEAP16[(($6_1 + ($8_1 << 3 | 0) | 0) + 4 | 0) >> 1] = $0_1;
                HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ((HEAPU16[($9_1 + 4 | 0) >> 1] | 0) - $0_1 | 0) | 0;
               }
               label$25 : {
                $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                if (($0_1 | 0) < (1 | 0)) {
                 break label$25
                }
                $5_1 = ($4_1 << 3 | 0) + $5_1 | 0;
                $6_1 = HEAPU16[($5_1 + -4 | 0) >> 1] | 0;
                if (($0_1 | 0) > ($6_1 | 0)) {
                 break label$5
                }
                HEAP16[(($5_1 + -8 | 0) + 4 | 0) >> 1] = $6_1 - $0_1 | 0;
               }
               return 1 | 0;
              }
              $859(57801 | 0, 56959 | 0, 996 | 0);
              abort();
             }
             $859(57824 | 0, 56959 | 0, 997 | 0);
             abort();
            }
            $859(57536 | 0, 56959 | 0, 998 | 0);
            abort();
           }
           $859(57851 | 0, 56959 | 0, 999 | 0);
           abort();
          }
          $859(57873 | 0, 56959 | 0, 1e3 | 0);
          abort();
         }
         $859(57611 | 0, 56959 | 0, 1001 | 0);
         abort();
        }
        $859(57899 | 0, 56959 | 0, 1002 | 0);
        abort();
       }
       $859(57924 | 0, 56959 | 0, 1003 | 0);
       abort();
      }
      $859(57636 | 0, 56959 | 0, 1004 | 0);
      abort();
     }
     $859(57660 | 0, 56959 | 0, 1005 | 0);
     abort();
    }
    $859(57710 | 0, 56959 | 0, 1016 | 0);
    abort();
   }
   $859(57968 | 0, 56959 | 0, 1036 | 0);
   abort();
  }
  $859(57769 | 0, 56959 | 0, 1042 | 0);
  abort();
 }
 
 function $756($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$2
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1222 | 0);
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$5
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1224 | 0);
   }
   return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
  }
  $859(57033 | 0, 56959 | 0, 1221 | 0);
  abort();
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1250 | 0);
    }
    label$5 : {
     if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$1
     }
    }
    label$6 : {
     label$7 : {
      $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$7
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$6
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1253 | 0);
    }
    return ((HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0 > $1_1 >>> 0 ? ($0_1 + ($1_1 << 3 | 0) | 0) + 24 | 0 : 0) | 0;
   }
   $859(57033 | 0, 56959 | 0, 1249 | 0);
   abort();
  }
  $859(58006 | 0, 56959 | 0, 1252 | 0);
  abort();
 }
 
 function $758($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$4
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1266 | 0);
    }
    label$5 : {
     if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$1
     }
    }
    label$6 : {
     label$7 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$7
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$6
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1269 | 0);
    }
    return HEAPU16[($0_1 + 8 | 0) >> 1] | 0 | 0;
   }
   $859(57033 | 0, 56959 | 0, 1265 | 0);
   abort();
  }
  $859(58006 | 0, 56959 | 0, 1268 | 0);
  abort();
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$2
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1278 | 0);
   }
   label$4 : {
    if (HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
     break label$4
    }
    return 0 | 0;
   }
   $2_1 = $0_1 + 24 | 0;
   $1_1 = 0;
   label$5 : {
    if (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) {
     break label$5
    }
    $1_1 = Math_imul(HEAPU16[($0_1 + 8 | 0) >> 1] | 0, 12);
   }
   return $2_1 + $1_1 | 0 | 0;
  }
  $859(57033 | 0, 56959 | 0, 1277 | 0);
  abort();
 }
 
 function $760($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(58013 | 0, 56959 | 0, 1335 | 0);
   abort();
  }
  HEAP16[($0_1 + 10 | 0) >> 1] = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  $761($0_1 | 0) | 0;
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) >= (1 | 0)) {
      break label$3
     }
     $2_1 = 0;
     label$4 : {
      if ($1_1) {
       break label$4
      }
      $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$2
      }
      $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      $3_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
      if ($1_1 >>> 0 > $3_1 >>> 0) {
       break label$1
      }
      label$5 : {
       label$6 : {
        if ($1_1 >>> 0 >= $3_1 >>> 0) {
         break label$6
        }
        $2_1 = $2_1 + ($1_1 << 3 | 0) | 0;
        label$7 : while (1) {
         $1_1 = $1_1 + 1 | 0;
         $4_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
         if ($4_1) {
          break label$5
         }
         $2_1 = $2_1 + 8 | 0;
         if (($1_1 | 0) != ($3_1 | 0)) {
          continue label$7
         }
         break label$7;
        };
        HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = -1;
       return 0 | 0;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
      HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $2_1 = $4_1;
     }
     return $2_1 | 0;
    }
    $859(58802 | 0, 56959 | 0, 1293 | 0);
    abort();
   }
   $859(58039 | 0, 56959 | 0, 1297 | 0);
   abort();
  }
  $859(57299 | 0, 56959 | 0, 1298 | 0);
  abort();
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!$1_1) {
      break label$2
     }
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
       if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
        break label$4
       }
      }
      $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1352 | 0);
     }
     label$6 : {
      if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
       break label$6
      }
      $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$1
      }
     }
     label$7 : {
      label$8 : {
       $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$8
       }
       if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
        break label$7
       }
      }
      $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1355 | 0);
     }
     $760($0_1 | 0, $1_1 + 24 | 0 | 0, HEAPU16[($1_1 + 8 | 0) >> 1] | 0 | 0);
     return;
    }
    $859(58013 | 0, 56959 | 0, 1350 | 0);
    abort();
   }
   $859(57033 | 0, 56959 | 0, 1351 | 0);
   abort();
  }
  $859(57033 | 0, 56959 | 0, 1354 | 0);
  abort();
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1365 | 0);
    }
    $760($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAPU16[($1_1 + 6 | 0) >> 1] | 0 | 0);
    return;
   }
   $859(58013 | 0, 56959 | 0, 1363 | 0);
   abort();
  }
  $859(58020 | 0, 56959 | 0, 1364 | 0);
  abort();
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     if (($1_1 | 0) > (0 | 0)) {
      break label$2
     }
     label$4 : {
      if ($761($0_1 | 0) | 0) {
       break label$4
      }
      return -1 | 0;
     }
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) > (0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $859(58024 | 0, 56959 | 0, 1380 | 0);
    abort();
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$2_1 >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -1 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
   return $3_1 | 0;
  }
  $859(58013 | 0, 56959 | 0, 1375 | 0);
  abort();
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
      break label$2
     }
     if ((HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0 > (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
      break label$1
     }
     return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 31 | 0 | 0;
    }
    $859(58013 | 0, 56959 | 0, 1392 | 0);
    abort();
   }
   $859(58039 | 0, 56959 | 0, 1393 | 0);
   abort();
  }
  $859(57299 | 0, 56959 | 0, 1394 | 0);
  abort();
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 & 2147483647 | 0;
  $1_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) > ($3_1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 - $1_1 | 0;
     HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
     $1_1 = 0;
     break label$1;
    }
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    $1_1 = $1_1 - $3_1 | 0;
    if ($761($0_1 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 - $1_1 | 0 | 0;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $8$hi = 0, $66_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if (!$0_1) {
           break label$10
          }
          if (!$1_1) {
           break label$9
          }
          if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$8
          }
          $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
          $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
          if ($3_1 >>> 0 > $4_1 >>> 0) {
           break label$7
          }
          label$11 : {
           label$12 : {
            if (($3_1 | 0) != ($4_1 | 0)) {
             break label$12
            }
            $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($5_1 | 0) == (-1 | 0)) {
             break label$12
            }
            $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($0_1 | 0) == (-1 | 0)) {
             break label$6
            }
            if (($0_1 | 0) < ($5_1 | 0)) {
             break label$5
            }
            $0_1 = $0_1 - $5_1 | 0;
            break label$11;
           }
           label$13 : {
            if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
             break label$13
            }
            if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
             break label$4
            }
            if (($3_1 | 0) != ($4_1 | 0)) {
             break label$4
            }
           }
           i64toi32_i32$2 = $0_1 + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $8_1 = i64toi32_i32$0;
           $8$hi = i64toi32_i32$1;
           i64toi32_i32$0 = $2_1 + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $8_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           $66_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[$2_1 >> 2] = $66_1;
           HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = 0;
           $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           label$14 : {
            i64toi32_i32$0 = $8$hi;
            if (($8_1 & 65535 | 0 | 0) == ($4_1 | 0)) {
             break label$14
            }
            label$15 : while (1) {
             HEAP32[($2_1 + 4 | 0) >> 2] = 0;
             $3_1 = $0_1 + $3_1 | 0;
             $761($2_1 | 0) | 0;
             $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
             if ((HEAPU16[($2_1 + 8 | 0) >> 1] | 0 | 0) != (HEAPU16[($1_1 + 8 | 0) >> 1] | 0 | 0)) {
              continue label$15
             }
             break label$15;
            };
           }
           $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($0_1 | 0) < ($1_1 | 0)) {
            break label$3
           }
           $0_1 = ($0_1 + $3_1 | 0) - $1_1 | 0;
          }
          label$16 : {
           $7_1 = $2_1 + 16 | 0;
           if ($7_1 >>> 0 < global$2 >>> 0) {
            fimport$11()
           }
           global$0 = $7_1;
          }
          return $0_1 | 0;
         }
         $859(58051 | 0, 56959 | 0, 1432 | 0);
         abort();
        }
        $859(58056 | 0, 56959 | 0, 1433 | 0);
        abort();
       }
       $859(58059 | 0, 56959 | 0, 1434 | 0);
       abort();
      }
      $859(58078 | 0, 56959 | 0, 1435 | 0);
      abort();
     }
     $859(58097 | 0, 56959 | 0, 1438 | 0);
     abort();
    }
    $859(58119 | 0, 56959 | 0, 1439 | 0);
    abort();
   }
   $859(58142 | 0, 56959 | 0, 1442 | 0);
   abort();
  }
  $859(58236 | 0, 56959 | 0, 1448 | 0);
  abort();
 }
 
 function $768($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (($2_1 | 0) < (0 | 0)) {
     break label$1
    }
    $3_1 = $2_1;
    label$3 : {
     label$4 : while (1) {
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      label$5 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > ($5_1 | 0)) {
        break label$5
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 - $3_1 | 0;
       HEAP32[$0_1 >> 2] = $4_1 + $3_1 | 0;
       $823($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
       $3_1 = 0;
       break label$3;
      }
      if (($5_1 | 0) < (0 | 0)) {
       break label$3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = 0;
      HEAP32[$0_1 >> 2] = $4_1 + $5_1 | 0;
      $823($1_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
      $1_1 = $1_1 + $5_1 | 0;
      $3_1 = $3_1 - $5_1 | 0;
      if ($761($0_1 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    return $2_1 - $3_1 | 0 | 0;
   }
   $859(58013 | 0, 56959 | 0, 1458 | 0);
   abort();
  }
  $859(58258 | 0, 56959 | 0, 1459 | 0);
  abort();
 }
 
 function $769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 > (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0) {
       break label$4
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP16[($0_1 + 8 | 0) >> 1] = $2_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      label$5 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$5
       }
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$3
       }
       $2_1 = ($2_1 & 65535 | 0) + -1 | 0;
       if ($2_1 >>> 0 >= (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
        break label$2
       }
       $2_1 = $3_1 + ($2_1 << 3 | 0) | 0;
       $3_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
       if (($1_1 | 0) > ($3_1 | 0)) {
        break label$1
       }
       HEAP32[$0_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + ($3_1 - $1_1 | 0) | 0;
      }
      return;
     }
     $859(58272 | 0, 56959 | 0, 1543 | 0);
     abort();
    }
    $859(58039 | 0, 56959 | 0, 1547 | 0);
    abort();
   }
   $859(58306 | 0, 56959 | 0, 1548 | 0);
   abort();
  }
  $859(58352 | 0, 56959 | 0, 1549 | 0);
  abort();
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
    if ($1_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   $3_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = 0;
   $2_1 = 0;
   label$3 : while (1) {
    $2_1 = $2_1 + (HEAPU16[(($4_1 + ($1_1 << 3 | 0) | 0) + 4 | 0) >> 1] | 0) | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $2_1 - ($754($0_1 | 0) | 0) | 0 | 0;
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $24_1 = 0, $27_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (($1_1 | 0) <= (-1 | 0)) {
     break label$3
    }
    label$5 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > ($1_1 | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $24_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $27_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $27_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1_1 = $766($2_1 | 0, $1_1 | 0) | 0;
    }
    label$6 : {
     $4_1 = $2_1 + 16 | 0;
     if ($4_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $4_1;
    }
    return $1_1 | 0;
   }
   $859(58013 | 0, 56959 | 0, 1593 | 0);
   abort();
  }
  $859(58404 | 0, 56959 | 0, 1596 | 0);
  abort();
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) >= (1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($761($0_1 | 0) | 0) {
       break label$4
      }
      $2_1 = 255;
      break label$2;
     }
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) <= (0 | 0)) {
      break label$1
     }
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -1 | 0;
    HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
   }
   return $2_1 & 255 | 0 | 0;
  }
  $859(58441 | 0, 56959 | 0, 1628 | 0);
  abort();
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $5_1 = 0;
    $6_1 = $2_1;
    break label$1;
   }
   $5_1 = 0;
   label$3 : while (1) {
    label$4 : {
     if (($3_1 | 0) >= (1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : while (1) {
       HEAP32[$0_1 >> 2] = $2_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
       if (!($761($0_1 | 0) | 0)) {
        break label$5
       }
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > (0 | 0)) {
        break label$4
       }
       continue label$6;
      };
     }
     return -1 | 0;
    }
    $3_1 = $3_1 + -1 | 0;
    $5_1 = (HEAPU8[$2_1 >> 0] | 0) << $4_1 | 0 | $5_1 | 0;
    $4_1 = $4_1 + 8 | 0;
    $6_1 = $2_1 + 1 | 0;
    $2_1 = $6_1;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[$0_1 >> 2] = $6_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  return $5_1 | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $5_1 = $2_1;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     if (($3_1 | 0) >= (1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : while (1) {
       HEAP32[$0_1 >> 2] = $2_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
       if (!($761($0_1 | 0) | 0)) {
        break label$5
       }
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > (0 | 0)) {
        break label$4
       }
       continue label$6;
      };
     }
     return -1 | 0;
    }
    $3_1 = $3_1 + -1 | 0;
    $4_1 = $4_1 << 8 | 0 | (HEAPU8[$2_1 >> 0] | 0) | 0;
    $5_1 = $2_1 + 1 | 0;
    $2_1 = $5_1;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  return $4_1 | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) < (2 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -2 | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 2 | 0;
    break label$1;
   }
   $3_1 = $773($0_1 | 0, 2 | 0) | 0;
  }
  return $3_1 & 65535 | 0 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (4 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -4 | 0;
   HEAP32[$0_1 >> 2] = $4_1 + 4 | 0;
   return $3_1 | 0;
  }
  return $773($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) < (2 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $4_1 = HEAPU8[$2_1 >> 0] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -2 | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 2 | 0;
    $0_1 = $3_1 | ($4_1 << 8 | 0) | 0;
    break label$1;
   }
   $0_1 = $774($0_1 | 0, 2 | 0) | 0;
  }
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (4 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -4 | 0;
   HEAP32[$0_1 >> 2] = $4_1 + 4 | 0;
   return $3_1 << 24 | 0 | (($3_1 << 8 | 0) & 16711680 | 0) | 0 | (($3_1 >>> 8 | 0) & 65280 | 0 | ($3_1 >>> 24 | 0) | 0) | 0 | 0;
  }
  return $774($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $1_1 = 0, $7$hi = 0, $9$hi = 0;
  $1_1 = $776($0_1 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $776($0_1 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $9_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $9_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $4$hi = 0, $7$hi = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $778($0_1 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $778($0_1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (3 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   $4_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -3 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 3 | 0;
   return $3_1 | ($4_1 << 16 | 0) | 0 | 0;
  }
  return $773($0_1 | 0, 3 | 0) | 0 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (3 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
   $5_1 = HEAPU8[$2_1 >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -3 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 3 | 0;
   return $3_1 | ($4_1 << 8 | 0 | ($5_1 << 16 | 0) | 0) | 0 | 0;
  }
  return $774($0_1 | 0, 3 | 0) | 0 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = -1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = $765(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return (((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) / (-8 | 0) | 0) + ($754(HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  return (($754(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 3 | 0) + ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0 | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    if (($788($0_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   $1_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> $2_1 | 0) & 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[$0_1 >> 2] | 0;
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) < (4 | 0)) {
       break label$4
      }
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      $4_1 = HEAPU8[$5_1 >> 0] | 0 | ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = 31;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 << 24 | 0 | (($4_1 << 8 | 0) & 16711680 | 0) | 0 | (($4_1 >>> 8 | 0) & 65280 | 0 | ($4_1 >>> 24 | 0) | 0) | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + -4 | 0;
      HEAP32[$1_1 >> 2] = $5_1 + 4 | 0;
      break label$3;
     }
     $4_1 = -1;
     $2_1 = $764($1_1 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$2
     }
     label$5 : {
      $4_1 = $764($1_1 | 0) | 0;
      if (($4_1 | 0) != (-1 | 0)) {
       break label$5
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 7;
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
      break label$3;
     }
     $4_1 = $4_1 | ($2_1 << 8 | 0) | 0;
     label$6 : {
      $2_1 = $764($1_1 | 0) | 0;
      if (($2_1 | 0) != (-1 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 15;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      break label$3;
     }
     $4_1 = $2_1 | ($4_1 << 8 | 0) | 0;
     label$7 : {
      $1_1 = $764($1_1 | 0) | 0;
      if (($1_1 | 0) != (-1 | 0)) {
       break label$7
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 23;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 31;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($4_1 << 8 | 0) | 0;
    }
    $4_1 = 0;
   }
   return $4_1 | 0;
  }
  $859(58818 | 0, 56959 | 0, 1873 | 0);
  abort();
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $787($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (($1_1 | 0) != (-1 | 0)) | 0;
  return $1_1 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 >= 32 >>> 0) {
      break label$3
     }
     if (!$1_1) {
      break label$2
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $3_1 = $1_1 + -1 | 0;
     if (($2_1 | 0) >= ($3_1 | 0)) {
      break label$1
     }
     $1_1 = $789($0_1 | 0) | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      label$5 : while (1) {
       $1_1 = $789($0_1 | 0) | 0 | ($1_1 << 1 | 0) | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue label$5
       }
       break label$5;
      };
     }
     return $1_1 | 0;
    }
    $859(58451 | 0, 56959 | 0, 1971 | 0);
    abort();
   }
   $859(58461 | 0, 56959 | 0, 1972 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $1_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> ($2_1 - $3_1 | 0) | 0) & (-1 >>> (32 - $1_1 | 0) | 0) | 0 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $2_1 = 0;
  $3_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $4_1 = $789($0_1 | 0) | 0;
    $4_1 = ($4_1 | 0) == (1 | 0) ? 2 : ($4_1 | 0) == (-1 | 0);
    if (!$4_1) {
     break label$4
    }
    label$5 : {
     if (($4_1 | 0) != (2 | 0)) {
      break label$5
     }
     if (!$3_1) {
      break label$5
     }
     label$6 : {
      if ($3_1 >>> 0 < 31 >>> 0) {
       break label$6
      }
      $2_1 = 0;
      if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$1_1 >> 2] = $3_1;
      $827(58469 | 0, $1_1 | 0);
      break label$5;
     }
     $2_1 = ($790($0_1 | 0, $3_1 | 0) | 0 | (1 << $3_1 | 0) | 0) + -1 | 0;
    }
    label$7 : {
     $6_1 = $1_1 + 16 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $2_1 | 0;
   }
   $3_1 = $3_1 + 1 | 0;
   continue label$3;
  };
 }
 
 function $792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1_1 >>> 0 < 31 >>> 0 ? $1_1 : 31;
    $790($0_1 | 0, $2_1 | 0) | 0;
    if ((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$1
    }
    $1_1 = $1_1 - $2_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $20_1 = 0, $27_1 = 0, $30_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[(($2_1 + 16 | 0) + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $20_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[$2_1 >> 2] = $30_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $2_1;
  $792($2_1 + 16 | 0 | 0, $1_1 | 0);
  $0_1 = $784($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 ^ 1 | 0 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2054 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, 24) | 0;
   if (!$1_1) {
    break label$3
   }
   $845($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56945 | 0);
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  }
  return $1_1 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2075 | 0);
  }
  $796($0_1 | 0);
  $1_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $845($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $4_1 = 0, $61_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2144 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     label$8 : {
      if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     }
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    }
    HEAP32[$2_1 >> 2] = 0;
    label$9 : {
     label$10 : {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$10
      }
      if ((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$9
      }
     }
     $846($3_1 | 0, 72 | 0, $3_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2148 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    $735($2_1 | 0);
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  label$11 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
    break label$11
   }
   if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$11
   }
   i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $61_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $61_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(58561 | 0, $1_1 | 0);
  }
  label$12 : {
   $5_1 = $1_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2087 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (HEAP32[$1_1 >> 2] | 0) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$6
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$5
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2090 | 0);
    }
    HEAP32[$1_1 >> 2] = 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 ? $2_1 : $0_1) >> 2] = $1_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    return;
   }
   $859(57033 | 0, 56959 | 0, 2088 | 0);
   abort();
  }
  $859(58525 | 0, 56959 | 0, 2089 | 0);
  abort();
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2127 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     $3_1 = $1_1;
     if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$4
     }
    }
    $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2130 | 0);
    $3_1 = HEAP32[$0_1 >> 2] | 0;
   }
   label$6 : {
    label$7 : {
     if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     break label$6;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   }
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, $9_1 = 0, $10_1 = 0, $118_1 = 0;
  label$1 : {
   $3_1 = global$0 - 208 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $770($0_1 | 0) | 0;
   $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $7_1 = $6_1 + -1 | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $10_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $4_1 = $8_1 - (HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($7_1 << 3 | 0) | 0) >> 2] | 0) | 0;
   }
   HEAP32[($3_1 + 92 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 88 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 72 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $1_1;
   $827(58836 | 0, $3_1 + 64 | 0 | 0);
  }
  label$5 : {
   if (!(HEAPU16[($0_1 + 10 | 0) >> 1] | 0)) {
    break label$5
   }
   $5_1 = $3_1 + 48 | 0;
   $4_1 = 0;
   label$6 : while (1) {
    label$7 : {
     if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $7_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($4_1 << 3 | 0) | 0;
     $8_1 = HEAP32[$7_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAPU16[($7_1 + 4 | 0) >> 1] | 0;
     HEAP32[($3_1 + 44 | 0) >> 2] = $8_1;
     HEAP32[($3_1 + 40 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
     $827(58887 | 0, $3_1 + 32 | 0 | 0);
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
     continue label$6
    }
    break label$6;
   };
  }
  label$8 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$8
   }
   $5_1 = 0;
   label$9 : while (1) {
    $7_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
    $4_1 = 0;
    label$10 : {
     label$11 : {
      label$12 : while (1) {
       $8_1 = $764($0_1 | 0) | 0;
       if (($8_1 | 0) == (-1 | 0)) {
        break label$11
       }
       HEAP8[(($3_1 + 192 | 0) + $4_1 | 0) >> 0] = $8_1;
       $118_1 = $7_1 & 65535 | 0;
       $7_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
       HEAP8[(($3_1 + 176 | 0) + $4_1 | 0) >> 0] = ($118_1 | 0) == ($7_1 | 0) ? 32 : 124;
       $8_1 = 16;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (16 | 0)) {
        continue label$12
       }
       break label$10;
      };
     }
     $8_1 = $4_1;
     if (!$4_1) {
      break label$8
     }
    }
    $7_1 = 0;
    $4_1 = 0;
    label$13 : while (1) {
     HEAP32[($3_1 + 16 | 0) >> 2] = HEAP8[(($3_1 + 176 | 0) + $7_1 | 0) >> 0] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = HEAPU8[(($3_1 + 192 | 0) + $7_1 | 0) >> 0] | 0;
     $4_1 = ($820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 80 - $4_1 | 0 | 0, 58909 | 0, $3_1 + 16 | 0 | 0) | 0) + $4_1 | 0;
     label$14 : {
      if (($7_1 | 0) != (7 | 0)) {
       break label$14
      }
      if ($4_1 >>> 0 > 79 >>> 0) {
       break label$14
      }
      $4_1 = ($820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 80 - $4_1 | 0 | 0, 58916 | 0, 0 | 0) | 0) + $4_1 | 0;
     }
     label$15 : {
      if ($4_1 >>> 0 > 79 >>> 0) {
       break label$15
      }
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < $8_1 >>> 0) {
       continue label$13
      }
     }
     break label$13;
    };
    label$16 : {
     if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$16
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $3_1 + 96 | 0;
     $827(58919 | 0, $3_1 | 0);
    }
    if ($5_1 >>> 0 > 239 >>> 0) {
     break label$8
    }
    $5_1 = $5_1 + 16 | 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$17 : {
   $12_1 = $3_1 + 208 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $3_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
    $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
    $5_1 = $756($0_1 | 0) | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $758($0_1 | 0) | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = ($3_1 | 0) == (1 | 0) ? 58652 : 58658;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $1_1;
    $827(58605 | 0, $2_1 | 0);
   }
   $762($2_1 + 32 | 0 | 0, $0_1 | 0);
   $799($2_1 + 32 | 0 | 0, 58659 | 0, $1_1 | 0);
   label$5 : {
    $7_1 = $2_1 + 48 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return;
  }
  $859(57033 | 0, 56959 | 0, 2218 | 0);
  abort();
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[$2_1 >> 2] = $19_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $799($2_1 | 0, 58667 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $802($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 1;
  HEAP16[($0_1 + 4 | 0) >> 1] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $19_1 = 0, $22_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $22_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $0_1 = 0;
    label$5 : while (1) {
     $4_1 = HEAP8[($1_1 + $0_1 | 0) >> 0] | 0;
     label$6 : {
      label$7 : {
       $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       HEAP32[$3_1 >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$6;
      }
      $5_1 = $764($3_1 | 0) | 0;
      if (($5_1 | 0) != (-1 | 0)) {
       break label$6
      }
      $0_1 = 0 - $4_1 | 0;
      break label$3;
     }
     label$8 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$8
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      continue label$5;
     }
     break label$5;
    };
    $0_1 = $5_1 - $4_1 | 0;
    break label$3;
   }
   $0_1 = 0;
  }
  label$9 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 93 | 0);
  }
  label$5 : {
   label$6 : {
    if ((HEAPU16[($0_1 + 12 | 0) >> 1] | 0) >>> 0 < $1_1 >>> 0) {
     break label$6
    }
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if (!(HEAPU16[($0_1 + 10 | 0) >> 1] | 0)) {
        break label$9
       }
       $1_1 = (HEAPU16[($0_1 + 14 | 0) >> 1] | 0) >>> 5 | 0;
       $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
       label$10 : while (1) {
        label$11 : {
         $4_1 = $3_1 & 65535 | 0;
         if ($4_1 >>> 0 >= $1_1 >>> 0) {
          break label$11
         }
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         $3_1 = $4_1;
         label$12 : while (1) {
          label$13 : {
           $6_1 = HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
           if (($6_1 | 0) == (-1 | 0)) {
            break label$13
           }
           HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
           $1_1 = $805($6_1 | 0) | 0;
           $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << $1_1 | 0) | 0;
           $5_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
           if (!$5_1) {
            break label$7
           }
           HEAP16[($0_1 + 10 | 0) >> 1] = $5_1 + -1 | 0;
           $3_1 = ($0_1 + Math_imul($1_1 + ($3_1 << 5 | 0) | 0, HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) + 32 | 0;
           break label$5;
          }
          $3_1 = $3_1 + 1 | 0;
          if ($3_1 >>> 0 < $1_1 >>> 0) {
           continue label$12
          }
          break label$12;
         };
        }
        if (!$4_1) {
         break label$9
        }
        $3_1 = 0;
        HEAP16[($0_1 + 8 | 0) >> 1] = 0;
        continue label$10;
       };
      }
      label$14 : {
       if ((HEAP8[(0 + 62472 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 62472 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
       $827(59094 | 0, $2_1 + 16 | 0 | 0);
      }
      $3_1 = 0;
      $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if ($0_1) {
       continue label$8
      }
      break label$5;
     };
    }
    $859(59075 | 0, 58945 | 0, 109 | 0);
    abort();
   }
   $3_1 = 0;
   if (!($835(62472 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(59017 | 0, $2_1 | 0);
  }
  label$15 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($0_1 >>> $1_1 | 0) & 1 | 0)) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (32 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $859(59121 | 0, 58945 | 0, 82 | 0);
   abort();
  }
  return $1_1 | 0;
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 142 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 144 | 0);
   }
   label$6 : {
    if (!($807($0_1 | 0, $1_1 | 0) | 0)) {
     break label$6
    }
    return 1 | 0;
   }
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
  return 0 | 0;
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($0_1 + 32 | 0) >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $2_1 = 1;
    if (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) - (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $26_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 214 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!($806($0_1 | 0, $1_1 | 0) | 0)) {
        break label$6
       }
       label$8 : while (1) {
        label$9 : {
         if (!($807($0_1 | 0, $1_1 | 0) | 0)) {
          break label$9
         }
         $1_1 = ($1_1 - $0_1 | 0) + -32 | 0;
         $26_1 = $1_1;
         $2_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
         $1_1 = ($1_1 >>> 0) / ($2_1 >>> 0) | 0;
         if ($26_1 - Math_imul($1_1, $2_1) | 0) {
          break label$5
         }
         $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + (($1_1 >>> 3 | 0) & 536870908 | 0) | 0;
         $3_1 = HEAP32[$2_1 >> 2] | 0;
         $1_1 = 1 << ($1_1 & 31 | 0) | 0;
         if (!($3_1 & $1_1 | 0)) {
          break label$4
         }
         HEAP32[$2_1 >> 2] = $3_1 & ($1_1 ^ -1 | 0) | 0;
         $1_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
         if ($1_1 >>> 0 >= (HEAPU16[($0_1 + 14 | 0) >> 1] | 0) >>> 0) {
          break label$3
         }
         HEAP16[($0_1 + 10 | 0) >> 1] = $1_1 + 1 | 0;
         return;
        }
        $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if ($0_1) {
         continue label$8
        }
        break label$8;
       };
       $859(59121 | 0, 58945 | 0, 233 | 0);
       abort();
      }
      $859(59123 | 0, 58945 | 0, 215 | 0);
      abort();
     }
     $859(59127 | 0, 58945 | 0, 216 | 0);
     abort();
    }
    $859(59155 | 0, 58945 | 0, 222 | 0);
    abort();
   }
   $859(59187 | 0, 58945 | 0, 227 | 0);
   abort();
  }
  $859(59219 | 0, 58945 | 0, 229 | 0);
  abort();
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!$2_1) {
        break label$6
       }
       if (!$0_1) {
        break label$5
       }
       if ($1_1 >>> 0 >= 65536 >>> 0) {
        break label$4
       }
       if ($2_1 >>> 0 >= 65536 >>> 0) {
        break label$3
       }
       $1_1 = $1_1 + 31 | 0;
       $4_1 = $1_1 & -32 | 0;
       $5_1 = Math_imul($4_1, $2_1);
       $6_1 = ($1_1 >>> 3 | 0) & 536870908 | 0;
       $7_1 = ($5_1 + $6_1 | 0) + 32 | 0;
       $1_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, $7_1) | 0;
       label$8 : {
        if ((HEAP8[(0 + 62472 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62472 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
        HEAP32[($3_1 + 20 | 0) >> 2] = 32;
        HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
        $827(59298 | 0, $3_1 + 16 | 0 | 0);
       }
       label$9 : {
        label$10 : {
         if ($1_1) {
          break label$10
         }
         $1_1 = 0;
         if (!($835(62472 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$3_1 >> 2] = $7_1;
         $827(59348 | 0, $3_1 | 0);
         break label$9;
        }
        $845($1_1 | 0, 32 | 0, $1_1 + 28 | 0 | 0, 58936 | 0);
        HEAP32[($1_1 + 24 | 0) >> 2] = $0_1;
        HEAP32[($1_1 + 4 | 0) >> 2] = 212;
        HEAP32[$1_1 >> 2] = 213;
        HEAP32[($1_1 + 20 | 0) >> 2] = 0;
        $0_1 = ($1_1 + $5_1 | 0) + 32 | 0;
        HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
        HEAP16[($1_1 + 14 | 0) >> 1] = $4_1;
        HEAP16[($1_1 + 12 | 0) >> 1] = $2_1;
        HEAP16[($1_1 + 10 | 0) >> 1] = $4_1;
        HEAP16[($1_1 + 8 | 0) >> 1] = 0;
        $822($0_1 | 0, 0 | 0, $6_1 | 0) | 0;
       }
       label$11 : {
        $9_1 = $3_1 + 32 | 0;
        if ($9_1 >>> 0 < global$2 >>> 0) {
         fimport$11()
        }
        global$0 = $9_1;
       }
       return $1_1 | 0;
      }
      $859(59248 | 0, 58945 | 0, 255 | 0);
      abort();
     }
     $859(59254 | 0, 58945 | 0, 256 | 0);
     abort();
    }
    $859(59264 | 0, 58945 | 0, 257 | 0);
    abort();
   }
   $859(59270 | 0, 58945 | 0, 258 | 0);
   abort();
  }
  $859(59282 | 0, 58945 | 0, 259 | 0);
  abort();
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $808($0_1 | 0, $1_1 | 0);
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $804($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 292 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 295 | 0);
   }
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $845($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 0 | 0);
   FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
   $0_1 = $1_1;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP32[(0 + 63456 | 0) >> 2] | 0 | 0) != ($867() | 0 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 59429;
   $860(59378 | 0, $1_1 | 0);
   $814();
   abort();
  }
  $0_1 = $963($0_1 | 0) | 0;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $814() {
  $860(59548 | 0, 0 | 0);
  fimport$1();
  abort();
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP32[(0 + 63456 | 0) >> 2] | 0 | 0) != ($867() | 0 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 59441;
   $860(59378 | 0, $1_1 | 0);
   $814();
   abort();
  }
  $964($0_1 | 0);
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $816() {
  var $0_1 = 0;
  label$1 : {
   label$2 : {
    if (!($867() | 0)) {
     break label$2
    }
    label$3 : {
     $0_1 = HEAP32[(0 + 63460 | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
     if ($817(63464 | 0) | 0) {
      break label$1
     }
     $0_1 = HEAP32[(0 + 63460 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 63460 | 0) >> 2] = $0_1 + 1 | 0;
    return 0 | 0;
   }
   $814();
   abort();
  }
  return $818(616 | 0, 6 | 0) | 0 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return $966($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $862(59451 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $913(HEAP32[(0 + 61164 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $820($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  label$3 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $821($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $974($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $823($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $973($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $869($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $825() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 63460 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 63460 | 0) >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $969(63464 | 0) | 0;
  }
 }
 
 function $826($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAP32[(0 + 62504 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$4
    }
    $4_1 = $848($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = $3_1 + 8 | 0 | $0_1 | 0;
    HEAP16[($4_1 + 4 | 0) >> 1] = $821($4_1 + 6 | 0 | 0, 246 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $852($3_1 + 8 | 0 | 0);
    break label$3;
   }
   label$5 : {
    if (($0_1 + -1 | 0) >>> 0 > 2 >>> 0) {
     break label$5
    }
    label$6 : {
     $4_1 = $963(($980($1_1 | 0) | 0) + 2 | 0 | 0) | 0;
     if (!$4_1) {
      break label$6
     }
     $876($4_1 | 0, $1_1 | 0) | 0;
     $7_1 = $4_1 + ($980($4_1 | 0) | 0) | 0;
     $8_1 = 10;
     HEAP8[$7_1 >> 0] = $8_1;
     HEAP8[($7_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
     $819($4_1 | 0, $2_1 | 0) | 0;
     $964($4_1 | 0);
     break label$3;
    }
    $819($1_1 | 0, $2_1 | 0) | 0;
    break label$3;
   }
   $819($1_1 | 0, $2_1 | 0) | 0;
  }
  label$7 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $826(1 | 0, $0_1 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $828($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = 0;
  label$3 : {
   if (!($829($1_1 | 0, $0_1 | 0) | 0)) {
    break label$3
   }
   $854($4_1 + 48 | 0 | 0, 16 | 0);
   label$4 : {
    label$5 : {
     if (!$2_1) {
      break label$5
     }
     HEAP32[($4_1 + 44 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 40 | 0) >> 2] = 0;
     label$6 : {
      if (($923($4_1 + 40 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 40 | 0) >> 2] = 0;
     }
     $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $830($0_1 | 0) | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
     $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $5_1 ? $5_1 : 59565;
     HEAP32[($4_1 + 20 | 0) >> 2] = $4_1 + 48 | 0;
     $831(0 | 0, $0_1 | 0, $1_1 | 0, $4_1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$4
     }
     $964($1_1 | 0);
     break label$4;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = $830($0_1 | 0) | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 48 | 0;
    $832(0 | 0, $1_1 | 0, 59579 | 0, $4_1 | 0);
   }
   $5_1 = 1;
  }
  label$7 : {
   $7_1 = $4_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($2_1) {
     break label$2
    }
    $2_1 = 0;
    if ($833($0_1 | 0) | 0) {
     break label$1
    }
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
   }
   $2_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) <= ($1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 >>> 0 < 6 >>> 0 ? ($0_1 << 2 | 0) + 59808 | 0 : 59808) | 0;
 }
 
 function $831($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $7_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $6_1 = HEAP8[$2_1 >> 0] | 0;
  $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $6_1 = $4_1 ? 0 - $6_1 | 0 : $6_1;
  label$3 : {
   if (!$4_1) {
    break label$3
   }
   FUNCTION_TABLE[$4_1](2, $1_1, $2_1, 59566, HEAP32[($5_1 + 12 | 0) >> 2] | 0);
  }
  label$4 : {
   if (($6_1 | 0) > ($1_1 | 0)) {
    break label$4
   }
   $826(2 | 0, 59566 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   $8_1 = $5_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
 }
 
 function $832($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $5_1 = $0_1 & 15 | 0;
  $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $6_1 = 1;
  label$3 : {
   if ($0_1 & 16 | 0) {
    break label$3
   }
   $0_1 = HEAP8[$1_1 >> 0] | 0;
   $6_1 = ($5_1 | 0) >= (($3_1 ? 0 - $0_1 | 0 : $0_1) | 0);
  }
  label$4 : {
   if (!$3_1) {
    break label$4
   }
   FUNCTION_TABLE[$3_1](0, $5_1, $1_1, $2_1, HEAP32[($4_1 + 12 | 0) >> 2] | 0);
  }
  label$5 : {
   if (!$6_1) {
    break label$5
   }
   $826(0 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   $8_1 = $4_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0;
  $857();
  $1_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $2_1 = $837(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    if (($2_1 | 0) == ($0_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $4_1 = $2_1;
    label$3 : {
     label$4 : while (1) {
      if ($838($3_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
       break label$3
      }
      label$5 : {
       $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$5
       }
       if (($4_1 | 0) != ($0_1 | 0)) {
        continue label$4
       }
      }
      break label$4;
     };
     if (($4_1 | 0) == ($0_1 | 0)) {
      break label$1
     }
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    break label$1;
   }
   $1_1 = $841(240 | 0, 3 | 0) | 0;
  }
  $858();
  return $1_1 | 0;
 }
 
 function $834($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 3 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(3 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 3 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(3 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(3 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $835($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 4 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(4 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 4 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(4 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(4 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $836($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 5 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(5 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 5 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(5 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(5 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $2_1 = 0;
    $4_1 = $3_1;
    label$3 : {
     $5_1 = $838($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     if (($5_1 | 0) > (-1 | 0)) {
      break label$3
     }
     $4_1 = $3_1;
     label$4 : while (1) {
      $2_1 = $4_1;
      $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$2
      }
      $5_1 = $838($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      if (($5_1 | 0) <= (-1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$5_1) {
     break label$1
    }
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = 0;
   $4_1 = HEAPU8[(0 + 62500 | 0) >> 0] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   HEAP8[($1_1 + 1 | 0) >> 0] = $4_1;
   HEAP8[$1_1 >> 0] = $4_1;
   label$5 : {
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     break label$5;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[(0 + 62488 | 0) >> 2] = $1_1;
   }
   $4_1 = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $2_1 = 0;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (($3_1 | 0) == (42 | 0)) {
     break label$1
    }
    $4_1 = HEAP8[$1_1 >> 0] | 0;
    if (($4_1 | 0) == (42 | 0)) {
     break label$1
    }
    $2_1 = (($3_1 << 24 | 0) >> 24 | 0) - $4_1 | 0;
    if ($2_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    $2_1 = 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $840($0_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   return $841(951 | 0, $1_1 | 0) | 0 | 0;
  }
  HEAP32[(0 + 62500 | 0) >> 2] = $0_1;
  $857();
  label$2 : {
   $1_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[$1_1 >> 0] = $2_1 >>> 0 > $0_1 >>> 0 ? $0_1 : $2_1;
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $858();
  return 0 | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 < 6 >>> 0) {
    break label$1
   }
   $1_1 = $841(220 | 0, 2 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $862(59590 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $842() {
  $853();
  return $855() | 0 | 0;
 }
 
 function $843() {
  var $1_1 = 0, $0_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[(0 + 62488 | 0) >> 2] = $1_1;
    label$3 : {
     if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
      break label$3
     }
     $815($0_1 | 0);
     $1_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
    }
    $0_1 = $1_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   $1_1 = HEAP32[(0 + 62492 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : while (1) {
    HEAP32[(0 + 62492 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$6
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      $815($0_1 | 0);
      continue label$7;
     };
    }
    $815($1_1 | 0);
    $1_1 = HEAP32[(0 + 62492 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$5
    }
    break label$5;
   };
  }
  label$8 : {
   label$9 : while (1) {
    $1_1 = HEAP32[(0 + 62496 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$8
    }
    HEAP32[(0 + 62496 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    label$10 : {
     label$11 : while (1) {
      $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$10
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      $815($0_1 | 0);
      continue label$11;
     };
    }
    $815($1_1 | 0);
    continue label$9;
   };
  }
  $844();
  $856();
 }
 
 function $844() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 62508 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = $0_1 << 4 | 0;
     $3_1 = $2_1 + 62528 | 0;
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     $815($4_1 | 0);
     HEAP8[($2_1 + 62516 | 0) >> 0] = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[($2_1 + 62520 | 0) >> 2] = 0;
     $1_1 = HEAP32[(0 + 62508 | 0) >> 2] | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    if ($0_1 >>> 0 < $1_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 62508 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 62512 | 0) >> 2] = 0;
 }
 
 function $845($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    HEAP32[($0_1 + $4_1 | 0) >> 2] = -559038737;
    $4_1 = $4_1 + 4 | 0;
    if (($4_1 | 3 | 0) >>> 0 < $1_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$2_1 >> 2] = $3_1 ? $3_1 : 59677;
 }
 
 function $846($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $6_1 = global$0 - 48 | 0;
   $7_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
      break label$4
     }
     label$6 : {
      $8_1 = $6_1 + 48 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return;
    }
    HEAP32[$6_1 >> 2] = $3_1;
    HEAP8[(0 + 62772 | 0) >> 0] = 0;
    $820(62772 | 0, 128 | 0, 59685 | 0, $6_1 | 0) | 0;
    break label$3;
   }
   HEAP8[(0 + 62772 | 0) >> 0] = 0;
   label$8 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (($2_1 | 0) != (59677 | 0)) {
     break label$8
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
    $820(62772 | 0, 128 | 0, 59713 | 0, $6_1 + 16 | 0 | 0) | 0;
    break label$3;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
   $820(62772 | 0, 128 | 0, 59745 | 0, $6_1 + 32 | 0 | 0) | 0;
  }
  $859(62772 | 0, $4_1 | 0, $5_1 | 0);
  abort();
 }
 
 function $847($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $5$hi = 0, $5_1 = 0, $6_1 = 0, $6$hi = 0, $21_1 = 0, $4_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $8_1 = 0, $8$hi = 0, $35_1 = 0, $35$hi = 0, $7$hi = 0;
  i64toi32_i32$0 = $0$hi;
  $8_1 = $0_1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $5_1 = $21_1;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $6_1 = i64toi32_i32$4;
  $6$hi = i64toi32_i32$5;
  label$1 : {
   $3_1 = $2_1 + -1 | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
   $3_1 = $2_1 + -2 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  label$2 : {
   label$3 : while (1) {
    $4_1 = 59787;
    $2_1 = $3_1;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_sdiv($5_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $35_1 = i64toi32_i32$1;
    $35$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = $35$hi;
    i64toi32_i32$3 = $35_1;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
    i64toi32_i32$4 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    HEAP8[($1_1 + $2_1 | 0) >> 0] = i64toi32_i32$2 + 48 | 0;
    $3_1 = $2_1 + -1 | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    $5_1 = $6_1;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 18;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
   if (($2_1 | 0) < (1 | 0)) {
    break label$2
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$4
    }
    if (!$3_1) {
     break label$2
    }
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 45;
    $3_1 = $2_1 + -2 | 0;
   }
   $4_1 = ($1_1 + $3_1 | 0) + 1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  $0_1 = $850($0_1 | 0, $849($0_1 + 12 | 0 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  $851($0_1 | 0, 0 | 0);
  return $0_1 + 4 | 0 | 0;
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $1_1 | 0;
 }
 
 function $850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 + Math_imul(HEAP32[$0_1 >> 2] | 0, ($1_1 >>> 0) % ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) | 0) | 0) + 24 | 0 | 0;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  $851(HEAP32[$0_1 >> 2] | 0 | 0, 2 | 0);
 }
 
 function $853() {
  fimport$2(63492 | 0, 0 | 0) | 0;
 }
 
 function $854($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  fimport$2($2_1 + 24 | 0 | 0, 0 | 0) | 0;
  $3_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  $4_1 = HEAP32[(0 + 63496 | 0) >> 2] | 0;
  $5_1 = $3_1 - $4_1 | 0;
  label$3 : {
   label$4 : {
    if (($3_1 | 0) < ($4_1 | 0)) {
     break label$4
    }
    $3_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $3_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
   $5_1 = $5_1 + 1e6 | 0;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = ($5_1 | 0) / (1e3 | 0) | 0;
  $5_1 = $3_1 - (HEAP32[(0 + 63492 | 0) >> 2] | 0) | 0;
  HEAP32[$2_1 >> 2] = ($5_1 | 0) / (3600 | 0) | 0;
  $3_1 = ($5_1 | 0) / (60 | 0) | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = ($3_1 | 0) % (60 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $5_1 - Math_imul($3_1, 60) | 0;
  $820($0_1 | 0, $1_1 | 0, 59832 | 0, $2_1 | 0) | 0;
  label$5 : {
   $7_1 = $2_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $855() {
  return 0 | 0;
 }
 
 function $856() {
  
 }
 
 function $857() {
  $967(63500 | 0) | 0;
 }
 
 function $858() {
  $968(63500 | 0) | 0;
 }
 
 function $859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = $0_1;
  $860(59852 | 0, $3_1 | 0);
  $814();
  abort();
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $826(3 | 0, $0_1 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $861($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   label$4 : {
    if ($2_1) {
     break label$4
    }
    $2_1 = 59885;
    if ($3_1 >>> 0 > 10 >>> 0) {
     break label$4
    }
    $2_1 = HEAP32[(($3_1 << 2 | 0) + 59888 | 0) >> 2] | 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$4_1 >> 2] = $2_1;
   $860(60140 | 0, $4_1 | 0);
  }
  label$5 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $862($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $861($0_1 | 0, $1_1 | 0, 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $6_1 = global$0 - 16 | 0;
   $7_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if ($864($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 12 | 0 | 0) | 0) {
     break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    $0_1 = $3_1 + 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
    label$5 : {
     $2_1 = HEAP32[$5_1 >> 2] | 0;
     if ($2_1 >>> 0 < $0_1 >>> 0) {
      break label$5
     }
     HEAP32[$5_1 >> 2] = $2_1 - $0_1 | 0;
     $5_1 = 0;
     break label$3;
    }
    $0_1 = $3_1 - $2_1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
    $2_1 = (($0_1 >>> 3 | 0) + (HEAP32[$4_1 >> 2] | 0) | 0) + 1 | 0;
    if ($2_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$5_1 >> 2] = ($0_1 ^ -1 | 0) & 7 | 0;
    $5_1 = 0;
    break label$3;
   }
   $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
   $5_1 = -1;
  }
  label$6 : {
   $8_1 = $6_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($3_1 | 0) < (8 | 0)) {
      break label$3
     }
     $3_1 = -1;
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$2
     }
     $827(60389 | 0, 0 | 0);
     return -1 | 0;
    }
    HEAP32[$6_1 >> 2] = 0;
    $7_1 = 0;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        if (($3_1 | 0) < (0 | 0)) {
         break label$7
        }
        $8_1 = $0_1 + $2_1 | 0;
        label$8 : while (1) {
         if (((HEAPU8[$8_1 >> 0] | 0) >>> $3_1 | 0) & 1 | 0) {
          break label$5
         }
         $7_1 = $7_1 + 1 | 0;
         HEAP32[$6_1 >> 2] = $7_1;
         $9_1 = ($3_1 | 0) > (0 | 0);
         $3_1 = $3_1 + -1 | 0;
         if ($9_1) {
          continue label$8
         }
         break label$8;
        };
       }
       $3_1 = 7;
       $2_1 = $2_1 + 1 | 0;
       if ($2_1 >>> 0 < $1_1 >>> 0) {
        continue label$6
       }
       break label$4;
      };
     }
     if ($7_1 >>> 0 <= ((($1_1 << 2 | 0) & 2147483644 | 0) + -1 | 0) >>> 0) {
      break label$1
     }
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     $827(60416 | 0, 0 | 0);
    }
    $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $3_1;
  return 0 | 0;
 }
 
 function $865($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$1_1 >> 2] = $0_1 ? $0_1 + -1 | 0 : 0;
 }
 
 function $866($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $14_1 = 0, $14$hi = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$3 = 0, $23_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0, $167$hi = 0, $172$hi = 0;
  label$1 : {
   $6_1 = global$0 - 96 | 0;
   $12_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $7_1 = HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0;
   $8_1 = 0;
   label$4 : {
    $9_1 = $2_1 + 1 | 0;
    if ($9_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    $8_1 = HEAPU8[($0_1 + $9_1 | 0) >> 0] | 0;
   }
   HEAP32[($6_1 + 76 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
   HEAP32[($6_1 + 68 | 0) >> 2] = $8_1;
   HEAP32[($6_1 + 64 | 0) >> 2] = $7_1;
   $827(60167 | 0, $6_1 + 64 | 0 | 0);
  }
  label$5 : {
   label$6 : {
    if ($864($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $6_1 + 92 | 0 | 0, $6_1 + 88 | 0 | 0, $6_1 + 84 | 0 | 0) | 0) {
     break label$6
    }
    label$7 : {
     $2_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
     if ($2_1 >>> 0 < 65 >>> 0) {
      break label$7
     }
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $827(60192 | 0, 0 | 0);
     break label$6;
    }
    label$8 : {
     label$9 : {
      $3_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$9
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($6_1 + 88 | 0) >> 2] = $3_1;
      break label$8;
     }
     $3_1 = 7;
     HEAP32[($6_1 + 88 | 0) >> 2] = 7;
     $8_1 = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 92 | 0) >> 2] = $8_1;
     if ($8_1 >>> 0 >= $1_1 >>> 0) {
      break label$6
     }
    }
    label$10 : {
     label$11 : {
      label$12 : {
       if ($2_1) {
        break label$12
       }
       $2_1 = 0;
       if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$11
       }
       $2_1 = 0;
       if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$11
       }
       $2_1 = 0;
       $827(60231 | 0, 0 | 0);
       break label$11;
      }
      label$13 : {
       label$14 : {
        if ($2_1 >>> 0 > 8 >>> 0) {
         break label$14
        }
        if (($2_1 | 0) > ($3_1 + 1 | 0 | 0)) {
         break label$14
        }
        $7_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
        $8_1 = $3_1 - $2_1 | 0;
        $3_1 = ((HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0) >>> ($8_1 + 1 | 0) | 0) & (HEAPU8[($2_1 + 60252 | 0) >> 0] | 0) | 0;
        label$15 : {
         if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$15
         }
         if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$15
         }
         HEAP32[($6_1 + 52 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
         $827(60261 | 0, $6_1 + 48 | 0 | 0);
        }
        i64toi32_i32$0 = 0;
        $14_1 = $3_1;
        $14$hi = i64toi32_i32$0;
        HEAP32[($6_1 + 88 | 0) >> 2] = $8_1;
        if (($8_1 | 0) != (-1 | 0)) {
         break label$13
        }
        $8_1 = 7;
        HEAP32[($6_1 + 88 | 0) >> 2] = 7;
        $3_1 = $7_1 + 1 | 0;
        HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
        if ($3_1 >>> 0 < $1_1 >>> 0) {
         break label$13
        }
        break label$6;
       }
       $7_1 = 0;
       label$16 : {
        if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$16
        }
        if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$16
        }
        HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
        HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
        HEAP32[($6_1 + 40 | 0) >> 2] = $3_1;
        $827(60302 | 0, $6_1 + 32 | 0 | 0);
       }
       $10_1 = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
       i64toi32_i32$0 = 0;
       $14_1 = 0;
       $14$hi = i64toi32_i32$0;
       $11_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
       label$17 : while (1) {
        $9_1 = HEAPU8[($0_1 + $11_1 | 0) >> 0] | 0;
        label$18 : {
         label$19 : {
          if (!$3_1) {
           break label$19
          }
          $8_1 = $3_1 + -1 | 0;
          break label$18;
         }
         $8_1 = 7;
         $11_1 = $11_1 + 1 | 0;
         if ($11_1 >>> 0 >= $1_1 >>> 0) {
          break label$10
         }
        }
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$2 = $14_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $23_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $167$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $167$hi;
        i64toi32_i32$0 = $23_1;
        i64toi32_i32$2 = $172$hi;
        i64toi32_i32$3 = ($9_1 >>> $3_1 | 0) & 1 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        $14_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$2;
        $3_1 = $8_1;
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         continue label$17
        }
        break label$17;
       };
       HEAP32[($6_1 + 88 | 0) >> 2] = $8_1;
       HEAP32[($6_1 + 92 | 0) >> 2] = $11_1;
       if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $14$hi;
       HEAP32[($6_1 + 20 | 0) >> 2] = $14_1;
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       $827(60335 | 0, $6_1 + 16 | 0 | 0);
      }
      $3_1 = 1;
      label$20 : while (1) {
       $0_1 = $3_1;
       $3_1 = $3_1 << 1 | 0;
       $1_1 = $2_1;
       $2_1 = $2_1 + -1 | 0;
       if ($1_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[($6_1 + 84 | 0) >> 2] = -1;
      i64toi32_i32$2 = $14$hi;
      $2_1 = ($14_1 + $0_1 | 0) + -1 | 0;
      $3_1 = $8_1;
     }
     label$21 : {
      if (!$4_1) {
       break label$21
      }
      HEAP32[$4_1 >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     }
     label$22 : {
      if (!$5_1) {
       break label$22
      }
      HEAP32[$5_1 >> 2] = $3_1;
     }
     if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$6_1 >> 2] = $2_1;
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
     $827(60366 | 0, $6_1 | 0);
     break label$5;
    }
    HEAP32[($6_1 + 88 | 0) >> 2] = 7;
    HEAP32[($6_1 + 92 | 0) >> 2] = $11_1;
   }
   $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
   $2_1 = -1;
  }
  label$23 : {
   $13_1 = $6_1 + 96 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $2_1 | 0;
 }
 
 function $867() {
  return 62916 | 0;
 }
 
 function $868() {
  return 63592 | 0;
 }
 
 function $869($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $872($0_1) {
  $0_1 = $0_1 | 0;
  return ($871($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($4_1) {
      break label$3
     }
     $2_1 = $3_1;
     break label$1;
    }
    label$4 : {
     $3_1 = $3_1 & 255 | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$4
     }
     if (($872($3_1 | 0) | 0 | 0) == ($872(HEAPU8[$1_1 >> 0] | 0 | 0) | 0 | 0)) {
      break label$4
     }
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     break label$1;
    }
    $1_1 = $1_1 + 1 | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $0_1 = $0_1 + 1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($872($2_1 & 255 | 0 | 0) | 0) - ($872(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($980($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $874($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $878($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 ^ $0_1 | 0) & 3 | 0) {
      break label$3
     }
     $3_1 = ($2_1 | 0) != (0 | 0);
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($1_1 & 3 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       if (!$3_1) {
        break label$1
       }
       $0_1 = $0_1 + 1 | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($1_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     label$6 : while (1) {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$3
      }
      HEAP32[$0_1 >> 2] = $3_1;
      $0_1 = $0_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$2
    }
    label$7 : while (1) {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $3_1;
     if (!$3_1) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $2_1 = 0;
  }
  $974($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $879($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $880($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $978($0_1 | 0) | 0;
  i64toi32_i32$0 = $880($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $979($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $883($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $978($0_1 | 0) | 0;
  }
  $882($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $924() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $925();
  }
  $3_1 = $884($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $964($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $964($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $979($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $885($0_1 | 0) | 0 | 0;
    }
    $1_1 = $978($0_1 | 0) | 0;
    $2_1 = $885($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $979($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 63296 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $884(HEAP32[(0 + 63296 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($924() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $978($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $885($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $979($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $925();
  }
  return $2_1 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $886($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $913(HEAP32[(0 + 61160 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $887($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  label$3 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $888($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $889($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $888($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $978($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $888($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $979($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($868() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $891($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($948(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$6
      }
      $2_1 = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = -1;
      break label$5;
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$4
     }
     $2_1 = $4_1;
    }
    HEAP32[$0_1 >> 2] = ($2_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$3;
   }
   label$7 : {
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > $6_1 >>> 0) {
     break label$7
    }
    $2_1 = $4_1;
    break label$3;
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  }
  label$8 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($875(60461 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$6
      }
      HEAP32[($868() | 0) >> 2] = 28;
      break label$5;
     }
     $3_1 = $963(1176 | 0) | 0;
     if ($3_1) {
      break label$4
     }
    }
    $3_1 = 0;
    break label$3;
   }
   $974($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$7 : {
    if ($875($1_1 | 0, 43 | 0) | 0) {
     break label$7
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$8 : {
    label$9 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$9
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$8;
    }
    label$10 : {
     $1_1 = fimport$4($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$10
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$4($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$11 : {
    if ($1_1 & 8 | 0) {
     break label$11
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$5($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$11
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 214;
   HEAP32[($3_1 + 36 | 0) >> 2] = 215;
   HEAP32[($3_1 + 32 | 0) >> 2] = 216;
   HEAP32[($3_1 + 12 | 0) >> 2] = 217;
   label$12 : {
    if (HEAP32[(0 + 63532 | 0) >> 2] | 0) {
     break label$12
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $920($3_1 | 0) | 0;
  }
  label$13 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if ($875(60465 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$5
     }
     HEAP32[($868() | 0) >> 2] = 28;
     break label$4;
    }
    $3_1 = $927($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $890(fimport$3($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$3
    }
    $4_1 = $892($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$3
    }
    fimport$7($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  label$6 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $894($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $973($4_1 + 8 | 0 | 0, 60472 | 0, 144 | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$5
     }
     if ($1_1) {
      break label$4
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $913($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$3;
   }
   HEAP32[($868() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  label$6 : {
   $7_1 = $4_1 + 160 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $973($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $896($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $978($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $973($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($898($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $979($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $979($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $897($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    if ($948($1009(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = -1;
   HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  label$5 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $900($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($901() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($868() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($868() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $901() {
  return $867() | 0 | 0;
 }
 
 function $902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $900($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $903($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$903(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $904($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $974($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (($905(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   label$5 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$5
    }
    $2_1 = $978($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$6 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$6
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$8
     }
     $1_1 = $905($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$7;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $905($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$7
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$3
   }
   $979($0_1 | 0);
  }
  label$9 : {
   $9_1 = $5_1 + 208 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $1_1 | 0;
 }
 
 function $905($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $14_1 = 0, $13_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $24_1 = 0, $24$hi = 0, $10_1 = 0, $21_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $282_1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if (($11_1 | 0) < (0 | 0)) {
       break label$6
      }
      label$7 : {
       if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
        break label$7
       }
       HEAP32[($868() | 0) >> 2] = 61;
       $11_1 = -1;
       break label$6;
      }
      $11_1 = $1_1 + $11_1 | 0;
     }
     $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     $1_1 = $12_1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$11
         }
         label$12 : while (1) {
          label$13 : {
           label$14 : {
            label$15 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$15
             }
             $13_1 = $1_1;
             break label$14;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$13
            }
            $13_1 = $1_1;
            label$16 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$14
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$16
             }
             break label$16;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$17 : {
            if (!$0_1) {
             break label$17
            }
            $906($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$5
           }
           $16_1 = -1;
           $13_1 = 1;
           $14_1 = $899(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$18 : {
            if (!$14_1) {
             break label$18
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$18
            }
            $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
            $10_1 = 1;
            $13_1 = 3;
           }
           $1_1 = $1_1 + $13_1 | 0;
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $13_1 = 0;
           label$19 : {
            label$20 : {
             $17_1 = HEAP8[$1_1 >> 0] | 0;
             $15_1 = $17_1 + -32 | 0;
             if ($15_1 >>> 0 <= 31 >>> 0) {
              break label$20
             }
             $14_1 = $1_1;
             break label$19;
            }
            $14_1 = $1_1;
            $15_1 = 1 << $15_1 | 0;
            if (!($15_1 & 75913 | 0)) {
             break label$19
            }
            label$21 : while (1) {
             $14_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $15_1 | $13_1 | 0;
             $17_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $15_1 = $17_1 + -32 | 0;
             if ($15_1 >>> 0 > 31 >>> 0) {
              break label$19
             }
             $1_1 = $14_1;
             $15_1 = 1 << $15_1 | 0;
             if ($15_1 & 75913 | 0) {
              continue label$21
             }
             break label$21;
            };
           }
           label$22 : {
            label$23 : {
             if (($17_1 | 0) != (42 | 0)) {
              break label$23
             }
             label$24 : {
              label$25 : {
               if (!($899(HEAP8[($14_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$25
               }
               $14_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$25
               }
               HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $14_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$24;
              }
              if ($10_1) {
               break label$4
              }
              $10_1 = 0;
              $18_1 = 0;
              label$26 : {
               if (!$0_1) {
                break label$26
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$22
             }
             $18_1 = 0 - $18_1 | 0;
             $13_1 = $13_1 | 8192 | 0;
             break label$22;
            }
            $18_1 = $907($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$4
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$27 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$27
            }
            label$28 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$28
             }
             label$29 : {
              if (!($899(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$29
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$29
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$27;
             }
             if ($10_1) {
              break label$4
             }
             label$30 : {
              label$31 : {
               if ($0_1) {
                break label$31
               }
               $19_1 = 0;
               break label$30;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$27;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $907($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $14_1 = 0;
           label$32 : while (1) {
            $15_1 = $14_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$3
            }
            $17_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $17_1;
            $14_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $17_1;
            $14_1 = HEAPU8[(($14_1 + Math_imul($15_1, 58) | 0) + 60575 | 0) >> 0] | 0;
            if (($14_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$32
            }
            break label$32;
           };
           if (!$14_1) {
            break label$3
           }
           label$33 : {
            label$34 : {
             label$35 : {
              label$36 : {
               if (($14_1 | 0) != (19 | 0)) {
                break label$36
               }
               $20_1 = -1;
               if (($16_1 | 0) <= (-1 | 0)) {
                break label$35
               }
               break label$3;
              }
              if (($16_1 | 0) < (0 | 0)) {
               break label$34
              }
              HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $14_1;
              i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $282_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $7_1;
              HEAP32[($7_1 + 64 | 0) >> 2] = $282_1;
              HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
             }
             $1_1 = 0;
             if (!$0_1) {
              continue label$5
             }
             break label$33;
            }
            if (!$0_1) {
             break label$8
            }
            $908($7_1 + 64 | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
            $17_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $21_1 = $13_1 & -65537 | 0;
           $13_1 = $13_1 & 8192 | 0 ? $21_1 : $13_1;
           $20_1 = 0;
           $16_1 = 60616;
           $14_1 = $9_1;
           label$37 : {
            label$38 : {
             label$39 : {
              label$40 : {
               label$41 : {
                label$42 : {
                 label$43 : {
                  label$44 : {
                   label$45 : {
                    label$46 : {
                     label$47 : {
                      label$48 : {
                       label$49 : {
                        label$50 : {
                         label$51 : {
                          label$52 : {
                           $1_1 = HEAP8[($17_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $15_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$37;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$38;
                           case 27:
                            break label$43;
                           case 12:
                           case 17:
                            break label$46;
                           case 23:
                            break label$47;
                           case 0:
                           case 32:
                            break label$48;
                           case 24:
                            break label$49;
                           case 22:
                            break label$50;
                           case 29:
                            break label$51;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$9;
                           default:
                            break label$52;
                           };
                          }
                          $14_1 = $9_1;
                          label$53 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$38;
                           case 2:
                            break label$41;
                           case 1:
                           case 3:
                            break label$9;
                           default:
                            break label$53;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$42
                          }
                          break label$10;
                         }
                         $20_1 = 0;
                         $16_1 = 60616;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $24_1 = i64toi32_i32$1;
                         $24$hi = i64toi32_i32$0;
                         break label$45;
                        }
                        $1_1 = 0;
                        label$54 : {
                         switch ($15_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$5;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$5;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$5;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 7:
                          break label$54;
                         default:
                          continue label$5;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$5;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 60616;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $909(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$44
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$44
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 60616 | 0;
                      $20_1 = 2;
                      break label$44;
                     }
                     $20_1 = 0;
                     $16_1 = 60616;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $910(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$44
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$44;
                    }
                    label$61 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $24_1 = i64toi32_i32$1;
                     $24$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $32_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $33_1 = 0
                       } else {
                        $33_1 = 1
                       }
                       $34_1 = $33_1;
                      } else {
                       $34_1 = 0
                      }
                      $32_1 = $34_1;
                     }
                     if ($32_1) {
                      break label$61
                     }
                     i64toi32_i32$2 = $24$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $24$hi;
                     i64toi32_i32$1 = $24_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $24_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $24$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $24_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 60616;
                     break label$45;
                    }
                    label$62 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$62
                     }
                     $20_1 = 1;
                     $16_1 = 60617;
                     break label$45;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 60618 : 60616;
                   }
                   i64toi32_i32$5 = $24$hi;
                   $12_1 = $911($24_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $24_1 = i64toi32_i32$5;
                  $24$hi = i64toi32_i32$3;
                  label$63 : {
                   if ($19_1) {
                    break label$63
                   }
                   i64toi32_i32$3 = $24$hi;
                   if (!!($24_1 | i64toi32_i32$3 | 0)) {
                    break label$63
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$10;
                  }
                  i64toi32_i32$3 = $24$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($24_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$10;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 60626;
                 $1_1 = $870($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $14_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$9;
                }
                label$64 : {
                 if (!$19_1) {
                  break label$64
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$40;
                }
                $1_1 = 0;
                $912($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$39;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$65 : {
               label$66 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$65
                }
                label$67 : {
                 $15_1 = $902($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$67
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$67
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$66
                 }
                 break label$65;
                }
                break label$66;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$3
               }
              }
              $912($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$68 : {
               if ($1_1) {
                break label$68
               }
               $1_1 = 0;
               break label$39;
              }
              $15_1 = 0;
              $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$69 : while (1) {
               $12_1 = HEAP32[$14_1 >> 2] | 0;
               if (!$12_1) {
                break label$39
               }
               $12_1 = $902($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $15_1 = $12_1 + $15_1 | 0;
               if (($15_1 | 0) > ($1_1 | 0)) {
                break label$39
               }
               $906($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $14_1 = $14_1 + 4 | 0;
               if ($15_1 >>> 0 < $1_1 >>> 0) {
                continue label$69
               }
               break label$69;
              };
             }
             $912($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$5;
            }
            $1_1 = FUNCTION_TABLE[$5_1]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$5;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $14_1 = $9_1;
           $13_1 = $21_1;
           break label$9;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$12;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$3
        }
        if (!$10_1) {
         break label$8
        }
        $1_1 = 1;
        label$70 : {
         label$71 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$70
          }
          $908($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$71
          }
          break label$3;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 > 9 >>> 0) {
         break label$3
        }
        $20_1 = -1;
        if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
         break label$3
        }
        label$72 : {
         label$73 : while (1) {
          $13_1 = $1_1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) == (10 | 0)) {
           break label$72
          }
          if (!(HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0)) {
           continue label$73
          }
          break label$73;
         };
        }
        $20_1 = $13_1 >>> 0 < 9 >>> 0 ? -1 : 1;
        break label$3;
       }
       $14_1 = $9_1;
      }
      $15_1 = $14_1 - $12_1 | 0;
      $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
      $14_1 = $20_1 + $17_1 | 0;
      $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
      $912($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
      $906($0_1 | 0, $16_1 | 0, $20_1 | 0);
      $912($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
      $912($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
      $906($0_1 | 0, $12_1 | 0, $15_1 | 0);
      $912($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
      continue label$5;
     }
     break label$5;
    };
    $20_1 = 0;
    break label$3;
   }
   $20_1 = -1;
  }
  label$74 : {
   $23_1 = $7_1 + 80 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $20_1 | 0;
 }
 
 function $906($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $976($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($899(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($899(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0, $83_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $83_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $83_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1]($0_1, $2_1);
  }
 }
 
 function $909($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 61104 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $910($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $911($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$3
   }
   if ($4_1 & 73728 | 0) {
    break label$3
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $974($5_1 | 0, $1_1 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$4 : {
    if ($3_1) {
     break label$4
    }
    label$5 : while (1) {
     $906($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $906($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  label$6 : {
   $7_1 = $5_1 + 256 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $904($0_1 | 0, $1_1 | 0, $2_1 | 0, 219 | 0, 220 | 0) | 0 | 0;
 }
 
 function $914($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $17_1 = 0, $16_1 = 0, $22_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $20_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $21_1 = 0, $15_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $27_1 = 0.0, $7_1 = 0, $25_1 = 0, $19_1 = 0, $25$hi = 0, $8_1 = 0, $14_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $26$hi = 0, $48_1 = 0, $24_1 = 0, $23_1 = 0, $26_1 = 0, $166_1 = 0, $168$hi = 0, $170$hi = 0, $172_1 = 0, $172$hi = 0, $174$hi = 0, $178_1 = 0, $178$hi = 0, $821_1 = 0;
  label$1 : {
   $6_1 = global$0 - 560 | 0;
   $23_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $916(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $25_1 = i64toi32_i32$0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$4
    }
    $7_1 = 1;
    $8_1 = 61120;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $916(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $25_1 = i64toi32_i32$2;
    $25$hi = i64toi32_i32$1;
    break label$3;
   }
   label$5 : {
    if (!($4_1 & 2048 | 0)) {
     break label$5
    }
    $7_1 = 1;
    $8_1 = 61123;
    break label$3;
   }
   $7_1 = $4_1 & 1 | 0;
   $8_1 = $7_1 ? 61126 : 61121;
  }
  label$6 : {
   label$7 : {
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$3 = $25_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$7
    }
    $9_1 = $7_1 + 3 | 0;
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 & -65537 | 0 | 0);
    $906($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $10_1 = ($5_1 >>> 5 | 0) & 1 | 0;
    $906($0_1 | 0, ($1_1 != $1_1 ? ($10_1 ? 61147 : 61151) : $10_1 ? 61139 : 61143) | 0, 3 | 0);
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $11_1 = $6_1 + 16 | 0;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       $1_1 = +$903(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$11
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $12_1 = $5_1 | 32 | 0;
       if (($12_1 | 0) != (97 | 0)) {
        break label$10
       }
       break label$8;
      }
      $12_1 = $5_1 | 32 | 0;
      if (($12_1 | 0) == (97 | 0)) {
       break label$8
      }
      $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $14_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$9;
     }
     $14_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
     $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $15_1 = ($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $16_1 = $15_1;
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$14
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$13;
      }
      $10_1 = 0;
     }
     HEAP32[$16_1 >> 2] = $10_1;
     $16_1 = $16_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$12
     }
     break label$12;
    };
    label$15 : {
     label$16 : {
      if (($14_1 | 0) >= (1 | 0)) {
       break label$16
      }
      $3_1 = $14_1;
      $10_1 = $16_1;
      $17_1 = $15_1;
      break label$15;
     }
     $17_1 = $15_1;
     $3_1 = $14_1;
     label$17 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$18 : {
       $10_1 = $16_1 + -4 | 0;
       if ($10_1 >>> 0 < $17_1 >>> 0) {
        break label$18
       }
       i64toi32_i32$1 = 0;
       $26_1 = $3_1;
       $26$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $25_1 = 0;
       $25$hi = i64toi32_i32$1;
       label$19 : while (1) {
        $166_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $168$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $26$hi;
        i64toi32_i32$2 = $168$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$3 = $26_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $170$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$2 = $25_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $172_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $172$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $170$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $172$hi;
        i64toi32_i32$3 = $172_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $25_1 = i64toi32_i32$4;
        $25$hi = i64toi32_i32$5;
        $174$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $25_1 = i64toi32_i32$1;
        $25$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $178_1 = i64toi32_i32$1;
        $178$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $174$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $178$hi;
        i64toi32_i32$3 = $178_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$166_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $17_1 >>> 0) {
         continue label$19
        }
        break label$19;
       };
       i64toi32_i32$4 = $25$hi;
       $10_1 = $25_1;
       if (!$10_1) {
        break label$18
       }
       $17_1 = $17_1 + -4 | 0;
       HEAP32[$17_1 >> 2] = $10_1;
      }
      label$20 : {
       label$21 : while (1) {
        $10_1 = $16_1;
        if ($10_1 >>> 0 <= $17_1 >>> 0) {
         break label$20
        }
        $16_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$16_1 >> 2] | 0)) {
         continue label$21
        }
        break label$21;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $16_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    label$22 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$22
     }
     $18_1 = (($13_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $19_1 = ($12_1 | 0) == (102 | 0);
     label$23 : while (1) {
      $9_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$24 : {
       label$25 : {
        if ($17_1 >>> 0 < $10_1 >>> 0) {
         break label$25
        }
        $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
        break label$24;
       }
       $20_1 = 1e9 >>> $9_1 | 0;
       $21_1 = (-1 << $9_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $16_1 = $17_1;
       label$26 : while (1) {
        $22_1 = HEAP32[$16_1 >> 2] | 0;
        HEAP32[$16_1 >> 2] = ($22_1 >>> $9_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($22_1 & $21_1 | 0, $20_1);
        $16_1 = $16_1 + 4 | 0;
        if ($16_1 >>> 0 < $10_1 >>> 0) {
         continue label$26
        }
        break label$26;
       };
       $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
       if (!$3_1) {
        break label$24
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $9_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $16_1 = $19_1 ? $15_1 : $17_1;
      $10_1 = (($10_1 - $16_1 | 0) >> 2 | 0 | 0) > ($18_1 | 0) ? $16_1 + ($18_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$23
      }
      break label$23;
     };
    }
    $16_1 = 0;
    label$27 : {
     if ($17_1 >>> 0 >= $10_1 >>> 0) {
      break label$27
     }
     $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $22_1 = HEAP32[$17_1 >> 2] | 0;
     if ($22_1 >>> 0 < 10 >>> 0) {
      break label$27
     }
     label$28 : while (1) {
      $16_1 = $16_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($22_1 >>> 0 >= $3_1 >>> 0) {
       continue label$28
      }
      break label$28;
     };
    }
    label$29 : {
     $3_1 = ($13_1 - (($12_1 | 0) == (102 | 0) ? 0 : $16_1) | 0) - (($13_1 | 0) != (0 | 0) & ($12_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($10_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$29
     }
     $22_1 = $3_1 + 9216 | 0;
     $20_1 = ($22_1 | 0) / (9 | 0) | 0;
     $9_1 = (($20_1 << 2 | 0) + (($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$30 : {
      $22_1 = $22_1 - Math_imul($20_1, 9) | 0;
      if (($22_1 | 0) > (7 | 0)) {
       break label$30
      }
      label$31 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $22_1 = $22_1 + 1 | 0;
       if (($22_1 | 0) != (8 | 0)) {
        continue label$31
       }
       break label$31;
      };
     }
     $20_1 = HEAP32[$9_1 >> 2] | 0;
     $21_1 = ($20_1 >>> 0) / ($3_1 >>> 0) | 0;
     $22_1 = $20_1 - Math_imul($21_1, $3_1) | 0;
     label$32 : {
      label$33 : {
       $18_1 = $9_1 + 4 | 0;
       if (($18_1 | 0) != ($10_1 | 0)) {
        break label$33
       }
       if (!$22_1) {
        break label$32
       }
      }
      $19_1 = $3_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $19_1 >>> 0 ? .5 : ($18_1 | 0) == ($10_1 | 0) ? (($22_1 | 0) == ($19_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $21_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$34 : {
       if (!$7_1) {
        break label$34
       }
       if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $22_1 = $20_1 - $22_1 | 0;
      HEAP32[$9_1 >> 2] = $22_1;
      if ($1_1 + $27_1 == $1_1) {
       break label$32
      }
      $16_1 = $22_1 + $3_1 | 0;
      HEAP32[$9_1 >> 2] = $16_1;
      label$35 : {
       if ($16_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$9_1 >> 2] = 0;
        label$37 : {
         $9_1 = $9_1 + -4 | 0;
         if ($9_1 >>> 0 >= $17_1 >>> 0) {
          break label$37
         }
         $17_1 = $17_1 + -4 | 0;
         HEAP32[$17_1 >> 2] = 0;
        }
        $16_1 = (HEAP32[$9_1 >> 2] | 0) + 1 | 0;
        HEAP32[$9_1 >> 2] = $16_1;
        if ($16_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $22_1 = HEAP32[$17_1 >> 2] | 0;
      if ($22_1 >>> 0 < 10 >>> 0) {
       break label$32
      }
      label$38 : while (1) {
       $16_1 = $16_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($22_1 >>> 0 >= $3_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $3_1 = $9_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      label$41 : {
       $3_1 = $10_1;
       if ($10_1 >>> 0 > $17_1 >>> 0) {
        break label$41
       }
       $19_1 = 0;
       break label$39;
      }
      $10_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
     $19_1 = 1;
    }
    label$42 : {
     label$43 : {
      if (($12_1 | 0) == (103 | 0)) {
       break label$43
      }
      $21_1 = $4_1 & 8 | 0;
      break label$42;
     }
     $10_1 = $13_1 ? $13_1 : 1;
     $22_1 = ($10_1 | 0) > ($16_1 | 0) & ($16_1 | 0) > (-5 | 0) | 0;
     $13_1 = ($22_1 ? $16_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($22_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$42
     }
     $10_1 = 9;
     label$44 : {
      if (!$19_1) {
       break label$44
      }
      $10_1 = 9;
      $9_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$44
      }
      $22_1 = 10;
      $10_1 = 0;
      if (($9_1 >>> 0) % (10 >>> 0) | 0) {
       break label$44
      }
      label$45 : while (1) {
       $10_1 = $10_1 + 1 | 0;
       $22_1 = Math_imul($22_1, 10);
       if (!(($9_1 >>> 0) % ($22_1 >>> 0) | 0)) {
        continue label$45
       }
       break label$45;
      };
     }
     $22_1 = Math_imul(($3_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0;
     label$46 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$46
      }
      $21_1 = 0;
      $10_1 = $22_1 - $10_1 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
      break label$42;
     }
     $21_1 = 0;
     $10_1 = ($22_1 + $16_1 | 0) - $10_1 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
    }
    $12_1 = $13_1 | $21_1 | 0;
    $22_1 = ($12_1 | 0) != (0 | 0);
    label$47 : {
     label$48 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$48
      }
      $10_1 = ($16_1 | 0) > (0 | 0) ? $16_1 : 0;
      break label$47;
     }
     label$49 : {
      $10_1 = $16_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $911(($16_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$4 | 0, $11_1 | 0) | 0;
      if (($11_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$49
      }
      label$50 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($11_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$50
       }
       break label$50;
      };
     }
     $18_1 = $10_1 + -2 | 0;
     HEAP8[$18_1 >> 0] = $5_1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($16_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $11_1 - $18_1 | 0;
    }
    $9_1 = ((($7_1 + $13_1 | 0) + $22_1 | 0) + $10_1 | 0) + 1 | 0;
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
    $906($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $912($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$54
        }
        $20_1 = $6_1 + 16 | 0 | 8 | 0;
        $16_1 = $6_1 + 16 | 0 | 9 | 0;
        $22_1 = $17_1 >>> 0 > $15_1 >>> 0 ? $15_1 : $17_1;
        $17_1 = $22_1;
        label$55 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $911(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $16_1 | 0) | 0;
         label$56 : {
          label$57 : {
           if (($17_1 | 0) == ($22_1 | 0)) {
            break label$57
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$56
           }
           label$58 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$58
            }
            break label$56;
           };
          }
          if (($10_1 | 0) != ($16_1 | 0)) {
           break label$56
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $20_1;
         }
         $906($0_1 | 0, $10_1 | 0, $16_1 - $10_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $15_1 >>> 0) {
          continue label$55
         }
         break label$55;
        };
        label$59 : {
         if (!$12_1) {
          break label$59
         }
         $906($0_1 | 0, 61155 | 0, 1 | 0);
        }
        if ($17_1 >>> 0 >= $3_1 >>> 0) {
         break label$53
        }
        if (($13_1 | 0) < (1 | 0)) {
         break label$53
        }
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $911(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $16_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$61
          }
          label$62 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$62
           }
           break label$62;
          };
         }
         $906($0_1 | 0, $10_1 | 0, (($13_1 | 0) < (9 | 0) ? $13_1 : 9) | 0);
         $10_1 = $13_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $3_1 >>> 0) {
          break label$52
         }
         $22_1 = ($13_1 | 0) > (9 | 0);
         $13_1 = $10_1;
         if ($22_1) {
          continue label$60
         }
         break label$52;
        };
       }
       label$63 : {
        if (($13_1 | 0) < (0 | 0)) {
         break label$63
        }
        $20_1 = $19_1 ? $3_1 : $17_1 + 4 | 0;
        $15_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $17_1;
        label$64 : while (1) {
         label$65 : {
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$4 = HEAP32[$16_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $911(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$65
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $15_1;
         }
         label$66 : {
          label$67 : {
           if (($16_1 | 0) == ($17_1 | 0)) {
            break label$67
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$66
           }
           label$68 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$68
            }
            break label$66;
           };
          }
          $906($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          label$69 : {
           if ($21_1) {
            break label$69
           }
           if (($13_1 | 0) < (1 | 0)) {
            break label$66
           }
          }
          $906($0_1 | 0, 61155 | 0, 1 | 0);
         }
         $22_1 = $3_1 - $10_1 | 0;
         $906($0_1 | 0, $10_1 | 0, (($13_1 | 0) > ($22_1 | 0) ? $22_1 : $13_1) | 0);
         $13_1 = $13_1 - $22_1 | 0;
         $16_1 = $16_1 + 4 | 0;
         if ($16_1 >>> 0 >= $20_1 >>> 0) {
          break label$63
         }
         if (($13_1 | 0) > (-1 | 0)) {
          continue label$64
         }
         break label$64;
        };
       }
       $912($0_1 | 0, 48 | 0, $13_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $906($0_1 | 0, $18_1 | 0, $11_1 - $18_1 | 0 | 0);
       break label$51;
      }
      $10_1 = $13_1;
     }
     $912($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $16_1 = $5_1 & 32 | 0;
   $13_1 = $16_1 ? $8_1 + 9 | 0 : $8_1;
   label$70 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$70
    }
    $10_1 = 12 - $3_1 | 0;
    if (!$10_1) {
     break label$70
    }
    $27_1 = 8.0;
    label$71 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$71
     }
     break label$71;
    };
    label$72 : {
     if ((HEAPU8[$13_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$72
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break label$70;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   label$73 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $821_1 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $911(($821_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$0 | 0, $11_1 | 0) | 0;
    if (($10_1 | 0) != ($11_1 | 0)) {
     break label$73
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $7_1 | 2 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $20_1 = $10_1 + -2 | 0;
   HEAP8[$20_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $22_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$74 : while (1) {
    $10_1 = $17_1;
    label$75 : {
     label$76 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$76
      }
      $17_1 = ~~$1_1;
      break label$75;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($17_1 + 61104 | 0) >> 0] | 0 | $16_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$77 : {
     $17_1 = $10_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$77
     }
     label$78 : {
      if ($22_1) {
       break label$78
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$78
      }
      if ($1_1 == 0.0) {
       break label$77
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $17_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$74
    }
    break label$74;
   };
   label$79 : {
    label$80 : {
     if (!$3_1) {
      break label$80
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$80
     }
     $10_1 = (($3_1 + $11_1 | 0) - $20_1 | 0) + 2 | 0;
     break label$79;
    }
    $10_1 = (($11_1 - ($6_1 + 16 | 0) | 0) - $20_1 | 0) + $17_1 | 0;
   }
   $9_1 = $10_1 + $21_1 | 0;
   $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
   $906($0_1 | 0, $13_1 | 0, $21_1 | 0);
   $912($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $906($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $16_1 = $11_1 - $20_1 | 0;
   $912($0_1 | 0, 48 | 0, $10_1 - ($17_1 + $16_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $906($0_1 | 0, $20_1 | 0, $16_1 | 0);
   $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  label$81 : {
   $24_1 = $6_1 + 560 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return (($9_1 | 0) < ($2_1 | 0) ? $2_1 : $9_1) | 0;
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$962($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $916($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $917($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $904($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$7($918(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $924() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $925();
  return $0_1 | 0;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $922($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $923($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$3 : {
   $2_1 = $894(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$3
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $963($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$3
   }
   $4_1 = $894($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  label$4 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $924() {
  $946(64640 | 0);
  return 64648 | 0;
 }
 
 function $925() {
  $947(64640 | 0);
 }
 
 function $926($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($948(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$4
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($948(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($6_1 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$3;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$3
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $11_1 = $3_1 + 32 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($875($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $875($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $875($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$945($0_1 | 0, 0 | 0));
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = -1;
  label$3 : {
   if ($898($0_1 | 0) | 0) {
    break label$3
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $930($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $1_1 | 0;
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
 }
 
 function $931($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $10$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $47_1 = 0, $49_1 = 0, $49$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$2
     }
    }
    $1_1 = $929($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2_1 - $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $28_1 = $26_1;
     } else {
      $28_1 = 0
     }
     $25_1 = $28_1;
    }
    if ($25_1) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $4_1 | 0;
    break label$4;
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($2_1) {
     break label$7
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56_1 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47_1;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $11$hi = 0, i64toi32_i32$1 = 0, $11_1 = 0, $12$hi = 0, $13$hi = 0, $12_1 = 0, $7_1 = 0, $13_1 = 0, $4_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $8_1 = 0, $34_1 = 0, $35_1 = 0, $10_1 = 0, $9_1 = 0, $191_1 = 0, $191$hi = 0, $248_1 = 0, $248$hi = 0, $330$hi = 0, $333_1 = 0, $333$hi = 0, $412$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$12
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$11;
           }
           $5_1 = $931($0_1 | 0) | 0;
          }
          if ($932($5_1 | 0) | 0) {
           continue label$10
          }
          break label$10;
         };
         $6_1 = 0;
         label$13 : {
          label$14 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$14;
           default:
            break label$13;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$15 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$15
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$13;
          }
          $5_1 = $931($0_1 | 0) | 0;
         }
         label$16 : {
          label$17 : {
           if ($1_1 & -17 | 0) {
            break label$17
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$17
           }
           label$18 : {
            label$19 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$19
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$18;
            }
            $5_1 = $931($0_1 | 0) | 0;
           }
           label$20 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$20
            }
            label$21 : {
             label$22 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$22
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$21;
             }
             $5_1 = $931($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$7
            }
            label$23 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$23
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$3
             }
             break label$4;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$4
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$3;
           }
           if ($1_1) {
            break label$16
           }
           $1_1 = 8;
           break label$7;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
           break label$16
          }
          label$24 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$24
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $930($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($868() | 0) >> 2] = 28;
          break label$3;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$7
         }
         i64toi32_i32$0 = 0;
         $11_1 = 0;
         $11$hi = i64toi32_i32$0;
         label$25 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$25
          }
          $1_1 = 0;
          label$26 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$27 : {
            label$28 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$28
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$27;
            }
            $5_1 = $931($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$29 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$29
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$26
            }
           }
           break label$26;
          };
          i64toi32_i32$0 = 0;
          $11_1 = $1_1;
          $11$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$8
         }
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $12_1 = i64toi32_i32$1;
         $12$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $13_1 = $2_1;
         $13$hi = i64toi32_i32$0;
         label$30 : while (1) {
          label$31 : {
           label$32 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$32
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$31;
           }
           $5_1 = $931($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$2 = $12_1;
          i64toi32_i32$1 = $13$hi;
          i64toi32_i32$3 = $13_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $11_1 = i64toi32_i32$4;
          $11$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$8
          }
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$0 = $11_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$8
          }
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $12_1 = i64toi32_i32$5;
          $12$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $13_1 = $2_1;
          $13$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $191_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $191$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $12$hi;
          i64toi32_i32$0 = $12_1;
          i64toi32_i32$3 = $191$hi;
          i64toi32_i32$2 = $191_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$30
          }
          break label$30;
         };
         $1_1 = 10;
         break label$6;
        }
        HEAP32[($868() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$3;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$6
       }
       break label$5;
      }
      label$33 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$33
       }
       i64toi32_i32$0 = 0;
       $11_1 = 0;
       $11$hi = i64toi32_i32$0;
       label$34 : {
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$34
        }
        $7_1 = 0;
        label$35 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$36 : {
          label$37 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$37
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$36;
          }
          $5_1 = $931($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
         label$38 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$38
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$35
          }
         }
         break label$35;
        };
        i64toi32_i32$0 = 0;
        $11_1 = $7_1;
        $11$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$6
       }
       i64toi32_i32$0 = 0;
       $12_1 = $1_1;
       $12$hi = i64toi32_i32$0;
       label$39 : while (1) {
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $13_1 = i64toi32_i32$5;
        $13$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $14_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $248_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $248$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$5 = $13_1;
        i64toi32_i32$0 = $248$hi;
        i64toi32_i32$3 = $248_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$6
        }
        label$40 : {
         label$41 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$41
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$40;
         }
         $5_1 = $931($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$6
        }
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$0 = 0;
        $960($4_1 | 0, $12_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$6
        }
        continue label$39;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 61425 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $11_1 = 0;
      $11$hi = i64toi32_i32$3;
      label$42 : {
       $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$42
       }
       $7_1 = 0;
       label$43 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$44 : {
         label$45 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$45
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$44;
         }
         $5_1 = $931($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        label$46 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$46
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$43
         }
        }
        break label$43;
       };
       i64toi32_i32$3 = 0;
       $11_1 = $7_1;
       $11$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $12_1 = $8_1;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $34_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $34_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $13_1 = $34_1;
      $13$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$6
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$6
      }
      label$47 : while (1) {
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $35_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $35_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $330$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $333_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $333$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $330$hi;
       i64toi32_i32$5 = $35_1;
       i64toi32_i32$3 = $333$hi;
       i64toi32_i32$4 = $333_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $11_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $11$hi = i64toi32_i32$3;
       label$48 : {
        label$49 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$49
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$48;
        }
        $5_1 = $931($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$4 = $13_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$6
       }
       $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$47
       }
       break label$47;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
      break label$5
     }
     label$50 : while (1) {
      label$51 : {
       label$52 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$52
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$51;
       }
       $5_1 = $931($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
       continue label$50
      }
      break label$50;
     };
     HEAP32[($868() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $11_1 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$0;
    }
    label$53 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$53
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$54 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$54
     }
     label$55 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$55
      }
      if ($6_1) {
       break label$55
      }
      HEAP32[($868() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$3;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($11$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($11$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$54
     }
     HEAP32[($868() | 0) >> 2] = 68;
     break label$3;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $412$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $930($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  label$56 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $934($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 144 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $930($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $933($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  label$4 : {
   $6_1 = $4_1 + 144 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $934($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1;
   $0_1 = $1_1 + 1 | 0;
   if ($932(HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5_1 = HEAP8[$1_1 >> 0] | 0;
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3_1 = 1;
   }
   $5_1 = HEAP8[$0_1 >> 0] | 0;
   $1_1 = $0_1;
   $4_1 = $3_1;
  }
  label$5 : {
   if (!($899($5_1 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2_1 = (Math_imul($2_1, 10) - (HEAP8[$1_1 >> 0] | 0) | 0) + 48 | 0;
    $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($899($0_1 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4_1 ? $2_1 : 0 - $2_1 | 0) | 0;
 }
 
 function $937($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $938($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $22_1 = 0, $6_1 = 0, $5_1 = 0, $76_1 = 0, $77_1 = 0, $77$hi = 0, $78_1 = 0, $78$hi = 0, $82$hi = 0, $86_1 = 0, $89_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $959($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$5 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$3;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $959($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$3;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $959($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$6 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$6
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$3;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $959($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $76_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $77_1 = $1_1;
  $77$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $78_1 = $2_1;
  $78$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $22_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $22_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $82$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $77$hi;
  i64toi32_i32$2 = $78$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $82$hi;
  $959($76_1 | 0, $77_1 | 0, i64toi32_i32$1 | 0, $78_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $86_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $89_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  label$7 : {
   $6_1 = i64toi32_i32$2 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $939($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $940($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $13$hi = 0, $12_1 = 0, $12$hi = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = 0;
  $12_1 = 0;
  $12$hi = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$4
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 61516 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 61504 | 0) >> 2] | 0;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$6;
      }
      $2_1 = $931($1_1 | 0) | 0;
     }
     if ($932($2_1 | 0) | 0) {
      continue label$5
     }
     break label$5;
    };
    $8_1 = 1;
    label$8 : {
     label$9 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$9;
      default:
       break label$8;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$10 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$10
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $931($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 61434 | 0) >> 0] | 0 | 0)) {
         break label$13
        }
        label$15 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$15
         }
         label$16 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$16
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$15;
         }
         $2_1 = $931($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$14
        }
        break label$12;
       };
      }
      label$17 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$17
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$12
       }
       if (!$3_1) {
        break label$11
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$11
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$12
       }
      }
      label$18 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$18
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$12
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$12
      }
      label$19 : while (1) {
       label$20 : {
        if (!$1_1) {
         break label$20
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$19
       }
       break label$19;
      };
     }
     $955($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$0;
     break label$3;
    }
    label$21 : {
     label$22 : {
      label$23 : {
       if ($9_1) {
        break label$23
       }
       $9_1 = 0;
       label$24 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 61443 | 0) >> 0] | 0 | 0)) {
         break label$23
        }
        label$25 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$25
         }
         label$26 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$26
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$25;
         }
         $2_1 = $931($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$24
        }
        break label$22;
       };
      }
      label$27 : {
       switch ($9_1 | 0) {
       case 0:
        label$29 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$29
         }
         label$30 : {
          label$31 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$31
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$30;
          }
          $9_1 = $931($1_1 | 0) | 0;
         }
         label$32 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$32
          }
          $941($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
          $13_1 = i64toi32_i32$0;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          $12_1 = i64toi32_i32$1;
          $12$hi = i64toi32_i32$0;
          break label$3;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$29
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $942($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$1;
        $12$hi = i64toi32_i32$0;
        break label$3;
       case 3:
        break label$22;
       default:
        break label$27;
       };
      }
      label$33 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($868() | 0) >> 2] = 28;
      break label$21;
     }
     label$34 : {
      label$35 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$35
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$34;
      }
      $2_1 = $931($1_1 | 0) | 0;
     }
     label$36 : {
      label$37 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$37
       }
       $9_1 = 1;
       break label$36;
      }
      i64toi32_i32$0 = 2147450880;
      $13_1 = 0;
      $13$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$3
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$3;
     }
     label$38 : while (1) {
      label$39 : {
       label$40 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$40
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$39;
       }
       $2_1 = $931($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$41 : {
       label$42 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$42
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$42
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$42
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$41
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$38;
      }
      break label$38;
     };
     i64toi32_i32$0 = 2147450880;
     $13_1 = 0;
     $13$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$3
     }
     label$43 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$43
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$44 : {
      if (!$3_1) {
       break label$44
      }
      if (!$9_1) {
       break label$3
      }
      label$45 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$46 : {
        if (!$2_1) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$45
       }
       break label$3;
      };
     }
     HEAP32[($868() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $12_1 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $13_1 = 0;
   $13$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$47 : {
   $11_1 = $4_1 + 48 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $18$hi = 0, $21$hi = 0, $18_1 = 0, $21_1 = 0, $17$hi = 0, $19$hi = 0, $16$hi = 0, $17_1 = 0, $19_1 = 0, $20$hi = 0, $16_1 = 0, $10_1 = 0, $20_1 = 0, $8_1 = 0, $9_1 = 0, $22$hi = 0, $22_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $15_1 = 0, $14_1 = 0, $139_1 = 0, $139$hi = 0, $143_1 = 0, $143$hi = 0, $148_1 = 0, $148$hi = 0, $152_1 = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $174_1 = 0, $174$hi = 0, $264$hi = 0, $271_1 = 0, $271$hi = 0, $280_1 = 0, $280$hi = 0, $284_1 = 0, $284$hi = 0, $288_1 = 0, $288$hi = 0, $292_1 = 0, $292$hi = 0, $302_1 = 0, $302$hi = 0, $319_1 = 0, $319$hi = 0, $323_1 = 0, $323$hi = 0, $328_1 = 0, $328$hi = 0, $330_1 = 0, $330$hi = 0, $348$hi = 0, $356_1 = 0, $357_1 = 0, $360$hi = 0, $384_1 = 0, $384$hi = 0, $388_1 = 0, $388$hi = 0, $422_1 = 0, $422$hi = 0, $426_1 = 0, $426$hi = 0, $430_1 = 0, $430$hi = 0, $434_1 = 0, $434$hi = 0, $441_1 = 0, $441$hi = 0, $444_1 = 0, $444$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $498_1 = 0, $498$hi = 0, $502_1 = 0, $502$hi = 0, $506_1 = 0, $506$hi = 0, $510_1 = 0, $510$hi = 0;
  label$1 : {
   $6_1 = global$0 - 432 | 0;
   $14_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  label$3 : {
   label$4 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$3;
   }
   $7_1 = $931($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$9
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$5
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$6;
      }
      label$10 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$10
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$8;
      }
      $9_1 = 1;
      $7_1 = $931($1_1 | 0) | 0;
      continue label$8;
     };
    }
    $7_1 = $931($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $16_1 = 0;
   $16$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$5
   }
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$13
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$12;
     }
     $7_1 = $931($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$11
    }
    break label$11;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $21_1 = 0;
  $21$hi = i64toi32_i32$5;
  label$14 : {
   label$15 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$16 : {
     label$17 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$17
      }
      label$18 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$18
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$14
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$17
      }
      if ($8_1) {
       break label$14
      }
      $8_1 = 1;
      i64toi32_i32$5 = $21$hi;
      $16_1 = $21_1;
      $16$hi = i64toi32_i32$5;
      break label$16;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$19 : {
      label$20 : {
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$0 = $21_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$20
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$19;
      }
      label$21 : {
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$3 = $21_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break label$21
       }
       $956($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $959($6_1 + 32 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $139_1 = i64toi32_i32$5;
       $139$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $143_1 = i64toi32_i32$2;
       $143$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$3 = $143$hi;
       $959($6_1 + 16 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $139_1 | 0, i64toi32_i32$0 | 0, $143_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $19$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $148_1 = i64toi32_i32$3;
       $148$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $152_1 = i64toi32_i32$0;
       $152$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$5 = $152$hi;
       $949($6_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $148_1 | 0, i64toi32_i32$2 | 0, $152_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$5;
       $19$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$2;
       $18$hi = i64toi32_i32$5;
       break label$19;
      }
      if ($11_1) {
       break label$19
      }
      if (!$7_1) {
       break label$19
      }
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $959($6_1 + 80 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $170_1 = i64toi32_i32$3;
      $170$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174_1 = i64toi32_i32$0;
      $174$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $170$hi;
      i64toi32_i32$5 = $174$hi;
      $949($6_1 + 64 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $170_1 | 0, i64toi32_i32$2 | 0, $174_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$22 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$22
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$15;
    }
    $7_1 = $931($1_1 | 0) | 0;
    continue label$15;
   };
  }
  label$23 : {
   label$24 : {
    label$25 : {
     label$26 : {
      if ($9_1) {
       break label$26
      }
      label$27 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$27
       }
       if ($5_1) {
        break label$24
       }
       break label$25;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$25
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$24;
     }
     label$28 : {
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$5 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $115_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $116_1 = 0
        } else {
         $116_1 = 1
        }
        $117_1 = $116_1;
       } else {
        $117_1 = 0
       }
       $115_1 = $117_1;
      }
      if ($115_1) {
       break label$28
      }
      i64toi32_i32$5 = $21$hi;
      $17_1 = $21_1;
      $17$hi = i64toi32_i32$5;
      label$29 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$3 = $17_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$29
       }
       break label$29;
      };
     }
     label$30 : {
      label$31 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$31
       }
       i64toi32_i32$5 = $943($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$30
       }
       label$32 : {
        if (!$5_1) {
         break label$32
        }
        i64toi32_i32$0 = 0;
        $17_1 = 0;
        $17$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$30;
       }
       i64toi32_i32$0 = 0;
       $18_1 = 0;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $930($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $21_1 = 0;
       $21$hi = i64toi32_i32$0;
       break label$23;
      }
      i64toi32_i32$0 = 0;
      $17_1 = 0;
      $17$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$30
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$33 : {
      if ($10_1) {
       break label$33
      }
      $954($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      break label$23;
     }
     label$34 : {
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $16_1 : $21_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $118_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $118_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $264$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $264$hi;
      i64toi32_i32$3 = $118_1;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$5 = 0 - $3_1 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $271_1 = i64toi32_i32$5;
      $271$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $271$hi;
      i64toi32_i32$0 = $271_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$34
      }
      HEAP32[($868() | 0) >> 2] = 68;
      $956($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $280_1 = i64toi32_i32$2;
      $280$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $284_1 = i64toi32_i32$1;
      $284$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $280$hi;
      i64toi32_i32$1 = $284$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $959($6_1 + 144 | 0 | 0, $280_1 | 0, i64toi32_i32$2 | 0, $284_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $288_1 = i64toi32_i32$5;
      $288$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $292_1 = i64toi32_i32$0;
      $292$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $288$hi;
      i64toi32_i32$0 = $292$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $959($6_1 + 128 | 0 | 0, $288_1 | 0, i64toi32_i32$5 | 0, $292_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      break label$23;
     }
     label$35 : {
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $302_1 = i64toi32_i32$1;
      $302$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21_1;
      i64toi32_i32$1 = $302$hi;
      i64toi32_i32$5 = $302_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $122_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $123_1 = 0
        } else {
         $123_1 = 1
        }
        $124_1 = $123_1;
       } else {
        $124_1 = 0
       }
       $122_1 = $124_1;
      }
      if ($122_1) {
       break label$35
      }
      label$36 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $949($6_1 + 416 | 0 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $952($18_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $319_1 = i64toi32_i32$0;
        $319$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $319$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $18_1 : $319_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $323_1 = i64toi32_i32$1;
        $323$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $328_1 = i64toi32_i32$5;
        $328$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $328$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $19_1 : $328_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $330_1 = i64toi32_i32$2;
        $330$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $323$hi;
        i64toi32_i32$1 = $330$hi;
        $949($6_1 + 400 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $323_1 | 0, i64toi32_i32$0 | 0, $330_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$2 = $21_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $21_1 = i64toi32_i32$5;
        $21$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      label$38 : {
       label$39 : {
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $348$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$1 = $21_1;
        i64toi32_i32$2 = $348$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $356_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $357_1 = $2_1;
        i64toi32_i32$4 = $2_1;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $360$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $360$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $125_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $126_1 = 0
          } else {
           $126_1 = 1
          }
          $127_1 = $126_1;
         } else {
          $127_1 = 0
         }
         $125_1 = $127_1;
        }
        $7_1 = $125_1 ? $356_1 : $357_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$39
        }
        $956($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$5;
        $16$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $17_1 = 0;
        $17$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $22_1 = 0;
        $22$hi = i64toi32_i32$5;
        break label$38;
       }
       $954($6_1 + 352 | 0 | 0, +(+$971(+(1.0), 144 - $7_1 | 0 | 0)));
       $956($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $384_1 = i64toi32_i32$5;
       $384$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $388_1 = i64toi32_i32$0;
       $388$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$0;
       $16$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $384$hi;
       i64toi32_i32$0 = $388$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$4 = $16$hi;
       $937($6_1 + 368 | 0 | 0, $384_1 | 0, i64toi32_i32$5 | 0, $388_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $22_1 = i64toi32_i32$4;
       $22$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$3;
       $17$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($951($18_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $957($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $422_1 = i64toi32_i32$5;
      $422$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $426_1 = i64toi32_i32$0;
      $426$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $422$hi;
      i64toi32_i32$4 = $426$hi;
      $959($6_1 + 304 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $422_1 | 0, i64toi32_i32$3 | 0, $426_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $430_1 = i64toi32_i32$4;
      $430$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $434_1 = i64toi32_i32$3;
      $434$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $430$hi;
      i64toi32_i32$3 = $434$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $22$hi;
      $949($6_1 + 272 | 0 | 0, $430_1 | 0, i64toi32_i32$4 | 0, $434_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $18_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $441_1 = i64toi32_i32$4;
      $441$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $19_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $444_1 = i64toi32_i32$5;
      $444$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $441$hi;
      i64toi32_i32$5 = $444$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $16$hi;
      $959($6_1 + 288 | 0 | 0, $441_1 | 0, i64toi32_i32$1 | 0, $444_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $456_1 = i64toi32_i32$3;
      $456$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $460_1 = i64toi32_i32$0;
      $460$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $450$hi;
      i64toi32_i32$0 = $454$hi;
      i64toi32_i32$5 = $456$hi;
      i64toi32_i32$1 = $460$hi;
      $949($6_1 + 256 | 0 | 0, $450_1 | 0, i64toi32_i32$3 | 0, $454_1 | 0, i64toi32_i32$0 | 0, $456_1 | 0, i64toi32_i32$5 | 0, $460_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $464_1 = i64toi32_i32$1;
      $464$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $22$hi;
      $961($6_1 + 240 | 0 | 0, $464_1 | 0, i64toi32_i32$1 | 0, $468_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
      label$40 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$0;
       $19$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($951($18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$40
       }
       HEAP32[($868() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      $938($6_1 + 224 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$5;
      break label$23;
     }
     HEAP32[($868() | 0) >> 2] = 68;
     $956($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $498_1 = i64toi32_i32$5;
     $498$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $502_1 = i64toi32_i32$1;
     $502$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $498$hi;
     i64toi32_i32$1 = $502$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $959($6_1 + 192 | 0 | 0, $498_1 | 0, i64toi32_i32$5 | 0, $502_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $506_1 = i64toi32_i32$3;
     $506$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $510_1 = i64toi32_i32$0;
     $510$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $506$hi;
     i64toi32_i32$0 = $510$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $959($6_1 + 176 | 0 | 0, $506_1 | 0, i64toi32_i32$3 | 0, $510_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$5;
     break label$23;
    }
    i64toi32_i32$5 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $954($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $18$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$41 : {
   $15_1 = $6_1 + 432 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
 }
 
 function $942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $21$hi = 0, $12_1 = 0, $21_1 = 0, $22$hi = 0, i64toi32_i32$0 = 0, $11_1 = 0, $22_1 = 0, $8_1 = 0, $15_1 = 0, $14_1 = 0, $24$hi = 0, $23$hi = 0, $16_1 = 0, $24_1 = 0, $23_1 = 0, $13_1 = 0, $17_1 = 0, $25$hi = 0, $26$hi = 0, $27_1 = 0.0, $25_1 = 0, $26_1 = 0, $9_1 = 0, $165_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $18_1 = 0, $20_1 = 0, $19_1 = 0, $10_1 = 0, $133_1 = 0, $238_1 = 0, $238$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $258_1 = 0, $258$hi = 0, $267_1 = 0, $267$hi = 0, $271_1 = 0, $271$hi = 0, $275_1 = 0, $275$hi = 0, $279_1 = 0, $279$hi = 0, $289_1 = 0, $289$hi = 0, $298_1 = 0, $298$hi = 0, $302_1 = 0, $302$hi = 0, $306_1 = 0, $306$hi = 0, $310_1 = 0, $310$hi = 0, $359_1 = 0, $359$hi = 0, $363_1 = 0, $363$hi = 0, $365_1 = 0, $365$hi = 0, $369_1 = 0, $369$hi = 0, $388_1 = 0, $388$hi = 0, $392_1 = 0, $392$hi = 0, $394_1 = 0, $394$hi = 0, $398_1 = 0, $398$hi = 0, $409_1 = 0, $409$hi = 0, $413_1 = 0, $413$hi = 0, $415_1 = 0, $415$hi = 0, $419_1 = 0, $419$hi = 0, $447_1 = 0, $447$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $457_1 = 0, $457$hi = 0, $467_1 = 0, $467$hi = 0, $471_1 = 0, $471$hi = 0, $473_1 = 0, $473$hi = 0, $477_1 = 0, $477$hi = 0, $506_1 = 0, $584$hi = 0, $586$hi = 0, $594_1 = 0, $594$hi = 0, $735_1 = 0, $735$hi = 0, $739_1 = 0, $739$hi = 0, $741_1 = 0, $741$hi = 0, $745_1 = 0, $745$hi = 0, $764_1 = 0, $764$hi = 0, $768_1 = 0, $768$hi = 0, $810_1 = 0, $872_1 = 0, $872$hi = 0, $876_1 = 0, $876$hi = 0, $893_1 = 0, $893$hi = 0, $897_1 = 0, $897$hi = 0, $913_1 = 0, $913$hi = 0, $917_1 = 0, $917$hi = 0, $954_1 = 0, $954$hi = 0, $958_1 = 0, $958$hi = 0, $977_1 = 0, $977$hi = 0, $981_1 = 0, $981$hi = 0, $1004_1 = 0, $1004$hi = 0, $1008_1 = 0, $1008$hi = 0, $1024 = 0, $1024$hi = 0, $1028 = 0, $1028$hi = 0, $1042 = 0, $1042$hi = 0, $1044 = 0, $1044$hi = 0, $1064 = 0, $1064$hi = 0, $1068 = 0, $1068$hi = 0, $1096$hi = 0, $175_1 = 0, $1103$hi = 0, $176_1 = 0;
  label$1 : {
   $7_1 = global$0 - 8960 | 0;
   $19_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $21_1 = 0;
  $21$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$3
       }
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       continue label$6;
      }
      $11_1 = 1;
      $2_1 = $931($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $2_1 = $931($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $21_1 = 0;
   $21$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
      $2_1 = HEAPU8[$12_1 >> 0] | 0;
      break label$10;
     }
     $2_1 = $931($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $13_1 = 0;
  HEAP32[($7_1 + 768 | 0) >> 2] = 0;
  $14_1 = $2_1 + -48 | 0;
  label$12 : {
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        label$18 : {
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          break label$18
         }
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         if ($14_1 >>> 0 <= 9 >>> 0) {
          break label$18
         }
         $12_1 = 0;
         $16_1 = 0;
         break label$17;
        }
        i64toi32_i32$5 = 0;
        $22_1 = 0;
        $22$hi = i64toi32_i32$5;
        $16_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$19 : while (1) {
         label$20 : {
          label$21 : {
           if (!($15_1 & 1 | 0)) {
            break label$21
           }
           label$22 : {
            if ($8_1) {
             break label$22
            }
            i64toi32_i32$5 = $22$hi;
            $21_1 = $22_1;
            $21$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$20;
           }
           $11_1 = ($11_1 | 0) != (0 | 0);
           break label$16;
          }
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$0 = $22_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $22_1 = i64toi32_i32$1;
          $22$hi = i64toi32_i32$4;
          label$23 : {
           if (($12_1 | 0) > (2044 | 0)) {
            break label$23
           }
           $15_1 = ($2_1 | 0) != (48 | 0);
           i64toi32_i32$4 = $22$hi;
           $17_1 = $22_1;
           $11_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
           label$24 : {
            if (!$16_1) {
             break label$24
            }
            $14_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13_1 = $15_1 ? $17_1 : $13_1;
           HEAP32[$11_1 >> 2] = $14_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $133_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $133_1;
           $12_1 = $12_1 + $2_1 | 0;
           break label$20;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$20
          }
          HEAP32[($7_1 + 8944 | 0) >> 2] = HEAP32[($7_1 + 8944 | 0) >> 2] | 0 | 1 | 0;
         }
         label$25 : {
          label$26 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$26
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$25;
          }
          $2_1 = $931($1_1 | 0) | 0;
         }
         $14_1 = $2_1 + -48 | 0;
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          continue label$19
         }
         if ($14_1 >>> 0 < 10 >>> 0) {
          continue label$19
         }
         break label$19;
        };
       }
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $21_1 : $22_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $21_1 = i64toi32_i32$3;
       $21$hi = i64toi32_i32$5;
       label$27 : {
        if (!$11_1) {
         break label$27
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$27
        }
        label$28 : {
         i64toi32_i32$5 = $943($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $23_1 = i64toi32_i32$5;
         $23$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$28
         }
         if (!$6_1) {
          break label$14
         }
         i64toi32_i32$2 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$2;
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$28
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$4 = $23_1;
        i64toi32_i32$3 = $21$hi;
        i64toi32_i32$5 = $21_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $21_1 = i64toi32_i32$0;
        $21$hi = i64toi32_i32$1;
        break label$13;
       }
       $11_1 = ($11_1 | 0) != (0 | 0);
       if (($2_1 | 0) < (0 | 0)) {
        break label$15
       }
      }
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$15
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if ($11_1) {
      break label$13
     }
     HEAP32[($868() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $22_1 = 0;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $21_1 = 0;
    $21$hi = i64toi32_i32$1;
    break label$12;
   }
   label$29 : {
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    if ($1_1) {
     break label$29
    }
    $954($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$30 : {
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$2 = $22_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $165_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $166_1 = 0
      } else {
       $166_1 = 1
      }
      $167_1 = $166_1;
     } else {
      $167_1 = 0
     }
     $165_1 = $167_1;
    }
    if ($165_1) {
     break label$30
    }
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21_1;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$4 = $22_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$30
     }
    }
    $956($7_1 + 48 | 0 | 0, $5_1 | 0);
    $957($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $238_1 = i64toi32_i32$5;
    $238$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$2;
    $242$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$5;
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$2;
    $248$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $238$hi;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$1 = $248$hi;
    $959($7_1 + 16 | 0 | 0, $238_1 | 0, i64toi32_i32$5 | 0, $242_1 | 0, i64toi32_i32$2 | 0, $244_1 | 0, i64toi32_i32$4 | 0, $248_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$32 : {
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = ($4_1 | 0) / (-2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $258_1 = i64toi32_i32$4;
    $258$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$4 = $258$hi;
    i64toi32_i32$5 = $258_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$32
    }
    HEAP32[($868() | 0) >> 2] = 68;
    $956($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $267_1 = i64toi32_i32$2;
    $267$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $271_1 = i64toi32_i32$1;
    $271$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $267$hi;
    i64toi32_i32$1 = $271$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $959($7_1 + 80 | 0 | 0, $267_1 | 0, i64toi32_i32$2 | 0, $271_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
    $275_1 = i64toi32_i32$4;
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $279_1 = i64toi32_i32$5;
    $279$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $275$hi;
    i64toi32_i32$5 = $279$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $959($7_1 + 64 | 0 | 0, $275_1 | 0, i64toi32_i32$4 | 0, $279_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$2;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$2;
    break label$12;
   }
   label$33 : {
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $289_1 = i64toi32_i32$1;
    $289$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21_1;
    i64toi32_i32$1 = $289$hi;
    i64toi32_i32$4 = $289_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$33
    }
    HEAP32[($868() | 0) >> 2] = 68;
    $956($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $298_1 = i64toi32_i32$5;
    $298$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $302_1 = i64toi32_i32$2;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $298$hi;
    i64toi32_i32$2 = $302$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $959($7_1 + 128 | 0 | 0, $298_1 | 0, i64toi32_i32$5 | 0, $302_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $306_1 = i64toi32_i32$1;
    $306$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $310_1 = i64toi32_i32$4;
    $310$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $306$hi;
    i64toi32_i32$4 = $310$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $959($7_1 + 112 | 0 | 0, $306_1 | 0, i64toi32_i32$1 | 0, $310_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$2;
    $22$hi = i64toi32_i32$5;
    break label$12;
   }
   label$34 : {
    if (!$16_1) {
     break label$34
    }
    label$35 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$35
     }
     $2_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$36 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $12_1 = $12_1 + 1 | 0;
   }
   i64toi32_i32$5 = $21$hi;
   $8_1 = $21_1;
   label$37 : {
    if (($13_1 | 0) > (8 | 0)) {
     break label$37
    }
    if (($13_1 | 0) > ($8_1 | 0)) {
     break label$37
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$38
     }
     $956($7_1 + 192 | 0 | 0, $5_1 | 0);
     $957($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $359_1 = i64toi32_i32$5;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$2;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $365_1 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $369_1 = i64toi32_i32$2;
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$1 = $369$hi;
     $959($7_1 + 160 | 0 | 0, $359_1 | 0, i64toi32_i32$5 | 0, $363_1 | 0, i64toi32_i32$2 | 0, $365_1 | 0, i64toi32_i32$4 | 0, $369_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    label$39 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$39
     }
     $956($7_1 + 272 | 0 | 0, $5_1 | 0);
     $957($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $388_1 = i64toi32_i32$1;
     $388$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $392_1 = i64toi32_i32$4;
     $392$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $394_1 = i64toi32_i32$1;
     $394$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $398_1 = i64toi32_i32$4;
     $398$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $388$hi;
     i64toi32_i32$4 = $392$hi;
     i64toi32_i32$2 = $394$hi;
     i64toi32_i32$5 = $398$hi;
     $959($7_1 + 240 | 0 | 0, $388_1 | 0, i64toi32_i32$1 | 0, $392_1 | 0, i64toi32_i32$4 | 0, $394_1 | 0, i64toi32_i32$2 | 0, $398_1 | 0, i64toi32_i32$5 | 0);
     $956($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 61472 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $409_1 = i64toi32_i32$5;
     $409$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $413_1 = i64toi32_i32$2;
     $413$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $415_1 = i64toi32_i32$5;
     $415$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $419_1 = i64toi32_i32$2;
     $419$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $409$hi;
     i64toi32_i32$2 = $413$hi;
     i64toi32_i32$4 = $415$hi;
     i64toi32_i32$1 = $419$hi;
     $953($7_1 + 208 | 0 | 0, $409_1 | 0, i64toi32_i32$5 | 0, $413_1 | 0, i64toi32_i32$2 | 0, $415_1 | 0, i64toi32_i32$4 | 0, $419_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    label$40 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$37
     }
    }
    $956($7_1 + 352 | 0 | 0, $5_1 | 0);
    $957($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $447_1 = i64toi32_i32$1;
    $447$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $451_1 = i64toi32_i32$4;
    $451$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $453_1 = i64toi32_i32$1;
    $453$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $457_1 = i64toi32_i32$4;
    $457$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $447$hi;
    i64toi32_i32$4 = $451$hi;
    i64toi32_i32$2 = $453$hi;
    i64toi32_i32$5 = $457$hi;
    $959($7_1 + 320 | 0 | 0, $447_1 | 0, i64toi32_i32$1 | 0, $451_1 | 0, i64toi32_i32$4 | 0, $453_1 | 0, i64toi32_i32$2 | 0, $457_1 | 0, i64toi32_i32$5 | 0);
    $956($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 61432 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $467_1 = i64toi32_i32$5;
    $467$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$2;
    $471$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $473_1 = i64toi32_i32$5;
    $473$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $477_1 = i64toi32_i32$2;
    $477$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $467$hi;
    i64toi32_i32$2 = $471$hi;
    i64toi32_i32$4 = $473$hi;
    i64toi32_i32$1 = $477$hi;
    $959($7_1 + 288 | 0 | 0, $467_1 | 0, i64toi32_i32$5 | 0, $471_1 | 0, i64toi32_i32$2 | 0, $473_1 | 0, i64toi32_i32$4 | 0, $477_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $2_1 = 0;
     break label$41;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($12_1) {
       break label$44
      }
      $2_1 = 0;
      $12_1 = 0;
      break label$43;
     }
     $15_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 61472 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($15_1 | 0) | 0;
     $11_1 = 0;
     $1_1 = 0;
     $2_1 = 0;
     label$45 : while (1) {
      $14_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
      $506_1 = $14_1;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      $13_1 = ($14_1 >>> 0) / ($15_1 >>> 0) | 0;
      $11_1 = $13_1 + $11_1 | 0;
      HEAP32[$506_1 >> 2] = $11_1;
      $11_1 = ($1_1 | 0) == ($2_1 | 0) & !$11_1 | 0;
      $2_1 = $11_1 ? ($2_1 + 1 | 0) & 2047 | 0 : $2_1;
      $8_1 = $11_1 ? $8_1 + -9 | 0 : $8_1;
      $11_1 = Math_imul($17_1, $14_1 - Math_imul($13_1, $15_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($12_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$11_1) {
      break label$43
     }
     HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $11_1;
     $12_1 = $12_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $13_1 = ($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$13_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $14_1 = $12_1 + 2047 | 0;
      $11_1 = 0;
      $15_1 = $12_1;
      label$50 : while (1) {
       $12_1 = $15_1;
       label$51 : {
        label$52 : {
         $1_1 = $14_1 & 2047 | 0;
         $15_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $15_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $174_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $174_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $584$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $586$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $584$hi;
         i64toi32_i32$4 = $174_1;
         i64toi32_i32$2 = $586$hi;
         i64toi32_i32$5 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $21_1 = i64toi32_i32$3;
         $21$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $11_1 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $22_1 = i64toi32_i32$0;
        $22$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $594_1 = i64toi32_i32$0;
        $594$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$5 = $21_1;
        i64toi32_i32$0 = $594$hi;
        i64toi32_i32$4 = $594_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $21_1 = i64toi32_i32$2;
        $21$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $22$hi;
        $11_1 = $22_1;
       }
       i64toi32_i32$3 = $21$hi;
       $14_1 = $21_1;
       HEAP32[$15_1 >> 2] = $21_1;
       $15_1 = ($1_1 | 0) != (($12_1 + -1 | 0) & 2047 | 0 | 0) ? $12_1 : ($1_1 | 0) == ($2_1 | 0) ? $12_1 : $21_1 ? $12_1 : $1_1;
       $14_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$11_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $2_1 = ($2_1 + -1 | 0) & 2047 | 0;
      if (($2_1 | 0) != ($15_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 768 | 0) + ((($15_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $12_1 = ($15_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6_1 = ($12_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 768 | 0) + ((($12_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $14_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $15_1 = $2_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $2_1 = ($1_1 + $15_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($12_1 | 0)) {
            break label$60
           }
           $2_1 = HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $11_1 = HEAP32[(($1_1 << 2 | 0) + 61456 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $11_1 >>> 0) {
            break label$60
           }
           if ($2_1 >>> 0 > $11_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $2_1 = ($1_1 + $15_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($12_1 | 0)) {
            break label$63
           }
           $12_1 = ($12_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($12_1 << 2 | 0) + ($7_1 + 768 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$3 = $22$hi;
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $959($7_1 + 752 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $957($7_1 + 736 | 0 | 0, HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $735_1 = i64toi32_i32$4;
          $735$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $739_1 = i64toi32_i32$1;
          $739$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $741_1 = i64toi32_i32$4;
          $741$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $745_1 = i64toi32_i32$1;
          $745$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $735$hi;
          i64toi32_i32$1 = $739$hi;
          i64toi32_i32$5 = $741$hi;
          i64toi32_i32$3 = $745$hi;
          $949($7_1 + 720 | 0 | 0, $735_1 | 0, i64toi32_i32$4 | 0, $739_1 | 0, i64toi32_i32$1 | 0, $741_1 | 0, i64toi32_i32$5 | 0, $745_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $22_1 = i64toi32_i32$3;
          $22$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $956($7_1 + 704 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$3 = $22$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $764_1 = i64toi32_i32$3;
         $764$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $768_1 = i64toi32_i32$5;
         $768$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$5 = $22$hi;
         i64toi32_i32$1 = $764$hi;
         i64toi32_i32$4 = $768$hi;
         $959($7_1 + 688 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $764_1 | 0, i64toi32_i32$1 | 0, $768_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 688 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$4;
         $22$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
         $23_1 = i64toi32_i32$1;
         $23$hi = i64toi32_i32$4;
         $11_1 = $16_1 + 113 | 0;
         $1_1 = $11_1 - $4_1 | 0;
         $14_1 = ($1_1 | 0) < ($3_1 | 0);
         $2_1 = $14_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($2_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $25_1 = 0;
         $25$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $26_1 = 0;
         $26$hi = i64toi32_i32$4;
         break label$54;
        }
        $16_1 = $14_1 + $16_1 | 0;
        $2_1 = $12_1;
        if (($15_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $13_1 = 1e9 >>> $14_1 | 0;
       $17_1 = (-1 << $14_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $2_1 = $15_1;
       label$64 : while (1) {
        $11_1 = ($7_1 + 768 | 0) + ($15_1 << 2 | 0) | 0;
        $810_1 = $11_1;
        $11_1 = HEAP32[$11_1 >> 2] | 0;
        $1_1 = ($11_1 >>> $14_1 | 0) + $1_1 | 0;
        HEAP32[$810_1 >> 2] = $1_1;
        $1_1 = ($15_1 | 0) == ($2_1 | 0) & !$1_1 | 0;
        $2_1 = $1_1 ? ($2_1 + 1 | 0) & 2047 | 0 : $2_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($11_1 & $17_1 | 0, $13_1);
        $15_1 = ($15_1 + 1 | 0) & 2047 | 0;
        if (($15_1 | 0) != ($12_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $1_1;
        $12_1 = $6_1;
        continue label$55;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $2_1 = $6_1;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $954($7_1 + 640 | 0 | 0, +(+$971(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $872_1 = i64toi32_i32$4;
    $872$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $876_1 = i64toi32_i32$1;
    $876$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $872$hi;
    i64toi32_i32$1 = $876$hi;
    i64toi32_i32$5 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    $937($7_1 + 672 | 0 | 0, $872_1 | 0, i64toi32_i32$4 | 0, $876_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $26_1 = i64toi32_i32$3;
    $26$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$5;
    $25$hi = i64toi32_i32$3;
    $954($7_1 + 624 | 0 | 0, +(+$971(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $893_1 = i64toi32_i32$3;
    $893$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $897_1 = i64toi32_i32$5;
    $897$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = $893$hi;
    i64toi32_i32$4 = $897$hi;
    $970($7_1 + 656 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $893_1 | 0, i64toi32_i32$1 | 0, $897_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 668 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $24$hi;
    $961($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$3 = $26$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $913_1 = i64toi32_i32$3;
    $913$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $917_1 = i64toi32_i32$5;
    $917$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$5 = $26$hi;
    i64toi32_i32$1 = $913$hi;
    i64toi32_i32$4 = $917$hi;
    $949($7_1 + 592 | 0 | 0, $25_1 | 0, i64toi32_i32$3 | 0, $26_1 | 0, i64toi32_i32$5 | 0, $913_1 | 0, i64toi32_i32$1 | 0, $917_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 592 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$4;
   }
   label$66 : {
    $8_1 = ($15_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($12_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 768 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($15_1 + 5 | 0) & 2047 | 0 | 0) == ($12_1 | 0)) {
        break label$67
       }
      }
      $954($7_1 + 480 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $954_1 = i64toi32_i32$4;
      $954$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $958_1 = i64toi32_i32$1;
      $958$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $954$hi;
      i64toi32_i32$3 = $958$hi;
      $949($7_1 + 464 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, $954_1 | 0, i64toi32_i32$5 | 0, $958_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 464 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $954($7_1 + 576 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $24$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $977_1 = i64toi32_i32$3;
      $977$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $981_1 = i64toi32_i32$5;
      $981$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$1 = $977$hi;
      i64toi32_i32$4 = $981$hi;
      $949($7_1 + 560 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $977_1 | 0, i64toi32_i32$1 | 0, $981_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 560 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$4;
      $24$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      break label$67;
     }
     $27_1 = +($5_1 | 0);
     label$71 : {
      if ((($15_1 + 5 | 0) & 2047 | 0 | 0) != ($12_1 | 0)) {
       break label$71
      }
      $954($7_1 + 512 | 0 | 0, +($27_1 * .5));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $1004_1 = i64toi32_i32$4;
      $1004$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1008_1 = i64toi32_i32$1;
      $1008$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $1004$hi;
      i64toi32_i32$3 = $1008$hi;
      $949($7_1 + 496 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, $1004_1 | 0, i64toi32_i32$5 | 0, $1008_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     $954($7_1 + 544 | 0 | 0, +($27_1 * .75));
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $1024 = i64toi32_i32$3;
     $1024$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1028 = i64toi32_i32$5;
     $1028$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$1 = $1024$hi;
     i64toi32_i32$4 = $1028$hi;
     $949($7_1 + 528 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $1024 | 0, i64toi32_i32$1 | 0, $1028 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$4;
     $24$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
    }
    if (($2_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $970($7_1 + 448 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $1042 = i64toi32_i32$3;
    $1042$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
    $1044 = i64toi32_i32$5;
    $1044$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1042$hi;
    i64toi32_i32$5 = $1044$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($951($1042 | 0, i64toi32_i32$3 | 0, $1044 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $949($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 440 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $24$hi;
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$4 = $24$hi;
   $949($7_1 + 416 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $24_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $1064 = i64toi32_i32$4;
   $1064$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1068 = i64toi32_i32$1;
   $1068$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$4 = $26$hi;
   i64toi32_i32$4 = $1064$hi;
   i64toi32_i32$1 = $1068$hi;
   i64toi32_i32$5 = $25$hi;
   i64toi32_i32$3 = $26$hi;
   $961($7_1 + 400 | 0 | 0, $1064 | 0, i64toi32_i32$4 | 0, $1068 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$5 | 0, $26_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 400 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$3;
   $22$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$3;
   label$72 : {
    if (($11_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $959($7_1 + 384 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    $11_1 = $951($21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    $27_1 = +$939(+(+$962($23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0)));
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1096$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    $12_1 = $27_1 >= 1038459371706965525706099.0e10;
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$3 = $1096$hi;
    $175_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$4 = $12_1 ? $175_1 : $22_1;
    i64toi32_i32$1 = $12_1 ? i64toi32_i32$3 : i64toi32_i32$5;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1103$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$4 = $1103$hi;
    $176_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $176_1 : $23_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$0;
    $16_1 = $16_1 + i64toi32_i32$5 | 0;
    label$73 : {
     if (($11_1 | 0) != (0 | 0) & ($14_1 & (i64toi32_i32$5 ^ 1 | 0 | ($2_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$72
     }
    }
    HEAP32[($868() | 0) >> 2] = 68;
   }
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   $938($7_1 + 368 | 0 | 0, $23_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$3;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $22$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $21$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$74 : {
   $20_1 = $7_1 + 8960 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $931($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $931($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $931($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $931($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $931($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $944($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $42_1 = 0, $42$hi = 0, $48_1 = 0, $48$hi = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $974($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $930($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $940($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $38_1 = $2_1;
   $39_1 = $1_1;
   $40_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $48_1 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$2 = $42_1;
   i64toi32_i32$0 = $48$hi;
   i64toi32_i32$3 = $48_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$38_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $39_1 : $40_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$4 : {
   $6_1 = $4_1 + 160 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $17_1 = 0, $17$hi = 0, $19_1 = 0, $19$hi = 0, $5_1 = 0.0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $944($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$1 = $19$hi;
  $5_1 = +$962($17_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return +$5_1;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $948($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($868() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $949($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $12$hi = 0, $13$hi = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$6 = 0, $14$hi = 0, $8_1 = 0, $125_1 = 0, $126_1 = 0, $128_1 = 0, $129_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $14_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $10_1 = 0, $9_1 = 0, $27_1 = 0, $33_1 = 0, $34$hi = 0, $38_1 = 0, $45_1 = 0, $49_1 = 0, $50$hi = 0, $54_1 = 0, $59_1 = 0, $61_1 = 0, $69_1 = 0, $71_1 = 0, $79_1 = 0, $79$hi = 0, $85_1 = 0, $85$hi = 0, $89_1 = 0, $89$hi = 0, $99_1 = 0, $99$hi = 0, $127_1 = 0, $130_1 = 0, $157_1 = 0, $158_1 = 0, $158$hi = 0, $159_1 = 0, $159$hi = 0, $166$hi = 0, $169$hi = 0, $189_1 = 0, $190_1 = 0, $190$hi = 0, $191_1 = 0, $191$hi = 0, $198$hi = 0, $201$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $220_1 = 0, $220$hi = 0, $222$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $250$hi = 0, $254_1 = 0, $254$hi = 0, $256_1 = 0, $257$hi = 0, $275$hi = 0, $278_1 = 0, $279$hi = 0, $288_1 = 0, $289_1 = 0, $289$hi = 0, $290_1 = 0, $290$hi = 0, $297$hi = 0, $300$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $322$hi = 0, $328_1 = 0, $328$hi = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $333_1 = 0, $333$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $368_1 = 0, $369$hi = 0, $376$hi = 0, $378_1 = 0, $378$hi = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $394$hi = 0, $398_1 = 0, $399$hi = 0, $400_1 = 0, $400$hi = 0, $148_1 = 0, $411_1 = 0, $412$hi = 0;
  label$1 : {
   $5_1 = global$0 - 112 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $11_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12_1 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $27_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $13_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $33_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $34$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$5 = $34$hi;
     i64toi32_i32$3 = $33_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $12_1 = i64toi32_i32$5;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $38_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $27_1 : $38_1) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $45_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $49_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $50$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$3 = $50$hi;
     i64toi32_i32$5 = $49_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $54_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $45_1 : $54_1) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$5 = $1$hi;
     $59_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $61_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $59_1 : $61_1) {
      break label$6
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $69_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $71_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $69_1 : $71_1) {
      break label$7
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $79_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $79$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $85_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $85$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $89_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $89$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $85$hi;
     i64toi32_i32$2 = $85_1;
     i64toi32_i32$5 = $89$hi;
     i64toi32_i32$4 = $89_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $99_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $99$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $99$hi;
    i64toi32_i32$0 = $99_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$3
    }
    label$9 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $127_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$1 = $13_1;
   $130_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $13_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $127_1 : $130_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $11_1 = i64toi32_i32$5;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $125_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $125_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $125_1 & 32767 | 0;
   label$10 : {
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $126_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $126_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $126_1 & 32767 | 0;
    if ($6_1) {
     break label$10
    }
    $157_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $11$hi;
    $158_1 = $11_1;
    $158$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $159_1 = $12_1;
    $159$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $12$hi;
    $6_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $11_1 : $12_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $128_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $128_1 = i64toi32_i32$5
    }
    $166$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $169$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $166$hi;
    i64toi32_i32$1 = $128_1;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $158$hi;
    i64toi32_i32$1 = $159$hi;
    $950($157_1 | 0, $158_1 | 0, i64toi32_i32$3 | 0, $159_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$3;
    $11$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   label$11 : {
    if ($8_1) {
     break label$11
    }
    $189_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $190_1 = $3_1;
    $190$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $191_1 = $1_1;
    $191$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $1_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $129_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $129_1 = i64toi32_i32$5
    }
    $198$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $201$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $198$hi;
    i64toi32_i32$1 = $129_1;
    i64toi32_i32$0 = $201$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $190$hi;
    i64toi32_i32$1 = $191$hi;
    $950($189_1 | 0, $190_1 | 0, i64toi32_i32$4 | 0, $191_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $131_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $131_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $214_1 = $131_1;
   $214$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $132_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $132_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $214$hi;
   i64toi32_i32$4 = $214_1;
   i64toi32_i32$1 = $216$hi;
   i64toi32_i32$5 = $132_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $133_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $133_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $220_1 = $133_1;
   $220$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $134_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $134_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $222$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $220$hi;
   i64toi32_i32$3 = $220_1;
   i64toi32_i32$4 = $222$hi;
   i64toi32_i32$5 = $134_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $135_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $135_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $135_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$1;
   label$12 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$12
    }
    label$13 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$13
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$12;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $950($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $958($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $250_1 = i64toi32_i32$4;
    $250$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $254_1 = i64toi32_i32$1;
    $254$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $250$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = $254$hi;
    i64toi32_i32$5 = $254_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $256_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $257$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = $257$hi;
    i64toi32_i32$3 = $256_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $14_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $136_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $136_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $136_1;
   $2$hi = i64toi32_i32$4;
   label$14 : {
    label$15 : {
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $137_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $138_1 = 0
       } else {
        $138_1 = 1
       }
       $139_1 = $138_1;
      } else {
       $139_1 = 0
      }
      $137_1 = $139_1;
     }
     if ($137_1) {
      break label$15
     }
     label$16 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $275$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $278_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $275$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$1 = $278_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $3_1 = i64toi32_i32$3;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$16
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$3;
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $288_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $289_1 = $1_1;
     $289$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $290_1 = $3_1;
     $290$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     $7_1 = !($3_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $3_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $140_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $140_1 = i64toi32_i32$4
     }
     $297$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $300$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $297$hi;
     i64toi32_i32$2 = $140_1;
     i64toi32_i32$1 = $300$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $289$hi;
     i64toi32_i32$2 = $290$hi;
     $950($288_1 | 0, $289_1 | 0, i64toi32_i32$3 | 0, $290_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$14;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$4 = $14_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $315_1 = i64toi32_i32$1;
    $315$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $315$hi;
    i64toi32_i32$4 = $315_1;
    i64toi32_i32$1 = $322$hi;
    i64toi32_i32$2 = $321_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $141_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $141_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $328_1 = $141_1;
    $328$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $142_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $142_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $330$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $328$hi;
    i64toi32_i32$5 = $328_1;
    i64toi32_i32$4 = $330$hi;
    i64toi32_i32$2 = $142_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $331_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $331$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $333_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $333$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $331$hi;
    i64toi32_i32$4 = $331_1;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$2 = $333_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $143_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $143_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $3_1 = $143_1;
    $3$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$3 = $13_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$17 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$3;
   }
   $7_1 = 0;
   label$18 : {
    label$19 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$19
     }
     $7_1 = $6_1;
     break label$18;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $3$hi;
    $950($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $958($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $3_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $362_1 = i64toi32_i32$4;
    $362$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $366_1 = i64toi32_i32$3;
    $366$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $362$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = $366$hi;
    i64toi32_i32$2 = $366_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $368_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $369$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = $369$hi;
    i64toi32_i32$5 = $368_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $144_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $144_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $144_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $376$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $376$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $378_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $145_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $381$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$2 = $378_1;
   i64toi32_i32$4 = $381$hi;
   i64toi32_i32$5 = $145_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $382_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $382$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $146_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $384_1 = $146_1;
   $384$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $147_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $386$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $384$hi;
   i64toi32_i32$2 = $384_1;
   i64toi32_i32$4 = $386$hi;
   i64toi32_i32$5 = $147_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   i64toi32_i32$4 = 0;
   $394$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $394$hi;
   i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   $398_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $399$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $382$hi;
   i64toi32_i32$5 = $382_1;
   i64toi32_i32$0 = $399$hi;
   i64toi32_i32$3 = $398_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $400_1 = i64toi32_i32$2;
   $400$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = ($6_1 | 0) == (4 | 0);
   $148_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ? $148_1 : 0;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $411_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $412$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $400$hi;
   i64toi32_i32$5 = $400_1;
   i64toi32_i32$2 = $412$hi;
   i64toi32_i32$0 = $411_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
  label$20 : {
   $10_1 = $5_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $950($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $951($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $952($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $953($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $20$hi = 0, $16$hi = 0, $18$hi = 0, $20_1 = 0, $21$hi = 0, $5_1 = 0, $16_1 = 0, i64toi32_i32$6 = 0, $22$hi = 0, $19$hi = 0, $18_1 = 0, $14$hi = 0, $21_1 = 0, $22_1 = 0, $14_1 = 0, $19_1 = 0, $15$hi = 0, $23$hi = 0, $15_1 = 0, $23_1 = 0, $13$hi = 0, $13_1 = 0, $8_1 = 0, $6_1 = 0, $17_1 = 0, $17$hi = 0, $7_1 = 0, $24$hi = 0, $9_1 = 0, $472_1 = 0, $473_1 = 0, $474_1 = 0, $476_1 = 0, $477_1 = 0, $478_1 = 0, $482_1 = 0, $483_1 = 0, $485_1 = 0, $486_1 = 0, $487_1 = 0, $488_1 = 0, $489_1 = 0, $491_1 = 0, $492_1 = 0, $493_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $506_1 = 0, $508_1 = 0, $509_1 = 0, $510_1 = 0, $512_1 = 0, $514_1 = 0, $515_1 = 0, $519_1 = 0, $520_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $525_1 = 0, $528_1 = 0, $529_1 = 0, $530_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $24_1 = 0, $534_1 = 0, $535_1 = 0, $537_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $544_1 = 0, $545_1 = 0, $546_1 = 0, $547_1 = 0, $549_1 = 0, $550_1 = 0, $551_1 = 0, $553_1 = 0, $554_1 = 0, $555_1 = 0, $556_1 = 0, $557_1 = 0, $559_1 = 0, $562_1 = 0, $563_1 = 0, $564_1 = 0, $565_1 = 0, $566_1 = 0, $567_1 = 0, $569_1 = 0, $570_1 = 0, $571_1 = 0, $572_1 = 0, $574_1 = 0, $575_1 = 0, $576_1 = 0, $577_1 = 0, $579_1 = 0, $11_1 = 0, $12_1 = 0, $10_1 = 0, $55_1 = 0, $59_1 = 0, $66_1 = 0, $70_1 = 0, $79_1 = 0, $79$hi = 0, $84_1 = 0, $84$hi = 0, $92_1 = 0, $92$hi = 0, $108_1 = 0, $109_1 = 0, $109$hi = 0, $110_1 = 0, $110$hi = 0, $117$hi = 0, $120$hi = 0, $135_1 = 0, $136_1 = 0, $136$hi = 0, $137_1 = 0, $137$hi = 0, $144$hi = 0, $147$hi = 0, $162_1 = 0, $164_1 = 0, $164$hi = 0, $168$hi = 0, $179_1 = 0, $179$hi = 0, $180$hi = 0, $183_1 = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $201_1 = 0, $201$hi = 0, $202$hi = 0, $204_1 = 0, $207_1 = 0, $207$hi = 0, $212$hi = 0, $222_1 = 0, $222$hi = 0, $223$hi = 0, $225_1 = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0, $243_1 = 0, $243$hi = 0, $244$hi = 0, $246_1 = 0, $249_1 = 0, $249$hi = 0, $254$hi = 0, $263_1 = 0, $263$hi = 0, $264$hi = 0, $272_1 = 0, $272$hi = 0, $276$hi = 0, $281_1 = 0, $281$hi = 0, $286_1 = 0, $286$hi = 0, $293_1 = 0, $293$hi = 0, $300_1 = 0, $300$hi = 0, $305_1 = 0, $305$hi = 0, $307_1 = 0, $307$hi = 0, $310_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $316_1 = 0, $316$hi = 0, $317$hi = 0, $318_1 = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $326_1 = 0, $326$hi = 0, $327_1 = 0, $327$hi = 0, $332_1 = 0, $332$hi = 0, $339_1 = 0, $339$hi = 0, $340$hi = 0, $342_1 = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $348_1 = 0, $350$hi = 0, $351_1 = 0, $351$hi = 0, $354_1 = 0, $354$hi = 0, $355$hi = 0, $356$hi = 0, $360_1 = 0, $361$hi = 0, $362$hi = 0, $364_1 = 0, $365$hi = 0, $366$hi = 0, $373_1 = 0, $373$hi = 0, $377_1 = 0, $377$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $385$hi = 0, $390_1 = 0, $390$hi = 0, $392_1 = 0, $392$hi = 0, $395_1 = 0, $397$hi = 0, $398_1 = 0, $398$hi = 0, $401_1 = 0, $401$hi = 0, $402$hi = 0, $403_1 = 0, $403$hi = 0, $404_1 = 0, $404$hi = 0, $417_1 = 0, $417$hi = 0, $424_1 = 0, $424$hi = 0, $425$hi = 0, $427_1 = 0, $428_1 = 0, $428$hi = 0, $430_1 = 0, $430$hi = 0, $433_1 = 0, $435$hi = 0, $436_1 = 0, $436$hi = 0, $439_1 = 0, $439$hi = 0, $440$hi = 0, $441$hi = 0, $445_1 = 0, $446$hi = 0, $447_1 = 0, $447$hi = 0, $452_1 = 0, $453$hi = 0, $458_1 = 0, $458$hi = 0, $460_1 = 0, $460$hi = 0, $462$hi = 0, $467_1 = 0, $467$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $480_1 = 0, $480$hi = 0, $481_1 = 0, $481$hi = 0, $484_1 = 0, $484$hi = 0, $490_1 = 0, $490$hi = 0, $494_1 = 0, $495$hi = 0, $496$hi = 0, $499_1 = 0, $499$hi = 0, $500_1 = 0, $500$hi = 0, $507_1 = 0, $507$hi = 0, $511_1 = 0, $513_1 = 0, $513$hi = 0, $515$hi = 0, $516_1 = 0, $516$hi = 0, $517_1 = 0, $517$hi = 0, $518_1 = 0, $518$hi = 0, $520$hi = 0, $524_1 = 0, $525$hi = 0, $526_1 = 0, $526$hi = 0, $527_1 = 0, $527$hi = 0, $536_1 = 0, $536$hi = 0, $541_1 = 0, $541$hi = 0, $542_1 = 0, $542$hi = 0, $543_1 = 0, $543$hi = 0, $548_1 = 0, $548$hi = 0, $552_1 = 0, $553$hi = 0, $554$hi = 0, $558_1 = 0, $559$hi = 0, $560_1 = 0, $560$hi = 0, $561_1 = 0, $561$hi = 0, $568_1 = 0, $568$hi = 0, $573_1 = 0, $573$hi = 0, $578_1 = 0, $578$hi = 0, $581_1 = 0, $581$hi = 0, $584_1 = 0, $585$hi = 0, $588_1 = 0, $589$hi = 0, $590$hi = 0, $593_1 = 0, $594$hi = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $601_1 = 0, $602$hi = 0, $603_1 = 0, $603$hi = 0, $604_1 = 0, $604$hi = 0, $605_1 = 0, $605$hi = 0, $612_1 = 0, $612$hi = 0, $615_1 = 0, $615$hi = 0, $618_1 = 0, $620$hi = 0, $621_1 = 0, $621$hi = 0, $625_1 = 0, $626_1 = 0, $626$hi = 0, $627_1 = 0, $627$hi = 0, $629$hi = 0, $630$hi = 0, $632_1 = 0, $633$hi = 0, $634$hi = 0, $638_1 = 0, $639$hi = 0, $644$hi = 0, $653_1 = 0, $654$hi = 0, $655_1 = 0, $655$hi = 0, $658_1 = 0, $658$hi = 0, $664_1 = 0, $664$hi = 0, $665_1 = 0, $665$hi = 0, $669_1 = 0, $669$hi = 0, $674_1 = 0, $675$hi = 0, $676_1 = 0, $676$hi = 0, $678$hi = 0, $580_1 = 0, $680_1 = 0, $680$hi = 0, $683_1 = 0, $683$hi = 0, $684_1 = 0, $684$hi = 0, $685$hi = 0, $688_1 = 0, $688$hi = 0, $689_1 = 0, $689$hi = 0, $691_1 = 0, $691$hi = 0, $694_1 = 0, $696$hi = 0, $697_1 = 0, $697$hi = 0, $698_1 = 0, $698$hi = 0, $699_1 = 0, $699$hi = 0, $701$hi = 0, $702_1 = 0, $702$hi = 0, $703_1 = 0, $703$hi = 0, $705$hi = 0, $706_1 = 0, $706$hi = 0, $707$hi = 0, $710_1 = 0, $710$hi = 0, $711$hi = 0, $714_1 = 0, $714$hi = 0, $716$hi = 0, $717$hi = 0, $727_1 = 0, $727$hi = 0, $729_1 = 0, $729$hi = 0, $731$hi = 0, $741_1 = 0, $742$hi = 0, $743_1 = 0, $743$hi = 0, $746_1 = 0, $746$hi = 0, $747_1 = 0, $747$hi = 0, $752_1 = 0, $752$hi = 0, $753_1 = 0, $753$hi = 0, $755$hi = 0, $761_1 = 0, $761$hi = 0, $766_1 = 0, $767$hi = 0, $768_1 = 0, $768$hi = 0, $771_1 = 0, $771$hi = 0, $775$hi = 0, $582_1 = 0, $777_1 = 0, $777$hi = 0, $778$hi = 0, $781_1 = 0, $781$hi = 0, $782_1 = 0, $782$hi = 0, $783_1 = 0, $783$hi = 0, $785_1 = 0, $785$hi = 0, $788_1 = 0, $790$hi = 0, $791_1 = 0, $791$hi = 0, $792_1 = 0, $792$hi = 0, $793_1 = 0, $793$hi = 0, $795$hi = 0, $796_1 = 0, $796$hi = 0, $797_1 = 0, $797$hi = 0, $799$hi = 0, $800_1 = 0, $800$hi = 0, $801$hi = 0, $804_1 = 0, $804$hi = 0, $805$hi = 0, $808_1 = 0, $808$hi = 0, $810$hi = 0, $811$hi = 0, $827_1 = 0, $827$hi = 0, $828_1 = 0, $828$hi = 0, $830$hi = 0, $832_1 = 0, $834_1 = 0, $834$hi = 0, $836$hi = 0, $840_1 = 0, $844_1 = 0, $845$hi = 0, $849_1 = 0, $850$hi = 0, $860$hi = 0, $862_1 = 0, $862$hi = 0, $863_1 = 0, $863$hi = 0, $864_1 = 0, $864$hi = 0, $866$hi = 0, $868_1 = 0, $870_1 = 0, $870$hi = 0, $872$hi = 0, $876_1 = 0, $880_1 = 0, $881$hi = 0, $885_1 = 0, $886$hi = 0, $887$hi = 0, $907_1 = 0;
  label$1 : {
   $5_1 = global$0 - 192 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $472_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $472_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $472_1 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $473_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $473_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $473_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$6
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$5
      }
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      $55_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $16_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $59_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $16_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $55_1 : $59_1) {
       break label$7
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $15_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $15$hi = i64toi32_i32$0;
      break label$4;
     }
     label$8 : {
      i64toi32_i32$0 = $3$hi;
      $66_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $70_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $66_1 : $70_1) {
       break label$8
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$4;
     }
     label$9 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $79_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $79$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $79$hi;
      i64toi32_i32$2 = $79_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$9
      }
      label$10 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $84_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $84$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $84$hi;
       i64toi32_i32$0 = $84_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$10
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $15_1 = 0;
       $15$hi = i64toi32_i32$2;
       break label$4;
      }
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$4;
     }
     label$11 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $92_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $92$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $92$hi;
      i64toi32_i32$0 = $92_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$11
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     label$12 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$12
      }
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $15_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$4;
     }
     $8_1 = 0;
     label$13 : {
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      $108_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $109_1 = $1_1;
      $109$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      $110_1 = $14_1;
      $110$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $14$hi;
      $8_1 = !($14_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $14_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $474_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $474_1 = i64toi32_i32$1
      }
      $117$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $120$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $117$hi;
      i64toi32_i32$0 = $474_1;
      i64toi32_i32$3 = $120$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $109$hi;
      i64toi32_i32$0 = $110$hi;
      $950($108_1 | 0, $109_1 | 0, i64toi32_i32$5 | 0, $110_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     $135_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $136_1 = $3_1;
     $136$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     $137_1 = $13_1;
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $13$hi;
     $9_1 = !($13_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $13_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$4
     }
     $144$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $147$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $144$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$1 = $147$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $136$hi;
     i64toi32_i32$5 = $137$hi;
     $950($135_1 | 0, $136_1 | 0, i64toi32_i32$2 | 0, $137_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $162_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $477_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $477_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $164_1 = $477_1;
    $164$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $17_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $17$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $478_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $478_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $168$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $164$hi;
    i64toi32_i32$3 = $164_1;
    i64toi32_i32$2 = $168$hi;
    i64toi32_i32$4 = $478_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $960($162_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $179_1 = i64toi32_i32$4;
    $179$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $179$hi;
    i64toi32_i32$0 = $179_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $180$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $183_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $482_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $482_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $186_1 = $482_1;
    $186$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $483_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $483_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $191$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $186$hi;
    i64toi32_i32$5 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$1 = $483_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $960($183_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $201_1 = i64toi32_i32$1;
    $201$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $201$hi;
    i64toi32_i32$2 = $201_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $202$hi;
    i64toi32_i32$2 = 0;
    $960($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $204_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $485_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $485_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $207_1 = $485_1;
    $207$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $486_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $212$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $207$hi;
    i64toi32_i32$5 = $207_1;
    i64toi32_i32$0 = $212$hi;
    i64toi32_i32$3 = $486_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $960($204_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $222_1 = i64toi32_i32$3;
    $222$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $222$hi;
    i64toi32_i32$0 = $222_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $223$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $223$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $225_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $487_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $487_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $228_1 = $487_1;
    $228$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $488_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $488_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $233$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$5 = $228_1;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$4 = $488_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $960($225_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $243_1 = i64toi32_i32$4;
    $243$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $243$hi;
    i64toi32_i32$2 = $243_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $244$hi;
    i64toi32_i32$2 = 0;
    $960($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $246_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $489_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $489_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $249_1 = $489_1;
    $249$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $491_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $491_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $254$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $249$hi;
    i64toi32_i32$5 = $249_1;
    i64toi32_i32$0 = $254$hi;
    i64toi32_i32$1 = $491_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $960($246_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $263_1 = i64toi32_i32$1;
    $263$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $263$hi;
    i64toi32_i32$0 = $263_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $264$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$14 : {
     label$15 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $492_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $492_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $272_1 = $492_1;
      $272$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $493_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $493_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $276$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $272$hi;
      i64toi32_i32$5 = $272_1;
      i64toi32_i32$2 = $276$hi;
      i64toi32_i32$3 = $493_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $281_1 = $4_1;
      $281$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $495_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $18_1 = $495_1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $281$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($281_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$2;
      $286_1 = i64toi32_i32$4;
      $286$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$0 = $16_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $496_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $496_1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $293_1 = i64toi32_i32$2;
      $293$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$4 = $286_1;
      i64toi32_i32$2 = $293$hi;
      i64toi32_i32$3 = $293_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $21_1 = $497_1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $300_1 = i64toi32_i32$0;
      $300$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $21_1;
      i64toi32_i32$0 = $300$hi;
      i64toi32_i32$3 = $300_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$4 = 0;
      $305_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $498_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $498_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $307_1 = $498_1;
      $307$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$1 = $19_1;
      $310_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $310_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $501_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      }
      $312$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $307$hi;
      i64toi32_i32$4 = $307_1;
      i64toi32_i32$1 = $312$hi;
      i64toi32_i32$3 = $501_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $313_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $316_1 = i64toi32_i32$4;
      $316$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $313$hi;
      i64toi32_i32$5 = $313_1;
      i64toi32_i32$4 = $316$hi;
      i64toi32_i32$3 = $316_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $317$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $305$hi;
      i64toi32_i32$1 = $305_1;
      i64toi32_i32$5 = $317$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $318_1 = i64toi32_i32$4;
      $318$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $319_1 = $20_1;
      $319$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $320_1 = $4_1;
      $320$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 17;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $502_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $502_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $502_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $320$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      $326_1 = i64toi32_i32$0;
      $326$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      $327_1 = $16_1;
      $327$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 15;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $503_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $503_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      i64toi32_i32$2 = $503_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -32768;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $21_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $327$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($327_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$2;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $326$hi;
      i64toi32_i32$0 = $326_1;
      i64toi32_i32$2 = $332$hi;
      i64toi32_i32$3 = $332_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $504_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $22_1 = $504_1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $339_1 = i64toi32_i32$1;
      $339$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$4 = $22_1;
      i64toi32_i32$1 = $339$hi;
      i64toi32_i32$3 = $339_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $340$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $340$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $342_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $343_1 = $342_1;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $505_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $505_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $345_1 = $505_1;
      $345$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$4 = $19_1;
      $348_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $348_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $506_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $506_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $345$hi;
      i64toi32_i32$0 = $345_1;
      i64toi32_i32$4 = $350$hi;
      i64toi32_i32$3 = $506_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $351_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $351$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $354_1 = i64toi32_i32$0;
      $354$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $351$hi;
      i64toi32_i32$5 = $351_1;
      i64toi32_i32$0 = $354$hi;
      i64toi32_i32$3 = $354_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $343$hi;
      i64toi32_i32$4 = $343_1;
      i64toi32_i32$5 = $355$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $356$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $319$hi;
      i64toi32_i32$2 = $319_1;
      i64toi32_i32$4 = $356$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$3 = $20_1;
      $360_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $361$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $318$hi;
      i64toi32_i32$3 = $318_1;
      i64toi32_i32$0 = $361$hi;
      i64toi32_i32$2 = $360_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $362$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 0;
      $364_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = 0;
      $365$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $362$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $365$hi;
      i64toi32_i32$3 = $364_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $366$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $366$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      $373_1 = i64toi32_i32$4;
      $373$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      $377_1 = i64toi32_i32$4;
      $377$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $378_1 = $4_1;
      $378$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $508_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $22_1 = $508_1;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $378$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($378_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $382_1 = i64toi32_i32$0;
      $382$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $377$hi;
      i64toi32_i32$1 = $377_1;
      i64toi32_i32$0 = $382$hi;
      i64toi32_i32$3 = $382_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $509_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $509_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $385$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $373$hi;
      i64toi32_i32$5 = $373_1;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$3 = $509_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$1 = 0;
      $390_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $390$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $510_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $510_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $392_1 = $510_1;
      $392$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $395_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $395_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $512_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $397$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $392$hi;
      i64toi32_i32$1 = $392_1;
      i64toi32_i32$5 = $397$hi;
      i64toi32_i32$3 = $512_1;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $398_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $398$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $401_1 = i64toi32_i32$1;
      $401$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $398$hi;
      i64toi32_i32$2 = $398_1;
      i64toi32_i32$1 = $401$hi;
      i64toi32_i32$3 = $401_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $402$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $390$hi;
      i64toi32_i32$5 = $390_1;
      i64toi32_i32$2 = $402$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $403_1 = i64toi32_i32$1;
      $403$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      $404_1 = $18_1;
      $404$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $514_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $514_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $20_1 = $514_1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $21_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$1;
      $417$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $417$hi;
      i64toi32_i32$3 = $417_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $515_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $515_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $22_1 = $515_1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$2 = $22_1;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $424_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $425$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $425$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $427_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $428_1 = $427_1;
      $428$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $519_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $519_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $430_1 = $519_1;
      $430$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $19_1;
      $433_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $433_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $520_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $520_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $435$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $430$hi;
      i64toi32_i32$0 = $430_1;
      i64toi32_i32$2 = $435$hi;
      i64toi32_i32$3 = $520_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $436_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $436$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $439_1 = i64toi32_i32$0;
      $439$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $436$hi;
      i64toi32_i32$5 = $436_1;
      i64toi32_i32$0 = $439$hi;
      i64toi32_i32$3 = $439_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $440$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $428$hi;
      i64toi32_i32$2 = $428_1;
      i64toi32_i32$5 = $440$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $441$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $404$hi;
      i64toi32_i32$1 = $404_1;
      i64toi32_i32$2 = $441$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $445_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $446$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $403$hi;
      i64toi32_i32$3 = $403_1;
      i64toi32_i32$0 = $446$hi;
      i64toi32_i32$1 = $445_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $447_1 = i64toi32_i32$2;
      $447$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -2;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      $452_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $453$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $447_1;
      i64toi32_i32$2 = $453$hi;
      i64toi32_i32$4 = $452_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $2_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$5;
      $458_1 = $2_1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 62;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $521_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $521_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $460_1 = $521_1;
      $460$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$5 = $14_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 2;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
       $522_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $522_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $462$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $460$hi;
      i64toi32_i32$0 = $460_1;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$4 = $522_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $458$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($458_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $467_1 = i64toi32_i32$3;
      $467$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 30;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $523_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $523_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$0 = $523_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $16_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16$hi = i64toi32_i32$5;
      $471_1 = $16_1;
      $471$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $525_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $525_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20_1 = $525_1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $471$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = __wasm_i64_mul($471_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $475_1 = i64toi32_i32$3;
      $475$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $467$hi;
      i64toi32_i32$5 = $467_1;
      i64toi32_i32$3 = $475$hi;
      i64toi32_i32$4 = $475_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $18_1;
      $479_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $480_1 = $479_1;
      $480$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      $481_1 = i64toi32_i32$1;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $528_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $528_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $18_1 = $528_1;
      $18$hi = i64toi32_i32$2;
      $484_1 = $18_1;
      $484$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 30;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $529_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $529_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      i64toi32_i32$2 = $529_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -262145;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 262144;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $484$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($484_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $490_1 = i64toi32_i32$4;
      $490$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$0 = $481_1;
      i64toi32_i32$4 = $490$hi;
      i64toi32_i32$5 = $490_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $494_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $495$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $480$hi;
      i64toi32_i32$5 = $480_1;
      i64toi32_i32$1 = $495$hi;
      i64toi32_i32$0 = $494_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $496$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $499_1 = i64toi32_i32$5;
      $499$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $496$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $499$hi;
      i64toi32_i32$0 = $499_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $500_1 = i64toi32_i32$1;
      $500$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $23_1 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $507_1 = i64toi32_i32$2;
      $507$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$3 = $23_1;
      i64toi32_i32$2 = $507$hi;
      i64toi32_i32$0 = $507_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$0 = $23_1;
      $511_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $511_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $530_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $530_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $513_1 = $530_1;
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $531_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $515$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $513$hi;
      i64toi32_i32$1 = $513_1;
      i64toi32_i32$4 = $515$hi;
      i64toi32_i32$3 = $531_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $516_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $516$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$0 = $500_1;
      i64toi32_i32$1 = $516$hi;
      i64toi32_i32$3 = $516_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $517_1 = i64toi32_i32$2;
      $517$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      $518_1 = $22_1;
      $518$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $532_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $532_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $518$hi;
      i64toi32_i32$5 = $518_1;
      i64toi32_i32$4 = $520$hi;
      i64toi32_i32$3 = $532_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $524_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $525$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $517$hi;
      i64toi32_i32$3 = $517_1;
      i64toi32_i32$2 = $525$hi;
      i64toi32_i32$5 = $524_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $526_1 = i64toi32_i32$4;
      $526$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $527_1 = $21_1;
      $527$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $23_1 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $19_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $536_1 = i64toi32_i32$0;
      $536$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$1 = $23_1;
      i64toi32_i32$0 = $536$hi;
      i64toi32_i32$5 = $536_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $22_1 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $23_1;
      i64toi32_i32$3 = 0;
      $541_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $541$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$4;
      $542_1 = i64toi32_i32$2;
      $542$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $2$hi;
      $543_1 = $2_1;
      $543$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $533_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $533_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      i64toi32_i32$3 = $533_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = -4;
      i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $23_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $543$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($543_1 | 0, i64toi32_i32$5 | 0, $23_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $548_1 = i64toi32_i32$3;
      $548$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $542$hi;
      i64toi32_i32$4 = $542_1;
      i64toi32_i32$3 = $548$hi;
      i64toi32_i32$1 = $548_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $24_1 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$1 = $22_1;
      $552_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $553$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$1 = $541_1;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$4 = $552_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $554$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $527$hi;
      i64toi32_i32$5 = $527_1;
      i64toi32_i32$1 = $554$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $22_1 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21_1;
      $558_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $559$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $526$hi;
      i64toi32_i32$4 = $526_1;
      i64toi32_i32$3 = $559$hi;
      i64toi32_i32$5 = $558_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $560_1 = i64toi32_i32$1;
      $560$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      $561_1 = $22_1;
      $561$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($23_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $568_1 = i64toi32_i32$4;
      $568$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21_1;
      i64toi32_i32$4 = $568$hi;
      i64toi32_i32$5 = $568_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $20_1 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $573_1 = i64toi32_i32$0;
      $573$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $573$hi;
      i64toi32_i32$5 = $573_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $578_1 = i64toi32_i32$2;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $578_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $534_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       $534_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $581_1 = $534_1;
      $581$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$4 = $20_1;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $584_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $585$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $20_1;
      $588_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $589$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $585$hi;
      i64toi32_i32$3 = $584_1;
      i64toi32_i32$4 = $589$hi;
      i64toi32_i32$1 = $588_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $590$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $593_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $594$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $590$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = $594$hi;
      i64toi32_i32$3 = $593_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $535_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $535_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $581$hi;
      i64toi32_i32$2 = $581_1;
      i64toi32_i32$5 = $596$hi;
      i64toi32_i32$3 = $535_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $597_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $597$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $561$hi;
      i64toi32_i32$1 = $561_1;
      i64toi32_i32$2 = $597$hi;
      i64toi32_i32$3 = $597_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $20_1 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $601_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $602$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $560$hi;
      i64toi32_i32$3 = $560_1;
      i64toi32_i32$4 = $602$hi;
      i64toi32_i32$1 = $601_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $603_1 = i64toi32_i32$2;
      $603$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $604_1 = $20_1;
      $604$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      $605_1 = $24_1;
      $605$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $23_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $612_1 = i64toi32_i32$3;
      $612$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $612$hi;
      i64toi32_i32$1 = $612_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $537_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $537_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $615_1 = $537_1;
      $615$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $618_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = $618_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
       $538_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $620$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $615$hi;
      i64toi32_i32$2 = $615_1;
      i64toi32_i32$1 = $620$hi;
      i64toi32_i32$0 = $538_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $621_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $621$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $605$hi;
      i64toi32_i32$5 = $605_1;
      i64toi32_i32$2 = $621$hi;
      i64toi32_i32$0 = $621_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$0 = $24_1;
      $625_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $626_1 = $625_1;
      $626$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $627_1 = i64toi32_i32$3;
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $539_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $539_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $629$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $627$hi;
      i64toi32_i32$1 = $627_1;
      i64toi32_i32$0 = $629$hi;
      i64toi32_i32$5 = $539_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $630$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $630$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      $632_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $633$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $626$hi;
      i64toi32_i32$5 = $626_1;
      i64toi32_i32$3 = $633$hi;
      i64toi32_i32$1 = $632_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $634$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $604$hi;
      i64toi32_i32$4 = $604_1;
      i64toi32_i32$5 = $634$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $20_1;
      $638_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $639$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $603$hi;
      i64toi32_i32$1 = $603_1;
      i64toi32_i32$0 = $639$hi;
      i64toi32_i32$4 = $638_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = 131071;
      i64toi32_i32$4 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 49;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $540_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $540_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $644$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $16_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $653_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = 0;
      $654$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $644$hi;
      i64toi32_i32$1 = $540_1;
      i64toi32_i32$2 = $654$hi;
      i64toi32_i32$3 = $653_1;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      $655_1 = i64toi32_i32$0;
      $655$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      $658_1 = i64toi32_i32$2;
      $658$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $544_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $544_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20_1 = $544_1;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      $664_1 = i64toi32_i32$5;
      $664$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      $665_1 = $1_1;
      $665$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $545_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
       $545_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      $18_1 = $545_1;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $665$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($665_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $669_1 = i64toi32_i32$0;
      $669$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $664$hi;
      i64toi32_i32$4 = $664_1;
      i64toi32_i32$0 = $669$hi;
      i64toi32_i32$3 = $669_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $14_1 = i64toi32_i32$1;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $546_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $546_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $22_1 = $546_1;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $658$hi;
      i64toi32_i32$2 = $658_1;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $674_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $675$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $655$hi;
      i64toi32_i32$3 = $655_1;
      i64toi32_i32$4 = $675$hi;
      i64toi32_i32$5 = $674_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $676_1 = i64toi32_i32$0;
      $676$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $678$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $678$hi;
      $580_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($580_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $680_1 = i64toi32_i32$2;
      $680$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $683_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $683$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $683$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $683_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $684_1 = i64toi32_i32$1;
      $684$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $680$hi;
      i64toi32_i32$3 = $680_1;
      i64toi32_i32$1 = $684$hi;
      i64toi32_i32$5 = $684_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $685$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $688_1 = i64toi32_i32$3;
      $688$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $685$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $688$hi;
      i64toi32_i32$5 = $688_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $689_1 = i64toi32_i32$1;
      $689$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $547_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $547_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $691_1 = $547_1;
      $691$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $694_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = $694_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       $549_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $696$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $691$hi;
      i64toi32_i32$4 = $691_1;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = $549_1;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $697_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $697$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $689$hi;
      i64toi32_i32$2 = $689_1;
      i64toi32_i32$4 = $697$hi;
      i64toi32_i32$0 = $697_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $698_1 = i64toi32_i32$3;
      $698$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $699_1 = $4_1;
      $699$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $550_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $550_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $701$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $699$hi;
      i64toi32_i32$5 = $701$hi;
      i64toi32_i32$5 = __wasm_i64_mul($699_1 | 0, i64toi32_i32$2 | 0, $550_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $702_1 = i64toi32_i32$5;
      $702$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $703_1 = $3_1;
      $703$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $551_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $551_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $705$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $703$hi;
      i64toi32_i32$1 = $705$hi;
      i64toi32_i32$1 = __wasm_i64_mul($703_1 | 0, i64toi32_i32$5 | 0, $551_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $706_1 = i64toi32_i32$1;
      $706$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $702$hi;
      i64toi32_i32$2 = $702_1;
      i64toi32_i32$1 = $706$hi;
      i64toi32_i32$0 = $706_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $707$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $710_1 = i64toi32_i32$2;
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $707$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$0 = $710_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $711$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $714_1 = i64toi32_i32$5;
      $714$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $711$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $714$hi;
      i64toi32_i32$0 = $714_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $553_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $553_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $716$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $698$hi;
      i64toi32_i32$1 = $698_1;
      i64toi32_i32$4 = $716$hi;
      i64toi32_i32$0 = $553_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $717$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $676$hi;
      i64toi32_i32$3 = $676_1;
      i64toi32_i32$1 = $717$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = $22_1;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$4;
      $6_1 = $6_1 + -1 | 0;
      break label$14;
     }
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $554_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $554_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
     }
     $18_1 = $554_1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $555_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
      $555_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $727_1 = $555_1;
     $727$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $556_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      $556_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $729_1 = $556_1;
     $729$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      $557_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $557_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     }
     $731$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $729$hi;
     i64toi32_i32$4 = $729_1;
     i64toi32_i32$5 = $731$hi;
     i64toi32_i32$0 = $557_1;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $1_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     $741_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = 0;
     $742$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $727$hi;
     i64toi32_i32$0 = $727_1;
     i64toi32_i32$2 = $742$hi;
     i64toi32_i32$5 = $741_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
     $743_1 = i64toi32_i32$3;
     $743$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$5 = $20_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$3;
     $746_1 = i64toi32_i32$2;
     $746$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     $747_1 = $1_1;
     $747$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $559_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $559_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $20_1 = $559_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $747$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($747_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $752_1 = i64toi32_i32$1;
     $752$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     $753_1 = $18_1;
     $753$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $562_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
      $562_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $755$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $753$hi;
     i64toi32_i32$4 = $753_1;
     i64toi32_i32$3 = $755$hi;
     i64toi32_i32$5 = $562_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $22_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $22$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $14_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $761_1 = i64toi32_i32$1;
     $761$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $752$hi;
     i64toi32_i32$3 = $752_1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $563_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $563_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $23_1 = $563_1;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $746$hi;
     i64toi32_i32$2 = $746_1;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$5 = $23_1;
     $766_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $767$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $743$hi;
     i64toi32_i32$5 = $743_1;
     i64toi32_i32$3 = $767$hi;
     i64toi32_i32$4 = $766_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     $768_1 = i64toi32_i32$1;
     $768$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $771_1 = i64toi32_i32$5;
     $771$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $564_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $564_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $14_1 = $564_1;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $775$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $775$hi;
     $582_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($582_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $777_1 = i64toi32_i32$0;
     $777$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $771$hi;
     i64toi32_i32$5 = $771_1;
     i64toi32_i32$0 = $777$hi;
     i64toi32_i32$4 = $777_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $778$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $781_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $781$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $781$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $781_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $782_1 = i64toi32_i32$2;
     $782$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $778$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = $782$hi;
     i64toi32_i32$4 = $782_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $783_1 = i64toi32_i32$0;
     $783$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $565_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $565_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $785_1 = $565_1;
     $785$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $788_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $788_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $566_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $566_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $785$hi;
     i64toi32_i32$3 = $785_1;
     i64toi32_i32$4 = $790$hi;
     i64toi32_i32$5 = $566_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $791_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $791$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $783$hi;
     i64toi32_i32$1 = $783_1;
     i64toi32_i32$3 = $791$hi;
     i64toi32_i32$5 = $791_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $792_1 = i64toi32_i32$2;
     $792$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $793_1 = $4_1;
     $793$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$4 = $17_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $567_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $567_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $795$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$4 = $795$hi;
     i64toi32_i32$4 = __wasm_i64_mul($793_1 | 0, i64toi32_i32$1 | 0, $567_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $796_1 = i64toi32_i32$4;
     $796$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $797_1 = $3_1;
     $797$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $569_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $569_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $799$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $797$hi;
     i64toi32_i32$0 = $799$hi;
     i64toi32_i32$0 = __wasm_i64_mul($797_1 | 0, i64toi32_i32$4 | 0, $569_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $800_1 = i64toi32_i32$0;
     $800$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $796$hi;
     i64toi32_i32$1 = $796_1;
     i64toi32_i32$0 = $800$hi;
     i64toi32_i32$5 = $800_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $801$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $804_1 = i64toi32_i32$1;
     $804$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $801$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $804$hi;
     i64toi32_i32$5 = $804_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $805$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $808_1 = i64toi32_i32$4;
     $808$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $805$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $808$hi;
     i64toi32_i32$5 = $808_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $570_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $570_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $810$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $792$hi;
     i64toi32_i32$0 = $792_1;
     i64toi32_i32$3 = $810$hi;
     i64toi32_i32$5 = $570_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $811$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $768$hi;
     i64toi32_i32$2 = $768_1;
     i64toi32_i32$0 = $811$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$5 = $23_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $14$hi;
     $2_1 = $14_1;
     $2$hi = i64toi32_i32$3;
    }
    label$16 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $15_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$17 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$17
     }
     label$18 : {
      if ($7_1) {
       break label$18
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 65535;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $827_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $827$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $828_1 = $4_1;
      $828$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $571_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $571_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $830$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $830$hi;
      i64toi32_i32$4 = $571_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $832_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $16_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $572_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $572_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $834_1 = $572_1;
      $834$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $574_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $574_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $836$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $834$hi;
      i64toi32_i32$3 = $834_1;
      i64toi32_i32$4 = $836$hi;
      i64toi32_i32$1 = $574_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      $840_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = $17_1;
      $844_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $832_1 : $840_1;
      i64toi32_i32$1 = 0;
      $845$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $828$hi;
      i64toi32_i32$3 = $828_1;
      i64toi32_i32$5 = $845$hi;
      i64toi32_i32$4 = $844_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $4_1;
      $849_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $850$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $827$hi;
      i64toi32_i32$4 = $827_1;
      i64toi32_i32$0 = $850$hi;
      i64toi32_i32$3 = $849_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $3_1 = i64toi32_i32$5;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$4 | 0)) {
       break label$18
      }
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $575_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $575_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $860$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$4 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $862_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $862$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $860$hi;
    i64toi32_i32$2 = $575_1;
    i64toi32_i32$1 = $862$hi;
    i64toi32_i32$3 = $862_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $863_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $863$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $864_1 = $4_1;
    $864$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $576_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $576_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $866$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $866$hi;
    i64toi32_i32$1 = $576_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $868_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$3 = $16_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $577_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $577_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $870_1 = $577_1;
    $870$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $579_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $579_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $872$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$2 = $870_1;
    i64toi32_i32$1 = $872$hi;
    i64toi32_i32$4 = $579_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$4 = $17_1;
    $876_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $17_1;
    $880_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $868_1 : $876_1;
    i64toi32_i32$4 = 0;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $864$hi;
    i64toi32_i32$2 = $864_1;
    i64toi32_i32$3 = $881$hi;
    i64toi32_i32$1 = $880_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $885_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $886$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $863$hi;
    i64toi32_i32$1 = $863_1;
    i64toi32_i32$5 = $886$hi;
    i64toi32_i32$2 = $885_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $887$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $887$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $15_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $15$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $0_1;
   HEAP32[i64toi32_i32$4 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $15_1;
   HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
   label$19 : {
    $11_1 = $5_1 + 192 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return;
  }
  i64toi32_i32$4 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$4 >> 2] = 0;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = 2147450880;
  i64toi32_i32$0 = i64toi32_i32$5 ? $15_1 : 0;
  i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$4;
  $907_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $907_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  label$21 : {
   $12_1 = $5_1 + 192 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $2_1 = 0, $6_1 = 0, $6$hi = 0, $8_1 = 0, $8$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $33_1 = 0, $5_1 = 0, $4_1 = 0, $38_1 = 0, $39_1 = 0, $39$hi = 0, $43_1 = 0, $56_1 = 0, $56$hi = 0, $60$hi = 0, $69_1 = 0, $69$hi = 0, $70_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $6_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $28_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $8_1 = $28_1;
    $8$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $29_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $29_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$5 : {
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $30_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $30_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $8_1 = $30_1;
    $8$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $31_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $31_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $7_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $7$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $7$hi;
    if (!!($7_1 | i64toi32_i32$3 | 0)) {
     break label$6
    }
    i64toi32_i32$3 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    break label$3;
   }
   $38_1 = $2_1;
   i64toi32_i32$3 = $7$hi;
   $39_1 = $7_1;
   $39$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   $43_1 = Math_clz32($6_1) + 32 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $32_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $32_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $43_1 : Math_clz32($32_1);
   i64toi32_i32$3 = $39$hi;
   i64toi32_i32$4 = 0;
   $950($38_1 | 0, $39_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $56_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $56$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $33_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $33_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $60$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $56$hi;
   i64toi32_i32$4 = $56_1;
   i64toi32_i32$3 = $60$hi;
   i64toi32_i32$0 = $33_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$3;
   $8$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $69_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $69$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$4 = $7_1;
  i64toi32_i32$5 = $69$hi;
  i64toi32_i32$0 = $69_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $70_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $70_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$7 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $6_1 = 0, $5_1 = 0, $36_1 = 0, $44_1 = 0, $44$hi = 0, $48$hi = 0, $54_1 = 0, $55_1 = 0, $55$hi = 0, $59$hi = 0, $60_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $26_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $26_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$5;
    break label$3;
   }
   label$5 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$5
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $27_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $27_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$1;
    break label$3;
   }
   label$6 : {
    if ($4_1) {
     break label$6
    }
    i64toi32_i32$1 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $950($2_1 | 0, $36_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $44_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $44$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $28_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $28_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $48$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $44$hi;
   i64toi32_i32$5 = $44_1;
   i64toi32_i32$1 = $48$hi;
   i64toi32_i32$3 = $28_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $54_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $7$hi;
  $55_1 = $7_1;
  $55$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $29_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $59$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $55$hi;
  i64toi32_i32$5 = $55_1;
  i64toi32_i32$0 = $59$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $60_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $54_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $60_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$7 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $4_1 = 0, $25_1 = 0, $33_1 = 0, $33$hi = 0, $37$hi = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $25_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $950($2_1 | 0, $25_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $33_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $33$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $23_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $23_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $37$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $33$hi;
   i64toi32_i32$1 = $33_1;
   i64toi32_i32$0 = $37$hi;
   i64toi32_i32$3 = $23_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $38_1 = i64toi32_i32$4;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $24_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $24_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$2 = $42$hi;
   i64toi32_i32$3 = $24_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$5 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $19_1 = 0, $4_1 = 0, $3_1 = 0, $17_1 = 0, $26_1 = 0, $26$hi = 0, $30$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 0;
   $17_1 = $1_1;
   $1_1 = Math_clz32($1_1) ^ 31 | 0;
   i64toi32_i32$1 = 0;
   $950($2_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - $1_1 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $1_1 + 16383 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $19_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $19_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26_1;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $19_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  label$5 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $958($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $959($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $16$hi = 0, $16_1 = 0, $14$hi = 0, $13$hi = 0, $12$hi = 0, $17$hi = 0, $14_1 = 0, $6_1 = 0, $17_1 = 0, $13_1 = 0, $12_1 = 0, $20$hi = 0, $8_1 = 0, $20_1 = 0, $15$hi = 0, $18$hi = 0, $19$hi = 0, $7_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $21$hi = 0, $24$hi = 0, $21_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $25$hi = 0, $26$hi = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $234_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $243_1 = 0, $244_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $252_1 = 0, $254_1 = 0, $255_1 = 0, $257_1 = 0, $22_1 = 0, $258_1 = 0, $260_1 = 0, $23_1 = 0, $24_1 = 0, $262_1 = 0, $26_1 = 0, $263_1 = 0, $264_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $269_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $276_1 = 0, $277_1 = 0, $278_1 = 0, $279_1 = 0, $280_1 = 0, $11_1 = 0, $10_1 = 0, $35_1 = 0, $35$hi = 0, $37$hi = 0, $40_1 = 0, $40$hi = 0, $42$hi = 0, $45_1 = 0, $45$hi = 0, $49$hi = 0, $76_1 = 0, $80_1 = 0, $87_1 = 0, $91_1 = 0, $100_1 = 0, $100$hi = 0, $112_1 = 0, $112$hi = 0, $134_1 = 0, $135_1 = 0, $135$hi = 0, $136_1 = 0, $136$hi = 0, $143$hi = 0, $146$hi = 0, $156_1 = 0, $156$hi = 0, $161$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $192_1 = 0, $192$hi = 0, $197$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $213_1 = 0, $213$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233_1 = 0, $233$hi = 0, $242_1 = 0, $242$hi = 0, $249_1 = 0, $249$hi = 0, $251_1 = 0, $251$hi = 0, $253_1 = 0, $253$hi = 0, $256_1 = 0, $258$hi = 0, $259_1 = 0, $259$hi = 0, $261_1 = 0, $261$hi = 0, $270_1 = 0, $270$hi = 0, $275_1 = 0, $275$hi = 0, $283_1 = 0, $283$hi = 0, $286$hi = 0, $25_1 = 0, $302_1 = 0, $302$hi = 0, $306_1 = 0, $307_1 = 0, $307$hi = 0, $311_1 = 0, $311$hi = 0, $315_1 = 0, $316$hi = 0, $317_1 = 0, $317$hi = 0, $318_1 = 0, $318$hi = 0, $321_1 = 0, $322$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $331_1 = 0, $332$hi = 0, $333$hi = 0, $336_1 = 0, $336$hi = 0, $337_1 = 0, $337$hi = 0, $344_1 = 0, $344$hi = 0, $350_1 = 0, $350$hi = 0, $352$hi = 0, $353_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $357$hi = 0, $361_1 = 0, $362$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $366_1 = 0, $366$hi = 0, $369_1 = 0, $370$hi = 0, $373_1 = 0, $374$hi = 0, $375$hi = 0, $378_1 = 0, $379$hi = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $386_1 = 0, $387$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $392_1 = 0, $393$hi = 0, $396_1 = 0, $397$hi = 0, $398$hi = 0, $402_1 = 0, $403$hi = 0, $413_1 = 0, $413$hi = 0, $415$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $426$hi = 0, $460_1 = 0, $460$hi = 0, $462_1 = 0, $462$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $472$hi = 0, $477_1 = 0, $477$hi = 0, $481_1 = 0, $481$hi = 0, $490$hi = 0, $492_1 = 0, $492$hi = 0, $498_1 = 0, $504_1 = 0, $504$hi = 0, $509_1 = 0, $510$hi = 0, $514_1 = 0, $514$hi = 0, $518_1 = 0, $518$hi = 0, $521_1 = 0, $521$hi = 0, $525_1 = 0, $526$hi = 0;
  label$1 : {
   $5_1 = global$0 - 96 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $35_1 = $230_1;
  $35$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $37$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $35$hi;
  i64toi32_i32$1 = $35_1;
  i64toi32_i32$0 = $37$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $12_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $40_1 = $232_1;
  $40$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $234_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $234_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $42$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$1 = $40_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $234_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $13_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $235_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $45_1 = $235_1;
  $45$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $14_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $236_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $236_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $45$hi;
  i64toi32_i32$2 = $45_1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$3 = $236_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $16_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $237_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $18_1 = $237_1;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = $14_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $238_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $19_1 = $238_1;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $239_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $239_1 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $240_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $240_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $240_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$5
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     $76_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $20_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $80_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $20_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $76_1 : $80_1) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $87_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $91_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $87_1 : $91_1) {
      break label$7
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $100_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $100$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$1 = $100_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$8
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $16_1 = 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$3;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $112_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $112$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $112$hi;
     i64toi32_i32$2 = $112_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$11 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$11
      }
      i64toi32_i32$0 = 2147450880;
      $16_1 = 0;
      $16$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$12 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$12
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$13 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    $8_1 = 0;
    label$14 : {
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $134_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $135_1 = $1_1;
     $135$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     $136_1 = $17_1;
     $136$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $17$hi;
     $8_1 = !($17_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $17_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $241_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $241_1 = i64toi32_i32$0
     }
     $143$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $146$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $143$hi;
     i64toi32_i32$3 = $241_1;
     i64toi32_i32$1 = $146$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $135$hi;
     i64toi32_i32$3 = $136$hi;
     $950($134_1 | 0, $135_1 | 0, i64toi32_i32$5 | 0, $136_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $243_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $243_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $156_1 = $243_1;
     $156$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $244_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $244_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $161$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $156$hi;
     i64toi32_i32$4 = $156_1;
     i64toi32_i32$5 = $161$hi;
     i64toi32_i32$0 = $244_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $245_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $18_1 = $245_1;
     $18$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$4
    }
    $168_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    $170_1 = $14_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    $9_1 = !($14_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $14_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $246_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $246_1 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $177$hi;
    i64toi32_i32$3 = $246_1;
    i64toi32_i32$0 = $180$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$3 = $170$hi;
    $950($168_1 | 0, $169_1 | 0, i64toi32_i32$2 | 0, $170_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $247_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $247_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $192_1 = $247_1;
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $197$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $192_1;
    i64toi32_i32$2 = $197$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $15_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $250_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $250_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $200_1 = $250_1;
    $200$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $252_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $252_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $200$hi;
    i64toi32_i32$1 = $200_1;
    i64toi32_i32$2 = $202$hi;
    i64toi32_i32$5 = $252_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $254_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $254_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $19_1 = $254_1;
    $19$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$2 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$2;
   $213_1 = i64toi32_i32$1;
   $213$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $255_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $255_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $255_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $221_1 = i64toi32_i32$1;
   $221$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$3 = $213_1;
   i64toi32_i32$1 = $221$hi;
   i64toi32_i32$5 = $221_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $257_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $257_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $14_1 = $257_1;
   $14$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $228_1 = i64toi32_i32$2;
   $228$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $14_1;
   i64toi32_i32$2 = $228$hi;
   i64toi32_i32$5 = $228_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$5 = $14_1;
   i64toi32_i32$3 = 0;
   $233_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $14_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $242_1 = i64toi32_i32$5;
   $242$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$5 = $242$hi;
   i64toi32_i32$4 = $242_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$0 = $15_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $17_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $17$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$0;
   $249$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $249$hi;
   i64toi32_i32$4 = $249_1;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $15_1 = i64toi32_i32$5;
   $15$hi = i64toi32_i32$2;
   $251_1 = i64toi32_i32$5;
   $251$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$3 = $12_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $258_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $258_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $253_1 = $258_1;
   $253$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$4 = $21_1;
   $256_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $256_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $260_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $260_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $258$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $253$hi;
   i64toi32_i32$2 = $253_1;
   i64toi32_i32$4 = $258$hi;
   i64toi32_i32$3 = $260_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $259_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $259$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $251$hi;
   i64toi32_i32$1 = $251_1;
   i64toi32_i32$2 = $259$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $21_1 = i64toi32_i32$0;
   $21$hi = i64toi32_i32$5;
   $261_1 = i64toi32_i32$0;
   $261$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $23_1 = i64toi32_i32$1;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $18$hi;
   i64toi32_i32$4 = $18_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $270_1 = i64toi32_i32$4;
   $270$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $23$hi;
   i64toi32_i32$5 = $23_1;
   i64toi32_i32$4 = $270$hi;
   i64toi32_i32$3 = $270_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $275_1 = i64toi32_i32$5;
   $275$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $275$hi;
   i64toi32_i32$3 = $275_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $24_1 = i64toi32_i32$4;
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$0 = $19_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $283_1 = i64toi32_i32$2;
   $283$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $283$hi;
   i64toi32_i32$3 = $283_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $262_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $262_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $286$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $261$hi;
   i64toi32_i32$4 = $261_1;
   i64toi32_i32$0 = $286$hi;
   i64toi32_i32$3 = $262_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $25_1 = i64toi32_i32$2;
   $25$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $233$hi;
   i64toi32_i32$1 = $233_1;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$15 : {
    label$16 : {
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $26_1 = i64toi32_i32$1;
     $26$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $302_1 = i64toi32_i32$1;
     $302$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $26$hi;
     i64toi32_i32$5 = $26_1;
     i64toi32_i32$1 = $302$hi;
     i64toi32_i32$3 = $302_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $26$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$3 = $26_1;
     $306_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $307_1 = $306_1;
     $307$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$5 = $311_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $315_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $307$hi;
     i64toi32_i32$5 = $307_1;
     i64toi32_i32$4 = $316$hi;
     i64toi32_i32$3 = $315_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $317_1 = i64toi32_i32$0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $318_1 = $3_1;
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = $22_1;
     $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $322$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$5 = $20_1;
     $325_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $326$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $322$hi;
     i64toi32_i32$5 = $321_1;
     i64toi32_i32$2 = $326$hi;
     i64toi32_i32$1 = $325_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $327$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $318$hi;
     i64toi32_i32$3 = $318_1;
     i64toi32_i32$5 = $327$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $331_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $332$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $317$hi;
     i64toi32_i32$1 = $317_1;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $333$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $336_1 = i64toi32_i32$1;
     $336$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $333$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $336$hi;
     i64toi32_i32$3 = $336_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $337_1 = i64toi32_i32$4;
     $337$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $344_1 = i64toi32_i32$0;
     $344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $344$hi;
     i64toi32_i32$3 = $344_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $263_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $263_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $350_1 = $263_1;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $264_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $264_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $352$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $350$hi;
     i64toi32_i32$4 = $350_1;
     i64toi32_i32$5 = $352$hi;
     i64toi32_i32$2 = $264_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $353_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $353$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $337$hi;
     i64toi32_i32$3 = $337_1;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$2 = $353_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $355_1 = $2_1;
     $355$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $265_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $357$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $265_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $361_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $362$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $354$hi;
     i64toi32_i32$2 = $354_1;
     i64toi32_i32$0 = $362$hi;
     i64toi32_i32$1 = $361_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $363_1 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $364_1 = $1_1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$3 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $266_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $266_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $366_1 = $266_1;
     $366$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$1 = $23_1;
     $369_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $370$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$1 = $24_1;
     i64toi32_i32$3 = $18_1;
     $373_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $374$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $370$hi;
     i64toi32_i32$3 = $369_1;
     i64toi32_i32$4 = $374$hi;
     i64toi32_i32$2 = $373_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$2 = $24_1;
     $378_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $379$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $379$hi;
     i64toi32_i32$3 = $378_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $267_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $267_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $381$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $366$hi;
     i64toi32_i32$0 = $366_1;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $267_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $382_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $382$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$2 = $364_1;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$3 = $382_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $386_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $386_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $388_1 = i64toi32_i32$0;
     $388$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $389_1 = $3_1;
     $389$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15_1;
     $392_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$2 = $25_1;
     i64toi32_i32$3 = $21_1;
     $396_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $397$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $393$hi;
     i64toi32_i32$3 = $392_1;
     i64toi32_i32$1 = $397$hi;
     i64toi32_i32$5 = $396_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $398$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $389$hi;
     i64toi32_i32$2 = $389_1;
     i64toi32_i32$3 = $398$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $402_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $403$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $388$hi;
     i64toi32_i32$5 = $388_1;
     i64toi32_i32$4 = $403$hi;
     i64toi32_i32$2 = $402_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$16
     }
     $6_1 = $6_1 + 1 | 0;
     break label$15;
    }
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$1 = $13_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $268_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $268_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $269_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $269_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $413_1 = $269_1;
    $413$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $415$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $413$hi;
    i64toi32_i32$1 = $413_1;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $272_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $272_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $418_1 = $272_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $13_1 = $274_1;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $424_1 = $3_1;
    $424$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $276_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $276_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $426$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $424$hi;
    i64toi32_i32$1 = $424_1;
    i64toi32_i32$0 = $426$hi;
    i64toi32_i32$2 = $276_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$17 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $16_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $16_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   label$18 : {
    label$19 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$19
     }
     label$20 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break label$20
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      $950($5_1 + 48 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $950($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      $958($5_1 + 16 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $958($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $460_1 = i64toi32_i32$1;
      $460$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$0 = $460_1;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$2 = $462_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $463_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $463$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $465_1 = i64toi32_i32$5;
      $465$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $469_1 = i64toi32_i32$0;
      $469$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $465$hi;
      i64toi32_i32$1 = $465_1;
      i64toi32_i32$0 = $469$hi;
      i64toi32_i32$2 = $469_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      $471_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = 0;
      $472$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $463$hi;
      i64toi32_i32$2 = $463_1;
      i64toi32_i32$0 = $472$hi;
      i64toi32_i32$1 = $471_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $13_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $477_1 = i64toi32_i32$0;
      $477$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $481_1 = i64toi32_i32$2;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $477$hi;
      i64toi32_i32$5 = $477_1;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$1 = $481_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1 + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      break label$18;
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $277_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $277_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $490$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $492_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $492$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $490$hi;
    i64toi32_i32$5 = $277_1;
    i64toi32_i32$2 = $492$hi;
    i64toi32_i32$1 = $492_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $16_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$5;
   label$21 : {
    i64toi32_i32$5 = $13$hi;
    $498_1 = !($13_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $278_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $279_1 = 0
      } else {
       $279_1 = 1
      }
      $280_1 = $279_1;
     } else {
      $280_1 = 0
     }
     $278_1 = $280_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $498_1 : $278_1) {
     break label$21
    }
    i64toi32_i32$1 = $16$hi;
    $504_1 = $16_1;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $509_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $510$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $504$hi;
    i64toi32_i32$5 = $504_1;
    i64toi32_i32$3 = $510$hi;
    i64toi32_i32$0 = $509_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$4;
    break label$3;
   }
   label$22 : {
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $514_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $514$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$1 = $514$hi;
    i64toi32_i32$0 = $514_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$22
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$3;
   }
   i64toi32_i32$5 = $16$hi;
   $518_1 = $16_1;
   $518$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $521_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $521$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $521$hi;
   i64toi32_i32$4 = $521_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $525_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $526$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $518$hi;
   i64toi32_i32$4 = $518_1;
   i64toi32_i32$2 = $526$hi;
   i64toi32_i32$5 = $525_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $16$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$23 : {
   $11_1 = $5_1 + 96 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $960($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $961($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $20_1 = 0, $20$hi = 0, $23_1 = 0, $26_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $20$hi;
  $949($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$3 : {
   $7_1 = $5_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $962($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7$hi = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $51_1 = 0, $52_1 = 0, $5_1 = 0, $4_1 = 0, $18_1 = 0, $18$hi = 0, $20$hi = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $43_1 = 0, $45_1 = 0, $50_1 = 0, $50$hi = 0, $52$hi = 0, $80_1 = 0, $80$hi = 0, $84$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $89$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $96$hi = 0, $106$hi = 0, $117_1 = 0, $117$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $23_1 = $44_1;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $46_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $25$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $23_1;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $46_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$5;
    label$5 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$4 = $0$hi;
    $43_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $45_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $43_1 : $45_1) {
     break label$6
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $47_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $50_1 = $47_1;
    $50$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $48_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $48_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $50$hi;
    i64toi32_i32$5 = $50_1;
    i64toi32_i32$2 = $52$hi;
    i64toi32_i32$4 = $48_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 2146435072;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $49_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$3
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $6_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $6$hi;
   $950($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   $958($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $51_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $80_1 = $51_1;
   $80$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $52_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $52_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $84$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $80$hi;
   i64toi32_i32$4 = $80_1;
   i64toi32_i32$0 = $84$hi;
   i64toi32_i32$2 = $52_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$0;
   label$7 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $87_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $89_1 = i64toi32_i32$4;
    $89$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $93_1 = i64toi32_i32$5;
    $93$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $89$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$2 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $95_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $96$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = $96$hi;
    i64toi32_i32$0 = $95_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $106$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $106$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  label$8 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $117_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = $117$hi;
  i64toi32_i32$4 = $117_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $88_1 = 0, $101_1 = 0, $112_1 = 0, $120_1 = 0, $128_1 = 0, $222_1 = 0, $233_1 = 0, $241_1 = 0, $249_1 = 0, $284_1 = 0, $362_1 = 0, $369_1 = 0, $462_1 = 0, $473_1 = 0, $481_1 = 0, $489_1 = 0, $1200 = 0, $1207 = 0, $1329 = 0, $1331 = 0, $1401 = 0, $1408 = 0, $1652 = 0, $1659 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $12_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$14
              }
              label$15 : {
               $2_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$15
               }
               $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $5_1 = $3_1 << 3 | 0;
               $4_1 = HEAP32[($5_1 + 64700 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$16 : {
                label$17 : {
                 $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 64692 | 0;
                 if (($6_1 | 0) != ($5_1 | 0)) {
                  break label$17
                 }
                 HEAP32[(0 + 64652 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                 break label$16;
                }
                HEAP32[(0 + 64668 | 0) >> 2] | 0;
                HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
               }
               $6_1 = $3_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
               $4_1 = $4_1 + $6_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$3;
              }
              $7_1 = HEAP32[(0 + 64660 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$13
              }
              label$18 : {
               if (!$0_1) {
                break label$18
               }
               label$19 : {
                label$20 : {
                 $88_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $88_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $101_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $101_1 >>> $0_1 | 0;
                 $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $112_1 = $6_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $6_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $120_1 = $112_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $128_1 = $120_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $6_1 = ($128_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $5_1 = $6_1 << 3 | 0;
                 $4_1 = HEAP32[($5_1 + 64700 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 64692 | 0;
                 if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$20
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                 HEAP32[(0 + 64652 | 0) >> 2] = $2_1;
                 break label$19;
                }
                HEAP32[(0 + 64668 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $5_1 = $4_1 + $3_1 | 0;
               $8_1 = $6_1 << 3 | 0;
               $6_1 = $8_1 - $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
               label$21 : {
                if (!$7_1) {
                 break label$21
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 64692 | 0;
                $4_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
                label$22 : {
                 label$23 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$23
                  }
                  HEAP32[(0 + 64652 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$22;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 64672 | 0) >> 2] = $5_1;
               HEAP32[(0 + 64660 | 0) >> 2] = $6_1;
               break label$3;
              }
              $9_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$13
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $222_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $222_1 >>> $0_1 | 0;
              $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $233_1 = $6_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $6_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $241_1 = $233_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $249_1 = $241_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $5_1 = HEAP32[(((($249_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 64956 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $6_1 = $5_1;
              label$24 : {
               label$25 : while (1) {
                label$26 : {
                 $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$26
                 }
                 $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$24
                 }
                }
                $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $284_1 = $6_1;
                $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $6_1 ? $284_1 : $4_1;
                $5_1 = $6_1 ? $0_1 : $5_1;
                $6_1 = $0_1;
                continue label$25;
               };
              }
              $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
              label$27 : {
               $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($5_1 | 0)) {
                break label$27
               }
               label$28 : {
                $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$28
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$4;
              }
              label$29 : {
               $6_1 = $5_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$29
               }
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$12
               }
               $6_1 = $5_1 + 16 | 0;
              }
              label$30 : while (1) {
               $11_1 = $6_1;
               $8_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               $6_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               break label$30;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$4;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$13
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$13
             }
             $11_1 = 0;
             label$31 : {
              $0_1 = $0_1 >>> 8 | 0;
              if (!$0_1) {
               break label$31
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$31
              }
              $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0_1 = $0_1 << $4_1 | 0;
              $362_1 = $0_1;
              $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6_1 = $362_1 << $0_1 | 0;
              $369_1 = $6_1;
              $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($369_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6_1 = 0 - $3_1 | 0;
             label$32 : {
              label$33 : {
               label$34 : {
                label$35 : {
                 $4_1 = HEAP32[(($11_1 << 2 | 0) + 64956 | 0) >> 2] | 0;
                 if ($4_1) {
                  break label$35
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$34;
                }
                $5_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $0_1 = 0;
                $8_1 = 0;
                label$36 : while (1) {
                 label$37 : {
                  $2_1 = ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $6_1 >>> 0) {
                   break label$37
                  }
                  $6_1 = $2_1;
                  $8_1 = $4_1;
                  if ($6_1) {
                   break label$37
                  }
                  $6_1 = 0;
                  $8_1 = $4_1;
                  $0_1 = $4_1;
                  break label$33;
                 }
                 $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                 $4_1 = HEAP32[(($4_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($4_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $5_1 = $5_1 << (($4_1 | 0) != (0 | 0)) | 0;
                 if ($4_1) {
                  continue label$36
                 }
                 break label$36;
                };
               }
               label$38 : {
                if ($0_1 | $8_1 | 0) {
                 break label$38
                }
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$13
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $462_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $4_1 = $462_1 >>> $0_1 | 0;
                $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                $473_1 = $5_1 | $0_1 | 0;
                $0_1 = $4_1 >>> $5_1 | 0;
                $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $481_1 = $473_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $489_1 = $481_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($489_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 64956 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$32
               }
              }
              label$39 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $2_1 >>> 0 < $6_1 >>> 0;
               label$40 : {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$40
                }
                $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $6_1 = $5_1 ? $2_1 : $6_1;
               $8_1 = $5_1 ? $0_1 : $8_1;
               $0_1 = $4_1;
               if ($0_1) {
                continue label$39
               }
               break label$39;
              };
             }
             if (!$8_1) {
              break label$13
             }
             if ($6_1 >>> 0 >= ((HEAP32[(0 + 64660 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$13
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$41 : {
              $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) == ($8_1 | 0)) {
               break label$41
              }
              label$42 : {
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                break label$42
               }
               HEAP32[($0_1 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              break label$5;
             }
             label$43 : {
              $4_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               break label$43
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$11
              }
              $4_1 = $8_1 + 16 | 0;
             }
             label$44 : while (1) {
              $2_1 = $4_1;
              $5_1 = $0_1;
              $4_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              $4_1 = $5_1 + 16 | 0;
              $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              break label$44;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$5;
            }
            label$45 : {
             $0_1 = HEAP32[(0 + 64660 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$45
             }
             $4_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
             label$46 : {
              label$47 : {
               $6_1 = $0_1 - $3_1 | 0;
               if ($6_1 >>> 0 < 16 >>> 0) {
                break label$47
               }
               HEAP32[(0 + 64660 | 0) >> 2] = $6_1;
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 64672 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$46;
              }
              HEAP32[(0 + 64672 | 0) >> 2] = 0;
              HEAP32[(0 + 64660 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$3;
            }
            label$48 : {
             $5_1 = HEAP32[(0 + 64664 | 0) >> 2] | 0;
             if ($5_1 >>> 0 <= $3_1 >>> 0) {
              break label$48
             }
             $4_1 = $5_1 - $3_1 | 0;
             HEAP32[(0 + 64664 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
             $6_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
             HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$3;
            }
            label$49 : {
             label$50 : {
              if (!(HEAP32[(0 + 65124 | 0) >> 2] | 0)) {
               break label$50
              }
              $4_1 = HEAP32[(0 + 65132 | 0) >> 2] | 0;
              break label$49;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 65136 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 65140 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 65128 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 65132 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 65124 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 65144 | 0) >> 2] = 0;
             HEAP32[(0 + 65096 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$3
            }
            $0_1 = 0;
            label$51 : {
             $4_1 = HEAP32[(0 + 65092 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$51
             }
             $6_1 = HEAP32[(0 + 65084 | 0) >> 2] | 0;
             $9_1 = $6_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $6_1 >>> 0) {
              break label$3
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$3
             }
            }
            if ((HEAPU8[(0 + 65096 | 0) >> 0] | 0) & 4 | 0) {
             break label$8
            }
            label$52 : {
             label$53 : {
              label$54 : {
               $4_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$54
               }
               $0_1 = 65100;
               label$55 : while (1) {
                label$56 : {
                 $6_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($6_1 >>> 0 > $4_1 >>> 0) {
                  break label$56
                 }
                 if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$53
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$55
                }
                break label$55;
               };
              }
              $5_1 = $965(0 | 0) | 0;
              if (($5_1 | 0) == (-1 | 0)) {
               break label$9
              }
              $2_1 = $8_1;
              label$57 : {
               $0_1 = HEAP32[(0 + 65128 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $5_1 | 0)) {
                break label$57
               }
               $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$9
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$9
              }
              label$58 : {
               $0_1 = HEAP32[(0 + 65092 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$58
               }
               $4_1 = HEAP32[(0 + 65084 | 0) >> 2] | 0;
               $6_1 = $4_1 + $2_1 | 0;
               if ($6_1 >>> 0 <= $4_1 >>> 0) {
                break label$9
               }
               if ($6_1 >>> 0 > $0_1 >>> 0) {
                break label$9
               }
              }
              $0_1 = $965($2_1 | 0) | 0;
              if (($0_1 | 0) != ($5_1 | 0)) {
               break label$52
              }
              break label$7;
             }
             $2_1 = ($2_1 - $5_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$9
             }
             $5_1 = $965($2_1 | 0) | 0;
             if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$10
             }
             $0_1 = $5_1;
            }
            label$59 : {
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$59
             }
             if (($0_1 | 0) == (-1 | 0)) {
              break label$59
             }
             label$60 : {
              $4_1 = HEAP32[(0 + 65132 | 0) >> 2] | 0;
              $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$60
              }
              $5_1 = $0_1;
              break label$7;
             }
             label$61 : {
              if (($965($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$61
              }
              $2_1 = $4_1 + $2_1 | 0;
              $5_1 = $0_1;
              break label$7;
             }
             $965(0 - $2_1 | 0 | 0) | 0;
             break label$9;
            }
            $5_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$7
            }
            break label$9;
           }
           $8_1 = 0;
           break label$4;
          }
          $5_1 = 0;
          break label$5;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$7
         }
        }
        HEAP32[(0 + 65096 | 0) >> 2] = HEAP32[(0 + 65096 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$6
       }
       $5_1 = $965($8_1 | 0) | 0;
       $0_1 = $965(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$6
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$6
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$6
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$6
       }
      }
      $0_1 = (HEAP32[(0 + 65084 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 65084 | 0) >> 2] = $0_1;
      label$62 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 65088 | 0) >> 2] | 0) >>> 0) {
        break label$62
       }
       HEAP32[(0 + 65088 | 0) >> 2] = $0_1;
      }
      label$63 : {
       label$64 : {
        label$65 : {
         label$66 : {
          $4_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$66
          }
          $0_1 = 65100;
          label$67 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$65
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$67
           }
           break label$64;
          };
         }
         label$68 : {
          label$69 : {
           $0_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$69
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$68
           }
          }
          HEAP32[(0 + 64668 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 65104 | 0) >> 2] = $2_1;
         HEAP32[(0 + 65100 | 0) >> 2] = $5_1;
         HEAP32[(0 + 64684 | 0) >> 2] = -1;
         HEAP32[(0 + 64688 | 0) >> 2] = HEAP32[(0 + 65124 | 0) >> 2] | 0;
         HEAP32[(0 + 65112 | 0) >> 2] = 0;
         label$70 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 64692 | 0;
          HEAP32[($4_1 + 64700 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 64704 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$70
          }
          break label$70;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 64664 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 64676 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
         break label$63;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$64
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$64
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$64
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
        break label$63;
       }
       label$71 : {
        $8_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$71
        }
        HEAP32[(0 + 64668 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 65100;
       label$72 : {
        label$73 : {
         label$74 : {
          label$75 : {
           label$76 : {
            label$77 : {
             label$78 : {
              label$79 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$78
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$79
               }
               break label$77;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$76
             }
            }
            $0_1 = 65100;
            label$80 : while (1) {
             label$81 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$81
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$75
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$80;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $11_1 | 0) - $3_1 | 0;
           $6_1 = $11_1 + $3_1 | 0;
           label$82 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$73;
           }
           label$83 : {
            if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$83
            }
            HEAP32[(0 + 64672 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 64660 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$73;
           }
           label$84 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$84
            }
            $7_1 = $4_1 & -8 | 0;
            label$85 : {
             label$86 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$86
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$87 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 64692 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$87
               }
              }
              label$88 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$88
               }
               HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$85;
              }
              label$89 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$89
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$85;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$90 : {
              label$91 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$91
               }
               label$92 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$92
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$90;
              }
              label$93 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$93
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$93
               }
               $2_1 = 0;
               break label$90;
              }
              label$94 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$94
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$94
               }
               break label$94;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$85
             }
             label$95 : {
              label$96 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 64956 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$96
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$95
               }
               HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$85;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$85
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$97 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$97
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$85
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$98 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$98
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 64692 | 0;
            label$99 : {
             label$100 : {
              $3_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$100
              }
              HEAP32[(0 + 64652 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$99;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$73;
           }
           $4_1 = 0;
           label$101 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$101
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$101
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1200 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1200 << $3_1 | 0;
            $1207 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1207 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 64956 | 0;
           label$102 : {
            label$103 : {
             $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$103
             }
             HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$102;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$104 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$74
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$104
             }
             break label$104;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$73;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 64664 | 0) >> 2] = $11_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 64676 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 65108 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 65112 | 0) >> 2] | 0;
          $1329 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1329;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 65100 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 65104 | 0) >> 2] | 0;
          $1331 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1331;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 65108 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 65104 | 0) >> 2] = $2_1;
          HEAP32[(0 + 65100 | 0) >> 2] = $5_1;
          HEAP32[(0 + 65112 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$105 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$105
           }
           break label$105;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$63
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$106 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$106
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 64692 | 0;
           label$107 : {
            label$108 : {
             $5_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$108
             }
             HEAP32[(0 + 64652 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$107;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$63;
          }
          $0_1 = 0;
          label$109 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$109
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$109
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1401 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1401 << $6_1 | 0;
           $1408 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1408 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 64956 | 0;
          label$110 : {
           label$111 : {
            $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$111
            }
            HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$110;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$112 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$72
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$112
            }
            break label$112;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$63;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$3;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 64664 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$6
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 64664 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$3;
     }
     HEAP32[($868() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$3;
    }
    label$113 : {
     if (!$11_1) {
      break label$113
     }
     label$114 : {
      label$115 : {
       $4_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($4_1 << 2 | 0) + 64956 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$115
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$114
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       HEAP32[(0 + 64656 | 0) >> 2] = $7_1;
       break label$113;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$113
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
     label$116 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$116
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$113
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$117 : {
     label$118 : {
      if ($6_1 >>> 0 > 15 >>> 0) {
       break label$118
      }
      $0_1 = $6_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$117;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $5_1 = $8_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
     HEAP32[($5_1 + $6_1 | 0) >> 2] = $6_1;
     label$119 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$119
      }
      $4_1 = $6_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 64692 | 0;
      label$120 : {
       label$121 : {
        $6_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$121
        }
        HEAP32[(0 + 64652 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$120;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break label$117;
     }
     label$122 : {
      label$123 : {
       $4_1 = $6_1 >>> 8 | 0;
       if ($4_1) {
        break label$123
       }
       $0_1 = 0;
       break label$122;
      }
      $0_1 = 31;
      if ($6_1 >>> 0 > 16777215 >>> 0) {
       break label$122
      }
      $0_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4_1 = $4_1 << $0_1 | 0;
      $1652 = $4_1;
      $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1652 << $4_1 | 0;
      $1659 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1659 << $3_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = ($0_1 << 2 | 0) + 64956 | 0;
     label$124 : {
      label$125 : {
       label$126 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$126
        }
        HEAP32[(0 + 64656 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$4_1 >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
        break label$125;
       }
       $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       label$127 : while (1) {
        $4_1 = $3_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
         break label$124
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($4_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$127
        }
        break label$127;
       };
       HEAP32[$2_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$117;
     }
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$3;
   }
   label$128 : {
    if (!$10_1) {
     break label$128
    }
    label$129 : {
     label$130 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 64956 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$130
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$129
      }
      HEAP32[(0 + 64656 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$128;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$128
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$131 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$131
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$128
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$132 : {
    label$133 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$133
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$132;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $6_1 = $5_1 + $3_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
    label$134 : {
     if (!$7_1) {
      break label$134
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 64692 | 0;
     $0_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
     label$135 : {
      label$136 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$136
       }
       HEAP32[(0 + 64652 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$135;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 64672 | 0) >> 2] = $6_1;
    HEAP32[(0 + 64660 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  label$137 : {
   $13_1 = $1_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $0_1 | 0;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 64692 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 64956 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 64676 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 64676 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 64660 | 0) >> 2] = 0;
      HEAP32[(0 + 64672 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 64672 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 64660 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 64692 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 64668 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 64668 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 64956 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 64692 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 64652 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 64956 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 64684 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 64684 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 65108;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 64684 | 0) >> 2] = -1;
  }
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = $0() | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $2_1 + $3_1 | 0;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $2_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$9($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$1_1 >> 2] = $0_1;
   return $2_1 | 0;
  }
  HEAP32[($868() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $970($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $12$hi = 0, $12_1 = 0, $13$hi = 0, $8_1 = 0, $13_1 = 0, i64toi32_i32$6 = 0, $15$hi = 0, $6_1 = 0, $15_1 = 0, $9_1 = 0, $14$hi = 0, $64_1 = 0, $7_1 = 0, $66_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $14_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $11_1 = 0, $10_1 = 0, $60_1 = 0, $60$hi = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $67_1 = 0, $67$hi = 0, $68_1 = 0, $68$hi = 0, $75$hi = 0, $77_1 = 0, $77$hi = 0, $136$hi = 0, $139_1 = 0, $140$hi = 0, $180_1 = 0, $180$hi = 0, $185_1 = 0, $186$hi = 0, $224_1 = 0, $224$hi = 0, $226$hi = 0, $235_1 = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244$hi = 0, $245_1 = 0, $245$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0;
  label$1 : {
   $5_1 = global$0 - 128 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($951($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $972($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$5
     }
     if ($6_1) {
      break label$4
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $959($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $953($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $1$hi;
    $60_1 = $1_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $66_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $66_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $63$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $65_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $65$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $63$hi;
    i64toi32_i32$1 = $66_1;
    i64toi32_i32$3 = $65$hi;
    i64toi32_i32$0 = $65_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $12$hi = i64toi32_i32$3;
    $67_1 = $12_1;
    $67$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $68_1 = $3_1;
    $68$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $69_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $69_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $69_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $75$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $77_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $77$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $75$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = $77$hi;
    i64toi32_i32$0 = $77_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $13_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$2 = $67$hi;
    i64toi32_i32$3 = $68$hi;
    i64toi32_i32$0 = $13$hi;
    if (($951($60_1 | 0, i64toi32_i32$1 | 0, $67_1 | 0, i64toi32_i32$2 | 0, $68_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$6
    }
    label$7 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $13$hi;
     if (!($951($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $959($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!$8_1) {
      break label$9
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$8;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $959($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $71_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $71_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $71_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$10 : {
    if ($9_1) {
     break label$10
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $959($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $72_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $72_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $72_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $14_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $136$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $139_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $140$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $136$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $140$hi;
   i64toi32_i32$1 = $139_1;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   $15_1 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = -1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
    $73_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
      $74_1 = 0
     } else {
      $74_1 = 1
     }
     $75_1 = $74_1;
    } else {
     $75_1 = 0
    }
    $73_1 = $75_1;
   }
   $6_1 = $73_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   label$11 : {
    if (($8_1 | 0) <= ($9_1 | 0)) {
     break label$11
    }
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($6_1 & 1 | 0)) {
        break label$14
       }
       label$15 : {
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$15
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $959($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$1 = $13_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $76_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $76_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $12_1 = $76_1;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $15_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $78_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $78_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $15_1 = $78_1;
       $15$hi = i64toi32_i32$1;
       break label$13;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $79_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $79_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $15_1 = $79_1;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $80_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $80_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $12_1 = $80_1;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $13_1 = $4_1;
      $13$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $180_1 = i64toi32_i32$4;
     $180$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $81_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $81_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $4_1 = $81_1;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $185_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $186$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $180$hi;
     i64toi32_i32$2 = $180_1;
     i64toi32_i32$3 = $186$hi;
     i64toi32_i32$1 = $185_1;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $82_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $83_1 = 0
       } else {
        $83_1 = 1
       }
       $84_1 = $83_1;
      } else {
       $84_1 = 0
      }
      $82_1 = $84_1;
     }
     $6_1 = $82_1;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($9_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
    $8_1 = $9_1;
   }
   label$16 : {
    if (!$6_1) {
     break label$16
    }
    i64toi32_i32$0 = $15$hi;
    $12_1 = $15_1;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    $4_1 = $13_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$16
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $959($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$5;
    break label$3;
   }
   label$17 : {
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$17
    }
    label$18 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $85_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $85_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $85_1;
     $3$hi = i64toi32_i32$5;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $86_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $86_1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $224_1 = $3_1;
     $224$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $87_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $87_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $226$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$0 = $224_1;
     i64toi32_i32$5 = $226$hi;
     i64toi32_i32$2 = $87_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$18
     }
     break label$18;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$19 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$19
    }
    $235_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $236_1 = $4_1;
    $236$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $238_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $238$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $88_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $88_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $238$hi;
    i64toi32_i32$5 = $238_1;
    i64toi32_i32$1 = $244$hi;
    i64toi32_i32$0 = $88_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $245_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $245$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $236$hi;
    i64toi32_i32$5 = $245$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1065811968;
    $959($235_1 | 0, $236_1 | 0, i64toi32_i32$1 | 0, $245_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $5_1 + 72 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $252_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $252$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $8_1 | $6_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $89_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $89_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $257$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $252$hi;
   i64toi32_i32$2 = $252_1;
   i64toi32_i32$0 = $257$hi;
   i64toi32_i32$1 = $89_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$20 : {
   $11_1 = $5_1 + 128 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $971($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $972($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $973($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$10($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $974($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $975($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $976($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($975($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0_1 = $0_1 + $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $973($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $977($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $917(HEAP32[(0 + 61160 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $979($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $981() {
  return global$0 | 0;
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  if ($1_1 >>> 0 < global$2 >>> 0) {
   fimport$11()
  }
  global$0 = $1_1;
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $1_1 | 0;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  global$2 = $0_1;
 }
 
 function $985($0_1) {
  $0_1 = $0_1 | 0;
  return abort() | 0;
 }
 
 function $986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $990($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1) | 0 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $992($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1);
 }
 
 function $993($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1) | 0 | 0;
 }
 
 function $995($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1) | 0 | 0;
 }
 
 function $996($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $4$hi) | 0 | 0;
 }
 
 function $997($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $4$hi, $5_1) | 0 | 0;
 }
 
 function $998($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $2$hi;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0);
 }
 
 function $999($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $16_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = 0;
  $9_1 = $3_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $16_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $16_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $987($5_1 | 0, $6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1004($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  $8_1 = $2_1;
  $9_1 = $3_1;
  i64toi32_i32$0 = 0;
  $11_1 = $4_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $988($6_1 | 0, $7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $993($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$12($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $25_1 = 0, $26_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0, $15_1 = 0, $15$hi = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $25_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $15_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $17_1 = $5_1;
  $17$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$2 = $17_1;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $21_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$2 = $21$hi;
  return $996($7_1 | 0, $8_1 | 0, $9_1 | 0, $15_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1007($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $26_1 = 0, $27_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $12$hi = 0, $15$hi = 0, $16_1 = 0, $16$hi = 0, $18_1 = 0, $18$hi = 0, $21$hi = 0, $22_1 = 0, $22$hi = 0;
  $8_1 = $0_1;
  $9_1 = $1_1;
  $10_1 = $2_1;
  i64toi32_i32$0 = 0;
  $12_1 = $3_1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $16_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $18_1 = $5_1;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $27_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$2 = $18_1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $22_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$2 = $22$hi;
  return $997($8_1 | 0, $9_1 | 0, $10_1 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0) | 0 | 0;
 }
 
 function $1008($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $10$hi = 0;
  $4_1 = $0_1;
  $5_1 = $1_1;
  i64toi32_i32$0 = 0;
  $7_1 = $2_1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $14_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$3 = $14_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $998($4_1 | 0, $5_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0);
 }
 
 function $1009($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$13($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_load_i64() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $1_1 = 0, $1$hi = 0, $4$hi = 0;
  i64toi32_i32$0 = 0;
  $1_1 = legalimport$wasm2js_scratch_load_i64() | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = getTempRet0() | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = legalfunc$wasm2js_scratch_load_i64() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $14;
 FUNCTION_TABLE[2] = $15;
 FUNCTION_TABLE[3] = $16;
 FUNCTION_TABLE[4] = $28;
 FUNCTION_TABLE[5] = $29;
 FUNCTION_TABLE[6] = $30;
 FUNCTION_TABLE[7] = $31;
 FUNCTION_TABLE[8] = $32;
 FUNCTION_TABLE[9] = $37;
 FUNCTION_TABLE[10] = $26;
 FUNCTION_TABLE[11] = $27;
 FUNCTION_TABLE[12] = $33;
 FUNCTION_TABLE[13] = $34;
 FUNCTION_TABLE[14] = $36;
 FUNCTION_TABLE[15] = $64;
 FUNCTION_TABLE[16] = $56;
 FUNCTION_TABLE[17] = $66;
 FUNCTION_TABLE[18] = $80;
 FUNCTION_TABLE[19] = $81;
 FUNCTION_TABLE[20] = $82;
 FUNCTION_TABLE[21] = $77;
 FUNCTION_TABLE[22] = $84;
 FUNCTION_TABLE[23] = $85;
 FUNCTION_TABLE[24] = $86;
 FUNCTION_TABLE[25] = $87;
 FUNCTION_TABLE[26] = $241;
 FUNCTION_TABLE[27] = $88;
 FUNCTION_TABLE[28] = $89;
 FUNCTION_TABLE[29] = $90;
 FUNCTION_TABLE[30] = $92;
 FUNCTION_TABLE[31] = $97;
 FUNCTION_TABLE[32] = $98;
 FUNCTION_TABLE[33] = $99;
 FUNCTION_TABLE[34] = $101;
 FUNCTION_TABLE[35] = $102;
 FUNCTION_TABLE[36] = $105;
 FUNCTION_TABLE[37] = $106;
 FUNCTION_TABLE[38] = $103;
 FUNCTION_TABLE[39] = $104;
 FUNCTION_TABLE[40] = $107;
 FUNCTION_TABLE[41] = $108;
 FUNCTION_TABLE[42] = $217;
 FUNCTION_TABLE[43] = $110;
 FUNCTION_TABLE[44] = $111;
 FUNCTION_TABLE[45] = $112;
 FUNCTION_TABLE[46] = $113;
 FUNCTION_TABLE[47] = $116;
 FUNCTION_TABLE[48] = $117;
 FUNCTION_TABLE[49] = $118;
 FUNCTION_TABLE[50] = $119;
 FUNCTION_TABLE[51] = $122;
 FUNCTION_TABLE[52] = $124;
 FUNCTION_TABLE[53] = $125;
 FUNCTION_TABLE[54] = $123;
 FUNCTION_TABLE[55] = $129;
 FUNCTION_TABLE[56] = $131;
 FUNCTION_TABLE[57] = $133;
 FUNCTION_TABLE[58] = $134;
 FUNCTION_TABLE[59] = $132;
 FUNCTION_TABLE[60] = $137;
 FUNCTION_TABLE[61] = $138;
 FUNCTION_TABLE[62] = $139;
 FUNCTION_TABLE[63] = $140;
 FUNCTION_TABLE[64] = $143;
 FUNCTION_TABLE[65] = $144;
 FUNCTION_TABLE[66] = $145;
 FUNCTION_TABLE[67] = $147;
 FUNCTION_TABLE[68] = $146;
 FUNCTION_TABLE[69] = $154;
 FUNCTION_TABLE[70] = $155;
 FUNCTION_TABLE[71] = $164;
 FUNCTION_TABLE[72] = $161;
 FUNCTION_TABLE[73] = $162;
 FUNCTION_TABLE[74] = $165;
 FUNCTION_TABLE[75] = $166;
 FUNCTION_TABLE[76] = $175;
 FUNCTION_TABLE[77] = $177;
 FUNCTION_TABLE[78] = $178;
 FUNCTION_TABLE[79] = $176;
 FUNCTION_TABLE[80] = $184;
 FUNCTION_TABLE[81] = $192;
 FUNCTION_TABLE[82] = $193;
 FUNCTION_TABLE[83] = $194;
 FUNCTION_TABLE[84] = $195;
 FUNCTION_TABLE[85] = $285;
 FUNCTION_TABLE[86] = $286;
 FUNCTION_TABLE[87] = $287;
 FUNCTION_TABLE[88] = $288;
 FUNCTION_TABLE[89] = $289;
 FUNCTION_TABLE[90] = $290;
 FUNCTION_TABLE[91] = $304;
 FUNCTION_TABLE[92] = $305;
 FUNCTION_TABLE[93] = $313;
 FUNCTION_TABLE[94] = $314;
 FUNCTION_TABLE[95] = $315;
 FUNCTION_TABLE[96] = $316;
 FUNCTION_TABLE[97] = $321;
 FUNCTION_TABLE[98] = $325;
 FUNCTION_TABLE[99] = $326;
 FUNCTION_TABLE[100] = $327;
 FUNCTION_TABLE[101] = $369;
 FUNCTION_TABLE[102] = $375;
 FUNCTION_TABLE[103] = $370;
 FUNCTION_TABLE[104] = $371;
 FUNCTION_TABLE[105] = $372;
 FUNCTION_TABLE[106] = $373;
 FUNCTION_TABLE[107] = $374;
 FUNCTION_TABLE[108] = $376;
 FUNCTION_TABLE[109] = $379;
 FUNCTION_TABLE[110] = $380;
 FUNCTION_TABLE[111] = $381;
 FUNCTION_TABLE[112] = $403;
 FUNCTION_TABLE[113] = $404;
 FUNCTION_TABLE[114] = $414;
 FUNCTION_TABLE[115] = $415;
 FUNCTION_TABLE[116] = $416;
 FUNCTION_TABLE[117] = $417;
 FUNCTION_TABLE[118] = $418;
 FUNCTION_TABLE[119] = $419;
 FUNCTION_TABLE[120] = $420;
 FUNCTION_TABLE[121] = $412;
 FUNCTION_TABLE[122] = $413;
 FUNCTION_TABLE[123] = $421;
 FUNCTION_TABLE[124] = $422;
 FUNCTION_TABLE[125] = $423;
 FUNCTION_TABLE[126] = $460;
 FUNCTION_TABLE[127] = $483;
 FUNCTION_TABLE[128] = $488;
 FUNCTION_TABLE[129] = $481;
 FUNCTION_TABLE[130] = $482;
 FUNCTION_TABLE[131] = $484;
 FUNCTION_TABLE[132] = $485;
 FUNCTION_TABLE[133] = $489;
 FUNCTION_TABLE[134] = $490;
 FUNCTION_TABLE[135] = $491;
 FUNCTION_TABLE[136] = $493;
 FUNCTION_TABLE[137] = $498;
 FUNCTION_TABLE[138] = $512;
 FUNCTION_TABLE[139] = $518;
 FUNCTION_TABLE[140] = $509;
 FUNCTION_TABLE[141] = $511;
 FUNCTION_TABLE[142] = $513;
 FUNCTION_TABLE[143] = $514;
 FUNCTION_TABLE[144] = $520;
 FUNCTION_TABLE[145] = $521;
 FUNCTION_TABLE[146] = $522;
 FUNCTION_TABLE[147] = $526;
 FUNCTION_TABLE[148] = $529;
 FUNCTION_TABLE[149] = $532;
 FUNCTION_TABLE[150] = $558;
 FUNCTION_TABLE[151] = $557;
 FUNCTION_TABLE[152] = $559;
 FUNCTION_TABLE[153] = $560;
 FUNCTION_TABLE[154] = $547;
 FUNCTION_TABLE[155] = $550;
 FUNCTION_TABLE[156] = $552;
 FUNCTION_TABLE[157] = $553;
 FUNCTION_TABLE[158] = $549;
 FUNCTION_TABLE[159] = $555;
 FUNCTION_TABLE[160] = $561;
 FUNCTION_TABLE[161] = $562;
 FUNCTION_TABLE[162] = $563;
 FUNCTION_TABLE[163] = $569;
 FUNCTION_TABLE[164] = $573;
 FUNCTION_TABLE[165] = $571;
 FUNCTION_TABLE[166] = $576;
 FUNCTION_TABLE[167] = $564;
 FUNCTION_TABLE[168] = $566;
 FUNCTION_TABLE[169] = $567;
 FUNCTION_TABLE[170] = $568;
 FUNCTION_TABLE[171] = $591;
 FUNCTION_TABLE[172] = $592;
 FUNCTION_TABLE[173] = $593;
 FUNCTION_TABLE[174] = $594;
 FUNCTION_TABLE[175] = $597;
 FUNCTION_TABLE[176] = $599;
 FUNCTION_TABLE[177] = $600;
 FUNCTION_TABLE[178] = $598;
 FUNCTION_TABLE[179] = $603;
 FUNCTION_TABLE[180] = $604;
 FUNCTION_TABLE[181] = $605;
 FUNCTION_TABLE[182] = $606;
 FUNCTION_TABLE[183] = $607;
 FUNCTION_TABLE[184] = $625;
 FUNCTION_TABLE[185] = $626;
 FUNCTION_TABLE[186] = $627;
 FUNCTION_TABLE[187] = $628;
 FUNCTION_TABLE[188] = $648;
 FUNCTION_TABLE[189] = $649;
 FUNCTION_TABLE[190] = $650;
 FUNCTION_TABLE[191] = $651;
 FUNCTION_TABLE[192] = $657;
 FUNCTION_TABLE[193] = $658;
 FUNCTION_TABLE[194] = $659;
 FUNCTION_TABLE[195] = $660;
 FUNCTION_TABLE[196] = $674;
 FUNCTION_TABLE[197] = $675;
 FUNCTION_TABLE[198] = $676;
 FUNCTION_TABLE[199] = $672;
 FUNCTION_TABLE[200] = $673;
 FUNCTION_TABLE[201] = $677;
 FUNCTION_TABLE[202] = $678;
 FUNCTION_TABLE[203] = $701;
 FUNCTION_TABLE[204] = $699;
 FUNCTION_TABLE[205] = $700;
 FUNCTION_TABLE[206] = $702;
 FUNCTION_TABLE[207] = $703;
 FUNCTION_TABLE[208] = $722;
 FUNCTION_TABLE[209] = $723;
 FUNCTION_TABLE[210] = $729;
 FUNCTION_TABLE[211] = $730;
 FUNCTION_TABLE[212] = $810;
 FUNCTION_TABLE[213] = $811;
 FUNCTION_TABLE[214] = $897;
 FUNCTION_TABLE[215] = $926;
 FUNCTION_TABLE[216] = $891;
 FUNCTION_TABLE[217] = $919;
 FUNCTION_TABLE[218] = $895;
 FUNCTION_TABLE[219] = $914;
 FUNCTION_TABLE[220] = $915;
 FUNCTION_TABLE[221] = $921;
 FUNCTION_TABLE[222] = $922;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "malloc": $963, 
  "free": $964, 
  "mountDataFilepath": $637, 
  "unmountDataFilepath": $638, 
  "CanPlayFileJS": $639, 
  "ProbeFileEx": $644, 
  "CanPlayToString": $667, 
  "GetDecoderName": $670, 
  "GetDecoderTimesliceMaxCount": $671, 
  "__errno_location": $868, 
  "fflush": $884, 
  "stackSave": $981, 
  "stackRestore": $982, 
  "stackAlloc": $983, 
  "__set_stack_limit": $984, 
  "__growWasmMemory": $985, 
  "dynCall_vi": $986, 
  "dynCall_iiij": $1003, 
  "dynCall_iiiij": $1004, 
  "dynCall_iiii": $989, 
  "dynCall_ii": $990, 
  "dynCall_iiiii": $991, 
  "dynCall_vii": $992, 
  "dynCall_jiji": $1005, 
  "dynCall_iii": $994, 
  "dynCall_iiiiii": $995, 
  "dynCall_iiijj": $1006, 
  "dynCall_iiijji": $1007, 
  "dynCall_vij": $1008, 
  "dynCall_viiiii": $999, 
  "dynCall_iiiiiiii": $1000, 
  "dynCall_iiiiiii": $1001, 
  "dynCall_iidiiii": $1002
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "I2JhdmlfcGFyc2VyX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL2F2aS9iYXZpX3BhcnNlci5jAGhhbmRsZXIAb2ZmPj0wAGJhdmlfcGFyc2VyX3NlZWs6ICVwIDB4JXglMDh4IG5vLW9wAGJhdmlfcGFyc2VyX3NlZWs6ICVwIDB4JXglMDh4KCVsZCkAbGVmdD09MABzdGVwPj0wAG9iai0+c2l6ZSA+PSBvYmotPmxlZnQAYXZpLT5vYmplY3RzLnNpemUgPiAwAGF2aS0+b2JqZWN0cy5zaXplPD1CX0FWSV9NQVhfT0JKRUNUUwBjZmcAZmFjdG9yeQBiYXZpX2Rlc3Ryb3k6ICUjbHggbG9zdCBvYmplY3RfaGFuZGxlciAlI2x4IC4uLgBiYXZpX2Rlc3Ryb3k6ICUjbHggbG9zdCBvYmplY3RfaGFuZGxlciAlI2x4ICclYyVjJWMlYycAc2l6ZT09MQBvYmoAYmF2aV9wYXJzZXJfZmVlZDogJSNseCByZWFjaGVkIHByZW1hdHVyZSBlbmQgb2Ygb2JqZWN0OiclYyVjJWMlYyc6JWQsJWQAYmF2aV9wYXJzZXJfZmVlZDogJSNseCByZWFjaGVkIGJvdHRvbSBvZiB0aGUgZmlsZQBhdmktPm9iamVjdHMuc2l6ZT4wAGJhdmlfcGFyc2VyX2ZlZWQ6ICUjbHggcmVzeW5jZWQgd2l0aCAnJWMlYyVjJWMnOiV1IGF0ICVsdSBpbiAnJWMlYyVjJWMnOiV1AHNpemU9PTAAcGFyZW50AHNpbmsAYmF2aV9wYXJzZXIAb2JqLT5sZWZ0ID49IHByZXYtPnNpemUAZm91bmQgaGVhZGVyICclYyVjJWMlYycgc2l6ZToldQBmb3VuZCBoZWFkZXIgJyVjJWMlYyVjJyB0eXBlOiclYyVjJWMlYycgc2l6ZSAldQAlcDogaW52YWxpZCBBVkkgZmlsZQBvZmZzZXQ8PXNpemUAZm91bmQgTElTVCBlbGVtICclYyVjJWMlYycgc2l6ZSAldQBiX2F2aV9wYXJzZV9lbGVtOiAlI2x4IGludmFsaWQgb2JqZWN0IHNpemUgJXU6JXUAYl9hdmlfdmVyaWZ5X2ZvdXJjYzogJXAgZGV0ZWN0aW5nIGludmFsaWQgZWxlbWVudCAlIzA4eCBhdCAldQB1c2VyX29iamVjdDogJyVjJWMlYyVjJ1snJWMlYyVjJWMnXSAldSAtPiAlI2x4AHNraXBfbGVuPT1sZW4AYXRvbQAjYmF2aV9wcm9iZV90AAAAAAAAAAAAAGF2aQAAAGRpdngAAHh2aWQAAAAAAAAAAAkAAAAACAAADAAAAAoAAAALAAAADAAAAA0AAAAOAAAAYl9hdmlfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiYXZpX3Byb2JlAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9hdmkvYmF2aV9wcm9iZS5jAGJfYXZpX3Byb2JlX2hkcmw6ICVwICclYyVjJWMlYydbJyVjJWMlYyVjJ10gJXUgYnl0ZXMAYl9hdmlfcHJvYmVfaGRybDogJXAgY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAYl9hdmlfcHJvYmVfaGRybDogJSNseCBlcnJvciBpbiB0aGUgbWFpbiBoZWFkZXIAQXVkaW8gLSAAYl9hdmlfcHJvYmVfc3RybDogJyVjJWMlYyVjJ1snJWMlYyVjJWMnXSAldSBieXRlcwB0cmFjaz09TlVMTABiX2F2aV9wcm9iZV9zdHJsOiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBvYmplY3QAdHJhY2stPnR5cGU9PWJtZWRpYV90cmFja190eXBlX3ZpZGVvICYmIHRyYWNrLT5pbmZvLnZpZGVvLmNvZGVjPT1idmlkZW9fY29kZWNfaDI2NABiX2F2aV9wcm9iZV9vZG1sOiAlcCAnJWMlYyVjJWMnWyclYyVjJWMlYyddICV1IGJ5dGVzAGJfYXZpX3Byb2JlX29kbWw6ICUjbHggZXJyb3IgaW4gdGhlIG9kbWwgaGVhZGVyAGJfYXZpX3Byb2JlX3JlYzogJXAgJyVjJWMlYyVjJ1snJWMlYyVjJWMnXSAldSBieXRlcwBwcm9iZS0+c3RyZWFtPT1OVUxMAGJfYXZpX3Byb2JlX3BhcnNlOiAlcCByZWFkaW5nICV1OiV1AGJfYXZpX3Byb2JlX3BhcnNlOiAlcCByZWFkICV1OiV1IC0+ICUjbHgAYl9hdmlfcHJvYmVfcGFyc2U6ICVwIHJlYWRpbmcgaW5kZXggJXU6JXUAYl9hdmlfcHJvYmVfcGFyc2U6ICVwIHJlYWQgaW5kZXggJXU6JXUgLT4gJXAAYl9hdmlfcHJvYmVfcGFyc2VfaW5kZXg6ICVwIGNhbid0IHJlYWQgZW50aXJlIGNvbnRlbnRzIG9mIGluZGV4IChvZmZzZXQ6JXUgc2l6ZToldSkgaW4gYSBzaW5nbGUgY2h1bmsuIE11bHRpcGxlIHJlYWRzIG5vdCB5ZXQgaW1wbGVtZW50ZWQuAFZpZGVvIHRpbWUgJXVtcywgc2V0dGluZyBtYXggZ2FwIHRvICVsZABzdHJlYW0AYmF2aV9yZWFkX3N0cmVhbWhlYWRlcjogJyVjJWMlYyVjJyAlcyBJbml0aWFsRnJhbWVzOiV1IFNjYWxlOiV1IFJhdGU6JXUgU2FtcGxlU2l6ZToldSBTdGFydDoldSBMZW5ndGg6JXUARElTQUJMRUQgAABiYXZpX3JlYWRfbWFpbmhlYWRlcjogJXMlcyVzIE1heEJ5dGVzUGVyU2VjOiV1IE1pY3JvU2VjUGVyRnJhbWU6JXUgU3RyZWFtczoldSBUb3RhbEZyYW1lczoldSBJbml0aWFsRnJhbWVzOiV1ICV1eCV1AEhBU0lOREVYIABNVVNUVVNFSU5ERVggAElTSU5URVJMRUFWRUQgAGJhdmlfcmVhZF9kbWxoOiBUb3RhbEZyYW1lczoldQBhdWRpbwAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvYXZpL2JhdmlfdXRpbC5jAGhlYWRlcgB3YXZlAGJhdmlfYXVkaW9fc3RhdGVfc2V0X2hlYWRlcjolI2x4IG5CbG9ja0FsaWduOiV1OiV1IFZCUiBzY2FsZToldSBDQlIgc2NhbGU6JXUAYmF2aV9hdWRpb19zdGF0ZV91cGRhdGU6JXAgQ0JSOiV1IC0+IFZCUjoldSBza2V3OiVkAGJhdmlfYXVkaW9fc3RhdGVfdXBkYXRlOiUjbHhbJXNdIGJsb2NrX2xlbjoldSgldToldSkgYmxvY2tfY291bnQ6JXUAQ0JSAFZCUgBNQVlCRSBWQlIATUFZQkUgQ0JSAGJhdmlfYXVkaW9fc3RhdGVfZ2V0X3RpbWVzdGFtcDolI2x4IGludmFsaWQgYXVkaW8gaGVhZGVyADAAYmF2aV9hdWRpb19zdGF0ZV9nZXRfdGltZXN0YW1wOiUjbHhbJXNdIHRpbWVzdGFtcDoldSBibG9ja19jb3VudDoldSBkYXRhX3NpemU6JXUAYmF2aV91dGlsAAAAAAAAAAAAAAAjYmZpbGVfYnVmZmVyX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL2JmaWxlL2JmaWxlX2J1ZmZlci5jACFidWYtPmFzeW5jX3N0YXRlLmFjdGl2ZQByZXN1bHQAIWJ1Zi0+YXN5bmNfc3RhdGUud2FpdF9mb3Jfc2VnAGZhY3RvcnkAY2ZnAGJmaWxlX2J1ZmZlcl9jcmVhdGU6IGJ1ZmZlciB3YXNuJ3QgcHJvdmlkZWQAYmZpbGVfYnVmZmVyX2NyZWF0ZTogaW52YWxpZCBudW1iZXIgb2Ygc2VnbWVudHMAYmZpbGVfYnVmZmVyX2NyZWF0ZTogaW52YWxpZCBidWZmZXIgc2l6ZQBiZmlsZV9idWZmZXJfY3JlYXRlOiBmaWxlIGRlc2NyaXB0b3Igd2Fzbid0IHByb3ZpZGVkAGJmaWxlX2J1ZmZlcl9jcmVhdGU6IGludmFsaWQgb3B0aW9ucyBmb3IgYXN5biBJL08AYmZpbGVfYnVmZmVyX2NyZWF0ZTogc2VnbWVudCBzaXplICV1IDwgJXUgKGJ1Zl9sZW46JXUgbnNlZ3M6JXUgLT4gJXUpAGJmaWxlX2J1ZmZlcl9jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAGJmaWxlX2J1ZmZlcl9jbGVhcjogJSNseCBjbGVhcmluZyB3aGlsZSBkb2luZyBhc3luYyBJL08AYmZpbGVfYnVmZmVyX2NsZWFyOiAlI2x4IGNsZWFyaW5nIHdoaWxlIGhhdmUgYWN0aXZlIGJ1ZmZlcnMAYmZpbGVfYnVmZmVyX2NsZWFyOiAlcCBidWZmZXJzICVwOiV1ICVzOiV1AGJfZmlsZV9idWZmZXJfYXN5bmNfcmVhZDogJSNseCBuZWdhdGl2ZSBvZmZzZXQgJWxkAGF0b21fc2l6ZTw9bGVmdAAoc2VnKS0+bGluay5sX2hlYWQgPT0gKGNvbnN0IHZvaWQgKikoJmJ1Zi0+YnVzeSkAKHNlZyktPmxpbmsubF9oZWFkID09IChjb25zdCB2b2lkICopKCZidWYtPmZyZWUpACVwOiBydW4gb3V0IG9mIG1lbW9yeSAoJXUgLyAldSkAc2VnAHNlZy0+c2l6ZSA8IDF1PDwzMQByZWFkX29mZiA8PSBvZmYAcmVhZF9vZmYgKyAoaW50KWJ1Zi0+c2VnbWVudF9zaXplID49IG9mZgAocHJldiktPmxpbmsubF9oZWFkID09IChjb25zdCB2b2lkICopKCZidWYtPmJ1c3kpAG9mZiA+PSBzZWctPm9mZgBzZWctPnNpemUgPCBidWYtPnNlZ21lbnRfc2l6ZQBzZWctPnNpemUgPD0gYnVmLT5zZWdtZW50X3NpemUAEQAAAAQAAAB2ZWMtPmJhc2UgPj0gYnVmLT5jZmcuYnVmICYmICh1aW50OF90ICopdmVjLT5iYXNlIDw9ICh1aW50OF90ICopYnVmLT5jZmcuYnVmK2J1Zi0+Y2ZnLmJ1Zl9sZW4AYl9maWxlX2J1ZmZlcl9hdG9tX2ZyZWU6ICUjbHggdW5rbm93biBidWZfaWQ6JWx4AHNlZy0+cmVmX2NudD4wAGJfZmlsZV9idWZmZXJfcmVhZDogJSNseCBuZWdhdGl2ZSBvZmZzZXQgJWxkAGJfZmlsZV9idWZmZXJfcmVhZF90b19zZWdtZW50OiVwICVzOiVkAGJmaWxlX2J1ZmZlcgAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvYmZpbGUvYmZpbGVfY2FjaGUuYwBzZWdtZW50AGJ1ZmZlcgBmYWN0b3J5AG1pbl9yZWFkX3NpemU+MABiZmlsZV9jYWNoZWRfc2VnbWVudF9zZWVrOiAlcCBvdXRzaWRlIG9mIGJvdW5kcyAldToldQBzdGFydD49MABhY2N1bV9zaXplID09IGJhdG9tX2FjY3VtX2xlbihzZWdtZW50LT5hY2N1bSkAcmVzZXJ2ZV9zaXplID4gYWNjdW1fc2l6ZQAlczolcCBlbmQgb2YgZGF0YSAldToldQBsb2FkX3NpemU+MAAlczolcCByZWFkIGJsb2NrIGRhdGEgYnVmZmVyOiVwIGF0ICV1IHNpemU6JXUgdG90YWw6JXUAcmVzZXJ2ZV9zaXplPj1taW5fc2l6ZQBiZmlsZV9jYWNoZWRfc2VnbWVudF9yZXNlcnZlX2N1c3RvbV9idWZmZXJfbWluACVzOiVwIHJlYWRpbmcgYmxvY2sgZGF0YSBidWZmZXI6JXAgYXQgJXUgc2l6ZToldSgldToldSkAJXM6JXAgcmVhZCBibG9jayBmYWlsZWQgYnVmZmVyOiVwIGF0ICV1IHNpemU6JXUoJXUpIHJlc3VsdDoldSBhY2N1bToldQBiZmlsZV9jYWNoZQAAAAAAACNiZmlsZV9pb19yZWFkX3N0ZGlvAAAAABIAAAATAAAAFAAAABUAAAAAAAAAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL2JmaWxlL2JmaWxlX3N0ZGlvLmMAYl9zdGRpb19yZWFkOiAlI2x4ICVsdToldQBiZmlsZV9zdGRpbwBiX3N0ZGlvX3NlZWs6ICUjbHggJWx1OiVkAAAAAAAAACNiYWFjX2FkdHNfcHJvYmVfdABiX2FhY19hZHRzX3Byb2JlX3BhcnNlX2hlYWRlcjogc3luY193b3JkOiUjeABiX2FhY19hZHRzX3Byb2JlX3BhcnNlX2hlYWRlcjogc2FtcGxpbmdfZnJlcXVlbmN5X2luZGV4OiV1IGNoYW5uZWxfY29uZmlndXJhdGlvbjoldSBhYWNfZnJhbWVfbGVuZ3RoOiV1AAAAAAAAAAAAAHcBAIhYAQAA+gAAgLsAAESsAAAAfQAAwF0AACJWAACAPgAA4C4AABErAABAHwAAAAECAwQFBghiX2FhY19hZHRzX3Byb2JlX3BhcnNlX2hlYWRlcjogYXNzdW1pbmcgU0JSIGZvciBsb3cgYmFuZHdpZHRoIHN0cmVhbQoAYWFjAAAAAAAAAAAAAAABAAAAAwAAAI4YAAAAwAAAFgAAABcAAAAYAAAAGQAAABoAAABiYWFjX2FkdHNfcHJvYmUAZmFjdG9yeQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmFhY19hZHRzX3Byb2JlLmMAYl9hYWNfYWR0c19wcm9iZV9mZWVkOiAlcCBzeW5jX3dvcmQgJSN4IGF0OiV1AGJfYWFjX2FkdHNfcHJvYmVfZmVlZDogJXAgaGVhZGVyICV1IGF0OiV1IHNpemU6JXUgc2FtcGxlcmF0ZToldSBjaGFubmVsczoldQBiX2FhY19hZHRzX3Byb2JlX2ZlZWQ6ICVwIG91dCBvZiBzeW5jIGF0ICV1ICUjeC0lI3goJSN4KQBiX2FhY19hZHRzX3Byb2JlX2ZlZWQ6ICVwIHRyaW0gJXUAACNiYWFjX2xvYXNfcHJvYmVfdABhYWMAAAAAAAAAAAAAAQAAAAMAAAATGgAAAAAKABsAAAAcAAAAHQAAAB4AAAAaAAAAZmFjdG9yeQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmFhY19sb2FzX3Byb2JlLmMAYl9hYWNfbG9hc19wcm9iZV9mZWVkOiAlcCBzeW5jX3dvcmQgJSN4IGF0OiV1IGZyYW1lX2NudDoldQBiX2FhY19sb2FzX3Byb2JlX2ZlZWQ6ICVwIGhlYWRlciAldSBhdDoldSBzaXplOiV1IHNhbXBsZXJhdGU6JXUgY2hhbm5lbHM6JXUgY29kZWM6JXUAYl9hYWNfbG9hc19wcm9iZV9mZWVkOiAlcCBvdXQgb2Ygc3luYyBhdCAldSAlI3gtJSN4KCUjeCkAYl9hYWNfbG9hc19wcm9iZV9mZWVkOiAlcCBpbnZhbGlkIGZyYW1lIGF0ICV1AGJfYWFjX2xvYXNfcHJvYmVfZmVlZDogJXAgdHJpbSB0byBmcmFtZSAldQBiX2FhY19sb2FzX3Byb2JlX2ZlZWQ6ICVwIHRyaW0gJXUAYmFhY19sb2FzX3Byb2JlAGJfYWFjX2xvYXNfcHJvYmVfcGFyc2VfaGVhZGVyOiBzeW5jX3dvcmQ6JSN4IGxlZnQ6JXUAbGF5ZXIgJXU6JXUgcHJvZyAldToldQBhdWRpb1NwZWNpZmljQ29uZmlnRmluaXNoPj0gYXVkaW9TcGVjaWZpY0NvbmZpZ1N0YXJ0AAABAgMEBQYII2JhYzNfcHJvYmVfdAAAAAAAAAAAIABAAEUAYAAgAEAARgBgACgAUABXAHgAKABQAFgAeAAwAGAAaACQADAAYABpAJAAOABwAHkAqAA4AHAAegCoAEAAgACLAMAAQACAAIwAwABQAKAArgDwAFAAoACvAPAAYADAANAAIAFgAMAA0QAgAXAA4ADzAFABcADgAPQAUAGAAAABFgGAAYAAAAEXAYABoABAAVwB4AGgAEABXQHgAcAAgAGhAUACwACAAaIBQALgAMAB5wGgAuAAwAHoAaACAAEAAi0CAAMAAQACLgIAA0ABgAK4AsADQAGAArkCwAOAAQADQwOABIABAANEA4AEwAGAA88DQAXAAYAD0ANABQACAARaBAAGAAIABFsEAAZAAoAE5QTABkACgATmBMAGgAIABXEFgAeAAgAFcgWAB4C7RKwAfQIBAgMDBAQFAQIDBmFjMwAAAAAAAAAAAAAAAQAAAIEAAADSHQAAAC0AAB8AAAAgAAAAIQAAACIAAAAjAAAAZmFjdG9yeQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmFjM19wcm9iZS5jAGJfYWMzX3Byb2JlX2ZlZWQ6ICVwIHN5bmNfd29yZCBhdDoldQBiX2FjM19wcm9iZV9mZWVkOiAlcCBoZWFkZXIgJXUgYXQ6JXUgc2l6ZToldSBzYW1wbGVyYXRlOiV1IGJpdHJhdGU6JXUgJXMAQUMzAEFDMysAYl9hYzNfcHJvYmVfZmVlZDogJXAgb3V0IG9mIHN5bmMgYXQgJXUgJSN4KCUjeCkAYl9hYzNfcHJvYmVfZmVlZDogJXAgdHJpbSAldQBiYWMzX3Byb2JlACNiYWlmZl9wcm9iZV90AGFpZgAAAAAAAAAAAAABAAAANx8AAAwAAAAmAAAAJwAAACgAAAApAAAAKgAAAGJfYWlmZl9wcm9iZV9jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAGJhaWZmX3Byb2JlAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9iYWlmZl9wcm9iZS5jAGJfYWlmZl9wcm9iZV9jb21tOiVwIHByb2JlICclYyVjJWMlYycgJXU6JXU6JSNseCgldSkAYmFpZmZfcmVhZF9jb21tOiBudW1DaGFubmVsczoldSBudW1TYW1wbGVGcmFtZXM6JXUgc2FtcGxlU2l6ZToldQBiYWlmZl91dGlsACNiYW1yX3Byb2JlAGFtcgAAAAAAAAAAABUAAAB4IAAACQAAACsAAAAsAAAALQAAAC4AAAAqAAAAYl9hbXJfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiYW1yX3Byb2JlAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9iYW1yX3Byb2JlLmMAYl9hbXJfcHJvYmVfcGFyc2U6ICVwIHJlYWRpbmcgJXU6JXUAYl9hbXJfcHJvYmVfcGFyc2U6ICVwIHJlYWQgJXU6JXUgLT4gJXAAI2JhcGVfcHJvYmVfdABhcGUAAAAAAAAAAAAAAAABAAAAgSEAADQAAAAvAAAAMAAAADEAAAAyAAAAKgAAAGJfYXBlX3Byb2JlX2NyZWF0ZTogY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAYmFwZV9wcm9iZQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmFwZV9wcm9iZS5jAGJhcGVfcGFyc2VfZmlsZV9kZXNjcmlwdG9yOiBmaWxlX3ZlcnNpb246JXUgZGVzY3JpcHRvcl9sZW5ndGg6JXUgaGVhZGVyX2xlbmd0aDoldSBzZWVrdGFibGVfbGVuZ3RoOiV1IHdhdmhlYWRlcl9sZW5ndGg6JXUgYXVkaW9kYXRhX2xlbmd0aDoldSB3YXZ0YWlsX2xlbmd0aDoldQBiYXBlX3BhcnNlX2ZyYW1lX2hlYWRlcjogY29tcHJlc3Npb25fdHlwZToldSBmb3JtYXRfZmxhZ3M6JSN4IGJsb2Nrc19wZXJfZnJhbWU6JXUgZmluYWxfZnJhbWVfYmxvY2tzOiV1IHRvdGFsX2ZyYW1lczoldSBiaXRzX3Blcl9zYW1wbGU6JXUgY2hhbm5lbHM6JXUgc2FtcGxlX3JhdGU6JXUAYmFwZV91dGlsAAAAAAAAAAAAAAAAACNiYXZjX3ZpZGVvX3Byb2JlX3QAAAAAAAAAAAAAAAAAZXMAAAAAdmVzAAAAbXBnAAAAYXZjAAAAMjZsAAAAMjY0AAAAAAAAAAAAAAAAAAAAGwAAALAjAADA4eQAMwAAADQAAAA1AAAANgAAADcAAABmYWN0b3J5AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9iYXZjX3ZpZGVvX3Byb2JlLmMAJXM6JSNseCBmb3VuZCBTUFM6JXMsIHNwc19pZD0ldQBiX2F2Y192aWRlb19wcm9iZV9mZWVkACVzOiUjbHggZm91bmQgUFBTLCBwcHNfaWQ9JXUsIHNwc19pZD0ldQAlczolI2x4IGZvdW5kIFNILCBwcHNfaWQ9JXUgaWZyYW1lPSVkIHNwcz0lZCBwcHM9JWQAJXM6JSNseCBTUFM6JXUgUFBTOiV1LCBTSDoldSwgSS1GcmFtZToldQBiX2F2Y192aWRlb19wYXJzZV9zcHM6IGZpbmFsIHBpY3R1cmUgZGltZW5zaW9ucyA9ICV1eCV1AGJhdmNfdmlkZW9fcHJvYmUAYl9hdmNfdmlkZW9fcHJvYmVfbGFzdDolI2x4IHNwczoldTolZCBwcHM6JXU6JWQgc3NwczoldSBpZnJhbWU6JXUgJXMAZXh0ZW5zaW9uAABiX2F2Y192aWRlb19wcm9iZV9sYXN0OiBTUFM6JXMAACNiYXZzX3ZpZGVvX3Byb2JlX3QAAAAAAAAAAAAAAAAAZXMAAAAAdmVzAAAAbXBnAAAAYXZzAAAAAAAAAAAAAAAAAAAAQgAAAPAlAABAS0wAOAAAADkAAAA6AAAAOwAAADwAAABmYWN0b3J5AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9iYXZzX3ZpZGVvX3Byb2JlLmMAYl9hdnNfdmlkZW9fcHJvYmVfZmVlZDogJSNseCB2aWRlbyAldXgldQBiX2F2c192aWRlb19wcm9iZV9mZWVkOiAlI2x4IHNlcXVlbmNlOiV1IHBpY3R1cmU6JXUgZXh0ZW5zaW9uOiV1AGJfYXZzX3ZpZGVvX3Byb2JlX2ZlZWQ6ICUjbHggZm91bmQgc2NvZGUgJSN4IG5vdCBhIHZpZGVvIEVTAGJfYXZzX3ZpZGVvX3Byb2JlX2ZlZWQ6ICVwIHRyaW0gJXUAAAAAAAAAAAAAAAAAqF0AAMBdAACoYQAAEnUAADB1AABQwwAAJOoAAGDqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYmF2c192aWRlb19wcm9iZQBiX2F2c192aWRlb19wcm9iZV9sYXN0OiAlI2x4ICV1ICV1ICV1ACNiZHRzX3Byb2JlX3QAZHRzAAAAAAAAAAAAAAAAAQAAAIIAAADlJwAAAC0AAD0AAAA+AAAAPwAAAEAAAAAaAAAAZmFjdG9yeQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmR0c19wcm9iZS5jAGJfZHRzX3Byb2JlX2ZlZWQ6ICVwIHN5bmNfd29yZCBhdDoldQBiX2R0c19wcm9iZV9mZWVkOiAlcCBoZWFkZXIgJXUgYXQ6JXUgc2l6ZToldSBzYW1wbGVyYXRlOiV1IGJpdHJhdGU6JXUAYl9kdHNfcHJvYmVfZmVlZDogJXAgZHJvcHBpbmcgdHJhaWxpbmcgemVybwBiX2R0c19wcm9iZV9mZWVkOiAlcCBvdXQgb2Ygc3luYyBhdCAldSAlI3goJSN4KQBiX2R0c19wcm9iZV9mZWVkOiAlcCB0cmltICV1AGJkdHNfcHJvYmUAAAAAAAECAgICAwMEBAUGBgYHCAgAAEAfgD4AfQAAAAARKyJWRKwAAAAA4C7AXYC7AAAAACAAOABAAGAAcACAAMAA4AAAAUABgAHAAQACQAKAAgADwAMABIAEAAVABYAFgwXABQAGgAcACAAMAA8AAAAAAAAQEBQUABgYAAAAAAAAAAAAI2JkdmJfc3VidGl0bGVfcHJvYmVfdABmYWN0b3J5AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9iZHZiX3N1YnRpdGxlX3Byb2JlLmMAYl9kdmJfc3VidGl0bGVfcHJvYmU6IGZvdW5kIHN1YnRpdGxlIGRhdGEAAAAAAAAAAAAABAAAAAAAAAB/KgAAACAAAEEAAABCAAAAQwAAAEQAAAAaAAAAYmR2Yl9zdWJ0aXRsZV9wcm9iZQAjYmZsYWNfcGFyc2VyX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JmbGFjX3BhcnNlci5jAGJmbGFjX3BhcnNlcl9pbnN0YWxsX2hhbmRsZXI6PiAlI2x4ICAlI2x4ICUjeABoYW5kbGVyAGJmbGFjX3BhcnNlcl9pbnN0YWxsX2hhbmRsZXI6PCAlI2x4ICAlI2x4ICUjeABiZmxhY19wYXJzZXJfcmVtb3ZlX2hhbmRsZXI6PiAlI2x4ICAlI2x4ICUjeABiZmxhY19wYXJzZXJfcmVtb3ZlX2hhbmRsZXI6PCAlI2x4ICAlI2x4ICUjeABiZmxhY19wYXJzZXJfcmVzZXQ+OiAlI2x4AGJmbGFjX3BhcnNlcl9yZXNldDw6ICUjbHgAYmZsYWNfcGFyc2VyX2NyZWF0ZT46ICVwAGNmZwBmYWN0b3J5AGJmbGFjX3BhcnNlcl9jcmVhdGU+OiAlcCAlcABiZmxhY19kZXN0cm95PjogJSNseABiZmxhY19kZXN0cm95OiAlI2x4IGxvc3Qgb2JqZWN0X2hhbmRsZXIgJSNseCAuLi4AYmZsYWNfZGVzdHJveTw6ICUjbHgAYmZsYWNfcGFyc2VyX2ZlZWQ+OiVwICVwICV1AGZvdW5kIGludmFsaWQgbWV0YWRhdGEgdHlwZSAldSwgc3dpdGNoaW5nIHRvIHBheWxvYWQgbW9kZQBiZmxhY19wYXJzZXJfZmVlZDolcCBjYXB0dXJpbmc6JXUgc2l6ZToldQBiZmxhY19wYXJzZXJfZmVlZDolcCBjYXB0dXJlZDoldSBzaXplOiVkAGJmbGFjX3BhcnNlcl9mZWVkOiVwIGRpc2NhcmRpbmc6JXUgc2l6ZTolZCgldSkAZXh0cmFjdGVkIGZyYW1lICVwOiV1ACFmbGFjLT5zdGF0ZS5wYXJzZXJfcmV0dXJuAGNvbnRpbnVlIGxvb2sgZm9yIHRoZSBmcmFtZSBlbmQgYWZ0ZXIgJXUAYmZsYWNfcGFyc2VyAGJfZmxhY190cmltPjogJXAgJXU6JXUAYl9mbGFjX3RyaW08ICVwICV1ACNiZmxhY19wcm9iZQBmbGFjAAAAAAAAAAAAEgAAACMuAAAIAAAASAAAAEkAAABKAAAASwAAACoAAABiX2ZsYWNfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYmZsYWNfcHJvYmUuYwBiZmxhY19wcm9iZQBoYW5kbGVyAG9iamVjdABiX2ZsYWNfcHJvYmVfc3RyZWFtaW5mbzolcABiX2ZsYWNfcHJvYmVfcGFyc2U6ICVwIHJlYWRpbmcgJXU6JXUAYl9mbGFjX3Byb2JlX3BhcnNlOiAlcCByZWFkICV1OiV1IC0+ICVwAGJsb2NrX2hlYWRlcjolcCB0eXBlOiV1IGxlbmd0aDoldSAlcwBsYXN0AABzdHJlYW1pbmZvOiVwIGJsb2Nrc2l6ZToldSwldSBmcmFtZXNpemU6JXUsJXUgc2FtcGxlX3JhdGU6JXUgY2hhbm5lbF9jb3VudDoldSBzYW1wbGVfc2l6ZToldSBzYW1wbGVzOiVsZABmaW5kX2ZyYW1lX2VuZDogZm91bmQgZnJhbWUgYm91bmRhcnkgYXQgJXUgY3JjOiUjeABmaW5kX2ZyYW1lX2VuZDogZW9zIGF0ICV1KCV1KQBGUkFNRV9FUlJPUjogJXMgJSN4ICE9ICUjeCBhdCBsaW5lOiV1AHN5bmMARlJBTUVfRVJST1I6ICVzICVzJXMgYXQgbGluZToldQByZXNlcnZlZABlb3MAZW5kIG9mIGRhdGEAZnJhbWUAc2FtcGxlX251bWJlcgBmcmFtZV9udW1iZXIARlJBTUVfRVJST1I6ICVzIGludmFsaWQgYmxvY2tfc2l6ZToldSVzIGF0IGxpbmU6JXUAYmxvY2tfc2l6ZSA8IDB4MTAAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JmbGFjX3V0aWwuYwBGUkFNRV9FUlJPUjogJXMgaW52YWxpZCBjcmMgJSN4IT0lI3ggYXQgbGluZToldQBmb3VuZCBmcmFtZSBoZWFkZXI6JXUgc2FtcGxlczoldQBiZmxhY191dGlsAAAAAAAAAAAAAAAAAAWAD4AKABuAHgAUABGAM4A2ADwAOYAoAC2AJ4AiAGOAZgBsAGmAeAB9gHeAcgBQAFWAX4BaAEuATgBEAEGAw4DGAMwAyYDYAN2A14DSAPAA9YD/gPoA64DuAOQA4YCgAKWAr4CqALuAvgC0ALGAk4CWAJwAmYCIAI2Ah4CCAIOBhgGMAYmBmAGdgZeBkgGwAbWBv4G6AauBrgGkAaGB4AHlge+B6gH7gf4B9AHxgdOB1gHcAdmByAHNgceBwgFAAUWBT4FKAVuBXgFUAVGBc4F2AXwBeYFoAW2BZ4FiASOBJgEsASmBOAE9gTeBMgEQARWBH4EaAQuBDgEEAQGBA4MGAwwDCYMYAx2DF4MSAzADNYM/gzoDK4MuAyQDIYNgA2WDb4NqA3uDfgN0A3GDU4NWA1wDWYNIA02DR4NCA8ADxYPPg8oD24PeA9QD0YPzg/YD/AP5g+gD7YPng+IDo4OmA6wDqYO4A72Dt4OyA5ADlYOfg5oDi4OOA4QDgYOAAoWCj4KKApuCngKUApGCs4K2ArwCuYKoAq2Cp4KiAuOC5gLsAumC+AL9gveC8gLQAtWC34LaAsuCzgLEAsGCQ4JGAkwCSYJYAl2CV4JSAnACdYJ/gnoCa4JuAmQCYYIgAiWCL4IqAjuCPgI0AjGCE4IWAhwCGYIIAg2CB4ICAmJpdHM+MCAmJiBiaXRzJTg9PTAARlJBTUVfRVJST1I6ICVzIGludmFsaWQgaGVhZGVyICUjeCVzIGF0IGxpbmU6JXUAdXRmOABGUkFNRV9FUlJPUjogJXMgaW52YWxpZCBjb2RlICUjeCVzIGF0IGxpbmU6JXUAY3JjOCBwcmVtYXR1cmUgZW5kLCBsZWZ0ICV1AAAAAAAAAAAAAAAAAAAABw4JHBsSFTg/NjEkIyotcHd+eWxrYmVIT0ZBVFNaXeDn7un8+/L12N/W0cTDys2Ql56ZjIuChaivpqG0s7q9x8DJztvc1dL/+PH24+Tt6rewub6rrKWij4iBhpOUnZonICkuOzw1Mh8YERYDBA0KV1BZXktMRUJvaGFmc3R9eomOh4CVkpucsba/uK2qo6T5/vfw5eLr7MHGz8jd2tPUaW5nYHVye3xRVl9YTUpDRBkeFxAFAgsMISYvKD06MzROSUBHUlVcW3ZxeH9qbWRjPjkwNyIlLCsGAQgPGh0UE66poKeytby7lpGYn4qNhIPe2dDXwsXMy+bh6O/6/fTzI2JoZXZjX3ZpZGVvX3Byb2JlX3QAAAAAAAAAAAAAAABlcwAAAAB2ZXMAAABtcGcAAABoZXZjAAAyNmwAAAAyNjUAAAAAAAAAAAAAAAAAAAAhAAAAcDUAAMDh5ABMAAAATQAAAE4AAABPAAAAUAAAAGZhY3RvcnkAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JoZXZjX3ZpZGVvX3Byb2JlLmMAJXM6JXAgbmFsX2hlYWRlciAlI3ggKGZvcmJpZGRlbl96ZXJvX2JpdDoldSBuYWxfdW5pdF90eXBlOiV1ICV1LCV1KSBhdCAldQBiX2hldmNfdmlkZW9fcHJvYmVfZmVlZAAlczolcCBmb3VuZCBTUFM6JXMsIHNwc19pZD0ldQAlczolcCBTUFM6JXUgUFBTOiV1LCBTSDoldSwgSS1TbGljZToldQAlczolcCB0cmltICV1AGJoZXZjX3ZpZGVvX3Byb2JlAGJfaGV2Y192aWRlb19wYXJzZV9zcHM6JXAgdG8gbGFyZ2UgU1BTIHJlY29yZAAlczolcCBmb3VuZCBQUFMsIHBwc19pZD0ldSwgc3BzX2lkPSV1ACVwOk5vdCBtYXRjaGluZyBzbGljZV9waWNfcGFyYW1ldGVyX3NldF9pZDoldSBhbmQgcHBzLnBpY19wYXJhbWV0ZXJfc2V0X2lkOiV1ACVzOiVwIGZvdW5kIFNILCBzbGljZV90eXBlPSV1AGJfYXZjX3ZpZGVvX3Byb2JlX2ZlZWQAYl9oZXZjX3ZpZGVvX3Byb2JlX2xhc3Q6JSNseCBzcHM6JXU6JWQgcHBzOiV1OiVkIHNzcHM6JXUgaXNsaWNlOiV1ICVzAGV4dGVuc2lvbgAAYl9oZXZjX3ZpZGVvX3Byb2JlX2xhc3Q6IFNQUzolcwBiaWQzdjJfcmVhZF9pbnRlZ2VyOiAlI3gAYmlkM3YyX3BhcnNlX2hlYWRlcjogdmVyc2lvbjolI3ggc2l6ZToldSAlcyAlcyAlcyAlcwB1bnN5bmNocm9uaXNhdGlvbgAAZXh0ZW5kZWRfaGVhZGVyAGV4cGVyaW1lbnRhbF9pbmRpY2F0b3IAZm9vdGVyX3ByZXNlbnQAYmlkM3YyX2V4dGVuZGVkX2hlYWRlcjogc2l6ZToldQBiaWQzdjJfcGFyc2VfZnJhbWU6IGZyYW1lOiclYyVjJWMlYycgc2l6ZToldSAlcyAlcyAlcyAlcyAlcyAlcyAlcyAlcwB0YWdfYWx0ZXJfcHJlc2VydmF0aW9uAGZpbGVfYWx0ZXJfcHJlc2VydmF0aW9uAHJlYWRfb25seQBncm91cGluZ19pZGVudGl0eQBjb21wcmVzc2lvbgBlbmNyeXB0aW9uAGRhdGFfbGVuZ3RoX2luZGljYXRvcgBiaWQzdjJfcGFyc2VyX3Byb2JlOiUjbHgAYmlkM19wYXJzZXIAI2JjZHhhX3Byb2JlX3QAZGF0AAAAAAAAAAAAAAsAAADTOQAALAAAAFEAAABSAAAAUwAAAFQAAAAqAAAAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtZWRpYV9jZHhhLmMAYl9jZHhhX3Byb2JlX2NyZWF0ZTogY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAYnVmAGNvbmZpZwBibWVkaWFfY2R4YQAAAAAAAAAMAAAAAAAAACNibWVkaWFfcHJvYmVfdABibWVkaWFfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1lZGlhX3Byb2JlLmMAAAAAABgIAADc2AAARB8AAIQgAACQIQAA1FoAANCIAABseQAA1NEAABTBAAAwLgAA4DkAAJizAACgrwAAuKAAACCmAAC4swAAwK8AAGJtZWRpYV9wcm9iZV9tYXRjaF9leHQ6IGV4dDolcyBtYXRjaGVkOiVzAGRlc3RfYnVmAHVua25vd24ARVMAAC1JRDNWMQAtSUQzVjJfMgAtSUQzVjJfMwAtSUQzVjJfNABNUDMlc3slcyVzJXMlcyVzfQAgOyAAQkVTAFBFUwBNUEVHMi1UUwBEU1MtRVMARFNTLVBFUwBEVkQgVk9CAEFWSQAgJXUuJTAzdUZQUyAATVBFRzEAQ0RYQQBNUDQgWyVzJXMlc10ALG5vdCBjb21wYXRpYmxlACxmcmFnbWVudGVkAE1LViBbJXMlc10AOm11bHRpdm9sdW1lAEZMVgBXQVYAT0dHAEZMQUMAUk1GRgBBUEUAQUlGRgBBTVIASU5ERVg6AE5PLUlOREVYOgBTRUxGLUlOREVYOgBVTlVTQUJMRS1JTkRFWDoAJXNbJXMldToldV0gJXU6JTAydS4lMDJ1ICVzJXVLYnBzIFsgAF0gWwBNUEVHMS8yIExheWVyMS8yAE1QRUcxLzIgTGF5ZXIzAEFBQwBBQUMrAEFBQysgQURUUwBBQzMAQUMzKwBMUENNIEhELURWRABMUENNIEJsdVJheQBXTUEgU1REAFdNQSBQUk8ATFBDTSBEVkQAUENNAEFNUiBOQgBBTVIgV0IAVk9SQklTAERSQQBDT09LAEc3MjYARzcxMQBBRFBDTQBEVkkgQURQQ00ARFRTAERUUy1IRABEVFMtQ0QARFRTLUxCUgBMUENNLTEzOTQATUxQAE9QVVMAQUxTAEFMUyBMT0FTAEFDNABVbmtub3duADB4JTAyeDphdWRpbyglcyAldToldToldToldSVzKSAATVBFRzIATVBFRzQgUGFydDIASC4yNjMASC4yNjQASC4yNjQgU1ZDAEguMjY0IE1WQwBILjI2NQBWQy0xIEFQAFZDLTEgU1AvTVAARGl2WCAzLjExAEFWUwBWUDYAU3BhcmsvSC4yNjMAUlY0MABWUDgAVlA5AEFWMQBNSlBFRwBTaW1wbGUATWFpbgBTTlIgU2NhbGFibGUAU3BhdGlhbGx5IFNjYWxhYmxlAEhpZ2gATG93AEhpZ2ggMTQ0MAAgJXUuJTAzdUZQUyglcywlcyVzKQAscHJvZ3Jlc3NpdmUAICV1LiUwM3VGUFMAICclYyVjJWMlYycAICV1LiUwM3VGUFMgJXMARFJNACBjYXB0aW9uIDwlcz4gADB4JTAyeDp2aWRlbyglcyVzICV1S2JwcyAldXgldSVzKSAAIERUUwAweCUwMng6UENSIABEVkIgc3VidGl0bGVzAFRlbGV0ZXh0AFBNVABQQVQAUENSAGNhcHRpb24APCVzPiAAMHglMDJ4OiVzIABVTlNVUFBPUlRFRABdAGZkAGNvbmZpZwBibWVkaWFfcHJvYmVfcGFyc2U6ICUjbHggY2FuJ3QgY3JlYXRlIGJ1ZmZlcgBibWVkaWFfcHJvYmVfcGFyc2U6IGZpbGVfbmFtZTolcyBleHQ6JXMATk9ORQBibWVkaWFfcHJvYmVfc3RyZWFtOiAlcwBzdHJlYW0Ac3RyZWFtLT5wcm9iZV9pZCA8PSBCX01FRElBX05fUFJPQkVTAHByb2JlLT5wcm9iZXNbcHJvYmVfaWRdAG5ld190cmFjawBibWVkaWFfcHJvYmVfYWRkX3RyYWNrOiAlI2x4ICUjbHggZHVwbGljYXRlICV1OiV1OiV1AGJtZWRpYV9wcm9iZQBiLT5sZWZ0Pj0xAGJtZWRpYV9wcm9iZV9wYXJzZTogJSNseCBjYW4ndCBjcmVhdGUgcHJvYmUgZm9yIHN0cmVhbSB0eXBlICV1AGJtZWRpYV9wcm9iZV9wYXJzZTogJSNseCBwcm9iaW5nIHR5cGUgJXUAdHJhY2sgJWQ6IHR5cGUgJWQsIGRlZXBfcHJvYmVfYXVkaW86ICVkAGV4cGVjdGVkX3RyYWNrX2NvdW50ICVkAGJfbWVkaWFfcHJvYmVfZmlsdGVyX3R5cGU6IG52YWxpZDoldQBiX21lZGlhX3Byb2JlX2ZpbHRlcl9leHQ6IGV4dDolcyBudmFsaWQ6JXUAYl9tZWRpYV9wcm9iZV9maWx0ZXJfaGVhZGVyOiBudmFsaWQ6JXUAdGltZXN0YW1wX3BhcnNlcgBidWYAYl9tZWRpYV9wcm9iZV9hY3F1aXJlX2R1cmF0aW9uOiBmaXJzdDoldSwldSBtaWRkbGU6JXUsJXUgbGFzdDoldSwldQBiX21lZGlhX3Byb2JlX2FjcXVpcmVfZHVyYXRpb246ICUjbHggZHVyYXRpb24gJXUoJXUpICV1KyV1AGJfbWVkaWFfcHJvYmVfYWNxdWlyZV9kdXJhdGlvbjogJSNseCBkZXRlY3RlZCBkaXNjb250aW51b3VzIHN0cmVhbSwgYml0cmF0ZSAldToldSwgZHVyYXRpb246JXUAYl9tZWRpYV9wcm9iZV9hY3F1aXJlX2R1cmF0aW9uOiAlI2x4IGNvbnRpbnVvdXMgc3RyZWFtLCBkdXJhdGlvbjoldQBiX21lZGlhX3Byb2JlX2dldF90aW1lc3RhbXA6ICVwIG9mZjoldSgldSkgcmVhZF9sZW46JXUgcmVzdWx0OiV1IGF0b206JXAoJXUpAGJfbWVkaWFfcHJvYmVfZ2V0X3RpbWVzdGFtcDogJXAgcmM9JWQgb2Zmc2V0OiV1IHRpbWVzdGFtcDoldQBiX21lZGlhX3Byb2JlX3BhcnNlX2F1eDogJSNseCBjYW4ndCBjcmVhdGUgcHJvYmUgZm9yIHN0cmVhbSB0eXBlICV1AGJfbWVkaWFfcHJvYmVfcGFyc2VfYXV4OiB2aWRlbyBjb2RlY3MgZGlkIG5vdCBtYXRjaCB1c2UgdHJhY2tfYXV4ICglZDolZCkAYl9tZWRpYV9wcm9iZV9wYXJzZV9hdXg6IGF1ZGlvIGNvZGVjcyBkaWQgbm90IG1hdGNoIHVzZSB0cmFja19hdXggKCVkOiVkKQBiX21lZGlhX3Byb2JlX2ZlZWRfZXM6ICVwIG9mZjoldSByZWFkX2xlbjoldSByZXN1bHQ6JXUgYXRvbTolcCgldSkAALc7AAC+OwAAxzsAANA7AACXPAAAnjwAAJc8AAC0PAAAqDwAAKg+AACVPgAAiD4AAIM+AAB8PgAAqD4AALY7AACxPgAAtjsAAIM+AAC2OwAArT4AAACAAAAAgAAAAIAAAACAAAAAgAAAAJAAAACAAAAAgAAAApAAAAGQAABibWVkaWFfcHJvYmVfZGVtdXhfc2h1dGRvd246ICVwIGRlc3Ryb2luZyBlcyBwcm9iZSAlcCBmb3IgaWQ6JSN4AGJtZWRpYV9wcm9iZV9kZW11eF9kYXRhOiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBibWVkaWFfcHJvYmVfZGVtdXhfZGF0YTogJXAgY3JlYXRpbmcgZXMgcHJvYmUgJXAgZm9yIGlkOiUjeABObyBwcm9iZXMgY2FuIGNvbnRpbnVlAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibWVkaWFfcHJvYmVfZGVtdXguYwBzdWJzdHJlYW0tPnByb2JlAGJtZWRpYV9wcm9iZV9kZW11eF9kYXRhOiAlcCBmaW5pc2hlZCBwYXJzaW5nIGZvciBpZDolI3ggdHJhY2sgJXAgKCV1OiV1KQBibWVkaWFfcHJvYmVfZGVtdXhfYWRkX3Vua25vd246ICVwIGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAGJtZWRpYV9wcm9iZV9kZW11eABoAAAAAAAAI2JtZWRpYV9wcm9iZV9lc190AGJtZWRpYV9wcm9iZV9lc19jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibWVkaWFfcHJvYmVfZXMuYwAAAAAAAAAAAAAAAOAdAAD0JwAAnBgAACAaAABIvQAAKL8AANwjAACcNQAAECYAAIgqAABibWVkaWFfcHJvYmVfZXMAdmxjAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibWVkaWFfcHJvYmVfdXRpbC5jAHZsYy0+aW5kZXggPCB2bGMtPnNpemUAYnVmAHNwcwBCYXNlbGluZQBNYWluAEV4dGVuZGVkAEhpZ2gASGlnaCAxMABIaWdoIDQyMgBIaWdoIDQ0NAAlZAAlcyAAJXMlcyAldS4ldQBjdXJzb3IATWFpbiAxMABNYWluIFN0aWxsAFNjcmVlbgAldQBQOiVzIEw6JXUuJXUgVDolcwBiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogd2lkdGg6JXUsaGVpZ2h0OiV1AGJfaDI2NV9zZXFfcGFyYW1ldGVyX3NldF9yYnNwOiBjb25mb3JtYW5jZV93aW5kb3dfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogc2JzX21heF9zdWJfbGF5ZXJzX21pbnVzMSAldQBiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogc2NhbGluZ19saXN0X2VuYWJsZWRfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogc3BzX3NjYWxpbmdfbGlzdF9kYXRhX3ByZXNlbnRfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogcGNtX2VuYWJsZWRfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogbnVtX3Nob3J0X3Rlcm1fcmVmX3BpY19zZXRzICV1AGJfaDI2NV9zZXFfcGFyYW1ldGVyX3NldF9yYnNwOiBpbnRlcl9yZWZfcGljX3NldF9wcmVkaWN0aW9uX2ZsYWcgJXUAYl9oMjY1X3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3A6IG51bV9uZWdhdGl2ZV9waWNzICVkAGJfaDI2NV9zZXFfcGFyYW1ldGVyX3NldF9yYnNwOiBudW1fcG9zaXRpdmVfcGljcyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogbG9uZ190ZXJtX3JlZl9waWNzX3ByZXNlbnRfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogbnVtX2xvbmdfdGVybV9yZWZfcGljc19zcHMgJXUAYl9oMjY1X3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3A6IHNwc190ZW1wb3JhbF9tdnBfZW5hYmxlZF9mbGFnICV1AGJfaDI2NV9zZXFfcGFyYW1ldGVyX3NldF9yYnNwOiBzdHJvbmdfaW50cmFfc21vb3RoaW5nX2VuYWJsZWRfZmxhZyAldQBiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogdnVpX3BhcmFtZXRlcnNfcHJlc2VudF9mbGFnICVkAGJfaDI2NV9zZXFfcGFyYW1ldGVyX3NldF9yYnNwOiBhc3BlY3RfcmF0aW9faW5mb19wcmVzZW50X2ZsYWcgJWQAYl9oMjY1X3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3A6IGNvbG91cl9kZXNjcmlwdGlvbl9wcmVzZW50X2ZsYWcgJWQAYl9oMjY1X3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3A6IGNocm9tYV9sb2NfaW5mb19wcmVzZW50X2ZsYWcgJWQAYl9oMjY1X3NlcV9wYXJhbWV0ZXJfc2V0X3Jic3A6IGRlZmF1bHRfZGlzcGxheV93aW5kb3dfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogdnVpX3RpbWluZ19pbmZvX3ByZXNlbnRfZmxhZyAlZABiX2gyNjVfc2VxX3BhcmFtZXRlcl9zZXRfcmJzcDogdnVpX251bV91bml0c19pbl90aWNrICV1IHZ1aV90aW1lX3NjYWxlICV1AGJtZWRpYV9wcm9iZV91dGlsAGJfaDI2NV9wcm9maWxlX3RpZXJfbGV2ZWw6IHNwc19tYXhfc3ViX2xheWVyc19taW51czEgJXUgbm90IHN1cHBvcnRlZAAAAABISAAAjkgAAJZIAABISAAAVkgAAEhIAABISAAASEgAAKFIAABzY2FsZQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1lZGlhX3V0aWwuYwBoZWFkZXIAYWFjAGJtZWRpYV9hZHRzX2hlYWRlcl9pbml0X2FhYzogcHJvZmlsZToldSBzYW1wbGluZ19mcmVxdWVuY3lfaW5kZXg6JXUgY2hhbm5lbF9jb25maWd1cmF0aW9uOiV1AGhkcl9idWYAAHcBAIhYAQAA+gAAgLsAAESsAAAAfQAAwF0AACJWAACAPgAA4C4AABErAABAHwAAYm1lZGlhX2luZm9fYWFjX3NldF9zYW1wbGluZ19mcmVxdWVuY3lfaW5kZXg6IHVua25vd24gZnJlcXVlbmN5ICV1AAABAgMEBQYIYm1lZGlhX2luZm9fYWFjX3NldF9jaGFubmVsX2NvbmZpZ3VyYXRpb246IHVua25vd24gbnVtYmVyIG9mIGNoYW5uZWxzICV1ACVzOiAlcCBpbmNvbXBsZXRlIGhlYWRlcgBibWVkaWFfd2F2ZWZvcm1hdGV4ACVzOiBjYlNpemUgJXUgZXhjZWVkcyBzaXplIG9mIHRoZSB3YXZlZm9ybWF0IGRhdGEgJXUAJXM6IFdBVkUgaGVhZGVyICV1IGV4Y2VlZHMgcmVzZXJ2ZWQgc2l6ZSAldQBoZWFkZXJfbGVuPT1tZXRhX2xlbmd0aAAlczogJXB4IG1pc3NpbmcgY2JTaXplACVzOiBGb3JtYXRUYWc6JSN4IENoYW5uZWxzOiV1IFNhbXBsZXNQZXJTZWM6JXUgQXZnQnl0ZXNQZXJTZWM6JXUgbkJsb2NrQWxpZ246JXUgQml0c1BlclNhbXBsZToldSBTaXplOiV1AGJtZWRpYV9yZWFkX2JpdG1hcGluZm86IFNpemU6JXUgKCV1eCV1KSBDb21wcmVzc2lvbjonJWMlYyVjJWMnAAAAAQoAAABZUQAABAAAAEJDTVZoUQAABAAAAEJDTVYAAAAOAP8AAAAAAAB0UQAADgAAAAAAAAEGBgHEgAAAAIxRAAAJAAAAAAABAKBRAAADAAAAAAAAABQAAAAAAAAAAAAAAAAAAAADAgEABQQHBggJCgsMDQ4PJTAyWCUwMlglMDJYJTAyWC0lMDJYJTAyWC0lMDJYJTAyWC0lMDJYJTAyWC0lMDJYJTAyWCUwMlglMDJYJTAyWCUwMlgAd2F2ZWZvcm1hdGV4dGVuc2libGU6IHZhbGlkQml0c1BlclNhbXBsZToldSBjaGFubmVsTWFzazolI3ggZ3VpZDolcwAAAAABAAAAEIAAAKoAOJtxAAAgAAAAABCAAACqADibcWRhdGEAbWV0YQBibWVkaWFfcmVhZF9oMjY0X21ldGE6IG5hbHVfbGVuOiV1IHNwczoldSBwcHM6JXUAbWV0YV9kYXRhAHNpemUAYm1lZGlhX2gyNjVfbWV0YV9yZWFkOiBsZW5ndGhTaXplOiV1IG51bU9mQXJyYXlzOiV1AGJtZWRpYV9oMjY1X21ldGFfcmVhZDogbWV0YVNpemU6JXUgYml0RGVwdGg6JXUsJXUgYXZnRnJhbWVSYXRlOiV1AEFWMUNvZGVjQ29uZmlndXJhdGlvblJlY29yZF9wYXJzZTogc2VxX3Byb2ZpbGU6JXUgc2VxX2xldmVsX2lkeF8wOiV1ICVzJXMlcyVzJXMlc2Nocm9tYV9zYW1wbGVfcG9zaXRpb246JXUgJXMoJXUpAHNlcV90aWVyXzAgAABoaWdoX2JpdGRlcHRoIAB0d2VsdmVfYml0IABtb25vY2hyb21lIABjaHJvbWFfc3Vic2FtcGxpbmdfeCAAY2hyb21hX3N1YnNhbXBsaW5nX3kgAGluaXRpYWxfcHJlc2VudGF0aW9uX2RlbGF5AGJtZWRpYV91dGlsAGJtZWRpYV9wX2VzdGltYXRlX2gyNjVfZGF0YTogbnVtTmFsdXM6JXUgcGF5bG9hZDoldQAAAAAAAAAAAAAAI2Jta3ZfZmlsZV9wYXJzZXJfdAAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1rdl9maWxlX3BhcnNlci5jACVzOiAlcCByZWFkaW5nICV1OiV1AGJfbWt2X2ZpbGVfcGFyc2VyX3BhcnNlACVzOiAlcHggcmVhZCAldToldSAtPiAlcAAlczogJSNseCB1bmtub3duL25vdCBzdXBwb3J0ZWQgZm9ybWF0AGJfbWt2X2ZpbGVfcGFyc2VyX29wZW5fZmlsZQAlczogJSNseCB1bmV4cGVjdGVkIHN0YWxsIGluIHBhcnNpbmcAJXM6ICUjbHggc2Vla2luZyB0byAlcwBUcmFja3MAU2VnbWVudCBJbmZvcm1hdGlvbgBBdHRhY2htZW50AENoYXB0ZXJzACVzOiVwIHNlZWsgdG8gJWxkIChza2lwICVsZAAlczolI2x4ICUjeCAlbHUgYnl0ZXMgYXQgJSNseABiX21rdl9maWxlX3BhcnNlcl9vYmplY3RfYmVnaW4AJXM6JSNseCBmb3VuZCAlcyBhdCAlI2x4OiVsdQBTZWdtZW50AEZpcnN0IFNlZWtIZWFkAGJfbWt2X2ZpbGVfcGFyc2VyX29iamVjdF9lbmQ6JSNseCAlI3ggYXQgJSNseABiX21rdl9maWxlX3BhcnNlcl9vYmplY3RfZW5kOiUjbHggc2VlayBjb21wbGV0ZWQgJSN4IGF0ICUjbHgAJXM6JXAgJSN4WyUjeF0gJXUgYnl0ZXMAYl9ta3ZfZmlsZV9wYXJzZXJfZWJtbAAlczolcCBkdXBsaWNhdGUgRUJNTCBoZWFkZXIsIG11bHRpdm9sdW1lIHN0cmVhbQAlczolI2x4IHJlY29nbml6ZWQgZm9ybWF0ICVzOiV1IFsldSwldV0AJXM6JSNseCBjb3JydXB0ZWQgJXMgZWxlbWVudCwgbWFyayBzdHJlYW0gYXMgaW52YWxpZABFQk1MAGJfbWt2X2ZpbGVfcGFyc2VyX3NlZWtoZWFkAGJfbWt2X2ZpbGVfcGFyc2VyX3RyYWNrcwBiX21rdl9maWxlX3BhcnNlcl9zZWdtZW50X2luZm8AJXM6JXAgY29ycnVwdGVkICVzIGVsZW1lbnQsIG1hcmsgc3RyZWFtIGFzIGludmFsaWQAU2VnbWVudCBJbmZvAGJta3ZfZmlsZV9wYXJzZXIAI2Jta3ZfcGFyc2VyX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2Jta3ZfcGFyc2VyLmMAaGFuZGxlciAhPSBjdXIAaGFuZGxlcgBwYXJzZQBkaXNjYXJkAGNhcHR1cmUAZm9ybWF0X2Vycm9yAGJta3ZfcGFyc2VyX3NlZWs6ICVwIDB4JXglMDh4IG5vLW9wAGJta3ZfcGFyc2VyX3NlZWs6ICVwIDB4JXglMDh4KCVsZCkAbGVmdD09MABzdGVwPj0wAGhlYWRlci0+c2l6ZSA+PSBoZWFkZXItPmxlZnQAbWt2LT5lbGVtZW50cy5zaXplID4gMABta3YtPmVsZW1lbnRzLnNpemU8PUJfTUtWX01BWF9FTEVNRU5URVMAY2ZnAGZhY3RvcnkAYm1rdl9jcmVhdGU6IG91dCBvZiBtZW1vcnkgJXUAYm1rdl9kZXN0cm95OiAlI2x4IGxvc3QgaGVhZGVyX2hhbmRsZXIgJSNseCAuLi4AYm1rdl9kZXN0cm95OiAlI2x4IGxvc3QgaGVhZGVyX2hhbmRsZXIgJSNseCAgJSN4AGhlYWRlcgBzaXplPT0wAGJta3ZfcGFyc2VyAG1rdi0+ZWxlbWVudHMuc2l6ZT4wAGhlYWRlci0+bGVmdD49Ynl0ZXMAaGVhZGVyLT5sZWZ0ID49IHByZXYtPnNpemUAdXNlcl9oZWFkZXI6ICAlI3hbICUjeF0gJXUgLT4gJSNseABza2lwX2xlbj09bGVuAGF0b20AAAAAm1gAAKFYAACpWAAAsVgAACNibWt2X3Byb2JlX3QAAAAAAAAAAAAAAAAAAABta3YAAAB3ZWJtAAAAAAAAAAAAAA0AAADAWgAAAAEAAF0AAABeAAAAXwAAAGAAAABhAAAAYl9ta3ZfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBibWt2X3Byb2JlAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibWt2X3Byb2JlLmMAYl9ta3ZfcHJvYmVfcGFyc2U6ICVwIGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzACVzOiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiX21rdl9wcm9iZV9hZGRfdHJhY2tzAAAAAAB+RgAACAAAAAAACAAoAAEAilwAAG5GAAAIAAAACAAIACkAAQCaXAAAYEYAAAgAAAAQAAgAKgABAKNcAABcRgAADQAAACAACAAsAAEAsFwAAK5GAAAGAAAAGAAIACsAAQC5XAAAAAAAAA4AAAAAAAAAAAAAAAAAAABBdHRhY2hlZEZpbGUAYXR0YWNobWVudDogJSN4ICVzWyclcyc6JXNdIGF0ICV1OiV1AEZpbGVEZXNjcmlwdGlvbgBGaWxlTmFtZQBGaWxlTWltZVR5cGUARmlsZURhdGEARmlsZVVJRAAAAAAAAAAAAAAAAAAAAAC8RQAABgAAAAAACAAgAAEAtV0AAL1FAAAAAAAACAAEACEAAQDAXQAA20UAAAAAAAAMAAQAIgABANJdAADdRQAAAAAAABAABAAjAAEA5V0AALYAAAAJAAAAFAAMACQAAQD4XQAAAAAAAA4AAAAAAAAAAAAAAAAAAABFZGl0aW9uRW50cnkAZWRpdGlvbiA6IFVJRCAweCV4JTA4eCBGbGFncyAldToldToldQAJY2hhcHRlcjogVUlEIDB4JXglMDh4IFRpbWUgWyVkLT4lZF0gRmxhZ3MgJXU6JXUgJXMgJXMgJXMARWRpdGlvblVJRABFZGl0aW9uRmxhZ0hpZGRlbgBFZGl0aW9uRmxhZ0RlZmF1bHQARWRpdGlvbkZsYWdPcmRlcmVkAENoYXB0ZXJBdG9tAAAAAAAAAAAAAAAAAAAAAAAAAAAAMF4AAFgAAABiAAAAAAAAAAAAAAAAAAAAxHMAAAYAAAAAAAgATAABAAxfAACRAAAABgAAAAgACABNAAEAF18AAJIAAAAGAAAAEAAIAE4AAQAoXwAAmAAAAAAAAAAYAAQATwABADdfAACYRQAAAAAAABwABABQAAEASV8AAGduAAALAAAAIAAIAFEAAQBcXwAAvG4AAAsAAAAoAAgAUgABAG5fAADDYwAAAAAAADAABABTAAEAh18AAI8AAAAJAAAANAAMAFQAAQCcXwAAgAAAAAkAAABAAAwAVQABAMhfAAAAAAAADgAAAAAAAAAAAAAAAAAAAENoYXB0ZXJVSUQAQ2hhcHRlclRpbWVTdGFydABDaGFwdGVyVGltZUVuZABDaGFwdGVyRmxhZ0hpZGRlbgBDaGFwdGVyRmxhZ0VuYWJsZWQAQ2hhcHRlclNlZ21lbnRVSUQAQ2hhcHRlclNlZ21lbnRFZGl0aW9uVUlEAENoYXB0ZXJQaHlzaWNhbEVxdWl2AENoYXB0ZXJUcmFjawAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAgAAABjAAAAQ2hhcHRlckRpc3BsYXkAAAAAAAAAAAAAAAAAAAAAAABAYAAALAAAAGQAAAAAAAAAAAAAAAAAAACJAAAAAAAAAAAABAAEAAEAKGAAAAAAAAAOAAAAAAAAAAAAAAAAAAAAQ2hhcHRlclRyYWNrTnVtYmVyAAAAAAAAhQAAAAgAAAAAAAgAKAABAJBgAAB8QwAABQAAAAgAEAApAAEAm2AAAH5DAAAFAAAAGAAQACoAAQCoYAAAAAAAAA4AAAAAAAAAAAAAAAAAAABDaGFwU3RyaW5nAENoYXBMYW5ndWFnZQBDaGFwQ291bnRyeQBkYXRhAGJfbWt2X3Byb2JlX25leHRfdm9sdW1lOiUjbHggZm91bmQgbmV4dCB2b2x1bWUgYXQgJWx1AHN0cmVhbQBibWt2X3BhcnNlX3Vuc2lnbmVkNjQ6ICUjbHggaW52YWxpZCB1bnNpZ25lZCwgZm9yY2luZyBFT1MAYm1rdl9wYXJzZV9oZWFkZXI6ICUjbHggaW52YWxpZCBJRABibWt2X3BhcnNlX2hlYWRlcjogJSNseCByZXNlcnZlZCBibG9jayBsZW5ndGgAZWxlbV9uYW1lAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibWt2X3V0aWwuYwBlbGVtAGN1cnNvcgBlbnRyaWVzACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiB2YWxpZGF0ZSAnJXMnICV1WyV1XQBibWt2X2VsZW1lbnRfcGFyc2UAJXM6JXAgJXMgaW52YWxpZCBzaXplIG9mIHUtaW50ZWdlciBlbGVtZW50ICclcycgJXVbJXVdACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiBpZCBlbGVtZW50ICclcycgJXVbJXVdACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiB1LWludGVnZXI2NCBlbGVtZW50ICclcycgJXVbJXVdACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiBzLWludGVnZXIgZWxlbWVudCAnJXMnICV1WyV1XQAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgdW5pcXVlLUlEIGVsZW1lbnQgJyVzJyAldVsldV0AJXM6JXAgJXMgaW52YWxpZCBzaXplIG9mIGRhdGEgZWxlbWVudCAnJXMnICV1WyV1XQAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgZmxvYXQgZWxlbWVudCAnJXMnICV1WyV1XQAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgVVRGOCBlbGVtZW50ICclcycgJXVbJXVdACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiBEQVRBIGVsZW1lbnQgJyVzJyAldVsldV0AJXM6JXAgJXMgaW52YWxpZCBzaXplIG9mIHN0cmluZyBlbGVtZW50ICclcycgJXVbJXVdACVzOiVwICVzIGludmFsaWQgc2l6ZSBvZiBib29sIGVsZW1lbnQgJyVzJyAldVsldV0AJXM6JXAgJXMgaW52YWxpZCBzaXplIG9mIHN0b3AgZWxlbWVudCAnJXMnICV1WyV1XQAlczo6JSNseCAlcyB1bmtub3duIGVsZW1ldCB0eXBlICclcycgJXUAJXM6JSNseCAlcyBwYXJzaW5nIGVsZW1lbnQgJyVzJyBvZiB0eXBlICV1ICglI3g6JXUpACVzOiUjbHggJXMgb3ZlcmZsb3cgaW4gdmFsdWUgb2YgdS1pbnRlZ2VyIGVsZW1lbnQgJXM6MHgleCUwOHgAJXM6JSNseCAlcyBpbnZhbGlkIHZhbHVlIG9mIGJvb2wgZWxlbWVudCAlczoweCV4JTA4eAAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgdS1pbnRlZ2VyIGVsZW1lbnQgJyVzJyAldVswLi40XQAlczolcCAlczolcyBvdmVyZmxvdyBpbiB2YWx1ZSBvZiBzLWludGVnZXIgZWxlbWVudCAweCV4JTA4eAAlczolcCAlcyBpbnZhbGlkIHNpemUgb2Ygcy1pbnRlZ2VyIGVsZW1lbnQgJyVzJyAldVswLi44XQAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgdW5pcXVlIElEIGVsZW1lbnQgJyVzJyAldVsldV0AJXM6JXAgJXMgaW52YWxpZCBzaXplIG9mIGRhdGUgZWxlbWVudCAnJXMnICV1WyV1XQAlczolcCAlcyBpbnZhbGlkIHNpemUgb2YgZmxvYXQgZWxlbWVudCAnJXMnICV1WyV1LCV1XQAlczolI2x4ICVzIHRvbyBzbWFsbCBibG9jayBmb3Igc3RyaW5nLXUgZWxlbWVudCAnJXMnICV1WyV1XQAlczolI2x4ICVzIGNhbid0IGFsbG9jYXRlIGJ1ZmZlciAldSBmb3Igc3RyaW5nIGVsZW1lbnQgJyVzJwAlczolI2x4ICVzIGNhbid0IGFsbG9jYXRlIGJ1ZmZlciAldSBmb3IgZGF0YSBlbGVtZW50ICclcycAJXM6JSNseCAlcyBjYW4ndCBhbGxvY2F0ZSBidWZmZXIgJXUgZm9yIFVURi04IGVsZW1lbnQgJyVzJwAlczolcCAlcyB1bmtub3duIGVsZW1lbnQgaWQgJSNseAAlczolcCAlcyBwcmVtYXR1cmUgZW5kIG9mIGRhdGEAbmFtZQBvbgBvZmYAJXUAJXU6JSN4ACUjeAAlbGQAJWxkOjB4JXglMDh4ACVkAFsldV0AJTAyeAAlZgAlKmMlcyAlcz0lcwBtYXRyb3NrYQB3ZWJtAAAAAAAAAACGQgAAAAAAAAAABAAoAAEACm0AAPdCAAAAAAAABAAEACkAAQAWbQAA8kIAAAAAAAAIAAQAKgABACZtAADzQgAAAAAAAAwABAArAAEANm0AAIJCAAAFAAAAEAAQACwAAQBIbQAAh0IAAAAAAAAgAAQALQABAFBtAACFQgAAAAAAACQABAAuAAEAX20AAAAAAAAOAAAAAAAAAAAAAAAAAAAARUJNTAAAAAAAAAAAAAAAAKtTAAAAAAAAAAAEABAAAQBybQAArFMAAAYAAAAIAAgAEQABAHltAAAAAAAADgAAAAAAAAAAAAAAAAAAAFNlZWtFbGVtZW50AAAAAAAAAAAAAAAAAAAAAAAAAAAA8GgAABgAAAAAAAAAAAAAAAAAAAC7TQAACQAAAAAADAAMAAEALGkAAAAAAAAOAAAAAAAAAAAAAAAAAAAAU2Vla0hlYWQAAAAAAAAAAAAAAAAAAAAApHMAAAIAAAAAABAAkAABAIZtAACEcwAACAAAABAACACRAAEAkW0AACO5PAACAAAAGAAQAJIAAQChbQAAq4M8AAgAAAAoAAgAkwABAKltAAAjuTwAAgAAADAAEACUAAEAtm0AALuDPgAIAAAAQAAIAJUAAQC+bQAAREQAAAIAAABIABAAlgABAMttAACx1yoAAAAAAGQABACYAAEA2W0AAIlEAAAEAAAAaAAIAJkAAQDnbQAAYUQAAAMAAABwAAgAmgABAPBtAACpewAACAAAAHgACACbAAEA+G0AAIBNAAAIAAAAgAAIAJwAAQD+bQAAQVcAAAgAAACIAAgAnQABAAhuAAAAAAAADgAAAAAAAAAAAAAAAAAAAFNlZ21lbnRJbmZvcm1hdGlvbgAAAAAAAK4AAAAJAAAAAAAMABgAAQAUbgAA2gAAAAkAAAAMAAwAGQABAEBuAAAAAAAADgAAAAAAAAAAAAAAAAAAAFRyYWNrcwB0cmFjawAAAAAAAAAAVl9NUEVHNC9JU08vQVZDAFZfTVBFR0gvSVNPL0hFVkMAVl9NUEVHMgBWX01QRUcxAAAAAAAAAAAAAAAAAAAAAFZfTVMvVkZXL0ZPVVJDQwBWX01QRUc0L0lTTy9BU1AAQV9BQUMAAAAAAAAAAAAAAEFfQUFDL01QRUcyL01BSU4AQV9BQUMvTVBFRzIvTEMAQV9BQUMvTVBFRzIvTEMvU0JSAAAAAAAAAAAAAAAAAABBX0FBQy9NUEVHMi9TU1IAQV9BQUMvTVBFRzQvTEMAAEFfQUFDL01QRUc0L0xDL1NCUgAAAAAAAAAAAAAAAAAAQV9BQUMvTVBFRzQvTUFJTgAAAAAAAAAAAAAAAAAAAABBX0FBQy9NUEVHNC9TU1IAQV9BQUMvTVBFRzQvTFRQAGFhYwBBX0FDMwBBX0RUUwBBX0VBQzMAQV9UUlVFSEQAQV9NUEVHL0wzAEFfTVBFRy9MMQBBX01QRUcvTDIAQV9NUy9BQ00AQV9WT1JCSVMAVl9WUDgAVl9WUDkAVl9BVjEAQV9PUFVTAEFfUENNL0lOVC9MSVQAYm1rdl91dGlsAGFsbG9jX25lbGVtcyA+IHRhYmxlLT5uZWxlbXMAdGFibGUtPmRhdGEAJSpjICVzWyV1XQBlYm1sAEVCTUxWZXJzaW9uAEVCTUxSZWFkVmVyc2lvbgBFQk1MTWF4SURMZW5ndGgARUJNTE1heFNpemVMZW5ndGgARG9jVHlwZQBEb2NUeXBlVmVyc2lvbgBEb2NUeXBlUmVhZFZlcnNpb24AU2Vla0lEAFNlZWtQb3NpdGlvbgBTZWdtZW50VUlEAFNlZ21lbnRGaWxlbmFtZQBQcmV2VUlEAFByZXZGaWxlbmFtZQBOZXh0VUlEAE5leHRGaWxlbmFtZQBTZWdtZW50RmFtaWx5AFRpbWVjb2RlU2NhbGUARHVyYXRpb24ARGF0ZVVUQwBUaXRsZQBNdXhpbmdBcHAAV3JpdGluZ0FwcAAAVHJhY2tFbnRyeQAAAAAAAAAAAAAAAAAAAAAAAAAAAABwbgAAGAEAAGUAAABUcmFja3NEYXRhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMB4AAAUAAAAZgAAAAAAAADXAAAAAAAAAAAABAD0AAEA3HAAAMVzAAAGAAAACAAIAPUAAQDocAAAgwAAAAAAAAAQAAQA9gABAPFwAAC5AAAADAAAABQAAQD3AAEA+3AAAIgAAAAMAAAAFQABAPgAAQAHcQAAqlUAAAwAAAAWAAEA+QABABNxAACcAAAADAAAABcAAQD6AAEAHnEAAOdtAAAAAAAAGAAEAPsAAQApcQAA+G0AAAAAAAAcAAQA/AABADJxAACD4yMABgAAACAACAD9AAEAO3EAAE8xIwAEAAAAKAAIAP4AAQBLcQAAf1MAAAEAAAAwAAQA/wABAF5xAADuVQAAAAAAADQABAAAAQEAanEAAG5TAAAIAAAAOAAIAAEBAQB9cQAAnLUiAAUAAABAABAAAgEBAIJxAACGAAAABQAAAFAAIAADAQEAi3EAAKJjAAALAAAAcAAIAAQBAQCTcQAAiIYlAAgAAAB4AAgABQEBAKBxAABGdAAACQAAAIAADAAGAQEArHEAAJeWOgAIAAAAjAAIAAcBAQDYcQAAQEA7AAsAAACUAAgACAEBAOZxAABAsiYACwAAAJwACAAJAQEA83EAAKoAAAAMAAAApAABAAoBAQAEcgAAqgAAAAAAAACoAAQACwEBABNyAADAAAAABgAAALAACAAMAQEAIHIAAMcAAAAGAAAAuAAIAA4BAQAucgAAxgAAAAwAAADAAAEAEAEBAD1yAADgAAAACQAAANAADAASAQEATHIAAOEAAAAJAAAA3AAMABMBAQB4cgAAgG0AAAkAAADoAAwAFAEBAKRyAAAAAAAADgAAAAAAAAAAAAAAAAAAAFRyYWNrTnVtYmVyAFRyYWNrVUlEAFRyYWNrVHlwZQBGbGFnRW5hYmxlZABGbGFnRGVmYXVsdABGbGFnRm9yY2VkAEZsYWdMYWNpbmcATWluQ2FjaGUATWF4Q2FjaGUARGVmYXVsdER1cmF0aW9uAFRyYWNrVGltZWNvZGVTY2FsZQBUcmFja09mZnNldABNYXhCbG9ja0FkZGl0aW9uSUQATmFtZQBMYW5ndWFnZQBDb2RlY0lEAENvZGVjUHJpdmF0ZQBDb2RlY05hbWUAAABBdHRhY2htZW50TGluawAAAAAAAAAAAAAAAAAAAAAAANByAAAQAAAAAAAAAENvZGVjU2V0dGluZ3MAQ29kZWNJbmZvVVJMAENvZGVjRG93bmxvYWRVUkwAQ29kZWNEZWNvZGVBbGwAVHJhY2tPdmVybGF5AFRyaWNrVHJhY2tVSUQATWFzdGVyVHJhY2tVSUQAVHJpY2tUcmFja0ZsYWcAVmlkZW8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQcwAAYAAAAGcAAABBdWRpbwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADB1AAAoAAAAaAAAAENvbnRlbnRFbmNvZGluZ3MAAAAAAAAAAAAAAAAAAAAAAHYAABAAAAAAAAAAAAAAAAYAAAAAAAgACAABAPhyAAAAAAAADgAAAAAAAAAAAAAAAAAAAEF0dGFjaG1lbnRMaW5rAAAAAAAAAAAAAJoAAAAMAAAAAAABAFAAAQBkdAAAuFMAAAAAAAAEAAQAUQABAHN0AACwAAAAAAAAAAgABABSAAEAfnQAALoAAAAAAAAADAAEAFMAAQCJdAAAqlQAAAAAAAAQAAQAVAABAJV0AAC7VAAAAAAAABQABABVAAEApXQAAMxUAAAAAAAAGAAEAFYAAQCydAAA3VQAAAAAAAAcAAQAVwABAMB0AACwVAAAAAAAACAABABYAAEAz3QAALpUAAAAAAAAJAAEAFkAAQDcdAAAslQAAAAAAAAoAAQAWgABAOp0AACzVAAAAAAAACwABABbAAEA9nQAACS1LgAAAAAAMAAEAFwAAQAGdQAAI7UuAAQAAAA4AAgAXQABABJ1AACwVQAACwAAAEAACABeAAEAHXUAAHB2AAALAAAASAAIAF8AAQAkdQAAAAAAAA4AAAAAAAAAAAAAAAAAAABGbGFnSW50ZXJsYWNlZABTdGVyZW9Nb2RlAFBpeGVsV2lkdGgAUGl4ZWxIZWlnaHQAUGl4ZWxDcm9wQm90dG9tAFBpeGVsQ3JvcFRvcABQaXhlbENyb3BMZWZ0AFBpeGVsQ3JvcFJpZ2h0AERpc3BsYXlXaWR0aABEaXNwbGF5SGVpZ2h0AERpc3BsYXlVbml0AEFzcGVjdFJhdGlvVHlwZQBDb2xvdXJTcGFjZQBHYW1tYVZhbHVlAENvbG91cgBQcm9qZWN0aW9uAAC1AAAABAAAAAAACAAgAAEAqHUAALV4AAAEAAAACAAIACEAAQC6dQAAnwAAAAAAAAAQAAQAIgABANJ1AAB7fQAACwAAABQACAAjAAEA23UAAGRiAAAAAAAAHAAEACQAAQDsdQAAAAAAAA4AAAAAAAAAAAAAAAAAAABTYW1wbGluZ0ZyZXF1ZW5jeQBPdXRwdXRTYW1wbGluZ0ZyZXF1ZW5jeQBDaGFubmVscwBDaGFubmVsUG9zaXRpb25zAEJpdERlcHRoAAAAAAAAAAAAAAAAQGIAAAkAAAAAAAwADAABACh2AAAAAAAADgAAAAAAAAAAAAAAAAAAAENvbnRlbnRFbmNvZGluZwAAAAAAAAAAAAAAAAAAAAAAYHYAACwAAABpAAAAAAAAAAAAAAAAAAAAMVAAAAAAAAAAAAQAJAABANh2AAAyUAAAAAAAAAQABAAlAAEA7XYAADNQAAAAAAAACAAEACYAAQACdwAANFAAAAkAAAAMAAwAJwABABh3AAA0UAAACQAAABgADAAoAAEARHcAAAAAAAAOAAAAAAAAAAAAAAAAAAAAQ29udGVudEVuY29kaW5nT3JkZXIAQ29udGVudEVuY29kaW5nU2NvcGUAQ29udGVudEVuY29kaW5nVHlwZQAAAENvbnRlbnRDb21wcmVzc2lvbgAAAAAAAAAAAAAAAAAAcHcAABAAAABqAAAAQ29udGVudEVuY3J5cHRpb24AAAAAAAAAAAAAAAAAAADQdwAALAAAAGsAAABUQgAAAAAAAAAABAAMAAEArHcAAFVCAAALAAAABAAIAA0AAQC8dwAAAAAAAA4AAAAAAAAAAAAAAAAAAABDb250ZW50Q29tcEFsZ28AQ29udGVudENvbXBTZXR0aW5ncwDhRwAAAAAAAAAABAAkAAEAXHgAAOJHAAALAAAABAAIACUAAQBreAAA40cAAAsAAAAMAAgAJgABAHt4AADkRwAACwAAABQACAAnAAEAjHgAAOVHAAAAAAAAHAAEACgAAQCceAAA5kcAAAAAAAAgAAQAKQABAKt4AAAAAAAADgAAAAAAAAAAAAAAAAAAAENvbnRlbnRFbmNBbGdvAENvbnRlbnRFbmNLZXlJRABDb250ZW50U2lnbmF0dXJlAENvbnRlbnRTaWdLZXlJRABDb250ZW50U2lnQWxnbwBDb250ZW50U2lnSGFzaEFsZ28AAADbAAAAAAAAAAAABAAQAAEAEHkAANwAAAAAAAAABAAEABEAAQAieQAA3gAAAAsAAAAIAAgAEgABADF5AAAAAAAADgAAAAAAAAAAAAAAAAAAAFRyYWNrc0RhdGFWZXJzaW9uAFRyYWNrc0RhdGFTaXplAFRyYWNrc0RhdGFQYXlsb2FkAGVsZW1fc2l6ZTw9OAAjYm1wM19wcm9iZV90AG1wMwAAAAAAAAAAAAAAAQAAAF55AAAQAAAAbAAAAG0AAABuAAAAbwAAACoAAABiX21wM19wcm9iZV9oZWFkZXJfbWF0Y2hfbXBlZzFsMzolI2x4AGJtcDNfcHJvYmUAYl9tcDNfcHJvYmVfY3JlYXRlAGJfbXAzX3Byb2JlX2NyZWF0ZTogY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtcDNfcHJvYmUuYwBiX21wM19wcm9iZV9wYXJzZTolI2x4AHN0cmVhbQBlc190cmFjay0+aW5mby5hdWRpby5zYW1wbGVfcmF0ZQBiX2lkM3YyX2NhY2hlZF9maWxlX2xvYWQ6ICUjbHggJWQgJXU6JXU6JXUAYl9pZDN2Ml9jYWNoZWRfZmlsZV9sb2FkOiAlI2x4IGxvYWRpbmcgJXU6JXUAZmlsZS0+b2ZmID4gZmlsZS0+bGFzdABiX2lkM3YyX2NhY2hlZF9maWxlX2xvYWQ6ICUjbHggdHJ1bmNhdGUgJXUgJXUAYl9tcDNfcHJvYmVfY29weV9pZDN2Ml9mcmFtZTogJSNseCBkb24ndCBzdXBwb3J0IGNvbXByZXNzZWQgb3IgZW5jcnlwdGVkIGZyYW1lcwBiX2lkM3YyX2NhY2hlZF9maWxlX3NraXA6ICUjbHggJWQgJXU6JXU6JXUAYl9tcDNfcHJvYmVfcGFyc2VfaWQzdjE6ICUjbHgAAABQfgAAVn4AAGN+AABrfgAAcX4AAHd+AAB8fgAAg34AAIt+AACQfgAAln4AAJ5+AAClfgAAq34AAK9+AACzfgAAt34AAL5+AADDfgAAyn4AANV+AADhfgAA5X4AAPF+AAD4fgAAA38AAA9/AAAXfwAAIH8AACZ/AAAwfwAAN38AAD5/AABIfwAAVX8AAFp/AABgfwAAZX8AAHB/AAB3fwAAfX8AAIh/AACNfwAAkn8AAJd/AACdfwAAqH8AALl/AADLfwAA0n8AANl/AADifwAA9H8AAP9/AAAIgAAAEoAAABiAAAAmgAAALYAAADKAAAA6gAAAQYAAAE+AAABYgAAAX4AAAG+AAAB3gAAAgIAAAIyAAACRgAAAm4AAAKOAAACpgAAAsIAAALqAAADEgAAAyoAAANCAAADYgAAA5IAAAO6AAADzgAAA/YAAAAuBAAARgQAAHYEAACOBAAApgQAAMYEAADiBAABCgQAATYEAAFmBAABqgQAAe4EAAIqBAACUgQAAnYEAAKSBAACzgQAAvIEAAMOBAADKgQAA0oEAANiBAADmgQAA7YEAAPaBAAACggAACYIAABWCAAAcggAAJYIAACqCAAAwggAANoIAAD+CAABGggAAVIIAAGGCAABrggAAcIIAAHqCAACEggAAjYIAAJiCAABVbmtub3duAGJfbXAzX3Byb2JlX3BhcnNlX2lkM3YxOiAlcyVzJXMgJXMlcyVzICVzJXMlcyAlcyVzJXMgJXMlcyVzICVzJXMlcyAAdGl0bGUAADoAYXJ0aXN0AGFsYnVtAHllYXIAY29tbWVudABnZW5yZQBiX21wM19wcm9iZV9jb3B5OiBub3QgZW5vdWdoIHNwYWNlAEJsdWVzAENsYXNzaWMgUm9jawBDb3VudHJ5AERhbmNlAERpc2NvAEZ1bmsAR3J1bmdlAEhpcC1Ib3AASmF6egBNZXRhbABOZXcgQWdlAE9sZGllcwBPdGhlcgBQb3AAUiZCAFJhcABSZWdnYWUAUm9jawBUZWNobm8ASW5kdXN0cmlhbABBbHRlcm5hdGl2ZQBTa2EARGVhdGggTWV0YWwAUHJhbmtzAFNvdW5kdHJhY2sARXVyby1UZWNobm8AQW1iaWVudABUcmlwLUhvcABWb2NhbABKYXp6K0Z1bmsARnVzaW9uAFRyYW5jZQBDbGFzc2ljYWwASW5zdHJ1bWVudGFsAEFjaWQASG91c2UAR2FtZQBTb3VuZCBDbGlwAEdvc3BlbABOb2lzZQBBbHRlcm5Sb2NrAEJhc3MAU291bABQdW5rAFNwYWNlAE1lZGl0YXRpdmUASW5zdHJ1bWVudGFsIFBvcABJbnN0cnVtZW50YWwgUm9jawBFdGhuaWMAR290aGljAERhcmt3YXZlAFRlY2huby1JbmR1c3RyaWFsAEVsZWN0cm9uaWMAUG9wLUZvbGsARXVyb2RhbmNlAERyZWFtAFNvdXRoZXJuIFJvY2sAQ29tZWR5AEN1bHQAR2FuZ3N0YQBUb3AgNDAAQ2hyaXN0aWFuIFJhcABQb3AvRnVuawBKdW5nbGUATmF0aXZlIEFtZXJpY2FuAENhYmFyZXQATmV3IFdhdmUAUHN5Y2hhZGVsaWMAUmF2ZQBTaG93dHVuZXMAVHJhaWxlcgBMby1GaQBUcmliYWwAQWNpZCBQdW5rAEFjaWQgSmF6egBQb2xrYQBSZXRybwBNdXNpY2FsAFJvY2sgJiBSb2xsAEhhcmQgUm9jawBGb2xrAEZvbGstUm9jawBOYXRpb25hbCBGb2xrAFN3aW5nAEZhc3QgRnVzaW9uAEJlYm9iAExhdGluAFJldml2YWwAQ2VsdGljAEJsdWVncmFzcwBBdmFudGdhcmRlAEdvdGhpYyBSb2NrAFByb2dyZXNzaXZlIFJvY2sAUHN5Y2hlZGVsaWMgUm9jawBTeW1waG9uaWMgUm9jawBTbG93IFJvY2sAQmlnIEJhbmQAQ2hvcnVzAEVhc3kgTGlzdGVuaW5nAEFjb3VzdGljAEh1bW91cgBTcGVlY2gAQ2hhbnNvbgBPcGVyYQBDaGFtYmVyIE11c2ljAFNvbmF0YQBTeW1waG9ueQBCb290eSBCcmFzcwBQcmltdXMAUG9ybiBHcm9vdmUAU2F0aXJlAFNsb3cgSmFtAENsdWIAVGFuZ28AU2FtYmEARm9sa2xvcmUAQmFsbGFkAFBvd2VlciBCYWxsYWQAUmh5dG1pYyBTb3VsAEZyZWVzdHlsZQBEdWV0AFB1bmsgUm9jawBEcnVtIFNvbG8AQSBDYXBlbGEARXVyby1Ib3VzZQBEYW5jZSBIYWxsAAAAAAAAAAAAAAIAAAADAAAAI2JtcDRfcGFyc2VyX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtcDRfcGFyc2VyLmMAYm1wNF9wYXJzZXJfaW5zdGFsbF9oYW5kbGVyOj4gJSNseCAgJSNseCclYyVjJWMlYycAYm1wNF9wYXJzZXJfaW5zdGFsbF9oYW5kbGVyOjwgJSNseCAgJSNseCclYyVjJWMlYycAaGFuZGxlcgBibXA0X3BhcnNlcl9yZW1vdmVfaGFuZGxlcjo+ICUjbHggICUjbHgnJWMlYyVjJWMnAGJtcDRfcGFyc2VyX3JlbW92ZV9oYW5kbGVyOjwgJSNseCAgJSNseCclYyVjJWMlYycAcGFyc2UAZGlzY2FyZABjYXB0dXJlAGZvcm1hdF9lcnJvcgBibXA0X3Jlc2V0PjogJSNseABibXA0X3Jlc2V0PDogJSNseABibXA0X3BhcnNlcl9zZWVrOiAlcCAweCV4JTA4eCBuby1vcABibXA0X3BhcnNlcl9zZWVrOiAlcCAweCV4JTA4eCglbGQpAGJtcDRfcGFyc2VyX3NlZWsgWyV1XSAnJWMlYyVjJWMnIGxlZnQgJXUgc2l6ZSAldSBieXRlcyAldQBsZWZ0PT0wAHN0ZXA+PTAAYm94LT5zaXplID49IGJveC0+bGVmdABtcDQtPmJveGVzLnNpemUgPiAwAG1wNC0+Ym94ZXMuc2l6ZTw9Ql9NUDRfTUFYX0JPWEVTAGJtcDRfcGFyc2VyX3NlZWsgcG9wIFsldV06IGxlZnQgJyVjJWMlYyVjJyAldSBzaXplICV1LCBwcmV2ICclYyVjJWMlYycgJXUgc2l6ZSAldQBibXA0X2NyZWF0ZT46ICUjbHgAY2ZnAGZhY3RvcnkAYm1wNF9jcmVhdGU6IG91dCBvZiBtZW1vcnkgJXUAYm1wNF9jcmVhdGU+OiAlI2x4ICUjbHgAYm1wNF9kZXN0cm95PjogJSNseABibXA0X2Rlc3Ryb3k6ICUjbHggbG9zdCBib3hfaGFuZGxlciAlI2x4IC4uLgBibXA0X2Rlc3Ryb3k6ICUjbHggbG9zdCBib3hfaGFuZGxlciAlI2x4ICclYyVjJWMlYycAYm1wNF9kZXN0cm95PDogJSNseABibXA0X3BhcnNlcl9mZWVkPjolcCAlcCAlbHUAYm1wNF9wYXJzZXJfZmVlZDolcCBhZGRpbmcgYXRvbSAlcCgldSkAYm94AGJtcDRfcGFyc2VyX2ZlZWQ6IGRpc2NhcmQgJXUgJXUAYm1wNF9wYXJzZXJfZmVlZDogY2FwdHVyZSAldSAldQBibXA0X3BhcnNlcl9mZWVkOiBjYXB0dXJlZCAnJWMlYyVjJWMnICV1IGJ5dGVzAHNpemU9PTAAYm1wNF9wYXJzZXIAbXA0LT5ib3hlcy5zaXplPjAAY29uc3VtZVsldTonJWMlYyVjJWMnXSBsZWZ0ICV1IGJ5dGVzICV1AGJveC0+bGVmdD49Ynl0ZXMAJSNseCBCX01QNF9BU1NFUlQoJXMpIEZhaWxlZCBhdCAlczoldQBwb3BbJXU6JyVjJWMlYyVjJ106IGxlZnQgJXUgcHJldiAnJWMlYyVjJWMnIHNpemUgJXUAYm94LT5sZWZ0ID49IHByZXYtPnNpemUAZm91bmQgYm94ICclYyVjJWMlYycgc2l6ZSAlbHUAcGFyc2UgJyVjJWMlYyVjJwBEaXNjYXJkaW5nIHplcm8gZGF0YSBib3ggJyVjJWMlYyVjJwBjYXB0dXJlIGZvciAlI2x4ICclYyVjJWMlYycAZGlzY2FyZCAnJWMlYyVjJWMnAHB1c2hbJXU6JyVjJWMlYyVjJ106IGxlZnQgJXUgc2l6ZSAldQB1c2VyX2JveDogJyVjJWMlYyVjJ1snJWMlYyVjJWMnXSAldSAtPiAlI2x4AHNraXBfbGVuPT1sZW4AYXRvbQDjgwAA6YMAAPGDAAD5gwAAI2JtcDRfcHJvYmVfdABtcDQAAAAAAAAAAAAAAAsAAADCiAAAAAEAAHkAAAB6AAAAewAAAHwAAAB9AAAAYl9tcDRfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBibXA0X3Byb2JlAAAAAAAAAAAAAHN0dHNzdHRjenN0czJ6dHNjc3Rzb2N0czQ2b2Nzc3Rzemlhc29pYXNwZ2JzZHBnc2NuZXNoc3RzcGR0c2JkYXBwdGRzcGdic2RpdXVhcm1yc2J1c3RhZG1iX21wNF9wcm9iZV9vYmplY3RfYmVnaW46JXAgJyVjJWMlYyVjJyAldSBieXRlcyBhdCAlI2x4AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXA0X3Byb2JlLmMAYl9tcDRfcHJvYmVfaGRybDogJXAgY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAAAAAAAAAICB0cWEyZzNtb3NpMm9zaTRvc2kxNHBtMjRwbWJfbXA0X3BsYXllcl9maWxldHlwZTolcCAnJWMlYyVjJWMnWyclYyVjJWMlYyddICV1IGJ5dGVzAGJveABiX21wNF9wcm9iZV9tb3ZpZTolcCAnJWMlYyVjJWMnWyclYyVjJWMlYyddICV1IGJ5dGVzAGJfbXA0X3Byb2JlX21vdmllOiUjbHggZXJyb3IgaW4gdGhlIG1vdmllIGhlYWRlcgBiX21wNF9wcm9iZV9tb3ZpZTolI2x4IHBhcnNpbmcgY29tcGxldGVkAGJfbXA0X3Byb2JlX3RyYWNrOiVwICclYyVjJWMlYydbJyVjJWMlYyVjJ10gJXUgYnl0ZXMAYl9tcDRfcHJvYmVfdHJhY2s6JXAgY3JlYXRpbmcgbmV3IHRyYWNrAGJfbXA0X3Byb2JlX3RyYWNrOiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBwcm9iZS0+c3RyZWFtAGJfbXA0X3Byb2JlX3RyYWNrOiBzYW1wbGVfY291bnQgJXUgZHVyYXRpb24gJXUgZnJhbWVfcmF0ZSAlZgB0cmFjazogJXUgc2FtcGxlZGVzY3JpcHRpb246JXUoJXUpACVzOiBJbmZvcm1hdGlvbiBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBzYW1wbGVyYXRlIG5vdCBhdmFpbGFibGUsIHVzaW5nIGFuIHVuc3VwcG9ydGVkIHNhbXBsZSByYXRlICV1AGJfbXA0X3Byb2JlX3ZhbGlkYXRlX3NhbXBsZV9yYXRlACVzOiBUcmFjayBzYW1wbGUgcmF0ZSAldSBpcyB1bnJlY29nbml6ZWQuIENhbGN1bGF0aW5nIHRoZSByYXRlIHRvIGJlICV1ACVzOiBUcmFjayB1c2luZyBhbiB1bnN1cHBvcnRlZCBzYW1wbGUgcmF0ZSAldQBiX21wNF9wcm9iZV9tZWRpYTolcCAnJWMlYyVjJWMnWyclYyVjJWMlYyddICV1IGJ5dGVzAGJfbXA0X3Byb2JlX21lZGlhOiAlI2x4IHRyYWNrOiV1IGVycm9yIGluIHBhcnNpbmcgTWVkaWEgSGVhZGVyAGJfbXA0X3Byb2JlX21lZGlhOiAlI2x4IHRyYWNrOiV1IGVycm9yIGluIHBhcnNpbmcgSGFuZGxlciBSZWZlcmVuY2UAYl9tcDRfcHJvYmVfbWVkaWFpbmZvOiUjbHggJyVjJWMlYyVjJ1snJWMlYyVjJWMnXSAldSBieXRlcwBiX21wNF9wcm9iZV9zYW1wbGV0YWJsZTolcCAnJWMlYyVjJWMnWyclYyVjJWMlYyddICV1IGJ5dGVzAGJfbXA0X3Byb2JlX21lZGlhOiAlI2x4IHRyYWNrOiV1IFNhbXBsZSBEZXNjcmlwdGlvbiBpbnZhbGlkIG51bWJlciBvZiBlbnRyaWVzAGJfbXA0X3Byb2JlX21lZGlhOiAlI2x4IHRyYWNrOiV1IGVycm9yIGluIHBhcnNpbmcgU2FtcGxlIERlc2NyaXB0aW9uAGJfbXA0X3Byb2JlX21lZGlhOiAlI2x4IHRyYWNrOiV1IEhhbmRsZXIgUmVmZXJlbmNlIGludmFsaWQsIGNhbid0IHBhcnNlIFNhbXBsZSBEZXNjcmlwdGlvbgBwcm9iZS0+c3RyZWFtPT1OVUxMAGJfbXA0X3Byb2JlX3BhcnNlOiAlcCByZWFkaW5nICV1OiV1AGJfbXA0X3Byb2JlX3BhcnNlOiAlcCBib3hfbGVuZ3RoOiV1IGFjY19sZW5ndGg6JXUAYl9tcDRfcHJvYmVfcGFyc2U6ICVwIHJlYWQgJXU6JXUgLT4gJXAAYl9tcDRfcHJvYmVfcGFyc2U6ICUjbHggbW9vdjogJXU6JXUgbWRhdDoldToldSAldUtCcHMAY3Vyc29yAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXA0X3V0aWwuYwBib3gAYm1wNF9wYXJzZV9ib3g6ICclYyVjJWMlYyc6JXUAYm1wNF9maW5kX2JveDogZmluZCAnJWMlYyVjJWMnOiV1AGJtcDRfZmluZF9ib3g6IGxvb2tpbmcgJyVjJWMlYyVjJyBza2lwcGluZyAnJWMlYyVjJWMnOiV1AGJtcDRfcGFyc2VfZnVsbGJveDogdmVyc2lvbjoldSBmbGFnczolI3gAZmlsZXR5cGUAYm1wNF9wYXJzZV9maWxldHlwZTogbWFqb3JfYnJhbmQ6JyVjJWMlYyVjJyBtaW5vcl92ZXJzaW9uOiV1IG5jb21wYXRpYmxlX2JyYW5kczoldQBtb3ZpZWhlYWRlcgBibXA0X3BhcnNlX21vdmllaGVhZGVyOiB1bmtub3duIHZlcnNpb24gJXUAYm1wNF9wYXJzZV9tb3ZpZWhlYWRlcjogdmVyc2lvbjoldSBjcmVhdGlvbl90aW1lOiV1IG1vZGlmaWNhdGlvbl90aW1lOiV1IHRpbWVzY2FsZToldSBkdXJhdGlvbjoldSgldSBzZWMpIHJhdGU6JXUgdm9sdW1lOiV1IG5leHRfdHJhY2tfSUQ6JXUAdHJhY2toZWFkZXIAYm1wNF9wYXJzZV90cmFja2hlYWRlcjogdmVyc2lvbjoldSB0cmFja19JRDoldSBkdXJhdGlvbjoldSBsYXllcjoldSBhbHRlcm5hdGVfZ3JvdXA6JXUgdm9sdW1lOiV1IHdpZHRoOiV1IGhlaWdodDoldQBtZWRpYWhlYWRlcgBibXA0X3BhcnNlX21lZGlhaGVhZGVyOiB1bmtub3duIHZlcnNpb24gJXUAYm1wNF9wYXJzZV9tZWRpYWhlYWRlcjogdmVyc2lvbjoldSBjcmVhdGlvbl90aW1lOiV1IG1vZGlmaWNhdGlvbl90aW1lOiV1IHRpbWVzY2FsZToldSgldSBzZWMpIGR1cmF0aW9uOiV1IGxhbmd1YWdlOiVzAHN0cmxlbj4wAHN0cmluZwBoYW5kbGVyAGJtcDRfcGFyc2VfaGFuZGxlcjogdmVyc2lvbjoldSBoYW5kbGVyX3R5cGU6JyVjJWMlYyVjJyBuYW1lOiclcycAYm1wNF9wYXJzZV92aXN1YWxzYW1wbGVlbnRyeTogJXAgc3RlcmVvX21vZGU6JXUAYm1wNF9wYXJzZV92aXN1YWxzYW1wbGVlbnRyeTogJXAgc3BoZXJpY2FsX3ZpZGVvOiV1LCV1AEF1ZGlvIHNhbXBsZSBlbnRyeSB2ZXJzaW9uOiAlZABibXA0X3BhcnNlX2F1ZGlvc2FtcGxlZW50cnk6IHZlcnNpb246JXUgY2hhbm5lbGNvdW50OiV1IHNhbXBsZXNpemU6JXUgc2FtcGxlcmF0ZToldQBzYW1wbGVfcmF0ZSAlZgBmb3JtYXRTcGVjaWZpY0ZsYWdzOiAlMDh4AGF2YwBiX21wNF9wYXJzZV9zYW1wbGVfYXZjOiBjb25maWd1cmF0aW9uVmVyc2lvbjoldSBBVkNQcm9maWxlSW5kaWNhdGlvbjoldSBwcm9maWxlX2NvbXBhdGliaWxpdHk6JXUgQVZDTGV2ZWxJbmRpY2F0aW9uOiV1IGxlbmd0aFNpemU6JXUgblNlcXVlbmNlUGFyYW1ldGVyU2V0czoldSBuUGljdHVyZVBhcmFtZXRlclNldHM6JXUAc2FtcGxlAGJtcDRfcGFyc2Vfc2FtcGxlOiB0cnVuY2F0aW5nIG51bWJlciBvZiBzYW1wbGVzICV1IC0+ICV1AGJtcDRfcGFyc2Vfc2FtcGxlOiBpbnZhbGlkIHNhbXBsZSAldQBibXA0X3BhcnNlX3NhbXBsZTogY2FuJ3QgZmluZCB1c2VmdWwgUHJvdGVjdGlvbiBTY2hlbWUgSW5mb3JtYXRpbyBCb3ggKCdzaW5mJykgZm9yIHByb3RlY3RlZCB0cmFjawBibXA0X3BhcnNlX3NhbXBsZTogdHlwZSAnJWMlYyVjJWMnIC0+ICclYyVjJWMlYycAYm1wNF9wYXJzZV9zYW1wbGU6IGF2YyB2aWRlbwBibXA0X3BhcnNlX3NhbXBsZTogSEVWQyB2aWRlbwBibXA0X3BhcnNlX3NhbXBsZTogTVBFRzQtUGFydDIgdmlkZW8AYm1wNF9wYXJzZV9zYW1wbGU6IEguMjYzIHZpZGVvAGJtcDRfcGFyc2Vfc2FtcGxlOiBNSlBFRyB2aWRlbyAnJWMlYyVjJWMnAGJtcDRfcGFyc2Vfc2FtcGxlOiBEUk0gdmlkZW8AYm1wNF9wYXJzZV9zYW1wbGU6IGF2MSB2aWRlbwBibXA0X3BhcnNlX3NhbXBsZTogTVA0QShBQUMpIGF1ZGlvAGJtcDRfcGFyc2Vfc2FtcGxlOiBBQy0zIGF1ZGlvAGJtcDRfcGFyc2Vfc2FtcGxlOiBFQUMtMyBhdWRpbwBibXA0X3BhcnNlX3NhbXBsZTogQUMtNCBhdWRpbwBibXA0X3BhcnNlX3NhbXBsZTogU0FNUiBhdWRpbwBibXA0X3BhcnNlX3NhbXBsZTogU0FXQiBhdWRpbwBibXA0X3BhcnNlX3NhbXBsZTogU0FXTyBhdWRpbwBibXA0X3BhcnNlX3NhbXBsZTogRFJNIGF1ZGlvAGJtcDRfcGFyc2Vfc2FtcGxlOiBJTUEgQURQQ00gYXVkaW8AYm1wNF9wYXJzZV9zYW1wbGU6IElNQTQgQURQQ00gYXVkaW8AYm1wNF9wYXJzZV9zYW1wbGU6IFRXT1MgYXVkaW8AYm1wNF9wYXJzZV9zYW1wbGU6IERUUyBhdWRpbyAnJWMlYyVjJWMnAGJtcDRfcGFyc2Vfc2FtcGxlOiBNUDMgYXVkaW8AYm1wNF9wYXJzZV9zYW1wbGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAHByb3RlY3Rpb25fc2NoZW1lX2luZm9ybWF0aW9uX3NpemUgPD0gc2l6ZW9mKGVudHJ5LT5wcm90ZWN0aW9uX3NjaGVtZV9pbmZvcm1hdGlvbikAYm1wNF9wYXJzZV9zYW1wbGU6IGludmFsaWQgc2l6ZSBvZiBjb2RlYyBib3ggJXU+JXUAYm1wNF9wYXJzZV9zYW1wbGU6IGVycm9yIHdoaWxlIHBhcnNpbmcgQVZDIHNhbXBsZQBibXA0X3BhcnNlX3NhbXBsZTogZXJyb3Igd2hpbGUgcGFyc2luZyBNUDRBIHNhbXBsZQBibXA0X3BhcnNlX3NhbXBsZTogZXJyb3Igd2hpbGUgcGFyc2luZyBBVjEgc2FtcGxlAGJtcDRfcGFyc2Vfc2FtcGxlOiB1bmtub3duIHNhbXBsZSAnJWMlYyVjJWMnIGZvciBoYW5kbGVyICclYyVjJWMlYycAZW5kX3Bvcz49c3RhcnRfcG9zAGJtcDRfcGFyc2Vfc2FtcGxlOiBlcnJvciB3aGlsZSBwYXJzaW5nIGVudHJ5AABibXA0X3V0aWwAYm1wNF9wYXJzZV92aXN1YWxzYW1wbGVlbnRyeTogd2lkdGg6JXUgaGVpZ2h0OiV1IGhvcml6cmVzb2x1dGlvbjoldSB2ZXJ0cmVzb2x1dGlvbjoldSBmcmFtZV9jb3VudDoldSBjb21wcmVzc29ybmFtZTolcyBkZXB0aDoldQBiX21wNF9wYXJzZV9zYW1wbGVfYXZjOiBkaXNjYXJkaW5nIHVua25vd24gc2FtcGxlICclYyVjJWMlYycgJXU6JXUAAAAAAAAAAAAAAHcBAIhYAQAA+gAAgLsAAESsAAAAfQAAwF0AACJWAACAPgAA4C4AABErAABAHwAAthwAAEFBQyBtYWluAEFBQyBMQwBBQUMgU1NSAEFBQyBMVFAAQUFDIFNCUgBiX21wNF9wYXJzZV9zYW1wbGVfbXA0YTogY29kZWM6JXMoJSN4KSBzYW1wbGluZ19yYXRlOiV1KCV1KSBjaGFubmVsQ29uZmlndXJhdGlvbjoldQBiX21wNF9wYXJzZV9zYW1wbGVfbXA0YTogdW5zdXBwb3J0ZWQgb2JqZWN0VHlwZUluZGljYXRpb24gJSN4AGJfbXA0X3BhcnNlX3NhbXBsZV9tcDR2OiB1bnN1cHBvcnRlZCBvYmplY3RUeXBlSW5kaWNhdGlvbiAlI3gAYl9tcDRfcGFyc2Vfc2FtcGxlX2FtcjogdmVuZG9yKCclYyVjJWMlYycpIGRlY29kZXJfdmVyc2lvbjoldSBtb2RlX3NldDoldSBtb2RlX2NoYW5nZV9wZXJpb2Q6JXUgZnJhbWVzX3Blcl9zYW1wbGU6JXUAYl9tcDRfcGFyc2Vfc2FtcGxlX2ltYTQ6IHNhbXBsZXNQZXJQYWNrZXQ6JXUgYnl0ZXNQZXJGcmFtZToldQBiX21wNF9wYXJzZV9zYW1wbGVfc291bmRfZGVzY3JpcHRvcl92MTogc2FtcGxlc1BlclBhY2tldDoldSBieXRlc1BlclNhbXBsZToldSBieXRlc1BlckZyYW1lOiV1IGJ5dGVzUGVyU2FtcGxlOiV1AGJfbXA0X3BhcnNlX3NhbXBsZV90d29zOiBzYW1wbGVzUGVyUGFja2V0OiV1IGJ5dGVzUGVyRnJhbWU6JXUAaGV2YwBiX21wNF9wYXJzZV9zYW1wbGVfaGV2Yzogbm90IHN1cHBvcnRlZCB2ZXJzaW9uICV1AGJfbXA0X3BhcnNlX3NhbXBsZV9oZXZjOiBjYW4ndCBwYXJzZSBodmNDIGRhdGEAYXYxAGJfbXA0X3BhcnNlX3NhbXBsZV9hdjE6IGNvZGVjcHJpdmF0ZS5zaXplOiV1IGNvbmZpZ3VyYXRpb25SZWNvcmQuc2l6ZToldSBhdjEwX2hlYWRlcl9zaXplOiV1AGJfbXA0X3BhcnNlX3NhbXBsZV9hdjE6IGNvbmZpZ09CVXNfbGVuZ3RoOiV1AAAAtJsAAL2bAADEmwAAzJsAANSbAAAAAAAAAAAAACNibXBlZzFfcGFyc2VyX3QAc3RyZWFtAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXBlZzFfcGFyc2VyLmMAY3Vyc29yAGJfbXBlZzFfcGFyc2VyX3N0cmVhbV9mZWVkOiAlI2x4IGludmFsaWQgcGFja2V0X3N0YXJ0X2NvZGVfcHJlZml4IDB4JTA4eCE9IDB4MDAwMDAxWFgAYm1wZWcxX3BhcnNlcl9mZWVkOiUjbHggYXRvbTolI2x4AGFjY19sZW48PXBhcnNlci0+cGFja2V0LnNpemUAMABjZmcAaGFuZGxlcgBmYWN0b3J5AGJtcGVnMV9wYXJzZXJfY3JlYXRlOiBvdXQgb2YgbWVtb3J5ICV1AGJtcGVnMV9wYXJzZXIAYl9tcGVnMV9wYXJzZXJfcmVzeW5jOiAlI2x4AAAAAAAAI2JtcGVnMV9wcm9iZV90AG1wZwAAAHZjZAAAAG1wZWcAAAAAAAAAAAoAAACgoAAAEAAAAIEAAACCAAAAgwAAAIQAAAAqAAAAAAAAAAAAAAAjYl9tcGVnMV9wdHNfcGFyc2VyAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXBlZzFfcHJvYmUuYwBibXBlZzFfcHRzX3BhcnNlcl9jcmVhdGU6ICVwIHN0cmVhbSBpZDolI3ggcGFja2V0X2xlbjoldQCFAAAAhgAAAIcAAABiX21wZWcxX3Byb2JlX2hlYWRlcl9tYXRjaDogJXMgYXQgJXUAcGFzc2VkAGZhaWxlZABmYWN0b3J5AGJfbXBlZzFfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBwYWNrZXQAaGRyAHByb2JlLT5zdHJlYW09PU5VTEwAYl9tcGVnMV9wcm9iZV9wYXJzZTogJXAgcmVhZGluZyAldToldQBiX21wZWcxX3Byb2JlX3BhcnNlOiAlcCByZWFkICV1OiV1IC0+ICVwAGJfbXBlZzFfcHJvYmVfcGFyc2U6ICUjbHggZmluaXNoZWQgcGFyc2luZyBhdCAldSB0cmFja3M6JXUgcGFyc2VkOiV1AGJtcGVnMV9wcm9iZQBvZmZzZXQ+PTAAY3Vyc29yAHRpbWVzdGFtcABwYXJzZXItPnN0cmVhbS50aW1lc3RhbXA9PU5VTEwAKGludClzY29kZSE9QkFUT01fRU9GAGJfbXBlZzFfcHRzX3BhcnNlcl9wZXNfcGF5bG9hZDogJXAgcGlkOiUjeCAgZmxhZ3MgJSN4AHN0cmVhbV9pZC0+dGltZXN0YW1wAHN0cmVhbQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1wZWcycGVzX3BhcnNlci5jAGN1cnNvcgBiX21wZWcycGVzX3BhcnNlcl9zdHJlYW1fZmVlZDogJSNseCBpbnZhbGlkIHBhY2tldF9zdGFydF9jb2RlX3ByZWZpeCAweCUwOHghPSAweDAwMDAwMVhYAHN0cmVhbV9pZDwweDEwMABwZXMAcGF5bG9hZF9zdGFydABzcmMAYm1wZWcycGVzX3BhcnNlcl9mZWVkOiAlI2x4IGRldGVjdGVkIG5ldyBwZXMgcGFja2V0ICUjeCBsZW4gKCV1KQAAAAAjYm1wZWcycGVzX2RlbXV4X3QAZmFjdG9yeQBjb25maWcAc3RhdHVzAGJtcGVnMnBlc19kZW11eF9mZWVkOiVwIGF0b206JXA6JXUAcGVzLT5wYWNrZXRfb2ZmIDwgcGVzLT5wYWNrZXRfbGVuAHBlcy0+cGFja2V0X29mZjw9cGVzLT5wYWNrZXRfbGVuACFCQVRPTV9JU19FT0YoJmN1cnNvcikAbGVuPj00AGJtcGVnMnBlc19kZW11eF9mZWVkOiUjbHggcmVzeW5jOiV1AGJtcGVnMnBlc19wYXJzZXIAYl9tcGVnMnBlc19wYXJzZXJfaGRyOiAlI2x4IGludmFsaWQgcGFja2V0X3N0YXJ0X2NvZGVfcHJlZml4IDB4JTA4eCE9IDB4MDAwMDAxWFgAYl9tcGVnMnBlc19wYXJzZXJfaGRyOiAlI2x4IHVua25vd24gcGVzIGlkICUjeCglI3gpAAAAAAAAAAAAACNibXBlZzJwZXNfcHJvYmVfdAAAAAAAAAAAAAAAAAAAcGVzAAAAbXBnAAAAdm9iAAAAbXBlZwAAAAAAAAAAAAADAAAAAKYAAAwAAACMAAAAjQAAAI4AAACPAAAAKgAAACNiX21wZWcycGVzX3B0c19wYXJzZXIAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtcGVnMnBlc19wcm9iZS5jAGJtcGVnMnBlc19wdHNfcGFyc2VyX2NyZWF0ZTogJXAgc3RyZWFtIGlkOiUjeCBwYWNrZXRfbGVuOiV1AAAAAJAAAACRAAAAkgAAAGhlYWRlcl9tYXRjaDoldQBiX21wZWcycGVzX3Byb2JlX3BhY2tldDogc3RyZWFtX2lkOiUjeCBsZW5ndGg6JXUAYl9tcGVnMnBlc19wcm9iZV9jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAHByb2JlLT5zdHJlYW0AYl9tcGVnMnBlc19wcm9iZV9wZXNfcGFja2V0OiAlI2x4IHN0cmVhbV9pZDolI3ggc3Vic3RyZWFtX2lkOiUjeABiX21wZWcycGVzX3Byb2JlX3Blc19wYWNrZXQ6ICVwIHN0cmVhbSAleCBwZXMgcGF5bG9hZCAlcDoldQBiX21wZWcycGVzX3Byb2JlX3Blc19wYWNrZXQ6ICVwIGRyb3BwaW5nIGlkOiUjeCAldQAQFBgAAAAAAAAAAACAuwAAAHcBAAAAAAAAAAAAIUJBVE9NX0lTX0VPRihwYXlsb2FkKQBwcm9iZS0+c3RyZWFtPT1OVUxMAGJfbXBlZzJwZXNfcHJvYmVfcGFyc2U6ICVwIHJlYWRpbmcgJXU6JXUAYl9tcGVnMnBlc19wcm9iZV9wYXJzZTogJXAgcmVhZCBjb21wbGV0ZWQgJXUgYXQgJXUAYl9tcGVnMnBlc19wcm9iZV9wYXJzZTogJXAgcmVhZCAldToldSAtPiAlcABiX21wZWcycGVzX3Byb2JlX3BhcnNlOiAlI2x4IHRvbyBtdWNoKCV1KSByZXN5bmNzIABiX21wZWcycGVzX3Byb2JlX3BhcnNlOiAlI2x4IHBhcnNlZDoldSB0cmFja3M6JXUgY29tcGxldGVkOiV1AGJfbXBlZzJwZXNfcHJvYmVfcGFyc2U6ICUjbHggcGFyc2VkICV1IGJ5dGVzAGJfbXBlZzJwZXNfdmVyaWZ5X3N0cmVhbTogcmVhZGluZyAldToldQBibXBlZzJwZXNfcHJvYmUAb2Zmc2V0Pj0wAGN1cnNvcgB0aW1lc3RhbXAAcGFyc2VyLT5zdHJlYW0udGltZXN0YW1wPT1OVUxMAHN0cmVhbV9pZC0+dGltZXN0YW1wAHBzaQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1wZWcycHNpX3BhcnNlci5jAHBheWxvYWRfc3RhcnQAc3JjAGJtcGVnMnBzaV9wYXJzZXJfZmVlZDogJXAgJXA6JXU6JSN4ICVzJXMlcyVzAEVSUiAAAERJU0MgAE1ESVNDIABTVEFSVCAAYm1wZWcycHNpX3BhcnNlcl9mZWVkOiAlcCBmb3VuZCBzZWN0aW9uOiV1AGJtcGVnMnBzaV9wYXJzZXJfZmVlZDogJXAgc2VjdGlvbjoldSBkaXNjYXJkZWQAYm1wZWcycHNpX3BhcnNlcl9mZWVkOiAlcCBleHRyYWN0ZWQgc2VjdGlvbjolcCgldToldSkAYm1wZWcycHNpX3BhcnNlcgBwYXJzZXJfcGlkAC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXBlZzJ0c19wYXJzZXIuYwBjdXJzb3IAYm1wZWcydHNfcGFyc2VyX3BpZF9mZWVkOiAlI2x4IHRyYW5zcG9ydF9lcnJvcl9pbmRpY2F0b3IAYm1wZWcydHNfcGFyc2VyX3BpZF9mZWVkOiAlI2x4IGNvbnRpbnVpdHkgY291bnRlciBlcnJvciAlI3goJSN4KQBibXBlZzJ0c19wYXJzZXJfcGlkX2ZlZWQ6ICUjbHggaW52YWxpZCBhZGFwdGF0aW9uX2ZpZWxkX2xlbmd0aD0ldQAlI2x4Om91dF9vZl9zeW5jOiUjeDoldSAldS8ldQAAAAAAAAAAAAAjYm1wZWcydHNfcGFyc2VyX3QAYm1wZWcydHNfcGFyc2VyX2NyZWF0ZTogY2FuJ3QgYWxsb2NhdGUgJXUgYnl0ZXMAcGlkLT5waWQ8PUJNUEVHMlRTX05VTExfUElEAGJtcGVnMnRzX3BhcnNlcl9hZGRfcGlkOiAlI2x4IGR1cGxpY2F0ZWQgcGlkICUjeCglI2x4KQBwaWQ8PUJNUEVHMlRTX05VTExfUElEAEJIQVNIX0ZJTkQoYl9tcGVnMnRzX3BpZF9oYXNoLCAmdHMtPnBpZHMsIHBpZCkhPU5VTEwAYm1wZWcydHNfcGFyc2VyX3JlbW92ZV9waWQ6ICUjbHggcmVtb3ZpbmcgdW5rbm93biBwaWQgJXUAYm1wZWcydHNfcGFyc2VyX2ZlZWQ6JSNseCBhdG9tOiUjbHgAcGlkX3Jlc3VsdDw9Qk1QRUcyVFNfTlVMTF9QSUQAYm1wZWcydHNfcGFyc2VyX2ZlZWQ6ICVwIGFjdGlvbiBibXBlZzJ0c19wYXJzZXJfYWN0aW9uX2NvbnN1bWUgc2hhbGwgcmVzdWx0IGluIG5ldyBQSUQgcmVnaXN0ZXJlZAAwAGJtcGVnMnRzX3BhcnNlcl9mZWVkOiAlcCBvdXQgb2Ygc3luYyAlI3ggJXU6JXUgYXQgJXUAWyV1XXRyeSBzeW5jIGF0ICV1AGZvdW5kIHN5bmMgYXQgJXUoJXUpAGJtcGVnMnRzX3BhcnNlcgBoAGJtcGVnMnRzX3BhcnNlcl9mZWVkOiAlcCByZWFjcXVpcmVkIHN5bmMgYXQgJSN4ICV1OiV1IGF0ICV1AAAAAAAjYm1wZWcydHNfcHJvYmVfdAAAAAAAAAAAAAAAAAAAAHRzAAAAAG1wZwAAAHRycAAAAG1wZWcAAHRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRzAAAAAG1wZwAAAHRycAAAAG1wZWcAAHRwAAAAAG0ydHMAAG10cwAAAAAAAAAAAAQAAABArwAA4AUAAJoAAACbAAAAnAAAAJ0AAAAqAAAABAAAAHCvAAAABgAAngAAAJ8AAACcAAAAnQAAACoAAAAjYl9tcGVnMnRzX3Bjcl9wYXJzZXIAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtcGVnMnRzX3Byb2JlLmMAYm1wZWcydHNfcGNyX3BhcnNlcl9jcmVhdGU6ICVwIHBpZDolI3ggcGFja2V0X2xlbjoldQCgAAAAoQAAAKIAAABiX21wZWcydHNfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiX21wZWcydHNfcHJvYmVfcGlkOiAlI2x4IG5ldyBwaWQgJSN4AGJfbXBlZzJ0c19wcm9iZV90c19wYXlsb2FkOiAlcCBwaWQ6JSN4IHBjcjoleCgleCkgAGJfbXBlZzJ0c19wcm9iZV9wZXNfcGFja2V0OiAlcCBzdHJlYW0gJSN4OiUjeCBwZXMgcGF5bG9hZCAlcDoldQBwcm9iZS0+c3RyZWFtAHByb2JlLT5zdHJlYW09PU5VTEwAYl9tcGVnMnRzX3Byb2JlX3BhcnNlOiAlcCByZWFkaW5nICV1OiV1AGJfbXBlZzJ0c19wcm9iZV9wYXJzZTogJXAgcmVhZCBjb21wbGV0ZWQgJXUgYXQgJXUAYl9tcGVnMnRzX3Byb2JlX3BhcnNlOiAlcCByZWFkICV1OiV1IC0+ICVwAGJfbXBlZzJ0c19wc2lfcHJvYmVfcGFyc2U6ICUjbHggdG9vIG11Y2goJXU6JXUpIHJlc3luY3MgAGJfbXBlZzJ0c19wcm9iZV9wYXJzZTogJSNseCBwYXJzZWQ6JXUgcGlkczoldSB0cmFja3M6JXUgY29tcGxldGVkOiV1AFRpbWVkIG91dCBkdXJpbmcgYl9tcGVnMnRzX3Byb2JlX3BhcnNlIHBhcnNlZDoldSBwaWRzOiV1IHRyYWNrczoldSBjb21wbGV0ZWQ6JXUARmluaXNoZWQgYWZ0ZXIgcGFyc2luZyAldSBieXRlcywgY29tcGxldGVkIHBjciAlZCwgZXhwZWN0ZWQgJWQgdHJhY2tzAGJfbXBlZzJ0c19wcm9iZV9wYXJzZTogJSNseCBwYXJzZWQgJXUgYnl0ZXMAYm1wZWcydHNfcHJvYmUAb2Zmc2V0Pj0wAGN1cnNvcgB0aW1lc3RhbXAAc2tpcD4wAHBjcl9waWQtPnRpbWVzdGFtcAAAAAAAI2JtcGVnMnRzX3BzaV9wcm9iZV90AAAABAAAAECvAADgBQAAmgAAAKcAAACoAAAAqQAAACoAAAAEAAAAcK8AAAAGAACeAAAAqgAAAKgAAACpAAAAKgAAAGJfbXBlZzJ0c19wc2lfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBibXBlZzJ0c19wc2lfcHJvYmUAYl9tcGVnMnRzX3BzaV9wcm9iZV90c19wYXlsb2FkOiVwIHBpZDolI3ggJXUgYnl0ZXMAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2JtcGVnMnRzX3BzaV9wcm9iZS5jAGJfbXBlZzJ0c19wc2lfcHJvYmVfcGF0OiAlcCAgc2VjdGlvbl9zaXplOiV1AGJfbXBlZzJ0c19wc2lfcHJvYmVfcGF0OiAlcCAgbnByb2dyYW1zOiV1AGJfbXBlZzJ0c19wc2lfcHJvYmVfcGF0OiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiX21wZWcydHNfcHNpX3Byb2JlX3BhdDogJSNseCBwaWQgJXUgY2FuJ3QgYmUgUE1UIHBpZABiX21wZWcydHNfcHNpX3Byb2JlX3BhdDogcHJvZ3JhbSB6ZXJvIG11c3QgYmUgTklUIC0gaWdub3JlAGJfbXBlZzJ0c19wc2lfcHJvYmVfcG10OiAlI2x4IGF0dGFjaCBuZXcgUE1UIHRvIHRoZSBwaWQgJXUAYl9tcGVnMnRzX3BzaV9wcm9iZV9wYXQ6ICUjbHggJXUgcHJvZ3JhbToldSBwaWQ6JSN4IABpbnZhbGlkIFBBVABiX21wZWcydHNfcHNpX3Byb2JlX3BtdDogJXAgIHNlY3Rpb25fc2l6ZToldSBwaWQ6JSN4IHByb2dyYW1fbnVtYmVyOiV1ICgldToldSkAcHJvYmUtPm5fcG10X3BpZHM+cHJvYmUtPmRvbmVfcG10X3BpZHMAYl9tcGVnMnRzX3BzaV9wYXJzZV9wbXQ6ICUjbHggY2FwdHVyZWQgYWxsICV1IFBNVABpbnZhbGlkIFBNVABwcm9iZS0+c3RyZWFtAGJfbXBlZzJ0c19wc2lfcGFyc2VfcG10OiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiX21wZWcydHNfcHNpX3AsIHVuc2lnZWQgcG10X3BpZGFyc2VfcG10OiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwBiX21wZWcydHNfcHNpX3BhcnNlX3BtdDogJSNseCBpbnZhbGlkIHBtdF9kYXRhIHByb2dyYW06JXUgc3RyZWFtOiV1AFBNVDogcGlkOiUjeCBzdHJlYW1fdHlwZTolI3gAUE1UOiBwaWQ6JSN4IHByaXZhdGVfcGVzIGRlc2NbMF06JSN4AHN1YnRpdGxlIGxhbmd1YWdlIGNvZGU6ICVzIHR5cGU6JWQgY29tcG9zaXRpb24gcGFnZToldSBhbmNpbGxhcnkgcGFnZToldQBQTVQ6IHBpZDolI3ggcHJpdmF0ZV9wZXMgZGVzY1swXTolI3ggZXh0ZW5zaW9uOiUjeABwcml2YXRlIGRlc2NyaXB0b3IgJXgASEVWQyBmb3VuZCEAYXVkaW8gbGFuZ3VhZ2UgY29kZTolcywgdHlwZToldQBiX21wZWcydHNfcHNpX3BhcnNlX3BtdDogJSNseCBhZGRpbmcgdHJhY2sgJXU6JXUgJXUoJXUpAGJfbXBlZzJ0c19wc2lfcHJvYmVfdHNfcGNyX3BheWxvYWQ6JXAgcGlkOiUjeCAldSBieXRlcwBwcm9iZS0+c3RyZWFtPT1OVUxMAGJfbXBlZzJ0c19wc2lfcHJvYmVfcGFyc2U6ICVwIHJlYWRpbmcgJXU6JXUAYl9tcGVnMnRzX3BzaV9wcm9iZV9wYXJzZTogJXAgcmVhZCAldToldSAtPiAlcABiX21wZWcydHNfcHNpX3Byb2JlX3BhcnNlOiAlcCByZWFkIHRvbyBtdWNoIGRhdGEAYl9tcGVnMnRzX3BzaV9wcm9iZV9wYXJzZTogJSNseCB0b28gbXVjaCgldToldSkgcmVzeW5jcyAAYl9tcGVnMnRzX3BzaV9wcm9iZV9wYXJzZTogJSNseCBwYXJzZWQgJXUgYnl0ZXMAcHJvYmUtPnBtdF9waWRzAG1pc3NpbmcgY29kZWMgZGF0YSAldS8ldQBub3QgZW5vdWdoIHNwYWNlIGZvciBjb2RlYyBkYXRhICV1LyV1AGJtcGVnNF9wYXJzZV9lc19kZXNjcmlwdG9yOiB0b28gbGFyZ2UgSVNPIElFQyAxNDQ5Ni4yIGRlY29kZXIgaW5mb3JtYXRpb24gJXU6JXUAAAAAAAAAAAAAAAAAdwEAiFgBAAD6AACAuwAARKwAAAB9AADAXQAAIlYAAIA+AADgLgAAESsAAEAfAAC2HAAAYm1wZWc0X3V0aWwAYWFjX2luZm86IHByb2ZpbGU6JXUoJXUpIHNhbXBsaW5nX2ZyZXF1ZW5jeV9pbmRleDoldSBjaGFubmVsX2NvbmZpZ3VyYXRpb246JXUgc2FtcGxpbmdfZnJlcXVlbmN5OiV1KCV1KQBibWVkaWFfaW5mb19wcm9iZV9hYWNfaW5mbzolcDogQ2FuJ3QgcGFyc2UgQXVkb1NwZWNpZmljQ29uZmlnAAAAAwAAABAAAAADAAAAAwAAABAAAAAQAAAAAwAAAAEAAAABAAAAAgAAAAMAAAADAAAAAwAAAAQAAAAjYm1wZWdfYXVkaW9fcHJvYmVfdAAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1wZWdfYXVkaW9fcHJvYmUuYwBtcGVnX2luZm8AYl9tcGVnX2F1ZGlvX3Byb2JlX2ZlZWQ6ICVwIHN5bmNfd29yZCAlI3ggYXQ6JXUAYl9tcGVnX2F1ZGlvX3Byb2JlX2ZlZWQ6ICVwIGhlYWRlciAldSBhdDoldSBzaXplOiV1IHNhbXBsZXJhdGU6JXUgYml0cmF0ZToldQBiX21wZWdfYXVkaW9fcHJvYmVfZmVlZDogJXAgb3V0IG9mIHN5bmMgYXQgJXUgJSN4LSUjeCglI3gpAGJfbXBlZ19hdWRpb19wcm9iZV9mZWVkOiAlcCB0cmltICV1AABtcDIAAABtcDMAAABtcGcAAAAAAAAAAAABAAAAAwAAADC9AACAHwAAqwAAAKwAAACtAAAArgAAABoAAABibXBlZ19hdWRpb19wcm9iZQBmYWN0b3J5AG1wZWdfaW5mbwAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm1wZWdfYXVkaW9fdXRpbC5jAHZicl9pbmZvAGJfbXBlZ19hdWRpb19wcm9iZV9wYXJzZV9oZWFkZXI6IHZlcnNpb246JXUgbGF5ZXI6JXUAAAAAAAAAAAAAAAAAAAAAIABAAGAAgACgAMAA4AAAASABQAFgAYABoAHAAQAAAAAgADAAOABAAFAAYABwAIAAoADAAOAAAAFAAYABAAAAACAAKAAwADgAQABQAGAAcACAAKAAwADgAAABQAEAAAAAIAAwADgAQABQAGAAcACAAJAAoACwAMAA4AAAAQAAAAAIABAAGAAgACgAMAA4AEAAUABgAHAAgACQAKAARKyAuwB9IlbAXYA+ESvgLkAfYm1wZWdfYXVkaW9fdXRpbAAAI2JtcGVnX3ZpZGVvX3Byb2JlX3QAAAAAAAAAAAAAAABlcwAAAAB2ZXMAAABtcGcAAAAAAAAAAAAAAAAAAgAAABC/AADA4eQArwAAALAAAACxAAAAsgAAALMAAABmYWN0b3J5AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9ibXBlZ192aWRlb19wcm9iZS5jAGJfbXBlZ192aWRlb19wcm9iZV9mZWVkOiAlI2x4IHZpZGVvICV1eCV1AGJfbXBlZ192aWRlb19wcm9iZV9mZWVkOiAlI2x4IHNlcXVlbmNlOiV1IGdvcDoldSBwaWN0dXJlOiV1IGV4dGVuc2lvbjoldQBiX21wZWdfdmlkZW9fcHJvYmVfZmVlZDogJSNseCBmb3VuZCBzY29kZSAlI3ggbm90IGEgdmlkZW8gRVMAYl9tcGVnX3ZpZGVvX3Byb2JlX2ZlZWQ6ICVwIHRyaW0gJXUAAAAAAAAAAACoXQAAwF0AAKhhAAASdQAAMHUAAFDDAAAk6gAAYOoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABibXBlZ192aWRlb19wcm9iZQBiX21wZWdfdmlkZW9fcHJvYmVfbGFzdDogJSNseCAldSAldSAldSAldQAjYm9nZ19wcm9iZQBvZ2cAAAAAAAAAAAARAAAACMEAABoBAAC0AAAAtQAAALYAAAC3AAAAKgAAAGJvZ2dfZmlsZV9oZWFkZXJfcmVhZDolcCBmaXJzdF9wYWNrZXQ6JWQAYl9vZ2dfcHJvYmVfY3JlYXRlOiBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvbWVkaWEvYm9nZ19wcm9iZS5jAGJvZ2dfcHJvYmUAdW5zdXBwb3J0ZWQgT0dHIHZlcnNpb246JWQAcGFnZV9oZWFkZXI6IGhlYWRlcl90eXBlOiUjeCBncmFudWxlX3Bvc2l0aW9uOiVsdSBiaXRzdHJlYW1fc2VyaWFsX251bWJlcjoldSBwYWdlX3NlcXVlbmNlX251bWJlcjoldSBwYWdlX3NlZ21lbnRzOiV1AGJvZ2dfcGFnZV9wYXlsb2FkX3BhcnNlcl9uZXh0OiAlZAB2b3JiaXNidm9yYmlzX3BhcnNlX2ZyYW1lX2hlYWRlcjogdHlwZSAldQBidm9yYmlzX3BhcnNlX2luZGVudGlmaWNhdGlvbl9oZWFkZXI6IHVuc3VwcG9ydGVkIHZlcnNpb24gJSN4AGJ2b3JiaXNfcGFyc2VfaW5kZW50aWZpY2F0aW9uX2hlYWRlcjogYXVkaW9fY2hhbm5lbHM6JXUgYXVkaW9fc2FtcGxlX3JhdGU6JXUgYml0cmF0ZSgldS8ldS8ldSkAT3B1c0hlYWRib2dnX3V0aWwAAAAAI2JyaWZmX3BhcnNlcl90AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9icmlmZl9wYXJzZXIuYwBicmlmZl9wYXJzZXJfaW5zdGFsbF9oYW5kbGVyOj4gJSNseCAgJSNseCclYyVjJWMlYycAYnJpZmZfcGFyc2VyX2luc3RhbGxfaGFuZGxlcjo8ICUjbHggICUjbHgnJWMlYyVjJWMnAGhhbmRsZXIAYnJpZmZfcGFyc2VyX3JlbW92ZV9oYW5kbGVyOj4gJSNseCAgJSNseCclYyVjJWMlYycAYnJpZmZfcGFyc2VyX3JlbW92ZV9oYW5kbGVyOjwgJSNseCAgJSNseCclYyVjJWMlYycAYnJpZmZfcmVzZXQ+OiAlI2x4AGJyaWZmX3Jlc2V0PDogJSNseAByaWZmLT5vYmplY3RzLnNpemUgPiAwAHJpZmYtPm9iamVjdHMuc2l6ZTw9Ql9SSUZGX01BWF9PQkpFQ1RTAGJyaWZmX2NyZWF0ZT46ICUjbHgAY2ZnAGZhY3RvcnkAYnJpZmZfY3JlYXRlOiBvdXQgb2YgbWVtb3J5ICV1AGJyaWZmX2NyZWF0ZT46ICUjbHggJSNseABicmlmZl9kZXN0cm95PjogJSNseABicmlmZl9kZXN0cm95OiAlI2x4IGxvc3Qgb2JqZWN0X2hhbmRsZXIgJSNseCAuLi4AYnJpZmZfZGVzdHJveTogJSNseCBsb3N0IG9iamVjdF9oYW5kbGVyICUjbHggJyVjJWMlYyVjJwBicmlmZl9kZXN0cm95PDogJSNseABicmlmZl9wYXJzZXJfZmVlZD46JXAgJXAgJXUAYWxpZ25pbmcgc3RyZWFtIGJ5ICV1IGJ5dGVzICgldSkAc2l6ZT09MQBicmlmZl9wYXJzZXJfZmVlZDogJSNseCByZWFjaGVkIGJvdHRvbSBvZiB0aGUgZmlsZQBvYmoAYnJpZmZfcGFyc2VyX2ZlZWQ6IHJlc3luYyAldSAldQByaWZmLT5vYmplY3RzLnNpemU+MABicmlmZl9wYXJzZXJfZmVlZDogJSNseCByZXN5bmNlZCB3aXRoICclYyVjJWMlYycgYXQgJWx1AGJyaWZmX3BhcnNlcl9mZWVkOiBkaXNjYXJkICV1ICV1AGJyaWZmX3BhcnNlcl9mZWVkOiBjYXB0dXJlICV1ICV1AGJyaWZmX3BhcnNlcl9mZWVkOiBjYXB0dXJlZCAnJWMlYyVjJWMnICV1IGJ5dGVzAGJyaWZmX3BhcnNlcgBjb25zdW1lWyV1XSBsZWZ0ICV1IGJ5dGVzICV1AGVuZCBlbGVtICclYyVjJWMlYycAcG9wWyV1XTogbGVmdCAldSBwcmV2IHNpemUgJXUAb2JqLT5sZWZ0ID49IHByZXYtPnNpemUAYl9yaWZmX3RyaW0+OiAlcCAldToldQBiX3JpZmZfdHJpbTwgJXAgJXUAYl9yaWZmX3BhcnNlX3JpZmY6JXAgc3Vic3RpdHV0aW5nIHNpemU6MCB3aXRoICUjeABmb3VuZCBoZWFkZXIgJyVjJWMlYyVjJyBzaXplOiV1AGZvdW5kIGhlYWRlciAnJWMlYyVjJWMnIHR5cGU6JyVjJWMlYyVjJyBzaXplICV1ACVwOiBpbnZhbGlkIFJJRkYgZmlsZQBvZmZzZXQ8PXNpemUAcHVzaFsldV06IGxlZnQgJXUgc2l6ZSAldQBwYXJlbnQAZm91bmQgZWxlbSAnJWMlYyVjJWMnIHNpemUgJXUAYl9yaWZmX3BhcnNlX2VsZW06JXAgZWxlbSAnJWMlYyVjJWMnIHN1YnN0aXR1dGluZyBzaXplOjAgd2l0aCAlI3gAYl9yaWZmX3BhcnNlX2VsZW06ICUjbHggaW52YWxpZCBvYmplY3Qgc2l6ZSAldToldQBwYXJzZSAnJWMlYyVjJWMnAGNhcHR1cmUgZm9yICUjbHggJyVjJWMlYyVjJwBkaXNjYXJkICclYyVjJWMlYycAdXNlcl9vYmplY3Q6ICclYyVjJWMlYydbJyVjJWMlYyVjJ10gJXUgLT4gJXAgJXU6JXU6JXUAc2tpcF9sZW49PWxlbgBhdG9tAHsgRlMubWtkaXIoJy9kYXRhJyk7IHZhciBqc19maWxlcGF0aCA9IFVURjhUb1N0cmluZygkMCk7IEZTLm1vdW50KE5PREVGUywgeyByb290OiBqc19maWxlcGF0aCB9LCAnL2RhdGEnKTsgfQBGUy51bm1vdW50KCcvZGF0YScpOyBGUy5ybWRpcignL2RhdGEnKTsAeyAiY3BfcmVzdWx0IjogJWQsICJ2aWRlbyI6ICVkLCAiYXVkaW8iOiAlZH0AVFQAUEwASVgAWQBBUABBQwBBRABWUABWQwBDRABWRABTUABDUwBTTABDTABGVAByYgBUSUdFUgBUSUdFUjpOTzRLAFBBTlRFUkEAUEFHQU5JAFBBR0FOSTpOTzRLAElNUEFMQQBJTVBBTEE6U0lOR0xFX0RFQ09ERVIATUFMSUJVAE1BTElCVTpTSU5HTEVfREVDT0RFUgBQQU5USEVSAFBVTUEAU0VCUklORwBTRUJSSU5HOk1JTklNQUwAcGxheWFibGUAc2VhbWxlc3MAcHJvYmUgc3RyaW5nAGNvbnRhaW5lcgBubyBtZWRpYQBhdWRpbyBzYW1wbGUgcmF0ZSA+IDQ4awBhdWRpbyB0eXBlAGF1ZGlvIGNoYW5uZWxzAHZpZGVvIHR5cGUAdmlkZW8gcmVzb2x1dGlvbgB2aWRlbyBoMjY1AEVSUk9SADRLAEhEAFNEAENJRgBRQ0lGAExZTlgAQk9CQ0FUADRLJWQASEQlZAAAAAAAAAAAAAAAcMwAAAQAAABzzAAACwAAAHfMAAAJAAAAe8wAAAgAAAB/zAAADQAAAIPMAAAKAAAAi8wAAAEAAACOzAAAAwAAAJLMAAAHAAAAlswAAA4AAACazAAAEQAAAJ7MAAASAAAAVFMATVA0AEFWSQBBU0YATUtWAE1QRUcxUFMARVMAUEVTAFZPQgBXQVYAT0dHAEZMQUMAAAAAAAAAAAAAAAAAAEjNAAADAAAATc0AAAEAAABRzQAADwAAAFXNAAARAAAAWs0AABIAAABjzQAAgQAAAGfNAAAGAAAAbM0AAIIAAABwzQAAiAAAAHTNAACJAAAAfM0AAIYAAACHzQAAhwAAAJPNAACLAAAAnM0AAI0AAACizQAAjwAAAKzNAACKAAAAsM0AAJIAAACezAAAkwAAALfNAACZAAAATVBFRwBNUDMAQUFDAEFBQ1AAQUFDX0FEVFMAQUMzAEFDM1AARFRTAFdNQQBXTUFfUFJPAExQQ01fSEREVkQATFBDTV9CTFVSQVkATFBDTV9EVkQAQURQQ00ARFZJX0FEUENNAFBDTQBWT1JCSVMAT1BVUwAAAAAAGM4AAAEAAAAezgAAAgAAACTOAAAaAAAAKc4AABsAAAAuzgAAIQAAADPOAADqAAAAN84AAOsAAAA+zgAAEQMAAEfOAAAQAAAAUc4AAPMAAABVzgAA9AAAAE1QRUcxAE1QRUcyAEgyNjMASDI2NABIMjY1AFZDMQBWQzFfU00ARElWWF8zMTEATVBFRzRfUFQyAFZQOABWUDkASU5GTzogVmVyc2lvbj0lYwoAfFRUPSVzAElORk86IFRyYW5zcG9ydD0lcwoAfFBMPSVkAElORk86IFBhY2tldExlbj0lZAoAfElYPSVjAElORk86IEluZGV4ZWQ9JWMKAHxBUD0lZABJTkZPOiBBdWRpb1BpZD0lZAoAfEFDPSVzAElORk86IEF1ZGlvQ29kZWM9JXMKAHxBQ0g9JWQASU5GTzogQXVkaW9DaGFubmVsQ291bnQ9JWQKAHxBU1I9JWQASU5GTzogQXVkaW9TYW1wbGVSYXRlPSVkCgB8QUQ9JTA4bHgASU5GTzogQXVkaW9EdXJhdGlvbj0lbGQKAHxBQj0lMDh4AElORk86IEF1ZGlvQml0cmF0ZT0lbGQKAHxWUD0lZABJTkZPOiBWaWRlb1BpZD0lZAoAfFZDPSVzAElORk86IFZpZGVvQ29kZWM9JXMKAHxXPSVkAElORk86IFdpZHRoPSVkCgB8SD0lZABJTkZPOiBIZWlnaHQ9JWQKAHxWRD0lMDhseABJTkZPOiBWaWRlb0R1cmF0aW9uPSVsZAoAfENEPSVkAElORk86IENvbG9yRGVwdGg9JWQKAHxWRlI9JWYASU5GTzogVmlkZW9GcmFtZVJhdGU9JWYKAHxDUz0lZABJTkZPOiBDYXB0aW9uU2VydmljZT0lZAoAfENMPSVzAElORk86IENhcHRpb25MYW5ndWFnZT0lcwoAfFNQPSVkAElORk86IFN1YnRpdGxlUGlkPSVkCgB8U0w9JXMASU5GTzogU3VidGl0bGVMYW5ndWFnZT0lcwoAfEQ9JTA4bHgASU5GTzogRHVyYXRpb249JWxkCgB8RlQ9JTA4eABJTkZPOiBGaXJzdFRpbWVzdGFtcD0lZAoAV0FSTklORzogYnN0cmVhbV9tcGVnX3R5cGU6IDB4JXggbm90IGhhbmRsZWQKAFdBUk5JTkc6IGJhdWRpb19mb3JtYXQ6IDB4JXggbm90IGhhbmRsZWQKAFdBUk5JTkc6IGJ2aWRlb19jb2RlYzogMHgleCBub3QgaGFuZGxlZAoAAAAAsAAAAGABAADQAgAAgAcAAAAQAACQAAAAIAEAAEACAABABAAAhAgAAAoAAAAIAAAABAAAAAMAAAAjYndhdl9wcm9iZV90AHdhdgAAAAAAAAAAAAAAAQAAAMbRAAAMAAAAxwAAAMgAAADJAAAAygAAACoAAABiX3dhdl9wcm9iZV9jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAGJ3YXZfcHJvYmUAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2J3YXZfcHJvYmUuYwBiX3dhdl9wcm9iZV9mbXQ6JXAgcHJvYmUgJyVjJWMlYyVjJyAldToldTolI2x4KCV1KQBiX3dhdl9wcm9iZV9kYXRhOiVwIHByb2JlICclYyVjJWMlYycgJXU6JXU6JSNseCgldSkAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2Ridi9ibWVkaWFfZGJ2X3V0aWwuYwBic19wb3NpdGlvbj49aW5pdGlhbF9wb3NpdGlvbgBET1ZJRGVjb2RlckNvbmZpZ3VyYXRpb25SZWNvcmQ6JXAlcyBtYWpvcjoldSBtaW5vcjoldSBwcm92aWxlOiV1IGxldmVsOiV1IHJwdV9wcmVzZW50X2ZsYWc6JXUgZWxfcHJlc2VudF9mbGFnOiV1IGJsX3ByZXNlbnRfZmxhZzoldSBkdl9ibF9zaWduYWxfY29tcGF0aWJpbGl0eV9pZDoldQAAIFBBUlNJTkcgRVJST1IAYm1lZGlhX2Ridl91dGlsACNiZmx2X3BhcnNlcl90AC9ob21lL3Nnb29kd2luL3dvcmsvc3JjL2JzODIvYnNvZS9zb3VyY2VzL25leHVzL0JTRUFWL2xpYi9tZWRpYS9mbHYvYmZsdl9wYXJzZXIuYwBiZmx2X3BhcnNlcl9mZWVkOiUjbHggYXRvbTolI2x4AHBhcnNlci0+dGFnLmhhbmRsZXIAYWNjX2xlbjw9cGFyc2VyLT50YWcuc2l6ZQBjZmcAZmFjdG9yeQBiZmx2X3BhcnNlcl9jcmVhdGU6IG91dCBvZiBtZW1vcnkgJXUAaGFuZGxlcgBiZmx2X3BhcnNlcgBiX2Zsdl9wYXJzZXJfdGFnOiAlI2x4IFN0cmVhbUlEIHNoYWxsIGJlIDAgJSN4AAAAAAAAgNUAAI3VAACT1QAAl9UAAKLVAAC41QAAzdUAANjVAADk1QAA8dUAAPXVAAD51QAA/tUAAAPWAAAI1gAAEdYAAHVuY29tcHJlc3NlZABBRFBDTQBNUDMATGluZWFyIFBDTQBOZWxseW1vc2VyIDE2a0h6IG1vbm8ATmVsbHltb3NlciA4a0h6IG1vbm8ATmVsbHltb3NlcgBHLjcxMSBBLWxhdwBHLjcxMSBtdS1sYXcALTktAEFBQwAtMTEtAC0xMi0ALTEzLQBNUDMgOGtIegAtMTUtAIkVESsiVkSsYl9mbHZfcGFyc2VyX3RhZzogJSNseCBsZW46JXUgdGltZToldSBhdWRpbyBmb3JtYXQ6JXMgcmF0ZToldSBzaXplOiV1Yml0IHR5cGU6JXMAc3RlcmVvAG1vbm8AAAAAAADA1gAAwdYAAMXWAADL1gAAwNYAAMDWAADA1gAAwNYAAMDWAADA1gAAwNYAAMDWAADA1gAAAAAAAAAAAAAAAAAAAGtleQBpbnRlcgBkaXNwb3NhYmxlIGludGVyAAAAAAAg1wAAJNcAACjXAAA31wAARNcAAEzXAABn1wAAftcAAILXAADx1QAAhtcAAPnVAAD+1QAAA9YAAIvXAACQ1wAALTAtAC0xLQBTb3JlbnNvbiBILjI2MwBTY3JlZW4gdmlkZW8AT24yIFZQNgBPbjIgVlA2IHdpdGggYWxwaGEgY2hhbm5lbABTY3JlZW4gdmlkZW8gdmVyc2lvbiAyAEFWQwAtOC0ALTEwLQAtMTQtAC0xNQBiX2Zsdl9wYXJzZXJfdGFnOiAlI2x4IGxlbjoldSB0aW1lOiV1IHZpZGVvIGZyYW1lOiclcycgY29kZWM6JyVzJwBiX2Zsdl9wYXJzZXJfZm9ybWF0X2Vycm9yOiAlI2x4IGZvcm1hdCBlcnJvciBhdCAlI2x4AGxlbjw9c2l6ZW9mKGFhY19oZHIuaGVhZGVyKQAAAAAAABQAAABiX2Zsdl9wYXJzZXJfaGFuZGxlX2F2YzolcCBwcHMvc3BzOiV1AGJfZmx2X3BhcnNlcl9oYW5kbGVfYXZjOiVwIGZyYW1lOiV1AGJfZmx2X3BhcnNlcl9oZWFkZXI6ICUjbHggdW5zdXBwb3J0ZWQgdmVyc2lvbiAlZABiX2Zsdl9wYXJzZXJfZW9zOiVwACNiZmx2X3Byb2JlX3QAZmx2AAAAAAAAAAAAAAAADAAAAM3YAAAFAAAAzAAAAM0AAADOAAAAzwAAACoAAABiX2Zsdl9wcm9iZV9jcmVhdGU6IGNhbid0IGFsbG9jYXRlICV1IGJ5dGVzAGJmbHZfcHJvYmUAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL21lZGlhL2Zsdi9iZmx2X3Byb2JlLmMAJXA6VW5zdXBwb3J0ZWQgdG9wIGxldmVsIHR5cGU6JSN4AHZhcmlhYmxlOiVzAG9uTWV0YURhdGEAcHJvcGVydHk6JXMuJXMAJXA6VW5zdXBwb3J0ZWQgUHJvcGVydHkgdHlwZToldQBkdXJhdGlvbgB3aWR0aABoZWlnaHQAZHVyYXRpb24gJXUAd2lkdGggJXUAaGVpZ2h0ICV1ACVwOlVuc3VwcG9ydGVkIFN0cmljdCBhcnJheSB0eXBlOiV1AGJfZmx2X3JlYWRfZGF0YXZhbHVlOiB0eXBlICV1AHRydW5jYXRpbmcgJXUgc3RyaW5nIHRvICV1AGJfZmx2X3Byb2JlX3BhcnNlOiAlcCByZWFkaW5nICV1OiV1AGJfZmx2X3Byb2JlX3BhcnNlOiAlcCByZWFkICV1OiV1IC0+ICVwAACJFRErIlZErAAA8AAAAAAAAADxAAAA8QAAAAAAAAAbAAAASW52YWxpZCBkZXNjcmlwdG9yIGxlbmd0aDogJWQ+PSVkAHRzX3BtdAAAAADQAAAA0QAAACNiYXJlbmFfdAAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9CU0VBVi9saWIvdXRpbHMvYmFyZW5hLmMAYmFyZW5hX2FsbG9jOiByZXF1ZXN0ZWQgc2l6ZSAldSBleGNlZWRzIGxpbWl0ICV1AGJhcmVuYV90ZXN0X2Jsb2NrKGFyZW5hLCBwdHIpAGJsb2NrLT50YWcgPT0gQl9CTE9DS19UQUcoYXJlbmEsIGJsb2NrKQBCTFNUX1FfUFJFVihibG9jayxsaW5rKT09TlVMTCB8fCBiX2FyZW5hX3Rlc3Rfb25lKGFyZW5hLCBCTFNUX1FfUFJFVihibG9jayxsaW5rKSkAQkxTVF9RX1BSRVYoYmxvY2ssbGluaykhPU5VTEwgfHwgQkxTVF9RX0ZJUlNUKCZhcmVuYS0+YmxvY2tzKT09YmxvY2sAQkxTVF9RX05FWFQoYmxvY2ssbGluayk9PU5VTEwgfHwgYl9hcmVuYV90ZXN0X29uZShhcmVuYSwgQkxTVF9RX05FWFQoYmxvY2ssbGluaykpAEJMU1RfUV9ORVhUKGJsb2NrLGxpbmspIT1OVUxMIHx8IEJMU1RfUV9MQVNUKCZhcmVuYS0+YmxvY2tzKT09YmxvY2sAbmV3X3NpemUgPj0gYXJlbmEtPmZyZWVfdGFpbCtibG9jay0+c2l6ZSpzaXplb2YodW5zaWduZWQpAG5ld19zaXplID49IGFyZW5hLT5mcmVlX2hlYWQrYmxvY2stPnNpemUqc2l6ZW9mKHVuc2lnbmVkKQBhcmVuYS0+ZnJlZV9oZWFkICsgYXJlbmEtPmZyZWVfdGFpbCA8PSBhcmVuYS0+c2l6ZQAoYmxvY2spLT5saW5rLmxfaGVhZCA9PSAoY29uc3Qgdm9pZCAqKSgmYXJlbmEtPmJsb2NrcykAMABhbGxvYwBiYXJlbmFfY3JlYXRlOiAlcCBvdmVyaGVhZCAldSBhbGxvY2F0ZWQgJXUgKGJ5dGVzKQBhbGxvYyBmYWlsZWQgKCV1IGJ5dGVzKQBiYXJlbmEAI2JhdG9tX2FjY3VtX3QAAAAjYmF0b21fZmFjdG9yeV90ACNiYXRvbV9waXBlX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL3V0aWxzL2Jpb2F0b20uYwBhdG9tAChhdG9tKS0+cmVmX2NudD4wAGF0b20tPnJlZl9jbnQ+MABhdG9tLT5vcHMAYXRvbS0+cmVmX2NudD09MAAwAG93bmVyc1tpXQBmYWN0b3J5LT5zdGF0cy5hdG9tX2xpdmU+MABCTFNUX1NRX05FWFQoYXRvbSwgcGlwZV9saW5rKSA9PSBOVUxMAHZlYwBhY2MtPmNvdW50PGFjYy0+bnZlY3MAYWNjLT5jb3VudDw9YWNjLT5udmVjcwBhY2MtPmNvdW50PT1hY2NfY291bnQAY3Vyc29yLT52ZWMgPT0gYWNjLT52ZWMAY3Vyc29yLT5jb3VudCA9PSBhY2MtPmNvdW50AGN1cnNvci0+cG9zIDw9IGN1cnNvci0+Y291bnQAYWNjLT5udmVjcyA+PSBhY2MtPmNvdW50AGFjYy0+Y291bnQgPj0gdHJpbV9wb3MAYWNjLT5sZW5ndGggPj0gY291bnQAYWNjLT52ZWNbMF0ubGVuID49Y3Vyc29yLT5sZWZ0AGFjYy0+bGVuZ3RoID49IChhY2MtPnZlY1swXS5sZW4gLSAodW5zaWduZWQpY3Vyc29yLT5sZWZ0KQBmaXJzdC0+dmVjID09IGFjYy0+dmVjAGZpcnN0LT5jb3VudCA9PSBhY2MtPmNvdW50AGZpcnN0LT5wb3MgPD0gZmlyc3QtPmNvdW50AGxhc3QtPnZlYyA9PSBhY2MtPnZlYwBsYXN0LT5jb3VudCA9PSBhY2MtPmNvdW50AGxhc3QtPnBvcyA8PSBsYXN0LT5jb3VudABmaXJzdC0+cG9zIDw9IGxhc3QtPnBvcwBiYXRvbV9jdXJzb3JfcG9zKGZpcnN0KSA8PSBiYXRvbV9jdXJzb3JfcG9zKGxhc3QpAGxhc3QtPnBvcz49Zmlyc3RfcG9zAGFjYy0+dmVjW2ZpcnN0X3Bvc10ubGVuPj0gZmlyc3QtPmxlZnQAdmVjc1tudmVjcy0xXS5sZW4gPj0gbGFzdC0+bGVmdABmaXJzdC0+dmVjID09IHNyYy0+dmVjAGZpcnN0LT5jb3VudCA9PSBzcmMtPmNvdW50AGxhc3QtPnZlYyA9PSBzcmMtPnZlYwBsYXN0LT5jb3VudCA9PSBzcmMtPmNvdW50AHNyYy0+bnZlY3MgPj0gc3JjLT5jb3VudABkc3QtPm52ZWNzID49IGRzdC0+Y291bnQAZHN0LT5udmVjcz5kc3RfcG9zAHNyYy0+dmVjW2ZpcnN0X3Bvc10ubGVuPj0gZmlyc3QtPmxlZnQAbWFzdGVyAGN1cnNvcgBhY2MAY3Vyc29yLT5sZWZ0PjAAY3Vyc29yLT52ZWMAZnJvbQB0bwBmcm9tLT52ZWM9PXRvLT52ZWMAZnJvbS0+cG9zPD10by0+cG9zAGZyb20tPmxlZnQhPUJBVE9NX0VPRgBmcm9tLT5sZWZ0ID49IHRvLT5sZWZ0AGZyb20tPmxlZnQhPUJBVE9NX0VPRiB8fCAoZnJvbS0+bGVmdD09QkFUT01fRU9GICYmIHRvLT5sZWZ0PT1CQVRPTV9FT0YgJiYgdG8tPnBvcz09ZnJvbS0+cG9zKQBzYXZlLmxlZnQgPj0gdG8tPmxlZnQAKGludCljb3VudD49MABjdXJzb3ItPnBvcyA+PSBjaGVja3BvaW50LT5jcF9wb3MAY3Vyc29yLT5wb3MgPD0gY3Vyc29yLT5jb3VudCAmJiBjdXJzb3ItPnBvcz4wAGN1cnNvci0+bGVmdCA8PSAoaW50KWN1cnNvci0+dmVjW2N1cnNvci0+cG9zLTFdLmxlbgBjb3VudCA9PSBCX0FUT01fVFJVTkNBVEVfU0laRShjb3VudCkAYy0+bGVmdD4wAG5iaXRzPD0zMQBuYml0cz4wAGJhdG9tX2JpdHN0cmVhbV9leHBfZ29sb21iOiBub3Qgc3VwcG9ydGVkIHByZWZpeCBsZW4gJXUAQkxTVF9TUV9ORVhUKGF0b20sIHBpcGVfbGluayk9PU5VTEwAYmF0b21fcGlwZV9mbHVzaDogcnVuYXdheSBhdG9tczogJSNseCAldToldQBiYXRvbV9kdW1wOiAlczolcCAlcyByZWZfY250OiV1IGxlbjoldSB2ZWNzOiV1AGNsb25lAABiYXRvbV90AGJhdG9tX2N1cnNvcgBiYXRvbQBiX2lvX2FjY19ncm93OiAlI2x4IHRvIG1hbnkgZW50cmllcyBpbiB0aGUgYWNjdW11bGF0b3IgKCV1KQBiX2lvX2FjY19ncm93OiAlcCBjYW4ndCBhbGxvY2F0ZSAldSBieXRlcwAAAAAAAAAAAHVkYXRhAGN1cnNvci0+bGVmdDw9MABicy0+Y2FjaGVfcG9zPT0tMQAlczogJXMgbGVuOiAldSBieXRlcyB2ZWNzOiV1IGxlZnQ6JWQgcG9zOiVkKCVwOiV1KQAlczogJXMgdmVjOiV1OiUjbHg6JXUAJWMlMDJ4ACAuACVzOiAlcyAweCUwNHg6JXMAI2Jwb29sX3QAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvQlNFQVYvbGliL3V0aWxzL2Jwb29sLmMAYnBvb2xfYWxsb2M6JXAgcmVxdWVzdGVkIHNpemUgJXUgZXhjZWVkZWQgZWxlbWVudCBzaXplOiV1AHBvb2wtPm5mcmVlX2VsZW0+MABicG9vbF9hbGxvYzolI2x4IGV4aGF1c3RlZAAwAHB0cgBicG9vbF90ZXN0X2Jsb2NrKHBvb2wsIHB0cikAKG9mZnNldCAlIHBvb2wtPmVsZW1fc2l6ZSkgPT0gMABwb29sLT5iaXRtYXBbb2Zmc2V0XSAmICgxPDxiaXQpAHBvb2wtPm5mcmVlX2VsZW08cG9vbC0+bmVsZW0AbmVsZW0AZWxlbV9zaXplAGFsbG9jAG5lbGVtPDY1NTM2AGVsZW1fc2l6ZTw2NTUzNgBicG9vbF9jcmVhdGU6ICVwIG92ZXJoZWFkICV1IGFsbG9jYXRlZCAldSAoYnl0ZXMpAGFsbG9jIGZhaWxlZCAoJXUgYnl0ZXMpAGJwb29sAEVycm9yLCBtdXN0IG5vdCBiZSBpbiBjcml0aWNhbCBzZWN0aW9uIHRvIGNhbGwgJXMKAEJLTklfTWFsbG9jAEJLTklfRnJlZQAvaG9tZS9zZ29vZHdpbi93b3JrL3NyYy9iczgyL2Jzb2Uvc291cmNlcy9uZXh1cy9uZXh1cy8uLi9tYWdudW0vYmFzZW1vZHVsZXMva25pL2xpbnV4dXNlci9ia25pLmMAQktOSV9GYWlsIGFib3J0CgAAJXMgJXMgJXM6ICVzACVzICVzICVzOiAAL2hvbWUvc2dvb2R3aW4vd29yay9zcmMvYnM4Mi9ic29lL3NvdXJjZXMvbmV4dXMvbmV4dXMvLi4vbWFnbnVtL2Jhc2Vtb2R1bGVzL2RiZy9iZGJnLmMAaW52YWxpZABOVUxMIHBvaW50ZXIgd2FzIHVzZWQgYXMgJXMAUmVjeWNsZWQgcG9pbnRlciB3YXMgdXNlZCAlczolcABCYWQgb2JqZWN0IG9mIGV4cGVjdGVkIHR5cGUgJXM6JXAgKCVwOiVwKQBbT1ZGXQAAAAAAAAAAAAAAAAAAAAAAAAAALi4uAC0tLQAqKioAIyMjACAgIAAlMDJ1OiUwMnU6JTAydS4lMDN1ACEhISBBc3NlcnQgJyVzJyBGYWlsZWQgYXQgJXM6JWQKAAAAABzqAAAp6gAAPuoAAFXqAABv6gAAieoAAJbqAACk6gAAueoAAMzqAADZ6gAAQkVSUl9TVUNDRVNTAEJFUlJfTk9UX0lOSVRJQUxJWkVEAEJFUlJfSU5WQUxJRF9QQVJBTUVURVIAQkVSUl9PVVRfT0ZfU1lTVEVNX01FTU9SWQBCRVJSX09VVF9PRl9ERVZJQ0VfTUVNT1JZAEJFUlJfVElNRU9VVABCRVJSX09TX0VSUk9SAEJFUlJfTEVBS0VEX1JFU09VUkNFAEJFUlJfTk9UX1NVUFBPUlRFRABCRVJSX1VOS05PV04AQkVSUl9OT1RfQVZBSUxBQkxFACEhIUVycm9yICVzKCUjeCkgYXQgJXM6JWQKAHZsYzogJTAyeCUwMnggJWQsIGJpdCAlZAB2bGMgdmFsdWUgdG9vIGxhcmdlIGZvciB0aGlzIGFsZ29yaXRobQAgIHByZWZpeCBsZW4gMCwgZG9uZQAAAQMHDx8/f/8gIHByZWZpeCBsZW4gJWQsIHN1ZmZpeCAoaW4gYnl0ZSkgdmFsICV4ACAgcHJlZml4IGxlbiAlZCwgaW5kZXggJWQgYml0ICVkACAgcHJlZml4IGxlbiAlZCwgc3VmZml4IHZhbCAleAAgIHJlc3VsdCA9ICVkICglZCwgJWQpAEludmFsaWQgYml0LiBNdXN0IGJlIDAuLjcuAG5vdCBlbm91Z2ggZGF0YSBzZW50IGZvciB0aGlzIHZsYyB2YWx1ZQBidmxjAHJ3YQByd2EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALSsgICAwWDB4AChudWxsKQAAAAAAAAAAEQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAEACQsLAAAJBgsAAAsABhEAAAAREREAAAAAAAAAAAAAAAAAAAAACwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAADAAAAAAJDAAAAAAADAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAANAAAABA0AAAAACQ4AAAAAAA4AAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAADwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhISAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAAASEhIAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAKAAAAAAoAAAAACQsAAAAAAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAAAAALD2AABI9wAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQBpbmZpbml0eQBuYW4AAAAAAAAAAAAA0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///");
base64DecodeToExistingUint8Array(bufferView, 61528, "AAAAAAAAAAB/BgAAAAAAAAAAAAAAAAAAZAgAAAAAAAAAAAAAAAAAABwPAAAAAAAAAAAAAAAAAABmFAAAAAAAAAAAAAAAAAAAjxYAAAAAAAAAAAAAAAAAADQXAAAAAAAAAAAAAAAAAADAGAAAAAAAAAAAAAAAAAAA4hsAAAAAAAAAAAAAAAAAAB0fAAAAAAAAAAAAAAAAAACRHwAAAAAAAAAAAAAAAAAAYSAAAAAAAAAAAAAAAAAAANAgAAAAAAAAAAAAAAAAAADcIQAAAAAAAAAAAAAAAAAAeiMAAAAAAAAAAAAAAAAAAE8lAAAAAAAAAAAAAAAAAACgJwAAAAAAAAAAAAAAAAAAUSkAAAAAAAAAAAAAAAAAAKwqAAAAAAAAAAAAAAAAAADfLQAAAAAAAAAAAAAAAAAAyy4AAAAAAAAAAAAAAAAAAJsxAAAAAAAAAAAAAAAAAADRNgAAAAAAAAAAAAAAAAAAuDkAAAAAAAAAAAAAAAAAAIY6AAAAAAAAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAA1kYAAAAAAAAAAAAAAAAAALhHAAAAAAAAAAAAAAAAAADtTQAAAAAAAAAAAAAAAAAAJlQAAAAAAAAAAAAAAAAAABZYAAAAAAAAAAAAAAAAAAALWgAAAAAAAAAAAAAAAAAAIFsAAAAAAAAAAAAAAAAAAMdsAAAAAAAAAAAAAAAAAACyeQAAAAAAAAAAAAAAAAAA9YYAAAAAAAAAAAAAAAAAAByJAAAAAAAAAAAAAAAAAACqmgAAAAAAAAAAAAAAAAAAYaAAAAAAAAAAAAAAAAAAAKSiAAAAAAAAAAAAAAAAAABBpQAAAAAAAAAAAAAAAAAAuakAAAAAAAAAAAAAAAAAAFirAAAAAAAAAAAAAAAAAADOrgAAAAAAAAAAAAAAAAAAOLMAAAAAAAAAAAAAAAAAAAy0AAAAAAAAAAAAAAAAAAD0ugAAAAAAAAAAAAAAAAAAbL0AAAAAAAAAAAAAAAAAAN6+AAAAAAAAAAAAAAAAAADAwAAAAAAAAAAAAAAAAAAA1sEAAAAAAAAAAAAAAAAAAGPDAAAAAAAAAAAAAAAAAABPxwAAAAAAAAAAAAAAAAAAINIAAAAAAAAAAAAAAAAAAAjUAAAAAAAAAAAAAAAAAAAA1QAAAAAAAAAAAAAAAAAAKNkAAAAAAAAAAAAAAAAAAA7bAAAAAAAAAAAAAAAAAABI3gAAAAAAAAAAAAAAAAAAOOUAAAAAAAAAAAAAAAAAAOznAAAAAAAAAAAAAAAAAAAAAAAAAwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAANcAAADeAAAAePgAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALD2AAAAAAAABQAAAAAAAAAAAAAA2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1wAAANYAAACA/AAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 223,
  'maximum': 223 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5308192,
    STACKTOP = STACK_BASE,
    STACK_MAX = 65312,
    DYNAMIC_BASE = 5308192,
    DYNAMICTOP_PTR = 65152;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');








// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = 'media_probe.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  51662: function($0) {FS.mkdir('/data'); var js_filepath = UTF8ToString($0); FS.mount(NODEFS, { root: js_filepath }, '/data');},  
 51771: function() {FS.unmount('/data'); FS.rmdir('/data');}
};

function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}



// STATICTOP = STATIC_BASE + 64288;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer["alloc"] ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },convertNodeCode:function(e) {
        var code = e.code;
        assert(code in ERRNO_CODES);
        return ERRNO_CODES[code];
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(28);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(28);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          oldNode.name = newName;
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
  
          return position;
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
  
          var ptr = _malloc(length);
  
          NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = __webpack_require__(18);
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'NODEFS': NODEFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  
  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  
  var _emscripten_get_now_is_monotonic=true;;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _emscripten_get_sbrk_ptr() {
      return 65152;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  var __readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray( __readAsmConstArgsArray));
      // Input buffer must be a pre-existing varargs buffer, so already aligned to 4 bytes.
      assert(buf % 4 == 0);
      __readAsmConstArgsArray.length = 0;
      var ch;
      buf >>= 2; // Align buf up front to index Int32Array (HEAP32)
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        __readAsmConstArgsArray.push(ch < 105 ? HEAPF64[++buf >> 1] : HEAP32[buf]);
        ++buf;
      }
      return __readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = __webpack_require__(2); var NODEJS_PATH = __webpack_require__(0); NODEFS.staticInit(); };
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmGlobalArg = {};
var asmLibraryArg = { "__handle_stack_overflow": ___handle_stack_overflow, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_open": ___sys_open, "abort": _abort, "clock_gettime": _clock_gettime, "emscripten_asm_const_iii": _emscripten_asm_const_iii, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "gettimeofday": _gettimeofday, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _mountDataFilepath = Module["_mountDataFilepath"] = createExportWrapper("mountDataFilepath");

/** @type {function(...*):?} */
var _unmountDataFilepath = Module["_unmountDataFilepath"] = createExportWrapper("unmountDataFilepath");

/** @type {function(...*):?} */
var _CanPlayFileJS = Module["_CanPlayFileJS"] = createExportWrapper("CanPlayFileJS");

/** @type {function(...*):?} */
var _ProbeFileEx = Module["_ProbeFileEx"] = createExportWrapper("ProbeFileEx");

/** @type {function(...*):?} */
var _CanPlayToString = Module["_CanPlayToString"] = createExportWrapper("CanPlayToString");

/** @type {function(...*):?} */
var _GetDecoderName = Module["_GetDecoderName"] = createExportWrapper("GetDecoderName");

/** @type {function(...*):?} */
var _GetDecoderTimesliceMaxCount = Module["_GetDecoderTimesliceMaxCount"] = createExportWrapper("GetDecoderTimesliceMaxCount");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = createExportWrapper("__set_stack_limit");

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = createExportWrapper("__growWasmMemory");

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi");

/** @type {function(...*):?} */
var dynCall_iiij = Module["dynCall_iiij"] = createExportWrapper("dynCall_iiij");

/** @type {function(...*):?} */
var dynCall_iiiij = Module["dynCall_iiiij"] = createExportWrapper("dynCall_iiiij");

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii");

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii");

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii");

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii");

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = createExportWrapper("dynCall_iiiiii");

/** @type {function(...*):?} */
var dynCall_iiijj = Module["dynCall_iiijj"] = createExportWrapper("dynCall_iiijj");

/** @type {function(...*):?} */
var dynCall_iiijji = Module["dynCall_iiijji"] = createExportWrapper("dynCall_iiijji");

/** @type {function(...*):?} */
var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii");

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = createExportWrapper("dynCall_iiiiiiii");

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = createExportWrapper("dynCall_iiiiiii");

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii");





// === Auto-generated postamble setup entry stuff ===


if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["UTF8ToString"] = UTF8ToString;
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["stringToUTF8"] = stringToUTF8;
Module["lengthBytesUTF8"] = lengthBytesUTF8;
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addOnPostRun"] = addOnPostRun;
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "NODEFS")) Module["NODEFS"] = function() { abort("'NODEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      readyPromiseReject(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}





  return Module.ready
}
);
})();
if (true)
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
    
/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", "/"))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(64);
__exportStar(__webpack_require__(21), exports);
__exportStar(__webpack_require__(20), exports);
__exportStar(__webpack_require__(19), exports);


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecoderTimeSliceMaxCount = exports.getDecoderName = exports.canPlayProbeData = exports.canPlayFile = exports.getFileProbeData = exports.parseProbeString = void 0;
var isNil = __webpack_require__(129);
var bscore_1 = __webpack_require__(11);
var error_1 = __webpack_require__(22);
var lastStdout = [];
var lastStderr = [];
var cwrap = {};
var out = {
    print: function (text) { return lastStdout.push(text); },
    printErr: function (text) { return lastStderr.push(text); },
};
var probeLibrary = __webpack_require__(65);
probeLibrary = probeLibrary(out);
probeLibrary.then(function (module) {
    probeLibrary = module;
    cwrap.free = probeLibrary.cwrap('free', 'number', ['number']);
    cwrap.malloc = probeLibrary.cwrap('malloc', 'number', ['number']);
});
function mountFilesystem(filePath) {
    var utf8Length = probeLibrary.lengthBytesUTF8(filePath) + 1;
    var buffer = cwrap.malloc(utf8Length);
    probeLibrary.stringToUTF8(filePath, buffer, utf8Length);
    probeLibrary.ccall('mountDataFilepath', 'void', ['number'], [buffer]);
    cwrap.free(buffer);
}
function parseProbeString(probeString) {
    var params = probeString.split('|');
    var result = { version: 0, data: {} };
    var longName = {
        TT: { name: 'transport' },
        PL: { name: 'packetLen', isInt: true },
        IX: { name: 'indexed' },
        AP: { name: 'audioPid', isInt: true },
        AC: { name: 'audioCodec' },
        ACH: { name: 'audioChannelCount', isInt: true },
        ASR: { name: 'audioSampleRate', isInt: true },
        AD: { name: 'audioDuration', isHex: true },
        AB: { name: 'audioBitrate', isHex: true },
        VP: { name: 'videoPid', isInt: true },
        VC: { name: 'videoCodec' },
        W: { name: 'width', isInt: true },
        H: { name: 'height', isInt: true },
        VD: { name: 'videoDuration', isHex: true },
        CD: { name: 'colorDepth', isInt: true },
        VFR: { name: 'videoFrameRate', isFloat: true },
        D: { name: 'duration', isHex: true },
        FT: { name: 'firstTimestamp', isInt: true },
        SP: { name: 'SubtitlePid', isInt: true },
        SL: { name: 'SubtitleLanguage' },
        CS: { name: 'CaptionService', isInt: true },
        CL: { name: 'CaptionLanguage' },
    };
    params.forEach(function (p) {
        var nameValue = p.split('=');
        if (nameValue.length === 1) {
            result.version = parseInt(p, 10);
        }
        else {
            var mappingName = nameValue[0];
            if (isNil(longName[mappingName])) {
                var errorMessage = 'cannot convert unknown probe string key: ' + mappingName;
                throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
            }
            var value = nameValue[1];
            if (longName[mappingName].isInt === true) {
                result.data[longName[mappingName].name] = parseInt(value, 10);
            }
            else if (longName[mappingName].isHex === true) {
                result.data[longName[mappingName].name] = parseInt(value, 16);
            }
            else if (longName[mappingName].isFloat === true) {
                result.data[longName[mappingName].name] = parseFloat(value);
            }
            else {
                result.data[longName[mappingName].name] = value;
            }
        }
    });
    return result;
}
exports.parseProbeString = parseProbeString;
function getFileProbeData(filePath) {
    var pathEnd = filePath.lastIndexOf('/');
    var fullPath = pathEnd === -1 ? '.' : filePath.substr(0, pathEnd);
    var filename = pathEnd === -1 ? filePath : filePath.substr(pathEnd + 1);
    mountFilesystem(fullPath);
    filename = 'data/' + filename;
    lastStdout = [];
    lastStderr = [];
    var bufferSize = 1024;
    var buffer = cwrap.malloc(bufferSize);
    var result = probeLibrary.ccall('ProbeFileEx', 'number', ['string', 'number', 'number', 'number'], [filename, buffer, bufferSize, 0]);
    var resultText = probeLibrary.UTF8ToString(buffer);
    cwrap.free(buffer);
    probeLibrary.ccall('unmountDataFilepath', 'void', [], []);
    switch (result) {
        case -1: {
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, 'PROBE_FILE_PATH (-1) : Could not find file ' + filePath);
        }
        case -2: {
            var errorMessage = 'PROBE_FILE_PROBE (-2) : Could not understand the file, due to'
                + ' failure in bmedia_probe_parse. Is it really a video?';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
        case -3: {
            var errorMessage = 'PROBE_STREAM_TYPE (-3) : Could not find any probe information'
                + ' in the file, so exited at InspectProbeStream';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
        case -4: {
            var errorMessage = 'PROBE_BUFFER_SIZE (-4) : Buffer is not long enough for'
                + ' description. Currently ${buffer_size} bytes';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
    }
    return { data: resultText, stdout: lastStdout, stderr: lastStderr };
}
exports.getFileProbeData = getFileProbeData;
function canPlayFile(filePath, model, timeSliceMode) {
    var data = getFileProbeData(filePath);
    var probeData = data.data;
    return canPlayProbeData(probeData, model, timeSliceMode);
}
exports.canPlayFile = canPlayFile;
function canPlayProbeData(probeData, model, timeSliceMode) {
    var bufferSize = 128;
    var buffer = cwrap.malloc(bufferSize);
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('CanPlayFileJS', 'number', ['string', 'string', 'string', 'number', 'number'], [probeData, machineName, timeSliceMode, buffer, bufferSize]);
    var cpResult = probeLibrary.UTF8ToString(buffer);
    cpResult = JSON.parse(cpResult);
    var canPlayToString = function (value) {
        var canPlayResult = probeLibrary.ccall('CanPlayToString', 'number', ['number'], [value]);
        return probeLibrary.UTF8ToString(canPlayResult);
    };
    var playable = false;
    if (cpResult.cp_result >= bscore_1.ProbePlayableStatus.cpPlayable && cpResult.cp_result <= bscore_1.ProbePlayableStatus.cpPlayableMax) {
        playable = true;
    }
    var canPlay = {
        playable: playable,
        playableResult: cpResult.cp_result,
        playableMsg: canPlayToString(cpResult.cp_result),
        isSeamless: cpResult.cp_result === bscore_1.ProbePlayableStatus.cpPlayableSeamlessly,
        video: cpResult.video,
        videoMsg: canPlayToString(cpResult.video),
        audio: cpResult.audio,
        audioMsg: canPlayToString(cpResult.audio),
    };
    cwrap.free(buffer);
    return canPlay;
}
exports.canPlayProbeData = canPlayProbeData;
function getDecoderName(model, index) {
    var bufferSize = 128;
    var buffer = cwrap.malloc(bufferSize);
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('GetDecoderName', 'number', ['string', 'number', 'number', 'number'], [machineName, index, buffer, bufferSize]);
    var name = result === -1 ? '' : probeLibrary.UTF8ToString(buffer);
    cwrap.free(buffer);
    if (result === -1) {
        var errorMessage = 'getDecoderName (-1) : Could not find decode for ' + model + ', index ' + index;
        throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
    }
    return name;
}
exports.getDecoderName = getDecoderName;
function getDecoderTimeSliceMaxCount(model, index, timeSliceMode) {
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('GetDecoderTimesliceMaxCount', 'number', ['string', 'number', 'string'], [machineName, index, timeSliceMode]);
    return result;
}
exports.getDecoderTimeSliceMaxCount = getDecoderTimeSliceMaxCount;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * @author shaozilee
 *
 * support 1bit 4bit 8bit 24bit decode
 * encode with 24bit
 * 
 */

var encode = __webpack_require__(70),
    decode = __webpack_require__(69);

module.exports = {
  encode: encode,
  decode: decode
};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

/**
 * @author shaozilee
 *
 * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp
 * 
 */

function BmpDecoder(buffer) {
  this.pos = 0;
  this.buffer = buffer;
  this.flag = this.buffer.toString("utf-8", 0, this.pos += 2);
  if (this.flag != "BM") throw new Error("Invalid BMP File");
  this.parseHeader();
  this.parseBGR();
}

BmpDecoder.prototype.parseHeader = function() {
  this.fileSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.reserved = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.offset = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.headerSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.width = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.height = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.planes = this.buffer.readUInt16LE(this.pos);
  this.pos += 2;
  this.bitPP = this.buffer.readUInt16LE(this.pos);
  this.pos += 2;
  this.compress = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.rawSize = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.hr = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.vr = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.colors = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;
  this.importantColors = this.buffer.readUInt32LE(this.pos);
  this.pos += 4;

  if (this.bitPP < 24) {
    var len = 1 << this.bitPP;
    this.palette = new Array(len);
    for (var i = 0; i < len; i++) {
      var blue = this.buffer.readUInt8(this.pos++);
      var green = this.buffer.readUInt8(this.pos++);
      var red = this.buffer.readUInt8(this.pos++);
      var quad = this.buffer.readUInt8(this.pos++);
      this.palette[i] = {
        red: red,
        green: green,
        blue: blue,
        quad: quad
      };
    }
  }

}

BmpDecoder.prototype.parseBGR = function() {
  this.pos = this.offset;
  try {
    var bitn = "bit" + this.bitPP;
    var len = this.width * this.height * 4;
    this.data = new Buffer(len);

    this[bitn]();
  } catch (e) {
    console.log("bit decode error:" + e);
  }

};

BmpDecoder.prototype.bit1 = function() {
  var xlen = Math.ceil(this.width / 8);
  var mode = xlen%4;
  for (var y = this.height - 1; y >= 0; y--) {
    for (var x = 0; x < xlen; x++) {
      var b = this.buffer.readUInt8(this.pos++);
      var location = y * this.width * 4 + x*8*4;
      for (var i = 0; i < 8; i++) {
        if(x*8+i<this.width){
          var rgb = this.palette[((b>>(7-i))&0x1)];
          this.data[location+i*4] = rgb.blue;
          this.data[location+i*4 + 1] = rgb.green;
          this.data[location+i*4 + 2] = rgb.red;
          this.data[location+i*4 + 3] = 0xFF;  
        }else{
          break;
        }
      }
    }

    if (mode != 0){
      this.pos+=(4 - mode);
    }
  }
};

BmpDecoder.prototype.bit4 = function() {
  var xlen = Math.ceil(this.width/2);
  var mode = xlen%4;
  for (var y = this.height - 1; y >= 0; y--) {
    for (var x = 0; x < xlen; x++) {
      var b = this.buffer.readUInt8(this.pos++);
      var location = y * this.width * 4 + x*2*4;

      var before = b>>4;
      var after = b&0x0F;

      var rgb = this.palette[before];
      this.data[location] = rgb.blue;
      this.data[location + 1] = rgb.green;
      this.data[location + 2] = rgb.red;
      this.data[location + 3] = 0xFF;  

      if(x*2+1>=this.width)break;

      rgb = this.palette[after];
      this.data[location+4] = rgb.blue;
      this.data[location+4 + 1] = rgb.green;
      this.data[location+4 + 2] = rgb.red;
      this.data[location+4 + 3] = 0xFF;  
    }

    if (mode != 0){
      this.pos+=(4 - mode);
    }
  }

};

BmpDecoder.prototype.bit8 = function() {
  var mode = this.width%4;
  for (var y = this.height - 1; y >= 0; y--) {
    for (var x = 0; x < this.width; x++) {
      var b = this.buffer.readUInt8(this.pos++);
      var location = y * this.width * 4 + x*4;
      var rgb = this.palette[b];
      this.data[location] = rgb.blue;
      this.data[location + 1] = rgb.green;
      this.data[location + 2] = rgb.red;
      this.data[location + 3] = 0xFF;  
    }
    if (mode != 0){
      this.pos+=(4 - mode);
    }
  }
};

BmpDecoder.prototype.bit24 = function() {
  //when height > 0
  for (var y = this.height - 1; y >= 0; y--) {
    for (var x = 0; x < this.width; x++) {
      var blue = this.buffer.readUInt8(this.pos++);
      var green = this.buffer.readUInt8(this.pos++);
      var red = this.buffer.readUInt8(this.pos++);
      var location = y * this.width * 4 + x * 4;
      this.data[location] = red;
      this.data[location + 1] = green;
      this.data[location + 2] = blue;
      this.data[location + 3] = 0xFF;
    }
    //skip extra bytes
    this.pos += (this.width % 4);
  }

};

BmpDecoder.prototype.getData = function() {
  return this.data;
};



module.exports = decode = function(bmpData) {
  var decoder = new BmpDecoder(bmpData);
  return {
    data: decoder.getData(),
    width: decoder.width,
    height: decoder.height
  };
}

/***/ }),
/* 70 */
/***/ (function(module, exports) {

/**
 * @author shaozilee
 *
 * BMP format encoder,encode 24bit BMP
 * Not support quality compression
 * 
 */

function BmpEncoder(imgData){
	this.buffer = imgData.data;
	this.width = imgData.width;
	this.height = imgData.height;
	this.extraBytes = this.width%4;
	this.rgbSize = this.height*(3*this.width+this.extraBytes);
	this.headerInfoSize = 40;

	this.data = [];
	/******************header***********************/
	this.flag = "BM";
	this.reserved = 0;
	this.offset = 54;
	this.fileSize = this.rgbSize+this.offset;
	this.planes = 1;
	this.bitPP = 24;
	this.compress = 0;
	this.hr = 0;
	this.vr = 0;
	this.colors = 0;
	this.importantColors = 0;
}

BmpEncoder.prototype.encode = function() {
	var tempBuffer = new Buffer(this.offset+this.rgbSize);
	this.pos = 0;
	tempBuffer.write(this.flag,this.pos,2);this.pos+=2;
	tempBuffer.writeUInt32LE(this.fileSize,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.reserved,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.offset,this.pos);this.pos+=4;

	tempBuffer.writeUInt32LE(this.headerInfoSize,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.width,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.height,this.pos);this.pos+=4;
	tempBuffer.writeUInt16LE(this.planes,this.pos);this.pos+=2;
	tempBuffer.writeUInt16LE(this.bitPP,this.pos);this.pos+=2;
	tempBuffer.writeUInt32LE(this.compress,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.rgbSize,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.hr,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.vr,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.colors,this.pos);this.pos+=4;
	tempBuffer.writeUInt32LE(this.importantColors,this.pos);this.pos+=4;

	var i=0;
	var rowBytes = 3*this.width+this.extraBytes;

	for (var y = this.height - 1; y >= 0; y--){
		for (var x = 0; x < this.width; x++){
			var p = this.pos+y*rowBytes+x*3;
			tempBuffer[p+2]= this.buffer[i++];//r
			tempBuffer[p+1] = this.buffer[i++];//g
			tempBuffer[p]  = this.buffer[i++];//b
			i++;
		}
		if(this.extraBytes>0){
			var fillOffset = this.pos+y*rowBytes+this.width*3;
			tempBuffer.fill(0,fillOffset,fillOffset+this.extraBytes);	
		}
	}

	return tempBuffer;
};




module.exports = encode = function(imgData, quality) {
  if (typeof quality === 'undefined') quality = 100;
 	var encoder = new BmpEncoder(imgData);
	var data = encoder.encode();
  return {
    data: data,
    width: imgData.width,
    height: imgData.height
  };
}


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(23);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Detect Electron renderer process, which is node, but we should
 * treat as a browser.
 */

if (typeof process !== 'undefined' && process.type === 'renderer') {
  module.exports = __webpack_require__(71);
} else {
  module.exports = __webpack_require__(73);
}


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var tty = __webpack_require__(150);
var util = __webpack_require__(5);

/**
 * This is the Node.js implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(23);
exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return /^debug_/i.test(key);
}).reduce(function (obj, key) {
  // camel-case
  var prop = key
    .substring(6)
    .toLowerCase()
    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });

  // coerce string value into JS value
  var val = process.env[key];
  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
  else if (val === 'null') val = null;
  else val = Number(val);

  obj[prop] = val;
  return obj;
}, {});

/**
 * The file descriptor to write the `debug()` calls to.
 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
 *
 *   $ DEBUG_FD=3 node script.js 3>debug.log
 */

var fd = parseInt(process.env.DEBUG_FD, 10) || 2;

if (1 !== fd && 2 !== fd) {
  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()
}

var stream = 1 === fd ? process.stdout :
             2 === fd ? process.stderr :
             createWritableStdioStream(fd);

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts
    ? Boolean(exports.inspectOpts.colors)
    : tty.isatty(fd);
}

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

exports.formatters.o = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts)
    .split('\n').map(function(str) {
      return str.trim()
    }).join(' ');
};

/**
 * Map %o to `util.inspect()`, allowing multiple lines if needed.
 */

exports.formatters.O = function(v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var name = this.namespace;
  var useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var prefix = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m';

    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push('\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\u001b[0m');
  } else {
    args[0] = new Date().toUTCString()
      + ' ' + name + ' ' + args[0];
  }
}

/**
 * Invokes `util.format()` with the specified arguments and writes to `stream`.
 */

function log() {
  return stream.write(util.format.apply(util, arguments) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  if (null == namespaces) {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  } else {
    process.env.DEBUG = namespaces;
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  return process.env.DEBUG;
}

/**
 * Copied from `node/src/node.js`.
 *
 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
 */

function createWritableStdioStream (fd) {
  var stream;
  var tty_wrap = process.binding('tty_wrap');

  // Note stream._type is used for test-module-load-list.js

  switch (tty_wrap.guessHandleType(fd)) {
    case 'TTY':
      stream = new tty.WriteStream(fd);
      stream._type = 'tty';

      // Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    case 'FILE':
      var fs = __webpack_require__(2);
      stream = new fs.SyncWriteStream(fd, { autoClose: false });
      stream._type = 'fs';
      break;

    case 'PIPE':
    case 'TCP':
      var net = __webpack_require__(149);
      stream = new net.Socket({
        fd: fd,
        readable: false,
        writable: true
      });

      // FIXME Should probably have an option in net.Socket to create a
      // stream from an existing fd which is writable only. But for now
      // we'll just add this hack and set the `readable` member to false.
      // Test: ./node test/fixtures/echo.js < /etc/passwd
      stream.readable = false;
      stream.read = null;
      stream._type = 'pipe';

      // FIXME Hack to have stream not keep the event loop alive.
      // See https://github.com/joyent/node/issues/1726
      if (stream._handle && stream._handle.unref) {
        stream._handle.unref();
      }
      break;

    default:
      // Probably an error on in uv_guess_handle()
      throw new Error('Implement me. Unknown stream file type!');
  }

  // For supporting legacy API we put the FD here.
  stream.fd = fd;

  stream._isStdio = true;

  return stream;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init (debug) {
  debug.inspectOpts = {};

  var keys = Object.keys(exports.inspectOpts);
  for (var i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

/**
 * Enable namespaces listed in `process.env.DEBUG` initially.
 */

exports.enable(load());


/***/ }),
/* 74 */
/***/ (function(module, exports) {

//
// A couple of methods that make working with buffers more easy.
//

Buffer.prototype.getByte = function (offset) {
  return this[offset];
};

Buffer.prototype.getSignedByte = function (offset) {
  return (this[offset] > 127) ? this[offset] - 256 : this[offset];
};

Buffer.prototype.getShort = function (offset, bigEndian) {
  var shortVal = (bigEndian) ? (this[offset] << 8) + this[offset + 1] : (this[offset + 1] << 8) + this[offset];
  return (shortVal < 0) ? shortVal + 65536 : shortVal;
};

Buffer.prototype.getSignedShort = function (offset, bigEndian) {
  var shortVal = (bigEndian) ? (this[offset] << 8) + this[offset + 1] : (this[offset + 1] << 8) + this[offset];
  return (shortVal > 32767) ? shortVal - 65536 : shortVal;
};

Buffer.prototype.getLong = function (offset, bigEndian) {
  var longVal = (bigEndian) ? (((((this[offset] << 8) + this[offset + 1]) << 8) + this[offset + 2]) << 8) + this[offset + 3] : (((((this[offset + 3] << 8) + this[offset + 2]) << 8) + this[offset + 1]) << 8) + this[offset];
  return (longVal < 0) ? longVal + 4294967296 : longVal;
};

Buffer.prototype.getSignedLong = function (offset, bigEndian) {
  var longVal = (bigEndian) ? (((((this[offset] << 8) + this[offset + 1]) << 8) + this[offset + 2]) << 8) + this[offset + 3] : (((((this[offset + 3] << 8) + this[offset + 2]) << 8) + this[offset + 1]) << 8) + this[offset];
  return (longVal > 2147483647) ? longVal - 4294967296 : longVal;
};

Buffer.prototype.getString = function (offset, length) {
  var string = [];
  for (var i = offset; i < offset + length; i++) {
    string.push(String.fromCharCode(this[i]));
  }
  return string.join('');
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jslint node: true */


var assert = __webpack_require__(13);
var fs = __webpack_require__(2);
var util = __webpack_require__(5);
var BufferExtender = __webpack_require__(74); // bad idea
var debug = __webpack_require__(72)('exif');

var DEFAULT_MAX_ENTRIES=128;

/**
 * Represents an image with Exif information. When instantiating it you have to
 * provide an image and a callback function which is called once all metadata
 * is extracted from the image.
 *
 * Available options are:
 *  - image The image to get Exif data from can be either a filesystem path or
 *          a Buffer.
 *  - tiffOffsets  (boolean) an object named "offsets" is added to exifData 
 *          and contains lot of offsets needed to get thumbnail and other things. 
 *  - fixThumbnailOffset:  node-exif corrects the thumbnail offset in order to have an offset from the start of the buffer/file.
 *  - maxEntries: Specifies the maximum entries to be parsed
 *  - ifd0MaxEntries
 *  - ifd1MaxEntries
 *  - maxGpsEntries
 *  - maxInteroperabilityEntries
 *  - agfaMaxEntries 
 *  - epsonMaxEntries
 *  - fujifilmMaxEntries
 *  - olympusMaxEntries
 *  - panasonicMaxEntries
 *  - sanyoMaxEntries
 *  - noPadding
 *
 * If you don't set the image field, you might call  exifImage.loadImage(image, callback) to get exif datas. 
 *
 * @param options Configuration options as described above
 * @param callback Function to call when data is extracted or an error occurred
 * @return Nothing of importance, calls the specified callback function instead
 */
function ExifImage (options, callback) {
  if (!(this instanceof ExifImage)) {
    if (typeof(options)==="string") {
      options = {
          image: options
      }
    }

    assert(typeof(options)==="object", "Invalid options object");
    
    var exifImage = new ExifImage(options, function(error, data) {
      if (error) {
        return callback(error);
      }
      
      callback(null, data, options.image);      
    });
    
    return exifImage;
  }

  if (typeof(options)==="string") {
    options= {
        image: options
    }
  } else if (options instanceof Buffer) {
    options= {
        image: options
    }
  }
  
  var ops={};
  if (options) {
    for(var k in options) {
      ops[k]=options[k];
    }
  }
  this.options=ops;

  // Default option values
  ["ifd0MaxEntries", "ifd1MaxEntries", "maxGpsEntries", "maxInteroperabilityEntries", "agfaMaxEntries", "epsonMaxEntries", 
     "fujifilmMaxEntries", "olympusMaxEntries", "panasonicMaxEntries", "sanyoMaxEntries"].forEach(function(p) {
       if (ops[p]===undefined) {
         ops[p]=DEFAULT_MAX_ENTRIES;
       }
     });

  this.exifData = {
    image : {},                 // Information about the main image
    thumbnail : {},             // Information about the thumbnail
    exif : {},                  // Exif information
    gps : {},                   // GPS information
    interoperability: {},       // Exif Interoperability information
    makernote : {}              // Makernote information
  };
   
  this.offsets={};
  if (ops.tiffOffsets) {
    exifData.offsets=offsets;
  }
  
  debug("New ExifImage options=",options);

  if (!ops.image) {
    // If options image is not specified, the developper must call loadImage() to parse the image.
//    callback(new Error('You have to provide an image, it is pretty hard to extract Exif data from nothing...'));
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error('You have to provide a callback function.');
  }
 
  var self=this;
  setImmediate(function() {
    self.loadImage(ops.image, function (error, exifData) {
      if (error) {
        return callback(error);
      }
    
      callback(null, exifData, ops.image);
    });
  });
}

ExifImage.ExifImage=ExifImage;

module.exports = ExifImage;

/**
 * Load image and parse exifDatas
 *
 * @param [String|Buffer] image the image
 * @param callback a callback which is called when exif datas are parsed.
 * @return Nothing
 */
ExifImage.prototype.loadImage = function (image, callback) {
  assert(typeof(callback)==="function", "Callback must be a function");
  
  var self = this;

  debug("loadImage image=", image);
  
  if (image.constructor.name === 'Buffer') {
    this.processImage("Buffer", image, callback);
    return;
  }
  
  if (image.constructor.name === 'String') {
    fs.readFile(image, function (error, data) {
      if (error) {
        callback(new Error('Encountered the following error while trying to read given image: '+error));
        return;
      }

      self.processImage("File: "+image, data, callback);
    });
    return;
  }

  callback(new Error('Given image is neither a buffer nor a file, please provide one of these.'));
};

ExifImage.prototype.processImage = function (source, data, callback) {
  assert(typeof(source)==="string", "Source must be a string");
  assert(typeof(callback)==="function", "Callback must be a function");
  
  var offset = 0;

  if (data[offset++] != 0xFF || data[offset++] != 0xD8) {
    var e=new Error('The given image is not a JPEG and thus unsupported right now.');
    e.source=source;
    e.code="NOT_A_JPEG";
    callback(e);
    return;
  }

  this.imageType = 'JPEG';

  while (offset < data.length) {

    if (data[offset++] != 0xFF) {
      break;
    }

    if (data[offset++] == 0xE1) {
      try {
        this.extractExifData(data, offset + 2, data.getShort(offset, true) - 2);

      } catch (error) {
        error.code="PARSING_ERROR";
        error.source=source;        

        debug("Extract exif data error source=", source, "offset=", offset, "error=",error);
        
        callback(error);
        return;
      }
      
      debug("Extract exif data success source=", source, "exifData=",this.exifData);

      callback(null, this.exifData);
      return;
    }

    offset += data.getShort(offset, true);
  }

  var e2=new Error('No Exif segment found in the given image.');
  e2.source=source;
  e2.code="NO_EXIF_SEGMENT";
  
  callback(e2);
};

ExifImage.prototype.extractExifData = function (data, start, length) {

  var exifData=this.exifData;
  var tiffOffset = start + 6;
  var ifdOffset, numberOfEntries;
  var noPadding = (this.options.noPadding!==false);
  
  this.offsets.tiff=tiffOffset;

  // Exif data always starts with Exif\0\0
  if (data.toString('utf8', start, tiffOffset) != 'Exif\0\0') {
    throw new Error('The Exif data is not valid.');
  }

  // After the Exif start we either have 0x4949 if the following data is
  // stored in big endian or 0x4D4D if it is stored in little endian
  if (data.getShort(tiffOffset) == 0x4949) {
    this.isBigEndian = false;
    
  } else if (data.getShort(tiffOffset) == 0x4D4D) {
    this.isBigEndian = true;
    
  } else {
    throw new Error('Invalid TIFF data! Expected 0x4949 or 0x4D4D at offset '+(tiffOffset)+' but found 0x'+data[tiffOffset].toString(16).toUpperCase()+data[tiffOffset + 1].toString(16).toUpperCase()+".");
  }

  debug("BigEndian=",this.isBigEndian);
  
  // Valid TIFF headers always have 0x002A here
  if (data.getShort(tiffOffset + 2, this.isBigEndian) != 0x002A) {
    var expected = (this.isBigEndian) ? '0x002A' : '0x2A00';
    throw new Error('Invalid TIFF data! Expected '+expected+' at offset '+(tiffOffset + 2)+' but found 0x'+data[tiffOffset + 2].toString(16).toUpperCase()+data[tiffOffset + 3].toString(16).toUpperCase()+".");
  }

  /********************************* IFD0 **********************************/

  // Offset to IFD0 which is always followed by two bytes with the amount of
  // entries in this IFD
  ifdOffset = tiffOffset + data.getLong(tiffOffset + 4, this.isBigEndian);
  this.offsets.ifd0=ifdOffset;
  
  numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
  if (this.options.ifd0MaxEntries) {
    numberOfEntries=Math.min(numberOfEntries, this.options.ifd0MaxEntries);
  }

  debug("IFD0 ifdOffset=",ifdOffset, "numberOfEntries=", numberOfEntries);

  // Each IFD entry consists of 12 bytes which we loop through and extract
  // the data from
  for (var i = 0; i < numberOfEntries; i++) {
    var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);
    if (!exifEntry) {
      continue;
    }
    
    if (exifEntry.tagId===0xEA1C && noPadding) {
      continue;
    }
    
    exifData.image[exifEntry.tagName] = exifEntry.value;
  }

  debug("IFD0 parsed", exifData.image);

  /********************************* IFD1 **********************************/

  // Check if there is an offset for IFD1. If so it is always followed by two
  // bytes with the amount of entries in this IFD, if not there is no IFD1
  var nextIfdOffset = data.getLong(ifdOffset + 2 + (numberOfEntries * 12), this.isBigEndian)
  if (nextIfdOffset != 0x00000000) {
    ifdOffset = tiffOffset + nextIfdOffset;
    this.offsets.ifd1=ifdOffset;
    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
    if (this.options.ifd1MaxEntries) {
      numberOfEntries=Math.min(numberOfEntries, this.options.ifd1MaxEntries);
    }

    debug("IFD1 ifdOffset=",ifdOffset, "numberOfEntries=", numberOfEntries);

    // Each IFD entry consists of 12 bytes which we loop through and extract
    // the data from
    for (var i = 0; i < numberOfEntries; i++) {
      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);
      if (!exifEntry) {
        continue;
      }

      if (exifEntry.tagId===0xEA1C && noPadding) {
        continue;
      }
                  
      exifData.thumbnail[exifEntry.tagName] = exifEntry.value;
    }
    
    if (this.options.fixThumbnailOffset) {
      var thumbnailOffset=exifData.thumbnail[ExifImage.TAGS.exif[0x0201]];
      if (thumbnailOffset) {
        debug("IFD1 fix thumbnail offset, add=",this.offsets.tiff);
        
        exifData.thumbnail[ExifImage.TAGS.exif[0x0201]]+=this.offsets.tiff;
      }
    }

    debug("IFD1 parsed", exifData.thumbnail);
  }

  /******************************* EXIF IFD ********************************/

  // Look for a pointer to the Exif IFD in IFD0 and extract information from
  // it if available
  if (exifData.image[ExifImage.TAGS.exif[0x8769]]) {

    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8769]];
    this.offsets.tags=ifdOffset;
    
    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
    if (this.options.maxEntries) {
      numberOfEntries=Math.min(numberOfEntries, this.options.maxEntries);
    }
    
    debug("EXIF IFD ifdOffset=",ifdOffset, "numberOfEntries=", numberOfEntries);
    
    // Each IFD entry consists of 12 bytes which we loop through and extract
    // the data from
    for (var i = 0; i < numberOfEntries; i++) {
      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);
      if (!exifEntry) {
        continue;
      }

      if (exifEntry.tagId===0xEA1C && noPadding) {
        continue;
      }
            
      exifData.exif[exifEntry.tagName] = exifEntry.value;
    }

    debug("EXIF IFD parsed",exifData.exif);
  }

  /******************************** GPS IFD ********************************/

  // Look for a pointer to the GPS IFD in IFD0 and extract information from
  // it if available
  if (exifData.image[ExifImage.TAGS.exif[0x8825]]) {

    ifdOffset = tiffOffset + exifData.image[ExifImage.TAGS.exif[0x8825]];
    this.offsets.gps=ifdOffset;

    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
    if (this.options.maxGpsEntries) {
      numberOfEntries=Math.min(numberOfEntries, this.options.maxGpsEntries);
    }
    
    debug("GPS IFD ifdOffset=", ifdOffset, "numberOfEntries=", numberOfEntries);

    // Each IFD entry consists of 12 bytes which we loop through and extract
    // the data from
    for (var i = 0; i < numberOfEntries; i++) {
      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.gps);
      if (!exifEntry) {
        continue;
      }

      if (exifEntry.tagId===0xEA1C && noPadding) {
        continue;
      }
      
      exifData.gps[exifEntry.tagName] = exifEntry.value;
    }

    debug("GPS IFD parsed",exifData.gps);
   }

  /************************* Interoperability IFD **************************/

  // Look for a pointer to the interoperatbility IFD in the Exif IFD and
  // extract information from it if available
  if (exifData.exif[ExifImage.TAGS.exif[0xA005]]) {

    ifdOffset = tiffOffset + exifData.exif[ExifImage.TAGS.exif[0xA005]];
    this.offsets.interoperability=ifdOffset;
    
    numberOfEntries = data.getShort(ifdOffset, this.isBigEndian);
    if (this.options.maxInteroperabilityEntries) {
      numberOfEntries=Math.min(numberOfEntries, this.options.maxInteroperabilityEntries);
    }
    
    debug("Interoperability IFD ifdOffset=", ifdOffset, "numberOfEntries=", numberOfEntries);

    // Each IFD entry consists of 12 bytes which we loop through and extract
    // the data from
    for (var i = 0; i < numberOfEntries; i++) {
      var exifEntry = this.extractExifEntry(data, (ifdOffset + 2 + (i * 12)), tiffOffset, this.isBigEndian, ExifImage.TAGS.exif);
      if (!exifEntry) {
        break;
      }

      if (exifEntry.tagId===0xEA1C && noPadding) {
        continue;
      }
            
      exifData.interoperability[exifEntry.tagName] = exifEntry.value;
   }

    debug("Interoperability IFD parsed",exifData.gps);
  }

  /***************************** Makernote IFD *****************************/

  // Look for Makernote data in the Exif IFD, check which type of proprietary
  // Makernotes the image contains, load the respective functionality and
  // start the extraction
  if (typeof exifData.exif[ExifImage.TAGS.exif[0x927C]] != "undefined") {

    var type;
    // Check the header to see what kind of Makernote we are dealing with
    if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === "OLYMP\x00\x01" || exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === "OLYMP\x00\x02") {
      type="olympus"

    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 7) === "AGFA \x00\x01") {
      type="agfa";

    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === "EPSON\x00\x01\x00") {
      type="epson";

    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 8) === "FUJIFILM") {
      type="fujifilm";

    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 9) === "Panasonic") {
      type="panasonic";

    } else if (exifData.exif[ExifImage.TAGS.exif[0x927C]].getString(0, 5) === "SANYO") {
      type="sanyo";
    }
   

    debug("Makernote IFD ifdOffset=", ifdOffset, "type=", type);

    if (type) {
      var extractMakernotes = __webpack_require__(77)("./"+type).extractMakernotes;

      exifData.makernote = extractMakernotes.call(this, data, this.makernoteOffset, tiffOffset);
      
    } else {      
      // Makernotes are available but the format is not recognized so
      // an error message is pushed instead, this ain't the best
      // solution but should do for now
       exifData.makernote['error'] = 'Unable to extract Makernote information as it is in an unsupported or unrecognized format.';    
    }

    debug("Makernote IFD parsed",exifData.makernote);
  }
};

ExifImage.prototype.extractExifEntry = function (data, entryOffset, tiffOffset, isBigEndian, tags) {

  var entry = {
    tag : data.slice(entryOffset, entryOffset + 2),
    tagId : null,
    tagName : null,
    format : data.getShort(entryOffset + 2, isBigEndian),
    components : data.getLong(entryOffset + 4, isBigEndian),
    valueOffset: null,
    value : []
  }

  entry.tagId = entry.tag.getShort(0, isBigEndian);

  // The tagId may correspond to more then one tagName so check which
  if (tags && tags[entry.tagId] && typeof tags[entry.tagId] == "function") {
    entry.tagName = tags[entry.tagId].call(this, entry);    
    if (!entry.tagName) {
      return false;
    }

  // The tagId corresponds to exactly one tagName
  } else if (tags && tags[entry.tagId]) {
    entry.tagName = tags[entry.tagId];
    if (entry.tagName===undefined) {
      return false;
    }

  // The tagId is not recognized
  } else {
    return false;
  }

  switch (entry.format) {

    case 0x0001: // unsigned byte, 1 byte per component
      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getByte(entry.valueOffset + i));
      break;

    case 0x0002: // ascii strings, 1 byte per component
      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      entry.value = data.getString(entry.valueOffset, entry.components);
      if (entry.value[entry.value.length - 1] === "\u0000") // Trim null terminated strings
        entry.value = entry.value.substring(0, entry.value.length - 1);
      break;

    case 0x0003: // unsigned short, 2 byte per component
      entry.valueOffset = (entry.components <= 2) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getShort(entry.valueOffset + i * 2, isBigEndian));
      break;

    case 0x0004: // unsigned long, 4 byte per component
      entry.valueOffset = (entry.components == 1) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getLong(entry.valueOffset + i * 4, isBigEndian));
      break;

    case 0x0005: // unsigned rational, 8 byte per component (4 byte numerator and 4 byte denominator)
      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getLong(entry.valueOffset + i * 8, isBigEndian) / data.getLong(entry.valueOffset + i * 8 + 4, isBigEndian));
      break;

    case 0x0006: // signed byte, 1 byte per component
      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getSignedByte(entry.valueOffset + i));
      break;

    case 0x0007: // undefined, 1 byte per component
      entry.valueOffset = (entry.components <= 4) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      entry.value.push(data.slice(entry.valueOffset, entry.valueOffset + entry.components));
      break;

    case 0x0008: // signed short, 2 byte per component
      entry.valueOffset = (entry.components <= 2) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getSignedShort(entry.valueOffset + i * 2, isBigEndian));
      break;

    case 0x0009: // signed long, 4 byte per component
      entry.valueOffset = (entry.components == 1) ? entryOffset + 8 : data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getSignedLong(entry.valueOffset + i * 4, isBigEndian));
      break;

    case 0x000A: // signed rational, 8 byte per component (4 byte numerator and 4 byte denominator)
      entry.valueOffset = data.getLong(entryOffset + 8, isBigEndian) + tiffOffset;
      for (var i = 0; i < entry.components; i++)
        entry.value.push(data.getSignedLong(entry.valueOffset + i * 8, isBigEndian) / data.getSignedLong(entry.valueOffset + i * 8 + 4, isBigEndian));
      break;

    default:
      return false;

  }

  // If this is the Makernote tag save its offset for later use
  if (entry.tagName === "MakerNote") {
    this.offsets.makernoteOffset = entry.valueOffset;
  }

  // If the value array has only one element we don't need an array
  if (entry.value.length == 1) {
    entry.value = entry.value[0];
  }

  return entry;
};

/**
 * Comprehensive list of TIFF and Exif tags found on
 * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html
 */
ExifImage.TAGS = {

  // Exif tags
  exif : {

    0x0001 : "InteropIndex",
    0x0002 : "InteropVersion",
    0x000B : "ProcessingSoftware",
    0x00FE : "SubfileType",
    0x00FF : "OldSubfileType",
    0x0100 : "ImageWidth",
    0x0101 : "ImageHeight",
    0x0102 : "BitsPerSample",
    0x0103 : "Compression",
    0x0106 : "PhotometricInterpretation",
    0x0107 : "Thresholding",
    0x0108 : "CellWidth",
    0x0109 : "CellLength",
    0x010A : "FillOrder",
    0x010D : "DocumentName",
    0x010E : "ImageDescription",
    0x010F : "Make",
    0x0110 : "Model",
    0x0111 : "StripOffsets",
    0x0112 : "Orientation",
    0x0115 : "SamplesPerPixel",
    0x0116 : "RowsPerStrip",
    0x0117 : "StripByteCounts",
    0x0118 : "MinSampleValue",
    0x0119 : "MaxSampleValue",
    0x011A : "XResolution",
    0x011B : "YResolution",
    0x011C : "PlanarConfiguration",
    0x011D : "PageName",
    0x011E : "XPosition",
    0x011F : "YPosition",
    0x0120 : "FreeOffsets",
    0x0121 : "FreeByteCounts",
    0x0122 : "GrayResponseUnit",
    0x0123 : "GrayResponseCurve",
    0x0124 : "T4Options",
    0x0125 : "T6Options",
    0x0128 : "ResolutionUnit",
    0x0129 : "PageNumber",
    0x012C : "ColorResponseUnit",
    0x012D : "TransferFunction",
    0x0131 : "Software",
    0x0132 : "ModifyDate",
    0x013B : "Artist",
    0x013C : "HostComputer",
    0x013D : "Predictor",
    0x013E : "WhitePoint",
    0x013F : "PrimaryChromaticities",
    0x0140 : "ColorMap",
    0x0141 : "HalftoneHints",
    0x0142 : "TileWidth",
    0x0143 : "TileLength",
    0x0144 : "TileOffsets",
    0x0145 : "TileByteCounts",
    0x0146 : "BadFaxLines",
    0x0147 : "CleanFaxData",
    0x0148 : "ConsecutiveBadFaxLines",
    0x014A : "SubIFD",
    0x014C : "InkSet",
    0x014D : "InkNames",
    0x014E : "NumberofInks",
    0x0150 : "DotRange",
    0x0151 : "TargetPrinter",
    0x0152 : "ExtraSamples",
    0x0153 : "SampleFormat",
    0x0154 : "SMinSampleValue",
    0x0155 : "SMaxSampleValue",
    0x0156 : "TransferRange",
    0x0157 : "ClipPath",
    0x0158 : "XClipPathUnits",
    0x0159 : "YClipPathUnits",
    0x015A : "Indexed",
    0x015B : "JPEGTables",
    0x015F : "OPIProxy",
    0x0190 : "GlobalParametersIFD",
    0x0191 : "ProfileType",
    0x0192 : "FaxProfile",
    0x0193 : "CodingMethods",
    0x0194 : "VersionYear",
    0x0195 : "ModeNumber",
    0x01B1 : "Decode",
    0x01B2 : "DefaultImageColor",
    0x01B3 : "T82Options",
    0x01B5 : "JPEGTables",
    0x0200 : "JPEGProc",
    0x0201 : "ThumbnailOffset",
    0x0202 : "ThumbnailLength",
    0x0203 : "JPEGRestartInterval",
    0x0205 : "JPEGLosslessPredictors",
    0x0206 : "JPEGPointTransforms",
    0x0207 : "JPEGQTables",
    0x0208 : "JPEGDCTables",
    0x0209 : "JPEGACTables",
    0x0211 : "YCbCrCoefficients",
    0x0212 : "YCbCrSubSampling",
    0x0213 : "YCbCrPositioning",
    0x0214 : "ReferenceBlackWhite",
    0x022F : "StripRowCounts",
    0x02BC : "ApplicationNotes",
    0x03E7 : "USPTOMiscellaneous",
    0x1000 : "RelatedImageFileFormat",
    0x1001 : "RelatedImageWidth",
    0x1002 : "RelatedImageHeight",
    0x4746 : "Rating",
    0x4747 : "XP_DIP_XML",
    0x4748 : "StitchInfo",
    0x4749 : "RatingPercent",
    0x800D : "ImageID",
    0x80A3 : "WangTag1",
    0x80A4 : "WangAnnotation",
    0x80A5 : "WangTag3",
    0x80A6 : "WangTag4",
    0x80E3 : "Matteing",
    0x80E4 : "DataType",
    0x80E5 : "ImageDepth",
    0x80E6 : "TileDepth",
    0x827D : "Model2",
    0x828D : "CFARepeatPatternDim",
    0x828E : "CFAPattern2",
    0x828F : "BatteryLevel",
    0x8290 : "KodakIFD",
    0x8298 : "Copyright",
    0x829A : "ExposureTime",
    0x829D : "FNumber",
    0x82A5 : "MDFileTag",
    0x82A6 : "MDScalePixel",
    0x82A7 : "MDColorTable",
    0x82A8 : "MDLabName",
    0x82A9 : "MDSampleInfo",
    0x82AA : "MDPrepDate",
    0x82AB : "MDPrepTime",
    0x82AC : "MDFileUnits",
    0x830E : "PixelScale",
    0x8335 : "AdventScale",
    0x8336 : "AdventRevision",
    0x835C : "UIC1Tag",
    0x835D : "UIC2Tag",
    0x835E : "UIC3Tag",
    0x835F : "UIC4Tag",
    0x83BB : "IPTC-NAA",
    0x847E : "IntergraphPacketData",
    0x847F : "IntergraphFlagRegisters",
    0x8480 : "IntergraphMatrix",
    0x8481 : "INGRReserved",
    0x8482 : "ModelTiePoint",
    0x84E0 : "Site",
    0x84E1 : "ColorSequence",
    0x84E2 : "IT8Header",
    0x84E3 : "RasterPadding",
    0x84E4 : "BitsPerRunLength",
    0x84E5 : "BitsPerExtendedRunLength",
    0x84E6 : "ColorTable",
    0x84E7 : "ImageColorIndicator",
    0x84E8 : "BackgroundColorIndicator",
    0x84E9 : "ImageColorValue",
    0x84EA : "BackgroundColorValue",
    0x84EB : "PixelIntensityRange",
    0x84EC : "TransparencyIndicator",
    0x84ED : "ColorCharacterization",
    0x84EE : "HCUsage",
    0x84EF : "TrapIndicator",
    0x84F0 : "CMYKEquivalent",
    0x8546 : "SEMInfo",
    0x8568 : "AFCP_IPTC",
    0x85B8 : "PixelMagicJBIGOptions",
    0x85D8 : "ModelTransform",
    0x8602 : "WB_GRGBLevels",
    0x8606 : "LeafData",
    0x8649 : "PhotoshopSettings",
    0x8769 : "ExifOffset",
    0x8773 : "ICC_Profile",
    0x877F : "TIFF_FXExtensions",
    0x8780 : "MultiProfiles",
    0x8781 : "SharedData",
    0x8782 : "T88Options",
    0x87AC : "ImageLayer",
    0x87AF : "GeoTiffDirectory",
    0x87B0 : "GeoTiffDoubleParams",
    0x87B1 : "GeoTiffAsciiParams",
    0x8822 : "ExposureProgram",
    0x8824 : "SpectralSensitivity",
    0x8825 : "GPSInfo",
    0x8827 : "ISO",
    0x8828 : "Opto-ElectricConvFactor",
    0x8829 : "Interlace",
    0x882A : "TimeZoneOffset",
    0x882B : "SelfTimerMode",
    0x8830 : "SensitivityType",
    0x8831 : "StandardOutputSensitivity",
    0x8832 : "RecommendedExposureIndex",
    0x8833 : "ISOSpeed",
    0x8834 : "ISOSpeedLatitudeyyy",
    0x8835 : "ISOSpeedLatitudezzz",
    0x885C : "FaxRecvParams",
    0x885D : "FaxSubAddress",
    0x885E : "FaxRecvTime",
    0x888A : "LeafSubIFD",
    0x9000 : "ExifVersion",
    0x9003 : "DateTimeOriginal",
    0x9004 : "CreateDate",
    0x9101 : "ComponentsConfiguration",
    0x9102 : "CompressedBitsPerPixel",
    0x9201 : "ShutterSpeedValue",
    0x9202 : "ApertureValue",
    0x9203 : "BrightnessValue",
    0x9204 : "ExposureCompensation",
    0x9205 : "MaxApertureValue",
    0x9206 : "SubjectDistance",
    0x9207 : "MeteringMode",
    0x9208 : "LightSource",
    0x9209 : "Flash",
    0x920A : "FocalLength",
    0x920B : "FlashEnergy",
    0x920C : "SpatialFrequencyResponse",
    0x920D : "Noise",
    0x920E : "FocalPlaneXResolution",
    0x920F : "FocalPlaneYResolution",
    0x9210 : "FocalPlaneResolutionUnit",
    0x9211 : "ImageNumber",
    0x9212 : "SecurityClassification",
    0x9213 : "ImageHistory",
    0x9214 : "SubjectArea",
    0x9215 : "ExposureIndex",
    0x9216 : "TIFF-EPStandardID",
    0x9217 : "SensingMethod",
    0x923A : "CIP3DataFile",
    0x923B : "CIP3Sheet",
    0x923C : "CIP3Side",
    0x923F : "StoNits",
    0x927C : "MakerNote",
    0x9286 : "UserComment",
    0x9290 : "SubSecTime",
    0x9291 : "SubSecTimeOriginal",
    0x9292 : "SubSecTimeDigitized",
    0x932F : "MSDocumentText",
    0x9330 : "MSPropertySetStorage",
    0x9331 : "MSDocumentTextPosition",
    0x935C : "ImageSourceData",
    0x9C9B : "XPTitle",
    0x9C9C : "XPComment",
    0x9C9D : "XPAuthor",
    0x9C9E : "XPKeywords",
    0x9C9F : "XPSubject",
    0xA000 : "FlashpixVersion",
    0xA001 : "ColorSpace",
    0xA002 : "ExifImageWidth",
    0xA003 : "ExifImageHeight",
    0xA004 : "RelatedSoundFile",
    0xA005 : "InteropOffset",
    0xA20B : "FlashEnergy",
    0xA20C : "SpatialFrequencyResponse",
    0xA20D : "Noise",
    0xA20E : "FocalPlaneXResolution",
    0xA20F : "FocalPlaneYResolution",
    0xA210 : "FocalPlaneResolutionUnit",
    0xA211 : "ImageNumber",
    0xA212 : "SecurityClassification",
    0xA213 : "ImageHistory",
    0xA214 : "SubjectLocation",
    0xA215 : "ExposureIndex",
    0xA216 : "TIFF-EPStandardID",
    0xA217 : "SensingMethod",
    0xA300 : "FileSource",
    0xA301 : "SceneType",
    0xA302 : "CFAPattern",
    0xA401 : "CustomRendered",
    0xA402 : "ExposureMode",
    0xA403 : "WhiteBalance",
    0xA404 : "DigitalZoomRatio",
    0xA405 : "FocalLengthIn35mmFormat",
    0xA406 : "SceneCaptureType",
    0xA407 : "GainControl",
    0xA408 : "Contrast",
    0xA409 : "Saturation",
    0xA40A : "Sharpness",
    0xA40B : "DeviceSettingDescription",
    0xA40C : "SubjectDistanceRange",
    0xA420 : "ImageUniqueID",
    0xA430 : "OwnerName",
    0xA431 : "SerialNumber",
    0xA432 : "LensInfo",
    0xA433 : "LensMake",
    0xA434 : "LensModel",
    0xA435 : "LensSerialNumber",
    0xA480 : "GDALMetadata",
    0xA481 : "GDALNoData",
    0xA500 : "Gamma",
    0xAFC0 : "ExpandSoftware",
    0xAFC1 : "ExpandLens",
    0xAFC2 : "ExpandFilm",
    0xAFC3 : "ExpandFilterLens",
    0xAFC4 : "ExpandScanner",
    0xAFC5 : "ExpandFlashLamp",
    0xBC01 : "PixelFormat",
    0xBC02 : "Transformation",
    0xBC03 : "Uncompressed",
    0xBC04 : "ImageType",
    0xBC80 : "ImageWidth",
    0xBC81 : "ImageHeight",
    0xBC82 : "WidthResolution",
    0xBC83 : "HeightResolution",
    0xBCC0 : "ImageOffset",
    0xBCC1 : "ImageByteCount",
    0xBCC2 : "AlphaOffset",
    0xBCC3 : "AlphaByteCount",
    0xBCC4 : "ImageDataDiscard",
    0xBCC5 : "AlphaDataDiscard",
    0xC427 : "OceScanjobDesc",
    0xC428 : "OceApplicationSelector",
    0xC429 : "OceIDNumber",
    0xC42A : "OceImageLogic",
    0xC44F : "Annotations",
    0xC4A5 : "PrintIM",
    0xC580 : "USPTOOriginalContentType",
    0xC612 : "DNGVersion",
    0xC613 : "DNGBackwardVersion",
    0xC614 : "UniqueCameraModel",
    0xC615 : "LocalizedCameraModel",
    0xC616 : "CFAPlaneColor",
    0xC617 : "CFALayout",
    0xC618 : "LinearizationTable",
    0xC619 : "BlackLevelRepeatDim",
    0xC61A : "BlackLevel",
    0xC61B : "BlackLevelDeltaH",
    0xC61C : "BlackLevelDeltaV",
    0xC61D : "WhiteLevel",
    0xC61E : "DefaultScale",
    0xC61F : "DefaultCropOrigin",
    0xC620 : "DefaultCropSize",
    0xC621 : "ColorMatrix1",
    0xC622 : "ColorMatrix2",
    0xC623 : "CameraCalibration1",
    0xC624 : "CameraCalibration2",
    0xC625 : "ReductionMatrix1",
    0xC626 : "ReductionMatrix2",
    0xC627 : "AnalogBalance",
    0xC628 : "AsShotNeutral",
    0xC629 : "AsShotWhiteXY",
    0xC62A : "BaselineExposure",
    0xC62B : "BaselineNoise",
    0xC62C : "BaselineSharpness",
    0xC62D : "BayerGreenSplit",
    0xC62E : "LinearResponseLimit",
    0xC62F : "CameraSerialNumber",
    0xC630 : "DNGLensInfo",
    0xC631 : "ChromaBlurRadius",
    0xC632 : "AntiAliasStrength",
    0xC633 : "ShadowScale",
    0xC634 : "DNGPrivateData",
    0xC635 : "MakerNoteSafety",
    0xC640 : "RawImageSegmentation",
    0xC65A : "CalibrationIlluminant1",
    0xC65B : "CalibrationIlluminant2",
    0xC65C : "BestQualityScale",
    0xC65D : "RawDataUniqueID",
    0xC660 : "AliasLayerMetadata",
    0xC68B : "OriginalRawFileName",
    0xC68C : "OriginalRawFileData",
    0xC68D : "ActiveArea",
    0xC68E : "MaskedAreas",
    0xC68F : "AsShotICCProfile",
    0xC690 : "AsShotPreProfileMatrix",
    0xC691 : "CurrentICCProfile",
    0xC692 : "CurrentPreProfileMatrix",
    0xC6BF : "ColorimetricReference",
    0xC6D2 : "PanasonicTitle",
    0xC6D3 : "PanasonicTitle2",
    0xC6F3 : "CameraCalibrationSig",
    0xC6F4 : "ProfileCalibrationSig",
    0xC6F5 : "ProfileIFD",
    0xC6F6 : "AsShotProfileName",
    0xC6F7 : "NoiseReductionApplied",
    0xC6F8 : "ProfileName",
    0xC6F9 : "ProfileHueSatMapDims",
    0xC6FA : "ProfileHueSatMapData1",
    0xC6FB : "ProfileHueSatMapData2",
    0xC6FC : "ProfileToneCurve",
    0xC6FD : "ProfileEmbedPolicy",
    0xC6FE : "ProfileCopyright",
    0xC714 : "ForwardMatrix1",
    0xC715 : "ForwardMatrix2",
    0xC716 : "PreviewApplicationName",
    0xC717 : "PreviewApplicationVersion",
    0xC718 : "PreviewSettingsName",
    0xC719 : "PreviewSettingsDigest",
    0xC71A : "PreviewColorSpace",
    0xC71B : "PreviewDateTime",
    0xC71C : "RawImageDigest",
    0xC71D : "OriginalRawFileDigest",
    0xC71E : "SubTileBlockSize",
    0xC71F : "RowInterleaveFactor",
    0xC725 : "ProfileLookTableDims",
    0xC726 : "ProfileLookTableData",
    0xC740 : "OpcodeList1",
    0xC741 : "OpcodeList2",
    0xC74E : "OpcodeList3",
    0xC761 : "NoiseProfile",
    0xC763 : "TimeCodes",
    0xC764 : "FrameRate",
    0xC772 : "TStop",
    0xC789 : "ReelName",
    0xC791 : "OriginalDefaultFinalSize",
    0xC792 : "OriginalBestQualitySize",
    0xC793 : "OriginalDefaultCropSize",
    0xC7A1 : "CameraLabel",
    0xC7A3 : "ProfileHueSatMapEncoding",
    0xC7A4 : "ProfileLookTableEncoding",
    0xC7A5 : "BaselineExposureOffset",
    0xC7A6 : "DefaultBlackRender",
    0xC7A7 : "NewRawImageDigest",
    0xC7A8 : "RawToPreviewGain",
    0xC7B5 : "DefaultUserCrop",
    0xEA1C : "Padding",
    0xEA1D : "OffsetSchema",
    0xFDE8 : "OwnerName",
    0xFDE9 : "SerialNumber",
    0xFDEA : "Lens",
    0xFE00 : "KDC_IFD",
    0xFE4C : "RawFile",
    0xFE4D : "Converter",
    0xFE4E : "WhiteBalance",
    0xFE51 : "Exposure",
    0xFE52 : "Shadows",
    0xFE53 : "Brightness",
    0xFE54 : "Contrast",
    0xFE55 : "Saturation",
    0xFE56 : "Sharpness",
    0xFE57 : "Smoothness",
    0xFE58 : "MoireFilter"

  },

  // GPS Tags
  gps : {

    0x0000 : 'GPSVersionID',
    0x0001 : 'GPSLatitudeRef',
    0x0002 : 'GPSLatitude',
    0x0003 : 'GPSLongitudeRef',
    0x0004 : 'GPSLongitude',
    0x0005 : 'GPSAltitudeRef',
    0x0006 : 'GPSAltitude',
    0x0007 : 'GPSTimeStamp',
    0x0008 : 'GPSSatellites',
    0x0009 : 'GPSStatus',
    0x000A : 'GPSMeasureMode',
    0x000B : 'GPSDOP',
    0x000C : 'GPSSpeedRef',
    0x000D : 'GPSSpeed',
    0x000E : 'GPSTrackRef',
    0x000F : 'GPSTrack',
    0x0010 : 'GPSImgDirectionRef',
    0x0011 : 'GPSImgDirection',
    0x0012 : 'GPSMapDatum',
    0x0013 : 'GPSDestLatitudeRef',
    0x0014 : 'GPSDestLatitude',
    0x0015 : 'GPSDestLongitudeRef',
    0x0016 : 'GPSDestLongitude',
    0x0017 : 'GPSDestBearingRef',
    0x0018 : 'GPSDestBearing',
    0x0019 : 'GPSDestDistanceRef',
    0x001A : 'GPSDestDistance',
    0x001B : 'GPSProcessingMethod',
    0x001C : 'GPSAreaInformation',
    0x001D : 'GPSDateStamp',
    0x001E : 'GPSDifferential',
    0x001F : 'GPSHPositioningError'

  }

};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(75);

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./agfa": 24,
	"./agfa.js": 24,
	"./epson": 25,
	"./epson.js": 25,
	"./fujifilm": 26,
	"./fujifilm.js": 26,
	"./olympus": 27,
	"./olympus.js": 27,
	"./panasonic": 28,
	"./panasonic.js": 28,
	"./sanyo": 29,
	"./sanyo.js": 29
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 77;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (buf) {
	if (!(buf && buf.length > 1)) {
		return null;
	}

	if (buf[0] === 0xFF && buf[1] === 0xD8 && buf[2] === 0xFF) {
		return {
			ext: 'jpg',
			mime: 'image/jpeg'
		};
	}

	if (buf[0] === 0x89 && buf[1] === 0x50 && buf[2] === 0x4E && buf[3] === 0x47) {
		return {
			ext: 'png',
			mime: 'image/png'
		};
	}

	if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {
		return {
			ext: 'gif',
			mime: 'image/gif'
		};
	}

	if (buf[8] === 0x57 && buf[9] === 0x45 && buf[10] === 0x42 && buf[11] === 0x50) {
		return {
			ext: 'webp',
			mime: 'image/webp'
		};
	}

	if (buf[0] === 0x46 && buf[1] === 0x4C && buf[2] === 0x49 && buf[3] === 0x46) {
		return {
			ext: 'flif',
			mime: 'image/flif'
		};
	}

	// needs to be before `tif` check
	if (((buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0) || (buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A)) && buf[8] === 0x43 && buf[9] === 0x52) {
		return {
			ext: 'cr2',
			mime: 'image/x-canon-cr2'
		};
	}

	if ((buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0) || (buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A)) {
		return {
			ext: 'tif',
			mime: 'image/tiff'
		};
	}

	if (buf[0] === 0x42 && buf[1] === 0x4D) {
		return {
			ext: 'bmp',
			mime: 'image/bmp'
		};
	}

	if (buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0xBC) {
		return {
			ext: 'jxr',
			mime: 'image/vnd.ms-photo'
		};
	}

	if (buf[0] === 0x38 && buf[1] === 0x42 && buf[2] === 0x50 && buf[3] === 0x53) {
		return {
			ext: 'psd',
			mime: 'image/vnd.adobe.photoshop'
		};
	}

	// needs to be before `zip` check
	if (buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x6D && buf[31] === 0x69 && buf[32] === 0x6D && buf[33] === 0x65 && buf[34] === 0x74 && buf[35] === 0x79 && buf[36] === 0x70 && buf[37] === 0x65 && buf[38] === 0x61 && buf[39] === 0x70 && buf[40] === 0x70 && buf[41] === 0x6C && buf[42] === 0x69 && buf[43] === 0x63 && buf[44] === 0x61 && buf[45] === 0x74 && buf[46] === 0x69 && buf[47] === 0x6F && buf[48] === 0x6E && buf[49] === 0x2F && buf[50] === 0x65 && buf[51] === 0x70 && buf[52] === 0x75 && buf[53] === 0x62 && buf[54] === 0x2B && buf[55] === 0x7A && buf[56] === 0x69 && buf[57] === 0x70) {
		return {
			ext: 'epub',
			mime: 'application/epub+zip'
		};
	}

	// needs to be before `zip` check
	// assumes signed .xpi from addons.mozilla.org
	if (buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x4D && buf[31] === 0x45 && buf[32] === 0x54 && buf[33] === 0x41 && buf[34] === 0x2D && buf[35] === 0x49 && buf[36] === 0x4E && buf[37] === 0x46 && buf[38] === 0x2F && buf[39] === 0x6D && buf[40] === 0x6F && buf[41] === 0x7A && buf[42] === 0x69 && buf[43] === 0x6C && buf[44] === 0x6C && buf[45] === 0x61 && buf[46] === 0x2E && buf[47] === 0x72 && buf[48] === 0x73 && buf[49] === 0x61) {
		return {
			ext: 'xpi',
			mime: 'application/x-xpinstall'
		};
	}

	if (buf[0] === 0x50 && buf[1] === 0x4B && (buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) && (buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)) {
		return {
			ext: 'zip',
			mime: 'application/zip'
		};
	}

	if (buf[257] === 0x75 && buf[258] === 0x73 && buf[259] === 0x74 && buf[260] === 0x61 && buf[261] === 0x72) {
		return {
			ext: 'tar',
			mime: 'application/x-tar'
		};
	}

	if (buf[0] === 0x52 && buf[1] === 0x61 && buf[2] === 0x72 && buf[3] === 0x21 && buf[4] === 0x1A && buf[5] === 0x7 && (buf[6] === 0x0 || buf[6] === 0x1)) {
		return {
			ext: 'rar',
			mime: 'application/x-rar-compressed'
		};
	}

	if (buf[0] === 0x1F && buf[1] === 0x8B && buf[2] === 0x8) {
		return {
			ext: 'gz',
			mime: 'application/gzip'
		};
	}

	if (buf[0] === 0x42 && buf[1] === 0x5A && buf[2] === 0x68) {
		return {
			ext: 'bz2',
			mime: 'application/x-bzip2'
		};
	}

	if (buf[0] === 0x37 && buf[1] === 0x7A && buf[2] === 0xBC && buf[3] === 0xAF && buf[4] === 0x27 && buf[5] === 0x1C) {
		return {
			ext: '7z',
			mime: 'application/x-7z-compressed'
		};
	}

	if (buf[0] === 0x78 && buf[1] === 0x01) {
		return {
			ext: 'dmg',
			mime: 'application/x-apple-diskimage'
		};
	}

	if (
		(buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && (buf[3] === 0x18 || buf[3] === 0x20) && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70) ||
		(buf[0] === 0x33 && buf[1] === 0x67 && buf[2] === 0x70 && buf[3] === 0x35) ||
		(buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 && buf[11] === 0x32 && buf[16] === 0x6D && buf[17] === 0x70 && buf[18] === 0x34 && buf[19] === 0x31 && buf[20] === 0x6D && buf[21] === 0x70 && buf[22] === 0x34 && buf[23] === 0x32 && buf[24] === 0x69 && buf[25] === 0x73 && buf[26] === 0x6F && buf[27] === 0x6D) ||
		(buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x69 && buf[9] === 0x73 && buf[10] === 0x6F && buf[11] === 0x6D) ||
		(buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1c && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 && buf[11] === 0x32 && buf[12] === 0x0 && buf[13] === 0x0 && buf[14] === 0x0 && buf[15] === 0x0)
	) {
		return {
			ext: 'mp4',
			mime: 'video/mp4'
		};
	}

	if ((buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D && buf[9] === 0x34 && buf[10] === 0x56)) {
		return {
			ext: 'm4v',
			mime: 'video/x-m4v'
		};
	}

	if (buf[0] === 0x4D && buf[1] === 0x54 && buf[2] === 0x68 && buf[3] === 0x64) {
		return {
			ext: 'mid',
			mime: 'audio/midi'
		};
	}

	// needs to be before the `webm` check
	if (buf[31] === 0x6D && buf[32] === 0x61 && buf[33] === 0x74 && buf[34] === 0x72 && buf[35] === 0x6f && buf[36] === 0x73 && buf[37] === 0x6B && buf[38] === 0x61) {
		return {
			ext: 'mkv',
			mime: 'video/x-matroska'
		};
	}

	if (buf[0] === 0x1A && buf[1] === 0x45 && buf[2] === 0xDF && buf[3] === 0xA3) {
		return {
			ext: 'webm',
			mime: 'video/webm'
		};
	}

	if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x14 && buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70) {
		return {
			ext: 'mov',
			mime: 'video/quicktime'
		};
	}

	if (buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x41 && buf[9] === 0x56 && buf[10] === 0x49) {
		return {
			ext: 'avi',
			mime: 'video/x-msvideo'
		};
	}

	if (buf[0] === 0x30 && buf[1] === 0x26 && buf[2] === 0xB2 && buf[3] === 0x75 && buf[4] === 0x8E && buf[5] === 0x66 && buf[6] === 0xCF && buf[7] === 0x11 && buf[8] === 0xA6 && buf[9] === 0xD9) {
		return {
			ext: 'wmv',
			mime: 'video/x-ms-wmv'
		};
	}

	if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x1 && buf[3].toString(16)[0] === 'b') {
		return {
			ext: 'mpg',
			mime: 'video/mpeg'
		};
	}

	if ((buf[0] === 0x49 && buf[1] === 0x44 && buf[2] === 0x33) || (buf[0] === 0xFF && buf[1] === 0xfb)) {
		return {
			ext: 'mp3',
			mime: 'audio/mpeg'
		};
	}

	if ((buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D && buf[9] === 0x34 && buf[10] === 0x41) || (buf[0] === 0x4D && buf[1] === 0x34 && buf[2] === 0x41 && buf[3] === 0x20)) {
		return {
			ext: 'm4a',
			mime: 'audio/m4a'
		};
	}

	// needs to be before `ogg` check
	if (buf[28] === 0x4F && buf[29] === 0x70 && buf[30] === 0x75 && buf[31] === 0x73 && buf[32] === 0x48 && buf[33] === 0x65 && buf[34] === 0x61 && buf[35] === 0x64) {
		return {
			ext: 'opus',
			mime: 'audio/opus'
		};
	}

	if (buf[0] === 0x4F && buf[1] === 0x67 && buf[2] === 0x67 && buf[3] === 0x53) {
		return {
			ext: 'ogg',
			mime: 'audio/ogg'
		};
	}

	if (buf[0] === 0x66 && buf[1] === 0x4C && buf[2] === 0x61 && buf[3] === 0x43) {
		return {
			ext: 'flac',
			mime: 'audio/x-flac'
		};
	}

	if (buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x57 && buf[9] === 0x41 && buf[10] === 0x56 && buf[11] === 0x45) {
		return {
			ext: 'wav',
			mime: 'audio/x-wav'
		};
	}

	if (buf[0] === 0x23 && buf[1] === 0x21 && buf[2] === 0x41 && buf[3] === 0x4D && buf[4] === 0x52 && buf[5] === 0x0A) {
		return {
			ext: 'amr',
			mime: 'audio/amr'
		};
	}

	if (buf[0] === 0x25 && buf[1] === 0x50 && buf[2] === 0x44 && buf[3] === 0x46) {
		return {
			ext: 'pdf',
			mime: 'application/pdf'
		};
	}

	if (buf[0] === 0x4D && buf[1] === 0x5A) {
		return {
			ext: 'exe',
			mime: 'application/x-msdownload'
		};
	}

	if ((buf[0] === 0x43 || buf[0] === 0x46) && buf[1] === 0x57 && buf[2] === 0x53) {
		return {
			ext: 'swf',
			mime: 'application/x-shockwave-flash'
		};
	}

	if (buf[0] === 0x7B && buf[1] === 0x5C && buf[2] === 0x72 && buf[3] === 0x74 && buf[4] === 0x66) {
		return {
			ext: 'rtf',
			mime: 'application/rtf'
		};
	}

	if (
		(buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x46) &&
		(
			(buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00) ||
			(buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)
		)
	) {
		return {
			ext: 'woff',
			mime: 'application/font-woff'
		};
	}

	if (
		(buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x32) &&
		(
			(buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00) ||
			(buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)
		)
	) {
		return {
			ext: 'woff2',
			mime: 'application/font-woff'
		};
	}

	if (
		(buf[34] === 0x4C && buf[35] === 0x50) &&
		(
			(buf[8] === 0x00 && buf[9] === 0x00 && buf[10] === 0x01) ||
			(buf[8] === 0x01 && buf[9] === 0x00 && buf[10] === 0x02) ||
			(buf[8] === 0x02 && buf[9] === 0x00 && buf[10] === 0x02)
		)
	) {
		return {
			ext: 'eot',
			mime: 'application/octet-stream'
		};
	}

	if (buf[0] === 0x00 && buf[1] === 0x01 && buf[2] === 0x00 && buf[3] === 0x00 && buf[4] === 0x00) {
		return {
			ext: 'ttf',
			mime: 'application/font-sfnt'
		};
	}

	if (buf[0] === 0x4F && buf[1] === 0x54 && buf[2] === 0x54 && buf[3] === 0x4F && buf[4] === 0x00) {
		return {
			ext: 'otf',
			mime: 'application/font-sfnt'
		};
	}

	if (buf[0] === 0x00 && buf[1] === 0x00 && buf[2] === 0x01 && buf[3] === 0x00) {
		return {
			ext: 'ico',
			mime: 'image/x-icon'
		};
	}

	if (buf[0] === 0x46 && buf[1] === 0x4C && buf[2] === 0x56 && buf[3] === 0x01) {
		return {
			ext: 'flv',
			mime: 'video/x-flv'
		};
	}

	if (buf[0] === 0x25 && buf[1] === 0x21) {
		return {
			ext: 'ps',
			mime: 'application/postscript'
		};
	}

	if (buf[0] === 0xFD && buf[1] === 0x37 && buf[2] === 0x7A && buf[3] === 0x58 && buf[4] === 0x5A && buf[5] === 0x00) {
		return {
			ext: 'xz',
			mime: 'application/x-xz'
		};
	}

	if (buf[0] === 0x53 && buf[1] === 0x51 && buf[2] === 0x4C && buf[3] === 0x69) {
		return {
			ext: 'sqlite',
			mime: 'application/x-sqlite3'
		};
	}

	if (buf[0] === 0x4E && buf[1] === 0x45 && buf[2] === 0x53 && buf[3] === 0x1A) {
		return {
			ext: 'nes',
			mime: 'application/x-nintendo-nes-rom'
		};
	}

	if (buf[0] === 0x43 && buf[1] === 0x72 && buf[2] === 0x32 && buf[3] === 0x34) {
		return {
			ext: 'crx',
			mime: 'application/x-google-chrome-extension'
		};
	}

	if (
		(buf[0] === 0x4D && buf[1] === 0x53 && buf[2] === 0x43 && buf[3] === 0x46) ||
		(buf[0] === 0x49 && buf[1] === 0x53 && buf[2] === 0x63 && buf[3] === 0x28)
	) {
		return {
			ext: 'cab',
			mime: 'application/vnd.ms-cab-compressed'
		};
	}

	// needs to be before `ar` check
	if (buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 && buf[6] === 0x3E && buf[7] === 0x0A && buf[8] === 0x64 && buf[9] === 0x65 && buf[10] === 0x62 && buf[11] === 0x69 && buf[12] === 0x61 && buf[13] === 0x6E && buf[14] === 0x2D && buf[15] === 0x62 && buf[16] === 0x69 && buf[17] === 0x6E && buf[18] === 0x61 && buf[19] === 0x72 && buf[20] === 0x79) {
		return {
			ext: 'deb',
			mime: 'application/x-deb'
		};
	}

	if (buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 && buf[6] === 0x3E) {
		return {
			ext: 'ar',
			mime: 'application/x-unix-archive'
		};
	}

	if (buf[0] === 0xED && buf[1] === 0xAB && buf[2] === 0xEE && buf[3] === 0xDB) {
		return {
			ext: 'rpm',
			mime: 'application/x-rpm'
		};
	}

	if (
		(buf[0] === 0x1F && buf[1] === 0xA0) ||
		(buf[0] === 0x1F && buf[1] === 0x9D)
	) {
		return {
			ext: 'Z',
			mime: 'application/x-compress'
		};
	}

	if (buf[0] === 0x4C && buf[1] === 0x5A && buf[2] === 0x49 && buf[3] === 0x50) {
		return {
			ext: 'lz',
			mime: 'application/x-lzip'
		};
	}

	if (buf[0] === 0xD0 && buf[1] === 0xCF && buf[2] === 0x11 && buf[3] === 0xE0 && buf[4] === 0xA1 && buf[5] === 0xB1 && buf[6] === 0x1A && buf[7] === 0xE1) {
		return {
			ext: 'msi',
			mime: 'application/x-msi'
		};
	}

	return null;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =  false ? require('./lib-cov/fluent-ffmpeg') : __webpack_require__(82);


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var fs = __webpack_require__(2);
var path = __webpack_require__(0);
var async = __webpack_require__(14);
var utils = __webpack_require__(6);

/*
 *! Capability helpers
 */

var avCodecRegexp = /^\s*([D ])([E ])([VAS])([S ])([D ])([T ]) ([^ ]+) +(.*)$/;
var ffCodecRegexp = /^\s*([D\.])([E\.])([VAS])([I\.])([L\.])([S\.]) ([^ ]+) +(.*)$/;
var ffEncodersRegexp = /\(encoders:([^\)]+)\)/;
var ffDecodersRegexp = /\(decoders:([^\)]+)\)/;
var encodersRegexp = /^\s*([VAS\.])([F\.])([S\.])([X\.])([B\.])([D\.]) ([^ ]+) +(.*)$/;
var formatRegexp = /^\s*([D ])([E ]) ([^ ]+) +(.*)$/;
var lineBreakRegexp = /\r\n|\r|\n/;
var filterRegexp = /^(?: [T\.][S\.][C\.] )?([^ ]+) +(AA?|VV?|\|)->(AA?|VV?|\|) +(.*)$/;

var cache = {};

module.exports = function(proto) {
  /**
   * Manually define the ffmpeg binary full path.
   *
   * @method FfmpegCommand#setFfmpegPath
   *
   * @param {String} ffmpegPath The full path to the ffmpeg binary.
   * @return FfmpegCommand
   */
  proto.setFfmpegPath = function(ffmpegPath) {
    cache.ffmpegPath = ffmpegPath;
    return this;
  };

  /**
   * Manually define the ffprobe binary full path.
   *
   * @method FfmpegCommand#setFfprobePath
   *
   * @param {String} ffprobePath The full path to the ffprobe binary.
   * @return FfmpegCommand
   */
  proto.setFfprobePath = function(ffprobePath) {
    cache.ffprobePath = ffprobePath;
    return this;
  };

  /**
   * Manually define the flvtool2/flvmeta binary full path.
   *
   * @method FfmpegCommand#setFlvtoolPath
   *
   * @param {String} flvtool The full path to the flvtool2 or flvmeta binary.
   * @return FfmpegCommand
   */
  proto.setFlvtoolPath = function(flvtool) {
    cache.flvtoolPath = flvtool;
    return this;
  };

  /**
   * Forget executable paths
   *
   * (only used for testing purposes)
   *
   * @method FfmpegCommand#_forgetPaths
   * @private
   */
  proto._forgetPaths = function() {
    delete cache.ffmpegPath;
    delete cache.ffprobePath;
    delete cache.flvtoolPath;
  };

  /**
   * Check for ffmpeg availability
   *
   * If the FFMPEG_PATH environment variable is set, try to use it.
   * If it is unset or incorrect, try to find ffmpeg in the PATH instead.
   *
   * @method FfmpegCommand#_getFfmpegPath
   * @param {Function} callback callback with signature (err, path)
   * @private
   */
  proto._getFfmpegPath = function(callback) {
    if ('ffmpegPath' in cache) {
      return callback(null, cache.ffmpegPath);
    }

    async.waterfall([
      // Try FFMPEG_PATH
      function(cb) {
        if (process.env.FFMPEG_PATH) {
          fs.exists(process.env.FFMPEG_PATH, function(exists) {
            if (exists) {
              cb(null, process.env.FFMPEG_PATH);
            } else {
              cb(null, '');
            }
          });
        } else {
          cb(null, '');
        }
      },

      // Search in the PATH
      function(ffmpeg, cb) {
        if (ffmpeg.length) {
          return cb(null, ffmpeg);
        }

        utils.which('ffmpeg', function(err, ffmpeg) {
          cb(err, ffmpeg);
        });
      }
    ], function(err, ffmpeg) {
      if (err) {
        callback(err);
      } else {
        callback(null, cache.ffmpegPath = (ffmpeg || ''));
      }
    });
  };


  /**
   * Check for ffprobe availability
   *
   * If the FFPROBE_PATH environment variable is set, try to use it.
   * If it is unset or incorrect, try to find ffprobe in the PATH instead.
   * If this still fails, try to find ffprobe in the same directory as ffmpeg.
   *
   * @method FfmpegCommand#_getFfprobePath
   * @param {Function} callback callback with signature (err, path)
   * @private
   */
  proto._getFfprobePath = function(callback) {
    var self = this;

    if ('ffprobePath' in cache) {
      return callback(null, cache.ffprobePath);
    }

    async.waterfall([
      // Try FFPROBE_PATH
      function(cb) {
        if (process.env.FFPROBE_PATH) {
          fs.exists(process.env.FFPROBE_PATH, function(exists) {
            cb(null, exists ? process.env.FFPROBE_PATH : '');
          });
        } else {
          cb(null, '');
        }
      },

      // Search in the PATH
      function(ffprobe, cb) {
        if (ffprobe.length) {
          return cb(null, ffprobe);
        }

        utils.which('ffprobe', function(err, ffprobe) {
          cb(err, ffprobe);
        });
      },

      // Search in the same directory as ffmpeg
      function(ffprobe, cb) {
        if (ffprobe.length) {
          return cb(null, ffprobe);
        }

        self._getFfmpegPath(function(err, ffmpeg) {
          if (err) {
            cb(err);
          } else if (ffmpeg.length) {
            var name = utils.isWindows ? 'ffprobe.exe' : 'ffprobe';
            var ffprobe = path.join(path.dirname(ffmpeg), name);
            fs.exists(ffprobe, function(exists) {
              cb(null, exists ? ffprobe : '');
            });
          } else {
            cb(null, '');
          }
        });
      }
    ], function(err, ffprobe) {
      if (err) {
        callback(err);
      } else {
        callback(null, cache.ffprobePath = (ffprobe || ''));
      }
    });
  };


  /**
   * Check for flvtool2/flvmeta availability
   *
   * If the FLVTOOL2_PATH or FLVMETA_PATH environment variable are set, try to use them.
   * If both are either unset or incorrect, try to find flvtool2 or flvmeta in the PATH instead.
   *
   * @method FfmpegCommand#_getFlvtoolPath
   * @param {Function} callback callback with signature (err, path)
   * @private
   */
   proto._getFlvtoolPath = function(callback) {
    if ('flvtoolPath' in cache) {
      return callback(null, cache.flvtoolPath);
    }

    async.waterfall([
      // Try FLVMETA_PATH
      function(cb) {
        if (process.env.FLVMETA_PATH) {
          fs.exists(process.env.FLVMETA_PATH, function(exists) {
            cb(null, exists ? process.env.FLVMETA_PATH : '');
          });
        } else {
          cb(null, '');
        }
      },

      // Try FLVTOOL2_PATH
      function(flvtool, cb) {
        if (flvtool.length) {
          return cb(null, flvtool);
        }

        if (process.env.FLVTOOL2_PATH) {
          fs.exists(process.env.FLVTOOL2_PATH, function(exists) {
            cb(null, exists ? process.env.FLVTOOL2_PATH : '');
          });
        } else {
          cb(null, '');
        }
      },

      // Search for flvmeta in the PATH
      function(flvtool, cb) {
        if (flvtool.length) {
          return cb(null, flvtool);
        }

        utils.which('flvmeta', function(err, flvmeta) {
          cb(err, flvmeta);
        });
      },

      // Search for flvtool2 in the PATH
      function(flvtool, cb) {
        if (flvtool.length) {
          return cb(null, flvtool);
        }

        utils.which('flvtool2', function(err, flvtool2) {
          cb(err, flvtool2);
        });
      },
    ], function(err, flvtool) {
      if (err) {
        callback(err);
      } else {
        callback(null, cache.flvtoolPath = (flvtool || ''));
      }
    });
  };


  /**
   * A callback passed to {@link FfmpegCommand#availableFilters}.
   *
   * @callback FfmpegCommand~filterCallback
   * @param {Error|null} err error object or null if no error happened
   * @param {Object} filters filter object with filter names as keys and the following
   *   properties for each filter:
   * @param {String} filters.description filter description
   * @param {String} filters.input input type, one of 'audio', 'video' and 'none'
   * @param {Boolean} filters.multipleInputs whether the filter supports multiple inputs
   * @param {String} filters.output output type, one of 'audio', 'video' and 'none'
   * @param {Boolean} filters.multipleOutputs whether the filter supports multiple outputs
   */

  /**
   * Query ffmpeg for available filters
   *
   * @method FfmpegCommand#availableFilters
   * @category Capabilities
   * @aliases getAvailableFilters
   *
   * @param {FfmpegCommand~filterCallback} callback callback function
   */
  proto.availableFilters =
  proto.getAvailableFilters = function(callback) {
    if ('filters' in cache) {
      return callback(null, cache.filters);
    }

    this._spawnFfmpeg(['-filters'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {
      if (err) {
        return callback(err);
      }

      var stdout = stdoutRing.get();
      var lines = stdout.split('\n');
      var data = {};
      var types = { A: 'audio', V: 'video', '|': 'none' };

      lines.forEach(function(line) {
        var match = line.match(filterRegexp);
        if (match) {
          data[match[1]] = {
            description: match[4],
            input: types[match[2].charAt(0)],
            multipleInputs: match[2].length > 1,
            output: types[match[3].charAt(0)],
            multipleOutputs: match[3].length > 1
          };
        }
      });

      callback(null, cache.filters = data);
    });
  };


  /**
   * A callback passed to {@link FfmpegCommand#availableCodecs}.
   *
   * @callback FfmpegCommand~codecCallback
   * @param {Error|null} err error object or null if no error happened
   * @param {Object} codecs codec object with codec names as keys and the following
   *   properties for each codec (more properties may be available depending on the
   *   ffmpeg version used):
   * @param {String} codecs.description codec description
   * @param {Boolean} codecs.canDecode whether the codec is able to decode streams
   * @param {Boolean} codecs.canEncode whether the codec is able to encode streams
   */

  /**
   * Query ffmpeg for available codecs
   *
   * @method FfmpegCommand#availableCodecs
   * @category Capabilities
   * @aliases getAvailableCodecs
   *
   * @param {FfmpegCommand~codecCallback} callback callback function
   */
  proto.availableCodecs =
  proto.getAvailableCodecs = function(callback) {
    if ('codecs' in cache) {
      return callback(null, cache.codecs);
    }

    this._spawnFfmpeg(['-codecs'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {
      if (err) {
        return callback(err);
      }

      var stdout = stdoutRing.get();
      var lines = stdout.split(lineBreakRegexp);
      var data = {};

      lines.forEach(function(line) {
        var match = line.match(avCodecRegexp);
        if (match && match[7] !== '=') {
          data[match[7]] = {
            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],
            description: match[8],
            canDecode: match[1] === 'D',
            canEncode: match[2] === 'E',
            drawHorizBand: match[4] === 'S',
            directRendering: match[5] === 'D',
            weirdFrameTruncation: match[6] === 'T'
          };
        }

        match = line.match(ffCodecRegexp);
        if (match && match[7] !== '=') {
          var codecData = data[match[7]] = {
            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[3]],
            description: match[8],
            canDecode: match[1] === 'D',
            canEncode: match[2] === 'E',
            intraFrameOnly: match[4] === 'I',
            isLossy: match[5] === 'L',
            isLossless: match[6] === 'S'
          };

          var encoders = codecData.description.match(ffEncodersRegexp);
          encoders = encoders ? encoders[1].trim().split(' ') : [];

          var decoders = codecData.description.match(ffDecodersRegexp);
          decoders = decoders ? decoders[1].trim().split(' ') : [];

          if (encoders.length || decoders.length) {
            var coderData = {};
            utils.copy(codecData, coderData);
            delete coderData.canEncode;
            delete coderData.canDecode;

            encoders.forEach(function(name) {
              data[name] = {};
              utils.copy(coderData, data[name]);
              data[name].canEncode = true;
            });

            decoders.forEach(function(name) {
              if (name in data) {
                data[name].canDecode = true;
              } else {
                data[name] = {};
                utils.copy(coderData, data[name]);
                data[name].canDecode = true;
              }
            });
          }
        }
      });

      callback(null, cache.codecs = data);
    });
  };


  /**
   * A callback passed to {@link FfmpegCommand#availableEncoders}.
   *
   * @callback FfmpegCommand~encodersCallback
   * @param {Error|null} err error object or null if no error happened
   * @param {Object} encoders encoders object with encoder names as keys and the following
   *   properties for each encoder:
   * @param {String} encoders.description codec description
   * @param {Boolean} encoders.type "audio", "video" or "subtitle"
   * @param {Boolean} encoders.frameMT whether the encoder is able to do frame-level multithreading
   * @param {Boolean} encoders.sliceMT whether the encoder is able to do slice-level multithreading
   * @param {Boolean} encoders.experimental whether the encoder is experimental
   * @param {Boolean} encoders.drawHorizBand whether the encoder supports draw_horiz_band
   * @param {Boolean} encoders.directRendering whether the encoder supports direct encoding method 1
   */

  /**
   * Query ffmpeg for available encoders
   *
   * @method FfmpegCommand#availableEncoders
   * @category Capabilities
   * @aliases getAvailableEncoders
   *
   * @param {FfmpegCommand~encodersCallback} callback callback function
   */
  proto.availableEncoders =
  proto.getAvailableEncoders = function(callback) {
    if ('encoders' in cache) {
      return callback(null, cache.encoders);
    }

    this._spawnFfmpeg(['-encoders'], { captureStdout: true, stdoutLines: 0 }, function(err, stdoutRing) {
      if (err) {
        return callback(err);
      }

      var stdout = stdoutRing.get();
      var lines = stdout.split(lineBreakRegexp);
      var data = {};

      lines.forEach(function(line) {
        var match = line.match(encodersRegexp);
        if (match && match[7] !== '=') {
          data[match[7]] = {
            type: { 'V': 'video', 'A': 'audio', 'S': 'subtitle' }[match[1]],
            description: match[8],
            frameMT: match[2] === 'F',
            sliceMT: match[3] === 'S',
            experimental: match[4] === 'X',
            drawHorizBand: match[5] === 'B',
            directRendering: match[6] === 'D'
          };
        }
      });

      callback(null, cache.encoders = data);
    });
  };


  /**
   * A callback passed to {@link FfmpegCommand#availableFormats}.
   *
   * @callback FfmpegCommand~formatCallback
   * @param {Error|null} err error object or null if no error happened
   * @param {Object} formats format object with format names as keys and the following
   *   properties for each format:
   * @param {String} formats.description format description
   * @param {Boolean} formats.canDemux whether the format is able to demux streams from an input file
   * @param {Boolean} formats.canMux whether the format is able to mux streams into an output file
   */

  /**
   * Query ffmpeg for available formats
   *
   * @method FfmpegCommand#availableFormats
   * @category Capabilities
   * @aliases getAvailableFormats
   *
   * @param {FfmpegCommand~formatCallback} callback callback function
   */
  proto.availableFormats =
  proto.getAvailableFormats = function(callback) {
    if ('formats' in cache) {
      return callback(null, cache.formats);
    }

    // Run ffmpeg -formats
    this._spawnFfmpeg(['-formats'], { captureStdout: true, stdoutLines: 0 }, function (err, stdoutRing) {
      if (err) {
        return callback(err);
      }

      // Parse output
      var stdout = stdoutRing.get();
      var lines = stdout.split(lineBreakRegexp);
      var data = {};

      lines.forEach(function(line) {
        var match = line.match(formatRegexp);
        if (match) {
          match[3].split(',').forEach(function(format) {
            if (!(format in data)) {
              data[format] = {
                description: match[4],
                canDemux: false,
                canMux: false
              };
            }

            if (match[1] === 'D') {
              data[format].canDemux = true;
            }
            if (match[2] === 'E') {
              data[format].canMux = true;
            }
          });
        }
      });

      callback(null, cache.formats = data);
    });
  };


  /**
   * Check capabilities before executing a command
   *
   * Checks whether all used codecs and formats are indeed available
   *
   * @method FfmpegCommand#_checkCapabilities
   * @param {Function} callback callback with signature (err)
   * @private
   */
  proto._checkCapabilities = function(callback) {
    var self = this;
    async.waterfall([
      // Get available formats
      function(cb) {
        self.availableFormats(cb);
      },

      // Check whether specified formats are available
      function(formats, cb) {
        var unavailable;

        // Output format(s)
        unavailable = self._outputs
          .reduce(function(fmts, output) {
            var format = output.options.find('-f', 1);
            if (format) {
              if (!(format[0] in formats) || !(formats[format[0]].canMux)) {
                fmts.push(format);
              }
            }

            return fmts;
          }, []);

        if (unavailable.length === 1) {
          return cb(new Error('Output format ' + unavailable[0] + ' is not available'));
        } else if (unavailable.length > 1) {
          return cb(new Error('Output formats ' + unavailable.join(', ') + ' are not available'));
        }

        // Input format(s)
        unavailable = self._inputs
          .reduce(function(fmts, input) {
            var format = input.options.find('-f', 1);
            if (format) {
              if (!(format[0] in formats) || !(formats[format[0]].canDemux)) {
                fmts.push(format[0]);
              }
            }

            return fmts;
          }, []);

        if (unavailable.length === 1) {
          return cb(new Error('Input format ' + unavailable[0] + ' is not available'));
        } else if (unavailable.length > 1) {
          return cb(new Error('Input formats ' + unavailable.join(', ') + ' are not available'));
        }

        cb();
      },

      // Get available codecs
      function(cb) {
        self.availableEncoders(cb);
      },

      // Check whether specified codecs are available and add strict experimental options if needed
      function(encoders, cb) {
        var unavailable;

        // Audio codec(s)
        unavailable = self._outputs.reduce(function(cdcs, output) {
          var acodec = output.audio.find('-acodec', 1);
          if (acodec && acodec[0] !== 'copy') {
            if (!(acodec[0] in encoders) || encoders[acodec[0]].type !== 'audio') {
              cdcs.push(acodec[0]);
            }
          }

          return cdcs;
        }, []);

        if (unavailable.length === 1) {
          return cb(new Error('Audio codec ' + unavailable[0] + ' is not available'));
        } else if (unavailable.length > 1) {
          return cb(new Error('Audio codecs ' + unavailable.join(', ') + ' are not available'));
        }

        // Video codec(s)
        unavailable = self._outputs.reduce(function(cdcs, output) {
          var vcodec = output.video.find('-vcodec', 1);
          if (vcodec && vcodec[0] !== 'copy') {
            if (!(vcodec[0] in encoders) || encoders[vcodec[0]].type !== 'video') {
              cdcs.push(vcodec[0]);
            }
          }

          return cdcs;
        }, []);

        if (unavailable.length === 1) {
          return cb(new Error('Video codec ' + unavailable[0] + ' is not available'));
        } else if (unavailable.length > 1) {
          return cb(new Error('Video codecs ' + unavailable.join(', ') + ' are not available'));
        }

        cb();
      }
    ], callback);
  };
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true, laxcomma:true*/


var spawn = __webpack_require__(17).spawn;


function legacyTag(key) { return key.match(/^TAG:/); }
function legacyDisposition(key) { return key.match(/^DISPOSITION:/); }

function parseFfprobeOutput(out) {
  var lines = out.split(/\r\n|\r|\n/);

  lines = lines.filter(function (line) {
    return line.length > 0;
  });

  var data = {
    streams: [],
    format: {},
    chapters: []
  };

  function parseBlock(name) {
    var data = {};

    var line = lines.shift();
    while (typeof line !== 'undefined') {
      if (line.toLowerCase() == '[/'+name+']') {
        return data;
      } else if (line.match(/^\[/)) {
        line = lines.shift();
        continue;
      }

      var kv = line.match(/^([^=]+)=(.*)$/);
      if (kv) {
        if (!(kv[1].match(/^TAG:/)) && kv[2].match(/^[0-9]+(\.[0-9]+)?$/)) {
          data[kv[1]] = Number(kv[2]);
        } else {
          data[kv[1]] = kv[2];
        }
      }

      line = lines.shift();
    }

    return data;
  }

  var line = lines.shift();
  while (typeof line !== 'undefined') {
    if (line.match(/^\[stream/i)) {
      var stream = parseBlock('stream');
      data.streams.push(stream);
    } else if (line.match(/^\[chapter/i)) {
      var chapter = parseBlock('chapter');
      data.chapters.push(chapter);
    } else if (line.toLowerCase() === '[format]') {
      data.format = parseBlock('format');
    }

    line = lines.shift();
  }

  return data;
}



module.exports = function(proto) {
  /**
   * A callback passed to the {@link FfmpegCommand#ffprobe} method.
   *
   * @callback FfmpegCommand~ffprobeCallback
   *
   * @param {Error|null} err error object or null if no error happened
   * @param {Object} ffprobeData ffprobe output data; this object
   *   has the same format as what the following command returns:
   *
   *     `ffprobe -print_format json -show_streams -show_format INPUTFILE`
   * @param {Array} ffprobeData.streams stream information
   * @param {Object} ffprobeData.format format information
   */

  /**
   * Run ffprobe on last specified input
   *
   * @method FfmpegCommand#ffprobe
   * @category Metadata
   *
   * @param {?Number} [index] 0-based index of input to probe (defaults to last input)
   * @param {?String[]} [options] array of output options to return
   * @param {FfmpegCommand~ffprobeCallback} callback callback function
   *
   */
  proto.ffprobe = function() {
    var input, index = null, options = [], callback;

    // the last argument should be the callback
    var callback = arguments[arguments.length - 1];

    var ended = false
    function handleCallback(err, data) {
      if (!ended) {
        ended = true;
        callback(err, data);
      }
    };

    // map the arguments to the correct variable names
    switch (arguments.length) {
      case 3:
        index = arguments[0];
        options = arguments[1];
        break;
      case 2:
        if (typeof arguments[0] === 'number') {
          index = arguments[0];
        } else if (Array.isArray(arguments[0])) {
          options = arguments[0];
        }
        break;
    }


    if (index === null) {
      if (!this._currentInput) {
        return handleCallback(new Error('No input specified'));
      }

      input = this._currentInput;
    } else {
      input = this._inputs[index];

      if (!input) {
        return handleCallback(new Error('Invalid input index'));
      }
    }

    // Find ffprobe
    this._getFfprobePath(function(err, path) {
      if (err) {
        return handleCallback(err);
      } else if (!path) {
        return handleCallback(new Error('Cannot find ffprobe'));
      }

      var stdout = '';
      var stdoutClosed = false;
      var stderr = '';
      var stderrClosed = false;

      // Spawn ffprobe
      var src = input.isStream ? 'pipe:0' : input.source;
      var ffprobe = spawn(path, ['-show_streams', '-show_format'].concat(options, src));

      if (input.isStream) {
        // Skip errors on stdin. These get thrown when ffprobe is complete and
        // there seems to be no way hook in and close stdin before it throws.
        ffprobe.stdin.on('error', function(err) {
          if (['ECONNRESET', 'EPIPE'].indexOf(err.code) >= 0) { return; }
          handleCallback(err);
        });

        // Once ffprobe's input stream closes, we need no more data from the
        // input
        ffprobe.stdin.on('close', function() {
            input.source.pause();
            input.source.unpipe(ffprobe.stdin);
        });

        input.source.pipe(ffprobe.stdin);
      }

      ffprobe.on('error', callback);

      // Ensure we wait for captured streams to end before calling callback
      var exitError = null;
      function handleExit(err) {
        if (err) {
          exitError = err;
        }

        if (processExited && stdoutClosed && stderrClosed) {
          if (exitError) {
            if (stderr) {
              exitError.message += '\n' + stderr;
            }

            return handleCallback(exitError);
          }

          // Process output
          var data = parseFfprobeOutput(stdout);

          // Handle legacy output with "TAG:x" and "DISPOSITION:x" keys
          [data.format].concat(data.streams).forEach(function(target) {
            if (target) {
              var legacyTagKeys = Object.keys(target).filter(legacyTag);

              if (legacyTagKeys.length) {
                target.tags = target.tags || {};

                legacyTagKeys.forEach(function(tagKey) {
                  target.tags[tagKey.substr(4)] = target[tagKey];
                  delete target[tagKey];
                });
              }

              var legacyDispositionKeys = Object.keys(target).filter(legacyDisposition);

              if (legacyDispositionKeys.length) {
                target.disposition = target.disposition || {};

                legacyDispositionKeys.forEach(function(dispositionKey) {
                  target.disposition[dispositionKey.substr(12)] = target[dispositionKey];
                  delete target[dispositionKey];
                });
              }
            }
          });

          handleCallback(null, data);
        }
      }

      // Handle ffprobe exit
      var processExited = false;
      ffprobe.on('exit', function(code, signal) {
        processExited = true;

        if (code) {
          handleExit(new Error('ffprobe exited with code ' + code));
        } else if (signal) {
          handleExit(new Error('ffprobe was killed with signal ' + signal));
        } else {
          handleExit();
        }
      });

      // Handle stdout/stderr streams
      ffprobe.stdout.on('data', function(data) {
        stdout += data;
      });

      ffprobe.stdout.on('close', function() {
        stdoutClosed = true;
        handleExit();
      });

      ffprobe.stderr.on('data', function(data) {
        stderr += data;
      });

      ffprobe.stderr.on('close', function() {
        stderrClosed = true;
        handleExit();
      });
    });
  };
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {/*jshint node:true*/


var path = __webpack_require__(0);
var util = __webpack_require__(5);
var EventEmitter = __webpack_require__(148).EventEmitter;

var utils = __webpack_require__(6);
var ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];


/**
 * Create an ffmpeg command
 *
 * Can be called with or without the 'new' operator, and the 'input' parameter
 * may be specified as 'options.source' instead (or passed later with the
 * addInput method).
 *
 * @constructor
 * @param {String|ReadableStream} [input] input file path or readable stream
 * @param {Object} [options] command options
 * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods
 * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows
 * @param {Number} [options.priority=0] alias for `niceness`
 * @param {String} [options.presets="fluent-ffmpeg/lib/presets"] directory to load presets from
 * @param {String} [options.preset="fluent-ffmpeg/lib/presets"] alias for `presets`
 * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited
 * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds
 * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter
 */
function FfmpegCommand(input, options) {
  // Make 'new' optional
  if (!(this instanceof FfmpegCommand)) {
    return new FfmpegCommand(input, options);
  }

  EventEmitter.call(this);

  if (typeof input === 'object' && !('readable' in input)) {
    // Options object passed directly
    options = input;
  } else {
    // Input passed first
    options = options || {};
    options.source = input;
  }

  // Add input if present
  this._inputs = [];
  if (options.source) {
    this.input(options.source);
  }

  // Add target-less output for backwards compatibility
  this._outputs = [];
  this.output();

  // Create argument lists
  var self = this;
  ['_global', '_complexFilters'].forEach(function(prop) {
    self[prop] = utils.args();
  });

  // Set default option values
  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;
  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');
  options.niceness = options.niceness || options.priority || 0;

  // Save options
  this.options = options;

  // Setup logger
  this.logger = options.logger || {
    debug: function() {},
    info: function() {},
    warn: function() {},
    error: function() {}
  };
}
util.inherits(FfmpegCommand, EventEmitter);
module.exports = FfmpegCommand;


/**
 * Clone an ffmpeg command
 *
 * This method is useful when you want to process the same input multiple times.
 * It returns a new FfmpegCommand instance with the exact same options.
 *
 * All options set _after_ the clone() call will only be applied to the instance
 * it has been called on.
 *
 * @example
 *   var command = ffmpeg('/path/to/source.avi')
 *     .audioCodec('libfaac')
 *     .videoCodec('libx264')
 *     .format('mp4');
 *
 *   command.clone()
 *     .size('320x200')
 *     .save('/path/to/output-small.mp4');
 *
 *   command.clone()
 *     .size('640x400')
 *     .save('/path/to/output-medium.mp4');
 *
 *   command.save('/path/to/output-original-size.mp4');
 *
 * @method FfmpegCommand#clone
 * @return FfmpegCommand
 */
FfmpegCommand.prototype.clone = function() {
  var clone = new FfmpegCommand();
  var self = this;

  // Clone options and logger
  clone.options = this.options;
  clone.logger = this.logger;

  // Clone inputs
  clone._inputs = this._inputs.map(function(input) {
    return {
      source: input.source,
      options: input.options.clone()
    };
  });

  // Create first output
  if ('target' in this._outputs[0]) {
    // We have outputs set, don't clone them and create first output
    clone._outputs = [];
    clone.output();
  } else {
    // No outputs set, clone first output options
    clone._outputs = [
      clone._currentOutput = {
        flags: {}
      }
    ];

    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {
      clone._currentOutput[key] = self._currentOutput[key].clone();
    });

    if (this._currentOutput.sizeData) {
      clone._currentOutput.sizeData = {};
      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);
    }

    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);
  }

  // Clone argument lists
  ['_global', '_complexFilters'].forEach(function(prop) {
    clone[prop] = self[prop].clone();
  });

  return clone;
};


/* Add methods from options submodules */

__webpack_require__(86)(FfmpegCommand.prototype);
__webpack_require__(84)(FfmpegCommand.prototype);
__webpack_require__(89)(FfmpegCommand.prototype);
__webpack_require__(90)(FfmpegCommand.prototype);
__webpack_require__(88)(FfmpegCommand.prototype);
__webpack_require__(85)(FfmpegCommand.prototype);
__webpack_require__(87)(FfmpegCommand.prototype);


/* Add processor methods */

__webpack_require__(91)(FfmpegCommand.prototype);


/* Add capabilities methods */

__webpack_require__(80)(FfmpegCommand.prototype);

FfmpegCommand.setFfmpegPath = function(path) {
  (new FfmpegCommand()).setFfmpegPath(path);
};

FfmpegCommand.setFfprobePath = function(path) {
  (new FfmpegCommand()).setFfprobePath(path);
};

FfmpegCommand.setFlvtoolPath = function(path) {
  (new FfmpegCommand()).setFlvtoolPath(path);
};

FfmpegCommand.availableFilters =
FfmpegCommand.getAvailableFilters = function(callback) {
  (new FfmpegCommand()).availableFilters(callback);
};

FfmpegCommand.availableCodecs =
FfmpegCommand.getAvailableCodecs = function(callback) {
  (new FfmpegCommand()).availableCodecs(callback);
};

FfmpegCommand.availableFormats =
FfmpegCommand.getAvailableFormats = function(callback) {
  (new FfmpegCommand()).availableFormats(callback);
};

FfmpegCommand.availableEncoders =
FfmpegCommand.getAvailableEncoders = function(callback) {
  (new FfmpegCommand()).availableEncoders(callback);
};


/* Add ffprobe methods */

__webpack_require__(81)(FfmpegCommand.prototype);

FfmpegCommand.ffprobe = function(file) {
  var instance = new FfmpegCommand(file);
  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));
};

/* Add processing recipes */

__webpack_require__(92)(FfmpegCommand.prototype);

/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 83 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 83;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var utils = __webpack_require__(6);


/*
 *! Audio-related methods
 */

module.exports = function(proto) {
  /**
   * Disable audio in the output
   *
   * @method FfmpegCommand#noAudio
   * @category Audio
   * @aliases withNoAudio
   * @return FfmpegCommand
   */
  proto.withNoAudio =
  proto.noAudio = function() {
    this._currentOutput.audio.clear();
    this._currentOutput.audioFilters.clear();
    this._currentOutput.audio('-an');

    return this;
  };


  /**
   * Specify audio codec
   *
   * @method FfmpegCommand#audioCodec
   * @category Audio
   * @aliases withAudioCodec
   *
   * @param {String} codec audio codec name
   * @return FfmpegCommand
   */
  proto.withAudioCodec =
  proto.audioCodec = function(codec) {
    this._currentOutput.audio('-acodec', codec);

    return this;
  };


  /**
   * Specify audio bitrate
   *
   * @method FfmpegCommand#audioBitrate
   * @category Audio
   * @aliases withAudioBitrate
   *
   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)
   * @return FfmpegCommand
   */
  proto.withAudioBitrate =
  proto.audioBitrate = function(bitrate) {
    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));
    return this;
  };


  /**
   * Specify audio channel count
   *
   * @method FfmpegCommand#audioChannels
   * @category Audio
   * @aliases withAudioChannels
   *
   * @param {Number} channels channel count
   * @return FfmpegCommand
   */
  proto.withAudioChannels =
  proto.audioChannels = function(channels) {
    this._currentOutput.audio('-ac', channels);
    return this;
  };


  /**
   * Specify audio frequency
   *
   * @method FfmpegCommand#audioFrequency
   * @category Audio
   * @aliases withAudioFrequency
   *
   * @param {Number} freq audio frequency in Hz
   * @return FfmpegCommand
   */
  proto.withAudioFrequency =
  proto.audioFrequency = function(freq) {
    this._currentOutput.audio('-ar', freq);
    return this;
  };


  /**
   * Specify audio quality
   *
   * @method FfmpegCommand#audioQuality
   * @category Audio
   * @aliases withAudioQuality
   *
   * @param {Number} quality audio quality factor
   * @return FfmpegCommand
   */
  proto.withAudioQuality =
  proto.audioQuality = function(quality) {
    this._currentOutput.audio('-aq', quality);
    return this;
  };


  /**
   * Specify custom audio filter(s)
   *
   * Can be called both with one or many filters, or a filter array.
   *
   * @example
   * command.audioFilters('filter1');
   *
   * @example
   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');
   *
   * @example
   * command.audioFilters(['filter1', 'filter2']);
   *
   * @example
   * command.audioFilters([
   *   {
   *     filter: 'filter1'
   *   },
   *   {
   *     filter: 'filter2',
   *     options: 'param=value:param=value'
   *   }
   * ]);
   *
   * @example
   * command.audioFilters(
   *   {
   *     filter: 'filter1',
   *     options: ['value1', 'value2']
   *   },
   *   {
   *     filter: 'filter2',
   *     options: { param1: 'value1', param2: 'value2' }
   *   }
   * );
   *
   * @method FfmpegCommand#audioFilters
   * @aliases withAudioFilter,withAudioFilters,audioFilter
   * @category Audio
   *
   * @param {...String|String[]|Object[]} filters audio filter strings, string array or
   *   filter specification array, each with the following properties:
   * @param {String} filters.filter filter name
   * @param {String|String[]|Object} [filters.options] filter option string, array, or object
   * @return FfmpegCommand
   */
  proto.withAudioFilter =
  proto.withAudioFilters =
  proto.audioFilter =
  proto.audioFilters = function(filters) {
    if (arguments.length > 1) {
      filters = [].slice.call(arguments);
    }

    if (!Array.isArray(filters)) {
      filters = [filters];
    }

    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));
    return this;
  };
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var utils = __webpack_require__(6);


/*
 *! Custom options methods
 */

module.exports = function(proto) {
  /**
   * Add custom input option(s)
   *
   * When passing a single string or an array, each string containing two
   * words is split (eg. inputOptions('-option value') is supported) for
   * compatibility reasons.  This is not the case when passing more than
   * one argument.
   *
   * @example
   * command.inputOptions('option1');
   *
   * @example
   * command.inputOptions('option1', 'option2');
   *
   * @example
   * command.inputOptions(['option1', 'option2']);
   *
   * @method FfmpegCommand#inputOptions
   * @category Custom options
   * @aliases addInputOption,addInputOptions,withInputOption,withInputOptions,inputOption
   *
   * @param {...String} options option string(s) or string array
   * @return FfmpegCommand
   */
  proto.addInputOption =
  proto.addInputOptions =
  proto.withInputOption =
  proto.withInputOptions =
  proto.inputOption =
  proto.inputOptions = function(options) {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    var doSplit = true;

    if (arguments.length > 1) {
      options = [].slice.call(arguments);
      doSplit = false;
    }

    if (!Array.isArray(options)) {
      options = [options];
    }

    this._currentInput.options(options.reduce(function(options, option) {
      var split = String(option).split(' ');

      if (doSplit && split.length === 2) {
        options.push(split[0], split[1]);
      } else {
        options.push(option);
      }

      return options;
    }, []));
    return this;
  };


  /**
   * Add custom output option(s)
   *
   * @example
   * command.outputOptions('option1');
   *
   * @example
   * command.outputOptions('option1', 'option2');
   *
   * @example
   * command.outputOptions(['option1', 'option2']);
   *
   * @method FfmpegCommand#outputOptions
   * @category Custom options
   * @aliases addOutputOption,addOutputOptions,addOption,addOptions,withOutputOption,withOutputOptions,withOption,withOptions,outputOption
   *
   * @param {...String} options option string(s) or string array
   * @return FfmpegCommand
   */
  proto.addOutputOption =
  proto.addOutputOptions =
  proto.addOption =
  proto.addOptions =
  proto.withOutputOption =
  proto.withOutputOptions =
  proto.withOption =
  proto.withOptions =
  proto.outputOption =
  proto.outputOptions = function(options) {
    var doSplit = true;

    if (arguments.length > 1) {
      options = [].slice.call(arguments);
      doSplit = false;
    }

    if (!Array.isArray(options)) {
      options = [options];
    }

    this._currentOutput.options(options.reduce(function(options, option) {
      var split = String(option).split(' ');

      if (doSplit && split.length === 2) {
        options.push(split[0], split[1]);
      } else {
        options.push(option);
      }

      return options;
    }, []));
    return this;
  };


  /**
   * Specify a complex filtergraph
   *
   * Calling this method will override any previously set filtergraph, but you can set
   * as many filters as needed in one call.
   *
   * @example <caption>Overlay an image over a video (using a filtergraph string)</caption>
   *   ffmpeg()
   *     .input('video.avi')
   *     .input('image.png')
   *     .complexFilter('[0:v][1:v]overlay[out]', ['out']);
   *
   * @example <caption>Overlay an image over a video (using a filter array)</caption>
   *   ffmpeg()
   *     .input('video.avi')
   *     .input('image.png')
   *     .complexFilter([{
   *       filter: 'overlay',
   *       inputs: ['0:v', '1:v'],
   *       outputs: ['out']
   *     }], ['out']);
   *
   * @example <caption>Split video into RGB channels and output a 3x1 video with channels side to side</caption>
   *  ffmpeg()
   *    .input('video.avi')
   *    .complexFilter([
   *      // Duplicate video stream 3 times into streams a, b, and c
   *      { filter: 'split', options: '3', outputs: ['a', 'b', 'c'] },
   *
   *      // Create stream 'red' by cancelling green and blue channels from stream 'a'
   *      { filter: 'lutrgb', options: { g: 0, b: 0 }, inputs: 'a', outputs: 'red' },
   *
   *      // Create stream 'green' by cancelling red and blue channels from stream 'b'
   *      { filter: 'lutrgb', options: { r: 0, b: 0 }, inputs: 'b', outputs: 'green' },
   *
   *      // Create stream 'blue' by cancelling red and green channels from stream 'c'
   *      { filter: 'lutrgb', options: { r: 0, g: 0 }, inputs: 'c', outputs: 'blue' },
   *
   *      // Pad stream 'red' to 3x width, keeping the video on the left, and name output 'padded'
   *      { filter: 'pad', options: { w: 'iw*3', h: 'ih' }, inputs: 'red', outputs: 'padded' },
   *
   *      // Overlay 'green' onto 'padded', moving it to the center, and name output 'redgreen'
   *      { filter: 'overlay', options: { x: 'w', y: 0 }, inputs: ['padded', 'green'], outputs: 'redgreen'},
   *
   *      // Overlay 'blue' onto 'redgreen', moving it to the right
   *      { filter: 'overlay', options: { x: '2*w', y: 0 }, inputs: ['redgreen', 'blue']},
   *    ]);
   *
   * @method FfmpegCommand#complexFilter
   * @category Custom options
   * @aliases filterGraph
   *
   * @param {String|Array} spec filtergraph string or array of filter specification
   *   objects, each having the following properties:
   * @param {String} spec.filter filter name
   * @param {String|Array} [spec.inputs] (array of) input stream specifier(s) for the filter,
   *   defaults to ffmpeg automatically choosing the first unused matching streams
   * @param {String|Array} [spec.outputs] (array of) output stream specifier(s) for the filter,
   *   defaults to ffmpeg automatically assigning the output to the output file
   * @param {Object|String|Array} [spec.options] filter options, can be omitted to not set any options
   * @param {Array} [map] (array of) stream specifier(s) from the graph to include in
   *   ffmpeg output, defaults to ffmpeg automatically choosing the first matching streams.
   * @return FfmpegCommand
   */
  proto.filterGraph =
  proto.complexFilter = function(spec, map) {
    this._complexFilters.clear();

    if (!Array.isArray(spec)) {
      spec = [spec];
    }

    this._complexFilters('-filter_complex', utils.makeFilterStrings(spec).join(';'));

    if (Array.isArray(map)) {
      var self = this;
      map.forEach(function(streamSpec) {
        self._complexFilters('-map', streamSpec.replace(utils.streamRegexp, '[$1]'));
      });
    } else if (typeof map === 'string') {
      this._complexFilters('-map', map.replace(utils.streamRegexp, '[$1]'));
    }

    return this;
  };
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var utils = __webpack_require__(6);

/*
 *! Input-related methods
 */

module.exports = function(proto) {
  /**
   * Add an input to command
   *
   * Also switches "current input", that is the input that will be affected
   * by subsequent input-related methods.
   *
   * Note: only one stream input is supported for now.
   *
   * @method FfmpegCommand#input
   * @category Input
   * @aliases mergeAdd,addInput
   *
   * @param {String|Readable} source input file path or readable stream
   * @return FfmpegCommand
   */
  proto.mergeAdd =
  proto.addInput =
  proto.input = function(source) {
    var isFile = false;
    var isStream = false;

    if (typeof source !== 'string') {
      if (!('readable' in source) || !(source.readable)) {
        throw new Error('Invalid input');
      }

      var hasInputStream = this._inputs.some(function(input) {
        return input.isStream;
      });

      if (hasInputStream) {
        throw new Error('Only one input stream is supported');
      }

      isStream = true;
      source.pause();
    } else {
      var protocol = source.match(/^([a-z]{2,}):/i);
      isFile = !protocol || protocol[0] === 'file';
    }

    this._inputs.push(this._currentInput = {
      source: source,
      isFile: isFile,
      isStream: isStream,
      options: utils.args()
    });

    return this;
  };


  /**
   * Specify input format for the last specified input
   *
   * @method FfmpegCommand#inputFormat
   * @category Input
   * @aliases withInputFormat,fromFormat
   *
   * @param {String} format input format
   * @return FfmpegCommand
   */
  proto.withInputFormat =
  proto.inputFormat =
  proto.fromFormat = function(format) {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    this._currentInput.options('-f', format);
    return this;
  };


  /**
   * Specify input FPS for the last specified input
   * (only valid for raw video formats)
   *
   * @method FfmpegCommand#inputFps
   * @category Input
   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput
   *
   * @param {Number} fps input FPS
   * @return FfmpegCommand
   */
  proto.withInputFps =
  proto.withInputFPS =
  proto.withFpsInput =
  proto.withFPSInput =
  proto.inputFPS =
  proto.inputFps =
  proto.fpsInput =
  proto.FPSInput = function(fps) {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    this._currentInput.options('-r', fps);
    return this;
  };


  /**
   * Use native framerate for the last specified input
   *
   * @method FfmpegCommand#native
   * @category Input
   * @aliases nativeFramerate,withNativeFramerate
   *
   * @return FfmmegCommand
   */
  proto.nativeFramerate =
  proto.withNativeFramerate =
  proto.native = function() {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    this._currentInput.options('-re');
    return this;
  };


  /**
   * Specify input seek time for the last specified input
   *
   * @method FfmpegCommand#seekInput
   * @category Input
   * @aliases setStartTime,seekTo
   *
   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string
   * @return FfmpegCommand
   */
  proto.setStartTime =
  proto.seekInput = function(seek) {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    this._currentInput.options('-ss', seek);

    return this;
  };


  /**
   * Loop over the last specified input
   *
   * @method FfmpegCommand#loop
   * @category Input
   *
   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string
   * @return FfmpegCommand
   */
  proto.loop = function(duration) {
    if (!this._currentInput) {
      throw new Error('No input specified');
    }

    this._currentInput.options('-loop', '1');

    if (typeof duration !== 'undefined') {
      this.duration(duration);
    }

    return this;
  };
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var path = __webpack_require__(0);

/*
 *! Miscellaneous methods
 */

module.exports = function(proto) {
  /**
   * Use preset
   *
   * @method FfmpegCommand#preset
   * @category Miscellaneous
   * @aliases usingPreset
   *
   * @param {String|Function} preset preset name or preset function
   */
  proto.usingPreset =
  proto.preset = function(preset) {
    if (typeof preset === 'function') {
      preset(this);
    } else {
      try {
        var modulePath = path.join(this.options.presets, preset);
        var module = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());

        if (typeof module.load === 'function') {
          module.load(this);
        } else {
          throw new Error('preset ' + modulePath + ' has no load() function');
        }
      } catch (err) {
        throw new Error('preset ' + modulePath + ' could not be loaded: ' + err.message);
      }
    }

    return this;
  };
};


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var utils = __webpack_require__(6);


/*
 *! Output-related methods
 */

module.exports = function(proto) {
  /**
   * Add output
   *
   * @method FfmpegCommand#output
   * @category Output
   * @aliases addOutput
   *
   * @param {String|Writable} target target file path or writable stream
   * @param {Object} [pipeopts={}] pipe options (only applies to streams)
   * @return FfmpegCommand
   */
  proto.addOutput =
  proto.output = function(target, pipeopts) {
    var isFile = false;

    if (!target && this._currentOutput) {
      // No target is only allowed when called from constructor
      throw new Error('Invalid output');
    }

    if (target && typeof target !== 'string') {
      if (!('writable' in target) || !(target.writable)) {
        throw new Error('Invalid output');
      }
    } else if (typeof target === 'string') {
      var protocol = target.match(/^([a-z]{2,}):/i);
      isFile = !protocol || protocol[0] === 'file';
    }

    if (target && !('target' in this._currentOutput)) {
      // For backwards compatibility, set target for first output
      this._currentOutput.target = target;
      this._currentOutput.isFile = isFile;
      this._currentOutput.pipeopts = pipeopts || {};
    } else {
      if (target && typeof target !== 'string') {
        var hasOutputStream = this._outputs.some(function(output) {
          return typeof output.target !== 'string';
        });

        if (hasOutputStream) {
          throw new Error('Only one output stream is supported');
        }
      }

      this._outputs.push(this._currentOutput = {
        target: target,
        isFile: isFile,
        flags: {},
        pipeopts: pipeopts || {}
      });

      var self = this;
      ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {
        self._currentOutput[key] = utils.args();
      });

      if (!target) {
        // Call from constructor: remove target key
        delete this._currentOutput.target;
      }
    }

    return this;
  };


  /**
   * Specify output seek time
   *
   * @method FfmpegCommand#seek
   * @category Input
   * @aliases seekOutput
   *
   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string
   * @return FfmpegCommand
   */
  proto.seekOutput =
  proto.seek = function(seek) {
    this._currentOutput.options('-ss', seek);
    return this;
  };


  /**
   * Set output duration
   *
   * @method FfmpegCommand#duration
   * @category Output
   * @aliases withDuration,setDuration
   *
   * @param {String|Number} duration duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string
   * @return FfmpegCommand
   */
  proto.withDuration =
  proto.setDuration =
  proto.duration = function(duration) {
    this._currentOutput.options('-t', duration);
    return this;
  };


  /**
   * Set output format
   *
   * @method FfmpegCommand#format
   * @category Output
   * @aliases toFormat,withOutputFormat,outputFormat
   *
   * @param {String} format output format name
   * @return FfmpegCommand
   */
  proto.toFormat =
  proto.withOutputFormat =
  proto.outputFormat =
  proto.format = function(format) {
    this._currentOutput.options('-f', format);
    return this;
  };


  /**
   * Add stream mapping to output
   *
   * @method FfmpegCommand#map
   * @category Output
   *
   * @param {String} spec stream specification string, with optional square brackets
   * @return FfmpegCommand
   */
  proto.map = function(spec) {
    this._currentOutput.options('-map', spec.replace(utils.streamRegexp, '[$1]'));
    return this;
  };


  /**
   * Run flvtool2/flvmeta on output
   *
   * @method FfmpegCommand#flvmeta
   * @category Output
   * @aliases updateFlvMetadata
   *
   * @return FfmpegCommand
   */
  proto.updateFlvMetadata =
  proto.flvmeta = function() {
    this._currentOutput.flags.flvmeta = true;
    return this;
  };
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var utils = __webpack_require__(6);


/*
 *! Video-related methods
 */

module.exports = function(proto) {
  /**
   * Disable video in the output
   *
   * @method FfmpegCommand#noVideo
   * @category Video
   * @aliases withNoVideo
   *
   * @return FfmpegCommand
   */
  proto.withNoVideo =
  proto.noVideo = function() {
    this._currentOutput.video.clear();
    this._currentOutput.videoFilters.clear();
    this._currentOutput.video('-vn');

    return this;
  };


  /**
   * Specify video codec
   *
   * @method FfmpegCommand#videoCodec
   * @category Video
   * @aliases withVideoCodec
   *
   * @param {String} codec video codec name
   * @return FfmpegCommand
   */
  proto.withVideoCodec =
  proto.videoCodec = function(codec) {
    this._currentOutput.video('-vcodec', codec);
    return this;
  };


  /**
   * Specify video bitrate
   *
   * @method FfmpegCommand#videoBitrate
   * @category Video
   * @aliases withVideoBitrate
   *
   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)
   * @param {Boolean} [constant=false] enforce constant bitrate
   * @return FfmpegCommand
   */
  proto.withVideoBitrate =
  proto.videoBitrate = function(bitrate, constant) {
    bitrate = ('' + bitrate).replace(/k?$/, 'k');

    this._currentOutput.video('-b:v', bitrate);
    if (constant) {
      this._currentOutput.video(
        '-maxrate', bitrate,
        '-minrate', bitrate,
        '-bufsize', '3M'
      );
    }

    return this;
  };


  /**
   * Specify custom video filter(s)
   *
   * Can be called both with one or many filters, or a filter array.
   *
   * @example
   * command.videoFilters('filter1');
   *
   * @example
   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');
   *
   * @example
   * command.videoFilters(['filter1', 'filter2']);
   *
   * @example
   * command.videoFilters([
   *   {
   *     filter: 'filter1'
   *   },
   *   {
   *     filter: 'filter2',
   *     options: 'param=value:param=value'
   *   }
   * ]);
   *
   * @example
   * command.videoFilters(
   *   {
   *     filter: 'filter1',
   *     options: ['value1', 'value2']
   *   },
   *   {
   *     filter: 'filter2',
   *     options: { param1: 'value1', param2: 'value2' }
   *   }
   * );
   *
   * @method FfmpegCommand#videoFilters
   * @category Video
   * @aliases withVideoFilter,withVideoFilters,videoFilter
   *
   * @param {...String|String[]|Object[]} filters video filter strings, string array or
   *   filter specification array, each with the following properties:
   * @param {String} filters.filter filter name
   * @param {String|String[]|Object} [filters.options] filter option string, array, or object
   * @return FfmpegCommand
   */
  proto.withVideoFilter =
  proto.withVideoFilters =
  proto.videoFilter =
  proto.videoFilters = function(filters) {
    if (arguments.length > 1) {
      filters = [].slice.call(arguments);
    }

    if (!Array.isArray(filters)) {
      filters = [filters];
    }

    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));

    return this;
  };


  /**
   * Specify output FPS
   *
   * @method FfmpegCommand#fps
   * @category Video
   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS
   *
   * @param {Number} fps output FPS
   * @return FfmpegCommand
   */
  proto.withOutputFps =
  proto.withOutputFPS =
  proto.withFpsOutput =
  proto.withFPSOutput =
  proto.withFps =
  proto.withFPS =
  proto.outputFPS =
  proto.outputFps =
  proto.fpsOutput =
  proto.FPSOutput =
  proto.fps =
  proto.FPS = function(fps) {
    this._currentOutput.video('-r', fps);
    return this;
  };


  /**
   * Only transcode a certain number of frames
   *
   * @method FfmpegCommand#frames
   * @category Video
   * @aliases takeFrames,withFrames
   *
   * @param {Number} frames frame count
   * @return FfmpegCommand
   */
  proto.takeFrames =
  proto.withFrames =
  proto.frames = function(frames) {
    this._currentOutput.video('-vframes', frames);
    return this;
  };
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


/*
 *! Size helpers
 */


/**
 * Return filters to pad video to width*height,
 *
 * @param {Number} width output width
 * @param {Number} height output height
 * @param {Number} aspect video aspect ratio (without padding)
 * @param {Number} color padding color
 * @return scale/pad filters
 * @private
 */
function getScalePadFilters(width, height, aspect, color) {
  /*
    let a be the input aspect ratio, A be the requested aspect ratio

    if a > A, padding is done on top and bottom
    if a < A, padding is done on left and right
   */

  return [
    /*
      In both cases, we first have to scale the input to match the requested size.
      When using computed width/height, we truncate them to multiples of 2
     */
    {
      filter: 'scale',
      options: {
        w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',
        h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'
      }
    },

    /*
      Then we pad the scaled input to match the target size
      (here iw and ih refer to the padding input, i.e the scaled output)
     */

    {
      filter: 'pad',
      options: {
        w: width,
        h: height,
        x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',
        y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',
        color: color
      }
    }
  ];
}


/**
 * Recompute size filters
 *
 * @param {Object} output
 * @param {String} key newly-added parameter name ('size', 'aspect' or 'pad')
 * @param {String} value newly-added parameter value
 * @return filter string array
 * @private
 */
function createSizeFilters(output, key, value) {
  // Store parameters
  var data = output.sizeData = output.sizeData || {};
  data[key] = value;

  if (!('size' in data)) {
    // No size requested, keep original size
    return [];
  }

  // Try to match the different size string formats
  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);
  var fixedWidth = data.size.match(/([0-9]+)x\?/);
  var fixedHeight = data.size.match(/\?x([0-9]+)/);
  var percentRatio = data.size.match(/\b([0-9]{1,3})%/);
  var width, height, aspect;

  if (percentRatio) {
    var ratio = Number(percentRatio[1]) / 100;
    return [{
      filter: 'scale',
      options: {
        w: 'trunc(iw*' + ratio + '/2)*2',
        h: 'trunc(ih*' + ratio + '/2)*2'
      }
    }];
  } else if (fixedSize) {
    // Round target size to multiples of 2
    width = Math.round(Number(fixedSize[1]) / 2) * 2;
    height = Math.round(Number(fixedSize[2]) / 2) * 2;

    aspect = width / height;

    if (data.pad) {
      return getScalePadFilters(width, height, aspect, data.pad);
    } else {
      // No autopad requested, rescale to target size
      return [{ filter: 'scale', options: { w: width, h: height }}];
    }
  } else if (fixedWidth || fixedHeight) {
    if ('aspect' in data) {
      // Specified aspect ratio
      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);
      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);

      // Round to multiples of 2
      width = Math.round(width / 2) * 2;
      height = Math.round(height / 2) * 2;

      if (data.pad) {
        return getScalePadFilters(width, height, data.aspect, data.pad);
      } else {
        // No autopad requested, rescale to target size
        return [{ filter: 'scale', options: { w: width, h: height }}];
      }
    } else {
      // Keep input aspect ratio

      if (fixedWidth) {
        return [{
          filter: 'scale',
          options: {
            w: Math.round(Number(fixedWidth[1]) / 2) * 2,
            h: 'trunc(ow/a/2)*2'
          }
        }];
      } else {
        return [{
          filter: 'scale',
          options: {
            w: 'trunc(oh*a/2)*2',
            h: Math.round(Number(fixedHeight[1]) / 2) * 2
          }
        }];
      }
    }
  } else {
    throw new Error('Invalid size specified: ' + data.size);
  }
}


/*
 *! Video size-related methods
 */

module.exports = function(proto) {
  /**
   * Keep display aspect ratio
   *
   * This method is useful when converting an input with non-square pixels to an output format
   * that does not support non-square pixels.  It rescales the input so that the display aspect
   * ratio is the same.
   *
   * @method FfmpegCommand#keepDAR
   * @category Video size
   * @aliases keepPixelAspect,keepDisplayAspect,keepDisplayAspectRatio
   *
   * @return FfmpegCommand
   */
  proto.keepPixelAspect = // Only for compatibility, this is not about keeping _pixel_ aspect ratio
  proto.keepDisplayAspect =
  proto.keepDisplayAspectRatio =
  proto.keepDAR = function() {
    return this.videoFilters([
      {
        filter: 'scale',
        options: {
          w: 'if(gt(sar,1),iw*sar,iw)',
          h: 'if(lt(sar,1),ih/sar,ih)'
        }
      },
      {
        filter: 'setsar',
        options: '1'
      }
    ]);
  };


  /**
   * Set output size
   *
   * The 'size' parameter can have one of 4 forms:
   * - 'X%': rescale to xx % of the original size
   * - 'WxH': specify width and height
   * - 'Wx?': specify width and compute height from input aspect ratio
   * - '?xH': specify height and compute width from input aspect ratio
   *
   * Note: both dimensions will be truncated to multiples of 2.
   *
   * @method FfmpegCommand#size
   * @category Video size
   * @aliases withSize,setSize
   *
   * @param {String} size size string, eg. '33%', '320x240', '320x?', '?x240'
   * @return FfmpegCommand
   */
  proto.withSize =
  proto.setSize =
  proto.size = function(size) {
    var filters = createSizeFilters(this._currentOutput, 'size', size);

    this._currentOutput.sizeFilters.clear();
    this._currentOutput.sizeFilters(filters);

    return this;
  };


  /**
   * Set output aspect ratio
   *
   * @method FfmpegCommand#aspect
   * @category Video size
   * @aliases withAspect,withAspectRatio,setAspect,setAspectRatio,aspectRatio
   *
   * @param {String|Number} aspect aspect ratio (number or 'X:Y' string)
   * @return FfmpegCommand
   */
  proto.withAspect =
  proto.withAspectRatio =
  proto.setAspect =
  proto.setAspectRatio =
  proto.aspect =
  proto.aspectRatio = function(aspect) {
    var a = Number(aspect);
    if (isNaN(a)) {
      var match = aspect.match(/^(\d+):(\d+)$/);
      if (match) {
        a = Number(match[1]) / Number(match[2]);
      } else {
        throw new Error('Invalid aspect ratio: ' + aspect);
      }
    }

    var filters = createSizeFilters(this._currentOutput, 'aspect', a);

    this._currentOutput.sizeFilters.clear();
    this._currentOutput.sizeFilters(filters);

    return this;
  };


  /**
   * Enable auto-padding the output
   *
   * @method FfmpegCommand#autopad
   * @category Video size
   * @aliases applyAutopadding,applyAutoPadding,applyAutopad,applyAutoPad,withAutopadding,withAutoPadding,withAutopad,withAutoPad,autoPad
   *
   * @param {Boolean} [pad=true] enable/disable auto-padding
   * @param {String} [color='black'] pad color
   */
  proto.applyAutopadding =
  proto.applyAutoPadding =
  proto.applyAutopad =
  proto.applyAutoPad =
  proto.withAutopadding =
  proto.withAutoPadding =
  proto.withAutopad =
  proto.withAutoPad =
  proto.autoPad =
  proto.autopad = function(pad, color) {
    // Allow autopad(color)
    if (typeof pad === 'string') {
      color = pad;
      pad = true;
    }

    // Allow autopad() and autopad(undefined, color)
    if (typeof pad === 'undefined') {
      pad = true;
    }

    var filters = createSizeFilters(this._currentOutput, 'pad', pad ? color || 'black' : false);

    this._currentOutput.sizeFilters.clear();
    this._currentOutput.sizeFilters(filters);

    return this;
  };
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var spawn = __webpack_require__(17).spawn;
var path = __webpack_require__(0);
var fs = __webpack_require__(2);
var async = __webpack_require__(14);
var utils = __webpack_require__(6);

var nlRegexp = /\r\n|\r|\n/g;

/*
 *! Processor methods
 */


/**
 * Run ffprobe asynchronously and store data in command
 *
 * @param {FfmpegCommand} command
 * @private
 */
function runFfprobe(command) {
  const inputProbeIndex = 0;
  if (command._inputs[inputProbeIndex].isStream) {
    // Don't probe input streams as this will consume them
    return;
  }
  command.ffprobe(inputProbeIndex, function(err, data) {
    command._ffprobeData = data;
  });
}


module.exports = function(proto) {
  /**
   * Emitted just after ffmpeg has been spawned.
   *
   * @event FfmpegCommand#start
   * @param {String} command ffmpeg command line
   */

  /**
   * Emitted when ffmpeg reports progress information
   *
   * @event FfmpegCommand#progress
   * @param {Object} progress progress object
   * @param {Number} progress.frames number of frames transcoded
   * @param {Number} progress.currentFps current processing speed in frames per second
   * @param {Number} progress.currentKbps current output generation speed in kilobytes per second
   * @param {Number} progress.targetSize current output file size
   * @param {String} progress.timemark current video timemark
   * @param {Number} [progress.percent] processing progress (may not be available depending on input)
   */

  /**
   * Emitted when ffmpeg outputs to stderr
   *
   * @event FfmpegCommand#stderr
   * @param {String} line stderr output line
   */

  /**
   * Emitted when ffmpeg reports input codec data
   *
   * @event FfmpegCommand#codecData
   * @param {Object} codecData codec data object
   * @param {String} codecData.format input format name
   * @param {String} codecData.audio input audio codec name
   * @param {String} codecData.audio_details input audio codec parameters
   * @param {String} codecData.video input video codec name
   * @param {String} codecData.video_details input video codec parameters
   */

  /**
   * Emitted when an error happens when preparing or running a command
   *
   * @event FfmpegCommand#error
   * @param {Error} error error object, with optional properties 'inputStreamError' / 'outputStreamError' for errors on their respective streams
   * @param {String|null} stdout ffmpeg stdout, unless outputting to a stream
   * @param {String|null} stderr ffmpeg stderr
   */

  /**
   * Emitted when a command finishes processing
   *
   * @event FfmpegCommand#end
   * @param {Array|String|null} [filenames|stdout] generated filenames when taking screenshots, ffmpeg stdout when not outputting to a stream, null otherwise
   * @param {String|null} stderr ffmpeg stderr
   */


  /**
   * Spawn an ffmpeg process
   *
   * The 'options' argument may contain the following keys:
   * - 'niceness': specify process niceness, ignored on Windows (default: 0)
   * - `cwd`: change working directory
   * - 'captureStdout': capture stdout and pass it to 'endCB' as its 2nd argument (default: false)
   * - 'stdoutLines': override command limit (default: use command limit)
   *
   * The 'processCB' callback, if present, is called as soon as the process is created and
   * receives a nodejs ChildProcess object.  It may not be called at all if an error happens
   * before spawning the process.
   *
   * The 'endCB' callback is called either when an error occurs or when the ffmpeg process finishes.
   *
   * @method FfmpegCommand#_spawnFfmpeg
   * @param {Array} args ffmpeg command line argument list
   * @param {Object} [options] spawn options (see above)
   * @param {Function} [processCB] callback called with process object and stdout/stderr ring buffers when process has been created
   * @param {Function} endCB callback called with error (if applicable) and stdout/stderr ring buffers when process finished
   * @private
   */
  proto._spawnFfmpeg = function(args, options, processCB, endCB) {
    // Enable omitting options
    if (typeof options === 'function') {
      endCB = processCB;
      processCB = options;
      options = {};
    }

    // Enable omitting processCB
    if (typeof endCB === 'undefined') {
      endCB = processCB;
      processCB = function() {};
    }

    var maxLines = 'stdoutLines' in options ? options.stdoutLines : this.options.stdoutLines;

    // Find ffmpeg
    this._getFfmpegPath(function(err, command) {
      if (err) {
        return endCB(err);
      } else if (!command || command.length === 0) {
        return endCB(new Error('Cannot find ffmpeg'));
      }

      // Apply niceness
      if (options.niceness && options.niceness !== 0 && !utils.isWindows) {
        args.unshift('-n', options.niceness, command);
        command = 'nice';
      }

      var stdoutRing = utils.linesRing(maxLines);
      var stdoutClosed = false;

      var stderrRing = utils.linesRing(maxLines);
      var stderrClosed = false;

      // Spawn process
      var ffmpegProc = spawn(command, args, options);

      if (ffmpegProc.stderr) {
        ffmpegProc.stderr.setEncoding('utf8');
      }

      ffmpegProc.on('error', function(err) {
        endCB(err);
      });

      // Ensure we wait for captured streams to end before calling endCB
      var exitError = null;
      function handleExit(err) {
        if (err) {
          exitError = err;
        }

        if (processExited && (stdoutClosed || !options.captureStdout) && stderrClosed) {
          endCB(exitError, stdoutRing, stderrRing);
        }
      }

      // Handle process exit
      var processExited = false;
      ffmpegProc.on('exit', function(code, signal) {
        processExited = true;

        if (signal) {
          handleExit(new Error('ffmpeg was killed with signal ' + signal));
        } else if (code) {
          handleExit(new Error('ffmpeg exited with code ' + code));
        } else {
          handleExit();
        }
      });

      // Capture stdout if specified
      if (options.captureStdout) {
        ffmpegProc.stdout.on('data', function(data) {
          stdoutRing.append(data);
        });

        ffmpegProc.stdout.on('close', function() {
          stdoutRing.close();
          stdoutClosed = true;
          handleExit();
        });
      }

      // Capture stderr if specified
      ffmpegProc.stderr.on('data', function(data) {
        stderrRing.append(data);
      });

      ffmpegProc.stderr.on('close', function() {
        stderrRing.close();
        stderrClosed = true;
        handleExit();
      });

      // Call process callback
      processCB(ffmpegProc, stdoutRing, stderrRing);
    });
  };


  /**
   * Build the argument list for an ffmpeg command
   *
   * @method FfmpegCommand#_getArguments
   * @return argument list
   * @private
   */
  proto._getArguments = function() {
    var complexFilters = this._complexFilters.get();

    var fileOutput = this._outputs.some(function(output) {
      return output.isFile;
    });

    return [].concat(
        // Inputs and input options
        this._inputs.reduce(function(args, input) {
          var source = (typeof input.source === 'string') ? input.source : 'pipe:0';

          // For each input, add input options, then '-i <source>'
          return args.concat(
            input.options.get(),
            ['-i', source]
          );
        }, []),

        // Global options
        this._global.get(),

        // Overwrite if we have file outputs
        fileOutput ? ['-y'] : [],

        // Complex filters
        complexFilters,

        // Outputs, filters and output options
        this._outputs.reduce(function(args, output) {
          var sizeFilters = utils.makeFilterStrings(output.sizeFilters.get());
          var audioFilters = output.audioFilters.get();
          var videoFilters = output.videoFilters.get().concat(sizeFilters);
          var outputArg;

          if (!output.target) {
            outputArg = [];
          } else if (typeof output.target === 'string') {
            outputArg = [output.target];
          } else {
            outputArg = ['pipe:1'];
          }

          return args.concat(
            output.audio.get(),
            audioFilters.length ? ['-filter:a', audioFilters.join(',')] : [],
            output.video.get(),
            videoFilters.length ? ['-filter:v', videoFilters.join(',')] : [],
            output.options.get(),
            outputArg
          );
        }, [])
      );
  };


  /**
   * Prepare execution of an ffmpeg command
   *
   * Checks prerequisites for the execution of the command (codec/format availability, flvtool...),
   * then builds the argument list for ffmpeg and pass them to 'callback'.
   *
   * @method FfmpegCommand#_prepare
   * @param {Function} callback callback with signature (err, args)
   * @param {Boolean} [readMetadata=false] read metadata before processing
   * @private
   */
  proto._prepare = function(callback, readMetadata) {
    var self = this;

    async.waterfall([
      // Check codecs and formats
      function(cb) {
        self._checkCapabilities(cb);
      },

      // Read metadata if required
      function(cb) {
        if (!readMetadata) {
          return cb();
        }

        self.ffprobe(0, function(err, data) {
          if (!err) {
            self._ffprobeData = data;
          }

          cb();
        });
      },

      // Check for flvtool2/flvmeta if necessary
      function(cb) {
        var flvmeta = self._outputs.some(function(output) {
          // Remove flvmeta flag on non-file output
          if (output.flags.flvmeta && !output.isFile) {
            self.logger.warn('Updating flv metadata is only supported for files');
            output.flags.flvmeta = false;
          }

          return output.flags.flvmeta;
        });

        if (flvmeta) {
          self._getFlvtoolPath(function(err) {
            cb(err);
          });
        } else {
          cb();
        }
      },

      // Build argument list
      function(cb) {
        var args;
        try {
          args = self._getArguments();
        } catch(e) {
          return cb(e);
        }

        cb(null, args);
      },

      // Add "-strict experimental" option where needed
      function(args, cb) {
        self.availableEncoders(function(err, encoders) {
          for (var i = 0; i < args.length; i++) {
            if (args[i] === '-acodec' || args[i] === '-vcodec') {
              i++;

              if ((args[i] in encoders) && encoders[args[i]].experimental) {
                args.splice(i + 1, 0, '-strict', 'experimental');
                i += 2;
              }
            }
          }

          cb(null, args);
        });
      }
    ], callback);

    if (!readMetadata) {
      // Read metadata as soon as 'progress' listeners are added

      if (this.listeners('progress').length > 0) {
        // Read metadata in parallel
        runFfprobe(this);
      } else {
        // Read metadata as soon as the first 'progress' listener is added
        this.once('newListener', function(event) {
          if (event === 'progress') {
            runFfprobe(this);
          }
        });
      }
    }
  };


  /**
   * Run ffmpeg command
   *
   * @method FfmpegCommand#run
   * @category Processing
   * @aliases exec,execute
   */
  proto.exec =
  proto.execute =
  proto.run = function() {
    var self = this;

    // Check if at least one output is present
    var outputPresent = this._outputs.some(function(output) {
      return 'target' in output;
    });

    if (!outputPresent) {
      throw new Error('No output specified');
    }

    // Get output stream if any
    var outputStream = this._outputs.filter(function(output) {
      return typeof output.target !== 'string';
    })[0];

    // Get input stream if any
    var inputStream = this._inputs.filter(function(input) {
      return typeof input.source !== 'string';
    })[0];

    // Ensure we send 'end' or 'error' only once
    var ended = false;
    function emitEnd(err, stdout, stderr) {
      if (!ended) {
        ended = true;

        if (err) {
          self.emit('error', err, stdout, stderr);
        } else {
          self.emit('end', stdout, stderr);
        }
      }
    }

    self._prepare(function(err, args) {
      if (err) {
        return emitEnd(err);
      }

      // Run ffmpeg
      self._spawnFfmpeg(
        args,
        {
          captureStdout: !outputStream,
          niceness: self.options.niceness,
          cwd: self.options.cwd
        },

        function processCB(ffmpegProc, stdoutRing, stderrRing) {
          self.ffmpegProc = ffmpegProc;
          self.emit('start', 'ffmpeg ' + args.join(' '));

          // Pipe input stream if any
          if (inputStream) {
            inputStream.source.on('error', function(err) {
              var reportingErr = new Error('Input stream error: ' + err.message);
              reportingErr.inputStreamError = err;
              emitEnd(reportingErr);
              ffmpegProc.kill();
            });

            inputStream.source.resume();
            inputStream.source.pipe(ffmpegProc.stdin);

            // Set stdin error handler on ffmpeg (prevents nodejs catching the error, but
            // ffmpeg will fail anyway, so no need to actually handle anything)
            ffmpegProc.stdin.on('error', function() {});
          }

          // Setup timeout if requested
          var processTimer;
          if (self.options.timeout) {
            processTimer = setTimeout(function() {
              var msg = 'process ran into a timeout (' + self.options.timeout + 's)';

              emitEnd(new Error(msg), stdoutRing.get(), stderrRing.get());
              ffmpegProc.kill();
            }, self.options.timeout * 1000);
          }


          if (outputStream) {
            // Pipe ffmpeg stdout to output stream
            ffmpegProc.stdout.pipe(outputStream.target, outputStream.pipeopts);

            // Handle output stream events
            outputStream.target.on('close', function() {
              self.logger.debug('Output stream closed, scheduling kill for ffmpeg process');

              // Don't kill process yet, to give a chance to ffmpeg to
              // terminate successfully first  This is necessary because
              // under load, the process 'exit' event sometimes happens
              // after the output stream 'close' event.
              setTimeout(function() {
                emitEnd(new Error('Output stream closed'));
                ffmpegProc.kill();
              }, 20);
            });

            outputStream.target.on('error', function(err) {
              self.logger.debug('Output stream error, killing ffmpeg process');
              var reportingErr = new Error('Output stream error: ' + err.message);
              reportingErr.outputStreamError = err;
              emitEnd(reportingErr, stdoutRing.get(), stderrRing.get());
              ffmpegProc.kill('SIGKILL');
            });
          }

          // Setup stderr handling
          if (stderrRing) {

            // 'stderr' event
            if (self.listeners('stderr').length) {
              stderrRing.callback(function(line) {
                self.emit('stderr', line);
              });
            }

            // 'codecData' event
            if (self.listeners('codecData').length) {
              var codecDataSent = false;
              var codecObject = {};

              stderrRing.callback(function(line) {
                if (!codecDataSent)
                  codecDataSent = utils.extractCodecData(self, line, codecObject);
              });
            }

            // 'progress' event
            if (self.listeners('progress').length) {
              stderrRing.callback(function(line) {
                utils.extractProgress(self, line);
              });
            }
          }
        },

        function endCB(err, stdoutRing, stderrRing) {
          delete self.ffmpegProc;

          if (err) {
            if (err.message.match(/ffmpeg exited with code/)) {
              // Add ffmpeg error message
              err.message += ': ' + utils.extractError(stderrRing.get());
            }

            emitEnd(err, stdoutRing.get(), stderrRing.get());
          } else {
            // Find out which outputs need flv metadata
            var flvmeta = self._outputs.filter(function(output) {
              return output.flags.flvmeta;
            });

            if (flvmeta.length) {
              self._getFlvtoolPath(function(err, flvtool) {
                if (err) {
                  return emitEnd(err);
                }

                async.each(
                  flvmeta,
                  function(output, cb) {
                    spawn(flvtool, ['-U', output.target])
                      .on('error', function(err) {
                        cb(new Error('Error running ' + flvtool + ' on ' + output.target + ': ' + err.message));
                      })
                      .on('exit', function(code, signal) {
                        if (code !== 0 || signal) {
                          cb(
                            new Error(flvtool + ' ' +
                              (signal ? 'received signal ' + signal
                                      : 'exited with code ' + code)) +
                              ' when running on ' + output.target
                          );
                        } else {
                          cb();
                        }
                      });
                  },
                  function(err) {
                    if (err) {
                      emitEnd(err);
                    } else {
                      emitEnd(null, stdoutRing.get(), stderrRing.get());
                    }
                  }
                );
              });
            } else {
              emitEnd(null, stdoutRing.get(), stderrRing.get());
            }
          }
        }
      );
    });
  };


  /**
   * Renice current and/or future ffmpeg processes
   *
   * Ignored on Windows platforms.
   *
   * @method FfmpegCommand#renice
   * @category Processing
   *
   * @param {Number} [niceness=0] niceness value between -20 (highest priority) and 20 (lowest priority)
   * @return FfmpegCommand
   */
  proto.renice = function(niceness) {
    if (!utils.isWindows) {
      niceness = niceness || 0;

      if (niceness < -20 || niceness > 20) {
        this.logger.warn('Invalid niceness value: ' + niceness + ', must be between -20 and 20');
      }

      niceness = Math.min(20, Math.max(-20, niceness));
      this.options.niceness = niceness;

      if (this.ffmpegProc) {
        var logger = this.logger;
        var pid = this.ffmpegProc.pid;
        var renice = spawn('renice', [niceness, '-p', pid]);

        renice.on('error', function(err) {
          logger.warn('could not renice process ' + pid + ': ' + err.message);
        });

        renice.on('exit', function(code, signal) {
          if (signal) {
            logger.warn('could not renice process ' + pid + ': renice was killed by signal ' + signal);
          } else if (code) {
            logger.warn('could not renice process ' + pid + ': renice exited with ' + code);
          } else {
            logger.info('successfully reniced process ' + pid + ' to ' + niceness + ' niceness');
          }
        });
      }
    }

    return this;
  };


  /**
   * Kill current ffmpeg process, if any
   *
   * @method FfmpegCommand#kill
   * @category Processing
   *
   * @param {String} [signal=SIGKILL] signal name
   * @return FfmpegCommand
   */
  proto.kill = function(signal) {
    if (!this.ffmpegProc) {
      this.logger.warn('No running ffmpeg process, cannot send signal');
    } else {
      this.ffmpegProc.kill(signal || 'SIGKILL');
    }

    return this;
  };
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true*/


var fs = __webpack_require__(2);
var path = __webpack_require__(0);
var PassThrough = __webpack_require__(8).PassThrough;
var async = __webpack_require__(14);
var utils = __webpack_require__(6);


/*
 * Useful recipes for commands
 */

module.exports = function recipes(proto) {
  /**
   * Execute ffmpeg command and save output to a file
   *
   * @method FfmpegCommand#save
   * @category Processing
   * @aliases saveToFile
   *
   * @param {String} output file path
   * @return FfmpegCommand
   */
  proto.saveToFile =
  proto.save = function(output) {
    this.output(output).run();
    return this;
  };


  /**
   * Execute ffmpeg command and save output to a stream
   *
   * If 'stream' is not specified, a PassThrough stream is created and returned.
   * 'options' will be used when piping ffmpeg output to the output stream
   * (@see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options)
   *
   * @method FfmpegCommand#pipe
   * @category Processing
   * @aliases stream,writeToStream
   *
   * @param {stream.Writable} [stream] output stream
   * @param {Object} [options={}] pipe options
   * @return Output stream
   */
  proto.writeToStream =
  proto.pipe =
  proto.stream = function(stream, options) {
    if (stream && !('writable' in stream)) {
      options = stream;
      stream = undefined;
    }

    if (!stream) {
      if (process.version.match(/v0\.8\./)) {
        throw new Error('PassThrough stream is not supported on node v0.8');
      }

      stream = new PassThrough();
    }

    this.output(stream, options).run();
    return stream;
  };


  /**
   * Generate images from a video
   *
   * Note: this method makes the command emit a 'filenames' event with an array of
   * the generated image filenames.
   *
   * @method FfmpegCommand#screenshots
   * @category Processing
   * @aliases takeScreenshots,thumbnail,thumbnails,screenshot
   *
   * @param {Number|Object} [config=1] screenshot count or configuration object with
   *   the following keys:
   * @param {Number} [config.count] number of screenshots to take; using this option
   *   takes screenshots at regular intervals (eg. count=4 would take screens at 20%, 40%,
   *   60% and 80% of the video length).
   * @param {String} [config.folder='.'] output folder
   * @param {String} [config.filename='tn.png'] output filename pattern, may contain the following
   *   tokens:
   *   - '%s': offset in seconds
   *   - '%w': screenshot width
   *   - '%h': screenshot height
   *   - '%r': screenshot resolution (same as '%wx%h')
   *   - '%f': input filename
   *   - '%b': input basename (filename w/o extension)
   *   - '%i': index of screenshot in timemark array (can be zero-padded by using it like `%000i`)
   * @param {Number[]|String[]} [config.timemarks] array of timemarks to take screenshots
   *   at; each timemark may be a number of seconds, a '[[hh:]mm:]ss[.xxx]' string or a
   *   'XX%' string.  Overrides 'count' if present.
   * @param {Number[]|String[]} [config.timestamps] alias for 'timemarks'
   * @param {Boolean} [config.fastSeek] use fast seek (less accurate)
   * @param {String} [config.size] screenshot size, with the same syntax as {@link FfmpegCommand#size}
   * @param {String} [folder] output folder (legacy alias for 'config.folder')
   * @return FfmpegCommand
   */
  proto.takeScreenshots =
  proto.thumbnail =
  proto.thumbnails =
  proto.screenshot =
  proto.screenshots = function(config, folder) {
    var self = this;
    var source = this._currentInput.source;
    config = config || { count: 1 };

    // Accept a number of screenshots instead of a config object
    if (typeof config === 'number') {
      config = {
        count: config
      };
    }

    // Accept a second 'folder' parameter instead of config.folder
    if (!('folder' in config)) {
      config.folder = folder || '.';
    }

    // Accept 'timestamps' instead of 'timemarks'
    if ('timestamps' in config) {
      config.timemarks = config.timestamps;
    }

    // Compute timemarks from count if not present
    if (!('timemarks' in config)) {
      if (!config.count) {
        throw new Error('Cannot take screenshots: neither a count nor a timemark list are specified');
      }

      var interval = 100 / (1 + config.count);
      config.timemarks = [];
      for (var i = 0; i < config.count; i++) {
        config.timemarks.push((interval * (i + 1)) + '%');
      }
    }

    // Parse size option
    if ('size' in config) {
      var fixedSize = config.size.match(/^(\d+)x(\d+)$/);
      var fixedWidth = config.size.match(/^(\d+)x\?$/);
      var fixedHeight = config.size.match(/^\?x(\d+)$/);
      var percentSize = config.size.match(/^(\d+)%$/);

      if (!fixedSize && !fixedWidth && !fixedHeight && !percentSize) {
        throw new Error('Invalid size parameter: ' + config.size);
      }
    }

    // Metadata helper
    var metadata;
    function getMetadata(cb) {
      if (metadata) {
        cb(null, metadata);
      } else {
        self.ffprobe(function(err, meta) {
          metadata = meta;
          cb(err, meta);
        });
      }
    }

    async.waterfall([
      // Compute percent timemarks if any
      function computeTimemarks(next) {
        if (config.timemarks.some(function(t) { return ('' + t).match(/^[\d.]+%$/); })) {
          if (typeof source !== 'string') {
            return next(new Error('Cannot compute screenshot timemarks with an input stream, please specify fixed timemarks'));
          }

          getMetadata(function(err, meta) {
            if (err) {
              next(err);
            } else {
              // Select video stream with the highest resolution
              var vstream = meta.streams.reduce(function(biggest, stream) {
                if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {
                  return stream;
                } else {
                  return biggest;
                }
              }, { width: 0, height: 0 });

              if (vstream.width === 0) {
                return next(new Error('No video stream in input, cannot take screenshots'));
              }

              var duration = Number(vstream.duration);
              if (isNaN(duration)) {
                duration = Number(meta.format.duration);
              }

              if (isNaN(duration)) {
                return next(new Error('Could not get input duration, please specify fixed timemarks'));
              }

              config.timemarks = config.timemarks.map(function(mark) {
                if (('' + mark).match(/^([\d.]+)%$/)) {
                  return duration * parseFloat(mark) / 100;
                } else {
                  return mark;
                }
              });

              next();
            }
          });
        } else {
          next();
        }
      },

      // Turn all timemarks into numbers and sort them
      function normalizeTimemarks(next) {
        config.timemarks = config.timemarks.map(function(mark) {
          return utils.timemarkToSeconds(mark);
        }).sort(function(a, b) { return a - b; });

        next();
      },

      // Add '_%i' to pattern when requesting multiple screenshots and no variable token is present
      function fixPattern(next) {
        var pattern = config.filename || 'tn.png';

        if (pattern.indexOf('.') === -1) {
          pattern += '.png';
        }

        if (config.timemarks.length > 1 && !pattern.match(/%(s|0*i)/)) {
          var ext = path.extname(pattern);
          pattern = path.join(path.dirname(pattern), path.basename(pattern, ext) + '_%i' + ext);
        }

        next(null, pattern);
      },

      // Replace filename tokens (%f, %b) in pattern
      function replaceFilenameTokens(pattern, next) {
        if (pattern.match(/%[bf]/)) {
          if (typeof source !== 'string') {
            return next(new Error('Cannot replace %f or %b when using an input stream'));
          }

          pattern = pattern
            .replace(/%f/g, path.basename(source))
            .replace(/%b/g, path.basename(source, path.extname(source)));
        }

        next(null, pattern);
      },

      // Compute size if needed
      function getSize(pattern, next) {
        if (pattern.match(/%[whr]/)) {
          if (fixedSize) {
            return next(null, pattern, fixedSize[1], fixedSize[2]);
          }

          getMetadata(function(err, meta) {
            if (err) {
              return next(new Error('Could not determine video resolution to replace %w, %h or %r'));
            }

            var vstream = meta.streams.reduce(function(biggest, stream) {
              if (stream.codec_type === 'video' && stream.width * stream.height > biggest.width * biggest.height) {
                return stream;
              } else {
                return biggest;
              }
            }, { width: 0, height: 0 });

            if (vstream.width === 0) {
              return next(new Error('No video stream in input, cannot replace %w, %h or %r'));
            }

            var width = vstream.width;
            var height = vstream.height;

            if (fixedWidth) {
              height = height * Number(fixedWidth[1]) / width;
              width = Number(fixedWidth[1]);
            } else if (fixedHeight) {
              width = width * Number(fixedHeight[1]) / height;
              height = Number(fixedHeight[1]);
            } else if (percentSize) {
              width = width * Number(percentSize[1]) / 100;
              height = height * Number(percentSize[1]) / 100;
            }

            next(null, pattern, Math.round(width / 2) * 2, Math.round(height / 2) * 2);
          });
        } else {
          next(null, pattern, -1, -1);
        }
      },

      // Replace size tokens (%w, %h, %r) in pattern
      function replaceSizeTokens(pattern, width, height, next) {
        pattern = pattern
          .replace(/%r/g, '%wx%h')
          .replace(/%w/g, width)
          .replace(/%h/g, height);

        next(null, pattern);
      },

      // Replace variable tokens in pattern (%s, %i) and generate filename list
      function replaceVariableTokens(pattern, next) {
        var filenames = config.timemarks.map(function(t, i) {
          return pattern
            .replace(/%s/g, utils.timemarkToSeconds(t))
            .replace(/%(0*)i/g, function(match, padding) {
              var idx = '' + (i + 1);
              return padding.substr(0, Math.max(0, padding.length + 1 - idx.length)) + idx;
            });
        });

        self.emit('filenames', filenames);
        next(null, filenames);
      },

      // Create output directory
      function createDirectory(filenames, next) {
        fs.exists(config.folder, function(exists) {
          if (!exists) {
            fs.mkdir(config.folder, function(err) {
              if (err) {
                next(err);
              } else {
                next(null, filenames);
              }
            });
          } else {
            next(null, filenames);
          }
        });
      }
    ], function runCommand(err, filenames) {
      if (err) {
        return self.emit('error', err);
      }

      var count = config.timemarks.length;
      var split;
      var filters = [split = {
        filter: 'split',
        options: count,
        outputs: []
      }];

      if ('size' in config) {
        // Set size to generate size filters
        self.size(config.size);

        // Get size filters and chain them with 'sizeN' stream names
        var sizeFilters =  self._currentOutput.sizeFilters.get().map(function(f, i) {
          if (i > 0) {
            f.inputs = 'size' + (i - 1);
          }

          f.outputs = 'size' + i;

          return f;
        });

        // Input last size filter output into split filter
        split.inputs = 'size' + (sizeFilters.length - 1);

        // Add size filters in front of split filter
        filters = sizeFilters.concat(filters);

        // Remove size filters
        self._currentOutput.sizeFilters.clear();
      }

      var first = 0;
      for (var i = 0; i < count; i++) {
        var stream = 'screen' + i;
        split.outputs.push(stream);

        if (i === 0) {
          first = config.timemarks[i];
          self.seekInput(first);
        }

        self.output(path.join(config.folder, filenames[i]))
          .frames(1)
          .map(stream);

        if (i > 0) {
          self.seek(config.timemarks[i] - first);
        }
      }

      self.complexFilter(filters);
      self.run();
    });

    return this;
  };


  /**
   * Merge (concatenate) inputs to a single file
   *
   * @method FfmpegCommand#concat
   * @category Processing
   * @aliases concatenate,mergeToFile
   *
   * @param {String|Writable} target output file or writable stream
   * @param {Object} [options] pipe options (only used when outputting to a writable stream)
   * @return FfmpegCommand
   */
  proto.mergeToFile =
  proto.concatenate =
  proto.concat = function(target, options) {
    // Find out which streams are present in the first non-stream input
    var fileInput = this._inputs.filter(function(input) {
      return !input.isStream;
    })[0];

    var self = this;
    this.ffprobe(this._inputs.indexOf(fileInput), function(err, data) {
      if (err) {
        return self.emit('error', err);
      }

      var hasAudioStreams = data.streams.some(function(stream) {
        return stream.codec_type === 'audio';
      });

      var hasVideoStreams = data.streams.some(function(stream) {
        return stream.codec_type === 'video';
      });

      // Setup concat filter and start processing
      self.output(target, options)
        .complexFilter({
          filter: 'concat',
          options: {
            n: self._inputs.length,
            v: hasVideoStreams ? 1 : 0,
            a: hasAudioStreams ? 1 : 0
          }
        })
        .run();
    });

    return this;
  };
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)

const BUF_LENGTH = 64 * 1024
const _buff = __webpack_require__(34)(BUF_LENGTH)

function copyFileSync (srcFile, destFile, options) {
  const overwrite = options.overwrite
  const errorOnExist = options.errorOnExist
  const preserveTimestamps = options.preserveTimestamps

  if (fs.existsSync(destFile)) {
    if (overwrite) {
      fs.unlinkSync(destFile)
    } else if (errorOnExist) {
      throw new Error(`${destFile} already exists`)
    } else return
  }

  const fdr = fs.openSync(srcFile, 'r')
  const stat = fs.fstatSync(fdr)
  const fdw = fs.openSync(destFile, 'w', stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    fs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  if (preserveTimestamps) {
    fs.futimesSync(fdw, stat.atime, stat.mtime)
  }

  fs.closeSync(fdr)
  fs.closeSync(fdw)
}

module.exports = copyFileSync


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const copyFileSync = __webpack_require__(93)
const mkdir = __webpack_require__(4)

function copySync (src, dest, options) {
  if (typeof options === 'function' || options instanceof RegExp) {
    options = {filter: options}
  }

  options = options || {}
  options.recursive = !!options.recursive

  // default to true for now
  options.clobber = 'clobber' in options ? !!options.clobber : true
  // overwrite falls back to clobber
  options.overwrite = 'overwrite' in options ? !!options.overwrite : options.clobber
  options.dereference = 'dereference' in options ? !!options.dereference : false
  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : false

  options.filter = options.filter || function () { return true }

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  const stats = (options.recursive && !options.dereference) ? fs.lstatSync(src) : fs.statSync(src)
  const destFolder = path.dirname(dest)
  const destFolderExists = fs.existsSync(destFolder)
  let performCopy = false

  if (options.filter instanceof RegExp) {
    console.warn('Warning: fs-extra: Passing a RegExp filter is deprecated, use a function')
    performCopy = options.filter.test(src)
  } else if (typeof options.filter === 'function') performCopy = options.filter(src, dest)

  if (stats.isFile() && performCopy) {
    if (!destFolderExists) mkdir.mkdirsSync(destFolder)
    copyFileSync(src, dest, {
      overwrite: options.overwrite,
      errorOnExist: options.errorOnExist,
      preserveTimestamps: options.preserveTimestamps
    })
  } else if (stats.isDirectory() && performCopy) {
    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)
    const contents = fs.readdirSync(src)
    contents.forEach(content => {
      const opts = options
      opts.recursive = true
      copySync(path.join(src, content), path.join(dest, content), opts)
    })
  } else if (options.recursive && stats.isSymbolicLink() && performCopy) {
    const srcPath = fs.readlinkSync(src)
    fs.symlinkSync(srcPath, dest)
  }
}

module.exports = copySync


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const ncp = __webpack_require__(31)
const mkdir = __webpack_require__(4)
const pathExists = __webpack_require__(7).pathExists

function copy (src, dest, options, callback) {
  if (typeof options === 'function' && !callback) {
    callback = options
    options = {}
  } else if (typeof options === 'function' || options instanceof RegExp) {
    options = {filter: options}
  }
  callback = callback || function () {}
  options = options || {}

  // Warn about using preserveTimestamps on 32-bit node:
  if (options.preserveTimestamps && process.arch === 'ia32') {
    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
  }

  // don't allow src and dest to be the same
  const basePath = process.cwd()
  const currentPath = path.resolve(basePath, src)
  const targetPath = path.resolve(basePath, dest)
  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))

  fs.lstat(src, (err, stats) => {
    if (err) return callback(err)

    let dir = null
    if (stats.isDirectory()) {
      const parts = dest.split(path.sep)
      parts.pop()
      dir = parts.join(path.sep)
    } else {
      dir = path.dirname(dest)
    }

    pathExists(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return ncp(src, dest, options, callback)
      mkdir.mkdirs(dir, err => {
        if (err) return callback(err)
        ncp(src, dest, options, callback)
      })
    })
  })
}

module.exports = copy


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

const u = __webpack_require__(3).fromCallback
module.exports = {
  copy: u(__webpack_require__(95))
}


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const fs = __webpack_require__(2)
const path = __webpack_require__(0)
const mkdir = __webpack_require__(4)
const remove = __webpack_require__(12)

const emptyDir = u(function emptyDir (dir, callback) {
  callback = callback || function () {}
  fs.readdir(dir, (err, items) => {
    if (err) return mkdir.mkdirs(dir, callback)

    items = items.map(item => path.join(dir, item))

    deleteItem()

    function deleteItem () {
      const item = items.pop()
      if (!item) return callback()
      remove.remove(item, err => {
        if (err) return callback(err)
        deleteItem()
      })
    }
  })
})

function emptyDirSync (dir) {
  let items
  try {
    items = fs.readdirSync(dir)
  } catch (err) {
    return mkdir.mkdirsSync(dir)
  }

  items.forEach(item => {
    item = path.join(dir, item)
    remove.removeSync(item)
  })
}

module.exports = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
}


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const path = __webpack_require__(0)
const fs = __webpack_require__(1)
const mkdir = __webpack_require__(4)
const pathExists = __webpack_require__(7).pathExists

function createFile (file, callback) {
  function makeFile () {
    fs.writeFile(file, '', err => {
      if (err) return callback(err)
      callback()
    })
  }

  pathExists(file, (err, fileExists) => {
    if (err) return callback(err)
    if (fileExists) return callback()
    const dir = path.dirname(file)
    pathExists(dir, (err, dirExists) => {
      if (err) return callback(err)
      if (dirExists) return makeFile()
      mkdir.mkdirs(dir, err => {
        if (err) return callback(err)
        makeFile()
      })
    })
  })
}

function createFileSync (file) {
  if (fs.existsSync(file)) return

  const dir = path.dirname(file)
  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir)
  }

  fs.writeFileSync(file, '')
}

module.exports = {
  createFile: u(createFile),
  createFileSync
}


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const file = __webpack_require__(98)
const link = __webpack_require__(100)
const symlink = __webpack_require__(103)

module.exports = {
  // file
  createFile: file.createFile,
  createFileSync: file.createFileSync,
  ensureFile: file.createFile,
  ensureFileSync: file.createFileSync,
  // link
  createLink: link.createLink,
  createLinkSync: link.createLinkSync,
  ensureLink: link.createLink,
  ensureLinkSync: link.createLinkSync,
  // symlink
  createSymlink: symlink.createSymlink,
  createSymlinkSync: symlink.createSymlinkSync,
  ensureSymlink: symlink.createSymlink,
  ensureSymlinkSync: symlink.createSymlinkSync
}


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const path = __webpack_require__(0)
const fs = __webpack_require__(1)
const mkdir = __webpack_require__(4)
const pathExists = __webpack_require__(7).pathExists

function createLink (srcpath, dstpath, callback) {
  function makeLink (srcpath, dstpath) {
    fs.link(srcpath, dstpath, err => {
      if (err) return callback(err)
      callback(null)
    })
  }

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureLink')
        return callback(err)
      }

      const dir = path.dirname(dstpath)
      pathExists(dir, (err, dirExists) => {
        if (err) return callback(err)
        if (dirExists) return makeLink(srcpath, dstpath)
        mkdir.mkdirs(dir, err => {
          if (err) return callback(err)
          makeLink(srcpath, dstpath)
        })
      })
    })
  })
}

function createLinkSync (srcpath, dstpath, callback) {
  const destinationExists = fs.existsSync(dstpath)
  if (destinationExists) return undefined

  try {
    fs.lstatSync(srcpath)
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink')
    throw err
  }

  const dir = path.dirname(dstpath)
  const dirExists = fs.existsSync(dir)
  if (dirExists) return fs.linkSync(srcpath, dstpath)
  mkdir.mkdirsSync(dir)

  return fs.linkSync(srcpath, dstpath)
}

module.exports = {
  createLink: u(createLink),
  createLinkSync
}


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0)
const fs = __webpack_require__(1)
const pathExists = __webpack_require__(7).pathExists

/**
 * Function that returns two types of paths, one relative to symlink, and one
 * relative to the current working directory. Checks if path is absolute or
 * relative. If the path is relative, this function checks if the path is
 * relative to symlink or relative to current working directory. This is an
 * initiative to find a smarter `srcpath` to supply when building symlinks.
 * This allows you to determine which path to use out of one of three possible
 * types of source paths. The first is an absolute path. This is detected by
 * `path.isAbsolute()`. When an absolute path is provided, it is checked to
 * see if it exists. If it does it's used, if not an error is returned
 * (callback)/ thrown (sync). The other two options for `srcpath` are a
 * relative url. By default Node's `fs.symlink` works by creating a symlink
 * using `dstpath` and expects the `srcpath` to be relative to the newly
 * created symlink. If you provide a `srcpath` that does not exist on the file
 * system it results in a broken symlink. To minimize this, the function
 * checks to see if the 'relative to symlink' source file exists, and if it
 * does it will use it. If it does not, it checks if there's a file that
 * exists that is relative to the current working directory, if does its used.
 * This preserves the expectations of the original fs.symlink spec and adds
 * the ability to pass in `relative to current working direcotry` paths.
 */

function symlinkPaths (srcpath, dstpath, callback) {
  if (path.isAbsolute(srcpath)) {
    return fs.lstat(srcpath, (err, stat) => {
      if (err) {
        err.message = err.message.replace('lstat', 'ensureSymlink')
        return callback(err)
      }
      return callback(null, {
        'toCwd': srcpath,
        'toDst': srcpath
      })
    })
  } else {
    const dstdir = path.dirname(dstpath)
    const relativeToDst = path.join(dstdir, srcpath)
    return pathExists(relativeToDst, (err, exists) => {
      if (err) return callback(err)
      if (exists) {
        return callback(null, {
          'toCwd': relativeToDst,
          'toDst': srcpath
        })
      } else {
        return fs.lstat(srcpath, (err, stat) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink')
            return callback(err)
          }
          return callback(null, {
            'toCwd': srcpath,
            'toDst': path.relative(dstdir, srcpath)
          })
        })
      }
    })
  }
}

function symlinkPathsSync (srcpath, dstpath) {
  let exists
  if (path.isAbsolute(srcpath)) {
    exists = fs.existsSync(srcpath)
    if (!exists) throw new Error('absolute srcpath does not exist')
    return {
      'toCwd': srcpath,
      'toDst': srcpath
    }
  } else {
    const dstdir = path.dirname(dstpath)
    const relativeToDst = path.join(dstdir, srcpath)
    exists = fs.existsSync(relativeToDst)
    if (exists) {
      return {
        'toCwd': relativeToDst,
        'toDst': srcpath
      }
    } else {
      exists = fs.existsSync(srcpath)
      if (!exists) throw new Error('relative srcpath does not exist')
      return {
        'toCwd': srcpath,
        'toDst': path.relative(dstdir, srcpath)
      }
    }
  }
}

module.exports = {
  symlinkPaths,
  symlinkPathsSync
}


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)

function symlinkType (srcpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type
  if (type) return callback(null, type)
  fs.lstat(srcpath, (err, stats) => {
    if (err) return callback(null, 'file')
    type = (stats && stats.isDirectory()) ? 'dir' : 'file'
    callback(null, type)
  })
}

function symlinkTypeSync (srcpath, type) {
  let stats

  if (type) return type
  try {
    stats = fs.lstatSync(srcpath)
  } catch (e) {
    return 'file'
  }
  return (stats && stats.isDirectory()) ? 'dir' : 'file'
}

module.exports = {
  symlinkType,
  symlinkTypeSync
}


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const path = __webpack_require__(0)
const fs = __webpack_require__(1)
const _mkdirs = __webpack_require__(4)
const mkdirs = _mkdirs.mkdirs
const mkdirsSync = _mkdirs.mkdirsSync

const _symlinkPaths = __webpack_require__(101)
const symlinkPaths = _symlinkPaths.symlinkPaths
const symlinkPathsSync = _symlinkPaths.symlinkPathsSync

const _symlinkType = __webpack_require__(102)
const symlinkType = _symlinkType.symlinkType
const symlinkTypeSync = _symlinkType.symlinkTypeSync

const pathExists = __webpack_require__(7).pathExists

function createSymlink (srcpath, dstpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type

  pathExists(dstpath, (err, destinationExists) => {
    if (err) return callback(err)
    if (destinationExists) return callback(null)
    symlinkPaths(srcpath, dstpath, (err, relative) => {
      if (err) return callback(err)
      srcpath = relative.toDst
      symlinkType(relative.toCwd, type, (err, type) => {
        if (err) return callback(err)
        const dir = path.dirname(dstpath)
        pathExists(dir, (err, dirExists) => {
          if (err) return callback(err)
          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)
          mkdirs(dir, err => {
            if (err) return callback(err)
            fs.symlink(srcpath, dstpath, type, callback)
          })
        })
      })
    })
  })
}

function createSymlinkSync (srcpath, dstpath, type, callback) {
  callback = (typeof type === 'function') ? type : callback
  type = (typeof type === 'function') ? false : type

  const destinationExists = fs.existsSync(dstpath)
  if (destinationExists) return undefined

  const relative = symlinkPathsSync(srcpath, dstpath)
  srcpath = relative.toDst
  type = symlinkTypeSync(relative.toCwd, type)
  const dir = path.dirname(dstpath)
  const exists = fs.existsSync(dir)
  if (exists) return fs.symlinkSync(srcpath, dstpath, type)
  mkdirsSync(dir)
  return fs.symlinkSync(srcpath, dstpath, type)
}

module.exports = {
  createSymlink: u(createSymlink),
  createSymlinkSync
}


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const jsonFile = __webpack_require__(16)

jsonFile.outputJsonSync = __webpack_require__(105)
jsonFile.outputJson = u(__webpack_require__(106))
// aliases
jsonFile.outputJSONSync = jsonFile.outputJSONSync
jsonFile.outputJSON = jsonFile.outputJson
jsonFile.writeJSON = jsonFile.writeJson
jsonFile.writeJSONSync = jsonFile.writeJsonSync
jsonFile.readJSON = jsonFile.readJson
jsonFile.readJSONSync = jsonFile.readJsonSync

module.exports = jsonFile


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const mkdir = __webpack_require__(4)
const jsonFile = __webpack_require__(16)

function outputJsonSync (file, data, options) {
  const dir = path.dirname(file)

  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir)
  }

  jsonFile.writeJsonSync(file, data, options)
}

module.exports = outputJsonSync


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const path = __webpack_require__(0)
const mkdir = __webpack_require__(4)
const pathExists = __webpack_require__(7).pathExists
const jsonFile = __webpack_require__(16)

function outputJson (file, data, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const dir = path.dirname(file)

  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return jsonFile.writeJson(file, data, options, callback)

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err)
      jsonFile.writeJson(file, data, options, callback)
    })
  })
}

module.exports = outputJson


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const invalidWin32Path = __webpack_require__(33).invalidWin32Path

const o777 = parseInt('0777', 8)

function mkdirsSync (p, opts, made) {
  if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  let mode = opts.mode
  const xfs = opts.fs || fs

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    throw errInval
  }

  if (mode === undefined) {
    mode = o777 & (~process.umask())
  }
  if (!made) made = null

  p = path.resolve(p)

  try {
    xfs.mkdirSync(p, mode)
    made = made || p
  } catch (err0) {
    switch (err0.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) throw err0
        made = mkdirsSync(path.dirname(p), opts, made)
        mkdirsSync(p, opts, made)
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        let stat
        try {
          stat = xfs.statSync(p)
        } catch (err1) {
          throw err0
        }
        if (!stat.isDirectory()) throw err0
        break
    }
  }

  return made
}

module.exports = mkdirsSync


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const invalidWin32Path = __webpack_require__(33).invalidWin32Path

const o777 = parseInt('0777', 8)

function mkdirs (p, opts, callback, made) {
  if (typeof opts === 'function') {
    callback = opts
    opts = {}
  } else if (!opts || typeof opts !== 'object') {
    opts = { mode: opts }
  }

  if (process.platform === 'win32' && invalidWin32Path(p)) {
    const errInval = new Error(p + ' contains invalid WIN32 path characters.')
    errInval.code = 'EINVAL'
    return callback(errInval)
  }

  let mode = opts.mode
  const xfs = opts.fs || fs

  if (mode === undefined) {
    mode = o777 & (~process.umask())
  }
  if (!made) made = null

  callback = callback || function () {}
  p = path.resolve(p)

  xfs.mkdir(p, mode, er => {
    if (!er) {
      made = made || p
      return callback(null, made)
    }
    switch (er.code) {
      case 'ENOENT':
        if (path.dirname(p) === p) return callback(er)
        mkdirs(path.dirname(p), opts, (er, made) => {
          if (er) callback(er, made)
          else mkdirs(p, opts, callback, made)
        })
        break

      // In the case of any other error, just see if there's a dir
      // there already.  If so, then hooray!  If not, then something
      // is borked.
      default:
        xfs.stat(p, (er2, stat) => {
          // if the stat fails, then that's super weird.
          // let the original error be the failure reason.
          if (er2 || !stat.isDirectory()) callback(er, made)
          else callback(null, made)
        })
        break
    }
  })
}

module.exports = mkdirs


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const copySync = __webpack_require__(30).copySync
const removeSync = __webpack_require__(12).removeSync
const mkdirpSync = __webpack_require__(4).mkdirsSync
const buffer = __webpack_require__(34)

function moveSync (src, dest, options) {
  options = options || {}
  const overwrite = options.overwrite || options.clobber || false

  src = path.resolve(src)
  dest = path.resolve(dest)

  if (src === dest) return fs.accessSync(src)

  if (isSrcSubdir(src, dest)) throw new Error(`Cannot move '${src}' into itself '${dest}'.`)

  mkdirpSync(path.dirname(dest))
  tryRenameSync()

  function tryRenameSync () {
    if (overwrite) {
      try {
        return fs.renameSync(src, dest)
      } catch (err) {
        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST' || err.code === 'EPERM') {
          removeSync(dest)
          options.overwrite = false // just overwriteed it, no need to do it again
          return moveSync(src, dest, options)
        }

        if (err.code !== 'EXDEV') throw err
        return moveSyncAcrossDevice(src, dest, overwrite)
      }
    } else {
      try {
        fs.linkSync(src, dest)
        return fs.unlinkSync(src)
      } catch (err) {
        if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
          return moveSyncAcrossDevice(src, dest, overwrite)
        }
        throw err
      }
    }
  }
}

function moveSyncAcrossDevice (src, dest, overwrite) {
  const stat = fs.statSync(src)

  if (stat.isDirectory()) {
    return moveDirSyncAcrossDevice(src, dest, overwrite)
  } else {
    return moveFileSyncAcrossDevice(src, dest, overwrite)
  }
}

function moveFileSyncAcrossDevice (src, dest, overwrite) {
  const BUF_LENGTH = 64 * 1024
  const _buff = buffer(BUF_LENGTH)

  const flags = overwrite ? 'w' : 'wx'

  const fdr = fs.openSync(src, 'r')
  const stat = fs.fstatSync(fdr)
  const fdw = fs.openSync(dest, flags, stat.mode)
  let bytesRead = 1
  let pos = 0

  while (bytesRead > 0) {
    bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
    fs.writeSync(fdw, _buff, 0, bytesRead)
    pos += bytesRead
  }

  fs.closeSync(fdr)
  fs.closeSync(fdw)
  return fs.unlinkSync(src)
}

function moveDirSyncAcrossDevice (src, dest, overwrite) {
  const options = {
    overwrite: false
  }

  if (overwrite) {
    removeSync(dest)
    tryCopySync()
  } else {
    tryCopySync()
  }

  function tryCopySync () {
    copySync(src, dest, options)
    return removeSync(src)
  }
}

// return true if dest is a subdir of src, otherwise false.
// extract dest base dir and check if that is the same as src basename
function isSrcSubdir (src, dest) {
  try {
    return fs.statSync(src).isDirectory() &&
           src !== dest &&
           dest.indexOf(src) > -1 &&
           dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] === path.basename(src)
  } catch (e) {
    return false
  }
}

module.exports = {
  moveSync
}


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// most of this code was written by Andrew Kelley
// licensed under the BSD license: see
// https://github.com/andrewrk/node-mv/blob/master/package.json

// this needs a cleanup

const u = __webpack_require__(3).fromCallback
const fs = __webpack_require__(1)
const ncp = __webpack_require__(31)
const path = __webpack_require__(0)
const remove = __webpack_require__(12).remove
const mkdirp = __webpack_require__(4).mkdirs

function move (source, dest, options, callback) {
  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  const shouldMkdirp = ('mkdirp' in options) ? options.mkdirp : true
  const overwrite = options.overwrite || options.clobber || false

  if (shouldMkdirp) {
    mkdirs()
  } else {
    doRename()
  }

  function mkdirs () {
    mkdirp(path.dirname(dest), err => {
      if (err) return callback(err)
      doRename()
    })
  }

  function doRename () {
    if (path.resolve(source) === path.resolve(dest)) {
      fs.access(source, callback)
    } else if (overwrite) {
      fs.rename(source, dest, err => {
        if (!err) return callback()

        if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
          remove(dest, err => {
            if (err) return callback(err)
            options.overwrite = false // just overwriteed it, no need to do it again
            move(source, dest, options, callback)
          })
          return
        }

        // weird Windows shit
        if (err.code === 'EPERM') {
          setTimeout(() => {
            remove(dest, err => {
              if (err) return callback(err)
              options.overwrite = false
              move(source, dest, options, callback)
            })
          }, 200)
          return
        }

        if (err.code !== 'EXDEV') return callback(err)
        moveAcrossDevice(source, dest, overwrite, callback)
      })
    } else {
      fs.link(source, dest, err => {
        if (err) {
          if (err.code === 'EXDEV' || err.code === 'EISDIR' || err.code === 'EPERM' || err.code === 'ENOTSUP') {
            moveAcrossDevice(source, dest, overwrite, callback)
            return
          }
          callback(err)
          return
        }
        fs.unlink(source, callback)
      })
    }
  }
}

function moveAcrossDevice (source, dest, overwrite, callback) {
  fs.stat(source, (err, stat) => {
    if (err) {
      callback(err)
      return
    }

    if (stat.isDirectory()) {
      moveDirAcrossDevice(source, dest, overwrite, callback)
    } else {
      moveFileAcrossDevice(source, dest, overwrite, callback)
    }
  })
}

function moveFileAcrossDevice (source, dest, overwrite, callback) {
  const flags = overwrite ? 'w' : 'wx'
  const ins = fs.createReadStream(source)
  const outs = fs.createWriteStream(dest, { flags })

  ins.on('error', err => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)

    // may want to create a directory but `out` line above
    // creates an empty file for us: See #108
    // don't care about error here
    fs.unlink(dest, () => {
      // note: `err` here is from the input stream errror
      if (err.code === 'EISDIR' || err.code === 'EPERM') {
        moveDirAcrossDevice(source, dest, overwrite, callback)
      } else {
        callback(err)
      }
    })
  })

  outs.on('error', err => {
    ins.destroy()
    outs.destroy()
    outs.removeListener('close', onClose)
    callback(err)
  })

  outs.once('close', onClose)
  ins.pipe(outs)

  function onClose () {
    fs.unlink(source, callback)
  }
}

function moveDirAcrossDevice (source, dest, overwrite, callback) {
  const options = {
    overwrite: false
  }

  if (overwrite) {
    remove(dest, err => {
      if (err) return callback(err)
      startNcp()
    })
  } else {
    startNcp()
  }

  function startNcp () {
    ncp(source, dest, options, err => {
      if (err) return callback(err)
      remove(source, callback)
    })
  }
}

module.exports = {
  move: u(move)
}


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const u = __webpack_require__(3).fromCallback
const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const mkdir = __webpack_require__(4)
const pathExists = __webpack_require__(7).pathExists

function outputFile (file, data, encoding, callback) {
  if (typeof encoding === 'function') {
    callback = encoding
    encoding = 'utf8'
  }

  const dir = path.dirname(file)
  pathExists(dir, (err, itDoes) => {
    if (err) return callback(err)
    if (itDoes) return fs.writeFile(file, data, encoding, callback)

    mkdir.mkdirs(dir, err => {
      if (err) return callback(err)

      fs.writeFile(file, data, encoding, callback)
    })
  })
}

function outputFileSync (file, data, encoding) {
  const dir = path.dirname(file)
  if (fs.existsSync(dir)) {
    return fs.writeFileSync.apply(fs, arguments)
  }
  mkdir.mkdirsSync(dir)
  fs.writeFileSync.apply(fs, arguments)
}

module.exports = {
  outputFile: u(outputFile),
  outputFileSync
}


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const path = __webpack_require__(0)
const assert = __webpack_require__(13)

const isWindows = (process.platform === 'win32')

function defaults (options) {
  const methods = [
    'unlink',
    'chmod',
    'stat',
    'lstat',
    'rmdir',
    'readdir'
  ]
  methods.forEach(m => {
    options[m] = options[m] || fs[m]
    m = m + 'Sync'
    options[m] = options[m] || fs[m]
  })

  options.maxBusyTries = options.maxBusyTries || 3
}

function rimraf (p, options, cb) {
  let busyTries = 0

  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert.equal(typeof cb, 'function', 'rimraf: callback function required')
  assert(options, 'rimraf: invalid options argument provided')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  defaults(options)

  rimraf_(p, options, function CB (er) {
    if (er) {
      if (isWindows && (er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
          busyTries < options.maxBusyTries) {
        busyTries++
        let time = busyTries * 100
        // try again, with the same exact callback as this one.
        return setTimeout(() => rimraf_(p, options, CB), time)
      }

      // already gone
      if (er.code === 'ENOENT') er = null
    }

    cb(er)
  })
}

// Two possible strategies.
// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
//
// Both result in an extra syscall when you guess wrong.  However, there
// are likely far more normal files in the world than directories.  This
// is based on the assumption that a the average number of files per
// directory is >= 1.
//
// If anyone ever complains about this, then I guess the strategy could
// be made configurable somehow.  But until then, YAGNI.
function rimraf_ (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  // sunos lets the root user unlink directories, which is... weird.
  // so we have to lstat here and make sure it's not a dir.
  options.lstat(p, (er, st) => {
    if (er && er.code === 'ENOENT') {
      return cb(null)
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er && er.code === 'EPERM' && isWindows) {
      return fixWinEPERM(p, options, er, cb)
    }

    if (st && st.isDirectory()) {
      return rmdir(p, options, er, cb)
    }

    options.unlink(p, er => {
      if (er) {
        if (er.code === 'ENOENT') {
          return cb(null)
        }
        if (er.code === 'EPERM') {
          return (isWindows)
            ? fixWinEPERM(p, options, er, cb)
            : rmdir(p, options, er, cb)
        }
        if (er.code === 'EISDIR') {
          return rmdir(p, options, er, cb)
        }
      }
      return cb(er)
    })
  })
}

function fixWinEPERM (p, options, er, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')
  if (er) {
    assert(er instanceof Error)
  }

  options.chmod(p, 666, er2 => {
    if (er2) {
      cb(er2.code === 'ENOENT' ? null : er)
    } else {
      options.stat(p, (er3, stats) => {
        if (er3) {
          cb(er3.code === 'ENOENT' ? null : er)
        } else if (stats.isDirectory()) {
          rmdir(p, options, er, cb)
        } else {
          options.unlink(p, cb)
        }
      })
    }
  })
}

function fixWinEPERMSync (p, options, er) {
  let stats

  assert(p)
  assert(options)
  if (er) {
    assert(er instanceof Error)
  }

  try {
    options.chmodSync(p, 666)
  } catch (er2) {
    if (er2.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  try {
    stats = options.statSync(p)
  } catch (er3) {
    if (er3.code === 'ENOENT') {
      return
    } else {
      throw er
    }
  }

  if (stats.isDirectory()) {
    rmdirSync(p, options, er)
  } else {
    options.unlinkSync(p)
  }
}

function rmdir (p, options, originalEr, cb) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }
  assert(typeof cb === 'function')

  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  // if we guessed wrong, and it's not a directory, then
  // raise the original error.
  options.rmdir(p, er => {
    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
      rmkids(p, options, cb)
    } else if (er && er.code === 'ENOTDIR') {
      cb(originalEr)
    } else {
      cb(er)
    }
  })
}

function rmkids (p, options, cb) {
  assert(p)
  assert(options)
  assert(typeof cb === 'function')

  options.readdir(p, (er, files) => {
    if (er) return cb(er)

    let n = files.length
    let errState

    if (n === 0) return options.rmdir(p, cb)

    files.forEach(f => {
      rimraf(path.join(p, f), options, er => {
        if (errState) {
          return
        }
        if (er) return cb(errState = er)
        if (--n === 0) {
          options.rmdir(p, cb)
        }
      })
    })
  })
}

// this looks simpler, and is strictly *faster*, but will
// tie up the JavaScript thread and fail on excessively
// deep directory trees.
function rimrafSync (p, options) {
  let st

  options = options || {}
  defaults(options)

  assert(p, 'rimraf: missing path')
  assert.equal(typeof p, 'string', 'rimraf: path should be a string')
  assert(options, 'rimraf: missing options')
  assert.equal(typeof options, 'object', 'rimraf: options should be object')

  try {
    st = options.lstatSync(p)
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    }

    // Windows can EPERM on stat.  Life is suffering.
    if (er.code === 'EPERM' && isWindows) {
      fixWinEPERMSync(p, options, er)
    }
  }

  try {
    // sunos lets the root user unlink directories, which is... weird.
    if (st && st.isDirectory()) {
      rmdirSync(p, options, null)
    } else {
      options.unlinkSync(p)
    }
  } catch (er) {
    if (er.code === 'ENOENT') {
      return
    } else if (er.code === 'EPERM') {
      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
    } else if (er.code !== 'EISDIR') {
      throw er
    }
    rmdirSync(p, options, er)
  }
}

function rmdirSync (p, options, originalEr) {
  assert(p)
  assert(options)
  if (originalEr) {
    assert(originalEr instanceof Error)
  }

  try {
    options.rmdirSync(p)
  } catch (er) {
    if (er.code === 'ENOTDIR') {
      throw originalEr
    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
      rmkidsSync(p, options)
    } else if (er.code !== 'ENOENT') {
      throw er
    }
  }
}

function rmkidsSync (p, options) {
  assert(p)
  assert(options)
  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))
  options.rmdirSync(p, options)
}

module.exports = rimraf
rimraf.sync = rimrafSync


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// simple mutable assign
function assign () {
  const args = [].slice.call(arguments).filter(i => i)
  const dest = args.shift()
  args.forEach(src => {
    Object.keys(src).forEach(key => {
      dest[key] = src[key]
    })
  })

  return dest
}

module.exports = assign


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const fs = __webpack_require__(1)
const os = __webpack_require__(63)
const path = __webpack_require__(0)

// HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
function hasMillisResSync () {
  let tmpfile = path.join('millis-test-sync' + Date.now().toString() + Math.random().toString().slice(2))
  tmpfile = path.join(os.tmpdir(), tmpfile)

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  fs.writeFileSync(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141')
  const fd = fs.openSync(tmpfile, 'r+')
  fs.futimesSync(fd, d, d)
  fs.closeSync(fd)
  return fs.statSync(tmpfile).mtime > 1435410243000
}

function hasMillisRes (callback) {
  let tmpfile = path.join('millis-test' + Date.now().toString() + Math.random().toString().slice(2))
  tmpfile = path.join(os.tmpdir(), tmpfile)

  // 550 millis past UNIX epoch
  const d = new Date(1435410243862)
  fs.writeFile(tmpfile, 'https://github.com/jprichardson/node-fs-extra/pull/141', err => {
    if (err) return callback(err)
    fs.open(tmpfile, 'r+', (err, fd) => {
      if (err) return callback(err)
      fs.futimes(fd, d, d, err => {
        if (err) return callback(err)
        fs.close(fd, err => {
          if (err) return callback(err)
          fs.stat(tmpfile, (err, stats) => {
            if (err) return callback(err)
            callback(null, stats.mtime > 1435410243000)
          })
        })
      })
    })
  })
}

function timeRemoveMillis (timestamp) {
  if (typeof timestamp === 'number') {
    return Math.floor(timestamp / 1000) * 1000
  } else if (timestamp instanceof Date) {
    return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
  } else {
    throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
  }
}

function utimesMillis (path, atime, mtime, callback) {
  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
  fs.open(path, 'r+', (err, fd) => {
    if (err) return callback(err)
    fs.futimes(fd, atime, mtime, futimesErr => {
      fs.close(fd, closeErr => {
        if (callback) callback(futimesErr || closeErr)
      })
    })
  })
}

module.exports = {
  hasMillisRes,
  hasMillisResSync,
  timeRemoveMillis,
  utimesMillis
}


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var PassThrough = __webpack_require__(8).PassThrough;
var objectAssign = __webpack_require__(49);

module.exports = function (opts) {
	opts = objectAssign({}, opts);

	var array = opts.array;
	var encoding = opts.encoding;

	var buffer = encoding === 'buffer';
	var objectMode = false;

	if (array) {
		objectMode = !(encoding || buffer);
	} else {
		encoding = encoding || 'utf8';
	}

	if (buffer) {
		encoding = null;
	}

	var len = 0;
	var ret = [];

	var stream = new PassThrough({objectMode: objectMode});

	if (encoding) {
		stream.setEncoding(encoding);
	}

	stream.on('data', function (chunk) {
		ret.push(chunk);

		if (objectMode) {
			len = ret.length;
		} else {
			len += chunk.length;
		}
	});

	stream.getBufferedValue = function () {
		if (array) {
			return ret;
		}
		return buffer ? Buffer.concat(ret, len) : ret.join('');
	};

	stream.getBufferedLength = function () {
		return len;
	};

	return stream;
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Promise = __webpack_require__(132);
var objectAssign = __webpack_require__(49);
var bufferStream = __webpack_require__(115);

function getStream(inputStream, opts) {
	if (!inputStream) {
		return Promise.reject(new Error('Expected a stream'));
	}

	opts = objectAssign({maxBuffer: Infinity}, opts);
	var maxBuffer = opts.maxBuffer;
	var stream;
	var clean;

	var p = new Promise(function (resolve, reject) {
		stream = bufferStream(opts);
		inputStream.once('error', error);
		inputStream.pipe(stream);

		stream.on('data', function () {
			if (stream.getBufferedLength() > maxBuffer) {
				reject(new Error('maxBuffer exceeded'));
			}
		});
		stream.once('error', error);
		stream.on('end', resolve);

		clean = function () {
			// some streams doesn't implement the stream.Readable interface correctly
			if (inputStream.unpipe) {
				inputStream.unpipe(stream);
			}
		};

		function error(err) {
			if (err) { // null check
				err.bufferedData = stream.getBufferedValue();
			}
			reject(err);
		}
	});

	p.then(clean, clean);

	return p.then(function () {
		return stream.getBufferedValue();
	});
}

module.exports = getStream;

module.exports.buffer = function (stream, opts) {
	return getStream(stream, objectAssign({}, opts, {encoding: 'buffer'}));
};

module.exports.array = function (stream, opts) {
	return getStream(stream, objectAssign({}, opts, {array: true}));
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = clone

function clone (obj) {
  if (obj === null || typeof obj !== 'object')
    return obj

  if (obj instanceof Object)
    var copy = { __proto__: obj.__proto__ }
  else
    var copy = Object.create(null)

  Object.getOwnPropertyNames(obj).forEach(function (key) {
    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
  })

  return copy
}


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var Stream = __webpack_require__(8).Stream

module.exports = legacy

function legacy (fs) {
  return {
    ReadStream: ReadStream,
    WriteStream: WriteStream
  }

  function ReadStream (path, options) {
    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

    Stream.call(this);

    var self = this;

    this.path = path;
    this.fd = null;
    this.readable = true;
    this.paused = false;

    this.flags = 'r';
    this.mode = 438; /*=0666*/
    this.bufferSize = 64 * 1024;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.encoding) this.setEncoding(this.encoding);

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.end === undefined) {
        this.end = Infinity;
      } else if ('number' !== typeof this.end) {
        throw TypeError('end must be a Number');
      }

      if (this.start > this.end) {
        throw new Error('start must be <= end');
      }

      this.pos = this.start;
    }

    if (this.fd !== null) {
      process.nextTick(function() {
        self._read();
      });
      return;
    }

    fs.open(this.path, this.flags, this.mode, function (err, fd) {
      if (err) {
        self.emit('error', err);
        self.readable = false;
        return;
      }

      self.fd = fd;
      self.emit('open', fd);
      self._read();
    })
  }

  function WriteStream (path, options) {
    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

    Stream.call(this);

    this.path = path;
    this.fd = null;
    this.writable = true;

    this.flags = 'w';
    this.encoding = 'binary';
    this.mode = 438; /*=0666*/
    this.bytesWritten = 0;

    options = options || {};

    // Mixin options into this
    var keys = Object.keys(options);
    for (var index = 0, length = keys.length; index < length; index++) {
      var key = keys[index];
      this[key] = options[key];
    }

    if (this.start !== undefined) {
      if ('number' !== typeof this.start) {
        throw TypeError('start must be a Number');
      }
      if (this.start < 0) {
        throw new Error('start must be >= zero');
      }

      this.pos = this.start;
    }

    this.busy = false;
    this._queue = [];

    if (this.fd === null) {
      this._open = fs.open;
      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
      this.flush();
    }
  }
}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(147)

var origCwd = process.cwd
var cwd = null

var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

process.cwd = function() {
  if (!cwd)
    cwd = origCwd.call(process)
  return cwd
}
try {
  process.cwd()
} catch (er) {}

var chdir = process.chdir
process.chdir = function(d) {
  cwd = null
  chdir.call(process, d)
}

module.exports = patch

function patch (fs) {
  // (re-)implement some things that are known busted or missing.

  // lchmod, broken prior to 0.6.2
  // back-port the fix here.
  if (constants.hasOwnProperty('O_SYMLINK') &&
      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
    patchLchmod(fs)
  }

  // lutimes implementation, or no-op
  if (!fs.lutimes) {
    patchLutimes(fs)
  }

  // https://github.com/isaacs/node-graceful-fs/issues/4
  // Chown should not fail on einval or eperm if non-root.
  // It should not fail on enosys ever, as this just indicates
  // that a fs doesn't support the intended operation.

  fs.chown = chownFix(fs.chown)
  fs.fchown = chownFix(fs.fchown)
  fs.lchown = chownFix(fs.lchown)

  fs.chmod = chmodFix(fs.chmod)
  fs.fchmod = chmodFix(fs.fchmod)
  fs.lchmod = chmodFix(fs.lchmod)

  fs.chownSync = chownFixSync(fs.chownSync)
  fs.fchownSync = chownFixSync(fs.fchownSync)
  fs.lchownSync = chownFixSync(fs.lchownSync)

  fs.chmodSync = chmodFixSync(fs.chmodSync)
  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

  fs.stat = statFix(fs.stat)
  fs.fstat = statFix(fs.fstat)
  fs.lstat = statFix(fs.lstat)

  fs.statSync = statFixSync(fs.statSync)
  fs.fstatSync = statFixSync(fs.fstatSync)
  fs.lstatSync = statFixSync(fs.lstatSync)

  // if lchmod/lchown do not exist, then make them no-ops
  if (!fs.lchmod) {
    fs.lchmod = function (path, mode, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchmodSync = function () {}
  }
  if (!fs.lchown) {
    fs.lchown = function (path, uid, gid, cb) {
      if (cb) process.nextTick(cb)
    }
    fs.lchownSync = function () {}
  }

  // on Windows, A/V software can lock the directory, causing this
  // to fail with an EACCES or EPERM if the directory contains newly
  // created files.  Try again on failure, for up to 60 seconds.

  // Set the timeout this long because some Windows Anti-Virus, such as Parity
  // bit9, may lock files for up to a minute, causing npm package install
  // failures. Also, take care to yield the scheduler. Windows scheduling gives
  // CPU to a busy looping process, which can cause the program causing the lock
  // contention to be starved of CPU by node, so the contention doesn't resolve.
  if (platform === "win32") {
    fs.rename = (function (fs$rename) { return function (from, to, cb) {
      var start = Date.now()
      var backoff = 0;
      fs$rename(from, to, function CB (er) {
        if (er
            && (er.code === "EACCES" || er.code === "EPERM")
            && Date.now() - start < 60000) {
          setTimeout(function() {
            fs.stat(to, function (stater, st) {
              if (stater && stater.code === "ENOENT")
                fs$rename(from, to, CB);
              else
                cb(er)
            })
          }, backoff)
          if (backoff < 100)
            backoff += 10;
          return;
        }
        if (cb) cb(er)
      })
    }})(fs.rename)
  }

  // if read() returns EAGAIN, then just try it again.
  fs.read = (function (fs$read) {
    function read (fd, buffer, offset, length, position, callback_) {
      var callback
      if (callback_ && typeof callback_ === 'function') {
        var eagCounter = 0
        callback = function (er, _, __) {
          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
            eagCounter ++
            return fs$read.call(fs, fd, buffer, offset, length, position, callback)
          }
          callback_.apply(this, arguments)
        }
      }
      return fs$read.call(fs, fd, buffer, offset, length, position, callback)
    }

    // This ensures `util.promisify` works as it does for native `fs.read`.
    read.__proto__ = fs$read
    return read
  })(fs.read)

  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
    var eagCounter = 0
    while (true) {
      try {
        return fs$readSync.call(fs, fd, buffer, offset, length, position)
      } catch (er) {
        if (er.code === 'EAGAIN' && eagCounter < 10) {
          eagCounter ++
          continue
        }
        throw er
      }
    }
  }})(fs.readSync)

  function patchLchmod (fs) {
    fs.lchmod = function (path, mode, callback) {
      fs.open( path
             , constants.O_WRONLY | constants.O_SYMLINK
             , mode
             , function (err, fd) {
        if (err) {
          if (callback) callback(err)
          return
        }
        // prefer to return the chmod error, if one occurs,
        // but still try to close, and report closing errors if they occur.
        fs.fchmod(fd, mode, function (err) {
          fs.close(fd, function(err2) {
            if (callback) callback(err || err2)
          })
        })
      })
    }

    fs.lchmodSync = function (path, mode) {
      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

      // prefer to return the chmod error, if one occurs,
      // but still try to close, and report closing errors if they occur.
      var threw = true
      var ret
      try {
        ret = fs.fchmodSync(fd, mode)
        threw = false
      } finally {
        if (threw) {
          try {
            fs.closeSync(fd)
          } catch (er) {}
        } else {
          fs.closeSync(fd)
        }
      }
      return ret
    }
  }

  function patchLutimes (fs) {
    if (constants.hasOwnProperty("O_SYMLINK")) {
      fs.lutimes = function (path, at, mt, cb) {
        fs.open(path, constants.O_SYMLINK, function (er, fd) {
          if (er) {
            if (cb) cb(er)
            return
          }
          fs.futimes(fd, at, mt, function (er) {
            fs.close(fd, function (er2) {
              if (cb) cb(er || er2)
            })
          })
        })
      }

      fs.lutimesSync = function (path, at, mt) {
        var fd = fs.openSync(path, constants.O_SYMLINK)
        var ret
        var threw = true
        try {
          ret = fs.futimesSync(fd, at, mt)
          threw = false
        } finally {
          if (threw) {
            try {
              fs.closeSync(fd)
            } catch (er) {}
          } else {
            fs.closeSync(fd)
          }
        }
        return ret
      }

    } else {
      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
      fs.lutimesSync = function () {}
    }
  }

  function chmodFix (orig) {
    if (!orig) return orig
    return function (target, mode, cb) {
      return orig.call(fs, target, mode, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chmodFixSync (orig) {
    if (!orig) return orig
    return function (target, mode) {
      try {
        return orig.call(fs, target, mode)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }


  function chownFix (orig) {
    if (!orig) return orig
    return function (target, uid, gid, cb) {
      return orig.call(fs, target, uid, gid, function (er) {
        if (chownErOk(er)) er = null
        if (cb) cb.apply(this, arguments)
      })
    }
  }

  function chownFixSync (orig) {
    if (!orig) return orig
    return function (target, uid, gid) {
      try {
        return orig.call(fs, target, uid, gid)
      } catch (er) {
        if (!chownErOk(er)) throw er
      }
    }
  }

  function statFix (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options, cb) {
      if (typeof options === 'function') {
        cb = options
        options = null
      }
      function callback (er, stats) {
        if (stats) {
          if (stats.uid < 0) stats.uid += 0x100000000
          if (stats.gid < 0) stats.gid += 0x100000000
        }
        if (cb) cb.apply(this, arguments)
      }
      return options ? orig.call(fs, target, options, callback)
        : orig.call(fs, target, callback)
    }
  }

  function statFixSync (orig) {
    if (!orig) return orig
    // Older versions of Node erroneously returned signed integers for
    // uid + gid.
    return function (target, options) {
      var stats = options ? orig.call(fs, target, options)
        : orig.call(fs, target)
      if (stats.uid < 0) stats.uid += 0x100000000
      if (stats.gid < 0) stats.gid += 0x100000000
      return stats;
    }
  }

  // ENOSYS means that the fs doesn't support the op. Just ignore
  // that, because it doesn't matter.
  //
  // if there's no getuid, or if getuid() is something other
  // than 0, and the error is EINVAL or EPERM, then just ignore
  // it.
  //
  // This specific case is a silent failure in cp, install, tar,
  // and most other unix tools that manage permissions.
  //
  // When running as root, or if other types of errors are
  // encountered, then it's strict.
  function chownErOk (er) {
    if (!er)
      return true

    if (er.code === "ENOSYS")
      return true

    var nonroot = !process.getuid || process.getuid() !== 0
    if (nonroot) {
      if (er.code === "EINVAL" || er.code === "EPERM")
        return true
    }

    return false
  }
}


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var typeMap = {};
var types = __webpack_require__(37);

// load all available handlers
types.forEach(function (type) {
  typeMap[type] = __webpack_require__(36)("./" + type).detect;
});

module.exports = function (buffer, filepath) {
  var type, result;
  for (type in typeMap) {
    result = typeMap[type](buffer, filepath);
    if (result) {
      return type;
    }
  }
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Abstract reading multi-byte unsigned integers
function readUInt (buffer, bits, offset, isBigEndian) {
  offset = offset || 0;
  var endian = !!isBigEndian ? 'BE' : 'LE';
  var method = buffer['readUInt' + bits + endian];
  return method.call(buffer, offset);
}

module.exports = readUInt;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(2)
var core
if (process.platform === 'win32' || global.TESTING_WINDOWS) {
  core = __webpack_require__(124)
} else {
  core = __webpack_require__(123)
}

module.exports = isexe
isexe.sync = sync

function isexe (path, options, cb) {
  if (typeof options === 'function') {
    cb = options
    options = {}
  }

  if (!cb) {
    if (typeof Promise !== 'function') {
      throw new TypeError('callback not provided')
    }

    return new Promise(function (resolve, reject) {
      isexe(path, options || {}, function (er, is) {
        if (er) {
          reject(er)
        } else {
          resolve(is)
        }
      })
    })
  }

  core(path, options || {}, function (er, is) {
    // ignore EACCES because that just means we aren't allowed to run it
    if (er) {
      if (er.code === 'EACCES' || options && options.ignoreErrors) {
        er = null
        is = false
      }
    }
    cb(er, is)
  })
}

function sync (path, options) {
  // my kingdom for a filtered catch
  try {
    return core.sync(path, options || {})
  } catch (er) {
    if (options && options.ignoreErrors || er.code === 'EACCES') {
      return false
    } else {
      throw er
    }
  }
}


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = isexe
isexe.sync = sync

var fs = __webpack_require__(2)

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), options)
}

function checkStat (stat, options) {
  return stat.isFile() && checkMode(stat, options)
}

function checkMode (stat, options) {
  var mod = stat.mode
  var uid = stat.uid
  var gid = stat.gid

  var myUid = options.uid !== undefined ?
    options.uid : process.getuid && process.getuid()
  var myGid = options.gid !== undefined ?
    options.gid : process.getgid && process.getgid()

  var u = parseInt('100', 8)
  var g = parseInt('010', 8)
  var o = parseInt('001', 8)
  var ug = u | g

  var ret = (mod & o) ||
    (mod & g) && gid === myGid ||
    (mod & u) && uid === myUid ||
    (mod & ug) && myUid === 0

  return ret
}


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = isexe
isexe.sync = sync

var fs = __webpack_require__(2)

function checkPathExt (path, options) {
  var pathext = options.pathExt !== undefined ?
    options.pathExt : process.env.PATHEXT

  if (!pathext) {
    return true
  }

  pathext = pathext.split(';')
  if (pathext.indexOf('') !== -1) {
    return true
  }
  for (var i = 0; i < pathext.length; i++) {
    var p = pathext[i].toLowerCase()
    if (p && path.substr(-p.length).toLowerCase() === p) {
      return true
    }
  }
  return false
}

function checkStat (stat, path, options) {
  if (!stat.isSymbolicLink() && !stat.isFile()) {
    return false
  }
  return checkPathExt(path, options)
}

function isexe (path, options, cb) {
  fs.stat(path, function (er, stat) {
    cb(er, er ? false : checkStat(stat, path, options))
  })
}

function sync (path, options) {
  return checkStat(fs.statSync(path), path, options)
}


/***/ }),
/* 125 */
/***/ (function(module, exports) {

// JavaScript Image Resizer (c) 2012 - Grant Galitz
// Released to public domain 29 July 2013: https://github.com/grantgalitz/JS-Image-Resizer/issues/4

function Resize(widthOriginal, heightOriginal, targetWidth, targetHeight, blendAlpha, interpolationPass, resizeCallback) {
    this.widthOriginal = Math.abs(parseInt(widthOriginal) || 0);
    this.heightOriginal = Math.abs(parseInt(heightOriginal) || 0);
    this.targetWidth = Math.abs(parseInt(targetWidth) || 0);
    this.targetHeight = Math.abs(parseInt(targetHeight) || 0);
    this.colorChannels = (!!blendAlpha) ? 4 : 3;
    this.interpolationPass = !!interpolationPass;
    this.resizeCallback = (typeof resizeCallback == "function") ? resizeCallback : function (returnedArray) {};
    this.targetWidthMultipliedByChannels = this.targetWidth * this.colorChannels;
    this.originalWidthMultipliedByChannels = this.widthOriginal * this.colorChannels;
    this.originalHeightMultipliedByChannels = this.heightOriginal * this.colorChannels;
    this.widthPassResultSize = this.targetWidthMultipliedByChannels * this.heightOriginal;
    this.finalResultSize = this.targetWidthMultipliedByChannels * this.targetHeight;
    this.initialize();
}

Resize.prototype.initialize = function () {
    //Perform some checks:
    if (this.widthOriginal > 0 && this.heightOriginal > 0 && this.targetWidth > 0 && this.targetHeight > 0) {
        this.configurePasses();
    } else {
        throw (new Error("Invalid settings specified for the resizer."));
    }
}

Resize.prototype.configurePasses = function () {
    if (this.widthOriginal == this.targetWidth) {
        //Bypass the width resizer pass:
        this.resizeWidth = this.bypassResizer;
    } else {
        //Setup the width resizer pass:
        this.ratioWeightWidthPass = this.widthOriginal / this.targetWidth;
        if (this.ratioWeightWidthPass < 1 && this.interpolationPass) {
            this.initializeFirstPassBuffers(true);
            this.resizeWidth = (this.colorChannels == 4) ? this.resizeWidthInterpolatedRGBA : this.resizeWidthInterpolatedRGB;
        } else {
            this.initializeFirstPassBuffers(false);
            this.resizeWidth = (this.colorChannels == 4) ? this.resizeWidthRGBA : this.resizeWidthRGB;
        }
    }
    if (this.heightOriginal == this.targetHeight) {
        //Bypass the height resizer pass:
        this.resizeHeight = this.bypassResizer;
    } else {
        //Setup the height resizer pass:
        this.ratioWeightHeightPass = this.heightOriginal / this.targetHeight;
        if (this.ratioWeightHeightPass < 1 && this.interpolationPass) {
            this.initializeSecondPassBuffers(true);
            this.resizeHeight = this.resizeHeightInterpolated;
        } else {
            this.initializeSecondPassBuffers(false);
            this.resizeHeight = (this.colorChannels == 4) ? this.resizeHeightRGBA : this.resizeHeightRGB;
        }
    }
}

Resize.prototype._resizeWidthInterpolatedRGBChannels = function (buffer, fourthChannel) {
    var channelsNum = fourthChannel ? 4 : 3;
    var ratioWeight = this.ratioWeightWidthPass;
    var weight = 0;
    var finalOffset = 0;
    var pixelOffset = 0;
    var firstWeight = 0;
    var secondWeight = 0;
    var outputBuffer = this.widthBuffer;
    //Handle for only one interpolation input being valid for start calculation:
    for (var targetPosition = 0; weight < 1 / 3; targetPosition += channelsNum, weight += ratioWeight) {
        for (finalOffset = targetPosition, pixelOffset = 0; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {
            outputBuffer[finalOffset] = buffer[pixelOffset];
            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];
            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];
            if (!fourthChannel) continue;
            outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];
        }
    }
    //Adjust for overshoot of the last pass's counter:
    weight -= 1 / 3;
    for (var interpolationWidthSourceReadStop = this.widthOriginal - 1; weight < interpolationWidthSourceReadStop; targetPosition += channelsNum, weight += ratioWeight) {
        //Calculate weightings:
        secondWeight = weight % 1;
        firstWeight = 1 - secondWeight;
        //Interpolate:
        for (finalOffset = targetPosition, pixelOffset = Math.floor(weight) * channelsNum; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {
            outputBuffer[finalOffset] = (buffer[pixelOffset] * firstWeight) + (buffer[pixelOffset + channelsNum] * secondWeight);
            outputBuffer[finalOffset + 1] = (buffer[pixelOffset + 1] * firstWeight) + (buffer[pixelOffset + channelsNum + 1] * secondWeight);
            outputBuffer[finalOffset + 2] = (buffer[pixelOffset + 2] * firstWeight) + (buffer[pixelOffset + channelsNum + 2] * secondWeight);
            if (!fourthChannel) continue;
            outputBuffer[finalOffset + 3] = (buffer[pixelOffset + 3] * firstWeight) + (buffer[pixelOffset + channelsNum + 3] * secondWeight);
        }
    }
    //Handle for only one interpolation input being valid for end calculation:
    for (interpolationWidthSourceReadStop = this.originalWidthMultipliedByChannels - channelsNum; targetPosition < this.targetWidthMultipliedByChannels; targetPosition += channelsNum) {
        for (finalOffset = targetPosition, pixelOffset = interpolationWidthSourceReadStop; finalOffset < this.widthPassResultSize; pixelOffset += this.originalWidthMultipliedByChannels, finalOffset += this.targetWidthMultipliedByChannels) {
            outputBuffer[finalOffset] = buffer[pixelOffset];
            outputBuffer[finalOffset + 1] = buffer[pixelOffset + 1];
            outputBuffer[finalOffset + 2] = buffer[pixelOffset + 2];
            if (!fourthChannel) continue;
            outputBuffer[finalOffset + 3] = buffer[pixelOffset + 3];
        }
    }
    return outputBuffer;
}

Resize.prototype._resizeWidthRGBChannels = function (buffer, fourthChannel) {
    var channelsNum = fourthChannel ? 4 : 3;
    var ratioWeight = this.ratioWeightWidthPass;
    var ratioWeightDivisor = 1 / ratioWeight;
    var weight = 0;
    var amountToNext = 0;
    var actualPosition = 0;
    var currentPosition = 0;
    var line = 0;
    var pixelOffset = 0;
    var outputOffset = 0;
    var nextLineOffsetOriginalWidth = this.originalWidthMultipliedByChannels - channelsNum + 1;
    var nextLineOffsetTargetWidth = this.targetWidthMultipliedByChannels - channelsNum + 1;
    var output = this.outputWidthWorkBench;
    var outputBuffer = this.widthBuffer;
    var trustworthyColorsCount = this.outputWidthWorkBenchOpaquePixelsCount;
    var multiplier = 1;
    var r = 0;
    var g = 0;
    var b = 0;
    var a = 0;
    do {
        for (line = 0; line < this.originalHeightMultipliedByChannels;) {
            output[line++] = 0;
            output[line++] = 0;
            output[line++] = 0;
            if (!fourthChannel) continue;
            output[line++] = 0;
            trustworthyColorsCount[line / channelsNum - 1] = 0;
        }
        weight = ratioWeight;
        do {
            amountToNext = 1 + actualPosition - currentPosition;
            multiplier = Math.min(weight, amountToNext);
            for (line = 0, pixelOffset = actualPosition; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetOriginalWidth) {
                r = buffer[pixelOffset];
                g = buffer[++pixelOffset];
                b = buffer[++pixelOffset];
                a = fourthChannel ? buffer[++pixelOffset] : 255;
                // Ignore RGB values if pixel is completely transparent
                output[line++] += (a ? r : 0) * multiplier;
                output[line++] += (a ? g : 0) * multiplier;
                output[line++] += (a ? b : 0) * multiplier;
                if (!fourthChannel) continue;
                output[line++] += a * multiplier;
                trustworthyColorsCount[line / channelsNum - 1] += (a ? multiplier : 0);
            }
            if (weight >= amountToNext) {
                currentPosition = actualPosition = actualPosition + channelsNum;
                weight -= amountToNext;
            } else {
                currentPosition += weight;
                break;
            }
        } while (weight > 0 && actualPosition < this.originalWidthMultipliedByChannels);
        for (line = 0, pixelOffset = outputOffset; line < this.originalHeightMultipliedByChannels; pixelOffset += nextLineOffsetTargetWidth) {
            weight = fourthChannel ? trustworthyColorsCount[line / channelsNum] : 1;
            multiplier = fourthChannel ? (weight ? 1 / weight : 0) : ratioWeightDivisor;
            outputBuffer[pixelOffset] = output[line++] * multiplier;
            outputBuffer[++pixelOffset] = output[line++] * multiplier;
            outputBuffer[++pixelOffset] = output[line++] * multiplier;
            if (!fourthChannel) continue;
            outputBuffer[++pixelOffset] = output[line++] * ratioWeightDivisor;
        }
        outputOffset += channelsNum;
    } while (outputOffset < this.targetWidthMultipliedByChannels);
    return outputBuffer;
}

Resize.prototype._resizeHeightRGBChannels = function(buffer, fourthChannel) {
    var ratioWeight = this.ratioWeightHeightPass;
    var ratioWeightDivisor = 1 / ratioWeight;
    var weight = 0;
    var amountToNext = 0;
    var actualPosition = 0;
    var currentPosition = 0;
    var pixelOffset = 0;
    var outputOffset = 0;
    var output = this.outputHeightWorkBench;
    var outputBuffer = this.heightBuffer;
    var trustworthyColorsCount = this.outputHeightWorkBenchOpaquePixelsCount;
    var caret = 0;
    var multiplier = 1;
    var r = 0;
    var g = 0;
    var b = 0;
    var a = 0;
    do {
        for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {
            output[pixelOffset++] = 0;
            output[pixelOffset++] = 0;
            output[pixelOffset++] = 0;
            if (!fourthChannel) continue;
            output[pixelOffset++] = 0;
            trustworthyColorsCount[pixelOffset / 4 - 1] = 0;
        }
        weight = ratioWeight;
        do {
            amountToNext = 1 + actualPosition - currentPosition;
            multiplier = Math.min(weight, amountToNext);
            caret = actualPosition;
            for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {
                r = buffer[caret++];
                g = buffer[caret++];
                b = buffer[caret++];
                a = fourthChannel ? buffer[caret++] : 255;
                // Ignore RGB values if pixel is completely transparent
                output[pixelOffset++] += (a ? r : 0) * multiplier;
                output[pixelOffset++] += (a ? g : 0) * multiplier;
                output[pixelOffset++] += (a ? b : 0) * multiplier;
                if (!fourthChannel) continue;
                output[pixelOffset++] += a * multiplier;
                trustworthyColorsCount[pixelOffset / 4 - 1] += (a ? multiplier : 0);
            }
            if (weight >= amountToNext) {
                currentPosition = actualPosition = caret;
                weight -= amountToNext;
            } else {
                currentPosition += weight;
                break;
            }
        } while (weight > 0 && actualPosition < this.widthPassResultSize);
        for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {
            weight = fourthChannel ? trustworthyColorsCount[pixelOffset / 4] : 1;
            multiplier = fourthChannel ? (weight ? 1 / weight : 0) : ratioWeightDivisor;
            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);
            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);
            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * multiplier);
            if (!fourthChannel) continue;
            outputBuffer[outputOffset++] = Math.round(output[pixelOffset++] * ratioWeightDivisor);
        }
    } while (outputOffset < this.finalResultSize);
    
    return outputBuffer;
}

Resize.prototype.resizeWidthInterpolatedRGB = function (buffer) {
    return this._resizeWidthInterpolatedRGBChannels(buffer, false);
}

Resize.prototype.resizeWidthInterpolatedRGBA = function (buffer) {
    return this._resizeWidthInterpolatedRGBChannels(buffer, true);
}

Resize.prototype.resizeWidthRGB = function (buffer) {
    return this._resizeWidthRGBChannels(buffer, false);
}

Resize.prototype.resizeWidthRGBA = function (buffer) {
    return this._resizeWidthRGBChannels(buffer, true);
}

Resize.prototype.resizeHeightInterpolated = function (buffer) {
    var ratioWeight = this.ratioWeightHeightPass;
    var weight = 0;
    var finalOffset = 0;
    var pixelOffset = 0;
    var pixelOffsetAccumulated = 0;
    var pixelOffsetAccumulated2 = 0;
    var firstWeight = 0;
    var secondWeight = 0;
    var outputBuffer = this.heightBuffer;
    //Handle for only one interpolation input being valid for start calculation:
    for (; weight < 1 / 3; weight += ratioWeight) {
        for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels;) {
            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffset++]);
        }
    }
    //Adjust for overshoot of the last pass's counter:
    weight -= 1 / 3;
    for (var interpolationHeightSourceReadStop = this.heightOriginal - 1; weight < interpolationHeightSourceReadStop; weight += ratioWeight) {
        //Calculate weightings:
        secondWeight = weight % 1;
        firstWeight = 1 - secondWeight;
        //Interpolate:
        pixelOffsetAccumulated = Math.floor(weight) * this.targetWidthMultipliedByChannels;
        pixelOffsetAccumulated2 = pixelOffsetAccumulated + this.targetWidthMultipliedByChannels;
        for (pixelOffset = 0; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {
            outputBuffer[finalOffset++] = Math.round((buffer[pixelOffsetAccumulated++] * firstWeight) + (buffer[pixelOffsetAccumulated2++] * secondWeight));
        }
    }
    //Handle for only one interpolation input being valid for end calculation:
    while (finalOffset < this.finalResultSize) {
        for (pixelOffset = 0, pixelOffsetAccumulated = interpolationHeightSourceReadStop * this.targetWidthMultipliedByChannels; pixelOffset < this.targetWidthMultipliedByChannels; ++pixelOffset) {
            outputBuffer[finalOffset++] = Math.round(buffer[pixelOffsetAccumulated++]);
        }
    }
    return outputBuffer;
}

Resize.prototype.resizeHeightRGB = function (buffer) {
    return this._resizeHeightRGBChannels(buffer, false);
}

Resize.prototype.resizeHeightRGBA = function (buffer) {
    return this._resizeHeightRGBChannels(buffer, true);
}

Resize.prototype.resize = function (buffer) {
    this.resizeCallback(this.resizeHeight(this.resizeWidth(buffer)));
}

Resize.prototype.bypassResizer = function (buffer) {
    //Just return the buffer passsed:
    return buffer;
}

Resize.prototype.initializeFirstPassBuffers = function (BILINEARAlgo) {
    //Initialize the internal width pass buffers:
    this.widthBuffer = this.generateFloatBuffer(this.widthPassResultSize);
    if (!BILINEARAlgo) {
        this.outputWidthWorkBench = this.generateFloatBuffer(this.originalHeightMultipliedByChannels);
        if (this.colorChannels > 3) {
            this.outputWidthWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.heightOriginal);
        }
    }
}

Resize.prototype.initializeSecondPassBuffers = function (BILINEARAlgo) {
    //Initialize the internal height pass buffers:
    this.heightBuffer = this.generateUint8Buffer(this.finalResultSize);
    if (!BILINEARAlgo) {
        this.outputHeightWorkBench = this.generateFloatBuffer(this.targetWidthMultipliedByChannels);
        if (this.colorChannels > 3) {
            this.outputHeightWorkBenchOpaquePixelsCount = this.generateFloat64Buffer(this.targetWidth);
        }
    }
}

Resize.prototype.generateFloatBuffer = function (bufferLength) {
    //Generate a float32 typed array buffer:
    try {
        return new Float32Array(bufferLength);
    } catch (error) {
        return [];
    }
}

Resize.prototype.generateFloat64Buffer = function (bufferLength) {
    //Generate a float64 typed array buffer:
    try {
        return new Float64Array(bufferLength);
    } catch (error) {
        return [];
    }
}

Resize.prototype.generateUint8Buffer = function (bufferLength) {
    //Generate a uint8 typed array buffer:
    try {
        return new Uint8Array(bufferLength);
    } catch (error) {
        return [];
    }
}

module.exports = Resize;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/*
   Copyright 2011 notmasteryet

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// - The JPEG specification can be found in the ITU CCITT Recommendation T.81
//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
// - The JFIF specification can be found in the JPEG File Interchange Format
//   (www.w3.org/Graphics/JPEG/jfif3.pdf)
// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
//   in PostScript Level 2, Technical Note #5116
//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

var JpegImage = (function jpegImage() {
  "use strict";
  var dctZigZag = new Int32Array([
     0,
     1,  8,
    16,  9,  2,
     3, 10, 17, 24,
    32, 25, 18, 11, 4,
     5, 12, 19, 26, 33, 40,
    48, 41, 34, 27, 20, 13,  6,
     7, 14, 21, 28, 35, 42, 49, 56,
    57, 50, 43, 36, 29, 22, 15,
    23, 30, 37, 44, 51, 58,
    59, 52, 45, 38, 31,
    39, 46, 53, 60,
    61, 54, 47,
    55, 62,
    63
  ]);

  var dctCos1  =  4017   // cos(pi/16)
  var dctSin1  =   799   // sin(pi/16)
  var dctCos3  =  3406   // cos(3*pi/16)
  var dctSin3  =  2276   // sin(3*pi/16)
  var dctCos6  =  1567   // cos(6*pi/16)
  var dctSin6  =  3784   // sin(6*pi/16)
  var dctSqrt2 =  5793   // sqrt(2)
  var dctSqrt1d2 = 2896  // sqrt(2) / 2

  function constructor() {
  }

  function buildHuffmanTable(codeLengths, values) {
    var k = 0, code = [], i, j, length = 16;
    while (length > 0 && !codeLengths[length - 1])
      length--;
    code.push({children: [], index: 0});
    var p = code[0], q;
    for (i = 0; i < length; i++) {
      for (j = 0; j < codeLengths[i]; j++) {
        p = code.pop();
        p.children[p.index] = values[k];
        while (p.index > 0) {
          p = code.pop();
        }
        p.index++;
        code.push(p);
        while (code.length <= i) {
          code.push(q = {children: [], index: 0});
          p.children[p.index] = q.children;
          p = q;
        }
        k++;
      }
      if (i + 1 < length) {
        // p here points to last code
        code.push(q = {children: [], index: 0});
        p.children[p.index] = q.children;
        p = q;
      }
    }
    return code[0].children;
  }

  function decodeScan(data, offset,
                      frame, components, resetInterval,
                      spectralStart, spectralEnd,
                      successivePrev, successive) {
    var precision = frame.precision;
    var samplesPerLine = frame.samplesPerLine;
    var scanLines = frame.scanLines;
    var mcusPerLine = frame.mcusPerLine;
    var progressive = frame.progressive;
    var maxH = frame.maxH, maxV = frame.maxV;

    var startOffset = offset, bitsData = 0, bitsCount = 0;
    function readBit() {
      if (bitsCount > 0) {
        bitsCount--;
        return (bitsData >> bitsCount) & 1;
      }
      bitsData = data[offset++];
      if (bitsData == 0xFF) {
        var nextByte = data[offset++];
        if (nextByte) {
          throw "unexpected marker: " + ((bitsData << 8) | nextByte).toString(16);
        }
        // unstuff 0
      }
      bitsCount = 7;
      return bitsData >>> 7;
    }
    function decodeHuffman(tree) {
      var node = tree, bit;
      while ((bit = readBit()) !== null) {
        node = node[bit];
        if (typeof node === 'number')
          return node;
        if (typeof node !== 'object')
          throw "invalid huffman sequence";
      }
      return null;
    }
    function receive(length) {
      var n = 0;
      while (length > 0) {
        var bit = readBit();
        if (bit === null) return;
        n = (n << 1) | bit;
        length--;
      }
      return n;
    }
    function receiveAndExtend(length) {
      var n = receive(length);
      if (n >= 1 << (length - 1))
        return n;
      return n + (-1 << length) + 1;
    }
    function decodeBaseline(component, zz) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t);
      zz[0]= (component.pred += diff);
      var k = 1;
      while (k < 64) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15)
            break;
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        zz[z] = receiveAndExtend(s);
        k++;
      }
    }
    function decodeDCFirst(component, zz) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);
      zz[0] = (component.pred += diff);
    }
    function decodeDCSuccessive(component, zz) {
      zz[0] |= readBit() << successive;
    }
    var eobrun = 0;
    function decodeACFirst(component, zz) {
      if (eobrun > 0) {
        eobrun--;
        return;
      }
      var k = spectralStart, e = spectralEnd;
      while (k <= e) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15, r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            eobrun = receive(r) + (1 << r) - 1;
            break;
          }
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        zz[z] = receiveAndExtend(s) * (1 << successive);
        k++;
      }
    }
    var successiveACState = 0, successiveACNextValue;
    function decodeACSuccessive(component, zz) {
      var k = spectralStart, e = spectralEnd, r = 0;
      while (k <= e) {
        var z = dctZigZag[k];
        switch (successiveACState) {
        case 0: // initial state
          var rs = decodeHuffman(component.huffmanTableAC);
          var s = rs & 15, r = rs >> 4;
          if (s === 0) {
            if (r < 15) {
              eobrun = receive(r) + (1 << r);
              successiveACState = 4;
            } else {
              r = 16;
              successiveACState = 1;
            }
          } else {
            if (s !== 1)
              throw "invalid ACn encoding";
            successiveACNextValue = receiveAndExtend(s);
            successiveACState = r ? 2 : 3;
          }
          continue;
        case 1: // skipping r zero items
        case 2:
          if (zz[z])
            zz[z] += (readBit() << successive);
          else {
            r--;
            if (r === 0)
              successiveACState = successiveACState == 2 ? 3 : 0;
          }
          break;
        case 3: // set value for a zero item
          if (zz[z])
            zz[z] += (readBit() << successive);
          else {
            zz[z] = successiveACNextValue << successive;
            successiveACState = 0;
          }
          break;
        case 4: // eob
          if (zz[z])
            zz[z] += (readBit() << successive);
          break;
        }
        k++;
      }
      if (successiveACState === 4) {
        eobrun--;
        if (eobrun === 0)
          successiveACState = 0;
      }
    }
    function decodeMcu(component, decode, mcu, row, col) {
      var mcuRow = (mcu / mcusPerLine) | 0;
      var mcuCol = mcu % mcusPerLine;
      var blockRow = mcuRow * component.v + row;
      var blockCol = mcuCol * component.h + col;
      decode(component, component.blocks[blockRow][blockCol]);
    }
    function decodeBlock(component, decode, mcu) {
      var blockRow = (mcu / component.blocksPerLine) | 0;
      var blockCol = mcu % component.blocksPerLine;
      decode(component, component.blocks[blockRow][blockCol]);
    }

    var componentsLength = components.length;
    var component, i, j, k, n;
    var decodeFn;
    if (progressive) {
      if (spectralStart === 0)
        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
      else
        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
    } else {
      decodeFn = decodeBaseline;
    }

    var mcu = 0, marker;
    var mcuExpected;
    if (componentsLength == 1) {
      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
    } else {
      mcuExpected = mcusPerLine * frame.mcusPerColumn;
    }
    if (!resetInterval) resetInterval = mcuExpected;

    var h, v;
    while (mcu < mcuExpected) {
      // reset interval stuff
      for (i = 0; i < componentsLength; i++)
        components[i].pred = 0;
      eobrun = 0;

      if (componentsLength == 1) {
        component = components[0];
        for (n = 0; n < resetInterval; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < resetInterval; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            h = component.h;
            v = component.v;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;

          // If we've reached our expected MCU's, stop decoding
          if (mcu === mcuExpected) break;
        }
      }

      // find marker
      bitsCount = 0;
      marker = (data[offset] << 8) | data[offset + 1];
      if (marker < 0xFF00) {
        throw "marker was not found";
      }

      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx
        offset += 2;
      }
      else
        break;
    }

    return offset - startOffset;
  }

  function buildComponentData(frame, component) {
    var lines = [];
    var blocksPerLine = component.blocksPerLine;
    var blocksPerColumn = component.blocksPerColumn;
    var samplesPerLine = blocksPerLine << 3;
    var R = new Int32Array(64), r = new Uint8Array(64);

    // A port of poppler's IDCT method which in turn is taken from:
    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
    //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
    //   988-991.
    function quantizeAndInverse(zz, dataOut, dataIn) {
      var qt = component.quantizationTable;
      var v0, v1, v2, v3, v4, v5, v6, v7, t;
      var p = dataIn;
      var i;

      // dequant
      for (i = 0; i < 64; i++)
        p[i] = zz[i] * qt[i];

      // inverse DCT on rows
      for (i = 0; i < 8; ++i) {
        var row = 8 * i;

        // check for all-zero AC coefficients
        if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 &&
            p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 &&
            p[7 + row] == 0) {
          t = (dctSqrt2 * p[0 + row] + 512) >> 10;
          p[0 + row] = t;
          p[1 + row] = t;
          p[2 + row] = t;
          p[3 + row] = t;
          p[4 + row] = t;
          p[5 + row] = t;
          p[6 + row] = t;
          p[7 + row] = t;
          continue;
        }

        // stage 4
        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;
        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;
        v2 = p[2 + row];
        v3 = p[6 + row];
        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;
        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;
        v5 = p[3 + row] << 4;
        v6 = p[5 + row] << 4;

        // stage 3
        t = (v0 - v1+ 1) >> 1;
        v0 = (v0 + v1 + 1) >> 1;
        v1 = t;
        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
        v3 = t;
        t = (v4 - v6 + 1) >> 1;
        v4 = (v4 + v6 + 1) >> 1;
        v6 = t;
        t = (v7 + v5 + 1) >> 1;
        v5 = (v7 - v5 + 1) >> 1;
        v7 = t;

        // stage 2
        t = (v0 - v3 + 1) >> 1;
        v0 = (v0 + v3 + 1) >> 1;
        v3 = t;
        t = (v1 - v2 + 1) >> 1;
        v1 = (v1 + v2 + 1) >> 1;
        v2 = t;
        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
        v7 = t;
        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
        v6 = t;

        // stage 1
        p[0 + row] = v0 + v7;
        p[7 + row] = v0 - v7;
        p[1 + row] = v1 + v6;
        p[6 + row] = v1 - v6;
        p[2 + row] = v2 + v5;
        p[5 + row] = v2 - v5;
        p[3 + row] = v3 + v4;
        p[4 + row] = v3 - v4;
      }

      // inverse DCT on columns
      for (i = 0; i < 8; ++i) {
        var col = i;

        // check for all-zero AC coefficients
        if (p[1*8 + col] == 0 && p[2*8 + col] == 0 && p[3*8 + col] == 0 &&
            p[4*8 + col] == 0 && p[5*8 + col] == 0 && p[6*8 + col] == 0 &&
            p[7*8 + col] == 0) {
          t = (dctSqrt2 * dataIn[i+0] + 8192) >> 14;
          p[0*8 + col] = t;
          p[1*8 + col] = t;
          p[2*8 + col] = t;
          p[3*8 + col] = t;
          p[4*8 + col] = t;
          p[5*8 + col] = t;
          p[6*8 + col] = t;
          p[7*8 + col] = t;
          continue;
        }

        // stage 4
        v0 = (dctSqrt2 * p[0*8 + col] + 2048) >> 12;
        v1 = (dctSqrt2 * p[4*8 + col] + 2048) >> 12;
        v2 = p[2*8 + col];
        v3 = p[6*8 + col];
        v4 = (dctSqrt1d2 * (p[1*8 + col] - p[7*8 + col]) + 2048) >> 12;
        v7 = (dctSqrt1d2 * (p[1*8 + col] + p[7*8 + col]) + 2048) >> 12;
        v5 = p[3*8 + col];
        v6 = p[5*8 + col];

        // stage 3
        t = (v0 - v1 + 1) >> 1;
        v0 = (v0 + v1 + 1) >> 1;
        v1 = t;
        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
        v3 = t;
        t = (v4 - v6 + 1) >> 1;
        v4 = (v4 + v6 + 1) >> 1;
        v6 = t;
        t = (v7 + v5 + 1) >> 1;
        v5 = (v7 - v5 + 1) >> 1;
        v7 = t;

        // stage 2
        t = (v0 - v3 + 1) >> 1;
        v0 = (v0 + v3 + 1) >> 1;
        v3 = t;
        t = (v1 - v2 + 1) >> 1;
        v1 = (v1 + v2 + 1) >> 1;
        v2 = t;
        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
        v7 = t;
        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
        v6 = t;

        // stage 1
        p[0*8 + col] = v0 + v7;
        p[7*8 + col] = v0 - v7;
        p[1*8 + col] = v1 + v6;
        p[6*8 + col] = v1 - v6;
        p[2*8 + col] = v2 + v5;
        p[5*8 + col] = v2 - v5;
        p[3*8 + col] = v3 + v4;
        p[4*8 + col] = v3 - v4;
      }

      // convert to 8-bit integers
      for (i = 0; i < 64; ++i) {
        var sample = 128 + ((p[i] + 8) >> 4);
        dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;
      }
    }

    var i, j;
    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
      var scanLine = blockRow << 3;
      for (i = 0; i < 8; i++)
        lines.push(new Uint8Array(samplesPerLine));
      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);

        var offset = 0, sample = blockCol << 3;
        for (j = 0; j < 8; j++) {
          var line = lines[scanLine + j];
          for (i = 0; i < 8; i++)
            line[sample + i] = r[offset++];
        }
      }
    }
    return lines;
  }

  function clampTo8bit(a) {
    return a < 0 ? 0 : a > 255 ? 255 : a;
  }

  constructor.prototype = {
    load: function load(path) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", path, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = (function() {
        // TODO catch parse error
        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
        this.parse(data);
        if (this.onload)
          this.onload();
      }).bind(this);
      xhr.send(null);
    },
    parse: function parse(data) {
      var offset = 0, length = data.length;
      function readUint16() {
        var value = (data[offset] << 8) | data[offset + 1];
        offset += 2;
        return value;
      }
      function readDataBlock() {
        var length = readUint16();
        var array = data.subarray(offset, offset + length - 2);
        offset += array.length;
        return array;
      }
      function prepareComponents(frame) {
        var maxH = 0, maxV = 0;
        var component, componentId;
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            if (maxH < component.h) maxH = component.h;
            if (maxV < component.v) maxV = component.v;
          }
        }
        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);
        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);
            var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) * component.v / maxV);
            var blocksPerLineForMcu = mcusPerLine * component.h;
            var blocksPerColumnForMcu = mcusPerColumn * component.v;
            var blocks = [];
            for (var i = 0; i < blocksPerColumnForMcu; i++) {
              var row = [];
              for (var j = 0; j < blocksPerLineForMcu; j++)
                row.push(new Int32Array(64));
              blocks.push(row);
            }
            component.blocksPerLine = blocksPerLine;
            component.blocksPerColumn = blocksPerColumn;
            component.blocks = blocks;
          }
        }
        frame.maxH = maxH;
        frame.maxV = maxV;
        frame.mcusPerLine = mcusPerLine;
        frame.mcusPerColumn = mcusPerColumn;
      }
      var jfif = null;
      var adobe = null;
      var pixels = null;
      var frame, resetInterval;
      var quantizationTables = [], frames = [];
      var huffmanTablesAC = [], huffmanTablesDC = [];
      var fileMarker = readUint16();
      if (fileMarker != 0xFFD8) { // SOI (Start of Image)
        throw "SOI not found";
      }

      fileMarker = readUint16();
      while (fileMarker != 0xFFD9) { // EOI (End of image)
        var i, j, l;
        switch(fileMarker) {
          case 0xFF00: break;
          case 0xFFE0: // APP0 (Application Specific)
          case 0xFFE1: // APP1
          case 0xFFE2: // APP2
          case 0xFFE3: // APP3
          case 0xFFE4: // APP4
          case 0xFFE5: // APP5
          case 0xFFE6: // APP6
          case 0xFFE7: // APP7
          case 0xFFE8: // APP8
          case 0xFFE9: // APP9
          case 0xFFEA: // APP10
          case 0xFFEB: // APP11
          case 0xFFEC: // APP12
          case 0xFFED: // APP13
          case 0xFFEE: // APP14
          case 0xFFEF: // APP15
          case 0xFFFE: // COM (Comment)
            var appData = readDataBlock();

            if (fileMarker === 0xFFE0) {
              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&
                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\x00'
                jfif = {
                  version: { major: appData[5], minor: appData[6] },
                  densityUnits: appData[7],
                  xDensity: (appData[8] << 8) | appData[9],
                  yDensity: (appData[10] << 8) | appData[11],
                  thumbWidth: appData[12],
                  thumbHeight: appData[13],
                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                };
              }
            }
            // TODO APP1 - Exif
            if (fileMarker === 0xFFEE) {
              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&
                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\x00'
                adobe = {
                  version: appData[6],
                  flags0: (appData[7] << 8) | appData[8],
                  flags1: (appData[9] << 8) | appData[10],
                  transformCode: appData[11]
                };
              }
            }
            break;

          case 0xFFDB: // DQT (Define Quantization Tables)
            var quantizationTablesLength = readUint16();
            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
            while (offset < quantizationTablesEnd) {
              var quantizationTableSpec = data[offset++];
              var tableData = new Int32Array(64);
              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = data[offset++];
                }
              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = readUint16();
                }
              } else
                throw "DQT: invalid table spec";
              quantizationTables[quantizationTableSpec & 15] = tableData;
            }
            break;

          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)
            readUint16(); // skip data length
            frame = {};
            frame.extended = (fileMarker === 0xFFC1);
            frame.progressive = (fileMarker === 0xFFC2);
            frame.precision = data[offset++];
            frame.scanLines = readUint16();
            frame.samplesPerLine = readUint16();
            frame.components = {};
            frame.componentsOrder = [];
            var componentsCount = data[offset++], componentId;
            var maxH = 0, maxV = 0;
            for (i = 0; i < componentsCount; i++) {
              componentId = data[offset];
              var h = data[offset + 1] >> 4;
              var v = data[offset + 1] & 15;
              var qId = data[offset + 2];
              frame.componentsOrder.push(componentId);
              frame.components[componentId] = {
                h: h,
                v: v,
                quantizationIdx: qId
              };
              offset += 3;
            }
            prepareComponents(frame);
            frames.push(frame);
            break;

          case 0xFFC4: // DHT (Define Huffman Tables)
            var huffmanLength = readUint16();
            for (i = 2; i < huffmanLength;) {
              var huffmanTableSpec = data[offset++];
              var codeLengths = new Uint8Array(16);
              var codeLengthSum = 0;
              for (j = 0; j < 16; j++, offset++)
                codeLengthSum += (codeLengths[j] = data[offset]);
              var huffmanValues = new Uint8Array(codeLengthSum);
              for (j = 0; j < codeLengthSum; j++, offset++)
                huffmanValues[j] = data[offset];
              i += 17 + codeLengthSum;

              ((huffmanTableSpec >> 4) === 0 ? 
                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =
                buildHuffmanTable(codeLengths, huffmanValues);
            }
            break;

          case 0xFFDD: // DRI (Define Restart Interval)
            readUint16(); // skip data length
            resetInterval = readUint16();
            break;

          case 0xFFDA: // SOS (Start of Scan)
            var scanLength = readUint16();
            var selectorsCount = data[offset++];
            var components = [], component;
            for (i = 0; i < selectorsCount; i++) {
              component = frame.components[data[offset++]];
              var tableSpec = data[offset++];
              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
              components.push(component);
            }
            var spectralStart = data[offset++];
            var spectralEnd = data[offset++];
            var successiveApproximation = data[offset++];
            var processed = decodeScan(data, offset,
              frame, components, resetInterval,
              spectralStart, spectralEnd,
              successiveApproximation >> 4, successiveApproximation & 15);
            offset += processed;
            break;
          default:
            if (data[offset - 3] == 0xFF &&
                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
              // could be incorrect encoding -- last 0xFF byte of the previous
              // block was eaten by the encoder
              offset -= 3;
              break;
            }
            throw "unknown JPEG marker " + fileMarker.toString(16);
        }
        fileMarker = readUint16();
      }
      if (frames.length != 1)
        throw "only single frame JPEGs supported";

      // set each frame's components quantization table
      for (var i = 0; i < frames.length; i++) {
        var cp = frames[i].components;
        for (var j in cp) {
          cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];
          delete cp[j].quantizationIdx;
        }
      }

      this.width = frame.samplesPerLine;
      this.height = frame.scanLines;
      this.jfif = jfif;
      this.adobe = adobe;
      this.components = [];
      for (var i = 0; i < frame.componentsOrder.length; i++) {
        var component = frame.components[frame.componentsOrder[i]];
        this.components.push({
          lines: buildComponentData(frame, component),
          scaleX: component.h / frame.maxH,
          scaleY: component.v / frame.maxV
        });
      }
    },
    getData: function getData(width, height) {
      var scaleX = this.width / width, scaleY = this.height / height;

      var component1, component2, component3, component4;
      var component1Line, component2Line, component3Line, component4Line;
      var x, y;
      var offset = 0;
      var Y, Cb, Cr, K, C, M, Ye, R, G, B;
      var colorTransform;
      var dataLength = width * height * this.components.length;
      var data = new Uint8Array(dataLength);
      switch (this.components.length) {
        case 1:
          component1 = this.components[0];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];
            for (x = 0; x < width; x++) {
              Y = component1Line[0 | (x * component1.scaleX * scaleX)];

              data[offset++] = Y;
            }
          }
          break;
        case 2:
          // PDF might compress two component data in custom colorspace
          component1 = this.components[0];
          component2 = this.components[1];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];
            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];
            for (x = 0; x < width; x++) {
              Y = component1Line[0 | (x * component1.scaleX * scaleX)];
              data[offset++] = Y;
              Y = component2Line[0 | (x * component2.scaleX * scaleX)];
              data[offset++] = Y;
            }
          }
          break;
        case 3:
          // The default transform for three components is true
          colorTransform = true;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== 'undefined')
            colorTransform = !!this.colorTransform;

          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];
            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];
            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];
            for (x = 0; x < width; x++) {
              if (!colorTransform) {
                R = component1Line[0 | (x * component1.scaleX * scaleX)];
                G = component2Line[0 | (x * component2.scaleX * scaleX)];
                B = component3Line[0 | (x * component3.scaleX * scaleX)];
              } else {
                Y = component1Line[0 | (x * component1.scaleX * scaleX)];
                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];
                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];

                R = clampTo8bit(Y + 1.402 * (Cr - 128));
                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                B = clampTo8bit(Y + 1.772 * (Cb - 128));
              }

              data[offset++] = R;
              data[offset++] = G;
              data[offset++] = B;
            }
          }
          break;
        case 4:
          if (!this.adobe)
            throw 'Unsupported color mode (4 components)';
          // The default transform for four components is false
          colorTransform = false;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode)
            colorTransform = true;
          else if (typeof this.colorTransform !== 'undefined')
            colorTransform = !!this.colorTransform;

          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          component4 = this.components[3];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];
            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];
            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];
            component4Line = component4.lines[0 | (y * component4.scaleY * scaleY)];
            for (x = 0; x < width; x++) {
              if (!colorTransform) {
                C = component1Line[0 | (x * component1.scaleX * scaleX)];
                M = component2Line[0 | (x * component2.scaleX * scaleX)];
                Ye = component3Line[0 | (x * component3.scaleX * scaleX)];
                K = component4Line[0 | (x * component4.scaleX * scaleX)];
              } else {
                Y = component1Line[0 | (x * component1.scaleX * scaleX)];
                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];
                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];
                K = component4Line[0 | (x * component4.scaleX * scaleX)];

                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));
                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
              }
              data[offset++] = 255-C;
              data[offset++] = 255-M;
              data[offset++] = 255-Ye;
              data[offset++] = 255-K;
            }
          }
          break;
        default:
          throw 'Unsupported color mode';
      }
      return data;
    },
    copyToImageData: function copyToImageData(imageData) {
      var width = imageData.width, height = imageData.height;
      var imageDataArray = imageData.data;
      var data = this.getData(width, height);
      var i = 0, j = 0, x, y;
      var Y, K, C, M, R, G, B;
      switch (this.components.length) {
        case 1:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              Y = data[i++];

              imageDataArray[j++] = Y;
              imageDataArray[j++] = Y;
              imageDataArray[j++] = Y;
              imageDataArray[j++] = 255;
            }
          }
          break;
        case 3:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              R = data[i++];
              G = data[i++];
              B = data[i++];

              imageDataArray[j++] = R;
              imageDataArray[j++] = G;
              imageDataArray[j++] = B;
              imageDataArray[j++] = 255;
            }
          }
          break;
        case 4:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              C = data[i++];
              M = data[i++];
              Y = data[i++];
              K = data[i++];

              R = 255 - clampTo8bit(C * (1 - K / 255) + K);
              G = 255 - clampTo8bit(M * (1 - K / 255) + K);
              B = 255 - clampTo8bit(Y * (1 - K / 255) + K);

              imageDataArray[j++] = R;
              imageDataArray[j++] = G;
              imageDataArray[j++] = B;
              imageDataArray[j++] = 255;
            }
          }
          break;
        default:
          throw 'Unsupported color mode';
      }
    }
  };

  return constructor;
})();
module.exports = decode;

function decode(jpegData) {
  var arr = new Uint8Array(jpegData);
  var decoder = new JpegImage();
  decoder.parse(arr);

  var image = {
    width: decoder.width,
    height: decoder.height,
    data: new Buffer(decoder.width * decoder.height * 4)
  };
  
  decoder.copyToImageData(image);
  
  return image;
}


/***/ }),
/* 127 */
/***/ (function(module, exports) {

/*
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009

Basic GUI blocking jpeg encoder
*/

var btoa = btoa || function(buf) {
  return new Buffer(buf).toString('base64');
};

function JPEGEncoder(quality) {
  var self = this;
	var fround = Math.round;
	var ffloor = Math.floor;
	var YTable = new Array(64);
	var UVTable = new Array(64);
	var fdtbl_Y = new Array(64);
	var fdtbl_UV = new Array(64);
	var YDC_HT;
	var UVDC_HT;
	var YAC_HT;
	var UVAC_HT;
	
	var bitcode = new Array(65535);
	var category = new Array(65535);
	var outputfDCTQuant = new Array(64);
	var DU = new Array(64);
	var byteout = [];
	var bytenew = 0;
	var bytepos = 7;
	
	var YDU = new Array(64);
	var UDU = new Array(64);
	var VDU = new Array(64);
	var clt = new Array(256);
	var RGB_YUV_TABLE = new Array(2048);
	var currentQuality;
	
	var ZigZag = [
			 0, 1, 5, 6,14,15,27,28,
			 2, 4, 7,13,16,26,29,42,
			 3, 8,12,17,25,30,41,43,
			 9,11,18,24,31,40,44,53,
			10,19,23,32,39,45,52,54,
			20,22,33,38,46,51,55,60,
			21,34,37,47,50,56,59,61,
			35,36,48,49,57,58,62,63
		];
	
	var std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];
	var std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];
	var std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];
	var std_ac_luminance_values = [
			0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,
			0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,
			0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,
			0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,
			0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,
			0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,
			0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,
			0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
			0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,
			0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,
			0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,
			0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
			0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,
			0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,
			0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,
			0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,
			0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,
			0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,
			0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
			0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
			0xf9,0xfa
		];
	
	var std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];
	var std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];
	var std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];
	var std_ac_chrominance_values = [
			0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,
			0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,
			0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,
			0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,
			0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,
			0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,
			0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,
			0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,
			0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,
			0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,
			0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,
			0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,
			0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,
			0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,
			0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,
			0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,
			0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,
			0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,
			0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,
			0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,
			0xf9,0xfa
		];
	
	function initQuantTables(sf){
			var YQT = [
				16, 11, 10, 16, 24, 40, 51, 61,
				12, 12, 14, 19, 26, 58, 60, 55,
				14, 13, 16, 24, 40, 57, 69, 56,
				14, 17, 22, 29, 51, 87, 80, 62,
				18, 22, 37, 56, 68,109,103, 77,
				24, 35, 55, 64, 81,104,113, 92,
				49, 64, 78, 87,103,121,120,101,
				72, 92, 95, 98,112,100,103, 99
			];
			
			for (var i = 0; i < 64; i++) {
				var t = ffloor((YQT[i]*sf+50)/100);
				if (t < 1) {
					t = 1;
				} else if (t > 255) {
					t = 255;
				}
				YTable[ZigZag[i]] = t;
			}
			var UVQT = [
				17, 18, 24, 47, 99, 99, 99, 99,
				18, 21, 26, 66, 99, 99, 99, 99,
				24, 26, 56, 99, 99, 99, 99, 99,
				47, 66, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99,
				99, 99, 99, 99, 99, 99, 99, 99
			];
			for (var j = 0; j < 64; j++) {
				var u = ffloor((UVQT[j]*sf+50)/100);
				if (u < 1) {
					u = 1;
				} else if (u > 255) {
					u = 255;
				}
				UVTable[ZigZag[j]] = u;
			}
			var aasf = [
				1.0, 1.387039845, 1.306562965, 1.175875602,
				1.0, 0.785694958, 0.541196100, 0.275899379
			];
			var k = 0;
			for (var row = 0; row < 8; row++)
			{
				for (var col = 0; col < 8; col++)
				{
					fdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));
					fdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));
					k++;
				}
			}
		}
		
		function computeHuffmanTbl(nrcodes, std_table){
			var codevalue = 0;
			var pos_in_table = 0;
			var HT = new Array();
			for (var k = 1; k <= 16; k++) {
				for (var j = 1; j <= nrcodes[k]; j++) {
					HT[std_table[pos_in_table]] = [];
					HT[std_table[pos_in_table]][0] = codevalue;
					HT[std_table[pos_in_table]][1] = k;
					pos_in_table++;
					codevalue++;
				}
				codevalue*=2;
			}
			return HT;
		}
		
		function initHuffmanTbl()
		{
			YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);
			UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);
			YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);
			UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);
		}
	
		function initCategoryNumber()
		{
			var nrlower = 1;
			var nrupper = 2;
			for (var cat = 1; cat <= 15; cat++) {
				//Positive numbers
				for (var nr = nrlower; nr<nrupper; nr++) {
					category[32767+nr] = cat;
					bitcode[32767+nr] = [];
					bitcode[32767+nr][1] = cat;
					bitcode[32767+nr][0] = nr;
				}
				//Negative numbers
				for (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {
					category[32767+nrneg] = cat;
					bitcode[32767+nrneg] = [];
					bitcode[32767+nrneg][1] = cat;
					bitcode[32767+nrneg][0] = nrupper-1+nrneg;
				}
				nrlower <<= 1;
				nrupper <<= 1;
			}
		}
		
		function initRGBYUVTable() {
			for(var i = 0; i < 256;i++) {
				RGB_YUV_TABLE[i]      		=  19595 * i;
				RGB_YUV_TABLE[(i+ 256)>>0] 	=  38470 * i;
				RGB_YUV_TABLE[(i+ 512)>>0] 	=   7471 * i + 0x8000;
				RGB_YUV_TABLE[(i+ 768)>>0] 	= -11059 * i;
				RGB_YUV_TABLE[(i+1024)>>0] 	= -21709 * i;
				RGB_YUV_TABLE[(i+1280)>>0] 	=  32768 * i + 0x807FFF;
				RGB_YUV_TABLE[(i+1536)>>0] 	= -27439 * i;
				RGB_YUV_TABLE[(i+1792)>>0] 	= - 5329 * i;
			}
		}
		
		// IO functions
		function writeBits(bs)
		{
			var value = bs[0];
			var posval = bs[1]-1;
			while ( posval >= 0 ) {
				if (value & (1 << posval) ) {
					bytenew |= (1 << bytepos);
				}
				posval--;
				bytepos--;
				if (bytepos < 0) {
					if (bytenew == 0xFF) {
						writeByte(0xFF);
						writeByte(0);
					}
					else {
						writeByte(bytenew);
					}
					bytepos=7;
					bytenew=0;
				}
			}
		}
	
		function writeByte(value)
		{
			//byteout.push(clt[value]); // write char directly instead of converting later
      byteout.push(value);
		}
	
		function writeWord(value)
		{
			writeByte((value>>8)&0xFF);
			writeByte((value   )&0xFF);
		}
		
		// DCT & quantization core
		function fDCTQuant(data, fdtbl)
		{
			var d0, d1, d2, d3, d4, d5, d6, d7;
			/* Pass 1: process rows. */
			var dataOff=0;
			var i;
			const I8 = 8;
			const I64 = 64;
			for (i=0; i<I8; ++i)
			{
				d0 = data[dataOff];
				d1 = data[dataOff+1];
				d2 = data[dataOff+2];
				d3 = data[dataOff+3];
				d4 = data[dataOff+4];
				d5 = data[dataOff+5];
				d6 = data[dataOff+6];
				d7 = data[dataOff+7];
				
				var tmp0 = d0 + d7;
				var tmp7 = d0 - d7;
				var tmp1 = d1 + d6;
				var tmp6 = d1 - d6;
				var tmp2 = d2 + d5;
				var tmp5 = d2 - d5;
				var tmp3 = d3 + d4;
				var tmp4 = d3 - d4;
	
				/* Even part */
				var tmp10 = tmp0 + tmp3;	/* phase 2 */
				var tmp13 = tmp0 - tmp3;
				var tmp11 = tmp1 + tmp2;
				var tmp12 = tmp1 - tmp2;
	
				data[dataOff] = tmp10 + tmp11; /* phase 3 */
				data[dataOff+4] = tmp10 - tmp11;
	
				var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */
				data[dataOff+2] = tmp13 + z1; /* phase 5 */
				data[dataOff+6] = tmp13 - z1;
	
				/* Odd part */
				tmp10 = tmp4 + tmp5; /* phase 2 */
				tmp11 = tmp5 + tmp6;
				tmp12 = tmp6 + tmp7;
	
				/* The rotator is modified from fig 4-8 to avoid extra negations. */
				var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */
				var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */
				var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */
				var z3 = tmp11 * 0.707106781; /* c4 */
	
				var z11 = tmp7 + z3;	/* phase 5 */
				var z13 = tmp7 - z3;
	
				data[dataOff+5] = z13 + z2;	/* phase 6 */
				data[dataOff+3] = z13 - z2;
				data[dataOff+1] = z11 + z4;
				data[dataOff+7] = z11 - z4;
	
				dataOff += 8; /* advance pointer to next row */
			}
	
			/* Pass 2: process columns. */
			dataOff = 0;
			for (i=0; i<I8; ++i)
			{
				d0 = data[dataOff];
				d1 = data[dataOff + 8];
				d2 = data[dataOff + 16];
				d3 = data[dataOff + 24];
				d4 = data[dataOff + 32];
				d5 = data[dataOff + 40];
				d6 = data[dataOff + 48];
				d7 = data[dataOff + 56];
				
				var tmp0p2 = d0 + d7;
				var tmp7p2 = d0 - d7;
				var tmp1p2 = d1 + d6;
				var tmp6p2 = d1 - d6;
				var tmp2p2 = d2 + d5;
				var tmp5p2 = d2 - d5;
				var tmp3p2 = d3 + d4;
				var tmp4p2 = d3 - d4;
	
				/* Even part */
				var tmp10p2 = tmp0p2 + tmp3p2;	/* phase 2 */
				var tmp13p2 = tmp0p2 - tmp3p2;
				var tmp11p2 = tmp1p2 + tmp2p2;
				var tmp12p2 = tmp1p2 - tmp2p2;
	
				data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */
				data[dataOff+32] = tmp10p2 - tmp11p2;
	
				var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */
				data[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */
				data[dataOff+48] = tmp13p2 - z1p2;
	
				/* Odd part */
				tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */
				tmp11p2 = tmp5p2 + tmp6p2;
				tmp12p2 = tmp6p2 + tmp7p2;
	
				/* The rotator is modified from fig 4-8 to avoid extra negations. */
				var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */
				var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */
				var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */
				var z3p2 = tmp11p2 * 0.707106781; /* c4 */
	
				var z11p2 = tmp7p2 + z3p2;	/* phase 5 */
				var z13p2 = tmp7p2 - z3p2;
	
				data[dataOff+40] = z13p2 + z2p2; /* phase 6 */
				data[dataOff+24] = z13p2 - z2p2;
				data[dataOff+ 8] = z11p2 + z4p2;
				data[dataOff+56] = z11p2 - z4p2;
	
				dataOff++; /* advance pointer to next column */
			}
	
			// Quantize/descale the coefficients
			var fDCTQuant;
			for (i=0; i<I64; ++i)
			{
				// Apply the quantization and scaling factor & Round to nearest integer
				fDCTQuant = data[i]*fdtbl[i];
				outputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);
				//outputfDCTQuant[i] = fround(fDCTQuant);

			}
			return outputfDCTQuant;
		}
		
		function writeAPP0()
		{
			writeWord(0xFFE0); // marker
			writeWord(16); // length
			writeByte(0x4A); // J
			writeByte(0x46); // F
			writeByte(0x49); // I
			writeByte(0x46); // F
			writeByte(0); // = "JFIF",'\0'
			writeByte(1); // versionhi
			writeByte(1); // versionlo
			writeByte(0); // xyunits
			writeWord(1); // xdensity
			writeWord(1); // ydensity
			writeByte(0); // thumbnwidth
			writeByte(0); // thumbnheight
		}
	
		function writeSOF0(width, height)
		{
			writeWord(0xFFC0); // marker
			writeWord(17);   // length, truecolor YUV JPG
			writeByte(8);    // precision
			writeWord(height);
			writeWord(width);
			writeByte(3);    // nrofcomponents
			writeByte(1);    // IdY
			writeByte(0x11); // HVY
			writeByte(0);    // QTY
			writeByte(2);    // IdU
			writeByte(0x11); // HVU
			writeByte(1);    // QTU
			writeByte(3);    // IdV
			writeByte(0x11); // HVV
			writeByte(1);    // QTV
		}
	
		function writeDQT()
		{
			writeWord(0xFFDB); // marker
			writeWord(132);	   // length
			writeByte(0);
			for (var i=0; i<64; i++) {
				writeByte(YTable[i]);
			}
			writeByte(1);
			for (var j=0; j<64; j++) {
				writeByte(UVTable[j]);
			}
		}
	
		function writeDHT()
		{
			writeWord(0xFFC4); // marker
			writeWord(0x01A2); // length
	
			writeByte(0); // HTYDCinfo
			for (var i=0; i<16; i++) {
				writeByte(std_dc_luminance_nrcodes[i+1]);
			}
			for (var j=0; j<=11; j++) {
				writeByte(std_dc_luminance_values[j]);
			}
	
			writeByte(0x10); // HTYACinfo
			for (var k=0; k<16; k++) {
				writeByte(std_ac_luminance_nrcodes[k+1]);
			}
			for (var l=0; l<=161; l++) {
				writeByte(std_ac_luminance_values[l]);
			}
	
			writeByte(1); // HTUDCinfo
			for (var m=0; m<16; m++) {
				writeByte(std_dc_chrominance_nrcodes[m+1]);
			}
			for (var n=0; n<=11; n++) {
				writeByte(std_dc_chrominance_values[n]);
			}
	
			writeByte(0x11); // HTUACinfo
			for (var o=0; o<16; o++) {
				writeByte(std_ac_chrominance_nrcodes[o+1]);
			}
			for (var p=0; p<=161; p++) {
				writeByte(std_ac_chrominance_values[p]);
			}
		}
	
		function writeSOS()
		{
			writeWord(0xFFDA); // marker
			writeWord(12); // length
			writeByte(3); // nrofcomponents
			writeByte(1); // IdY
			writeByte(0); // HTY
			writeByte(2); // IdU
			writeByte(0x11); // HTU
			writeByte(3); // IdV
			writeByte(0x11); // HTV
			writeByte(0); // Ss
			writeByte(0x3f); // Se
			writeByte(0); // Bf
		}
		
		function processDU(CDU, fdtbl, DC, HTDC, HTAC){
			var EOB = HTAC[0x00];
			var M16zeroes = HTAC[0xF0];
			var pos;
			const I16 = 16;
			const I63 = 63;
			const I64 = 64;
			var DU_DCT = fDCTQuant(CDU, fdtbl);
			//ZigZag reorder
			for (var j=0;j<I64;++j) {
				DU[ZigZag[j]]=DU_DCT[j];
			}
			var Diff = DU[0] - DC; DC = DU[0];
			//Encode DC
			if (Diff==0) {
				writeBits(HTDC[0]); // Diff might be 0
			} else {
				pos = 32767+Diff;
				writeBits(HTDC[category[pos]]);
				writeBits(bitcode[pos]);
			}
			//Encode ACs
			var end0pos = 63; // was const... which is crazy
			for (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};
			//end0pos = first element in reverse order !=0
			if ( end0pos == 0) {
				writeBits(EOB);
				return DC;
			}
			var i = 1;
			var lng;
			while ( i <= end0pos ) {
				var startpos = i;
				for (; (DU[i]==0) && (i<=end0pos); ++i) {}
				var nrzeroes = i-startpos;
				if ( nrzeroes >= I16 ) {
					lng = nrzeroes>>4;
					for (var nrmarker=1; nrmarker <= lng; ++nrmarker)
						writeBits(M16zeroes);
					nrzeroes = nrzeroes&0xF;
				}
				pos = 32767+DU[i];
				writeBits(HTAC[(nrzeroes<<4)+category[pos]]);
				writeBits(bitcode[pos]);
				i++;
			}
			if ( end0pos != I63 ) {
				writeBits(EOB);
			}
			return DC;
		}

		function initCharLookupTable(){
			var sfcc = String.fromCharCode;
			for(var i=0; i < 256; i++){ ///// ACHTUNG // 255
				clt[i] = sfcc(i);
			}
		}
		
		this.encode = function(image,quality) // image data object
		{
			var time_start = new Date().getTime();
			
			if(quality) setQuality(quality);
			
			// Initialize bit writer
			byteout = new Array();
			bytenew=0;
			bytepos=7;
	
			// Add JPEG headers
			writeWord(0xFFD8); // SOI
			writeAPP0();
			writeDQT();
			writeSOF0(image.width,image.height);
			writeDHT();
			writeSOS();

	
			// Encode 8x8 macroblocks
			var DCY=0;
			var DCU=0;
			var DCV=0;
			
			bytenew=0;
			bytepos=7;
			
			
			this.encode.displayName = "_encode_";

			var imageData = image.data;
			var width = image.width;
			var height = image.height;

			var quadWidth = width*4;
			var tripleWidth = width*3;
			
			var x, y = 0;
			var r, g, b;
			var start,p, col,row,pos;
			while(y < height){
				x = 0;
				while(x < quadWidth){
				start = quadWidth * y + x;
				p = start;
				col = -1;
				row = 0;
				
				for(pos=0; pos < 64; pos++){
					row = pos >> 3;// /8
					col = ( pos & 7 ) * 4; // %8
					p = start + ( row * quadWidth ) + col;		
					
					if(y+row >= height){ // padding bottom
						p-= (quadWidth*(y+1+row-height));
					}

					if(x+col >= quadWidth){ // padding right	
						p-= ((x+col) - quadWidth +4)
					}
					
					r = imageData[ p++ ];
					g = imageData[ p++ ];
					b = imageData[ p++ ];
					
					
					/* // calculate YUV values dynamically
					YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
					UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
					VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
					*/
					
					// use lookup table (slightly faster)
					YDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;
					UDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;
					VDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;

				}
				
				DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
				DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
				DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
				x+=32;
				}
				y+=8;
			}
			
			
			////////////////////////////////////////////////////////////////
	
			// Do the bit alignment of the EOI marker
			if ( bytepos >= 0 ) {
				var fillbits = [];
				fillbits[1] = bytepos+1;
				fillbits[0] = (1<<(bytepos+1))-1;
				writeBits(fillbits);
			}
	
			writeWord(0xFFD9); //EOI

      //return new Uint8Array(byteout);
      return new Buffer(byteout);

			var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));
			
			byteout = [];
			
			// benchmarking
			var duration = new Date().getTime() - time_start;
    		//console.log('Encoding time: '+ duration + 'ms');
    		//
			
			return jpegDataUri			
	}
	
	function setQuality(quality){
		if (quality <= 0) {
			quality = 1;
		}
		if (quality > 100) {
			quality = 100;
		}
		
		if(currentQuality == quality) return // don't recalc if unchanged
		
		var sf = 0;
		if (quality < 50) {
			sf = Math.floor(5000 / quality);
		} else {
			sf = Math.floor(200 - quality*2);
		}
		
		initQuantTables(sf);
		currentQuality = quality;
		//console.log('Quality set to: '+quality +'%');
	}
	
	function init(){
		var time_start = new Date().getTime();
		if(!quality) quality = 50;
		// Create tables
		initCharLookupTable()
		initHuffmanTbl();
		initCategoryNumber();
		initRGBYUVTable();
		
		setQuality(quality);
		var duration = new Date().getTime() - time_start;
    	//console.log('Initialization '+ duration + 'ms');
	}
	
	init();
	
};
module.exports = encode;

function encode(imgData, qu) {
  if (typeof qu === 'undefined') qu = 50;
  var encoder = new JPEGEncoder(qu);
	var data = encoder.encode(imgData, qu);
  return {
    data: data,
    width: imgData.width,
    height: imgData.height
  };
}

// helper function to get the imageData of an existing image on the current page.
function getImageDataFromImage(idOrElement){
	var theImg = (typeof(idOrElement)=='string')? document.getElementById(idOrElement):idOrElement;
	var cvs = document.createElement('canvas');
	cvs.width = theImg.width;
	cvs.height = theImg.height;
	var ctx = cvs.getContext("2d");
	ctx.drawImage(theImg,0,0);
	
	return (ctx.getImageData(0, 0, cvs.width, cvs.height));
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var _fs
try {
  _fs = __webpack_require__(1)
} catch (_) {
  _fs = __webpack_require__(2)
}

function readFile (file, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }

  if (typeof options === 'string') {
    options = {encoding: options}
  }

  options = options || {}
  var fs = options.fs || _fs

  var shouldThrow = true
  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
  if ('passParsingErrors' in options) {
    shouldThrow = options.passParsingErrors
  } else if ('throws' in options) {
    shouldThrow = options.throws
  }

  fs.readFile(file, options, function (err, data) {
    if (err) return callback(err)

    data = stripBom(data)

    var obj
    try {
      obj = JSON.parse(data, options ? options.reviver : null)
    } catch (err2) {
      if (shouldThrow) {
        err2.message = file + ': ' + err2.message
        return callback(err2)
      } else {
        return callback(null, null)
      }
    }

    callback(null, obj)
  })
}

function readFileSync (file, options) {
  options = options || {}
  if (typeof options === 'string') {
    options = {encoding: options}
  }

  var fs = options.fs || _fs

  var shouldThrow = true
  // DO NOT USE 'passParsingErrors' THE NAME WILL CHANGE!!!, use 'throws' instead
  if ('passParsingErrors' in options) {
    shouldThrow = options.passParsingErrors
  } else if ('throws' in options) {
    shouldThrow = options.throws
  }

  try {
    var content = fs.readFileSync(file, options)
    content = stripBom(content)
    return JSON.parse(content, options.reviver)
  } catch (err) {
    if (shouldThrow) {
      err.message = file + ': ' + err.message
      throw err
    } else {
      return null
    }
  }
}

function writeFile (file, obj, options, callback) {
  if (callback == null) {
    callback = options
    options = {}
  }
  options = options || {}
  var fs = options.fs || _fs

  var spaces = typeof options === 'object' && options !== null
    ? 'spaces' in options
    ? options.spaces : this.spaces
    : this.spaces

  var str = ''
  try {
    str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\n'
  } catch (err) {
    // Need to return whether a callback was passed or not
    if (callback) callback(err, null)
    return
  }

  fs.writeFile(file, str, options, callback)
}

function writeFileSync (file, obj, options) {
  options = options || {}
  var fs = options.fs || _fs

  var spaces = typeof options === 'object' && options !== null
    ? 'spaces' in options
    ? options.spaces : this.spaces
    : this.spaces

  var str = JSON.stringify(obj, options.replacer, spaces) + '\n'
  // not sure if fs.writeFileSync returns anything, but just in case
  return fs.writeFileSync(file, str, options)
}

function stripBom (content) {
  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
  if (Buffer.isBuffer(content)) content = content.toString('utf8')
  content = content.replace(/^\uFEFF/, '')
  return content
}

var jsonfile = {
  spaces: null,
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
}

module.exports = jsonfile


/***/ }),
/* 129 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),
/* 130 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isWindows = process.platform === 'win32';
var trailingSlashRe = isWindows ? /[^:]\\$/ : /.\/$/;

// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
module.exports = function () {
	var path;

	if (isWindows) {
		path = process.env.TEMP ||
			process.env.TMP ||
			(process.env.SystemRoot || process.env.windir) + '\\temp';
	} else {
		path = process.env.TMPDIR ||
			process.env.TMP ||
			process.env.TEMP ||
			'/tmp';
	}

	if (trailingSlashRe.test(path)) {
		path = path.slice(0, -1);
	}

	return path;
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = typeof Promise === 'function' ? Promise : __webpack_require__(133);


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var PENDING = 'pending';
var SETTLED = 'settled';
var FULFILLED = 'fulfilled';
var REJECTED = 'rejected';
var NOOP = function () {};
var isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined' && typeof global.process.emit === 'function';

var asyncSetTimer = typeof setImmediate === 'undefined' ? setTimeout : setImmediate;
var asyncQueue = [];
var asyncTimer;

function asyncFlush() {
	// run promise callbacks
	for (var i = 0; i < asyncQueue.length; i++) {
		asyncQueue[i][0](asyncQueue[i][1]);
	}

	// reset async asyncQueue
	asyncQueue = [];
	asyncTimer = false;
}

function asyncCall(callback, arg) {
	asyncQueue.push([callback, arg]);

	if (!asyncTimer) {
		asyncTimer = true;
		asyncSetTimer(asyncFlush, 0);
	}
}

function invokeResolver(resolver, promise) {
	function resolvePromise(value) {
		resolve(promise, value);
	}

	function rejectPromise(reason) {
		reject(promise, reason);
	}

	try {
		resolver(resolvePromise, rejectPromise);
	} catch (e) {
		rejectPromise(e);
	}
}

function invokeCallback(subscriber) {
	var owner = subscriber.owner;
	var settled = owner._state;
	var value = owner._data;
	var callback = subscriber[settled];
	var promise = subscriber.then;

	if (typeof callback === 'function') {
		settled = FULFILLED;
		try {
			value = callback(value);
		} catch (e) {
			reject(promise, e);
		}
	}

	if (!handleThenable(promise, value)) {
		if (settled === FULFILLED) {
			resolve(promise, value);
		}

		if (settled === REJECTED) {
			reject(promise, value);
		}
	}
}

function handleThenable(promise, value) {
	var resolved;

	try {
		if (promise === value) {
			throw new TypeError('A promises callback cannot return that same promise.');
		}

		if (value && (typeof value === 'function' || typeof value === 'object')) {
			// then should be retrieved only once
			var then = value.then;

			if (typeof then === 'function') {
				then.call(value, function (val) {
					if (!resolved) {
						resolved = true;

						if (value === val) {
							fulfill(promise, val);
						} else {
							resolve(promise, val);
						}
					}
				}, function (reason) {
					if (!resolved) {
						resolved = true;

						reject(promise, reason);
					}
				});

				return true;
			}
		}
	} catch (e) {
		if (!resolved) {
			reject(promise, e);
		}

		return true;
	}

	return false;
}

function resolve(promise, value) {
	if (promise === value || !handleThenable(promise, value)) {
		fulfill(promise, value);
	}
}

function fulfill(promise, value) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = value;

		asyncCall(publishFulfillment, promise);
	}
}

function reject(promise, reason) {
	if (promise._state === PENDING) {
		promise._state = SETTLED;
		promise._data = reason;

		asyncCall(publishRejection, promise);
	}
}

function publish(promise) {
	promise._then = promise._then.forEach(invokeCallback);
}

function publishFulfillment(promise) {
	promise._state = FULFILLED;
	publish(promise);
}

function publishRejection(promise) {
	promise._state = REJECTED;
	publish(promise);
	if (!promise._handled && isNode) {
		global.process.emit('unhandledRejection', promise._data, promise);
	}
}

function notifyRejectionHandled(promise) {
	global.process.emit('rejectionHandled', promise);
}

/**
 * @class
 */
function Promise(resolver) {
	if (typeof resolver !== 'function') {
		throw new TypeError('Promise resolver ' + resolver + ' is not a function');
	}

	if (this instanceof Promise === false) {
		throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
	}

	this._then = [];

	invokeResolver(resolver, this);
}

Promise.prototype = {
	constructor: Promise,

	_state: PENDING,
	_then: null,
	_data: undefined,
	_handled: false,

	then: function (onFulfillment, onRejection) {
		var subscriber = {
			owner: this,
			then: new this.constructor(NOOP),
			fulfilled: onFulfillment,
			rejected: onRejection
		};

		if ((onRejection || onFulfillment) && !this._handled) {
			this._handled = true;
			if (this._state === REJECTED && isNode) {
				asyncCall(notifyRejectionHandled, this);
			}
		}

		if (this._state === FULFILLED || this._state === REJECTED) {
			// already resolved, call callback async
			asyncCall(invokeCallback, subscriber);
		} else {
			// subscribe
			this._then.push(subscriber);
		}

		return subscriber.then;
	},

	catch: function (onRejection) {
		return this.then(null, onRejection);
	}
};

Promise.all = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.all().');
	}

	return new Promise(function (resolve, reject) {
		var results = [];
		var remaining = 0;

		function resolver(index) {
			remaining++;
			return function (value) {
				results[index] = value;
				if (!--remaining) {
					resolve(results);
				}
			};
		}

		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolver(i), reject);
			} else {
				results[i] = promise;
			}
		}

		if (!remaining) {
			resolve(results);
		}
	});
};

Promise.race = function (promises) {
	if (!Array.isArray(promises)) {
		throw new TypeError('You must pass an array to Promise.race().');
	}

	return new Promise(function (resolve, reject) {
		for (var i = 0, promise; i < promises.length; i++) {
			promise = promises[i];

			if (promise && typeof promise.then === 'function') {
				promise.then(resolve, reject);
			} else {
				resolve(promise);
			}
		}
	});
};

Promise.resolve = function (value) {
	if (value && typeof value === 'object' && value.constructor === Promise) {
		return value;
	}

	return new Promise(function (resolve) {
		resolve(value);
	});
};

Promise.reject = function (reason) {
	return new Promise(function (resolve, reject) {
		reject(reason);
	});
};

module.exports = Promise;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = __webpack_require__(9);

module.exports = function(dataIn, width, height, options) {
  var outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;
  if (options.colorType === options.inputColorType) {
    var bigEndian = (function() {
      var buffer = new ArrayBuffer(2);
      new DataView(buffer).setInt16(0, 256, true /* littleEndian */);
      // Int16Array uses the platform's endianness.
      return new Int16Array(buffer)[0] !== 256;
    })();
    // If no need to convert to grayscale and alpha is present/absent in both, take a fast route
    if (options.bitDepth === 8 || (options.bitDepth === 16 && bigEndian)) {
      return dataIn;
    }
  }

  // map to a UInt16 array if data is 16bit, fix endianness below
  var data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);

  var maxValue = 255;
  var inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];
  if (inBpp === 4 && !options.inputHasAlpha) {
    inBpp = 3;
  }
  var outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];
  if (options.bitDepth === 16) {
    maxValue = 65535;
    outBpp *= 2;
  }
  var outData = new Buffer(width * height * outBpp);

  var inIndex = 0;
  var outIndex = 0;

  var bgColor = options.bgColor || {};
  if (bgColor.red === undefined) {
    bgColor.red = maxValue;
  }
  if (bgColor.green === undefined) {
    bgColor.green = maxValue;
  }
  if (bgColor.blue === undefined) {
    bgColor.blue = maxValue;
  }

  function getRGBA() {
    var red;
    var green;
    var blue;
    var alpha = maxValue;
    switch (options.inputColorType) {
      case constants.COLORTYPE_COLOR_ALPHA:
        alpha = data[inIndex + 3];
        red = data[inIndex];
        green = data[inIndex + 1];
        blue = data[inIndex + 2];
        break;
      case constants.COLORTYPE_COLOR:
        red = data[inIndex];
        green = data[inIndex + 1];
        blue = data[inIndex + 2];
        break;
      case constants.COLORTYPE_ALPHA:
        alpha = data[inIndex + 1];
        red = data[inIndex];
        green = red;
        blue = red;
        break;
      case constants.COLORTYPE_GRAYSCALE:
        red = data[inIndex];
        green = red;
        blue = red;
        break;
      default:
        throw new Error('input color type:' + options.inputColorType + ' is not supported at present');
    }

    if (options.inputHasAlpha) {
      if (!outHasAlpha) {
        alpha /= maxValue;
        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
      }
    }
    return { red: red, green: green, blue: blue, alpha: alpha };
  }

  for (var y = 0; y < height; y++) {
    for (var x = 0; x < width; x++) {
      var rgba = getRGBA(data, inIndex);

      switch (options.colorType) {
        case constants.COLORTYPE_COLOR_ALPHA:
        case constants.COLORTYPE_COLOR:
          if (options.bitDepth === 8) {
            outData[outIndex] = rgba.red;
            outData[outIndex + 1] = rgba.green;
            outData[outIndex + 2] = rgba.blue;
            if (outHasAlpha) {
              outData[outIndex + 3] = rgba.alpha;
            }
          }
          else {
            outData.writeUInt16BE(rgba.red, outIndex);
            outData.writeUInt16BE(rgba.green, outIndex + 2);
            outData.writeUInt16BE(rgba.blue, outIndex + 4);
            if (outHasAlpha) {
              outData.writeUInt16BE(rgba.alpha, outIndex + 6);
            }
          }
          break;
        case constants.COLORTYPE_ALPHA:
        case constants.COLORTYPE_GRAYSCALE:
          // Convert to grayscale and alpha
          var grayscale = (rgba.red + rgba.green + rgba.blue) / 3;
          if (options.bitDepth === 8) {
            outData[outIndex] = grayscale;
            if (outHasAlpha) {
              outData[outIndex + 1] = rgba.alpha;
            }
          }
          else {
            outData.writeUInt16BE(grayscale, outIndex);
            if (outHasAlpha) {
              outData.writeUInt16BE(rgba.alpha, outIndex + 2);
            }
          }
          break;
        default:
          throw new Error('unrecognised color Type ' + options.colorType);
      }

      inIndex += inBpp;
      outIndex += outBpp;
    }
  }

  return outData;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var paethPredictor = __webpack_require__(58);

function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {

  for (var x = 0; x < byteWidth; x++) {
    rawData[rawPos + x] = pxData[pxPos + x];
  }
}

function filterSumNone(pxData, pxPos, byteWidth) {

  var sum = 0;
  var length = pxPos + byteWidth;

  for (var i = pxPos; i < length; i++) {
    sum += Math.abs(pxData[i]);
  }
  return sum;
}

function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var val = pxData[pxPos + x] - left;

    rawData[rawPos + x] = val;
  }
}

function filterSumSub(pxData, pxPos, byteWidth, bpp) {

  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var val = pxData[pxPos + x] - left;

    sum += Math.abs(val);
  }

  return sum;
}

function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {

  for (var x = 0; x < byteWidth; x++) {

    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - up;

    rawData[rawPos + x] = val;
  }
}

function filterSumUp(pxData, pxPos, byteWidth) {

  var sum = 0;
  var length = pxPos + byteWidth;
  for (var x = pxPos; x < length; x++) {

    var up = pxPos > 0 ? pxData[x - byteWidth] : 0;
    var val = pxData[x] - up;

    sum += Math.abs(val);
  }

  return sum;
}

function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - ((left + up) >> 1);

    rawData[rawPos + x] = val;
  }
}

function filterSumAvg(pxData, pxPos, byteWidth, bpp) {

  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var val = pxData[pxPos + x] - ((left + up) >> 1);

    sum += Math.abs(val);
  }

  return sum;
}

function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {

  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

    rawData[rawPos + x] = val;
  }
}

function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
  var sum = 0;
  for (var x = 0; x < byteWidth; x++) {

    var left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
    var up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
    var upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
    var val = pxData[pxPos + x] - paethPredictor(left, up, upleft);

    sum += Math.abs(val);
  }

  return sum;
}

var filters = {
  0: filterNone,
  1: filterSub,
  2: filterUp,
  3: filterAvg,
  4: filterPaeth
};

var filterSums = {
  0: filterSumNone,
  1: filterSumSub,
  2: filterSumUp,
  3: filterSumAvg,
  4: filterSumPaeth
};

module.exports = function(pxData, width, height, options, bpp) {

  var filterTypes;
  if (!('filterType' in options) || options.filterType === -1) {
    filterTypes = [0, 1, 2, 3, 4];
  }
  else if (typeof options.filterType === 'number') {
    filterTypes = [options.filterType];
  }
  else {
    throw new Error('unrecognised filter types');
  }

  if (options.bitDepth === 16) {
    bpp *= 2;
  }
  var byteWidth = width * bpp;
  var rawPos = 0;
  var pxPos = 0;
  var rawData = new Buffer((byteWidth + 1) * height);

  var sel = filterTypes[0];

  for (var y = 0; y < height; y++) {

    if (filterTypes.length > 1) {
      // find best filter for this line (with lowest sum of values)
      var min = Infinity;

      for (var i = 0; i < filterTypes.length; i++) {
        var sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);
        if (sum < min) {
          sel = filterTypes[i];
          min = sum;
        }
      }
    }

    rawData[rawPos] = sel;
    rawPos++;
    filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
    rawPos += byteWidth;
    pxPos += byteWidth;
  }
  return rawData;
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(5);
var ChunkStream = __webpack_require__(52);
var Filter = __webpack_require__(54);


var FilterAsync = module.exports = function(bitmapInfo) {
  ChunkStream.call(this);

  var buffers = [];
  var that = this;
  this._filter = new Filter(bitmapInfo, {
    read: this.read.bind(this),
    write: function(buffer) {
      buffers.push(buffer);
    },
    complete: function() {
      that.emit('complete', Buffer.concat(buffers));
    }
  });

  this._filter.start();
};
util.inherits(FilterAsync, ChunkStream);


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SyncReader = __webpack_require__(61);
var Filter = __webpack_require__(54);


exports.process = function(inBuffer, bitmapInfo) {

  var outBuffers = [];
  var reader = new SyncReader(inBuffer);
  var filter = new Filter(bitmapInfo, {
    read: reader.read.bind(reader),
    write: function(bufferPart) {
      outBuffers.push(bufferPart);
    },
    complete: function() {
    }
  });

  filter.start();
  reader.process();

  return Buffer.concat(outBuffers);
};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(5);
var Stream = __webpack_require__(8);
var constants = __webpack_require__(9);
var Packer = __webpack_require__(57);

var PackerAsync = module.exports = function(opt) {
  Stream.call(this);

  var options = opt || {};

  this._packer = new Packer(options);
  this._deflate = this._packer.createDeflate();

  this.readable = true;
};
util.inherits(PackerAsync, Stream);


PackerAsync.prototype.pack = function(data, width, height, gamma) {
  // Signature
  this.emit('data', new Buffer(constants.PNG_SIGNATURE));
  this.emit('data', this._packer.packIHDR(width, height));

  if (gamma) {
    this.emit('data', this._packer.packGAMA(gamma));
  }

  var filteredData = this._packer.filterData(data, width, height);

  // compress it
  this._deflate.on('error', this.emit.bind(this, 'error'));

  this._deflate.on('data', function(compressedData) {
    this.emit('data', this._packer.packIDAT(compressedData));
  }.bind(this));

  this._deflate.on('end', function() {
    this.emit('data', this._packer.packIEND());
    this.emit('end');
  }.bind(this));

  this._deflate.end(filteredData);
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasSyncZlib = true;
var zlib = __webpack_require__(10);
if (!zlib.deflateSync) {
  hasSyncZlib = false;
}
var constants = __webpack_require__(9);
var Packer = __webpack_require__(57);

module.exports = function(metaData, opt) {

  if (!hasSyncZlib) {
    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
  }

  var options = opt || {};

  var packer = new Packer(options);

  var chunks = [];

  // Signature
  chunks.push(new Buffer(constants.PNG_SIGNATURE));

  // Header
  chunks.push(packer.packIHDR(metaData.width, metaData.height));

  if (metaData.gamma) {
    chunks.push(packer.packGAMA(metaData.gamma));
  }

  var filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);

  // compress it
  var compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());
  filteredData = null;

  if (!compressedData || !compressedData.length) {
    throw new Error('bad png - invalid compressed data response');
  }
  chunks.push(packer.packIDAT(compressedData));

  // End
  chunks.push(packer.packIEND());

  return Buffer.concat(chunks);
};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(5);
var zlib = __webpack_require__(10);
var ChunkStream = __webpack_require__(52);
var FilterAsync = __webpack_require__(136);
var Parser = __webpack_require__(59);
var bitmapper = __webpack_require__(51);
var formatNormaliser = __webpack_require__(55);

var ParserAsync = module.exports = function(options) {
  ChunkStream.call(this);

  this._parser = new Parser(options, {
    read: this.read.bind(this),
    error: this._handleError.bind(this),
    metadata: this._handleMetaData.bind(this),
    gamma: this.emit.bind(this, 'gamma'),
    palette: this._handlePalette.bind(this),
    transColor: this._handleTransColor.bind(this),
    finished: this._finished.bind(this),
    inflateData: this._inflateData.bind(this),
    simpleTransparency: this._simpleTransparency.bind(this),
    headersFinished: this._headersFinished.bind(this)
  });
  this._options = options;
  this.writable = true;

  this._parser.start();
};
util.inherits(ParserAsync, ChunkStream);


ParserAsync.prototype._handleError = function(err) {

  this.emit('error', err);

  this.writable = false;

  this.destroy();

  if (this._inflate && this._inflate.destroy) {
    this._inflate.destroy();
  }

  if (this._filter) {
    this._filter.destroy();
    // For backward compatibility with Node 7 and below.
    // Suppress errors due to _inflate calling write() even after
    // it's destroy()'ed.
    this._filter.on('error', function() {});
  }

  this.errord = true;
};

ParserAsync.prototype._inflateData = function(data) {
  if (!this._inflate) {
    if (this._bitmapInfo.interlace) {
      this._inflate = zlib.createInflate();

      this._inflate.on('error', this.emit.bind(this, 'error'));
      this._filter.on('complete', this._complete.bind(this));

      this._inflate.pipe(this._filter);
    }
    else {
      var rowSize = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7) >> 3) + 1;
      var imageSize = rowSize * this._bitmapInfo.height;
      var chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);

      this._inflate = zlib.createInflate({ chunkSize: chunkSize });
      var leftToInflate = imageSize;

      var emitError = this.emit.bind(this, 'error');
      this._inflate.on('error', function(err) {
        if (!leftToInflate) {
          return;
        }

        emitError(err);
      });
      this._filter.on('complete', this._complete.bind(this));

      var filterWrite = this._filter.write.bind(this._filter);
      this._inflate.on('data', function(chunk) {
        if (!leftToInflate) {
          return;
        }

        if (chunk.length > leftToInflate) {
          chunk = chunk.slice(0, leftToInflate);
        }

        leftToInflate -= chunk.length;

        filterWrite(chunk);
      });

      this._inflate.on('end', this._filter.end.bind(this._filter));
    }
  }
  this._inflate.write(data);
};

ParserAsync.prototype._handleMetaData = function(metaData) {
  this._metaData = metaData;
  this._bitmapInfo = Object.create(metaData);

  this._filter = new FilterAsync(this._bitmapInfo);
};

ParserAsync.prototype._handleTransColor = function(transColor) {
  this._bitmapInfo.transColor = transColor;
};

ParserAsync.prototype._handlePalette = function(palette) {
  this._bitmapInfo.palette = palette;
};

ParserAsync.prototype._simpleTransparency = function() {
  this._metaData.alpha = true;
};

ParserAsync.prototype._headersFinished = function() {
  // Up until this point, we don't know if we have a tRNS chunk (alpha)
  // so we can't emit metadata any earlier
  this.emit('metadata', this._metaData);
};

ParserAsync.prototype._finished = function() {
  if (this.errord) {
    return;
  }

  if (!this._inflate) {
    this.emit('error', 'No Inflate block');
  }
  else {
    // no more data to inflate
    this._inflate.end();
  }
  this.destroySoon();
};

ParserAsync.prototype._complete = function(filteredData) {

  if (this.errord) {
    return;
  }

  try {
    var bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);

    var normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
    bitmapData = null;
  }
  catch (ex) {
    this._handleError(ex);
    return;
  }

  this.emit('parsed', normalisedBitmapData);
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasSyncZlib = true;
var zlib = __webpack_require__(10);
var inflateSync = __webpack_require__(143);
if (!zlib.deflateSync) {
  hasSyncZlib = false;
}
var SyncReader = __webpack_require__(61);
var FilterSync = __webpack_require__(137);
var Parser = __webpack_require__(59);
var bitmapper = __webpack_require__(51);
var formatNormaliser = __webpack_require__(55);


module.exports = function(buffer, options) {

  if (!hasSyncZlib) {
    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
  }

  var err;
  function handleError(_err_) {
    err = _err_;
  }

  var metaData;
  function handleMetaData(_metaData_) {
    metaData = _metaData_;
  }

  function handleTransColor(transColor) {
    metaData.transColor = transColor;
  }

  function handlePalette(palette) {
    metaData.palette = palette;
  }

  function handleSimpleTransparency() {
    metaData.alpha = true;
  }

  var gamma;
  function handleGamma(_gamma_) {
    gamma = _gamma_;
  }

  var inflateDataList = [];
  function handleInflateData(inflatedData) {
    inflateDataList.push(inflatedData);
  }

  var reader = new SyncReader(buffer);

  var parser = new Parser(options, {
    read: reader.read.bind(reader),
    error: handleError,
    metadata: handleMetaData,
    gamma: handleGamma,
    palette: handlePalette,
    transColor: handleTransColor,
    inflateData: handleInflateData,
    simpleTransparency: handleSimpleTransparency
  });

  parser.start();
  reader.process();

  if (err) {
    throw err;
  }

  //join together the inflate datas
  var inflateData = Buffer.concat(inflateDataList);
  inflateDataList.length = 0;

  var inflatedData;
  if (metaData.interlace) {
    inflatedData = zlib.inflateSync(inflateData);
  }
  else {
    var rowSize = ((metaData.width * metaData.bpp * metaData.depth + 7) >> 3) + 1;
    var imageSize = rowSize * metaData.height;
    inflatedData = inflateSync(inflateData, { chunkSize: imageSize, maxLength: imageSize });
  }
  inflateData = null;

  if (!inflatedData || !inflatedData.length) {
    throw new Error('bad png - invalid inflate data response');
  }

  var unfilteredData = FilterSync.process(inflatedData, metaData);
  inflateData = null;

  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
  unfilteredData = null;

  var normalisedBitmapData = formatNormaliser(bitmapData, metaData);

  metaData.data = normalisedBitmapData;
  metaData.gamma = gamma || 0;

  return metaData;
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var parse = __webpack_require__(141);
var pack = __webpack_require__(139);


exports.read = function(buffer, options) {

  return parse(buffer, options || {});
};

exports.write = function(png, options) {

  return pack(png, options);
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(13).ok;
var zlib = __webpack_require__(10);
var util = __webpack_require__(5);

var kMaxLength = __webpack_require__(146).kMaxLength;

function Inflate(opts) {
  if (!(this instanceof Inflate)) {
    return new Inflate(opts);
  }

  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
    opts.chunkSize = zlib.Z_MIN_CHUNK;
  }

  zlib.Inflate.call(this, opts);

  // Node 8 --> 9 compatibility check
  this._offset = this._offset === undefined ? this._outOffset : this._offset;
  this._buffer = this._buffer || this._outBuffer;

  if (opts && opts.maxLength != null) {
    this._maxLength = opts.maxLength;
  }
}

function createInflate(opts) {
  return new Inflate(opts);
}

function _close(engine, callback) {
  if (callback) {
    process.nextTick(callback);
  }

  // Caller may invoke .close after a zlib error (which will null _handle).
  if (!engine._handle) {
    return;
  }

  engine._handle.close();
  engine._handle = null;
}

Inflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {
  if (typeof asyncCb === 'function') {
    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
  }

  var self = this;

  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var leftToInflate = this._maxLength;
  var inOff = 0;

  var buffers = [];
  var nread = 0;

  var error;
  this.on('error', function(err) {
    error = err;
  });

  function handleChunk(availInAfter, availOutAfter) {
    if (self._hadError) {
      return;
    }

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;

      if (out.length > leftToInflate) {
        out = out.slice(0, leftToInflate);
      }

      buffers.push(out);
      nread += out.length;
      leftToInflate -= out.length;

      if (leftToInflate === 0) {
        return false;
      }
    }

    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = Buffer.allocUnsafe(self._chunkSize);
    }

    if (availOutAfter === 0) {
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      return true;
    }

    return false;
  }

  assert(this._handle, 'zlib binding closed');
  do {
    var res = this._handle.writeSync(flushFlag,
      chunk, // in
      inOff, // in_off
      availInBefore, // in_len
      this._buffer, // out
      this._offset, //out_off
      availOutBefore); // out_len
    // Node 8 --> 9 compatibility check
    res = res || this._writeState;
  } while (!this._hadError && handleChunk(res[0], res[1]));

  if (this._hadError) {
    throw error;
  }

  if (nread >= kMaxLength) {
    _close(this);
    throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + kMaxLength.toString(16) + ' bytes');
  }

  var buf = Buffer.concat(buffers, nread);
  _close(this);

  return buf;
};

util.inherits(Inflate, zlib.Inflate);

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer);
  }
  if (!(buffer instanceof Buffer)) {
    throw new TypeError('Not a string or buffer');
  }

  var flushFlag = engine._finishFlushFlag;
  if (flushFlag == null) {
    flushFlag = zlib.Z_FINISH;
  }

  return engine._processChunk(buffer, flushFlag);
}

function inflateSync(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
}

module.exports = exports = inflateSync;
exports.Inflate = Inflate;
exports.createInflate = createInflate;
exports.inflateSync = inflateSync;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Tmp
 *
 * Copyright (c) 2011-2015 KARASZI Istvan <github@spam.raszi.hu>
 *
 * MIT Licensed
 */

/**
 * Module dependencies.
 */
var
  fs     = __webpack_require__(2),
  path   = __webpack_require__(0),
  crypto = __webpack_require__(18),
  tmpDir = __webpack_require__(131),
  _c     = process.binding('constants');


/**
 * The working inner variables.
 */
var
  // store the actual TMP directory
  _TMP = tmpDir(),

  // the random characters to choose from
  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',

  TEMPLATE_PATTERN = /XXXXXX/,

  DEFAULT_TRIES = 3,

  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),

  EBADF = _c.EBADF || _c.os.errno.EBADF,
  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,

  DIR_MODE = 448 /* 0700 */,
  FILE_MODE = 384 /* 0600 */,

  // this will hold the objects need to be removed on exit
  _removeObjects = [],

  _gracefulCleanup = false,
  _uncaughtException = false;

/**
 * Random name generator based on crypto.
 * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript
 *
 * @param {Number} howMany
 * @return {String}
 * @api private
 */
function _randomChars(howMany) {
  var
    value = [],
    rnd = null;

  // make sure that we do not fail because we ran out of entropy
  try {
    rnd = crypto.randomBytes(howMany);
  } catch (e) {
    rnd = crypto.pseudoRandomBytes(howMany);
  }

  for (var i = 0; i < howMany; i++) {
    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
  }

  return value.join('');
}

/**
 * Checks whether the `obj` parameter is defined or not.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
function _isUndefined(obj) {
  return typeof obj === 'undefined';
}

/**
 * Parses the function arguments.
 *
 * This function helps to have optional arguments.
 *
 * @param {Object} options
 * @param {Function} callback
 * @api private
 */
function _parseArguments(options, callback) {
  if (typeof options == 'function') {
    var
      tmp = options,
      options = callback || {},
      callback = tmp;
  } else if (typeof options == 'undefined') {
    options = {};
  }

  return [options, callback];
}

/**
 * Generates a new temporary name.
 *
 * @param {Object} opts
 * @returns {String}
 * @api private
 */
function _generateTmpName(opts) {
  if (opts.name) {
    return path.join(opts.dir || _TMP, opts.name);
  }

  // mkstemps like template
  if (opts.template) {
    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));
  }

  // prefix and postfix
  var name = [
    opts.prefix || 'tmp-',
    process.pid,
    _randomChars(12),
    opts.postfix || ''
  ].join('');

  return path.join(opts.dir || _TMP, name);
}

/**
 * Gets a temporary file name.
 *
 * @param {Object} options
 * @param {Function} callback
 * @api private
 */
function _getTmpName(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1],
    tries = opts.tries || DEFAULT_TRIES;

  if (isNaN(tries) || tries < 0)
    return cb(new Error('Invalid tries'));

  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
    return cb(new Error('Invalid template provided'));

  (function _getUniqueName() {
    var name = _generateTmpName(opts);

    // check whether the path exists then retry if needed
    fs.stat(name, function (err) {
      if (!err) {
        if (tries-- > 0) return _getUniqueName();

        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));
      }

      cb(null, name);
    });
  }());
}

/**
 * Synchronous version of _getTmpName.
 *
 * @param {Object} options
 * @returns {String}
 * @api private
 */
function _getTmpNameSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0],
    tries = opts.tries || DEFAULT_TRIES;

  if (isNaN(tries) || tries < 0)
    throw new Error('Invalid tries');

  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
    throw new Error('Invalid template provided');

  do {
    var name = _generateTmpName(opts);
    try {
      fs.statSync(name);
    } catch (e) {
      return name;
    }
  } while (tries-- > 0);

  throw new Error('Could not get a unique tmp filename, max tries reached');
}

/**
 * Creates and opens a temporary file.
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */
function _createTmpFile(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1];

  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;

  // gets a temporary filename
  _getTmpName(opts, function _tmpNameCreated(err, name) {
    if (err) return cb(err);

    // create and open the file
    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {
      if (err) return cb(err);

      if (opts.discardDescriptor) {
        return fs.close(fd, function _discardCallback(err) {
          if (err) {
            // Low probability, and the file exists, so this could be
            // ignored.  If it isn't we certainly need to unlink the
            // file, and if that fails too its error is more
            // important.
            try {
              fs.unlinkSync(name);
            } catch (e) {
              err = e;
            }
            return cb(err);
          }
          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));
        });
      }
      if (opts.detachDescriptor) {
        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));
      }
      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));
    });
  });
}

/**
 * Synchronous version of _createTmpFile.
 *
 * @param {Object} options
 * @returns {Object} object consists of name, fd and removeCallback
 * @api private
 */
function _createTmpFileSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0];

  opts.postfix = opts.postfix || '.tmp';

  var name = _getTmpNameSync(opts);
  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);

  return {
    name : name,
    fd : fd,
    removeCallback : _prepareTmpFileRemoveCallback(name, fd, opts)
  };
}

/**
 * Removes files and folders in a directory recursively.
 *
 * @param {String} root
 * @api private
 */
function _rmdirRecursiveSync(root) {
  var dirs = [root];

  do {
    var
      dir = dirs.pop(),
      deferred = false,
      files = fs.readdirSync(dir);

    for (var i = 0, length = files.length; i < length; i++) {
      var
        file = path.join(dir, files[i]),
        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories

      if (stat.isDirectory()) {
        if (!deferred) {
          deferred = true;
          dirs.push(dir);
        }
        dirs.push(file);
      } else {
        fs.unlinkSync(file);
      }
    }

    if (!deferred) {
      fs.rmdirSync(dir);
    }
  } while (dirs.length !== 0);
}

/**
 * Creates a temporary directory.
 *
 * @param {Object} options
 * @param {Function} callback
 * @api public
 */
function _createTmpDir(options, callback) {
  var
    args = _parseArguments(options, callback),
    opts = args[0],
    cb = args[1];

  // gets a temporary filename
  _getTmpName(opts, function _tmpNameCreated(err, name) {
    if (err) return cb(err);

    // create the directory
    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {
      if (err) return cb(err);

      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));
    });
  });
}

/**
 * Synchronous version of _createTmpDir.
 *
 * @param {Object} options
 * @returns {Object} object consists of name and removeCallback
 * @api private
 */
function _createTmpDirSync(options) {
  var
    args = _parseArguments(options),
    opts = args[0];

  var name = _getTmpNameSync(opts);
  fs.mkdirSync(name, opts.mode || DIR_MODE);

  return {
    name : name,
    removeCallback : _prepareTmpDirRemoveCallback(name, opts)
  };
}

/**
 * Prepares the callback for removal of the temporary file.
 *
 * @param {String} name
 * @param {int} fd
 * @param {Object} opts
 * @api private
 * @returns {Function} the callback
 */
function _prepareTmpFileRemoveCallback(name, fd, opts) {
  var removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {
    try {
      if (0 <= fdPath[0]) {
        fs.closeSync(fdPath[0]);
      }
    }
    catch (e) {
      // under some node/windows related circumstances, a temporary file
      // may have not be created as expected or the file was already closed
      // by the user, in which case we will simply ignore the error
      if (e.errno != -EBADF && e.errno != -ENOENT) {
        // reraise any unanticipated error
        throw e;
      }
    }
    fs.unlinkSync(fdPath[1]);
  }, [fd, name]);

  if (!opts.keep) {
    _removeObjects.unshift(removeCallback);
  }

  return removeCallback;
}

/**
 * Prepares the callback for removal of the temporary directory.
 *
 * @param {String} name
 * @param {Object} opts
 * @returns {Function} the callback
 * @api private
 */
function _prepareTmpDirRemoveCallback(name, opts) {
  var removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);
  var removeCallback = _prepareRemoveCallback(removeFunction, name);

  if (!opts.keep) {
    _removeObjects.unshift(removeCallback);
  }

  return removeCallback;
}

/**
 * Creates a guarded function wrapping the removeFunction call.
 *
 * @param {Function} removeFunction
 * @param {Object} arg
 * @returns {Function}
 * @api private
 */
function _prepareRemoveCallback(removeFunction, arg) {
  var called = false;

  return function _cleanupCallback(next) {
    if (!called) {
        var index = _removeObjects.indexOf(_cleanupCallback);
        if (index >= 0) {
          _removeObjects.splice(index, 1);
        }

        called = true;
        removeFunction(arg);
    }
    if (next) next(null);
  };
}

/**
 * The garbage collector.
 *
 * @api private
 */
function _garbageCollector() {
  if (_uncaughtException && !_gracefulCleanup) {
    return;
  }

  // the function being called removes itself from _removeObjects,
  // loop until _removeObjects is empty
  while (_removeObjects.length) {
    try {
      _removeObjects[0].call(null);
    } catch (e) {
      // already removed?
    }
  }
}

function _setGracefulCleanup() {
  _gracefulCleanup = true;
}

var version = process.versions.node.split('.').map(function (value) {
  return parseInt(value, 10);
});

if (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {
  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {
    _uncaughtException = true;
    _garbageCollector();

    throw err;
  });
}

process.addListener('exit', function _exit(code) {
  if (code) _uncaughtException = true;
  _garbageCollector();
});

// exporting all the needed methods
module.exports.tmpdir = _TMP;
module.exports.dir = _createTmpDir;
module.exports.dirSync = _createTmpDirSync;
module.exports.file = _createTmpFile;
module.exports.fileSync = _createTmpFileSync;
module.exports.tmpName = _getTmpName;
module.exports.tmpNameSync = _getTmpNameSync;
module.exports.setGracefulCleanup = _setGracefulCleanup;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = which
which.sync = whichSync

var isWindows = process.platform === 'win32' ||
    process.env.OSTYPE === 'cygwin' ||
    process.env.OSTYPE === 'msys'

var path = __webpack_require__(0)
var COLON = isWindows ? ';' : ':'
var isexe = __webpack_require__(122)

function getNotFoundError (cmd) {
  var er = new Error('not found: ' + cmd)
  er.code = 'ENOENT'

  return er
}

function getPathInfo (cmd, opt) {
  var colon = opt.colon || COLON
  var pathEnv = opt.path || process.env.PATH || ''
  var pathExt = ['']

  pathEnv = pathEnv.split(colon)

  var pathExtExe = ''
  if (isWindows) {
    pathEnv.unshift(process.cwd())
    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')
    pathExt = pathExtExe.split(colon)


    // Always test the cmd itself first.  isexe will check to make sure
    // it's found in the pathExt set.
    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')
      pathExt.unshift('')
  }

  // If it has a slash, then we don't bother searching the pathenv.
  // just check the file itself, and that's it.
  if (cmd.match(/\//) || isWindows && cmd.match(/\\/))
    pathEnv = ['']

  return {
    env: pathEnv,
    ext: pathExt,
    extExe: pathExtExe
  }
}

function which (cmd, opt, cb) {
  if (typeof opt === 'function') {
    cb = opt
    opt = {}
  }

  var info = getPathInfo(cmd, opt)
  var pathEnv = info.env
  var pathExt = info.ext
  var pathExtExe = info.extExe
  var found = []

  ;(function F (i, l) {
    if (i === l) {
      if (opt.all && found.length)
        return cb(null, found)
      else
        return cb(getNotFoundError(cmd))
    }

    var pathPart = pathEnv[i]
    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
      pathPart = pathPart.slice(1, -1)

    var p = path.join(pathPart, cmd)
    if (!pathPart && (/^\.[\\\/]/).test(cmd)) {
      p = cmd.slice(0, 2) + p
    }
    ;(function E (ii, ll) {
      if (ii === ll) return F(i + 1, l)
      var ext = pathExt[ii]
      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext)
          else
            return cb(null, p + ext)
        }
        return E(ii + 1, ll)
      })
    })(0, pathExt.length)
  })(0, pathEnv.length)
}

function whichSync (cmd, opt) {
  opt = opt || {}

  var info = getPathInfo(cmd, opt)
  var pathEnv = info.env
  var pathExt = info.ext
  var pathExtExe = info.extExe
  var found = []

  for (var i = 0, l = pathEnv.length; i < l; i ++) {
    var pathPart = pathEnv[i]
    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
      pathPart = pathPart.slice(1, -1)

    var p = path.join(pathPart, cmd)
    if (!pathPart && /^\.[\\\/]/.test(cmd)) {
      p = cmd.slice(0, 2) + p
    }
    for (var j = 0, ll = pathExt.length; j < ll; j ++) {
      var cur = p + pathExt[j]
      var is
      try {
        is = isexe.sync(cur, { pathExt: pathExtExe })
        if (is) {
          if (opt.all)
            found.push(cur)
          else
            return cur
        }
      } catch (ex) {}
    }
  }

  if (opt.all && found.length)
    return found

  if (opt.nothrow)
    return null

  throw getNotFoundError(cmd)
}


/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = require("constants");

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ })
/******/ ]);
});
//# sourceMappingURL=fsmetadata.js.map