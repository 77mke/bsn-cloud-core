(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("path"), require("fs"), (function webpackLoadOptionalExternalModule() { try { return require("crypto"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["path", "fs", "crypto"], factory);
	else if(typeof exports === 'object')
		exports["fsmetadata"] = factory(require("path"), require("fs"), (function webpackLoadOptionalExternalModule() { try { return require("crypto"); } catch(e) {} }()));
	else
		root["fsmetadata"] = factory(root["path"], root["fs"], root["crypto"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_20__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsError = exports.FsErrorType = void 0;
var FsErrorType;
(function (FsErrorType) {
    FsErrorType[FsErrorType["fsNotAvailableError"] = 0] = "fsNotAvailableError";
    FsErrorType[FsErrorType["fileNotFoundError"] = 1] = "fileNotFoundError";
    FsErrorType[FsErrorType["invalidParameters"] = 2] = "invalidParameters";
})(FsErrorType = exports.FsErrorType || (exports.FsErrorType = {}));
var fsErrorMessage = (_a = {},
    _a[FsErrorType.fsNotAvailableError] = 'Local file system is not accessible',
    _a[FsErrorType.fileNotFoundError] = 'File not found',
    _a[FsErrorType.invalidParameters] = 'Invalid parameters',
    _a);
var FsError = (function (_super) {
    __extends(FsError, _super);
    function FsError(type, reason) {
        var _this = _super.call(this) || this;
        _this.name = 'FsError';
        _this.type = type;
        if (reason) {
            _this.message = fsErrorMessage[type] + ': ' + reason;
        }
        else {
            _this.message = fsErrorMessage[type];
        }
        Object.setPrototypeOf(_this, FsError.prototype);
        return _this;
    }
    return FsError;
}(Error));
exports.FsError = FsError;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssetExifData = void 0;
var error_1 = __webpack_require__(0);
function getAssetExifData(assetItem) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.getAssetExifData = getAssetExifData;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileSha1 = exports.getThumbnail = void 0;
var error_1 = __webpack_require__(0);
function getThumbnail(assetItem) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.getThumbnail = getThumbnail;
function getFileSha1(fullPath) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.getFileSha1 = getFileSha1;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["isomorphic-path.browser"] = factory();
	else
		root["isomorphic-path.browser"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __webpack_require__(5);
const platform_1 = __webpack_require__(8);
const noop_1 = __webpack_require__(7);
const unsupportedMethods = {
    resolve: noop_1.noop,
    relative: noop_1.noop,
};
const win32Runtime = Object.assign({}, path_1.win32, unsupportedMethods);
exports.win32 = win32Runtime;
const posixRuntime = Object.assign({}, path_1.posix, unsupportedMethods);
exports.posix = posixRuntime;
let defaultExport = { win32: win32Runtime, posix: posixRuntime };
if (platform_1.isWin()) {
    defaultExport = Object.assign({}, defaultExport, win32Runtime);
}
else {
    defaultExport = Object.assign({}, defaultExport, posixRuntime);
}
let normalizeRuntime;
exports.normalize = normalizeRuntime;
let joinRuntime;
exports.join = joinRuntime;
let resolveRuntime;
exports.resolve = resolveRuntime;
let isAbsoluteRuntime;
exports.isAbsolute = isAbsoluteRuntime;
let relativeRuntime;
exports.relative = relativeRuntime;
let dirnameRuntime;
exports.dirname = dirnameRuntime;
let basenameRuntime;
exports.basename = basenameRuntime;
let extnameRuntime;
exports.extname = extnameRuntime;
let sepRuntime;
exports.sep = sepRuntime;
let delimiterRuntime;
exports.delimiter = delimiterRuntime;
let parseRuntime;
exports.parse = parseRuntime;
let formatRuntime;
exports.format = formatRuntime;
if (platform_1.isWin()) {
    exports.normalize = normalizeRuntime = win32Runtime.normalize;
    exports.join = joinRuntime = win32Runtime.join;
    exports.resolve = resolveRuntime = win32Runtime.resolve;
    exports.isAbsolute = isAbsoluteRuntime = win32Runtime.isAbsolute;
    exports.relative = relativeRuntime = win32Runtime.relative;
    exports.dirname = dirnameRuntime = win32Runtime.dirname;
    exports.basename = basenameRuntime = win32Runtime.basename;
    exports.extname = extnameRuntime = win32Runtime.extname;
    exports.sep = sepRuntime = win32Runtime.sep;
    exports.delimiter = delimiterRuntime = win32Runtime.delimiter;
    exports.parse = parseRuntime = win32Runtime.parse;
    exports.format = formatRuntime = win32Runtime.format;
}
else {
    exports.normalize = normalizeRuntime = posixRuntime.normalize;
    exports.join = joinRuntime = posixRuntime.join;
    exports.resolve = resolveRuntime = posixRuntime.resolve;
    exports.isAbsolute = isAbsoluteRuntime = posixRuntime.isAbsolute;
    exports.relative = relativeRuntime = posixRuntime.relative;
    exports.dirname = dirnameRuntime = posixRuntime.dirname;
    exports.basename = basenameRuntime = posixRuntime.basename;
    exports.extname = extnameRuntime = posixRuntime.extname;
    exports.sep = sepRuntime = posixRuntime.sep;
    exports.delimiter = delimiterRuntime = posixRuntime.delimiter;
    exports.parse = parseRuntime = posixRuntime.parse;
    exports.format = formatRuntime = posixRuntime.format;
}
exports.default = defaultExport;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(3);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(2);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.




var isWindows = process.platform === 'win32';
var util = __webpack_require__(4);


// resolves . and .. elements in a path array with directory names there
// must be no slashes or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  var res = [];
  for (var i = 0; i < parts.length; i++) {
    var p = parts[i];

    // ignore empty parts
    if (!p || p === '.')
      continue;

    if (p === '..') {
      if (res.length && res[res.length - 1] !== '..') {
        res.pop();
      } else if (allowAboveRoot) {
        res.push('..');
      }
    } else {
      res.push(p);
    }
  }

  return res;
}

// returns an array with empty elements removed from either end of the input
// array or the original array if no elements need to be removed
function trimArray(arr) {
  var lastIndex = arr.length - 1;
  var start = 0;
  for (; start <= lastIndex; start++) {
    if (arr[start])
      break;
  }

  var end = lastIndex;
  for (; end >= 0; end--) {
    if (arr[end])
      break;
  }

  if (start === 0 && end === lastIndex)
    return arr;
  if (start > end)
    return [];
  return arr.slice(start, end + 1);
}

// Regex to split a windows path into three parts: [*, device, slash,
// tail] windows-only
var splitDeviceRe =
    /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

// Regex to split the tail part of the above into [*, dir, basename, ext]
var splitTailRe =
    /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

var win32 = {};

// Function to split a filename into [root, dir, basename, ext]
function win32SplitPath(filename) {
  // Separate device+slash from tail
  var result = splitDeviceRe.exec(filename),
      device = (result[1] || '') + (result[2] || ''),
      tail = result[3] || '';
  // Split the tail into dir, basename and extension
  var result2 = splitTailRe.exec(tail),
      dir = result2[1],
      basename = result2[2],
      ext = result2[3];
  return [device, dir, basename, ext];
}

function win32StatPath(path) {
  var result = splitDeviceRe.exec(path),
      device = result[1] || '',
      isUnc = !!device && device[1] !== ':';
  return {
    device: device,
    isUnc: isUnc,
    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute
    tail: result[3]
  };
}

function normalizeUNCRoot(device) {
  return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
}

// path.resolve([from ...], to)
win32.resolve = function() {
  var resolvedDevice = '',
      resolvedTail = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1; i--) {
    var path;
    if (i >= 0) {
      path = arguments[i];
    } else if (!resolvedDevice) {
      path = process.cwd();
    } else {
      // Windows has the concept of drive-specific current working
      // directories. If we've resolved a drive letter but not yet an
      // absolute path, get cwd for that drive. We're sure the device is not
      // an unc path at this points, because unc paths are always absolute.
      path = process.env['=' + resolvedDevice];
      // Verify that a drive-local cwd was found and that it actually points
      // to our drive. If not, default to the drive's root.
      if (!path || path.substr(0, 3).toLowerCase() !==
          resolvedDevice.toLowerCase() + '\\') {
        path = resolvedDevice + '\\';
      }
    }

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    var result = win32StatPath(path),
        device = result.device,
        isUnc = result.isUnc,
        isAbsolute = result.isAbsolute,
        tail = result.tail;

    if (device &&
        resolvedDevice &&
        device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      // This path points to another device so it is not applicable
      continue;
    }

    if (!resolvedDevice) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = tail + '\\' + resolvedTail;
      resolvedAbsolute = isAbsolute;
    }

    if (resolvedDevice && resolvedAbsolute) {
      break;
    }
  }

  // Convert slashes to backslashes when `resolvedDevice` points to an UNC
  // root. Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    resolvedDevice = normalizeUNCRoot(resolvedDevice);
  }

  // At this point the path should be resolved to a full absolute path,
  // but handle relative paths to be safe (might happen when process.cwd()
  // fails)

  // Normalize the tail path
  resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/),
                                !resolvedAbsolute).join('\\');

  return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
         '.';
};


win32.normalize = function(path) {
  var result = win32StatPath(path),
      device = result.device,
      isUnc = result.isUnc,
      isAbsolute = result.isAbsolute,
      tail = result.tail,
      trailingSlash = /[\\\/]$/.test(tail);

  // Normalize the tail path
  tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');

  if (!tail && !isAbsolute) {
    tail = '.';
  }
  if (tail && trailingSlash) {
    tail += '\\';
  }

  // Convert slashes to backslashes when `device` points to an UNC root.
  // Also squash multiple slashes into a single one where appropriate.
  if (isUnc) {
    device = normalizeUNCRoot(device);
  }

  return device + (isAbsolute ? '\\' : '') + tail;
};


win32.isAbsolute = function(path) {
  return win32StatPath(path).isAbsolute;
};

win32.join = function() {
  var paths = [];
  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (!util.isString(arg)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (arg) {
      paths.push(arg);
    }
  }

  var joined = paths.join('\\');

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\')
  if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
    joined = joined.replace(/^[\\\/]{2,}/, '\\');
  }

  return win32.normalize(joined);
};


// path.relative(from, to)
// it will solve the relative path from 'from' to 'to', for instance:
// from = 'C:\\orandea\\test\\aaa'
// to = 'C:\\orandea\\impl\\bbb'
// The output of the function should be: '..\\..\\impl\\bbb'
win32.relative = function(from, to) {
  from = win32.resolve(from);
  to = win32.resolve(to);

  // windows is not case sensitive
  var lowerFrom = from.toLowerCase();
  var lowerTo = to.toLowerCase();

  var toParts = trimArray(to.split('\\'));

  var lowerFromParts = trimArray(lowerFrom.split('\\'));
  var lowerToParts = trimArray(lowerTo.split('\\'));

  var length = Math.min(lowerFromParts.length, lowerToParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (lowerFromParts[i] !== lowerToParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  if (samePartsLength == 0) {
    return to;
  }

  var outputParts = [];
  for (var i = samePartsLength; i < lowerFromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('\\');
};


win32._makeLong = function(path) {
  // Note: this will *probably* throw somewhere.
  if (!util.isString(path))
    return path;

  if (!path) {
    return '';
  }

  var resolvedPath = win32.resolve(path);

  if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
    // path is local filesystem path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\' + resolvedPath;
  } else if (/^\\\\[^?.]/.test(resolvedPath)) {
    // path is network UNC path, which needs to be converted
    // to long UNC path.
    return '\\\\?\\UNC\\' + resolvedPath.substring(2);
  }

  return path;
};


win32.dirname = function(path) {
  var result = win32SplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


win32.basename = function(path, ext) {
  var f = win32SplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


win32.extname = function(path) {
  return win32SplitPath(path)[3];
};


win32.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir;
  var base = pathObject.base || '';
  if (!dir) {
    return base;
  }
  if (dir[dir.length - 1] === win32.sep) {
    return dir + base;
  }
  return dir + win32.sep + base;
};


win32.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = win32SplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


win32.sep = '\\';
win32.delimiter = ';';


// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var posix = {};


function posixSplitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}


// path.resolve([from ...], to)
// posix version
posix.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (!util.isString(path)) {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path[0] === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(resolvedPath.split('/'),
                                !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
posix.normalize = function(path) {
  var isAbsolute = posix.isAbsolute(path),
      trailingSlash = path && path[path.length - 1] === '/';

  // Normalize the path
  path = normalizeArray(path.split('/'), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
posix.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
posix.join = function() {
  var path = '';
  for (var i = 0; i < arguments.length; i++) {
    var segment = arguments[i];
    if (!util.isString(segment)) {
      throw new TypeError('Arguments to path.join must be strings');
    }
    if (segment) {
      if (!path) {
        path += segment;
      } else {
        path += '/' + segment;
      }
    }
  }
  return posix.normalize(path);
};


// path.relative(from, to)
// posix version
posix.relative = function(from, to) {
  from = posix.resolve(from).substr(1);
  to = posix.resolve(to).substr(1);

  var fromParts = trimArray(from.split('/'));
  var toParts = trimArray(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};


posix._makeLong = function(path) {
  return path;
};


posix.dirname = function(path) {
  var result = posixSplitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


posix.basename = function(path, ext) {
  var f = posixSplitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


posix.extname = function(path) {
  return posixSplitPath(path)[3];
};


posix.format = function(pathObject) {
  if (!util.isObject(pathObject)) {
    throw new TypeError(
        "Parameter 'pathObject' must be an object, not " + typeof pathObject
    );
  }

  var root = pathObject.root || '';

  if (!util.isString(root)) {
    throw new TypeError(
        "'pathObject.root' must be a string or undefined, not " +
        typeof pathObject.root
    );
  }

  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
  var base = pathObject.base || '';
  return dir + base;
};


posix.parse = function(pathString) {
  if (!util.isString(pathString)) {
    throw new TypeError(
        "Parameter 'pathString' must be a string, not " + typeof pathString
    );
  }
  var allParts = posixSplitPath(pathString);
  if (!allParts || allParts.length !== 4) {
    throw new TypeError("Invalid path '" + pathString + "'");
  }
  allParts[1] = allParts[1] || '';
  allParts[2] = allParts[2] || '';
  allParts[3] = allParts[3] || '';

  return {
    root: allParts[0],
    dir: allParts[0] + allParts[1].slice(0, -1),
    base: allParts[2],
    ext: allParts[3],
    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
  };
};


posix.sep = '/';
posix.delimiter = ':';


if (isWindows)
  module.exports = win32;
else /* posix */
  module.exports = posix;

module.exports.posix = posix;
module.exports.win32 = win32;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(1));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.noop = (from, to) => {
    throw Error('method unsupported in isomorphic-path');
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMac = () => {
    if (process
        && typeof process.platform === 'string'
        && process.platform.toLowerCase() === 'darwin') {
        return true;
    }
    else if (typeof navigator !== 'undefined'
        && typeof navigator.platform === 'string'
        && navigator.platform.toLowerCase().indexOf('mac') > -1) {
        return true;
    }
    else {
        return false;
    }
};
exports.isWin = () => {
    if (process
        && typeof process.platform === 'string'
        && process.platform.toLowerCase() === 'win32') {
        return true;
    }
    else if (typeof navigator !== 'undefined'
        && typeof navigator.platform === 'string'
        && navigator.platform.toLowerCase().indexOf('win') > -1) {
        return true;
    }
    else {
        return false;
    }
};
exports.isBrowser = () => {
    return typeof window !== 'undefined';
};
exports.isNode = () => {
    return typeof window === 'undefined' && typeof process !== 'undefined';
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.downsampleImage = void 0;
var error_1 = __webpack_require__(0);
function downsampleImage(fullPath, width, height, destinationPath) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.downsampleImage = downsampleImage;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getVideoThumbnail = exports.getImageThumbnail = void 0;
var workerpool = __webpack_require__(19);
var thumbnail_1 = __webpack_require__(3);
var exif_1 = __webpack_require__(2);
var probe_1 = __webpack_require__(17);
var error_1 = __webpack_require__(0);
function getImageThumbnail(fullPath) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.getImageThumbnail = getImageThumbnail;
function getVideoThumbnail(fullPath, ffmpegPath) {
    return Promise.reject(new error_1.FsError(error_1.FsErrorType.fsNotAvailableError));
}
exports.getVideoThumbnail = getVideoThumbnail;
workerpool.worker({
    getImageThumbnail: getImageThumbnail,
    getVideoThumbnail: getVideoThumbnail,
    getExifData: exif_1.getExifData,
    getFileSha1: thumbnail_1.getFileSha1,
    parseProbeString: probe_1.parseProbeString,
    getFileProbeData: probe_1.getFileProbeData,
    getDecoderName: probe_1.getDecoderName,
    getDecoderTimeSliceMaxCount: probe_1.getDecoderTimeSliceMaxCount,
    canPlayFile: probe_1.canPlayFile,
    canPlayProbeData: probe_1.canPlayProbeData,
});


/***/ }),
/* 8 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(9)
var ieee754 = __webpack_require__(11)
var isArray = __webpack_require__(12)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__filename, process, __dirname, Buffer) {
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};



// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};


// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_ProbeFileEx')) {
        Object.defineProperty(Module['ready'], '_ProbeFileEx', { configurable: true, get: function() { abort('You are getting _ProbeFileEx on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_ProbeFileEx', { configurable: true, set: function() { abort('You are setting _ProbeFileEx on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_mountDataFilepath')) {
        Object.defineProperty(Module['ready'], '_mountDataFilepath', { configurable: true, get: function() { abort('You are getting _mountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_mountDataFilepath', { configurable: true, set: function() { abort('You are setting _mountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_unmountDataFilepath')) {
        Object.defineProperty(Module['ready'], '_unmountDataFilepath', { configurable: true, get: function() { abort('You are getting _unmountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_unmountDataFilepath', { configurable: true, set: function() { abort('You are setting _unmountDataFilepath on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_CanPlayFileJS')) {
        Object.defineProperty(Module['ready'], '_CanPlayFileJS', { configurable: true, get: function() { abort('You are getting _CanPlayFileJS on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_CanPlayFileJS', { configurable: true, set: function() { abort('You are setting _CanPlayFileJS on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_CanPlayToString')) {
        Object.defineProperty(Module['ready'], '_CanPlayToString', { configurable: true, get: function() { abort('You are getting _CanPlayToString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_CanPlayToString', { configurable: true, set: function() { abort('You are setting _CanPlayToString on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_GetDecoderName')) {
        Object.defineProperty(Module['ready'], '_GetDecoderName', { configurable: true, get: function() { abort('You are getting _GetDecoderName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_GetDecoderName', { configurable: true, set: function() { abort('You are setting _GetDecoderName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_GetDecoderTimesliceMaxCount')) {
        Object.defineProperty(Module['ready'], '_GetDecoderTimesliceMaxCount', { configurable: true, get: function() { abort('You are getting _GetDecoderTimesliceMaxCount on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_GetDecoderTimesliceMaxCount', { configurable: true, set: function() { abort('You are setting _GetDecoderTimesliceMaxCount on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackSave')) {
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, get: function() { abort('You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackSave', { configurable: true, set: function() { abort('You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackRestore')) {
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, get: function() { abort('You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackRestore', { configurable: true, set: function() { abort('You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_stackAlloc')) {
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, get: function() { abort('You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_stackAlloc', { configurable: true, set: function() { abort('You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___data_end')) {
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, get: function() { abort('You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, set: function() { abort('You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_fflush')) {
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, get: function() { abort('You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_fflush', { configurable: true, set: function() { abort('You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = __webpack_require__(1).dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = __webpack_require__(5);
    if (!nodePath) nodePath = __webpack_require__(1);
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';







// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}








// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}







function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;





// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });




// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 223 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_load_i64() {
    if (typeof setTempRet0 === 'function') setTempRet0(i32ScratchView[1]);
    return i32ScratchView[0];
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.clock_gettime;
 var fimport$1 = env.abort;
 var fimport$2 = env.gettimeofday;
 var fimport$3 = env.__sys_open;
 var fimport$4 = env.__sys_fcntl64;
 var fimport$5 = env.__sys_ioctl;
 var fimport$6 = env.fd_read;
 var fimport$7 = env.fd_close;
 var fimport$8 = env.fd_write;
 var fimport$9 = env.emscripten_resize_heap;
 var fimport$10 = env.emscripten_memcpy_big;
 var fimport$11 = env.__handle_stack_overflow;
 var fimport$12 = env.setTempRet0;
 var fimport$13 = env.fd_seek;
 var fimport$14 = env.emscripten_asm_const_iii;
 var getTempRet0 = env.getTempRet0;
 var global$0 = 5308192;
 var global$1 = 65148;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  return 65152 | 0;
 }
 
 function $1() {
  
 }
 
 function $2($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 100 | 0);
  }
  $4_1 = $0_1 + 12 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$6
      }
      $6_1 = 0;
      label$7 : {
       if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$7
       }
       $0_1 = $5_1;
       label$8 : while (1) {
        label$9 : {
         $6_1 = $0_1;
         $0_1 = HEAP32[$0_1 >> 2] | 0;
         if ($0_1) {
          break label$9
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$4;
        }
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$8
        }
        break label$8;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($6_1) {
       break label$4
      }
      break label$5;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $6_1 = $4_1;
    break label$3;
   }
   $5_1 = HEAP32[$6_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = $1_1;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 123 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(1115 | 0, 1039 | 0, 124 | 0);
  abort();
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 20) + ($0_1 + 64 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 503 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 48 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 49 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 1650720768;
  HEAP32[i64toi32_i32$1 >> 2] = 1650720768;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $6($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $10$hi = 0, $10_1 = 0, $2_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $4_1 = 0, $11_1 = 0, $5_1 = 0, $7_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $37$hi = 0, $50_1 = 0, $90_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 523 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
         $28_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
           $29_1 = 0
          } else {
           $29_1 = 1
          }
          $30_1 = $29_1;
         } else {
          $30_1 = 0
         }
         $28_1 = $30_1;
        }
        if ($28_1) {
         break label$10
        }
        $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        label$11 : {
         label$12 : {
          i64toi32_i32$3 = $0_1 + 24 | 0;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
          $33_1 = i64toi32_i32$2;
          $33$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
          $37_1 = i64toi32_i32$2;
          $37$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $33$hi;
          i64toi32_i32$3 = $33_1;
          i64toi32_i32$2 = $37$hi;
          i64toi32_i32$1 = $37_1;
          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $10_1 = i64toi32_i32$4;
          $10$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = i64toi32_i32$4;
          i64toi32_i32$3 = $1$hi;
          i64toi32_i32$1 = $1_1;
          if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
           break label$12
          }
          if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[$2_1 >> 2] = $0_1;
          i64toi32_i32$0 = $1$hi;
          HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
          $50_1 = $2_1;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$5 = 0;
           $31_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
          } else {
           i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
           $31_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
          }
          HEAP32[($50_1 + 4 | 0) >> 2] = $31_1;
          $827(1130 | 0, $2_1 | 0);
          break label$11;
         }
         label$13 : {
          $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$13
          }
          FUNCTION_TABLE[$4_1](HEAP32[($0_1 + 244 | 0) >> 2] | 0);
         }
         $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
         $4_1 = $4($0_1 | 0) | 0;
         label$14 : {
          if (!$3_1) {
           break label$14
          }
          if (!$4_1) {
           break label$14
          }
          $7($0_1 | 0, $3_1 | 0) | 0;
         }
         i64toi32_i32$5 = $10$hi;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
         HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$5;
         HEAP8[($0_1 + 49 | 0) >> 0] = 1;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$5 = $10$hi;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$1 = $10$hi;
         i64toi32_i32$3 = $10_1;
         i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
         i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         $10_1 = i64toi32_i32$2;
         $10$hi = i64toi32_i32$4;
         label$15 : {
          if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$15
          }
          if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          i64toi32_i32$4 = $10$hi;
          HEAP32[($2_1 + 28 | 0) >> 2] = $10_1;
          HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
          i64toi32_i32$4 = $1$hi;
          HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
          $90_1 = $2_1;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$0 = 0;
           $32_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
          } else {
           i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
           $32_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
          }
          HEAP32[($90_1 + 20 | 0) >> 2] = $32_1;
          $827(1166 | 0, $2_1 + 16 | 0 | 0);
         }
         $5_1 = $0_1 + 16 | 0;
         label$16 : {
          label$17 : {
           label$18 : {
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$4 = $10_1;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = 1;
            if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
             $34_1 = 1
            } else {
             if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
              if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
               $35_1 = 0
              } else {
               $35_1 = 1
              }
              $36_1 = $35_1;
             } else {
              $36_1 = 0
             }
             $34_1 = $36_1;
            }
            if ($34_1) {
             break label$18
            }
            label$19 : {
             $3_1 = $4($0_1 | 0) | 0;
             if (!$3_1) {
              break label$19
             }
             label$20 : while (1) {
              label$21 : {
               i64toi32_i32$4 = $10$hi;
               $3_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
               i64toi32_i32$4 = 0;
               $11_1 = $3_1;
               $11$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $10$hi;
               i64toi32_i32$3 = $10_1;
               i64toi32_i32$0 = $11$hi;
               i64toi32_i32$5 = $3_1;
               if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
                break label$21
               }
               i64toi32_i32$3 = $10$hi;
               $7($0_1 | 0, $10_1 | 0) | 0;
               break label$19;
              }
              if ($7($0_1 | 0, $3_1 | 0) | 0) {
               break label$9
              }
              $8($0_1 | 0, $3_1 | 0);
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$3 = $11$hi;
              i64toi32_i32$3 = $10$hi;
              i64toi32_i32$5 = $10_1;
              i64toi32_i32$4 = $11$hi;
              i64toi32_i32$0 = $11_1;
              i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
              i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
              i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
              i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
              $10_1 = i64toi32_i32$1;
              $10$hi = i64toi32_i32$2;
              $3_1 = $4($0_1 | 0) | 0;
              if ($3_1) {
               continue label$20
              }
              break label$20;
             };
             i64toi32_i32$2 = $10$hi;
             i64toi32_i32$3 = $10_1;
             i64toi32_i32$5 = -1;
             i64toi32_i32$0 = -1;
             if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
              $38_1 = 1
             } else {
              if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
               if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
                $39_1 = 0
               } else {
                $39_1 = 1
               }
               $40_1 = $39_1;
              } else {
               $40_1 = 0
              }
              $38_1 = $40_1;
             }
             if ($38_1) {
              break label$8
             }
            }
            if ((HEAP32[$5_1 >> 2] | 0 | 0) != (3 | 0)) {
             break label$17
            }
            $3_1 = $0_1 + 56 | 0;
            HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
            FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
            break label$17;
           }
           i64toi32_i32$3 = $10$hi;
           i64toi32_i32$0 = $10_1;
           i64toi32_i32$2 = -1;
           i64toi32_i32$5 = -1;
           if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
            $41_1 = 1
           } else {
            if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$5 >>> 0) {
              $42_1 = 0
             } else {
              $42_1 = 1
             }
             $43_1 = $42_1;
            } else {
             $43_1 = 0
            }
            $41_1 = $43_1;
           }
           if ($41_1) {
            break label$16
           }
           label$22 : {
            $3_1 = $4($0_1 | 0) | 0;
            if (!$3_1) {
             break label$22
            }
            i64toi32_i32$0 = $10$hi;
            i64toi32_i32$0 = 0;
            i64toi32_i32$5 = 0;
            i64toi32_i32$3 = $10$hi;
            i64toi32_i32$2 = $10_1;
            i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
            i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
            i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
            i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
            $10_1 = i64toi32_i32$4;
            $10$hi = i64toi32_i32$1;
            $4_1 = $0_1 + 64 | 0;
            label$23 : while (1) {
             $6_1 = HEAP32[$3_1 >> 2] | 0;
             $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             if ($6_1 >>> 0 < $7_1 >>> 0) {
              break label$7
             }
             label$24 : {
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$1 = 0;
              $11_1 = $6_1 - $7_1 | 0;
              $11$hi = i64toi32_i32$1;
              i64toi32_i32$1 = $10$hi;
              i64toi32_i32$0 = $10_1;
              i64toi32_i32$5 = $11$hi;
              i64toi32_i32$2 = $11_1;
              if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
               break label$24
              }
              i64toi32_i32$0 = $10$hi;
              HEAP32[($3_1 + 4 | 0) >> 2] = $7_1 + $10_1 | 0;
              break label$22;
             }
             $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
             if (!$3_1) {
              break label$6
             }
             if ($3_1 >>> 0 >= 9 >>> 0) {
              break label$5
             }
             i64toi32_i32$0 = $10$hi;
             i64toi32_i32$0 = $11$hi;
             i64toi32_i32$0 = $10$hi;
             i64toi32_i32$2 = $10_1;
             i64toi32_i32$1 = $11$hi;
             i64toi32_i32$5 = $11_1;
             i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
             i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
             i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
             i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
             $10_1 = i64toi32_i32$3;
             $10$hi = i64toi32_i32$4;
             label$25 : {
              label$26 : while (1) {
               $3_1 = $3_1 + -1 | 0;
               HEAP32[($0_1 + 64 | 0) >> 2] = $3_1;
               i64toi32_i32$4 = 0;
               FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0, HEAP32[(($4_1 + Math_imul($3_1, 20) | 0) + 16 | 0) >> 2] | 0, 0, i64toi32_i32$4) | 0;
               $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
               if (!$3_1) {
                break label$25
               }
               if (!(HEAP32[((Math_imul($3_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0)) {
                continue label$26
               }
               break label$26;
              };
             }
             $3_1 = $4($0_1 | 0) | 0;
             if ($3_1) {
              continue label$23
             }
             break label$23;
            };
           }
           if ((HEAP32[$5_1 >> 2] | 0 | 0) != (3 | 0)) {
            break label$17
           }
           $3_1 = $0_1 + 56 | 0;
           HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
           FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
          }
          HEAP32[$5_1 >> 2] = 0;
         }
         i64toi32_i32$4 = $1$hi;
         i64toi32_i32$2 = $0_1;
         HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
         HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$4;
        }
        label$27 : {
         $9_1 = $2_1 + 32 | 0;
         if ($9_1 >>> 0 < global$2 >>> 0) {
          fimport$11()
         }
         global$0 = $9_1;
        }
        return 0 | 0;
       }
       $859(1123 | 0, 1039 | 0, 524 | 0);
       abort();
      }
      $859(1201 | 0, 1039 | 0, 560 | 0);
      abort();
     }
     $859(1209 | 0, 1039 | 0, 563 | 0);
     abort();
    }
    $859(1217 | 0, 1039 | 0, 576 | 0);
    abort();
   }
   $859(1240 | 0, 1039 | 0, 585 | 0);
   abort();
  }
  $859(1262 | 0, 1039 | 0, 586 | 0);
  abort();
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $14_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    if ($2_1 >>> 0 >= 9 >>> 0) {
     break label$1
    }
    $0_1 = (Math_imul($2_1, 20) + $0_1 | 0) + 52 | 0;
    $14_1 = $0_1;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = $0_1 - $1_1 | 0;
    $0_1 = $2_1 >>> 0 > $0_1 >>> 0 ? 0 : $2_1;
    HEAP32[$14_1 >> 2] = $0_1;
    return $0_1 | 0;
   }
   $859(1548 | 0, 1039 | 0, 256 | 0);
   abort();
  }
  $859(1262 | 0, 1039 | 0, 257 | 0);
  abort();
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, $7$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $34_1 = 0, $37_1 = 0, $39$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 > 8 >>> 0) {
      break label$2
     }
     i64toi32_i32$0 = 0;
     $7_1 = $1_1;
     $7$hi = i64toi32_i32$0;
     $3_1 = $0_1 + 64 | 0;
     $1_1 = $0_1 + 68 | 0;
     label$4 : {
      label$5 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       HEAP32[($0_1 + 64 | 0) >> 2] = $2_1;
       $4_1 = Math_imul($2_1, 20);
       $2_1 = $3_1 + $4_1 | 0;
       $9($0_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0);
       $34_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
       $37_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $39$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $39$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0]($34_1, $37_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
       HEAP8[($0_1 + 48 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ($2_1 | 0) == (1 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$4
       }
       $5_1 = (Math_imul($2_1, 20) + $1_1 | 0) + -16 | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       $4_1 = HEAP32[($1_1 + $4_1 | 0) >> 2] | 0;
       if ($6_1 >>> 0 < $4_1 >>> 0) {
        break label$1
       }
       if ($6_1 >>> 0 <= $4_1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
      HEAP32[$5_1 >> 2] = $6_1 - $4_1 | 0;
     }
     return;
    }
    $859(1240 | 0, 1039 | 0, 206 | 0);
    abort();
   }
   $859(1262 | 0, 1039 | 0, 207 | 0);
   abort();
  }
  $859(1675 | 0, 1039 | 0, 220 | 0);
  abort();
 }
 
 function $9($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $93_1 = 0, $96_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $16_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $2_1 >>> 24 | 0;
     $7_1 = $2_1 & 255 | 0;
     $8_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $9_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $10_1 = $5_1 + 36 | 0;
     $11_1 = $5_1 + 32 | 0;
     $12_1 = $5_1 + 28 | 0;
     $13_1 = $5_1 + 20 | 0;
     $14_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$10_1 >> 2] = $1_1;
       HEAP32[$11_1 >> 2] = $4_1;
       HEAP32[$12_1 >> 2] = $6_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $8_1;
       HEAP32[$13_1 >> 2] = $9_1;
       HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $15_1 >>> 24 | 0;
       HEAP32[$5_1 >> 2] = $15_1 & 255 | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = ($15_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = ($15_1 >>> 8 | 0) & 255 | 0;
       $827(1959 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $93_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $93_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $96_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $96_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 48 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $15_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 48 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$15_1) {
         break label$3
        }
        $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, $15_1) | 0;
        break label$8;
       }
       $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 48 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0 | ($15_1 | 0) == (1 | 0) | 0;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      if ($14_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $17_1 = $5_1 + 64 | 0;
     if ($17_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $17_1;
    }
    return;
   }
   $859(2006 | 0, 1039 | 0, 167 | 0);
   abort();
  }
  $859(2020 | 0, 1039 | 0, 169 | 0);
  abort();
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $18_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if (!$0_1) {
     break label$1
    }
    label$3 : {
     $2_1 = $813(256 | 0) | 0;
     if ($2_1) {
      break label$3
     }
     $11(633 | 0);
     return 0 | 0;
    }
    $845($2_1 | 0, 256 | 0, $2_1 | 0, 1024 | 0);
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 236 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $15_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 228 | 0) >> 2] = $18_1;
    HEAP32[($2_1 + 232 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    label$4 : {
     if ($0_1) {
      break label$4
     }
     $11(642 | 0);
     $815($2_1 | 0);
     return 0 | 0;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = 0;
    $12($2_1 + 244 | 0 | 0);
    $5($2_1 | 0);
    return $2_1 | 0;
   }
   $859(1299 | 0, 1039 | 0, 628 | 0);
   abort();
  }
  $859(1303 | 0, 1039 | 0, 629 | 0);
  abort();
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  $862(1039 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(1658 | 0, 1039 | 0, 939 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 8 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(1299 | 0, 1039 | 0, 687 | 0);
   abort();
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 2;
  HEAP32[($0_1 + 4 | 0) >> 2] = 3;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $14($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $15($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $16($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 700 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   $3_1 = $1_1 + 20 | 0;
   label$6 : while (1) {
    label$7 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
     $827(1311 | 0, $1_1 + 32 | 0 | 0);
    }
    label$8 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 >>> 24 | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$1_1 >> 2] = $0_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $4_1 & 255 | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     $827(1359 | 0, $1_1 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $5($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 256 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
  label$9 : {
   $6_1 = $1_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $4_1 = 0, $17_1 = 0, $16_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $24_1 = 0, $129_1 = 0, $25_1 = 0, $239_1 = 0, $242_1 = 0;
  label$1 : {
   $2_1 = global$0 - 176 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (1024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 1024 | 0, 1039 | 0, 720 | 0);
  }
  $3_1 = $2_1 + 20 | 0;
  $4_1 = $0_1 + 64 | 0;
  $5_1 = ($2_1 + 48 | 0) + 44 | 0;
  $6_1 = ($2_1 + 48 | 0) + 40 | 0;
  $7_1 = ($2_1 + 48 | 0) + 28 | 0;
  $8_1 = ($2_1 + 48 | 0) + 36 | 0;
  $9_1 = ($2_1 + 48 | 0) + 32 | 0;
  $10_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : while (1) {
            label$15 : {
             if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
              break label$15
             }
             $11_1 = $798($1_1 | 0) | 0;
             if (!$11_1) {
              break label$5
             }
             $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $11_1 | 0);
             $12_1 = $756($11_1 | 0) | 0;
             $735($11_1 | 0);
             $10_1 = $12_1 + $10_1 | 0;
            }
            HEAP8[($0_1 + 48 | 0) >> 0] = 0;
            label$16 : {
             label$17 : while (1) {
              $11_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
              $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
              HEAP8[($0_1 + 49 | 0) >> 0] = 0;
              label$18 : {
               label$19 : {
                switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
                case 0:
                 $13_1 = 0;
                 label$24 : {
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                  $24_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 = __wasm_i64_srem($24_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $12_1 = i64toi32_i32$0;
                  if (($12_1 + -1 | 0) >>> 0 >= $11_1 >>> 0) {
                   break label$24
                  }
                  if (($12_1 | 0) != (1 | 0)) {
                   break label$16
                  }
                  label$25 : {
                   if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
                    break label$25
                   }
                   if ($7($0_1 | 0, 1 | 0) | 0) {
                    break label$25
                   }
                   $8($0_1 | 0, 1 | 0);
                  }
                  $766($2_1 + 160 | 0 | 0, 1 | 0) | 0;
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                   continue label$17
                  }
                  $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  $13_1 = 1;
                 }
                 label$26 : {
                  label$27 : {
                   if (HEAP32[($0_1 + 64 | 0) >> 2] | 0) {
                    break label$27
                   }
                   if (!($20($0_1 | 0, $2_1 + 160 | 0 | 0) | 0)) {
                    continue label$14
                   }
                   break label$26;
                  }
                  $12_1 = $4($0_1 | 0) | 0;
                  if (!$12_1) {
                   break label$13
                  }
                  label$28 : {
                   $11_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                   if ($11_1 >>> 0 > 7 >>> 0) {
                    break label$28
                   }
                   label$29 : {
                    if (!$11_1) {
                     break label$29
                    }
                    if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$29
                    }
                    $14_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
                    i64toi32_i32$2 = $12_1;
                    i64toi32_i32$1 = HEAP32[$12_1 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                    $129_1 = i64toi32_i32$1;
                    i64toi32_i32$1 = $3_1;
                    HEAP32[i64toi32_i32$1 >> 2] = $129_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    HEAP32[($2_1 + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                    HEAP32[$2_1 >> 2] = $0_1;
                    HEAP32[($2_1 + 4 | 0) >> 2] = $14_1 & 255 | 0;
                    HEAP32[($2_1 + 8 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                    HEAP32[($2_1 + 12 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                    $827(1426 | 0, $2_1 | 0);
                   }
                   label$30 : {
                    if ($7($0_1 | 0, $11_1 | 0) | 0) {
                     break label$30
                    }
                    $8($0_1 | 0, $11_1 | 0);
                   }
                   $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                   $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                   if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                    break label$18
                   }
                   $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  }
                  if (!($21($0_1 | 0, $2_1 + 160 | 0 | 0) | 0)) {
                   continue label$14
                  }
                 }
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 continue label$17;
                case 3:
                 label$31 : {
                  $12_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
                  if ($12_1) {
                   break label$31
                  }
                  label$32 : {
                   if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$32
                   }
                   HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
                   $827(1498 | 0, $2_1 + 32 | 0 | 0);
                  }
                  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                  HEAP32[($0_1 + 56 | 0) >> 2] = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 1 | 0;
                  FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
                  continue label$14;
                 }
                 if (!($4($0_1 | 0) | 0)) {
                  break label$12
                 }
                 label$33 : {
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                  $25_1 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$0 = __wasm_i64_srem($25_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                  $13_1 = i64toi32_i32$0;
                  if (($13_1 + -1 | 0) >>> 0 >= $11_1 >>> 0) {
                   break label$33
                  }
                  if (($13_1 | 0) != (1 | 0)) {
                   break label$11
                  }
                  label$34 : {
                   if ($7($0_1 | 0, 1 | 0) | 0) {
                    break label$34
                   }
                   $8($0_1 | 0, 1 | 0);
                  }
                  $766($2_1 + 160 | 0 | 0, 1 | 0) | 0;
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
                   continue label$14
                  }
                  $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                  $12_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
                  if (!$12_1) {
                   break label$10
                  }
                 }
                 $15_1 = 0;
                 $11_1 = 0;
                 label$35 : {
                  label$36 : {
                   label$37 : {
                    $13_1 = HEAP32[((Math_imul($12_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0;
                    if ($13_1 >>> 0 >= 8 >>> 0) {
                     break label$37
                    }
                    $11_1 = $13_1;
                    break label$36;
                   }
                   label$38 : while (1) {
                    i64toi32_i32$2 = ($2_1 + 160 | 0) + 8 | 0;
                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                    $239_1 = i64toi32_i32$1;
                    i64toi32_i32$1 = ($2_1 + 144 | 0) + 8 | 0;
                    HEAP32[i64toi32_i32$1 >> 2] = $239_1;
                    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                    i64toi32_i32$2 = $2_1;
                    i64toi32_i32$0 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
                    i64toi32_i32$1 = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
                    $242_1 = i64toi32_i32$0;
                    i64toi32_i32$0 = $2_1;
                    HEAP32[($2_1 + 144 | 0) >> 2] = $242_1;
                    HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
                    $766($2_1 + 160 | 0 | 0, 2 | 0) | 0;
                    $14_1 = $776($2_1 + 144 | 0 | 0) | 0;
                    $12_1 = $776($2_1 + 144 | 0 | 0) | 0;
                    if ((HEAP32[($2_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                     break label$35
                    }
                    label$39 : {
                     if (!($12_1 & -17 | 0)) {
                      break label$39
                     }
                     if (($12_1 + $11_1 | 0) >>> 0 > $13_1 >>> 0) {
                      break label$39
                     }
                     if (!($22($0_1 | 0, $14_1 | 0) | 0)) {
                      break label$39
                     }
                     label$40 : {
                      label$41 : {
                       if ((HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0)) {
                        break label$41
                       }
                       if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
                        break label$40
                       }
                       $15_1 = Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + $4_1 | 0;
                       $13_1 = HEAP32[($15_1 + -4 | 0) >> 2] | 0;
                       i64toi32_i32$2 = $0_1;
                       i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                       i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                       HEAP32[(($2_1 + 96 | 0) + 44 | 0) >> 2] = HEAP32[($15_1 + -12 | 0) >> 2] | 0;
                       HEAP32[(($2_1 + 96 | 0) + 24 | 0) >> 2] = i64toi32_i32$1;
                       HEAP32[(($2_1 + 96 | 0) + 20 | 0) >> 2] = $12_1;
                       HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 40 | 0) >> 2] = $13_1 >>> 24 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 28 | 0) >> 2] = $13_1 & 255 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 36 | 0) >> 2] = ($13_1 >>> 16 | 0) & 255 | 0;
                       HEAP32[(($2_1 + 96 | 0) + 32 | 0) >> 2] = ($13_1 >>> 8 | 0) & 255 | 0;
                       HEAP32[($2_1 + 108 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                       HEAP32[($2_1 + 104 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                       HEAP32[($2_1 + 100 | 0) >> 2] = $14_1 & 255 | 0;
                       HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
                       $827(1568 | 0, $2_1 + 96 | 0 | 0);
                       break label$40;
                      }
                      if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                       break label$40
                      }
                      if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
                       break label$40
                      }
                      $15_1 = Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + $4_1 | 0;
                      $13_1 = HEAP32[($15_1 + -4 | 0) >> 2] | 0;
                      i64toi32_i32$2 = $0_1;
                      i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                      HEAP32[$5_1 >> 2] = HEAP32[($15_1 + -12 | 0) >> 2] | 0;
                      HEAP32[(($2_1 + 48 | 0) + 24 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[(($2_1 + 48 | 0) + 20 | 0) >> 2] = $12_1;
                      HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $14_1 >>> 24 | 0;
                      HEAP32[$6_1 >> 2] = $13_1 >>> 24 | 0;
                      HEAP32[$7_1 >> 2] = $13_1 & 255 | 0;
                      HEAP32[$8_1 >> 2] = ($13_1 >>> 16 | 0) & 255 | 0;
                      HEAP32[$9_1 >> 2] = ($13_1 >>> 8 | 0) & 255 | 0;
                      HEAP32[($2_1 + 60 | 0) >> 2] = ($14_1 >>> 16 | 0) & 255 | 0;
                      HEAP32[($2_1 + 56 | 0) >> 2] = ($14_1 >>> 8 | 0) & 255 | 0;
                      HEAP32[($2_1 + 52 | 0) >> 2] = $14_1 & 255 | 0;
                      HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
                      $827(1568 | 0, $2_1 + 48 | 0 | 0);
                     }
                     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                     $15_1 = 1;
                     HEAP32[($0_1 + 56 | 0) >> 2] = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 1 | 0;
                     FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
                     $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                     break label$35;
                    }
                    $11_1 = $11_1 + 2 | 0;
                    if ($11_1 >>> 0 < $13_1 >>> 0) {
                     continue label$38
                    }
                    break label$38;
                   };
                  }
                  $15_1 = 1;
                 }
                 label$42 : {
                  if ($7($0_1 | 0, $11_1 | 0) | 0) {
                   break label$42
                  }
                  $8($0_1 | 0, $11_1 | 0);
                 }
                 $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
                 $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 if (!$15_1) {
                  continue label$14
                 }
                 if ((HEAPU8[($0_1 + 48 | 0) >> 0] | 0) & 255 | 0) {
                  continue label$14
                 }
                 continue label$17;
                case 1:
                 $12_1 = $4($0_1 | 0) | 0;
                 if (!$12_1) {
                  break label$9
                 }
                 $12_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
                 $11_1 = $11_1 >>> 0 < $12_1 >>> 0 ? $11_1 : $12_1;
                 $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
                 label$43 : {
                  if (!($7($0_1 | 0, $11_1 | 0) | 0)) {
                   break label$43
                  }
                  $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                  continue label$14;
                 }
                 $8($0_1 | 0, $11_1 | 0);
                 HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                 $11_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 if ($11_1) {
                  continue label$14
                 }
                 continue label$17;
                case 2:
                 $13_1 = $4($0_1 | 0) | 0;
                 if (!$13_1) {
                  break label$8
                 }
                 $12_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
                 if ($11_1 >>> 0 < $12_1 >>> 0) {
                  continue label$14
                 }
                 if ($7($0_1 | 0, $12_1 | 0) | 0) {
                  break label$7
                 }
                 label$44 : {
                  $11_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                  if (($11_1 + 1 | 0) >>> 0 < 2 >>> 0) {
                   break label$44
                  }
                  $9($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $11_1 | 0, $2_1 + 160 | 0 | 0, $12_1 | 0);
                 }
                 HEAP32[($0_1 + 32 | 0) >> 2] = 0;
                 $11_1 = $23($0_1 | 0) | 0;
                 if (!$11_1) {
                  break label$6
                 }
                 label$45 : {
                  $11_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
                  if (!$11_1) {
                   break label$45
                  }
                  $13_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
                  if (($13_1 + 1 | 0) >>> 0 < 2 >>> 0) {
                   break label$45
                  }
                  $9($0_1 | 0, $11_1 | 0, $13_1 | 0, $2_1 + 160 | 0 | 0, $12_1 | 0);
                 }
                 $8($0_1 | 0, $12_1 | 0);
                 $11_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                 $766($2_1 + 160 | 0 | 0, $12_1 | 0) | 0;
                 $19($0_1 | 0, $2_1 + 160 | 0 | 0);
                 HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                 if (!$11_1) {
                  continue label$17
                 }
                 break label$5;
                case 4:
                 break label$19;
                default:
                 continue label$14;
                };
               }
               $766($2_1 + 160 | 0 | 0, $11_1 | 0) | 0;
               $19($0_1 | 0, $2_1 + 160 | 0 | 0);
               continue label$14;
              }
              if (!$13_1) {
               continue label$14
              }
              continue label$17;
             };
            }
            break label$14;
           };
           $859(1414 | 0, 1039 | 0, 752 | 0);
           abort();
          }
          $859(1422 | 0, 1039 | 0, 771 | 0);
          abort();
         }
         $859(1422 | 0, 1039 | 0, 803 | 0);
         abort();
        }
        $859(1414 | 0, 1039 | 0, 810 | 0);
        abort();
       }
       $859(1548 | 0, 1039 | 0, 828 | 0);
       abort();
      }
      $859(1422 | 0, 1039 | 0, 875 | 0);
      abort();
     }
     $859(1422 | 0, 1039 | 0, 888 | 0);
     abort();
    }
    $859(1643 | 0, 1039 | 0, 897 | 0);
    abort();
   }
   $859(1651 | 0, 1039 | 0, 906 | 0);
   abort();
  }
  label$46 : {
   $17_1 = $2_1 + 176 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  return $10_1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 96 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  $4_1 = $776($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 76 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 72 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(1699 | 0, $2_1 + 64 | 0 | 0);
    }
    label$6 : {
     if (($3_1 | 0) != (1263424842 | 0)) {
      break label$6
     }
     $24($0_1 | 0, 1263424842 | 0, $4_1 | 0, 0 | 0, 0 | 0) | 0;
     $5_1 = 1;
     HEAP32[($0_1 + 16 | 0) >> 2] = 1;
     break label$3;
    }
    $6_1 = $776($1_1 | 0) | 0;
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$7 : {
     if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1 >>> 24 | 0;
     HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
     HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(1731 | 0, $2_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (($3_1 | 0) != (1179011410 | 0)) {
      break label$8
     }
     if ($4_1 >>> 0 < 4 >>> 0) {
      break label$8
     }
     if (!(($6_1 | 0) == (541677121 | 0) | ($6_1 | 0) == (1481201217 | 0) | 0)) {
      break label$8
     }
     $24($0_1 | 0, $6_1 | 0, $4_1 | 0, 4 | 0, 0 | 0) | 0;
     $5_1 = 1;
     break label$3;
    }
    label$9 : {
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(1779 | 0, $2_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 4;
    $5_1 = 1;
    $1_1 = $0_1 + 60 | 0;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
    break label$3;
   }
   $769($1_1 | 0, $2_1 + 88 | 0 | 0);
  }
  label$10 : {
   $8_1 = $2_1 + 96 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  $4_1 = $776($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (($3_1 | 0) == (1414744396 | 0)) {
        break label$7
       }
       $6_1 = 0;
       if (($3_1 | 0) != (1179011410 | 0)) {
        break label$6
       }
      }
      $3_1 = $776($1_1 | 0) | 0;
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $6_1 = 4;
      $5_1 = 1;
     }
     $7_1 = $4($0_1 | 0) | 0;
     if (!$7_1) {
      break label$3
     }
     $7($0_1 | 0, 8 | 0) | 0;
     label$8 : {
      if ($5_1 ^ 1 | 0 | (HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0) | 0) {
       break label$8
      }
      if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(1813 | 0, $2_1 + 16 | 0 | 0);
     }
     label$9 : {
      label$10 : {
       label$11 : {
        $1_1 = $22($0_1 | 0, $3_1 | 0) | 0;
        if ($5_1 | ($1_1 | 0) != (0 | 0) | 0) {
         break label$11
        }
        if (!($25($0_1 | 0, $3_1 | 0) | 0)) {
         break label$10
        }
       }
       $8_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$9
       }
       if ((HEAP32[((Math_imul($8_1, 20) + $0_1 | 0) + 52 | 0) >> 2] | 0) >>> 0 >= $4_1 >>> 0) {
        break label$9
       }
       if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[((Math_imul(HEAP32[($0_1 + 64 | 0) >> 2] | 0, 20) + ($0_1 + 64 | 0) | 0) + -12 | 0) >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(1848 | 0, $2_1 | 0);
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 3;
      $1_1 = 1;
      $3_1 = $0_1 + 52 | 0;
      HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
      FUNCTION_TABLE[HEAP32[($0_1 + 240 | 0) >> 2] | 0](HEAP32[($0_1 + 228 | 0) >> 2] | 0);
      break label$4;
     }
     label$12 : {
      if (!($24($0_1 | 0, $3_1 | 0, $4_1 | 0, $6_1 | 0, ($5_1 ? $1_1 : 0) | 0) | 0)) {
       break label$12
      }
      label$13 : {
       if (!$5_1) {
        break label$13
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       $1_1 = 1;
       break label$4;
      }
      label$14 : {
       if ($1_1) {
        break label$14
       }
       if (!(HEAP32[($7_1 + 8 | 0) >> 2] | 0)) {
        break label$12
       }
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 2;
      HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      $1_1 = 1;
      break label$4;
     }
     $1_1 = 1;
     HEAP32[($0_1 + 16 | 0) >> 2] = 1;
     break label$4;
    }
    $769($1_1 | 0, $2_1 + 40 | 0 | 0);
    $1_1 = 0;
   }
   label$15 : {
    $10_1 = $2_1 + 48 | 0;
    if ($10_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $10_1;
   }
   return $1_1 | 0;
  }
  $859(1651 | 0, 1039 | 0, 357 | 0);
  abort();
 }
 
 function $22($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (Math_imul($1_1, 20) + ($0_1 + 64 | 0) | 0) + -36 | 0 : 0) | 0;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $49$hi = 0, $52$hi = 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if ($6_1 >>> 0 > 7 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $5_1 = ($0_1 + 64 | 0) + Math_imul($6_1, 20) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $3_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    $7_1 = $2_1 - $3_1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    $5_1 = 1;
    HEAP32[($0_1 + 64 | 0) >> 2] = $6_1 + 1 | 0;
    $9($0_1 | 0, $4_1 | 0, 0 | 0, 0 | 0, 0 | 0);
    $44_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
    $45_1 = $1_1;
    $46_1 = $7_1;
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $49$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $52$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $49$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $52$hi;
    i64toi32_i32$3 = $3_1 + 8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 232 | 0) >> 2] | 0]($44_1, $45_1, $46_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
    $0_1 = $0_1 + 48 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[$0_1 >> 0] | 0 | ($3_1 | 0) == (1 | 0) | 0;
   }
   return $5_1 | 0;
  }
  $859(1800 | 0, 1039 | 0, 189 | 0);
  abort();
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 1;
  label$3 : {
   $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$3
   }
   if ((HEAP32[((Math_imul($4_1, 20) + $0_1 | 0) + 60 | 0) >> 2] | 0 | 0) != (1769369453 | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = $1_1 & -65536 | 0;
      if (($4_1 | 0) > (1667497983 | 0)) {
       break label$6
      }
      if (($4_1 | 0) == (1650720768 | 0)) {
       break label$5
      }
      if (($4_1 | 0) == (1651703808 | 0)) {
       break label$5
      }
      if (($4_1 | 0) == (1651965952 | 0)) {
       break label$5
      }
      break label$4;
     }
     if (($4_1 | 0) == (1667497984 | 0)) {
      break label$5
     }
     if (($4_1 | 0) == (2019819520 | 0)) {
      break label$5
     }
     if (($4_1 | 0) != (1684275200 | 0)) {
      break label$4
     }
    }
    if ((($1_1 & 255 | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
     break label$4
    }
    if ((($1_1 & 65280 | 0) + -12288 | 0) >>> 0 < 2305 >>> 0) {
     break label$3
    }
   }
   label$7 : {
    if (($1_1 & 65535 | 0 | 0) != (30825 | 0)) {
     break label$7
    }
    if ((($1_1 & 16711680 | 0) + -3145728 | 0) >>> 0 > 589824 >>> 0) {
     break label$7
    }
    if ((($1_1 + -805306368 | 0) & -16777216 | 0) >>> 0 < 150994945 >>> 0) {
     break label$3
    }
   }
   if (($1_1 | 0) == (1263424842 | 0)) {
    break label$3
   }
   if (($1_1 | 0) == (1802401130 | 0)) {
    break label$3
   }
   label$8 : {
    label$9 : {
     $4_1 = $1_1 & 16777215 | 0;
     if (($4_1 | 0) == (7562610 | 0)) {
      break label$9
     }
     if (($4_1 | 0) != (5457234 | 0)) {
      break label$8
     }
    }
    if ((($1_1 + -805306368 | 0) & -16777216 | 0) >>> 0 < 150994945 >>> 0) {
     break label$3
    }
   }
   $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 40 | 0) >> 2] = $3_1;
   label$10 : {
    label$11 : {
     if (($3_1 | 0) == ($1_1 | 0)) {
      break label$11
     }
     if (!($834(61528 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     i64toi32_i32$2 = $0_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(1897 | 0, $2_1 + 16 | 0 | 0);
     break label$10;
    }
    if ((HEAP8[(0 + 61528 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 61528 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(1897 | 0, $2_1 | 0);
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
   $3_1 = 0;
  }
  label$12 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($1_1 | 0) == (1179011410 | 0) & ($2_1 | 0) == (541677121 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(3152 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 3152;
    $827(2104 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 3152 | 0, $2_1 | 0, 2025 | 0);
   HEAP32[($2_1 + 208 | 0) >> 2] = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 148 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 132 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 116 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 100 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 84 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 68 | 0) >> 2] = $2_1;
   $13($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 20 | 0) >> 2] = 4;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $10($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $2($0_1 | 0, $2_1 + 56 | 0 | 0, 1819436136 | 0, 5 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 72 | 0 | 0, 1819440243 | 0, 6 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 88 | 0 | 0, 1819108463 | 0, 7 | 0);
    $2(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 104 | 0 | 0, 543384946 | 0, 8 | 0);
    HEAP32[($2_1 + 144 | 0) >> 2] = 0;
    HEAP32[($2_1 + 128 | 0) >> 2] = 0;
    $822($2_1 + 2776 | 0 | 0, 0 | 0, 160 | 0) | 0;
    $822($2_1 + 216 | 0 | 0, 0 | 0, 2560 | 0) | 0;
    HEAP32[($2_1 + 2936 | 0) >> 2] = 0;
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 595 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 | 0) == (829973609 | 0)) {
      break label$5
     }
     if (($1_1 | 0) != (1769369453 | 0)) {
      break label$4
     }
     HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $0_1;
     HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     break label$3;
    }
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $2_1 & -16 | 0;
    label$6 : {
     if ($2_1 >>> 0 < 17 >>> 0) {
      break label$6
     }
     $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     if (HEAPU8[($0_1 + 50 | 0) >> 0] | 0) {
      break label$6
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 1;
    }
    HEAP8[($0_1 + 46 | 0) >> 0] = 1;
    break label$3;
   }
   i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $9_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $10_1 = 0
     } else {
      $10_1 = 1
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    $9_1 = $11_1;
   }
   if ($9_1) {
    break label$3
   }
   if (HEAP32[($0_1 + 208 | 0) >> 2] | 0) {
    break label$3
   }
   HEAP8[($0_1 + 46 | 0) >> 0] = 1;
  }
  return HEAPU8[($0_1 + 46 | 0) >> 0] | 0 | 0;
 }
 
 function $29($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $126$hi = 0, $130$hi = 0, $19_1 = 0, $20_1 = 0;
  label$1 : {
   $3_1 = global$0 - 80 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(2234 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 218 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (($1_1 | 0) == (1751742049 | 0)) {
      break label$10
     }
     if ($1_1) {
      break label$9
     }
     label$11 : {
      $1_1 = $813(56 | 0) | 0;
      if ($1_1) {
       break label$11
      }
      label$12 : {
       if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = 56;
       HEAP32[$3_1 >> 2] = $4_1;
       $827(2287 | 0, $3_1 | 0);
      }
      $1_1 = 1;
      HEAP8[($4_1 + 47 | 0) >> 0] = 1;
      break label$8;
     }
     $214($1_1 | 0, 9 | 0);
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = -1;
     HEAP32[($1_1 + 48 | 0) >> 2] = -1;
     HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = 0;
     HEAP32[($1_1 + 40 | 0) >> 2] = 0;
     HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
     HEAP8[($4_1 + 3148 | 0) >> 0] = 0;
     break label$9;
    }
    label$13 : {
     if ($39($4_1 + 152 | 0 | 0, $2_1 | 0) | 0) {
      break label$13
     }
     if (!($834(61544 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
     $827(2332 | 0, $3_1 + 16 | 0 | 0);
     break label$9;
    }
    HEAP8[($4_1 + 49 | 0) >> 0] = 1;
    $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$9
    }
    i64toi32_i32$0 = HEAP32[($4_1 + 168 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $126$hi = i64toi32_i32$1;
    $0_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $130$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $126$hi;
    $19_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $130$hi;
    i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$1 | 0, $0_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $20_1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($20_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 156 | 0) >> 2] | 0) << 3 | 0;
    label$14 : {
     if (!$0_1) {
      break label$14
     }
     HEAP32[($1_1 + 40 | 0) >> 2] = (1e9 >>> 0) / ($0_1 >>> 0) | 0;
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($4_1 + 180 | 0) >> 2] | 0;
   }
   $1_1 = 0;
   if (!$2_1) {
    break label$8
   }
   $735($2_1 | 0);
  }
  label$15 : {
   $14_1 = $3_1 + 80 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $1_1 | 0;
 }
 
 function $30($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $174_1 = 0, $174$hi = 0, $177_1 = 0, $177$hi = 0, $25_1 = 0, $179$hi = 0, $181$hi = 0, $26_1 = 0, $498_1 = 0;
  label$1 : {
   $3_1 = global$0 - 112 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$4
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$3
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 272 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($2_1) {
      break label$7
     }
     $12_1 = 0;
     break label$6;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 48 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $5_1;
   HEAP32[(($3_1 + 16 | 0) + 24 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $10_1;
   $827(2389 | 0, $3_1 + 16 | 0 | 0);
  }
  $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    label$26 : {
                     label$27 : {
                      label$28 : {
                       if (($1_1 | 0) > (1752331378 | 0)) {
                        break label$28
                       }
                       label$29 : {
                        switch ($1_1 + 1 | 0 | 0) {
                        case 0:
                         break label$21;
                        case 1:
                         break label$27;
                        default:
                         break label$29;
                        };
                       }
                       if (($1_1 | 0) == (1685222515 | 0)) {
                        break label$23
                       }
                       if (($1_1 | 0) != (1718776947 | 0)) {
                        break label$20
                       }
                       if (!$2_1) {
                        break label$17
                       }
                       if (!$0_1) {
                        break label$9
                       }
                       if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                        break label$9
                       }
                       switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
                       case 0:
                        break label$24;
                       case 1:
                        break label$25;
                       default:
                        break label$9;
                       };
                      }
                      if (($1_1 | 0) == (1752331379 | 0)) {
                       break label$26
                      }
                      if (($1_1 | 0) == (1852994675 | 0)) {
                       break label$22
                      }
                      if (($1_1 | 0) != (2019847785 | 0)) {
                       break label$20
                      }
                      HEAP8[($4_1 + 3148 | 0) >> 0] = 1;
                      $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                      if (!$1_1) {
                       break label$20
                      }
                      if (HEAPU8[($4_1 + 50 | 0) >> 0] | 0) {
                       break label$20
                      }
                      HEAP32[($1_1 + 12 | 0) >> 2] = 1;
                      break label$20;
                     }
                     if ($0_1) {
                      break label$19
                     }
                     label$30 : {
                      $1_1 = $813(376 | 0) | 0;
                      if ($1_1) {
                       break label$30
                      }
                      if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
                       break label$20
                      }
                      i64toi32_i32$1 = $3_1;
                      i64toi32_i32$0 = 376;
                      HEAP32[$3_1 >> 2] = 0;
                      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      $827(2451 | 0, $3_1 | 0);
                      break label$20;
                     }
                     $218($1_1 | 0);
                     $0_1 = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
                     HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
                     HEAP16[($1_1 + 356 | 0) >> 1] = 0;
                     HEAP32[($1_1 + 340 | 0) >> 2] = 0;
                     i64toi32_i32$1 = $1_1;
                     i64toi32_i32$0 = 0;
                     HEAP32[($1_1 + 328 | 0) >> 2] = 0;
                     HEAP32[($1_1 + 332 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
                     HEAP16[($4_1 + 44 | 0) >> 1] = 0;
                     i64toi32_i32$1 = $1_1;
                     i64toi32_i32$0 = 0;
                     HEAP32[($1_1 + 344 | 0) >> 2] = 0;
                     HEAP32[($1_1 + 348 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($1_1 + 352 | 0) >> 2] = 0;
                     HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
                     break label$20;
                    }
                    if (!$2_1) {
                     break label$18
                    }
                    if (!$0_1) {
                     break label$9
                    }
                    $5_1 = $4_1 + 2940 | 0;
                    $1_1 = $38($5_1 | 0, $2_1 | 0) | 0;
                    HEAP8[($4_1 + 44 | 0) >> 0] = $1_1;
                    if (!$1_1) {
                     break label$9
                    }
                    label$31 : {
                     label$32 : {
                      label$33 : {
                       $1_1 = HEAP32[$5_1 >> 2] | 0;
                       if (($1_1 | 0) == (1935960438 | 0)) {
                        break label$33
                       }
                       if (($1_1 | 0) != (1935963489 | 0)) {
                        break label$32
                       }
                       HEAP32[($0_1 + 4 | 0) >> 2] = 1;
                       break label$31;
                      }
                      HEAP32[($0_1 + 4 | 0) >> 2] = 0;
                      break label$31;
                     }
                     HEAP32[($0_1 + 4 | 0) >> 2] = 4;
                     HEAP8[($4_1 + 45 | 0) >> 0] = 1;
                    }
                    label$34 : {
                     $1_1 = HEAP32[($4_1 + 2964 | 0) >> 2] | 0;
                     if (!$1_1) {
                      break label$34
                     }
                     i64toi32_i32$2 = $4_1 + 2960 | 0;
                     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$1 = 0;
                     $174_1 = i64toi32_i32$0;
                     $174$hi = i64toi32_i32$1;
                     i64toi32_i32$2 = $4_1 + 2972 | 0;
                     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$0 = 0;
                     $177_1 = i64toi32_i32$1;
                     $177$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = $174$hi;
                     i64toi32_i32$1 = $177$hi;
                     i64toi32_i32$1 = __wasm_i64_mul($174_1 | 0, i64toi32_i32$0 | 0, $177_1 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     $25_1 = i64toi32_i32$1;
                     i64toi32_i32$1 = 0;
                     i64toi32_i32$1 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     $179$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = 0;
                     $181$hi = i64toi32_i32$0;
                     i64toi32_i32$0 = $179$hi;
                     $26_1 = i64toi32_i32$1;
                     i64toi32_i32$1 = $181$hi;
                     i64toi32_i32$1 = __wasm_i64_udiv($26_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
                     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                     HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$1;
                    }
                    HEAP32[($0_1 + 344 | 0) >> 2] = HEAP32[($4_1 + 2976 | 0) >> 2] | 0;
                    break label$9;
                   }
                   $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                   $1_1 = $4_1 + 2996 | 0;
                   $5_1 = $260($1_1 | 0, $3_1 + 56 | 0 | 0) | 0;
                   HEAP8[($4_1 + 45 | 0) >> 0] = $5_1;
                   if (!$5_1) {
                    break label$9
                   }
                   HEAP32[($0_1 + 352 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
                   label$35 : {
                    label$36 : {
                     if (!($268($1_1 | 0) | 0)) {
                      break label$36
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 138;
                     break label$35;
                    }
                    label$37 : {
                     label$38 : {
                      label$39 : {
                       label$40 : {
                        label$41 : {
                         $5_1 = HEAPU16[$1_1 >> 1] | 0;
                         switch ($5_1 + -353 | 0 | 0) {
                         case 1:
                          break label$39;
                         case 0:
                          break label$40;
                         default:
                          break label$41;
                         };
                        }
                        if (($5_1 | 0) == (80 | 0)) {
                         break label$38
                        }
                        if (($5_1 | 0) != (85 | 0)) {
                         break label$37
                        }
                        HEAP32[($0_1 + 20 | 0) >> 2] = 1;
                        break label$35;
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 136;
                       break label$35;
                      }
                      HEAP32[($0_1 + 20 | 0) >> 2] = 137;
                      break label$35;
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 3;
                     break label$35;
                    }
                    label$42 : {
                     if (!($269($1_1 | 0) | 0)) {
                      break label$42
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 129;
                     break label$35;
                    }
                    label$43 : {
                     label$44 : {
                      label$45 : {
                       $1_1 = HEAPU16[$1_1 >> 1] | 0;
                       if (($1_1 | 0) > (99 | 0)) {
                        break label$45
                       }
                       if (($1_1 | 0) == (2 | 0)) {
                        break label$44
                       }
                       if (($1_1 | 0) != (17 | 0)) {
                        break label$43
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 143;
                       break label$35;
                      }
                      label$46 : {
                       if (($1_1 | 0) == (100 | 0)) {
                        break label$46
                       }
                       if (($1_1 | 0) != (8193 | 0)) {
                        break label$43
                       }
                       HEAP32[($0_1 + 20 | 0) >> 2] = 130;
                       break label$35;
                      }
                      HEAP32[($0_1 + 20 | 0) >> 2] = 142;
                      break label$35;
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 141;
                     break label$35;
                    }
                    label$47 : {
                     if (($1_1 | 0) != (255 | 0)) {
                      break label$47
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 15;
                     break label$35;
                    }
                    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
                   }
                   HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 2998 | 0) >> 0] | 0;
                   HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 3010 | 0) >> 0] | 0;
                   HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 3e3 | 0) >> 2] | 0;
                   $4_1 = (((HEAP32[($4_1 + 3004 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1e3 >>> 0) | 0;
                   HEAP16[($0_1 + 26 | 0) >> 1] = $4_1;
                   HEAP32[($0_1 + 348 | 0) >> 2] = $4_1 & 65535 | 0;
                   break label$9;
                  }
                  $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                  $1_1 = $261($3_1 + 72 | 0 | 0, $3_1 + 56 | 0 | 0) | 0;
                  HEAP8[($4_1 + 45 | 0) >> 0] = $1_1;
                  if (!$1_1) {
                   break label$9
                  }
                  $1_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
                  HEAP32[($0_1 + 352 | 0) >> 2] = $1_1;
                  HEAP32[($0_1 + 24 | 0) >> 2] = 1;
                  label$48 : {
                   label$49 : {
                    label$50 : {
                     label$51 : {
                      label$52 : {
                       if (($1_1 | 0) > (875967079 | 0)) {
                        break label$52
                       }
                       label$53 : {
                        if (($1_1 | 0) > (844313676 | 0)) {
                         break label$53
                        }
                        label$54 : {
                         if (($1_1 | 0) > (826496598 | 0)) {
                          break label$54
                         }
                         label$55 : {
                          if (($1_1 | 0) > (808802371 | 0)) {
                           break label$55
                          }
                          if (($1_1 | 0) == (541283905 | 0)) {
                           break label$12
                          }
                          if (($1_1 | 0) == (543389281 | 0)) {
                           break label$12
                          }
                          break label$14;
                         }
                         if (($1_1 | 0) == (808802372 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) == (808810596 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) == (826496577 | 0)) {
                          break label$12
                         }
                         break label$14;
                        }
                        label$56 : {
                         if (($1_1 | 0) > (828601952 | 0)) {
                          break label$56
                         }
                         if (($1_1 | 0) == (826496599 | 0)) {
                          break label$13
                         }
                         if (($1_1 | 0) != (827738419 | 0)) {
                          break label$14
                         }
                         break label$48;
                        }
                        if (($1_1 | 0) == (828601953 | 0)) {
                         break label$12
                        }
                        if (($1_1 | 0) == (828601975 | 0)) {
                         break label$13
                        }
                        if (($1_1 | 0) != (829843763 | 0)) {
                         break label$14
                        }
                        break label$48;
                       }
                       label$57 : {
                        if (($1_1 | 0) > (859074668 | 0)) {
                         break label$57
                        }
                        label$58 : {
                         if (($1_1 | 0) > (846410860 | 0)) {
                          break label$58
                         }
                         if (($1_1 | 0) == (844313677 | 0)) {
                          break label$48
                         }
                         if (($1_1 | 0) != (844515635 | 0)) {
                          break label$14
                         }
                         break label$48;
                        }
                        if (($1_1 | 0) == (846410861 | 0)) {
                         break label$48
                        }
                        if (($1_1 | 0) == (846620979 | 0)) {
                         break label$48
                        }
                        if (($1_1 | 0) == (859066445 | 0)) {
                         break label$51
                        }
                        break label$14;
                       }
                       label$59 : {
                        if (($1_1 | 0) > (863398243 | 0)) {
                         break label$59
                        }
                        if (($1_1 | 0) == (859074669 | 0)) {
                         break label$51
                        }
                        if (($1_1 | 0) == (861292868 | 0)) {
                         break label$51
                        }
                        if (($1_1 | 0) != (861293911 | 0)) {
                         break label$14
                        }
                        break label$11;
                       }
                       if (($1_1 | 0) == (863398244 | 0)) {
                        break label$51
                       }
                       if (($1_1 | 0) == (863399287 | 0)) {
                        break label$11
                       }
                       if (($1_1 | 0) != (875967048 | 0)) {
                        break label$14
                       }
                       break label$12;
                      }
                      if (($1_1 | 0) > (1145656919 | 0)) {
                       break label$49
                      }
                      if (($1_1 | 0) > (894847299 | 0)) {
                       break label$50
                      }
                      label$60 : {
                       if (($1_1 | 0) > (878070083 | 0)) {
                        break label$60
                       }
                       if (($1_1 | 0) == (875967080 | 0)) {
                        break label$12
                       }
                       if (($1_1 | 0) != (877677894 | 0)) {
                        break label$14
                       }
                       break label$48;
                      }
                      if (($1_1 | 0) == (878070084 | 0)) {
                       break label$51
                      }
                      if (($1_1 | 0) == (879783270 | 0)) {
                       break label$48
                      }
                      if (($1_1 | 0) != (880175460 | 0)) {
                       break label$14
                      }
                     }
                     HEAP32[($0_1 + 20 | 0) >> 2] = 785;
                     break label$10;
                    }
                    label$61 : {
                     if (($1_1 | 0) > (911624515 | 0)) {
                      break label$61
                     }
                     if (($1_1 | 0) == (894847300 | 0)) {
                      break label$48
                     }
                     if (($1_1 | 0) != (896952676 | 0)) {
                      break label$14
                     }
                     break label$48;
                    }
                    if (($1_1 | 0) == (911624516 | 0)) {
                     break label$48
                    }
                    if (($1_1 | 0) == (913729892 | 0)) {
                     break label$48
                    }
                    if (($1_1 | 0) != (1096174935 | 0)) {
                     break label$14
                    }
                    break label$13;
                   }
                   label$62 : {
                    label$63 : {
                     label$64 : {
                      if (($1_1 | 0) > (1635151222 | 0)) {
                       break label$64
                      }
                      label$65 : {
                       if (($1_1 | 0) > (1213420373 | 0)) {
                        break label$65
                       }
                       if (($1_1 | 0) == (1145656920 | 0)) {
                        break label$48
                       }
                       if (($1_1 | 0) != (1196444237 | 0)) {
                        break label$14
                       }
                       break label$63;
                      }
                      if (($1_1 | 0) == (1213420374 | 0)) {
                       break label$12
                      }
                      if (($1_1 | 0) == (1395937357 | 0)) {
                       break label$48
                      }
                      if (($1_1 | 0) == (1482049860 | 0)) {
                       break label$48
                      }
                      break label$14;
                     }
                     if (($1_1 | 0) > (1752396661 | 0)) {
                      break label$62
                     }
                     if (($1_1 | 0) == (1635151223 | 0)) {
                      break label$13
                     }
                     if (($1_1 | 0) == (1684633208 | 0)) {
                      break label$48
                     }
                     if (($1_1 | 0) != (1735420525 | 0)) {
                      break label$14
                     }
                    }
                    HEAP32[($0_1 + 20 | 0) >> 2] = 245;
                    break label$10;
                   }
                   if (($1_1 | 0) == (1752396662 | 0)) {
                    break label$12
                   }
                   if (($1_1 | 0) == (2021026148 | 0)) {
                    break label$48
                   }
                   if (($1_1 | 0) != (1932816493 | 0)) {
                    break label$14
                   }
                  }
                  HEAP32[($0_1 + 20 | 0) >> 2] = 16;
                  break label$10;
                 }
                 if (!$2_1) {
                  break label$16
                 }
                 if (!$0_1) {
                  break label$9
                 }
                 if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                  break label$9
                 }
                 if (!(HEAPU8[($4_1 + 45 | 0) >> 0] | 0)) {
                  break label$9
                 }
                 $4_1 = $756($2_1 | 0) | 0;
                 $1_1 = $813($4_1 | 0) | 0;
                 HEAP32[($0_1 + 332 | 0) >> 2] = $4_1;
                 HEAP32[($0_1 + 328 | 0) >> 2] = $1_1;
                 $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                 $768($3_1 + 56 | 0 | 0, HEAP32[($0_1 + 328 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 332 | 0) >> 2] | 0 | 0) | 0;
                 HEAP8[($0_1 + 356 | 0) >> 0] = 1;
                 break label$9;
                }
                if (!$2_1) {
                 break label$15
                }
                if (!$0_1) {
                 break label$9
                }
                $762($3_1 + 56 | 0 | 0, $2_1 | 0);
                $768($3_1 + 56 | 0 | 0, $3_1 + 72 | 0 | 0, 8 | 0) | 0;
                $4_1 = 0;
                if ((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                 break label$9
                }
                if ($824($3_1 + 72 | 0 | 0, 2380 | 0, 8 | 0) | 0) {
                 break label$9
                }
                label$66 : {
                 label$67 : while (1) {
                  label$68 : {
                   $5_1 = $772($3_1 + 56 | 0 | 0) | 0;
                   if (($5_1 | 0) != (59 | 0)) {
                    break label$68
                   }
                   $1_1 = $4_1;
                   break label$66;
                  }
                  $1_1 = 0;
                  if ((HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                   break label$66
                  }
                  HEAP8[(($0_1 + $4_1 | 0) + 357 | 0) >> 0] = $5_1;
                  $1_1 = 15;
                  $4_1 = $4_1 + 1 | 0;
                  if (($4_1 | 0) != (15 | 0)) {
                   continue label$67
                  }
                  break label$67;
                 };
                }
                HEAP8[(($0_1 + $1_1 | 0) + 357 | 0) >> 0] = 0;
                break label$20;
               }
               if (!$0_1) {
                break label$20
               }
               $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
               if (!$1_1) {
                break label$20
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = 0;
               label$69 : {
                label$70 : {
                 if (!(HEAPU8[($4_1 + 44 | 0) >> 0] | 0)) {
                  break label$70
                 }
                 if (HEAPU8[($4_1 + 45 | 0) >> 0] | 0) {
                  break label$69
                 }
                }
                $815($0_1 | 0);
                break label$20;
               }
               label$71 : {
                label$72 : {
                 switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
                 case 1:
                  $1_1 = $4_1 + 216 | 0;
                  $5_1 = $1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0;
                  HEAP32[$5_1 >> 2] = $0_1;
                  $498_1 = $5_1 + 88 | 0;
                  $5_1 = $4_1 + 2940 | 0;
                  $973($498_1 | 0, $5_1 | 0, 56 | 0) | 0;
                  $41(($1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0) + 24 | 0 | 0);
                  $42(($1_1 + Math_imul(HEAP32[($4_1 + 2936 | 0) >> 2] | 0, 160) | 0) + 24 | 0 | 0, $5_1 | 0, $4_1 + 2996 | 0 | 0);
                  HEAP32[($4_1 + 2936 | 0) >> 2] = (HEAP32[($4_1 + 2936 | 0) >> 2] | 0) + 1 | 0;
                  $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  break label$71;
                 case 0:
                  break label$72;
                 default:
                  break label$71;
                 };
                }
                if ((HEAP32[($0_1 + 336 | 0) >> 2] | 0 | 0) != (2 | 0)) {
                 break label$71
                }
                HEAP32[($4_1 + 2776 | 0) >> 2] = $0_1;
                $973($4_1 + 2864 | 0 | 0, $4_1 + 2940 | 0 | 0, 56 | 0) | 0;
               }
               $215($1_1 | 0, $0_1 | 0);
              }
              if (!$2_1) {
               break label$8
              }
              break label$9;
             }
             $859(2439 | 0, 2159 | 0, 277 | 0);
             abort();
            }
            $859(2496 | 0, 2159 | 0, 299 | 0);
            abort();
           }
           $859(2496 | 0, 2159 | 0, 325 | 0);
           abort();
          }
          $859(2496 | 0, 2159 | 0, 424 | 0);
          abort();
         }
         $859(2496 | 0, 2159 | 0, 442 | 0);
         abort();
        }
        HEAP32[($0_1 + 20 | 0) >> 2] = 0;
        break label$10;
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 234;
       break label$10;
      }
      HEAP32[($0_1 + 20 | 0) >> 2] = 27;
      if (HEAP32[($4_1 + 208 | 0) >> 2] | 0) {
       break label$10
      }
      HEAP32[($4_1 + 208 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
      $5_1 = ($1_1 >>> 0) / (10 >>> 0) | 0;
      $1_1 = ($5_1 >>> 0) % (10 >>> 0) | 0 | (($1_1 - Math_imul($5_1, 10) | 0) << 8 | 0) | 0;
      $2(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 120 | 0 | 0, $1_1 | 1667510320 | 0 | 0, 9 | 0);
      $2(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 136 | 0 | 0, $1_1 | 1650733104 | 0 | 0, 9 | 0);
      $1_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
      break label$10;
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = 235;
    }
    HEAP16[($0_1 + 28 | 0) >> 1] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
    HEAP16[($0_1 + 30 | 0) >> 1] = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    label$74 : {
     label$75 : {
      if (($1_1 | 0) == (1112758340 | 0)) {
       break label$75
      }
      if (($1_1 | 0) != (1095981124 | 0)) {
       break label$74
      }
      HEAP32[($0_1 + 336 | 0) >> 2] = 0;
      break label$9;
     }
     HEAP32[($0_1 + 336 | 0) >> 2] = 1;
     break label$9;
    }
    HEAP32[($0_1 + 336 | 0) >> 2] = 2;
   }
   $735($2_1 | 0);
  }
  label$76 : {
   $14_1 = $3_1 + 112 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $31($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $111_1 = 0, $111$hi = 0, $113_1 = 0, $113$hi = 0, $21_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $12_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 48 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 16 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   $827(2586 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 3152 | 0, $4_1 | 0, 2025 | 0, 2159 | 0, 511 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1751936356 | 0)) {
    break label$8
   }
   label$9 : {
    if ($40($3_1 + 56 | 0 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    if (!($834(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $827(2639 | 0, $3_1 | 0);
    break label$8;
   }
   HEAP8[($4_1 + 48 | 0) >> 0] = 1;
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   if (!(HEAPU8[($4_1 + 49 | 0) >> 0] | 0)) {
    break label$8
   }
   i64toi32_i32$0 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = 0;
   $111_1 = i64toi32_i32$0;
   $111$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $113_1 = i64toi32_i32$1;
   $113$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $111$hi;
   i64toi32_i32$1 = $113$hi;
   i64toi32_i32$1 = __wasm_i64_mul($111_1 | 0, i64toi32_i32$0 | 0, $113_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  }
  label$10 : {
   if (!$2_1) {
    break label$10
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $14_1 = $3_1 + 64 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $32($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 >>> 24 | 0;
   $6_1 = $1_1 & 255 | 0;
   $7_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = $0_1 & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   $12_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $10_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(2687 | 0, $3_1 | 0);
  }
  label$6 : {
   if ($1_1) {
    break label$6
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = 2;
   HEAP8[($4_1 + 50 | 0) >> 0] = 1;
  }
  label$7 : {
   if (!$2_1) {
    break label$7
   }
   $735($2_1 | 0);
  }
  label$8 : {
   $14_1 = $3_1 + 48 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 675 | 0);
  }
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 56 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 72 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 88 | 0 | 0);
  $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 104 | 0 | 0);
  $17(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 3152 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $34($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $4_1 = 0, $10$hi = 0, $6_1 = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $34_1 = 0, $9_1 = 0, $8_1 = 0, $48_1 = 0, $54_1 = 0, $56$hi = 0, $78_1 = 0, $112_1 = 0, $114_1 = 0, $114$hi = 0, $116_1 = 0, $116$hi = 0, $137_1 = 0, $143_1 = 0, $145$hi = 0, $167_1 = 0, $185$hi = 0, $201$hi = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 694 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
    break label$5
   }
   HEAP32[($0_1 + 52 | 0) >> 2] = 0;
   HEAP16[($0_1 + 46 | 0) >> 1] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   HEAP32[($0_1 + 208 | 0) >> 2] = 0;
   HEAP8[($0_1 + 3148 | 0) >> 0] = 0;
   HEAP32[($0_1 + 2936 | 0) >> 2] = 0;
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = -1;
   HEAP32[($0_1 + 16 | 0) >> 2] = -1;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $34_1 = 0;
   HEAP8[($0_1 + 49 | 0) >> 0] = $34_1;
   HEAP8[($0_1 + 50 | 0) >> 0] = $34_1 >>> 8 | 0;
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$1;
     HEAP32[($4_1 + 56 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
     $48_1 = $4_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($48_1 + 52 | 0) >> 2] = i64toi32_i32$4;
     $827(2759 | 0, $4_1 + 48 | 0 | 0);
    }
    label$8 : {
     $54_1 = $1_1;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $56$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $56$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $5_1 = $50($54_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     $6_1 = $756($5_1 | 0) | 0;
     label$9 : {
      if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 40 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
      $78_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      HEAP32[($78_1 + 36 | 0) >> 2] = i64toi32_i32$5;
      $827(2795 | 0, $4_1 + 32 | 0 | 0);
     }
     $797($2_1 | 0, $5_1 | 0);
     if (($18(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($6_1 | 0)) {
      break label$8
     }
     if (HEAPU8[($0_1 + 47 | 0) >> 0] | 0) {
      break label$8
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 46 | 0) >> 0] | 0)) {
       break label$10
      }
      $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$8
      }
      label$11 : {
       if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
        break label$11
       }
       if (HEAP32[($5_1 + 12 | 0) >> 2] | 0) {
        break label$11
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 2;
       if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
        break label$11
       }
       $796($2_1 | 0);
       $112_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $114_1 = i64toi32_i32$0;
       $114$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$0 = 0;
       $116_1 = i64toi32_i32$2;
       $116$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $114$hi;
       i64toi32_i32$1 = $114_1;
       i64toi32_i32$2 = $116$hi;
       i64toi32_i32$3 = $116_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       $6($112_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0) | 0;
       HEAP8[($0_1 + 46 | 0) >> 0] = 1;
       $7_1 = 0;
       label$12 : {
        label$13 : {
         label$14 : while (1) {
          if ($7_1 >>> 0 > 65535 >>> 0) {
           break label$13
          }
          $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (1 | 0)) {
           break label$12
          }
          label$15 : {
           if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $11$hi = i64toi32_i32$1;
           HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
           HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
           $137_1 = $4_1;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$0 = i64toi32_i32$5;
           i64toi32_i32$5 = $10$hi;
           i64toi32_i32$3 = $10_1;
           i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           HEAP32[($137_1 + 20 | 0) >> 2] = i64toi32_i32$2;
           $827(2836 | 0, $4_1 + 16 | 0 | 0);
          }
          $143_1 = $1_1;
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $145$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $145$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $6_1 = $50($143_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
          if (!$6_1) {
           break label$13
          }
          $5_1 = $756($6_1 | 0) | 0;
          label$16 : {
           if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           i64toi32_i32$0 = $3_1;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
           $11$hi = i64toi32_i32$1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           HEAP32[$4_1 >> 2] = $0_1;
           $167_1 = $4_1;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $11$hi;
           i64toi32_i32$0 = i64toi32_i32$2;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$3 = $10_1;
           i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           HEAP32[($167_1 + 4 | 0) >> 2] = i64toi32_i32$4;
           $827(2878 | 0, $4_1 | 0);
          }
          $797($2_1 | 0, $6_1 | 0);
          if (($18(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($5_1 | 0)) {
           break label$13
          }
          $7_1 = $5_1 + $7_1 | 0;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$5 = 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$1 = $10_1;
          i64toi32_i32$0 = $185$hi;
          i64toi32_i32$3 = $5_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $10_1 = i64toi32_i32$2;
          $10$hi = i64toi32_i32$4;
          if (!(HEAPU8[($0_1 + 47 | 0) >> 0] | 0)) {
           continue label$14
          }
          break label$14;
         };
        }
        $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       }
       if (!$5_1) {
        break label$8
       }
      }
      if (!(HEAPU8[($3_1 + 9 | 0) >> 0] | 0)) {
       break label$8
      }
      $35($0_1 | 0, $1_1 | 0);
      break label$8;
     }
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = 0;
     $201$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$1 = $201$hi;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 262145;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      continue label$6
     }
    }
    break label$6;
   };
   label$17 : {
    if (!(HEAP32[($0_1 + 208 | 0) >> 2] | 0)) {
     break label$17
    }
    $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 120 | 0 | 0);
    $3(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 136 | 0 | 0);
   }
   $5(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$18 : {
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$18
    }
    label$19 : {
     $5_1 = HEAP32[$6_1 >> 2] | 0;
     if (!$5_1) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
        break label$21
       }
       if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
        break label$18
       }
      }
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if ($5_1) {
       continue label$20
      }
      break label$20;
     };
    }
    if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$18
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = 4;
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   label$22 : {
    $9_1 = $4_1 + 64 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(2739 | 0, 2159 | 0, 695 | 0);
  abort();
 }
 
 function $35($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $17$hi = 0, i64toi32_i32$5 = 0, $17_1 = 0, $2_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$6 = 0, $11_1 = 0, $14_1 = 0, $18$hi = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $16_1 = 0, $15_1 = 0, $113$hi = 0, $118$hi = 0, $46_1 = 0, $47_1 = 0, $120_1 = 0, $120$hi = 0, $122_1 = 0, $122$hi = 0, $12_1 = 0, $13_1 = 0, $18_1 = 0, $210_1 = 0, $210$hi = 0, $213_1 = 0, $213$hi = 0, $221_1 = 0, $221$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $15_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   if (HEAPU8[($0_1 + 3148 | 0) >> 0] | 0) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
    break label$3
   }
   $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   if (!(HEAP32[($0_1 + 2776 | 0) >> 2] | 0)) {
    break label$3
   }
   label$4 : {
    i64toi32_i32$1 = $17$hi;
    $4_1 = $50($1_1 | 0, $17_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, $2_1 + 28 | 0 | 0) | 0;
    if ($4_1) {
     break label$4
    }
    if (!($835(61544 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(2923 | 0, $2_1 | 0);
    break label$3;
   }
   $5_1 = $0_1 + 2920 | 0;
   $762($5_1 | 0, $4_1 | 0);
   label$5 : {
    if (!(HEAP32[($0_1 + 2936 | 0) >> 2] | 0)) {
     break label$5
    }
    $1_1 = 0;
    label$6 : while (1) {
     $762(($0_1 + Math_imul($1_1, 160) | 0) + 360 | 0 | 0, $4_1 | 0);
     if ($1_1 >>> 0 > 14 >>> 0) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 >>> 0 < (HEAP32[($0_1 + 2936 | 0) >> 2] | 0) >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    if (($770($5_1 | 0) | 0) >>> 0 < 16 >>> 0) {
     break label$7
    }
    label$8 : while (1) {
     $1_1 = $776($5_1 | 0) | 0;
     $776($5_1 | 0) | 0;
     $3_1 = $776($5_1 | 0) | 0;
     $776($5_1 | 0) | 0;
     label$9 : {
      if ((HEAP32[((HEAP32[($0_1 + 2776 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (((($1_1 >>> 8 | 0) & 255 | 0) + Math_imul($1_1 & 255 | 0, 10) | 0) + -527 | 0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 0;
      $17_1 = $3_1;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 2784 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 2788 | 0) >> 2] = i64toi32_i32$0;
      $1_1 = HEAP32[($0_1 + 2796 | 0) >> 2] | 0;
      HEAP32[($0_1 + 2796 | 0) >> 2] = $1_1 + 1 | 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[($0_1 + 2884 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      $113$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $118$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $113$hi;
      $46_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $118$hi;
      i64toi32_i32$0 = __wasm_i64_mul($46_1 | 0, i64toi32_i32$1 | 0, $1_1 + (HEAP32[($0_1 + 2892 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $47_1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$0 = __wasm_i64_mul($47_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $120_1 = i64toi32_i32$0;
      $120$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = HEAP32[($0_1 + 2888 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $122_1 = i64toi32_i32$1;
      $122$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $120$hi;
      i64toi32_i32$1 = $122$hi;
      i64toi32_i32$1 = __wasm_i64_udiv($120_1 | 0, i64toi32_i32$0 | 0, $122_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $1_1 = i64toi32_i32$1;
      HEAP32[($0_1 + 2780 | 0) >> 2] = i64toi32_i32$1;
      $6_1 = 0;
      if (!(HEAP32[($0_1 + 2936 | 0) >> 2] | 0)) {
       break label$9
      }
      label$10 : while (1) {
       $3_1 = $0_1 + Math_imul($6_1, 160) | 0;
       $7_1 = $3_1 + 224 | 0;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$1 = $7_1;
       HEAP32[i64toi32_i32$1 >> 2] = $17_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$11 : {
        $8_1 = $3_1 + 220 | 0;
        if ((HEAP32[$8_1 >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
         break label$11
        }
        $1_1 = $3_1 + 360 | 0;
        $9_1 = $3_1 + 232 | 0;
        $10_1 = $3_1 + 236 | 0;
        $11_1 = $3_1 + 240 | 0;
        $12_1 = $3_1 + 216 | 0;
        label$12 : {
         label$13 : while (1) {
          if (($770($1_1 | 0) | 0) >>> 0 < 16 >>> 0) {
           break label$12
          }
          $3_1 = $776($1_1 | 0) | 0;
          $776($1_1 | 0) | 0;
          $13_1 = $776($1_1 | 0) | 0;
          $14_1 = $776($1_1 | 0) | 0;
          label$14 : {
           label$15 : {
            if ((HEAP32[((HEAP32[$12_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (((($3_1 >>> 8 | 0) & 255 | 0) + Math_imul($3_1 & 255 | 0, 10) | 0) + -527 | 0 | 0)) {
             break label$15
            }
            $3_1 = HEAP32[$8_1 >> 2] | 0;
            break label$14;
           }
           $43($11_1 | 0, $14_1 | 0);
           $3_1 = $44($11_1 | 0, HEAP32[$10_1 >> 2] | 0 | 0, HEAP32[$9_1 >> 2] | 0 | 0) | 0;
           HEAP32[$8_1 >> 2] = $3_1;
           HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $14_1 | 0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$1 = $7_1;
           HEAP32[i64toi32_i32$1 >> 2] = $13_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
          }
          if ($3_1 >>> 0 < (HEAP32[($0_1 + 2780 | 0) >> 2] | 0) >>> 0) {
           continue label$13
          }
          break label$13;
         };
        }
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$1;
       }
       label$16 : {
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[($0_1 + 2784 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 2788 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$1;
        $18$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$3 = $17_1;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        $210_1 = i64toi32_i32$4;
        $210$hi = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $18_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = $17$hi - i64toi32_i32$4 | 0;
        $213_1 = i64toi32_i32$1;
        $213$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$3 = $17_1;
        if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
         $40_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $41_1 = 0
          } else {
           $41_1 = 1
          }
          $42_1 = $41_1;
         } else {
          $42_1 = 0
         }
         $40_1 = $42_1;
        }
        i64toi32_i32$2 = $40_1;
        i64toi32_i32$5 = $210$hi;
        i64toi32_i32$4 = $213$hi;
        i64toi32_i32$0 = i64toi32_i32$2 ? $210_1 : $213_1;
        i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$3;
        i64toi32_i32$2 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $221_1 = i64toi32_i32$3;
        $221$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$3 = $221$hi;
        i64toi32_i32$5 = $221_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
         $43_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
           $44_1 = 0
          } else {
           $44_1 = 1
          }
          $45_1 = $44_1;
         } else {
          $45_1 = 0
         }
         $43_1 = $45_1;
        }
        if ($43_1) {
         break label$16
        }
        label$17 : {
         if ((HEAP8[(0 + 61544 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$17
         }
         if (!($828(2 | 0, 61544 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$17
         }
         $1_1 = HEAP32[($0_1 + 2780 | 0) >> 2] | 0;
         i64toi32_i32$2 = $17$hi;
         HEAP32[($2_1 + 20 | 0) >> 2] = $17_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
         $827(3062 | 0, $2_1 + 16 | 0 | 0);
        }
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $17_1;
        HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$2;
       }
       $6_1 = $6_1 + 1 | 0;
       if ($6_1 >>> 0 >= (HEAP32[($0_1 + 2936 | 0) >> 2] | 0) >>> 0) {
        break label$9
       }
       $1_1 = HEAP32[($0_1 + 2780 | 0) >> 2] | 0;
       i64toi32_i32$5 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 2784 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 2788 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$0;
       continue label$10;
      };
     }
     if (($770($5_1 | 0) | 0) >>> 0 > 15 >>> 0) {
      continue label$8
     }
     break label$8;
    };
   }
   $735($4_1 | 0);
  }
  label$18 : {
   $16_1 = $2_1 + 32 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
 }
 
 function $36($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (2025 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 3152 | 0, $0_1 | 0, 2025 | 0, 2159 | 0, 792 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = 0;
       break label$6;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     label$8 : {
      $2_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$8
      }
      $815($2_1 | 0);
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $815($1_1 | 0);
   return;
  }
  $859(3102 | 0, 2159 | 0, 795 | 0);
  abort();
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    label$5 : {
     $5_1 = HEAP32[($4_1 + 208 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     if (HEAP32[($5_1 + 4 | 0) >> 2] | 0) {
      break label$3
     }
     if ((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) != (27 | 0)) {
      break label$3
     }
     $762($3_1 + 16 | 0 | 0, $2_1 | 0);
     label$6 : while (1) {
      $0_1 = $262($3_1 + 16 | 0 | 0, -1 | 0) | 0;
      if (!$0_1) {
       break label$5
      }
      if (($0_1 & 135 | 0 | 0) != (7 | 0)) {
       continue label$6
      }
      break label$6;
     };
     $247($5_1 + 36 | 0 | 0, $3_1 + 8 | 0 | 0, $768($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0, 8 | 0) | 0 | 0) | 0;
     HEAP8[($4_1 + 46 | 0) >> 0] = 1;
    }
    $735($2_1 | 0);
   }
   $0_1 = HEAPU8[($4_1 + 46 | 0) >> 0] | 0;
   label$7 : {
    $7_1 = $3_1 + 32 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return $0_1 | 0;
  }
  $859(2503 | 0, 2159 | 0, 564 | 0);
  abort();
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $7$hi = 0, $4_1 = 0, $119_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $762($2_1 + 48 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  HEAP16[($0_1 + 16 | 0) >> 1] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  $1_1 = $776($2_1 + 48 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
  label$3 : {
   if (($771($2_1 + 48 | 0 | 0, 8 | 0) | 0) >>> 0 < 8 >>> 0) {
    break label$3
   }
   HEAP16[($0_1 + 48 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 50 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 52 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
   HEAP16[($0_1 + 54 | 0) >> 1] = $775($2_1 + 48 | 0 | 0) | 0;
  }
  label$4 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU16[($0_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
   $119_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $119_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 1 | 0 ? 3214 : 3224;
   HEAP32[($2_1 + 12 | 0) >> 2] = $1_1 >>> 24 | 0;
   HEAP32[$2_1 >> 2] = $1_1 & 255 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
   $827(3109 | 0, $2_1 | 0);
  }
  $0_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
  label$5 : {
   $6_1 = $2_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $7$hi = 0, $4_1 = 0, $94_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $762($2_1 + 48 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
  $1_1 = 0;
  label$3 : while (1) {
   HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 40 | 0) >> 2] = $776($2_1 + 48 | 0 | 0) | 0;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (4 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$4 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
   $94_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $94_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1 + 32 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 & 32 | 0 ? 3351 : 3224;
   HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 & 256 | 0 ? 3365 : 3224;
   HEAP32[$2_1 >> 2] = $1_1 & 16 | 0 ? 3341 : 3224;
   $827(3225 | 0, $2_1 | 0);
  }
  $1_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
  label$5 : {
   $6_1 = $2_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return ($1_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $762($2_1 + 16 | 0 | 0, $1_1 | 0);
  HEAP32[$0_1 >> 2] = $776($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   $827(3380 | 0, $2_1 | 0);
  }
  $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  label$4 : {
   $4_1 = $2_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(3411 | 0, 3417 | 0, 107 | 0);
   abort();
  }
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 20 | 0) >> 2] = 1;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if (!$1_1) {
      break label$4
     }
     if (!$2_1) {
      break label$3
     }
     HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
     $5_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP16[($0_1 + 56 | 0) >> 1] = $5_1;
     HEAP32[($0_1 + 60 | 0) >> 2] = 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$4_1) {
         break label$8
        }
        label$9 : {
         label$10 : {
          label$11 : {
           $6_1 = HEAPU16[$2_1 >> 1] | 0;
           if (($6_1 | 0) != (80 | 0)) {
            break label$11
           }
           $6_1 = 64512e3;
           break label$10;
          }
          if (($6_1 | 0) != (85 | 0)) {
           break label$9
          }
          $6_1 = 4608e4;
         }
         HEAP32[($0_1 + 28 | 0) >> 2] = ($6_1 >>> 0) / ($4_1 >>> 0) | 0;
        }
        $6_1 = 1152e3;
        if ($4_1 >>> 0 > 31999 >>> 0) {
         break label$6
        }
        if (($5_1 | 0) != (1152 | 0)) {
         break label$7
        }
        break label$6;
       }
       $6_1 = 1152e3;
       if (($5_1 | 0) == (1152 | 0)) {
        break label$6
       }
      }
      $6_1 = 576e3;
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = $6_1;
     label$12 : {
      label$13 : {
       if (!($268($2_1 | 0) | 0)) {
        break label$13
       }
       $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $5_1 = HEAPU16[($2_1 + 14 | 0) >> 1] | 0;
       $4_1 = HEAPU16[($2_1 + 2 | 0) >> 1] | 0;
       HEAP32[($0_1 + 24 | 0) >> 2] = 8;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[($0_1 + 52 | 0) >> 2] = Math_imul($1_1, Math_imul($5_1, $4_1));
       break label$12;
      }
      label$14 : {
       if ((((HEAPU16[$2_1 >> 1] | 0) + -353 | 0) & 65535 | 0) >>> 0 > 1 >>> 0) {
        break label$14
       }
       HEAP32[$0_1 >> 2] = 0;
       break label$12;
      }
      label$15 : {
       if (!($269($2_1 | 0) | 0)) {
        break label$15
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = 129;
       HEAP32[($0_1 + 20 | 0) >> 2] = 1536e3;
       HEAP32[$0_1 >> 2] = (HEAPU16[($0_1 + 56 | 0) >> 1] | 0 | 0) == (4 | 0) ? 1 : 2;
       break label$12;
      }
      label$16 : {
       if ((HEAPU16[$2_1 >> 1] | 0 | 0) != (255 | 0)) {
        break label$16
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 1024e3;
       HEAP32[$0_1 >> 2] = 1;
       break label$12;
      }
      label$17 : {
       label$18 : {
        $4_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
        if (($4_1 | 0) == (1152 | 0)) {
         break label$18
        }
        $5_1 = 0;
        if (($4_1 | 0) != (576 | 0)) {
         break label$17
        }
       }
       $5_1 = 2;
      }
      HEAP32[$0_1 >> 2] = $5_1;
      if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0) >>> 0 < 125e3 >>> 0) {
       break label$12
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     }
     label$19 : {
      if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$19
      }
      if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$19
      }
      $2_1 = HEAPU16[($2_1 + 12 | 0) >> 1] | 0;
      $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(3503 | 0, $3_1 | 0);
     }
     label$20 : {
      $8_1 = $3_1 + 32 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return;
    }
    $859(3411 | 0, 3417 | 0, 127 | 0);
    abort();
   }
   $859(3491 | 0, 3417 | 0, 128 | 0);
   abort();
  }
  $859(3498 | 0, 3417 | 0, 129 | 0);
  abort();
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $165_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if ($3_1 >>> 0 < 2 >>> 0) {
     break label$4
    }
    label$5 : {
     if ((HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) != (129 | 0)) {
      break label$5
     }
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     if ((HEAPU16[($0_1 + 56 | 0) >> 1] | 0) >>> 0 >= $1_1 >>> 0) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = 0;
     break label$4;
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$8
       }
       $5_1 = $1_1;
       $6_1 = $0_1 + 12 | 0;
       $7_1 = HEAP32[$6_1 >> 2] | 0;
       if ($7_1 >>> 0 > $1_1 >>> 0) {
        break label$7
       }
       label$9 : {
        if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 < $1_1 >>> 0) {
         break label$9
        }
        $5_1 = $7_1;
        break label$6;
       }
       $6_1 = $0_1 + 16 | 0;
       $5_1 = $7_1;
       break label$7;
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
      $6_1 = $0_1 + 16 | 0;
      $5_1 = $1_1;
     }
     HEAP32[$6_1 >> 2] = $1_1;
    }
    label$10 : {
     switch ($3_1 + -2 | 0 | 0) {
     case 0:
      label$12 : {
       $3_1 = HEAPU16[($0_1 + 56 | 0) >> 1] | 0;
       if (($3_1 | 0) == (576 | 0)) {
        break label$12
       }
       if (($3_1 | 0) == (1152 | 0)) {
        break label$12
       }
       HEAP32[$0_1 >> 2] = 0;
       break label$4;
      }
      label$13 : {
       if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
        break label$13
       }
       label$14 : {
        if (!$5_1) {
         break label$14
        }
        label$15 : {
         $3_1 = ($1_1 >>> 0) / ($5_1 >>> 0) | 0;
         if ($1_1 - Math_imul($3_1, $5_1) | 0) {
          break label$15
         }
         if ($3_1 >>> 0 < 8 >>> 0) {
          break label$14
         }
        }
        HEAP32[$0_1 >> 2] = 1;
        break label$4;
       }
       HEAP32[$0_1 >> 2] = 3;
       break label$4;
      }
      if ($4_1 >>> 0 < 101 >>> 0) {
       break label$4
      }
      HEAP32[$0_1 >> 2] = 1;
      break label$4;
     case 1:
      break label$10;
     default:
      break label$4;
     };
    }
    label$16 : {
     if ((HEAPU16[($0_1 + 56 | 0) >> 1] | 0) >>> 0 <= $1_1 >>> 0) {
      break label$16
     }
     $3_1 = $44($0_1 | 0, $4_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$0_1 >> 2] = 2;
     $6_1 = $44($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($0_1 + 32 | 0) >> 2] = ($3_1 - $6_1 | 0) + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
     if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($2_1 + 40 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
     $827(3580 | 0, $2_1 + 32 | 0 | 0);
     break label$4;
    }
    if ($4_1 >>> 0 < 101 >>> 0) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = 0;
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
   label$17 : {
    if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$17
    }
    if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$17
    }
    $3_1 = 3700;
    label$18 : {
     label$19 : {
      label$20 : {
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       switch ($6_1 | 0) {
       case 0:
        break label$18;
       case 1:
        break label$19;
       default:
        break label$20;
       };
      }
      $3_1 = ($6_1 | 0) == (2 | 0) ? 3708 : 3718;
      break label$18;
     }
     $3_1 = 3704;
    }
    i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    $165_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $165_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(3632 | 0, $2_1 | 0);
   }
   label$21 : {
    $9_1 = $2_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return;
  }
  $859(3411 | 0, 3417 | 0, 191 | 0);
  abort();
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $44_1 = 0, $49$hi = 0, $51$hi = 0, $52$hi = 0, $54$hi = 0, $17_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$6
      }
      $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if ($5_1) {
       break label$5
      }
     }
     $4_1 = 0;
     if (!($834(61560 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[$3_1 >> 2] = $0_1;
     $827(3728 | 0, $3_1 | 0);
     break label$4;
    }
    label$7 : {
     label$8 : {
      switch (HEAP32[$0_1 >> 2] | 0 | 0) {
      case 0:
      case 3:
       $6_1 = Math_imul(HEAP32[($0_1 + 24 | 0) >> 2] | 0, 1e3);
       $7_1 = $2_1;
       $4_1 = $5_1;
       break label$7;
      default:
       $859(3785 | 0, 3417 | 0, 278 | 0);
       abort();
      case 1:
      case 2:
       break label$8;
      };
     }
     $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $7_1 = $1_1;
    }
    $44_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $49$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $49$hi;
    i64toi32_i32$1 = $51$hi;
    i64toi32_i32$1 = __wasm_i64_mul((HEAP32[($0_1 + 44 | 0) >> 2] | 0) + $7_1 | 0 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $54$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $52$hi;
    $17_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $54$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($17_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $4_1 = $44_1 + i64toi32_i32$1 | 0;
    if ((HEAP8[(0 + 61560 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61560 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $5_1 = 3700;
    label$11 : {
     label$12 : {
      label$13 : {
       $6_1 = HEAP32[$0_1 >> 2] | 0;
       switch ($6_1 | 0) {
       case 0:
        break label$11;
       case 1:
        break label$12;
       default:
        break label$13;
       };
      }
      $5_1 = ($6_1 | 0) == (2 | 0) ? 3708 : 3718;
      break label$11;
     }
     $5_1 = 3704;
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    $827(3787 | 0, $3_1 + 16 | 0 | 0);
   }
   label$14 : {
    $9_1 = $3_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $4_1 | 0;
  }
  $859(3411 | 0, 3417 | 0, 262 | 0);
  abort();
 }
 
 function $45($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $7_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $64$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      if (($1$hi | 0) > (i64toi32_i32$1 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       break label$6
      }
      $5_1 = 1;
      $2_1 = 0;
      if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      i64toi32_i32$2 = $1$hi;
      HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(4568 | 0, $4_1 | 0);
      break label$5;
     }
     label$7 : {
      label$8 : while (1) {
       $5_1 = 0;
       if (!$2_1) {
        break label$7
       }
       label$9 : {
        i64toi32_i32$2 = $1$hi;
        $6_1 = $46($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
        if ($6_1) {
         break label$9
        }
        $5_1 = 5;
        if (FUNCTION_TABLE[HEAP32[($0_1 + 92 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0) | 0) {
         break label$7
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$0 = $0_1;
        HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
        HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$2;
        HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
        HEAP8[($0_1 + 48 | 0) >> 0] = 1;
        $2_1 = 0;
        if (!$3_1) {
         break label$4
        }
        HEAP32[$3_1 >> 2] = 4;
        break label$4;
       }
       i64toi32_i32$2 = $1$hi;
       $7_1 = $47($0_1 | 0, $6_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0) | 0;
       if ($2_1 >>> 0 < $7_1 >>> 0) {
        break label$3
       }
       $2_1 = $2_1 - $7_1 | 0;
       if (!$2_1) {
        break label$7
       }
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$2 = 0;
       $64$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$4 = $1_1 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1_1 = i64toi32_i32$4;
       $1$hi = i64toi32_i32$5;
       if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        continue label$8
       }
       break label$8;
      };
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$5 = $1$hi;
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 36 | 0) >> 2] = $1$hi;
      HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
      $5_1 = $48($0_1 | 0, $6_1 | 0) | 0;
      if (($5_1 | 0) != (4 | 0)) {
       break label$7
      }
      $2_1 = 0;
      if (!$3_1) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = 4;
      break label$4;
     }
     $2_1 = $49($0_1 | 0) | 0;
    }
    label$10 : {
     if (!$3_1) {
      break label$10
     }
     HEAP32[$3_1 >> 2] = $5_1;
     break label$4;
    }
    HEAP8[($0_1 + 49 | 0) >> 0] = 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 56 | 0) >> 2] | 0](HEAP32[($0_1 + 52 | 0) >> 2] | 0, $2_1, $5_1);
    $2_1 = 0;
   }
   label$11 : {
    $9_1 = $4_1 + 16 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $2_1 | 0;
  }
  $859(4619 | 0, 3904 | 0, 451 | 0);
  abort();
 }
 
 function $46($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     $3_1 = $61($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
     if ($3_1) {
      break label$5
     }
     $4_1 = $0_1 + 12 | 0;
     label$6 : {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$8
        }
        $3_1 = $5_1;
        break label$7;
       }
       $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$6
       }
       $7_1 = $0_1 + 4 | 0;
       $3_1 = 0;
       label$9 : while (1) {
        $8_1 = HEAP32[$6_1 >> 2] | 0;
        label$10 : {
         if (HEAP32[($6_1 + 28 | 0) >> 2] | 0) {
          break label$10
         }
         if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break label$4
         }
         $9_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
         label$11 : {
          label$12 : {
           if (!$8_1) {
            break label$12
           }
           HEAP32[($8_1 + 4 | 0) >> 2] = $9_1;
           $9_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
           break label$11;
          }
          HEAP32[($0_1 + 8 | 0) >> 2] = $9_1;
         }
         label$13 : {
          label$14 : {
           if (!$9_1) {
            break label$14
           }
           HEAP32[$9_1 >> 2] = $8_1;
           break label$13;
          }
          HEAP32[$7_1 >> 2] = $8_1;
         }
         label$15 : {
          label$16 : {
           if (!$3_1) {
            break label$16
           }
           HEAP32[$3_1 >> 2] = $6_1;
           break label$15;
          }
          HEAP32[$4_1 >> 2] = $6_1;
         }
         HEAP32[($6_1 + 4 | 0) >> 2] = $5_1;
         HEAP32[$6_1 >> 2] = 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
         $5_1 = $6_1;
         $3_1 = $6_1;
        }
        $6_1 = $8_1;
        if ($6_1) {
         continue label$9
        }
        break label$9;
       };
       if (!$3_1) {
        break label$6
       }
      }
      if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
       break label$3
      }
      $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      label$17 : {
       label$18 : {
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        if (!$8_1) {
         break label$18
        }
        HEAP32[($8_1 + 4 | 0) >> 2] = $6_1;
        $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        break label$17;
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
      }
      label$19 : {
       label$20 : {
        if (!$6_1) {
         break label$20
        }
        HEAP32[$6_1 >> 2] = $8_1;
        break label$19;
       }
       HEAP32[$4_1 >> 2] = $8_1;
      }
      i64toi32_i32$0 = $1$hi;
      $62($0_1 | 0, $3_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0);
      $63($0_1 | 0, $3_1 | 0);
      break label$5;
     }
     $3_1 = 0;
     if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(4733 | 0, $2_1 | 0);
    }
    label$21 : {
     $11_1 = $2_1 + 16 | 0;
     if ($11_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $11_1;
    }
    return $3_1 | 0;
   }
   $859(4635 | 0, 3904 | 0, 374 | 0);
   abort();
  }
  $859(4684 | 0, 3904 | 0, 382 | 0);
  abort();
 }
 
 function $47($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $43_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     $5_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = $2$hi - i64toi32_i32$5 | 0;
     $6_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     if ($5_1 >>> 0 <= $6_1 >>> 0) {
      break label$3
     }
     HEAP32[($1_1 + 28 | 0) >> 2] = (HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 1 | 0;
     $43_1 = ((HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 20 | 0) >> 2] | 0, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $6_1 | 0;
     $1_1 = $5_1 - $6_1 | 0;
     $1_1 = $1_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $1_1;
     $4_1 = $1_1 >>> 0 < 65535 >>> 0 ? $1_1 : 65535;
     $743(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $43_1 | 0, $4_1 | 0);
    }
    return $4_1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 331 | 0);
   abort();
  }
  $859(4895 | 0, 3904 | 0, 332 | 0);
  abort();
 }
 
 function $48($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $6$hi = 0, $4_1 = 0, $27_1 = 0, $29$hi = 0, $31$hi = 0, $36$hi = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$1
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 49 | 0) >> 0] = 1;
    $4_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    label$3 : {
     $5_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $27_1 = $5_1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $29$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $31$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $29$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $31$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $2_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $2_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0]($27_1, i64toi32_i32$4, i64toi32_i32$5, 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $36$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $36$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 88 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0, HEAP32[($0_1 + 84 | 0) >> 2] | 0, ($4_1 + Math_imul($3_1, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $2_1 | 0, (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0, 15, $0_1);
     return 4 | 0;
    }
    HEAP8[($0_1 + 49 | 0) >> 0] = 0;
    $53($0_1 | 0, $1_1 | 0);
    return 1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 140 | 0);
   abort();
  }
  $859(4911 | 0, 3904 | 0, 141 | 0);
  abort();
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  label$3 : {
   label$4 : {
    if ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    $0_1 = 0;
    break label$3;
   }
   $0_1 = $751(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, 4972 | 0, $1_1 + 12 | 0 | 0) | 0;
  }
  label$5 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $50($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 627 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     if (HEAPU8[($0_1 + 49 | 0) >> 0] | 0) {
      break label$4
     }
     if (HEAPU8[($0_1 + 48 | 0) >> 0] | 0) {
      break label$3
     }
     HEAP32[($0_1 + 56 | 0) >> 2] = 0;
     i64toi32_i32$0 = $1$hi;
     return $51($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
    }
    $859(4008 | 0, 3904 | 0, 628 | 0);
    abort();
   }
   $859(3983 | 0, 3904 | 0, 629 | 0);
   abort();
  }
  $859(4015 | 0, 3904 | 0, 630 | 0);
  abort();
 }
 
 function $51($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $8_1 = 0, $7_1 = 0, $49$hi = 0, $86$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$3 = -1;
      if (($1$hi | 0) > (i64toi32_i32$1 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       break label$6
      }
      $2_1 = 0;
      label$7 : {
       if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $1$hi;
       HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(5138 | 0, $4_1 | 0);
      }
      HEAP32[$3_1 >> 2] = 1;
      break label$5;
     }
     HEAP32[$3_1 >> 2] = 0;
     label$8 : {
      label$9 : while (1) {
       if (!$2_1) {
        break label$8
       }
       label$10 : {
        i64toi32_i32$2 = $1$hi;
        $5_1 = $46($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
        if ($5_1) {
         break label$10
        }
        HEAP32[$3_1 >> 2] = 5;
        break label$8;
       }
       i64toi32_i32$2 = $1$hi;
       $6_1 = $47($0_1 | 0, $5_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0) | 0;
       if ($2_1 >>> 0 < $6_1 >>> 0) {
        break label$4
       }
       $2_1 = $2_1 - $6_1 | 0;
       if (!$2_1) {
        break label$8
       }
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$2 = 0;
       $49$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = $49$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$4 = $1_1 + $6_1 | 0;
       i64toi32_i32$5 = $1$hi + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $6_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1_1 = i64toi32_i32$4;
       $1$hi = i64toi32_i32$5;
       label$11 : {
        label$12 : {
         if ((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
          break label$12
         }
         label$13 : {
          label$14 : {
           $6_1 = $52($0_1 | 0, $5_1 | 0) | 0;
           if (($6_1 | 0) < (1 | 0)) {
            break label$14
           }
           $6_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + $6_1 | 0;
           HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
           if ($6_1 >>> 0 > (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0) {
            break label$3
           }
           i64toi32_i32$5 = $1$hi;
           i64toi32_i32$5 = $1$hi;
           $5_1 = $47($0_1 | 0, $5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0) | 0;
           if ($2_1 >>> 0 >= $5_1 >>> 0) {
            break label$13
           }
           $859(4619 | 0, 3904 | 0, 598 | 0);
           abort();
          }
          $53($0_1 | 0, $5_1 | 0);
          HEAP32[$3_1 >> 2] = $54($6_1 | 0) | 0;
          break label$8;
         }
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$5 = 0;
         $86$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $1$hi;
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$3 = $86$hi;
         i64toi32_i32$1 = $5_1;
         i64toi32_i32$0 = i64toi32_i32$2 + $5_1 | 0;
         i64toi32_i32$4 = $1$hi + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < $5_1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $1_1 = i64toi32_i32$0;
         $1$hi = i64toi32_i32$4;
         $2_1 = $2_1 - $5_1 | 0;
         if ($2_1) {
          break label$12
         }
         $2_1 = 0;
         $5_1 = 0;
         break label$11;
        }
        $5_1 = 1;
       }
       if ($5_1) {
        continue label$9
       }
       break label$9;
      };
     }
     $2_1 = $49($0_1 | 0) | 0;
    }
    label$15 : {
     $8_1 = $4_1 + 16 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $2_1 | 0;
   }
   $859(4619 | 0, 3904 | 0, 584 | 0);
   abort();
  }
  $859(4941 | 0, 3904 | 0, 595 | 0);
  abort();
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0, $36_1 = 0, $38$hi = 0, $40$hi = 0, $45$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
    $5_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $6_1 = -1;
    label$5 : {
     $7_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $36_1 = $7_1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $40$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $38$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $40$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($7_1 + 4 | 0) >> 2] | 0]($36_1, $10_1, i64toi32_i32$5, 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $45$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $45$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     if ((i64toi32_i32$1 | 0) != ($10_1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$5
     }
     $6_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $6_1 = FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0]($6_1, ($5_1 + Math_imul($4_1, (($1_1 - $0_1 | 0) + -96 | 0 | 0) / (40 | 0) | 0) | 0) + $3_1 | 0, (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) | 0;
    }
    label$6 : {
     if ((HEAP8[(0 + 61576 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     i64toi32_i32$1 = $10$hi;
     $0_1 = $847($10_1 | 0, i64toi32_i32$1 | 0, $2_1 + 16 | 0 | 0, 16 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(5183 | 0, $2_1 | 0);
    }
    label$7 : {
     $9_1 = $2_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $6_1 | 0;
   }
   $859(4765 | 0, 3904 | 0, 167 | 0);
   abort();
  }
  $859(4911 | 0, 3904 | 0, 168 | 0);
  abort();
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($1_1 + 28 | 0) >> 2] | 0) {
     break label$2
    }
    $2_1 = $0_1 + 4 | 0;
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    label$5 : {
     label$6 : {
      if (!$3_1) {
       break label$6
      }
      HEAP32[$3_1 >> 2] = $4_1;
      break label$5;
     }
     HEAP32[$2_1 >> 2] = $4_1;
    }
    $4_1 = $0_1 + 12 | 0;
    label$7 : {
     label$8 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$8
      }
      HEAP32[$3_1 >> 2] = $1_1;
      break label$7;
     }
     HEAP32[$4_1 >> 2] = $1_1;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
   }
   return;
  }
  $859(4635 | 0, 3904 | 0, 355 | 0);
  abort();
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 ? (($0_1 | 0) == (-35 | 0) ? 3 : 1) : 2) | 0;
 }
 
 function $55($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1966080;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 32;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[i64toi32_i32$1 >> 0] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 16;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $89_1 = 0, $94_1 = 0, $99_1 = 0, $102_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if (HEAP32[($1_1 + 12 | 0) >> 2] | 0) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4058 | 0, 0 | 0);
      break label$5;
     }
     label$7 : {
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4102 | 0, 0 | 0);
      break label$5;
     }
     label$8 : {
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      if ($4_1) {
       break label$8
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4150 | 0, 0 | 0);
      break label$5;
     }
     label$9 : {
      if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
       break label$9
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4191 | 0, 0 | 0);
      break label$5;
     }
     label$10 : {
      if (!(HEAPU8[$1_1 >> 0] | 0)) {
       break label$10
      }
      if (HEAP32[($1_1 + 24 | 0) >> 2] | 0) {
       break label$10
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $3_1 = 0;
      $827(4244 | 0, 0 | 0);
      break label$5;
     }
     label$11 : {
      $4_1 = (($4_1 >>> 0) / ($3_1 >>> 0) | 0) & -4096 | 0;
      if ($4_1) {
       break label$11
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = ($0_1 >>> 0) / ($1_1 >>> 0) | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 4096;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $827(4294 | 0, i64toi32_i32$1 | 0);
      break label$5;
     }
     label$12 : {
      $3_1 = $813(Math_imul($3_1, 40) + 136 | 0 | 0) | 0;
      if ($3_1) {
       break label$12
      }
      $3_1 = 0;
      if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[($2_1 + 32 | 0) >> 2] = Math_imul(HEAP32[($1_1 + 4 | 0) >> 2] | 0, 40) + 136 | 0;
      $827(4364 | 0, $2_1 + 32 | 0 | 0);
      break label$5;
     }
     $845($3_1 | 0, 136 | 0, $3_1 | 0, 3888 | 0);
     i64toi32_i32$2 = $1_1 + 24 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 88 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $94_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1 + 80 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $94_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $99_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 72 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $99_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $102_1;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = $4_1;
     HEAP16[(i64toi32_i32$1 + 48 | 0) >> 1] = 0;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0_1;
     label$13 : {
      if (!$0_1) {
       break label$13
      }
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
      $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$5
      }
      $6_1 = $3_1 + 12 | 0;
      $7_1 = $3_1 + 96 | 0;
      $8_1 = 0;
      $4_1 = 0;
      $0_1 = 0;
      label$14 : while (1) {
       $1_1 = $7_1 + Math_imul($0_1, 40) | 0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1_1 + 24 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$15 : {
        label$16 : {
         if (!$4_1) {
          break label$16
         }
         HEAP32[$4_1 >> 2] = $1_1;
         break label$15;
        }
        HEAP32[$6_1 >> 2] = $1_1;
       }
       HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $8_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
       $8_1 = $1_1;
       $4_1 = $1_1;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != ($5_1 | 0)) {
        continue label$14
       }
       break label$5;
      };
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$17 : {
     $10_1 = $2_1 + 48 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $3_1 | 0;
   }
   $859(4046 | 0, 3904 | 0, 668 | 0);
   abort();
  }
  $859(4054 | 0, 3904 | 0, 669 | 0);
  abort();
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $8_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 735 | 0);
  }
  label$5 : {
   if (!(HEAPU8[($0_1 + 49 | 0) >> 0] | 0)) {
    break label$5
   }
   if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
   $827(4409 | 0, $1_1 + 48 | 0 | 0);
  }
  $2_1 = $0_1 + 4 | 0;
  label$6 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$6
   }
   label$7 : {
    if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
    $827(4465 | 0, $1_1 + 32 | 0 | 0);
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$6
   }
   label$8 : while (1) {
    label$9 : {
     if (!($834(61576 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
     $5_1 = $847(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $1_1 + 64 | 0 | 0, 16 | 0) | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
     HEAP32[$1_1 >> 2] = $0_1;
     $827(4525 | 0, $1_1 | 0);
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1) {
     continue label$8
    }
    break label$8;
   };
  }
  $738(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = $2_1 + 8 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$10 : {
   $6_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$10
   }
   $7_1 = $0_1 + 12 | 0;
   $5_1 = 0;
   $2_1 = 0;
   label$11 : while (1) {
    $3_1 = $0_1 + Math_imul($2_1, 40) | 0;
    i64toi32_i32$0 = $3_1 + 120 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1 + 112 | 0;
    i64toi32_i32$1 = -1;
    HEAP32[i64toi32_i32$0 >> 2] = -1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = $3_1 + 96 | 0;
    label$12 : {
     label$13 : {
      if (!$5_1) {
       break label$13
      }
      HEAP32[$5_1 >> 2] = $4_1;
      break label$12;
     }
     HEAP32[$7_1 >> 2] = $4_1;
    }
    HEAP32[($3_1 + 104 | 0) >> 2] = $7_1;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($3_1 + 100 | 0) >> 2] = $5_1;
    $5_1 = $4_1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($6_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  label$14 : {
   $9_1 = $1_1 + 80 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 770 | 0);
  }
  $58($0_1 | 0);
  $739(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 136 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $60($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 781 | 0);
  }
  $0_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $61($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, $6$hi = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $6_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $17_1 = 0, $17$hi = 0, $18_1 = 0, $18$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $64$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 278 | 0);
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$0 = __wasm_i64_srem($1_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $18_1 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$5;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$8
        }
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$5 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $27_1 = i64toi32_i32$5;
        $27$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$5 = $27$hi;
        i64toi32_i32$3 = $27_1;
        if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
         $23_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $24_1 = 0
          } else {
           $24_1 = 1
          }
          $25_1 = $24_1;
         } else {
          $25_1 = 0
         }
         $23_1 = $25_1;
        }
        if ($23_1) {
         break label$8
        }
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$6
        }
        i64toi32_i32$1 = $1$hi;
        i64toi32_i32$3 = $2_1;
        i64toi32_i32$1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $35_1 = i64toi32_i32$1;
        $35$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = $35$hi;
        i64toi32_i32$5 = $35_1;
        if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
         $26_1 = 1
        } else {
         if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
           $28_1 = 0
          } else {
           $28_1 = 1
          }
          $29_1 = $28_1;
         } else {
          $29_1 = 0
         }
         $26_1 = $29_1;
        }
        if ($26_1) {
         break label$8
        }
        label$9 : while (1) {
         if ((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) <= (-1 | 0)) {
          break label$5
         }
         label$10 : {
          i64toi32_i32$3 = $1$hi;
          i64toi32_i32$5 = $2_1;
          i64toi32_i32$3 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          $6_1 = i64toi32_i32$3;
          $6$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $1$hi;
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$3 = $6$hi;
          i64toi32_i32$1 = $6_1;
          if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
           $30_1 = 1
          } else {
           if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
             $31_1 = 0
            } else {
             $31_1 = 1
            }
            $32_1 = $31_1;
           } else {
            $32_1 = 0
           }
           $30_1 = $32_1;
          }
          if ($30_1) {
           break label$10
          }
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $6$hi;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$2 = $6$hi;
          i64toi32_i32$3 = $6_1;
          if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | ($1$hi | 0) != (i64toi32_i32$2 | 0) | 0) {
           break label$8
          }
          break label$7;
         }
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if ($2_1) {
          continue label$9
         }
         break label$9;
        };
       }
       label$11 : {
        $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$11
        }
        $3_1 = $0_1 + 12 | 0;
        label$12 : while (1) {
         $4_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
         if (($4_1 | 0) <= (-1 | 0)) {
          break label$4
         }
         label$13 : {
          if (!$4_1) {
           break label$13
          }
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          $64$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $1$hi;
          i64toi32_i32$5 = $64$hi;
          i64toi32_i32$3 = i64toi32_i32$1;
          i64toi32_i32$1 = $1$hi;
          i64toi32_i32$2 = $1_1;
          if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != ($1$hi | 0) | 0) {
           break label$13
          }
          if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
           break label$3
          }
          $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          label$14 : {
           label$15 : {
            $5_1 = HEAP32[$2_1 >> 2] | 0;
            if (!$5_1) {
             break label$15
            }
            HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            break label$14;
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
          }
          label$16 : {
           label$17 : {
            if (!$4_1) {
             break label$17
            }
            HEAP32[$4_1 >> 2] = $5_1;
            break label$16;
           }
           HEAP32[$3_1 >> 2] = $5_1;
          }
          $63($0_1 | 0, $2_1 | 0);
          return $2_1 | 0;
         }
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         if ($2_1) {
          continue label$12
         }
         break label$12;
        };
       }
       $2_1 = 0;
      }
      return $2_1 | 0;
     }
     $859(4765 | 0, 3904 | 0, 287 | 0);
     abort();
    }
    $859(4769 | 0, 3904 | 0, 293 | 0);
    abort();
   }
   $859(4769 | 0, 3904 | 0, 310 | 0);
   abort();
  }
  $859(4684 | 0, 3904 | 0, 312 | 0);
  abort();
 }
 
 function $62($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3$hi = 0, $3_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $8$hi = 0, $17$hi = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = __wasm_i64_srem($2_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
    $17$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    if ((i64toi32_i32$4 | 0) < ($2$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$5 = 0;
    HEAP32[(i64toi32_i32$4 + 24 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$4 + 28 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] = $3_1;
    HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] = i64toi32_i32$5;
    return;
   }
   $859(4788 | 0, 3904 | 0, 125 | 0);
   abort();
  }
  $859(4804 | 0, 3904 | 0, 126 | 0);
  abort();
 }
 
 function $63($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $17_1 = 0, $17$hi = 0, $27_1 = 0, $27$hi = 0;
  $2_1 = $0_1 + 4 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = 0;
    label$3 : {
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$3 = $17_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $16_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $18_1 = 0
       } else {
        $18_1 = 1
       }
       $19_1 = $18_1;
      } else {
       $19_1 = 0
      }
      $16_1 = $19_1;
     }
     if ($16_1) {
      break label$3
     }
     $5_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $5_1;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$5_1) {
       break label$1
      }
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      $27_1 = i64toi32_i32$2;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$1 = $27_1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
       $20_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0) {
         $21_1 = 0
        } else {
         $21_1 = 1
        }
        $22_1 = $21_1;
       } else {
        $22_1 = 0
       }
       $20_1 = $22_1;
      }
      if ($20_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if ($4_1) {
     break label$1
    }
    if (!$3_1) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   }
   label$5 : {
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$5
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = $3_1;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   return;
  }
  label$6 : {
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$6
   }
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($5_1 ? $5_1 + 4 | 0 : $0_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$1_1 >> 2] = $5_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[$4_1 >> 2] = $1_1;
   return;
  }
  $859(4845 | 0, 3904 | 0, 266 | 0);
  abort();
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5$hi = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $50_1 = 0, $53$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 136 | 0, $0_1 | 0, 3888 | 0, 3904 | 0, 507 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$7
       }
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       $5_1 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$1;
       $1_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
       if ($1_1 >>> 0 > (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0) {
        break label$4
       }
       i64toi32_i32$1 = $5$hi;
       $4_1 = $47($0_1 | 0, $2_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0) | 0;
       if ($3_1 >>> 0 < $4_1 >>> 0) {
        break label$3
       }
       label$8 : {
        $3_1 = $3_1 - $4_1 | 0;
        if ($3_1) {
         break label$8
        }
        $1_1 = 0;
        break label$6;
       }
       $1_1 = 3;
       if ((HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $50_1 = $0_1;
       i64toi32_i32$1 = $5$hi;
       i64toi32_i32$1 = 0;
       $53$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $5$hi;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$4 = $5_1 + $4_1 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $45($50_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $3_1 | 0, 0 | 0) | 0;
       return;
      }
      $53($0_1 | 0, $2_1 | 0);
      $1_1 = $54($1_1 | 0) | 0;
     }
     $65($0_1 | 0, $1_1 | 0);
     return;
    }
    $859(4765 | 0, 3904 | 0, 511 | 0);
    abort();
   }
   $859(4941 | 0, 3904 | 0, 518 | 0);
   abort();
  }
  $859(4619 | 0, 3904 | 0, 521 | 0);
  abort();
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $49($0_1 | 0) | 0;
  HEAP8[($0_1 + 49 | 0) >> 0] = 0;
  FUNCTION_TABLE[HEAP32[($0_1 + 56 | 0) >> 2] | 0](HEAP32[($0_1 + 52 | 0) >> 2] | 0, $2_1, $1_1);
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $11_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (3888 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 136 | 0, $3_1 | 0, 3888 | 0, 3904 | 0, 199 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      $1_1 = $757($0_1 | 0, 0 | 0) | 0;
      if (!$1_1) {
       break label$8
      }
      $4_1 = $3_1 + 12 | 0;
      $5_1 = $3_1 + 4 | 0;
      $6_1 = 0;
      label$9 : while (1) {
       $1_1 = HEAP32[$1_1 >> 2] | 0;
       $7_1 = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
       if ($1_1 >>> 0 < $7_1 >>> 0) {
        break label$7
       }
       if ($1_1 >>> 0 > ($7_1 + (HEAP32[($3_1 + 72 | 0) >> 2] | 0) | 0) >>> 0) {
        break label$7
       }
       $8_1 = $3_1 + Math_imul((($1_1 - $7_1 | 0) >>> 0) / ((HEAP32[($3_1 + 20 | 0) >> 2] | 0) >>> 0) | 0, 40) | 0;
       $7_1 = $8_1 + 96 | 0;
       $1_1 = $5_1;
       label$10 : {
        label$11 : while (1) {
         $1_1 = HEAP32[$1_1 >> 2] | 0;
         if (!$1_1) {
          break label$10
         }
         if (($7_1 | 0) != ($1_1 | 0)) {
          continue label$11
         }
         break label$11;
        };
       }
       label$12 : {
        if ($1_1) {
         break label$12
        }
        if (!($835(61576 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
        HEAP32[$2_1 >> 2] = $3_1;
        $827(5074 | 0, $2_1 | 0);
        break label$8;
       }
       $1_1 = $8_1 + 124 | 0;
       $9_1 = HEAP32[$1_1 >> 2] | 0;
       if (!$9_1) {
        break label$6
       }
       $9_1 = $9_1 + -1 | 0;
       HEAP32[$1_1 >> 2] = $9_1;
       label$13 : {
        if ($9_1) {
         break label$13
        }
        $10_1 = $8_1 + 104 | 0;
        if ((HEAP32[$10_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
         break label$5
        }
        $9_1 = $8_1 + 100 | 0;
        $1_1 = HEAP32[$9_1 >> 2] | 0;
        label$14 : {
         label$15 : {
          $8_1 = HEAP32[$7_1 >> 2] | 0;
          if (!$8_1) {
           break label$15
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = $1_1;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          break label$14;
         }
         HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
        }
        label$16 : {
         label$17 : {
          if (!$1_1) {
           break label$17
          }
          HEAP32[$1_1 >> 2] = $8_1;
          break label$16;
         }
         HEAP32[$5_1 >> 2] = $8_1;
        }
        label$18 : {
         if (HEAPU8[($3_1 + 48 | 0) >> 0] | 0) {
          break label$18
         }
         label$19 : {
          $1_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$1_1) {
           break label$19
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
         }
         label$20 : {
          if (HEAP32[($3_1 + 16 | 0) >> 2] | 0) {
           break label$20
          }
          HEAP32[($3_1 + 16 | 0) >> 2] = $7_1;
         }
         HEAP32[$7_1 >> 2] = $1_1;
         HEAP32[$10_1 >> 2] = $4_1;
         HEAP32[$4_1 >> 2] = $7_1;
         HEAP32[$9_1 >> 2] = 0;
         break label$13;
        }
        HEAP8[($3_1 + 48 | 0) >> 0] = 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
        $62($3_1 | 0, $7_1 | 0, HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
        $63($3_1 | 0, $7_1 | 0);
        $1_1 = $48($3_1 | 0, $7_1 | 0) | 0;
        if (($1_1 | 0) == (4 | 0)) {
         break label$13
        }
        $65($3_1 | 0, $1_1 | 0);
       }
       $6_1 = $6_1 + 1 | 0;
       $1_1 = $757($0_1 | 0, $6_1 | 0) | 0;
       if ($1_1) {
        continue label$9
       }
       break label$9;
      };
     }
     label$21 : {
      $12_1 = $2_1 + 16 | 0;
      if ($12_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $12_1;
     }
     return;
    }
    $859(4980 | 0, 3904 | 0, 202 | 0);
    abort();
   }
   $859(5123 | 0, 3904 | 0, 220 | 0);
   abort();
  }
  $859(4635 | 0, 3904 | 0, 223 | 0);
  abort();
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $68($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $1$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 0;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $5_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $6_1 = 0
    } else {
     $6_1 = 1
    }
    $7_1 = $6_1;
   } else {
    $7_1 = 0
   }
   $5_1 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $70($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$0_1) {
       break label$4
      }
      if (!$1_1) {
       break label$3
      }
      if (!$2_1) {
       break label$2
      }
      if (!$3_1) {
       break label$1
      }
      $2_1 = $736($2_1 | 0) | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
      label$5 : {
       if ($2_1) {
        break label$5
       }
       return -1 | 0;
      }
      $67($0_1 + 40 | 0 | 0);
      $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1 + 72 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP32[($0_1 + 60 | 0) >> 2] = 0;
      return 0 | 0;
     }
     $859(5313 | 0, 5235 | 0, 270 | 0);
     abort();
    }
    $859(5321 | 0, 5235 | 0, 271 | 0);
    abort();
   }
   $859(5328 | 0, 5235 | 0, 272 | 0);
   abort();
  }
  $859(5336 | 0, 5235 | 0, 273 | 0);
  abort();
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  $739(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
 }
 
 function $72($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $21$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $738(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   i64toi32_i32$2 = i64toi32_i32$1 + 48 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= $1_1 >>> 0 | 0) | 0) {
    break label$3
   }
   if (!($834(61592 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$1 = $1$hi;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(5352 | 0, $2_1 | 0);
  }
  label$4 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $5$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $754($0_1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$2 | 0;
 }
 
 function $74($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $9_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $10_1 = 0
     } else {
      $10_1 = 1
     }
     $11_1 = $10_1;
    } else {
     $11_1 = 0
    }
    $9_1 = $11_1;
   }
   if ($9_1) {
    break label$1
   }
   $859(5406 | 0, 5235 | 0, 324 | 0);
   abort();
  }
  i64toi32_i32$2 = 0;
  $72($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  $68($0_1 + 40 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
 }
 
 function $75($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $7_1 = 0, $11$hi = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $39_1 = 0, $41$hi = 0, $43$hi = 0, $71$hi = 0, $72$hi = 0, $127_1 = 0, $128_1 = 0, $136_1 = 0, $138$hi = 0, $140$hi = 0, $141$hi = 0, $143_1 = 0, $143$hi = 0, $171_1 = 0, $172_1 = 0, $218_1 = 0, $219_1 = 0;
  label$1 : {
   $4_1 = global$0 - 112 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 < $2_1 >>> 0) {
       break label$6
      }
      $5_1 = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      $6_1 = $754($0_1 | 0) | 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = 0;
      $7_1 = 1;
      label$7 : {
       if ($5_1 >>> 0 >= ($6_1 + $1_1 | 0) >>> 0) {
        break label$7
       }
       $745(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $0_1 | 0);
       $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
       $39_1 = $0_1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $41$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $43$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $41$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $43$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$2 = $39_1;
       HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
       $6_1 = $5_1 - $6_1 | 0;
       if (($6_1 | 0) != ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0)) {
        break label$5
       }
       if ($6_1 >>> 0 >= $1_1 >>> 0) {
        break label$4
       }
       label$8 : {
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$2;
        $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $5_1 = $1_1 - $6_1 | 0;
        $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $5_1;
        i64toi32_i32$2 = 0;
        $71$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $71$hi;
        i64toi32_i32$3 = $7_1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $72$hi = i64toi32_i32$4;
        i64toi32_i32$2 = $0_1 + 48 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$4;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $72$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$3 = $11_1;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$8
        }
        label$9 : {
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$2 = $10$hi;
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$1 = $10$hi;
         i64toi32_i32$4 = $10_1;
         if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
          break label$9
         }
         $7_1 = 0;
         if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$7
         }
         $7_1 = 0;
         if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$7
         }
         i64toi32_i32$4 = $0_1;
         i64toi32_i32$3 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
         $10_1 = i64toi32_i32$3;
         $10$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $0_1;
         i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         HEAP32[($4_1 + 108 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$3 = $10$hi;
         HEAP32[($4_1 + 104 | 0) >> 2] = $10_1;
         HEAP32[($4_1 + 100 | 0) >> 2] = $0_1;
         HEAP32[($4_1 + 96 | 0) >> 2] = 5601;
         $827(5487 | 0, $4_1 + 96 | 0 | 0);
         break label$7;
        }
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$4 = $11_1;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        i64toi32_i32$0 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        $7_1 = i64toi32_i32$5;
        if (!i64toi32_i32$5) {
         break label$3
        }
       }
       $5_1 = $0_1 + 56 | 0;
       label$10 : {
        if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$0;
        $10$hi = i64toi32_i32$4;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$4 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$4;
        $11$hi = i64toi32_i32$0;
        HEAP32[($4_1 + 88 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 84 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 80 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 72 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 68 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = 5601;
        $127_1 = $4_1;
        $128_1 = $6_1;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        HEAP32[($127_1 + 76 | 0) >> 2] = $128_1 + i64toi32_i32$2 | 0;
        $827(5648 | 0, $4_1 + 64 | 0 | 0);
       }
       label$11 : {
        label$12 : {
         $136_1 = $3_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         $138$hi = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         $140$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $138$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $140$hi;
         i64toi32_i32$1 = $6_1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $141$hi = i64toi32_i32$2;
         i64toi32_i32$3 = $0_1;
         i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $143_1 = i64toi32_i32$2;
         $143$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $141$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$2 = $143$hi;
         i64toi32_i32$1 = $143_1;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $1_1 = $50($136_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $7_1 | 0, $5_1 | 0) | 0;
         if (!$1_1) {
          break label$12
         }
         $744(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0);
         label$13 : {
          if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$13
          }
          if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$4 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$4;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$3 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$3;
          $11$hi = i64toi32_i32$4;
          $7_1 = $756($1_1 | 0) | 0;
          HEAP32[($4_1 + 52 | 0) >> 2] = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($4_1 + 48 | 0) >> 2] = $7_1;
          $171_1 = $4_1;
          $172_1 = $6_1;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$4 = $11$hi;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $11$hi;
          i64toi32_i32$1 = $11_1;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          HEAP32[($171_1 + 44 | 0) >> 2] = $172_1 + i64toi32_i32$2 | 0;
          HEAP32[($4_1 + 40 | 0) >> 2] = $3_1;
          HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 32 | 0) >> 2] = 5601;
          $827(5523 | 0, $4_1 + 32 | 0 | 0);
         }
         $763($0_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
         $735($1_1 | 0);
         break label$11;
        }
        if ((HEAP8[(0 + 61592 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 61592 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$5;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$4 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$5;
        $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = $740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 16 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 5601;
        $218_1 = $4_1;
        $219_1 = $6_1;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$4 = $10_1;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$1 = $11_1;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        HEAP32[($218_1 + 12 | 0) >> 2] = $219_1 + i64toi32_i32$3 | 0;
        $827(5704 | 0, $4_1 | 0);
       }
       $7_1 = ($740(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0) >>> 0 >= $2_1 >>> 0;
      }
      label$14 : {
       $9_1 = $4_1 + 112 | 0;
       if ($9_1 >>> 0 < global$2 >>> 0) {
        fimport$11()
       }
       global$0 = $9_1;
      }
      return $7_1 | 0;
     }
     $859(5578 | 0, 5235 | 0, 435 | 0);
     abort();
    }
    $859(5415 | 0, 5235 | 0, 447 | 0);
    abort();
   }
   $859(5461 | 0, 5235 | 0, 448 | 0);
   abort();
  }
  $859(5511 | 0, 5235 | 0, 459 | 0);
  abort();
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $75($0_1 | 0, $1_1 | 0, $1_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0;
  label$1 : {
   $1_1 = $813(28 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  $845($1_1 | 0, 28 | 0, $1_1 + 24 | 0 | 0, 5792 | 0);
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(0 + 5832 | 0) >> 2] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5824 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5828 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 5816 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 5820 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $14_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $79($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $1_1 = $0_1 + 24 | 0;
    if ((HEAP32[$1_1 >> 2] | 0 | 0) == (5792 | 0)) {
     break label$1
    }
   }
   $1_1 = $0_1 + 24 | 0;
   $846($0_1 | 0, 28 | 0, $1_1 | 0, 5792 | 0, 5836 | 0, 103 | 0);
  }
  $845($0_1 | 0, 28 | 0, $1_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $80($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 39 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61608 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61608 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(5914 | 0, $3_1 | 0);
  }
  $0_1 = $896($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$6 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $0_1 | 0;
 }
 
 function $81($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 49 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61608 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61608 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   i64toi32_i32$0 = $1$hi;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(5952 | 0, $3_1 | 0);
  }
  i64toi32_i32$0 = -1;
  $6_1 = -1;
  $6$hi = i64toi32_i32$0;
  label$6 : {
   i64toi32_i32$0 = $1$hi;
   if ($889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0) {
    break label$6
   }
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
  }
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $82($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $5_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $4_1 = 0, $4$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) == (5792 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 28 | 0, $0_1 + 24 | 0 | 0, 5792 | 0, 5836 | 0, 63 | 0);
  }
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = -1;
  label$3 : {
   i64toi32_i32$0 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$3
   }
   i64toi32_i32$2 = 0;
   $3_1 = $889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0, i64toi32_i32$2 | 0, 2 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   i64toi32_i32$2 = $881(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $5_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $2_1;
   HEAP32[i64toi32_i32$2 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = -1;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
    $14_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $15_1 = 0
     } else {
      $15_1 = 1
     }
     $16_1 = $15_1;
    } else {
     $16_1 = 0
    }
    $14_1 = $16_1;
   }
   if ($14_1) {
    break label$3
   }
   i64toi32_i32$3 = $4$hi;
   $0_1 = $889(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0) | 0;
   $3_1 = ($0_1 >> 31 | 0) & $0_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
   $827(6003 | 0, $3_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (($2_1 & 14 | 0 | 0) == (8 | 0)) {
     break label$5
    }
    if (($2_1 & 8 | 0) >>> 3 | 0 | ($2_1 & 6 | 0 | 0) == (6 | 0) | 0) {
     break label$4
    }
   }
   $4_1 = $778($0_1 | 0) | 0;
   $2_1 = ($4_1 >>> 26 | 0) & 15 | 0;
   label$6 : {
    if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = $2_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = ($4_1 >>> 5 | 0) & 8191 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = ($4_1 >>> 22 | 0) & 7 | 0;
    $827(6048 | 0, $3_1 | 0);
   }
   label$7 : {
    if ($2_1 >>> 0 > 11 >>> 0) {
     break label$7
    }
    HEAP8[($1_1 + 5 | 0) >> 0] = 16;
    HEAP32[$1_1 >> 2] = 15;
    HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[(($2_1 << 2 | 0) + 6160 | 0) >> 2] | 0;
    HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[((($4_1 >>> 22 | 0) & 7 | 0) + 6208 | 0) >> 0] | 0;
    label$8 : {
     if (($2_1 + -7 | 0) >>> 0 > 4 >>> 0) {
      break label$8
     }
     label$9 : {
      if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      $827(6216 | 0, 0 | 0);
     }
     HEAP32[$1_1 >> 2] = 18;
     HEAP32[($1_1 + 8 | 0) >> 2] = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 1 | 0;
    }
    HEAP32[($3_1 + 24 | 0) >> 2] = ($4_1 >>> 30 | 0) + 1 | 0;
    $823($1_1 + 12 | 0 | 0, $3_1 + 24 | 0 | 0, 4 | 0) | 0;
    $2_1 = ($4_1 >>> 5 | 0) & 8191 | 0;
    HEAP16[($1_1 + 6 | 0) >> 1] = ((Math_imul($2_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1024e3 >>> 0) | 0;
    if ($2_1 >>> 0 <= 6 >>> 0) {
     break label$7
    }
    $4_1 = $2_1 + -6 | 0;
    break label$4;
   }
   $4_1 = 0;
  }
  label$10 : {
   $6_1 = $3_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $84($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 5984 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(6352 | 0, 6360 | 0, 63 | 0);
  abort();
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 85 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, $9_1 = 0, $4_1 = 0, $7_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 184 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 96 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = ($3_1 + 48 | 0) + 16 | 0;
  $6_1 = $3_1 + 68 | 0;
  label$5 : while (1) {
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $7_1 = 0;
   $1_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $8_1 = $7_1;
       $9_1 = $764($3_1 + 144 | 0 | 0) | 0;
       if (($9_1 | 0) == (-1 | 0)) {
        break label$8
       }
       $7_1 = $8_1 + 1 | 0;
       $1_1 = ($1_1 << 8 | 0) & 65280 | 0 | $9_1 | 0;
       if (($1_1 & 65520 | 0 | 0) != (65520 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $9_1 = 0;
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : while (1) {
          label$14 : {
           if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$14
           }
           if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$14
           }
           $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
           HEAP32[($3_1 + 84 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 88 | 0) >> 2] = $10_1 + -2 | 0;
           $827(6442 | 0, $3_1 + 80 | 0 | 0);
          }
          $1_1 = $83($3_1 + 144 | 0 | 0, $3_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          if (!$1_1) {
           break label$12
          }
          label$15 : {
           if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
           HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
           HEAP32[$6_1 >> 2] = HEAPU8[($3_1 + 100 | 0) >> 0] | 0;
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $10_1;
           HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
           $827(6488 | 0, $3_1 + 48 | 0 | 0);
          }
          $766($3_1 + 144 | 0 | 0, $1_1 | 0) | 0;
          $1_1 = $777($3_1 + 144 | 0 | 0) | 0;
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          label$16 : {
           if (($1_1 & 65520 | 0 | 0) != (65520 | 0)) {
            break label$16
           }
           $9_1 = $9_1 + 1 | 0;
           if (($9_1 | 0) == (3 | 0)) {
            break label$11
           }
           continue label$13;
          }
          break label$13;
         };
         if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         $7_1 = $754($3_1 + 144 | 0 | 0) | 0;
         HEAP32[(($3_1 + 16 | 0) + 16 | 0) >> 2] = 4095;
         HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
         HEAP32[($3_1 + 20 | 0) >> 2] = $7_1 + -2 | 0;
         HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 28 | 0) >> 2] = $1_1 >>> 5 | 0;
         $827(6564 | 0, $3_1 + 16 | 0 | 0);
        }
        $8_1 = $8_1 + 3 | 0;
        break label$8;
       }
       $738($4_1 | 0);
       $1_1 = $813(328 | 0) | 0;
       if (!$1_1) {
        break label$7
       }
       $218($1_1 | 0);
       HEAP32[($1_1 + 4 | 0) >> 2] = 1;
       $973($1_1 + 20 | 0 | 0, $3_1 + 96 | 0 | 0, 44 | 0) | 0;
       break label$7;
      }
      $8_1 = $7_1;
     }
     label$17 : {
      if ((HEAP8[(0 + 61624 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$17
      }
      if (!($828(2 | 0, 61624 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$17
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(6621 | 0, $3_1 | 0);
     }
     if ($8_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$18 : {
     $12_1 = $3_1 + 160 | 0;
     if ($12_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $12_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $766($3_1 + 144 | 0 | 0, $8_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 144 | 0 | 0);
   continue label$5;
  };
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (5984 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 5984 | 0, 6360 | 0, 96 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 6656 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(6724 | 0, 6732 | 0, 71 | 0);
  abort();
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 93 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $90($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $13_1 = 0, $8_1 = 0, $10_1 = 0, $4_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 256 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 376 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 192 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = ($3_1 + 80 | 0) + 16 | 0;
  $6_1 = $3_1 + 100 | 0;
  $7_1 = $3_1 + 104 | 0;
  label$5 : while (1) {
   $822($3_1 + 192 | 0 | 0, 0 | 0, 44 | 0) | 0;
   HEAP32[($3_1 + 192 | 0) >> 2] = 0;
   $763($3_1 + 240 | 0 | 0, $4_1 | 0);
   $1_1 = 0;
   $8_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $9_1 = $8_1;
       label$10 : {
        $10_1 = $764($3_1 + 240 | 0 | 0) | 0;
        if (($10_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $8_1 = $9_1;
        break label$8;
       }
       $8_1 = $9_1 + 1 | 0;
       $1_1 = ($1_1 << 8 | 0) & 65280 | 0 | $10_1 | 0;
       if (($1_1 & 65504 | 0 | 0) != (22240 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $11_1 = $9_1 + -1 | 0;
      $10_1 = 0;
      $12_1 = 0;
      label$11 : while (1) {
       label$12 : {
        if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
        HEAP32[($3_1 + 124 | 0) >> 2] = $10_1;
        HEAP32[($3_1 + 116 | 0) >> 2] = $1_1;
        HEAP32[($3_1 + 112 | 0) >> 2] = $0_1;
        HEAP32[($3_1 + 120 | 0) >> 2] = $13_1 + -2 | 0;
        $827(6814 | 0, $3_1 + 112 | 0 | 0);
       }
       label$13 : {
        $14_1 = $12_1 & 1 | 0;
        if ($14_1) {
         break label$13
        }
        $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
        $763($3_1 + 176 | 0 | 0, $4_1 | 0);
        if ($13_1 >>> 0 < 2 >>> 0) {
         break label$13
        }
        $766($3_1 + 176 | 0 | 0, $11_1 | 0) | 0;
       }
       $822($3_1 + 128 | 0 | 0, 0 | 0, 44 | 0) | 0;
       $1_1 = $91($3_1 + 240 | 0 | 0, $3_1 + 128 | 0 | 0, $1_1 | 0) | 0;
       label$14 : {
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             if ((HEAP32[($3_1 + 244 | 0) >> 2] | 0 | 0) < (0 | 0)) {
              break label$19
             }
             $13_1 = HEAP8[(0 + 61640 | 0) >> 0] | 0;
             if (!$1_1) {
              break label$17
             }
             label$20 : {
              if (($13_1 | 0) > (2 | 0)) {
               break label$20
              }
              if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$20
              }
              $13_1 = $754($3_1 + 240 | 0 | 0) | 0;
              HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
              HEAP32[$6_1 >> 2] = HEAPU8[($3_1 + 132 | 0) >> 0] | 0;
              HEAP32[$7_1 >> 2] = HEAP32[($3_1 + 128 | 0) >> 2] | 0;
              HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 84 | 0) >> 2] = $10_1;
              HEAP32[($3_1 + 88 | 0) >> 2] = $13_1;
              HEAP32[($3_1 + 92 | 0) >> 2] = $1_1;
              $827(6873 | 0, $3_1 + 80 | 0 | 0);
             }
             label$21 : {
              if (!(HEAPU8[($3_1 + 133 | 0) >> 0] | 0)) {
               break label$21
              }
              $973($3_1 + 192 | 0 | 0, $3_1 + 128 | 0 | 0, 44 | 0) | 0;
              $12_1 = $14_1 ? $12_1 : 1;
             }
             if (($10_1 | 0) == (40 | 0)) {
              break label$14
             }
             label$22 : {
              if ($10_1 >>> 0 < 2 >>> 0) {
               break label$22
              }
              if (!(HEAPU8[($3_1 + 197 | 0) >> 0] | 0)) {
               break label$22
              }
              if (HEAP32[($3_1 + 192 | 0) >> 2] | 0) {
               break label$14
              }
             }
             $766($3_1 + 240 | 0 | 0, $1_1 | 0) | 0;
             $1_1 = $777($3_1 + 240 | 0 | 0) | 0;
             if ((HEAP32[($3_1 + 244 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              break label$18
             }
             $14_1 = $12_1 & 1 | 0;
            }
            if (!$14_1) {
             break label$8
            }
            $1_1 = $754($3_1 + 176 | 0 | 0) | 0;
            label$23 : {
             if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$23
             }
             if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$23
             }
             HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
             HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
             $827(7061 | 0, $3_1 + 16 | 0 | 0);
            }
            $8_1 = $1_1 + 2 | 0;
            break label$8;
           }
           $13_1 = $1_1 >>> 5 | 0;
           if (($13_1 | 0) == (695 | 0)) {
            break label$15
           }
           if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           $8_1 = $754($3_1 + 240 | 0 | 0) | 0;
           HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = 695;
           HEAP32[($3_1 + 60 | 0) >> 2] = $13_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = $8_1 + -2 | 0;
           $827(6958 | 0, $3_1 + 48 | 0 | 0);
           break label$16;
          }
          if (($13_1 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          $1_1 = $754($3_1 + 240 | 0 | 0) | 0;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $1_1 + -2 | 0;
          $827(7015 | 0, $3_1 + 32 | 0 | 0);
         }
         $8_1 = $9_1 + 3 | 0;
         break label$8;
        }
        $10_1 = $10_1 + 1 | 0;
        continue label$11;
       }
       break label$11;
      };
      $738($4_1 | 0);
      $1_1 = $813(328 | 0) | 0;
      if (!$1_1) {
       break label$7
      }
      $218($1_1 | 0);
      HEAP32[($1_1 + 4 | 0) >> 2] = 1;
      $973($1_1 + 20 | 0 | 0, $3_1 + 192 | 0 | 0, 44 | 0) | 0;
      break label$7;
     }
     label$24 : {
      if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$24
      }
      if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$24
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(7104 | 0, $3_1 | 0);
     }
     if ($8_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$25 : {
     $16_1 = $3_1 + 256 | 0;
     if ($16_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $16_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 240 | 0 | 0, $4_1 | 0);
   $766($3_1 + 240 | 0 | 0, $8_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 240 | 0 | 0);
   continue label$5;
  };
 }
 
 function $91($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $34_1 = 0, $37_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $770($0_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $2_1;
   $827(7154 | 0, $3_1 | 0);
  }
  label$4 : {
   $5_1 = $764($0_1 | 0) | 0;
   if (($5_1 | 0) == (-1 | 0)) {
    break label$4
   }
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $34_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $34_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $37_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = ($5_1 | ($2_1 << 8 | 0) | 0) & 8191 | 0;
   if (!($93($3_1 + 16 | 0 | 0, $1_1 | 0) | 0)) {
    break label$4
   }
   HEAP16[($1_1 + 6 | 0) >> 1] = (Math_imul(HEAP32[($1_1 + 8 | 0) >> 2] | 0, ($4_1 << 3 | 0) + 24 | 0) >>> 0) / (1024e3 >>> 0) | 0;
  }
  label$5 : {
   $7_1 = $3_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (6656 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 6656 | 0, 6732 | 0, 104 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $9_1 = 0, $14_1 = 0, $12_1 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  $783($2_1 + 64 | 0 | 0, $0_1 | 0);
  $0_1 = 0;
  $3_1 = $789($2_1 + 64 | 0 | 0) | 0;
  $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if ($3_1) {
     break label$4
    }
    if ($4_1) {
     break label$4
    }
    $3_1 = $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
    if ($784($2_1 + 64 | 0 | 0) | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if (($3_1 | 0) != (1 | 0)) {
        break label$7
       }
       $3_1 = $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
       $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
       if ($3_1) {
        break label$4
       }
       if ($4_1) {
        break label$4
       }
       break label$6;
      }
      if ($784($2_1 + 64 | 0 | 0) | 0) {
       break label$4
      }
      if ($3_1) {
       break label$6
      }
      $5_1 = 0;
      break label$5;
     }
     $94($2_1 + 64 | 0 | 0) | 0;
     $5_1 = 1;
    }
    $6_1 = $789($2_1 + 64 | 0 | 0) | 0;
    $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
    $7_1 = $790($2_1 + 64 | 0 | 0, 4 | 0) | 0;
    $8_1 = 0;
    $9_1 = 0;
    label$8 : while (1) {
     $10_1 = $790($2_1 + 64 | 0 | 0, 3 | 0) | 0;
     $3_1 = 0;
     $11_1 = 0;
     label$9 : while (1) {
      label$10 : {
       if ((HEAP8[(0 + 61640 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 61640 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $9_1;
       HEAP32[($2_1 + 4 | 0) >> 2] = $10_1;
       HEAP32[$2_1 >> 2] = $3_1;
       $827(7207 | 0, $2_1 | 0);
      }
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           if (!($3_1 | $9_1 | 0)) {
            break label$15
           }
           $12_1 = 0;
           if ($789($2_1 + 64 | 0 | 0) | 0) {
            break label$14
           }
          }
          $973($2_1 + 16 | 0 | 0, $1_1 | 0, 44 | 0) | 0;
          $13_1 = 0;
          $4_1 = 0;
          label$16 : {
           if (!$5_1) {
            break label$16
           }
           $4_1 = $94($2_1 + 64 | 0 | 0) | 0;
          }
          $14_1 = $786($2_1 + 64 | 0 | 0) | 0;
          $12_1 = $95($2_1 + 64 | 0 | 0, $2_1 + 16 | 0 | 0) | 0;
          if ($784($2_1 + 64 | 0 | 0) | 0) {
           break label$12
          }
          label$17 : {
           if (!(HEAP32[($2_1 + 16 | 0) >> 2] | 0)) {
            break label$17
           }
           $973($1_1 | 0, $2_1 + 16 | 0 | 0, 44 | 0) | 0;
           $8_1 = 1;
          }
          if (!$4_1) {
           break label$13
          }
          $15_1 = $786($2_1 + 64 | 0 | 0) | 0;
          if ($15_1 >>> 0 < $14_1 >>> 0) {
           break label$3
          }
          $14_1 = $15_1 - $14_1 | 0;
          if ($4_1 >>> 0 <= $14_1 >>> 0) {
           break label$12
          }
          $792($2_1 + 64 | 0 | 0, $4_1 - $14_1 | 0 | 0);
          $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
          $0_1 = $0_1 & ($4_1 ^ 1 | 0) | 0;
          if ($4_1) {
           break label$4
          }
         }
         $4_1 = $790($2_1 + 64 | 0 | 0, 3 | 0) | 0;
         if (!($784($2_1 + 64 | 0 | 0) | 0)) {
          break label$11
         }
         $0_1 = 0;
         break label$4;
        }
        $13_1 = $8_1 & 1 | 0;
       }
       $0_1 = $13_1;
       break label$4;
      }
      label$18 : {
       label$19 : {
        switch ($4_1 | 0) {
        case 0:
         $790($2_1 + 64 | 0 | 0, 8 | 0) | 0;
         if ($6_1) {
          break label$18
         }
         label$23 : {
          if (($12_1 | 0) == (20 | 0)) {
           break label$23
          }
          if (($12_1 | 0) != (6 | 0)) {
           break label$18
          }
         }
         if (($11_1 | 0) != (8 | 0)) {
          break label$18
         }
         $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
         break label$18;
        case 1:
         $790($2_1 + 64 | 0 | 0, 9 | 0) | 0;
         break label$18;
        case 3:
        case 4:
        case 5:
         $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
         break label$18;
        default:
         break label$19;
        };
       }
       if (($4_1 & -2 | 0 | 0) != (6 | 0)) {
        break label$18
       }
       $790($2_1 + 64 | 0 | 0, 1 | 0) | 0;
      }
      $4_1 = $784($2_1 + 64 | 0 | 0) | 0;
      $0_1 = $0_1 & ($4_1 ^ 1 | 0) | 0;
      if ($4_1) {
       break label$4
      }
      $11_1 = $12_1;
      $3_1 = $3_1 + 1 | 0;
      if ($3_1 >>> 0 <= $10_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
     $9_1 = $9_1 + 1 | 0;
     if ($9_1 >>> 0 <= $7_1 >>> 0) {
      continue label$8
     }
     break label$8;
    };
    $0_1 = $8_1 & 1 | 0;
   }
   label$24 : {
    $17_1 = $2_1 + 80 | 0;
    if ($17_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $17_1;
   }
   return $0_1 | 0;
  }
  $859(7230 | 0, 6732 | 0, 291 | 0);
  abort();
 }
 
 function $94($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $790($0_1 | 0, 2 | 0) | 0;
  label$1 : {
   if ($784($0_1 | 0) | 0) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    $1_1 = ($790($0_1 | 0, 8 | 0) | 0) + ($1_1 << 8 | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1 >>> 0 <= $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $584($0_1 | 0) | 0;
  $4_1 = 0;
  label$3 : {
   $5_1 = $585($0_1 | 0, 0 | 0) | 0;
   if (!$5_1) {
    break label$3
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
  }
  $5_1 = $790($0_1 | 0, 4 | 0) | 0;
  label$4 : {
   if ($784($0_1 | 0) | 0) {
    break label$4
   }
   HEAP8[($1_1 + 4 | 0) >> 0] = 0;
   label$5 : {
    if ($5_1 >>> 0 > 7 >>> 0) {
     break label$5
    }
    HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[($5_1 + 7283 | 0) >> 0] | 0;
   }
   label$6 : {
    if (($3_1 | 0) != (5 | 0)) {
     break label$6
    }
    label$7 : {
     $3_1 = $585($0_1 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$7
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
    }
    $3_1 = $584($0_1 | 0) | 0;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = 16;
   label$8 : {
    label$9 : {
     if (($3_1 + -1 | 0) >>> 0 < 6 >>> 0) {
      break label$9
     }
     $0_1 = 0;
     $4_1 = $3_1 + -23 | 0;
     if ($4_1 >>> 0 > 16 >>> 0) {
      break label$8
     }
     if (!((1 << $4_1 | 0) & 65601 | 0)) {
      break label$8
     }
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    $0_1 = 17;
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $823($1_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0, 4 | 0) | 0;
   $4_1 = $3_1;
  }
  label$10 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $96($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = $782($0_1 | 0) | 0;
  $4_1 = $777($0_1 | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = 6;
   $0_1 = 129;
   label$2 : {
    switch ($4_1 >>> 11 | 0 | 0) {
    default:
     $0_1 = 0;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
     $2_1 = $3_1 & 63 | 0;
     if ($2_1 >>> 0 > 37 >>> 0) {
      break label$1
     }
     $3_1 = ($3_1 >>> 6 | 0) & 3 | 0;
     if (($3_1 | 0) == (3 | 0)) {
      break label$1
     }
     HEAP8[($1_1 + 5 | 0) >> 0] = 16;
     HEAP32[$1_1 >> 2] = 129;
     HEAP8[($1_1 + 12 | 0) >> 0] = 1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $0_1 = $3_1 << 1 | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = HEAPU16[($0_1 + 7616 | 0) >> 1] | 0;
     $3_1 = ($2_1 << 3 | 0) + 7312 | 0;
     HEAP16[($1_1 + 6 | 0) >> 1] = HEAPU16[$3_1 >> 1] | 0;
     HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[((($4_1 >>> 5 | 0) & 7 | 0) + 7622 | 0) >> 0] | 0;
     $5_1 = ((HEAPU16[(($3_1 + $0_1 | 0) + 2 | 0) >> 1] | 0) << 1 | 0) + -7 | 0;
     break label$1;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
     break label$2;
    };
   }
   label$5 : {
    label$6 : {
     $0_1 = ($3_1 >>> 6 | 0) & 3 | 0;
     if (($0_1 | 0) == (3 | 0)) {
      break label$6
     }
     $0_1 = HEAPU16[(($0_1 << 1 | 0) + 7616 | 0) >> 1] | 0;
     $5_1 = 4;
     break label$5;
    }
    $0_1 = ($3_1 >>> 4 | 0) & 3 | 0;
    if (($0_1 | 0) == (3 | 0)) {
     break label$1
    }
    $0_1 = (HEAPU16[(($0_1 << 1 | 0) + 7616 | 0) >> 1] | 0) >>> 1 | 0;
    $5_1 = 2;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = 16;
   HEAP32[$1_1 >> 2] = 6;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1 & 65535 | 0;
   HEAP8[($1_1 + 4 | 0) >> 0] = (HEAPU8[((($3_1 >>> 1 | 0) & 7 | 0) + 7622 | 0) >> 0] | 0) + ($3_1 & 1 | 0) | 0;
   $0_1 = HEAPU8[((($3_1 >>> $5_1 | 0) & 3 | 0) + 7630 | 0) >> 0] | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = 6;
   HEAP8[($1_1 + 12 | 0) >> 0] = 1;
   $3_1 = (($3_1 >>> 7 | 0) & 4094 | 0) + -5 | 0;
   HEAP16[($1_1 + 6 | 0) >> 1] = ((Math_imul($3_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (Math_imul($0_1, 256e3) >>> 0) | 0;
   return $3_1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(56 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 56 | 0, $1_1 | 0, 7291 | 0);
     HEAP32[($1_1 + 52 | 0) >> 2] = 0;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(7684 | 0, 7692 | 0, 45 | 0);
  abort();
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 68 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 56 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $9_1 = 0, $4_1 = 0, $11_1 = 0, $10_1 = 0, $5_1 = 0, $16_1 = 0, $15_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 261 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $5_1 = $0_1 + 8 | 0;
  $822($5_1 | 0, 0 | 0, 44 | 0) | 0;
  $6_1 = $3_1 + 52 | 0;
  $7_1 = $3_1 + 48 | 0;
  $8_1 = $3_1 + 56 | 0;
  label$5 : while (1) {
   $763($3_1 + 80 | 0 | 0, $4_1 | 0);
   $1_1 = 0;
   $9_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $10_1 = $1_1;
       label$10 : {
        $11_1 = $764($3_1 + 80 | 0 | 0) | 0;
        if (($11_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $1_1 = $10_1;
        break label$8;
       }
       $1_1 = $10_1 + 1 | 0;
       $9_1 = ($9_1 << 8 | 0) & 65280 | 0 | $11_1 | 0;
       if (($9_1 | 0) != (2935 | 0)) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[($0_1 + 52 | 0) >> 2] = 0;
      label$11 : while (1) {
       label$12 : {
        if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        $9_1 = $754($3_1 + 80 | 0 | 0) | 0;
        HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
        HEAP32[($3_1 + 68 | 0) >> 2] = $9_1 + -2 | 0;
        $827(7769 | 0, $3_1 + 64 | 0 | 0);
       }
       $9_1 = $96($3_1 + 80 | 0 | 0, $5_1 | 0, $3_1 + 76 | 0 | 0) | 0;
       if ((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
       label$13 : {
        label$14 : {
         if (!$9_1) {
          break label$14
         }
         label$15 : {
          if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$15
          }
          if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
          $12_1 = $754($3_1 + 80 | 0 | 0) | 0;
          $13_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          $14_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          HEAP32[$6_1 >> 2] = HEAPU16[($0_1 + 14 | 0) >> 1] | 0;
          HEAP32[$7_1 >> 2] = $14_1;
          HEAP32[$8_1 >> 2] = ($13_1 | 0) == (129 | 0) ? 7879 : 7883;
          HEAP32[($3_1 + 44 | 0) >> 2] = $9_1;
          HEAP32[($3_1 + 40 | 0) >> 2] = $12_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $11_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          $827(7806 | 0, $3_1 + 32 | 0 | 0);
         }
         $766($3_1 + 80 | 0 | 0, $9_1 | 0) | 0;
         $9_1 = $777($3_1 + 80 | 0 | 0) | 0;
         if ((HEAP32[($3_1 + 84 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         if (($9_1 | 0) == (2935 | 0)) {
          break label$13
         }
         if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         $1_1 = $754($3_1 + 80 | 0 | 0) | 0;
         HEAP32[($3_1 + 28 | 0) >> 2] = 2935;
         HEAP32[($3_1 + 24 | 0) >> 2] = $9_1;
         HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
         $827(7888 | 0, $3_1 + 16 | 0 | 0);
        }
        $1_1 = $10_1 + 3 | 0;
        break label$8;
       }
       $9_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($0_1 + 52 | 0) >> 2] = $9_1;
       if ($9_1 >>> 0 < 3 >>> 0) {
        continue label$11
       }
       break label$11;
      };
      $1_1 = $100($0_1 | 0) | 0;
      break label$7;
     }
     label$16 : {
      if ((HEAP8[(0 + 61656 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$16
      }
      if (!($828(2 | 0, 61656 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$16
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(7936 | 0, $3_1 | 0);
     }
     if ($1_1 >>> 0 >= 3 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$17 : {
     $16_1 = $3_1 + 96 | 0;
     if ($16_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $16_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 80 | 0 | 0, $4_1 | 0);
   $766($3_1 + 80 | 0 | 0, $1_1 + -2 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 80 | 0 | 0);
   continue label$5;
  };
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   $1_1 = $813(328 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($1_1 + 4 | 0) >> 2] = 1;
   $973($1_1 + 20 | 0 | 0, $0_1 + 8 | 0 | 0, 44 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 79 | 0);
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7291 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 7291 | 0, 7692 | 0, 244 | 0);
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0) >>> 0 < 2 >>> 0) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 90;
   $2_1 = $100($0_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if (($1_1 | 0) != (1297239878 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($2_1 | 0) == (1179011393 | 0) | ($2_1 | 0) == (1128679745 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(32 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61672 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 32;
    $827(8036 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 32 | 0, $2_1 | 0, 7976 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   $624($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 40 | 0) >> 2] = 1297239878;
   HEAP8[($1_1 + 36 | 0) >> 0] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = 36;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $623($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    HEAP32[($2_1 + 28 | 0) >> 2] = $2_1;
    $616($0_1 | 0, $2_1 + 16 | 0 | 0, 1296912195 | 0, 37 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 96 | 0);
  }
  return ($1_1 | 0) != (1179011393 | 0) & ($1_1 | 0) != (1128679745 | 0) | 0 | 0;
 }
 
 function $106($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 110 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61672 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61672 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $10_1 = 0;
     break label$6;
    }
    $10_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(8171 | 0, $5_1 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
      break label$10
     }
     if ($3_1) {
      break label$10
     }
     if (($1_1 | 0) != (1296912195 | 0)) {
      break label$10
     }
     if (!$4_1) {
      break label$10
     }
     $1_1 = 1;
     if (($756($4_1 | 0) | 0 | 0) != ($2_1 | 0)) {
      break label$9
     }
     $762($5_1 + 48 | 0 | 0, $4_1 | 0);
     $1_1 = 1;
     if (!($109($5_1 + 48 | 0 | 0, $5_1 + 64 | 0 | 0) | 0)) {
      break label$9
     }
     $3_1 = $813(328 | 0) | 0;
     if (!$3_1) {
      break label$9
     }
     $218($3_1 | 0);
     HEAP32[($3_1 + 20 | 0) >> 2] = 138;
     HEAP32[($3_1 + 4 | 0) >> 2] = 1;
     HEAP32[($3_1 + 8 | 0) >> 2] = 1;
     HEAP8[($3_1 + 24 | 0) >> 0] = HEAPU8[($5_1 + 64 | 0) >> 0] | 0;
     HEAP8[($3_1 + 25 | 0) >> 0] = HEAPU8[($5_1 + 72 | 0) >> 0] | 0;
     $2_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
     $1_1 = 0;
     HEAP16[($3_1 + 26 | 0) >> 1] = 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
     label$11 : {
      $2_1 = $813(40 | 0) | 0;
      if ($2_1) {
       break label$11
      }
      $815($3_1 | 0);
      break label$9;
     }
     $214($2_1 | 0, 20 | 0);
     $215($2_1 | 0, $3_1 | 0);
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     break label$9;
    }
    $1_1 = 1;
    if (!$4_1) {
     break label$8
    }
   }
   $735($4_1 | 0);
  }
  label$12 : {
   $12_1 = $5_1 + 80 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 201 | 0);
  }
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 16 | 0 | 0);
  $629(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 32 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $108($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $24_1 = 0, $24$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (7976 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 | 0, 7976 | 0, 8093 | 0, 222 | 0);
  }
  label$5 : {
   label$6 : {
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    $31_1 = !(i64toi32_i32$1 | i64toi32_i32$0 | 0) ? 8192 : i64toi32_i32$1;
    i64toi32_i32$0 = $24$hi;
    $3_1 = $50($1_1 | 0, $24_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, $4_1 + 12 | 0 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    $3_1 = 0;
    break label$5;
   }
   $797($2_1 | 0, $3_1 | 0);
   $630(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $815($1_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $619(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$7 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, i64toi32_i32$5 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $6_1 = 0, $5_1 = 0, $32$hi = 0, $38_1 = 0, $38$hi = 0, $60$hi = 0, $72$hi = 0, $76$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = $777($0_1 | 0) | 0;
  $768($0_1 | 0, $2_1 + 22 | 0 | 0, 10 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   label$4 : while (1) {
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $32$hi = i64toi32_i32$1;
    i64toi32_i32$0 = ($3_1 + ($2_1 + 22 | 0) | 0) + 2 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$0 >> 0] | 0;
    i64toi32_i32$2 = 0;
    $38_1 = i64toi32_i32$1;
    $38$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $32$hi;
    i64toi32_i32$0 = $21_1;
    i64toi32_i32$1 = $38$hi;
    i64toi32_i32$3 = $38_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (8 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $4_1 = HEAPU8[($2_1 + 22 | 0) >> 0] | 0;
   $0_1 = ($4_1 << 8 | 0) & 32512 | 0 | (HEAPU8[($2_1 + 23 | 0) >> 0] | 0) | 0;
   $3_1 = 0;
   label$5 : {
    i64toi32_i32$1 = $7$hi;
    if (!($7_1 | i64toi32_i32$1 | 0)) {
     break label$5
    }
    if (($0_1 | 0) == (32767 | 0)) {
     break label$3
    }
   }
   if (($0_1 + -16383 | 0) >>> 0 > 126 >>> 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
   $60$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 & 128 | 0;
   i64toi32_i32$5 = $60$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$2;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
   $3_1 = $0_1 + -16446 | 0;
   label$6 : {
    label$7 : {
     if ($0_1 >>> 0 > 16445 >>> 0) {
      break label$7
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $72$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$3 = $72$hi;
     i64toi32_i32$5 = 0 - $3_1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $22_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      $22_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
     }
     $7_1 = $22_1;
     $7$hi = i64toi32_i32$3;
     break label$6;
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = 0;
    $76$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = $76$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $23_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
     $23_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $7_1 = $23_1;
    $7$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $7$hi;
   HEAP32[($1_1 + 12 | 0) >> 2] = $7_1;
   $3_1 = 1;
   if ((HEAP8[(0 + 61688 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61688 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(8224 | 0, $2_1 | 0);
  }
  label$8 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  return ($115($0_1 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61704 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(8356 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 8300 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8300 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8300 | 0, 8411 | 0, 66 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $113($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8300 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8300 | 0, 8411 | 0, 87 | 0);
  }
  $5_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 61704 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61704 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
   HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   $827(8488 | 0, $4_1 + 16 | 0 | 0);
  }
  label$6 : {
   i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $1_1 = $50($1_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 8192 | 0, $4_1 + 60 | 0 | 0) | 0;
   if (!$1_1) {
    break label$6
   }
   $5_1 = 0;
   $6_1 = $756($1_1 | 0) | 0;
   label$7 : {
    if ((HEAP8[(0 + 61704 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 61704 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(8524 | 0, $4_1 | 0);
   }
   $762($4_1 + 40 | 0 | 0, $1_1 | 0);
   $0_1 = $115($4_1 + 40 | 0 | 0) | 0;
   $735($1_1 | 0);
   if (($0_1 & -2 | 0 | 0) != (144 | 0)) {
    break label$6
   }
   label$8 : {
    $1_1 = $813(40 | 0) | 0;
    if ($1_1) {
     break label$8
    }
    $114(106 | 0);
    break label$6;
   }
   $214($1_1 | 0, 21 | 0);
   label$9 : {
    $3_1 = $813(328 | 0) | 0;
    if ($3_1) {
     break label$9
    }
    $114(109 | 0);
    $815($1_1 | 0);
    break label$6;
   }
   $218($3_1 | 0);
   HEAP16[($3_1 + 24 | 0) >> 1] = 4097;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 1;
   HEAP32[($3_1 + 4 | 0) >> 2] = 1;
   HEAP32[($3_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = ($0_1 | 0) == (145 | 0) ? 16e3 : 8e3;
   HEAP32[($1_1 + 8 | 0) >> 2] = 21;
   $215($1_1 | 0, $3_1 | 0);
   $5_1 = $1_1;
  }
  label$10 : {
   $8_1 = $4_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  $862(8411 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $115($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (($776($0_1 | 0) | 0 | 0) != (1296113955 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if (($764($0_1 | 0) | 0 | 0) != (82 | 0)) {
     break label$2
    }
    label$3 : {
     $1_1 = $764($0_1 | 0) | 0;
     if (($1_1 | 0) != (10 | 0)) {
      break label$3
     }
     return 144 | 0;
    }
    if (($1_1 | 0) != (45 | 0)) {
     break label$2
    }
    if (($781($0_1 | 0) | 0 | 0) != (672343 | 0)) {
     break label$2
    }
    $1_1 = 145;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $120($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $3_1 = $1_1 + 48 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61720 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(8624 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 8563 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8563 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8563 | 0, 8679 | 0, 101 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $119($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $68_1 = 0, $68$hi = 0, $70_1 = 0, $70$hi = 0;
  label$1 : {
   $4_1 = global$0 - 96 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (8563 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 8563 | 0, 8679 | 0, 121 | 0);
  }
  $5_1 = 0;
  label$5 : {
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $0_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, 76 | 0, $4_1 + 92 | 0 | 0) | 0;
   if (!$0_1) {
    break label$5
   }
   $762($4_1 + 72 | 0 | 0, $0_1 | 0);
   label$6 : {
    if (!($120($4_1 + 72 | 0 | 0, $4_1 + 32 | 0 | 0) | 0)) {
     break label$6
    }
    if (!($121($4_1 + 72 | 0 | 0, $4_1 + 8 | 0 | 0) | 0)) {
     break label$6
    }
    if (!(HEAP32[($4_1 + 28 | 0) >> 2] | 0)) {
     break label$6
    }
    $735($0_1 | 0);
    $1_1 = $813(40 | 0) | 0;
    if (!$1_1) {
     break label$5
    }
    $214($1_1 | 0, 19 | 0);
    label$7 : {
     $0_1 = $813(328 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $218($0_1 | 0);
     HEAP32[($1_1 + 12 | 0) >> 2] = 3;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul(Math_imul(HEAP32[($4_1 + 12 | 0) >> 2] | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 16 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $68_1 = i64toi32_i32$0;
     $68$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$1;
     $70$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $68$hi;
     i64toi32_i32$1 = $70$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($68_1 | 0, i64toi32_i32$0 | 0, $70_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 20 | 0) >> 2] = 148;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 1;
     HEAP32[($0_1 + 4 | 0) >> 2] = 1;
     HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 26 | 0) >> 0] | 0;
     HEAP8[($0_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 24 | 0) >> 0] | 0;
     $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     HEAP16[($0_1 + 26 | 0) >> 1] = 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
     $215($1_1 | 0, $0_1 | 0);
     $5_1 = $1_1;
     break label$5;
    }
    $815($1_1 | 0);
    break label$5;
   }
   $735($0_1 | 0);
  }
  label$8 : {
   $7_1 = $4_1 + 96 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0, $49_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (541278541 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = $775($0_1 | 0) | 0;
   HEAP16[$1_1 >> 1] = $3_1;
   label$4 : {
    if ((($3_1 + -3980 | 0) & 65535 | 0) >>> 0 <= 10 >>> 0) {
     break label$4
    }
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $766($0_1 | 0, 2 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $776($0_1 | 0) | 0;
   i64toi32_i32$0 = $779($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $49_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $49_1;
   HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $776($0_1 | 0) | 0;
   $766($0_1 | 0, 16 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61736 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61736 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $2_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $8_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $7_1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[i64toi32_i32$1 >> 2] = $0_1;
   $827(8756 | 0, i64toi32_i32$1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $80_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP16[$1_1 >> 1] = $775($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $775($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
  HEAP16[($1_1 + 16 | 0) >> 1] = $775($0_1 | 0) | 0;
  HEAP16[($1_1 + 18 | 0) >> 1] = $775($0_1 | 0) | 0;
  $3_1 = $776($0_1 | 0) | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
  $4_1 = 0;
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 61736 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61736 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $6_1 = HEAPU16[($1_1 + 18 | 0) >> 1] | 0;
   $7_1 = HEAPU16[($1_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   $80_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $80_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(8916 | 0, $2_1 | 0);
  }
  label$4 : {
   $9_1 = $2_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(856 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 856 | 0, $1_1 | 0, 9104 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $123($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(9216 | 0, 9224 | 0, 107 | 0);
  abort();
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 87 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $974($0_1 + 36 | 0 | 0, 0 | 0, 256 | 0) | 0;
  HEAP32[($0_1 + 596 | 0) >> 2] = 27;
  $219($0_1 + 292 | 0 | 0);
  HEAP8[($0_1 + 308 | 0) >> 0] = 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 130 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 856 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $12_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $251_1 = 0, $13_1 = 0, $13$hi = 0, $279_1 = 0;
  label$1 : {
   $3_1 = global$0 - 528 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 379 | 0);
  }
  $219($3_1 + 208 | 0 | 0);
  $4_1 = 0;
  HEAP32[($3_1 + 196 | 0) >> 2] = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($5_1 | 0, $1_1 | 0);
  $763($3_1 + 512 | 0 | 0, $5_1 | 0);
  HEAP8[($3_1 + 175 | 0) >> 0] = 0;
  $1_1 = $126($3_1 + 512 | 0 | 0) | 0;
  $6_1 = $754($3_1 + 512 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     $7_1 = $0_1 + 36 | 0;
     $8_1 = $0_1 + 292 | 0;
     $9_1 = ($3_1 + 208 | 0) + 16 | 0;
     label$8 : while (1) {
      if ($1_1 & 128 | 0) {
       break label$6
      }
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             $10_1 = $1_1 & 31 | 0;
             switch ($10_1 + -1 | 0 | 0) {
             case 0:
              break label$11;
             case 4:
              break label$12;
             case 7:
              break label$13;
             case 6:
              break label$14;
             case 1:
             case 2:
             case 3:
             case 5:
              break label$9;
             default:
              break label$15;
             };
            }
            if (($10_1 | 0) == (15 | 0)) {
             break label$10
            }
            if (($10_1 | 0) != (20 | 0)) {
             break label$9
            }
            $1_1 = $782($3_1 + 512 | 0 | 0) | 0;
            if ((HEAP32[($3_1 + 516 | 0) >> 2] | 0 | 0) < (0 | 0)) {
             break label$7
            }
            HEAP32[($0_1 + 596 | 0) >> 2] = $1_1 & 8388608 | 0 ? 31 : 32;
            break label$9;
           }
           if (!($1_1 & 96 | 0)) {
            break label$6
           }
           $1_1 = $127($0_1 | 0, $3_1 + 512 | 0 | 0, $3_1 + 208 | 0 | 0, $3_1 + 175 | 0 | 0, $3_1 + 196 | 0 | 0) | 0;
           if (HEAPU8[($3_1 + 175 | 0) >> 0] | 0) {
            break label$7
           }
           if (!$1_1) {
            break label$6
           }
           $248($9_1 | 0, $3_1 + 96 | 0 | 0, 64 | 0) | 0;
           label$16 : {
            if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$16
            }
            if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$16
            }
            HEAP32[$3_1 >> 2] = 9339;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
            HEAP32[($3_1 + 8 | 0) >> 2] = $3_1 + 96 | 0;
            $827(9307 | 0, $3_1 | 0);
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
           label$17 : {
            $1_1 = HEAP32[($3_1 + 196 | 0) >> 2] | 0;
            if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
             break label$17
            }
            if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
             break label$9
            }
            HEAP32[($0_1 + 32 | 0) >> 2] = -1;
            HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
            i64toi32_i32$1 = $0_1;
            i64toi32_i32$0 = 0;
            HEAP32[($0_1 + 20 | 0) >> 2] = 0;
            HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
            $973($8_1 | 0, $3_1 + 208 | 0 | 0, 304 | 0) | 0;
            $974($7_1 | 0, 0 | 0, 256 | 0) | 0;
            break label$9;
           }
           label$18 : {
            if ((HEAPU16[($3_1 + 216 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 300 | 0) >> 1] | 0 | 0)) {
             break label$18
            }
            if ((HEAPU16[($3_1 + 218 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 302 | 0) >> 1] | 0 | 0)) {
             break label$9
            }
           }
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = -1;
           HEAP32[($0_1 + 28 | 0) >> 2] = -1;
           HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
           $974($7_1 | 0, 0 | 0, 256 | 0) | 0;
           break label$9;
          }
          if (!($1_1 & 96 | 0)) {
           break label$6
          }
          if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 4 | 0) | 0 | 0) != (4 | 0)) {
           break label$7
          }
          $242($3_1 + 176 | 0 | 0, $3_1 + 201 | 0 | 0, 4 | 0);
          $1_1 = $243($3_1 + 176 | 0 | 0) | 0;
          HEAP32[($3_1 + 196 | 0) >> 2] = $1_1;
          $10_1 = $243($3_1 + 176 | 0 | 0) | 0;
          label$19 : {
           if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $10_1;
           HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 16 | 0) >> 2] = 9339;
           $827(9362 | 0, $3_1 + 16 | 0 | 0);
          }
          if (($1_1 | 0) > (255 | 0)) {
           break label$6
          }
          HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
          if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) != ($10_1 | 0)) {
           break label$9
          }
          if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
           break label$9
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
          HEAP8[(($0_1 + $1_1 | 0) + 36 | 0) >> 0] = 1;
          break label$9;
         }
         if (!($1_1 & 96 | 0)) {
          break label$6
         }
        }
        if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0) | 0 | 0) != (7 | 0)) {
         break label$7
        }
        $242($3_1 + 176 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0);
        $244($3_1 + 176 | 0 | 0) | 0;
        $10_1 = $243($3_1 + 176 | 0 | 0) | 0;
        HEAP32[($3_1 + 196 | 0) >> 2] = $10_1;
        $1_1 = $243($3_1 + 176 | 0 | 0) | 0;
        if (($1_1 | 0) > (255 | 0)) {
         break label$6
        }
        label$20 : {
         if (!(HEAPU8[(($0_1 + $1_1 | 0) + 36 | 0) >> 0] | 0)) {
          break label$20
         }
         HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
         label$21 : {
          if (($10_1 | 0) == (7 | 0)) {
           break label$21
          }
          if (($10_1 | 0) != (2 | 0)) {
           break label$20
          }
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        }
        label$22 : {
         if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$22
         }
         if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$22
         }
         $10_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         $251_1 = i64toi32_i32$0;
         i64toi32_i32$0 = ($3_1 + 64 | 0) + 16 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $251_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
         HEAP32[($3_1 + 72 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 76 | 0) >> 2] = $10_1;
         HEAP32[($3_1 + 64 | 0) >> 2] = 9339;
         $827(9402 | 0, $3_1 + 64 | 0 | 0);
        }
        if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
         break label$9
        }
        label$23 : {
         if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$23
         }
         if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$23
         }
         i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         $13_1 = i64toi32_i32$1;
         $13$hi = i64toi32_i32$0;
         i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         $279_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $3_1 + 48 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $279_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
         i64toi32_i32$1 = $13$hi;
         i64toi32_i32$0 = $3_1;
         HEAP32[($3_1 + 40 | 0) >> 2] = $13_1;
         HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($3_1 + 32 | 0) >> 2] = 9339;
         $827(9454 | 0, $3_1 + 32 | 0 | 0);
        }
        $4_1 = $128($0_1 | 0) | 0;
        break label$5;
       }
       if (($768($3_1 + 512 | 0 | 0, $3_1 + 201 | 0 | 0, 7 | 0) | 0 | 0) != (7 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
      }
      HEAP8[($3_1 + 175 | 0) >> 0] = 0;
      $1_1 = $126($3_1 + 512 | 0 | 0) | 0;
      $6_1 = $754($3_1 + 512 | 0 | 0) | 0;
      if ($1_1) {
       continue label$8
      }
      break label$8;
     };
    }
    if ($6_1 >>> 0 < 5 >>> 0) {
     break label$5
    }
    $763($3_1 + 512 | 0 | 0, $5_1 | 0);
    $766($3_1 + 512 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
    $745($5_1 | 0, $3_1 + 512 | 0 | 0);
    break label$5;
   }
   HEAP8[$2_1 >> 0] = 1;
   $738($5_1 | 0);
   $4_1 = 0;
  }
  label$24 : {
   $12_1 = $3_1 + 528 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $4_1 | 0;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  return $262($0_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $127($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $13_1 = 0.0, $12_1 = 0, $11_1 = 0, $26_1 = 0, $29_1 = 0, $9_1 = 0, $210_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $29_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = 0;
  HEAP8[$3_1 >> 0] = 0;
  label$3 : {
   label$4 : {
    $1_1 = $0_1 + 600 | 0;
    if (($279($5_1 + 32 | 0 | 0, $1_1 | 0, 200 | 0) | 0 | 0) == (200 | 0)) {
     break label$4
    }
    HEAP8[$3_1 >> 0] = 1;
    break label$3;
   }
   $7_1 = $2_1 + 16 | 0;
   $247($7_1 | 0, $1_1 | 0, 200 | 0) | 0;
   $242($5_1 + 16 | 0 | 0, $1_1 | 0, 200 | 0);
   $1_1 = HEAPU8[$1_1 >> 0] | 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 7;
   HEAP32[($5_1 + 24 | 0) >> 2] = 3;
   HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = 0;
   $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[$4_1 >> 2] = $3_1;
   $8_1 = 1;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         if (($1_1 | 0) > (99 | 0)) {
          break label$10
         }
         label$11 : {
          switch ($1_1 + -83 | 0 | 0) {
          case 1:
          case 2:
           break label$8;
          case 0:
          case 3:
           break label$9;
          default:
           break label$11;
          };
         }
         if (($1_1 | 0) == (44 | 0)) {
          break label$9
         }
         break label$8;
        }
        label$12 : {
         $3_1 = $1_1 + -100 | 0;
         if ($3_1 >>> 0 > 22 >>> 0) {
          break label$12
         }
         if ((1 << $3_1 | 0) & 4195329 | 0) {
          break label$9
         }
        }
        if (($1_1 | 0) != (244 | 0)) {
         break label$8
        }
       }
       label$13 : {
        $8_1 = $243($5_1 + 16 | 0 | 0) | 0;
        if (($8_1 | 0) != (3 | 0)) {
         break label$13
        }
        $245($5_1 + 16 | 0 | 0) | 0;
       }
       $244($5_1 + 16 | 0 | 0) | 0;
       $244($5_1 + 16 | 0 | 0) | 0;
       $245($5_1 + 16 | 0 | 0) | 0;
       $6_1 = 0;
       $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
       if (($1_1 | 0) < (0 | 0)) {
        break label$3
       }
       if (!$1_1) {
        break label$8
       }
       $9_1 = ($8_1 | 0) == (3 | 0) ? 12 : 8;
       $10_1 = 0;
       label$14 : while (1) {
        $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
        if (($1_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$15 : {
         if (!$1_1) {
          break label$15
         }
         $4_1 = $10_1 >>> 0 < 6 >>> 0 ? 16 : 64;
         $3_1 = 8;
         $0_1 = 0;
         $1_1 = 8;
         label$16 : while (1) {
          label$17 : {
           label$18 : {
            if (!$1_1) {
             break label$18
            }
            $6_1 = 0;
            $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
            if (($1_1 | 0) < (0 | 0)) {
             break label$3
            }
            $6_1 = ($1_1 + 1 | 0) >> 1 | 0;
            $1_1 = (($3_1 + ($1_1 & 1 | 0 ? $6_1 : 0 - $6_1 | 0) | 0) + 256 | 0 | 0) % (256 | 0) | 0;
            $6_1 = $1_1;
            if ($1_1) {
             break label$17
            }
           }
           $1_1 = 0;
           $6_1 = $3_1;
          }
          $3_1 = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != ($4_1 | 0)) {
           continue label$16
          }
          break label$16;
         };
        }
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) != ($9_1 | 0)) {
         continue label$14
        }
        break label$14;
       };
      }
      $244($5_1 + 16 | 0 | 0) | 0;
      $6_1 = 0;
      $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
      if (($1_1 | 0) < (0 | 0)) {
       break label$3
      }
      label$19 : {
       switch ($1_1 | 0) {
       case 1:
        break label$19;
       case 0:
        break label$6;
       default:
        break label$5;
       };
      }
      $245($5_1 + 16 | 0 | 0) | 0;
      $244($5_1 + 16 | 0 | 0) | 0;
      $244($5_1 + 16 | 0 | 0) | 0;
      $6_1 = 0;
      $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
      if (($3_1 | 0) < (0 | 0)) {
       break label$3
      }
      if (!$3_1) {
       break label$5
      }
      $1_1 = 0;
      label$20 : while (1) {
       if ($244($5_1 + 16 | 0 | 0) | 0) {
        break label$7
       }
       $1_1 = $1_1 + 1 | 0;
       if (($1_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
       continue label$20;
      };
     }
     $6_1 = 0;
     break label$3;
    }
    $244($5_1 + 16 | 0 | 0) | 0;
   }
   $244($5_1 + 16 | 0 | 0) | 0;
   $245($5_1 + 16 | 0 | 0) | 0;
   $6_1 = 0;
   $1_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP16[($2_1 + 8 | 0) >> 1] = ($1_1 << 4 | 0) + 16 | 0;
   $6_1 = 0;
   $3_1 = $243($5_1 + 16 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = 0;
   $130($7_1 | 0, ($1_1 | 0) != (0 | 0) | 0);
   $210_1 = ($3_1 << 4 | 0) + 16 | 0;
   $3_1 = 2 - $1_1 | 0;
   HEAP16[($2_1 + 10 | 0) >> 1] = Math_imul($210_1, $3_1);
   label$21 : {
    if ($1_1) {
     break label$21
    }
    $245($5_1 + 16 | 0 | 0) | 0;
   }
   $245($5_1 + 16 | 0 | 0) | 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   label$22 : {
    if (!$1_1) {
     break label$22
    }
    $1_1 = -2;
    label$23 : {
     label$24 : {
      switch ($8_1 + -1 | 0 | 0) {
      case 0:
       $3_1 = $3_1 << 1 | 0;
       break label$23;
      case 1:
       break label$23;
      default:
       break label$24;
      };
     }
     $1_1 = -1;
    }
    $6_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $0_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $4_1 = $243($5_1 + 16 | 0 | 0) | 0;
    $10_1 = $243($5_1 + 16 | 0 | 0) | 0;
    HEAP16[($2_1 + 8 | 0) >> 1] = (HEAPU16[($2_1 + 8 | 0) >> 1] | 0) + Math_imul($0_1 + $6_1 | 0, $1_1) | 0;
    HEAP16[($2_1 + 10 | 0) >> 1] = (HEAPU16[($2_1 + 10 | 0) >> 1] | 0) - Math_imul($10_1 + $4_1 | 0, $3_1) | 0;
   }
   $6_1 = 0;
   $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$3
   }
   label$26 : {
    if (!$1_1) {
     break label$26
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$27 : {
     if (!$1_1) {
      break label$27
     }
     if (($246($5_1 + 16 | 0 | 0, 8 | 0) | 0 | 0) != (255 | 0)) {
      break label$27
     }
     $246($5_1 + 16 | 0 | 0, 16 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 16 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$28 : {
     if (!$1_1) {
      break label$28
     }
     $245($5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$29 : {
     if (!$1_1) {
      break label$29
     }
     $246($5_1 + 16 | 0 | 0, 3 | 0) | 0;
     $245($5_1 + 16 | 0 | 0) | 0;
     $6_1 = 0;
     $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
     if (($1_1 | 0) < (0 | 0)) {
      break label$3
     }
     if (!$1_1) {
      break label$29
     }
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
     $246($5_1 + 16 | 0 | 0, 8 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    label$30 : {
     if (!$1_1) {
      break label$30
     }
     $243($5_1 + 16 | 0 | 0) | 0;
     $243($5_1 + 16 | 0 | 0) | 0;
    }
    $6_1 = 0;
    $1_1 = $245($5_1 + 16 | 0 | 0) | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break label$3
    }
    if (!$1_1) {
     break label$26
    }
    $1_1 = $246($5_1 + 16 | 0 | 0, 32 | 0) | 0;
    $3_1 = $246($5_1 + 16 | 0 | 0, 32 | 0) | 0;
    if (!$1_1) {
     break label$26
    }
    $13_1 = +($1_1 >>> 0);
    HEAPF32[($2_1 + 300 | 0) >> 2] = Math_fround(+Math_fround($3_1 >>> 0) / ($13_1 + $13_1));
   }
   $6_1 = 1;
   if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $1_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = HEAPU16[($2_1 + 10 | 0) >> 1] | 0;
   HEAP32[$5_1 >> 2] = $1_1;
   $827(9495 | 0, $5_1 | 0);
  }
  label$31 : {
   $12_1 = $5_1 + 48 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $6_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($0_1 + 292 | 0) >> 2] = HEAP32[($0_1 + 596 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 292 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 856 | 0, $0_1 | 0, 9104 | 0, 9224 | 0, 543 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 596 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = ($6_1 | 0) == (27 | 0) ? 9647 : 9637;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(9568 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$7
    }
    if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $248($0_1 + 308 | 0 | 0, $2_1 + 48 | 0 | 0, 64 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61752 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61752 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[$2_1 >> 2] = $2_1 + 48 | 0;
     $827(9648 | 0, $2_1 | 0);
    }
    HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0 ? 90 : 50;
    $0_1 = $128($0_1 | 0) | 0;
    break label$6;
   }
   label$9 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 596 | 0) >> 2] | 0 | 0) == (27 | 0)) {
     break label$9
    }
    HEAP32[$1_1 >> 2] = 50;
    $0_1 = $128($0_1 | 0) | 0;
    break label$6;
   }
   $0_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
  }
  label$10 : {
   $10_1 = $2_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $1_1;
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(332 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 332 | 0, $1_1 | 0, 9680 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $132($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(9780 | 0, 9788 | 0, 69 | 0);
  abort();
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 54 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $219($0_1 + 28 | 0 | 0);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 92 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 332 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $88_1 = 0;
  label$1 : {
   $3_1 = global$0 - 400 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 183 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 384 | 0 | 0, $4_1 | 0);
  $5_1 = $0_1 + 28 | 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      $1_1 = $262($3_1 + 384 | 0 | 0, -1 | 0) | 0;
      $6_1 = $754($3_1 + 384 | 0 | 0) | 0;
      label$9 : {
       label$10 : {
        label$11 : {
         switch ($1_1 + -432 | 0 | 0) {
         case 3:
         case 6:
          HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         case 5:
          HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
          continue label$8;
         case 0:
          $1_1 = $135($3_1 + 384 | 0 | 0, $3_1 + 80 | 0 | 0) | 0;
          if ((HEAP32[($3_1 + 388 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$10
          }
          label$17 : {
           if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$17
           }
           if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$17
           }
           HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 52 | 0) >> 2] = HEAPU16[($3_1 + 88 | 0) >> 1] | 0;
           HEAP32[($3_1 + 56 | 0) >> 2] = HEAPU16[($3_1 + 90 | 0) >> 1] | 0;
           $827(9871 | 0, $3_1 + 48 | 0 | 0);
          }
          label$18 : {
           if ($1_1) {
            break label$18
           }
           HEAP8[$2_1 >> 0] = 1;
           break label$7;
          }
          $1_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + 1 | 0;
          HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
          label$19 : {
           if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           label$20 : {
            if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$20
            }
            i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
            HEAP32[($3_1 + 36 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
            $88_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $3_1;
            HEAP32[($3_1 + 40 | 0) >> 2] = $88_1;
            HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(9912 | 0, $3_1 + 32 | 0 | 0);
           }
           $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
          }
          label$21 : {
           $1_1 = $1_1 & 65535 | 0;
           if (($1_1 | 0) != (1 | 0)) {
            break label$21
           }
           i64toi32_i32$0 = $0_1;
           i64toi32_i32$1 = 0;
           HEAP32[($0_1 + 16 | 0) >> 2] = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
           $973($5_1 | 0, $3_1 + 80 | 0 | 0, 304 | 0) | 0;
           continue label$8;
          }
          label$22 : {
           label$23 : {
            if ((HEAPU16[($3_1 + 88 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 36 | 0) >> 1] | 0 | 0)) {
             break label$23
            }
            if ((HEAPU16[($3_1 + 90 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 38 | 0) >> 1] | 0 | 0)) {
             break label$22
            }
           }
           HEAP16[($0_1 + 8 | 0) >> 1] = 0;
           continue label$8;
          }
          if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 < $1_1 >>> 0) {
           continue label$8
          }
          break label$6;
         case 1:
          if (($764($3_1 + 384 | 0 | 0) | 0 | 0) != (-1 | 0)) {
           continue label$8
          }
          if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
           continue label$8
          }
          if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
           continue label$8
          }
          break label$6;
         case 4:
         case 8:
          HEAP8[$2_1 >> 0] = 1;
          if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$7
          }
          if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$7
          }
          HEAP32[($3_1 + 68 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
          $827(9977 | 0, $3_1 + 64 | 0 | 0);
          break label$7;
         case 2:
         case 7:
          break label$9;
         default:
          break label$11;
         };
        }
        if ($1_1) {
         break label$9
        }
       }
       $1_1 = 0;
       label$24 : {
        if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
        HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
        $827(10037 | 0, $3_1 + 16 | 0 | 0);
       }
       if ($6_1 >>> 0 < 5 >>> 0) {
        break label$5
       }
       $763($3_1 + 384 | 0 | 0, $4_1 | 0);
       $766($3_1 + 384 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
       $745($4_1 | 0, $3_1 + 384 | 0 | 0);
       break label$5;
      }
      label$25 : {
       if (($1_1 + -257 | 0) >>> 0 > 174 >>> 0) {
        break label$25
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
       continue label$8;
      }
      if ($1_1 >>> 0 < 441 >>> 0) {
       continue label$8
      }
      $6_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
      if ($6_1 >>> 0 < 11 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     HEAP8[$2_1 >> 0] = 1;
     if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(9977 | 0, $3_1 | 0);
    }
    $738($4_1 | 0);
    $1_1 = 0;
    break label$5;
   }
   $1_1 = $136($0_1 | 0) | 0;
  }
  label$26 : {
   $8_1 = $3_1 + 400 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $219($1_1 | 0);
  $3_1 = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = ($3_1 >>> 1 | 0) & 16383 | 0;
  $4_1 = $778($0_1 | 0) | 0;
  HEAP16[($1_1 + 10 | 0) >> 1] = $4_1 >>> 19 | 0 | (($3_1 << 13 | 0) & 8192 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if (!(HEAPU16[($1_1 + 8 | 0) >> 1] | 0)) {
    break label$3
   }
   $0_1 = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = Math_imul($0_1 >>> 20 | 0 | (($4_1 << 11 | 0) & 129024 | 0) | 0 | (($0_1 << 11 | 0) & 1073479680 | 0) | 0, 400) >>> 10 | 0;
   if (!($4_1 & 15360 | 0)) {
    break label$3
   }
   $0_1 = ($4_1 >>> 6 | 0) & 15 | 0;
   if (!$0_1) {
    break label$3
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 10080 | 0) >> 2] | 0;
   $823($1_1 + 16 | 0 | 0, $2_1 + 8 | 0 | 0, 4 | 0) | 0;
   $3_1 = 1;
  }
  label$4 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 66;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
   $2_1 = i64toi32_i32$1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = 0;
   $5_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$1 | 0, 400 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = __wasm_i64_udiv($6_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2_1 >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 28 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (9680 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 332 | 0, $0_1 | 0, 9680 | 0, 9788 | 0, 280 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 61768 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61768 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(10161 | 0, $2_1 | 0);
  }
  label$6 : {
   if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
    break label$6
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$6
   }
   if ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 1 | 0) + 2 | 0) >>> 0 < $4_1 >>> 0) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = 60;
   $3_1 = $136($0_1 | 0) | 0;
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 10199 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(10264 | 0, 10272 | 0, 50 | 0);
  abort();
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 72 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $10_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0, $12_1 = 0, $11_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 286 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $822($3_1 + 96 | 0 | 0, 0 | 0, 44 | 0) | 0;
  $5_1 = $3_1 + 64 | 0;
  $6_1 = $3_1 + 68 | 0;
  label$5 : while (1) {
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $7_1 = 0;
   $1_1 = 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : while (1) {
       $8_1 = $7_1;
       label$10 : {
        $9_1 = $764($3_1 + 144 | 0 | 0) | 0;
        if (($9_1 | 0) != (-1 | 0)) {
         break label$10
        }
        $7_1 = $8_1;
        break label$8;
       }
       $7_1 = $8_1 + 1 | 0;
       $10_1 = 2147385345;
       $1_1 = $1_1 << 8 | 0 | $9_1 | 0;
       if (($1_1 | 0) != (2147385345 | 0)) {
        continue label$9
       }
       break label$9;
      };
      $9_1 = 0;
      label$11 : {
       label$12 : {
        label$13 : while (1) {
         label$14 : {
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$14
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$14
          }
          $1_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 84 | 0) >> 2] = $1_1 + -4 | 0;
          $827(10349 | 0, $3_1 + 80 | 0 | 0);
         }
         label$15 : {
          label$16 : {
           if (($10_1 | 0) == (1683496997 | 0)) {
            break label$16
           }
           if (($10_1 | 0) != (2147385345 | 0)) {
            break label$12
           }
           $1_1 = $141($3_1 + 144 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
           break label$15;
          }
          $1_1 = $142($3_1 + 144 | 0 | 0) | 0;
         }
         if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         if (!$1_1) {
          break label$11
         }
         label$17 : {
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$17
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$17
          }
          $10_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[$5_1 >> 2] = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
          HEAP32[$6_1 >> 2] = HEAPU16[($3_1 + 102 | 0) >> 1] | 0;
          HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
          HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
          HEAP32[($3_1 + 56 | 0) >> 2] = $10_1;
          HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
          $827(10386 | 0, $3_1 + 48 | 0 | 0);
         }
         $766($3_1 + 144 | 0 | 0, $1_1 | 0) | 0;
         label$18 : {
          $1_1 = $772($3_1 + 144 | 0 | 0) | 0;
          if ($1_1) {
           break label$18
          }
          if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$18
          }
          label$19 : while (1) {
           label$20 : {
            if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$20
            }
            if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$20
            }
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(10456 | 0, $3_1 + 32 | 0 | 0);
           }
           $1_1 = $772($3_1 + 144 | 0 | 0) | 0;
           if ($1_1) {
            break label$18
           }
           if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
            continue label$19
           }
           break label$19;
          };
         }
         $10_1 = $782($3_1 + 144 | 0 | 0) | 0;
         if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$8
         }
         label$21 : {
          $10_1 = $10_1 | ($1_1 << 24 | 0) | 0;
          if (($10_1 | 0) == (1683496997 | 0)) {
           break label$21
          }
          if (($10_1 | 0) == (2147385345 | 0)) {
           break label$21
          }
          if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          $1_1 = $754($3_1 + 144 | 0 | 0) | 0;
          HEAP32[($3_1 + 28 | 0) >> 2] = 2147385345;
          HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
          HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
          $827(10500 | 0, $3_1 + 16 | 0 | 0);
          break label$11;
         }
         $9_1 = $9_1 + 1 | 0;
         if (($9_1 | 0) != (3 | 0)) {
          continue label$13
         }
         break label$13;
        };
        $738($4_1 | 0);
        $1_1 = $813(328 | 0) | 0;
        if (!$1_1) {
         break label$7
        }
        $218($1_1 | 0);
        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
        $973($1_1 + 20 | 0 | 0, $3_1 + 96 | 0 | 0, 44 | 0) | 0;
        break label$7;
       }
       if ((HEAP32[($3_1 + 148 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
      }
      $7_1 = $8_1 + 5 | 0;
     }
     label$22 : {
      if ((HEAP8[(0 + 61784 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$22
      }
      if (!($828(2 | 0, 61784 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$22
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $7_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(10548 | 0, $3_1 | 0);
     }
     if ($7_1 >>> 0 >= 5 >>> 0) {
      break label$6
     }
     $1_1 = 0;
    }
    label$23 : {
     $12_1 = $3_1 + 160 | 0;
     if ($12_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $12_1;
    }
    return $1_1 | 0;
   }
   $763($3_1 + 144 | 0 | 0, $4_1 | 0);
   $766($3_1 + 144 | 0 | 0, $7_1 + -4 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 144 | 0 | 0);
   continue label$5;
  };
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = $778($0_1 | 0) | 0;
   $4_1 = ($3_1 >>> 4 | 0) & 16383 | 0;
   if ($4_1 >>> 0 < 95 >>> 0) {
    break label$1
   }
   if ($3_1 >>> 0 < -67108864 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = 130;
   $5_1 = $778($0_1 | 0) | 0;
   $6_1 = $5_1 >>> 30 | 0 | (($3_1 << 2 | 0) & 60 | 0) | 0;
   if ($6_1 >>> 0 > 15 >>> 0) {
    break label$1
   }
   $7_1 = HEAPU8[($6_1 + 10592 | 0) >> 0] | 0;
   HEAP8[($1_1 + 4 | 0) >> 0] = $7_1;
   $6_1 = ($5_1 >>> 26 | 0) & 15 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = HEAPU16[(($6_1 << 1 | 0) + 10608 | 0) >> 1] | 0;
   if (!((14798 >>> $6_1 | 0) & 1 | 0)) {
    break label$1
   }
   $3_1 = $3_1 & 33554432 | 0;
   HEAP16[($1_1 + 6 | 0) >> 1] = HEAPU16[((($5_1 >>> 20 | 0) & 62 | 0) + 10640 | 0) >> 1] | 0;
   label$2 : {
    if (((($5_1 >>> 9 | 0) & 3 | 0) + -1 | 0) >>> 0 > 1 >>> 0) {
     break label$2
    }
    HEAP8[($1_1 + 4 | 0) >> 0] = $7_1 + 1 | 0;
   }
   label$3 : {
    label$4 : {
     if ($3_1) {
      break label$4
     }
     $0_1 = ($778($0_1 | 0) | 0) >>> 30 | 0 | (($5_1 << 2 | 0) & 4 | 0) | 0;
     break label$3;
    }
    $0_1 = (($778($0_1 | 0) | 0) >>> 14 | 0) & 7 | 0;
   }
   HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($0_1 + 10704 | 0) >> 0] | 0;
   label$5 : {
    switch ($0_1 + -4 | 0 | 0) {
    case 0:
    case 3:
     break label$1;
    default:
     break label$5;
    };
   }
   $2_1 = $4_1 + -15 | 0;
  }
  return $2_1 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $19_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $783($1_1 + 16 | 0 | 0, $1_1 | 0);
  $792($1_1 + 16 | 0 | 0, 8 | 0);
  $792($1_1 + 16 | 0 | 0, 2 | 0);
  $0_1 = $789($1_1 + 16 | 0 | 0) | 0;
  $790($1_1 + 16 | 0 | 0, ($0_1 ? 12 : 8) | 0) | 0;
  $0_1 = $790($1_1 + 16 | 0 | 0, ($0_1 ? 20 : 16) | 0) | 0;
  $2_1 = $784($1_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($2_1 ? 0 : ($0_1 + 1 | 0) >>> 0 < 4 >>> 0 ? 0 : $0_1 + -3 | 0) | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10199 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10199 | 0, 10272 | 0, 83 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 10720 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(10743 | 0, 10751 | 0, 44 | 0);
  abort();
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 66 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $146($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 77 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $147($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10720 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 10720 | 0, 10751 | 0, 89 | 0);
  }
  $762($3_1 | 0, $1_1 | 0);
  $0_1 = 0;
  label$5 : {
   if (($764($3_1 | 0) | 0 | 0) != (32 | 0)) {
    break label$5
   }
   if ($764($3_1 | 0) | 0) {
    break label$5
   }
   $1_1 = $764($3_1 | 0) | 0;
   label$6 : while (1) {
    label$7 : {
     if (($1_1 | 0) == (15 | 0)) {
      break label$7
     }
     if (($1_1 | 0) != (255 | 0)) {
      break label$5
     }
     label$8 : {
      if ((HEAP8[(0 + 61800 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61800 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $827(10837 | 0, 0 | 0);
     }
     $0_1 = $813(328 | 0) | 0;
     if (!$0_1) {
      break label$5
     }
     $218($0_1 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = 4;
     break label$5;
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    if (($764($3_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$5
    }
    $1_1 = $764($3_1 | 0) | 0;
    if (($1_1 | 0) == (-1 | 0)) {
     break label$5
    }
    $4_1 = $764($3_1 | 0) | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$5
    }
    $1_1 = $4_1 | ($1_1 << 8 | 0) | 0;
    if (($766($3_1 | 0, $1_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
     break label$5
    }
    $1_1 = $764($3_1 | 0) | 0;
    if (($1_1 | 0) != (-1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  label$9 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $0_1 | 0;
 }
 
 function $148($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 87 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
   $827(11039 | 0, $4_1 + 16 | 0 | 0);
  }
  label$6 : {
   if (!$1_1) {
    break label$6
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   label$7 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(11093 | 0, $4_1 | 0);
   }
   label$8 : {
    $6_1 = $4_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(11085 | 0, 10960 | 0, 89 | 0);
  abort();
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 102 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(11139 | 0, $2_1 + 16 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(11184 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(11085 | 0, 10960 | 0, 103 | 0);
  abort();
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(11229 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 172 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 80 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP8[($0_1 + 88 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(11255 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
   $827(11281 | 0, $2_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        $3_1 = $813(112 | 0) | 0;
        if ($3_1) {
         break label$9
        }
        $152(222 | 0);
        break label$8;
       }
       $845($3_1 | 0, 112 | 0, $3_1 | 0, 10944 | 0);
       HEAP32[($3_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($3_1 + 100 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
       $0_1 = $736($0_1 | 0) | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
       if ($0_1) {
        break label$7
       }
       $152(231 | 0);
       $815($3_1 | 0);
      }
      $3_1 = 0;
      if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      $3_1 = 0;
      if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      $3_1 = 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = 0;
      HEAP32[$2_1 >> 2] = $1_1;
      $827(11318 | 0, $2_1 | 0);
      break label$6;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     $150($3_1 | 0);
     if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
     $827(11318 | 0, $2_1 + 16 | 0 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 48 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(11306 | 0, 10960 | 0, 217 | 0);
   abort();
  }
  $859(11310 | 0, 10960 | 0, 218 | 0);
  abort();
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  $862(10960 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(11306 | 0, 10960 | 0, 265 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 69;
  HEAP32[($0_1 + 4 | 0) >> 2] = 70;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $154($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $735($1_1 | 0);
  return 1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
   $827(11346 | 0, $1_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 278 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   label$7 : while (1) {
    label$8 : {
     if (!($834(61816 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $827(11367 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[(HEAP32[($0_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $150($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 112 | 0, $0_1 | 0, 0 | 0);
  label$9 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$9
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$9
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(11416 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$10 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $157($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $6_1 = 0, $132_1 = 0, $135_1 = 0, $268_1 = 0, $271_1 = 0;
  label$1 : {
   $2_1 = global$0 - 208 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (10944 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 112 | 0, $0_1 | 0, 10944 | 0, 10960 | 0, 309 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 100 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 104 | 0) >> 2] = $4_1 + $3_1 | 0;
   $827(11437 | 0, $2_1 + 96 | 0 | 0);
  }
  HEAP8[($0_1 + 89 | 0) >> 0] = 0;
  $5_1 = $0_1 + 56 | 0;
  $6_1 = $0_1 + 32 | 0;
  $3_1 = 0;
  $7_1 = 0;
  label$6 : while (1) {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       if ($3_1 & 255 | 0) {
        break label$10
       }
       $3_1 = $798($1_1 | 0) | 0;
       if (!$3_1) {
        break label$9
       }
       $4_1 = $756($3_1 | 0) | 0;
       $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $7_1 = $4_1 + $7_1 | 0;
      }
      HEAP8[($0_1 + 89 | 0) >> 0] = 0;
      label$11 : while (1) {
       $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
       $763($2_1 + 192 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
       label$12 : {
        label$13 : {
         switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
         case 0:
          if (($776($2_1 + 192 | 0 | 0) | 0 | 0) != (1130450022 | 0)) {
           break label$12
          }
          $158($0_1 | 0, $2_1 + 192 | 0 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 1;
          continue label$11;
         case 1:
          label$17 : {
           if ($167($2_1 + 192 | 0 | 0, $6_1 | 0) | 0) {
            break label$17
           }
           if ((HEAP32[($2_1 + 196 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$7
           }
           break label$12;
          }
          label$18 : {
           $3_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
           if (($3_1 | 0) != (127 | 0)) {
            break label$18
           }
           label$19 : {
            if (!($834(61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$19
            }
            HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            $827(11465 | 0, $2_1 + 32 | 0 | 0);
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = 3;
           continue label$11;
          }
          $4_1 = $159($0_1 | 0, $3_1 | 0) | 0;
          label$20 : {
           label$21 : {
            if (!$3_1) {
             break label$21
            }
            if (!$4_1) {
             break label$20
            }
           }
           label$22 : {
            if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$22
            }
            if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$22
            }
            $3_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            HEAP32[($2_1 + 68 | 0) >> 2] = $3_1;
            HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
            $827(11523 | 0, $2_1 + 64 | 0 | 0);
           }
           i64toi32_i32$2 = ($2_1 + 192 | 0) + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $132_1 = i64toi32_i32$0;
           i64toi32_i32$0 = ($2_1 + 176 | 0) + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $132_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $2_1;
           i64toi32_i32$1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
           $135_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[($2_1 + 176 | 0) >> 2] = $135_1;
           HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$0;
           if (($766($2_1 + 192 | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0)) {
            continue label$11
           }
           $3_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $2_1 + 192 | 0 | 0, 0 | 0, 0 | 0) | 0;
           label$23 : {
            if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$23
            }
            if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$23
            }
            $8_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
            HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            HEAP32[($2_1 + 52 | 0) >> 2] = $8_1;
            HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
            $827(11565 | 0, $2_1 + 48 | 0 | 0);
           }
           $158($0_1 | 0, $2_1 + 192 | 0 | 0);
           if (!$3_1) {
            continue label$11
           }
           label$24 : {
            if (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) {
             break label$24
            }
            $762($2_1 + 160 | 0 | 0, $3_1 | 0);
            HEAP8[($0_1 + 88 | 0) >> 0] = $168($2_1 + 160 | 0 | 0, $5_1 | 0) | 0;
           }
           if (!$4_1) {
            continue label$11
           }
           $3_1 = (FUNCTION_TABLE[HEAP32[($4_1 + 8 | 0) >> 2] | 0]($4_1, $3_1) | 0 | 0) == (1 | 0);
           HEAP8[($0_1 + 89 | 0) >> 0] = $3_1;
           if (!$3_1) {
            continue label$11
           }
           break label$9;
          }
          HEAP32[($0_1 + 16 | 0) >> 2] = 2;
          HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 4 | 0;
          continue label$11;
         case 2:
          label$25 : {
           if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$25
           }
           if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$25
           }
           $4_1 = HEAPU8[($0_1 + 33 | 0) >> 0] | 0;
           $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           HEAP32[($2_1 + 92 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
           HEAP32[($2_1 + 88 | 0) >> 2] = $8_1;
           HEAP32[($2_1 + 84 | 0) >> 2] = $4_1;
           HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
           $827(11606 | 0, $2_1 + 80 | 0 | 0);
          }
          $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          $3_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $4_1 : $3_1;
          $766($2_1 + 192 | 0 | 0, $3_1 | 0) | 0;
          $158($0_1 | 0, $2_1 + 192 | 0 | 0);
          $3_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $3_1 | 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
          if ($3_1) {
           break label$7
          }
          HEAP32[($0_1 + 16 | 0) >> 2] = HEAPU8[($0_1 + 32 | 0) >> 0] | 0 ? 3 : 1;
          continue label$11;
         case 3:
          break label$13;
         default:
          break label$8;
         };
        }
        label$26 : {
         $4_1 = $171($2_1 + 192 | 0 | 0, $2_1 + 144 | 0 | 0, $5_1 | 0) | 0;
         if (($4_1 | 0) < (0 | 0)) {
          break label$26
         }
         label$27 : while (1) {
          HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
          HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 200 | 0) >> 1] | 0;
          label$28 : {
           if (!($169($2_1 + 192 | 0 | 0, 0 | 0, $4_1 | 0) | 0)) {
            break label$28
           }
           label$29 : while (1) {
            i64toi32_i32$2 = ($2_1 + 192 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $268_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($2_1 + 176 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $268_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
            $271_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $2_1;
            HEAP32[($2_1 + 176 | 0) >> 2] = $271_1;
            HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$0;
            label$30 : {
             $3_1 = $171($2_1 + 176 | 0 | 0, $2_1 + 120 | 0 | 0, $5_1 | 0) | 0;
             if (($3_1 | 0) < (1 | 0)) {
              break label$30
             }
             $763($2_1 + 160 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
             $3_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 160 | 0 | 0, $2_1 + 192 | 0 | 0, 0 | 0, 0 | 0) | 0;
             $158($0_1 | 0, $2_1 + 192 | 0 | 0);
             if (!$3_1) {
              break label$28
             }
             label$31 : {
              if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$31
              }
              if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$31
              }
              HEAP32[($2_1 + 4 | 0) >> 2] = $756($3_1 | 0) | 0;
              HEAP32[$2_1 >> 2] = $3_1;
              $827(11653 | 0, $2_1 | 0);
             }
             $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 104 | 0) >> 2] | 0](HEAP32[($0_1 + 96 | 0) >> 2] | 0, $3_1, $2_1 + 144 | 0) | 0;
             HEAP8[($0_1 + 89 | 0) >> 0] = ($3_1 | 0) == (1 | 0);
             if (($3_1 | 0) != (1 | 0)) {
              break label$28
             }
             $859(11675 | 0, 10960 | 0, 443 | 0);
             abort();
            }
            if (($3_1 | 0) == (-1 | 0)) {
             break label$28
            }
            $3_1 = $754($2_1 + 192 | 0 | 0) | 0;
            label$32 : {
             label$33 : {
              $8_1 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
              if (($8_1 | 0) < (0 | 0)) {
               break label$33
              }
              if ((HEAP32[($2_1 + 140 | 0) >> 2] | 0 | 0) != (HEAPU16[($2_1 + 200 | 0) >> 1] | 0 | 0)) {
               break label$33
              }
              $9_1 = HEAP32[($2_1 + 136 | 0) >> 2] | 0;
              HEAP32[($2_1 + 196 | 0) >> 2] = $9_1;
              HEAP32[($2_1 + 192 | 0) >> 2] = (HEAP32[($2_1 + 192 | 0) >> 2] | 0) + ($8_1 - $9_1 | 0) | 0;
              break label$32;
             }
             $769($2_1 + 192 | 0 | 0, $2_1 + 136 | 0 | 0);
            }
            label$34 : {
             if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$34
             }
             if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$34
             }
             HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
             $827(11702 | 0, $2_1 + 16 | 0 | 0);
            }
            HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
            HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 200 | 0) >> 1] | 0;
            if ($169($2_1 + 192 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0) {
             continue label$29
            }
            break label$29;
           };
          }
          $4_1 = $171($2_1 + 192 | 0 | 0, $2_1 + 144 | 0 | 0, $5_1 | 0) | 0;
          if (($4_1 | 0) >= (0 | 0)) {
           continue label$27
          }
          break label$27;
         };
        }
        if (($4_1 | 0) == (-1 | 0)) {
         break label$7
        }
       }
       $160($0_1 | 0);
       continue label$11;
      };
     }
     label$35 : {
      $11_1 = $2_1 + 208 | 0;
      if ($11_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $11_1;
     }
     return $7_1 | 0;
    }
    $766($2_1 + 192 | 0 | 0, $3_1 | 0) | 0;
    $158($0_1 | 0, $2_1 + 192 | 0 | 0);
   }
   $3_1 = HEAPU8[($0_1 + 89 | 0) >> 0] | 0;
   continue label$6;
  };
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $34_1 = 0, $36$hi = 0, $38$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $754($1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(11756 | 0, $2_1 + 16 | 0 | 0);
  }
  $3_1 = $754($1_1 | 0) | 0;
  $4_1 = $0_1 + 24 | 0;
  $34_1 = $4_1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $38$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $36$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $38$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $34_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  label$4 : {
   if ((HEAP8[(0 + 61816 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 61816 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(11779 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  $763($1_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $766($1_1 | 0, 1 | 0) | 0;
  $158($0_1 | 0, $1_1 | 0);
  label$3 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (1130450022 | 0)) {
    break label$3
   }
   if (!($167($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   $2_1 = !(HEAPU8[($1_1 + 9 | 0) >> 0] | 0);
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(72 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61832 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 72;
    $827(11856 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 72 | 0, $2_1 | 0, 11798 | 0);
   $153($1_1 + 16 | 0 | 0);
   $3_1 = $151($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
   label$5 : {
    if ($3_1) {
     break label$5
    }
    $163(83 | 0);
    $815($2_1 | 0);
    $2_1 = 0;
    break label$3;
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $2_1;
   $148($3_1 | 0, $2_1 + 12 | 0 | 0, 0 | 0, 71 | 0);
  }
  label$6 : {
   $5_1 = $1_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  $862(11901 | 0, $0_1 | 0, 3 | 0) | 0;
 }
 
 function $164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$5 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(12006 | 0, $2_1 | 0);
    }
    label$6 : {
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
       break label$6
      }
     }
     $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 61 | 0);
    }
    $762($2_1 + 16 | 0 | 0, $1_1 | 0);
    HEAP8[($0_1 + 64 | 0) >> 0] = $168($2_1 + 16 | 0 | 0, $0_1 + 32 | 0 | 0) | 0;
    $735($1_1 | 0);
    label$8 : {
     $4_1 = $2_1 + 32 | 0;
     if ($4_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $4_1;
    }
    return 1 | 0;
   }
   $859(11991 | 0, 11901 | 0, 57 | 0);
   abort();
  }
  $859(11999 | 0, 11901 | 0, 58 | 0);
  abort();
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 100 | 0);
  }
  $149(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $0_1 + 12 | 0 | 0);
  $156(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 72 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $166($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $8_1 = 0, $7_1 = 0, $37_1 = 0, $43_1 = 0, $45$hi = 0, $67_1 = 0, $82$hi = 0, $25_1 = 0, $124$hi = 0, $126$hi = 0, $26_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (11798 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 | 0, 11798 | 0, 11901 | 0, 116 | 0);
  }
  HEAP8[($0_1 + 64 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  $9_1 = 0;
  $9$hi = i64toi32_i32$0;
  label$5 : {
   label$6 : while (1) {
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 16384;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$5
    }
    label$7 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 24 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $37_1 = $4_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($37_1 + 20 | 0) >> 2] = i64toi32_i32$4;
     $827(12033 | 0, $4_1 + 16 | 0 | 0);
    }
    $43_1 = $1_1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $45$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $45$hi;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = $50($43_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 28 | 0 | 0) | 0;
    if (!$5_1) {
     break label$5
    }
    $6_1 = $756($5_1 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61832 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61832 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $67_1 = $4_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     HEAP32[($67_1 + 4 | 0) >> 2] = i64toi32_i32$5;
     $827(12070 | 0, $4_1 | 0);
    }
    $797($2_1 | 0, $5_1 | 0);
    $5_1 = $157(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
    if (HEAPU8[($0_1 + 64 | 0) >> 0] | 0) {
     break label$5
    }
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = 0;
    $82$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$3 = $82$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = i64toi32_i32$0 + $6_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < $6_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    if (($5_1 | 0) == ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  $150(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $5_1 = 0;
  label$9 : {
   if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
    break label$9
   }
   label$10 : {
    $5_1 = $813(40 | 0) | 0;
    if ($5_1) {
     break label$10
    }
    $163(147 | 0);
    $5_1 = 0;
    break label$9;
   }
   $214($5_1 | 0, 18 | 0);
   label$11 : {
    $6_1 = $813(328 | 0) | 0;
    if ($6_1) {
     break label$11
    }
    $163(150 | 0);
    $815($5_1 | 0);
    $5_1 = 0;
    break label$9;
   }
   $218($6_1 | 0);
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = 1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$5;
   HEAP8[(i64toi32_i32$0 + 24 | 0) >> 0] = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
   HEAP8[(i64toi32_i32$0 + 25 | 0) >> 0] = HEAPU8[($0_1 + 49 | 0) >> 0] | 0;
   $2_1 = $0_1 + 44 | 0;
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 147;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = 18;
   label$12 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$2_1) {
     break label$12
    }
    i64toi32_i32$2 = $0_1 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, 1e3 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $124$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $126$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $124$hi;
    $26_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $126$hi;
    i64toi32_i32$5 = __wasm_i64_udiv($26_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$5;
    $3_1 = HEAPU16[($0_1 + 32 | 0) >> 1] | 0;
    $1_1 = HEAPU16[($0_1 + 34 | 0) >> 1] | 0;
    if (!($3_1 | $1_1 | 0)) {
     break label$12
    }
    HEAP16[($6_1 + 26 | 0) >> 1] = ((Math_imul($2_1, (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + (HEAP32[($0_1 + 40 | 0) >> 2] | 0) | 0) << 3 | 0) >>> 0) / (($1_1 + $3_1 | 0) >>> 0) | 0;
   }
   $215($5_1 | 0, $6_1 | 0);
  }
  label$13 : {
   $8_1 = $4_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $764($0_1 | 0) | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $3_1 & 127 | 0;
  HEAP8[$1_1 >> 0] = ($3_1 & 128 | 0) >>> 7 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAPU8[$1_1 >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$2_1 >> 2] = $0_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $4_1 ? 12147 : 12152;
   $827(12110 | 0, $2_1 | 0);
  }
  label$4 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $9_1 = 0, $8_1 = 0, $45_1 = 0, $49$hi = 0, $52$hi = 0, $53_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $782($0_1 | 0) | 0;
  $3_1 = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $3_1 >>> 12 | 0;
  HEAP8[($1_1 + 17 | 0) >> 0] = (($3_1 >>> 4 | 0) & 31 | 0) + 1 | 0;
  HEAP8[($1_1 + 16 | 0) >> 0] = (($3_1 >>> 9 | 0) & 7 | 0) + 1 | 0;
  $45_1 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 & 15 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $49$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $52$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$0 = $21_1;
  i64toi32_i32$2 = $52$hi;
  i64toi32_i32$3 = $778($0_1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $53_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $45_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $53_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$2;
  $3_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$0;
    $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $4_1 = HEAPU16[$1_1 >> 1] | 0;
    $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $6_1 = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 17 | 0) >> 0] | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = $2_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $10_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(12153 | 0, $2_1 | 0);
   }
   $3_1 = 1;
  }
  label$5 : {
   $9_1 = $2_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $3_1 | 0;
 }
 
 function $169($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $11_1 = 0, $89_1 = 0, $92_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $4_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  $7_1 = 0;
  $8_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($9_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $9_1 + -1 | 0;
       $9_1 = HEAP32[$0_1 >> 2] | 0;
       HEAP32[$0_1 >> 2] = $9_1 + 1 | 0;
       $6_1 = $6_1 + 1 | 0;
       $9_1 = HEAPU8[$9_1 >> 0] | 0;
       break label$6;
      }
      $6_1 = $6_1 + 1 | 0;
      $9_1 = $764($0_1 | 0) | 0;
      if (($9_1 | 0) == (-1 | 0)) {
       break label$4
      }
     }
     $8_1 = $8_1 + 1 | 0;
     label$8 : {
      label$9 : {
       label$10 : {
        if (($7_1 | 0) == (1 | 0)) {
         break label$10
        }
        $10_1 = 0;
        label$11 : {
         switch ($7_1 | 0) {
         case 0:
          break label$11;
         case 2:
          break label$9;
         default:
          break label$8;
         };
        }
        $7_1 = ($6_1 | 0) == ($2_1 | 0);
        $6_1 = $7_1 ? 0 : $6_1;
        $10_1 = $9_1;
        break label$8;
       }
       $7_1 = ($6_1 | 0) == (2 | 0) ? 2 : 1;
       $5_1 = $9_1 | (($5_1 & 65535 | 0) << 8 | 0) | 0;
       continue label$5;
      }
      $7_1 = $5_1 & 65535 | 0;
      $10_1 = $7_1 >>> 8 | 0;
      $5_1 = $9_1 | ($7_1 << 8 | 0) | 0;
      $7_1 = 2;
     }
     $4_1 = $170($4_1 & 65535 | 0 | 0, $10_1 & 255 | 0 | 0) | 0;
     if ($8_1 >>> 0 <= $1_1 >>> 0) {
      continue label$5
     }
     if (($7_1 | 0) != (2 | 0)) {
      continue label$5
     }
     $7_1 = 2;
     if (($4_1 | 0) != ($5_1 & 65535 | 0 | 0)) {
      continue label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3_1 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $92_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $92_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $9_1 = $777($3_1 + 32 | 0 | 0) | 0;
     label$12 : {
      if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$12
      }
      label$13 : {
       if (($9_1 & 65532 | 0 | 0) != (65528 | 0)) {
        break label$13
       }
       label$14 : {
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$14
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$14
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = $5_1 & 65535 | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $6_1;
        $827(12258 | 0, $3_1 + 16 | 0 | 0);
       }
       $0_1 = 1;
       break label$3;
      }
      $4_1 = $5_1;
      continue label$5;
     }
     break label$5;
    };
    $7_1 = 2;
   }
   $0_1 = 0;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   $0_1 = 0;
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$3_1 >> 2] = $7_1;
   $827(12309 | 0, $3_1 | 0);
  }
  label$15 : {
   $12_1 = $3_1 + 48 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $0_1 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[(((($0_1 >>> 8 | 0) ^ $1_1 | 0) << 1 | 0) + 12720 | 0) >> 1] | 0) ^ (($0_1 << 8 | 0) & 65280 | 0) | 0 | 0;
 }
 
 function $171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $23_1 = 0, $26_1 = 0, $5_1 = 0, $7_1 = 0, $266_1 = 0, $269_1 = 0;
  label$1 : {
   $3_1 = global$0 - 288 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 256 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 256 | 0) >> 2] = $26_1;
  HEAP32[($3_1 + 260 | 0) >> 2] = i64toi32_i32$0;
  $783($3_1 + 272 | 0 | 0, $3_1 + 256 | 0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = $790($3_1 + 272 | 0 | 0, 14 | 0) | 0;
     if (($4_1 | 0) == (16382 | 0)) {
      break label$5
     }
     $0_1 = -2;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 292;
     HEAP32[($3_1 + 232 | 0) >> 2] = 16382;
     HEAP32[($3_1 + 236 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($3_1 + 228 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 224 | 0) >> 2] = 12377;
     $827(12339 | 0, $3_1 + 224 | 0 | 0);
     break label$4;
    }
    label$6 : {
     if (!($789($3_1 + 272 | 0 | 0) | 0)) {
      break label$6
     }
     $0_1 = -2;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 220 | 0) >> 2] = 296;
     HEAP32[($3_1 + 216 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 212 | 0) >> 2] = 12377;
     HEAP32[($3_1 + 208 | 0) >> 2] = 12377;
     $827(12382 | 0, $3_1 + 208 | 0 | 0);
     break label$4;
    }
    HEAP8[$1_1 >> 0] = ($789($3_1 + 272 | 0 | 0) | 0 | 0) != (0 | 0);
    $4_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $5_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $6_1 = $790($3_1 + 272 | 0 | 0, 4 | 0) | 0;
    $7_1 = $790($3_1 + 272 | 0 | 0, 3 | 0) | 0;
    label$7 : {
     if (!($789($3_1 + 272 | 0 | 0) | 0)) {
      break label$7
     }
     $0_1 = -4;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 204 | 0) >> 2] = 305;
     HEAP32[($3_1 + 200 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 196 | 0) >> 2] = 12414;
     HEAP32[($3_1 + 192 | 0) >> 2] = 12377;
     $827(12382 | 0, $3_1 + 192 | 0 | 0);
     break label$4;
    }
    label$8 : {
     if (!($784($3_1 + 272 | 0 | 0) | 0)) {
      break label$8
     }
     $0_1 = -1;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 307;
     HEAP32[($3_1 + 8 | 0) >> 2] = 12152;
     HEAP32[($3_1 + 4 | 0) >> 2] = 12427;
     HEAP32[$3_1 >> 2] = 12423;
     $827(12382 | 0, $3_1 | 0);
     break label$3;
    }
    label$9 : {
     label$10 : {
      label$11 : {
       if (!(HEAPU8[$1_1 >> 0] | 0)) {
        break label$11
       }
       if ($172($3_1 + 272 | 0 | 0, 56 | 0, $3_1 + 248 | 0 | 0) | 0) {
        break label$10
       }
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($3_1 + 188 | 0) >> 2] = 312;
       HEAP32[($3_1 + 184 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 180 | 0) >> 2] = 12445;
       HEAP32[($3_1 + 176 | 0) >> 2] = 12439;
       $827(12382 | 0, $3_1 + 176 | 0 | 0);
       break label$9;
      }
      if ($172($3_1 + 272 | 0 | 0, 48 | 0, $3_1 + 248 | 0 | 0) | 0) {
       break label$10
      }
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      HEAP32[($3_1 + 172 | 0) >> 2] = 317;
      HEAP32[($3_1 + 168 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 164 | 0) >> 2] = 12459;
      HEAP32[($3_1 + 160 | 0) >> 2] = 12439;
      $827(12382 | 0, $3_1 + 160 | 0 | 0);
      break label$9;
     }
     $8_1 = 192;
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         switch ($4_1 | 0) {
         case 0:
          $0_1 = -4;
          if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$4
          }
          if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 156 | 0) >> 2] = 321;
          HEAP32[($3_1 + 152 | 0) >> 2] = 12152;
          HEAP32[($3_1 + 148 | 0) >> 2] = 0;
          HEAP32[($3_1 + 144 | 0) >> 2] = 12439;
          $827(12472 | 0, $3_1 + 144 | 0 | 0);
          break label$4;
         case 1:
          break label$14;
         default:
          break label$15;
         };
        }
        label$17 : {
         if ($4_1 >>> 0 > 5 >>> 0) {
          break label$17
         }
         $8_1 = 576 << ($4_1 + -2 | 0) | 0;
         break label$14;
        }
        label$18 : {
         switch ($4_1 + -6 | 0 | 0) {
         case 0:
          $8_1 = ($790($3_1 + 272 | 0 | 0, 8 | 0) | 0) + 1 | 0;
          break label$14;
         case 1:
          $8_1 = ($790($3_1 + 272 | 0 | 0, 16 | 0) | 0) + 1 | 0;
          break label$14;
         default:
          break label$18;
         };
        }
        if ($4_1 >>> 0 >= 16 >>> 0) {
         break label$13
        }
        $8_1 = 256 << ($4_1 + -8 | 0) | 0;
       }
       HEAP16[($1_1 + 4 | 0) >> 1] = $8_1;
       $4_1 = 882e3;
       label$21 : {
        label$22 : {
         switch ($5_1 | 0) {
         case 2:
          $4_1 = 176400;
          break label$21;
         case 3:
          $4_1 = 192e3;
          break label$21;
         case 4:
          $4_1 = 8e3;
          break label$21;
         case 5:
          $4_1 = 16e3;
          break label$21;
         case 6:
          $4_1 = 22050;
          break label$21;
         case 7:
          $4_1 = 24e3;
          break label$21;
         case 8:
          $4_1 = 32e3;
          break label$21;
         case 9:
          $4_1 = 44100;
          break label$21;
         case 10:
          $4_1 = 48e3;
          break label$21;
         case 11:
          $4_1 = 96e3;
          break label$21;
         case 12:
          $4_1 = Math_imul($790($3_1 + 272 | 0 | 0, 8 | 0) | 0, 1e3);
          break label$21;
         case 13:
          $4_1 = $790($3_1 + 272 | 0 | 0, 16 | 0) | 0;
          break label$21;
         case 14:
          $4_1 = Math_imul($790($3_1 + 272 | 0 | 0, 16 | 0) | 0, 10);
          break label$21;
         default:
          $0_1 = -4;
          if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$4
          }
          if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 44 | 0) >> 2] = 367;
          HEAP32[($3_1 + 40 | 0) >> 2] = 12152;
          HEAP32[($3_1 + 36 | 0) >> 2] = 12414;
          HEAP32[($3_1 + 32 | 0) >> 2] = 12377;
          $827(12382 | 0, $3_1 + 32 | 0 | 0);
          break label$4;
         case 1:
          break label$21;
         case 0:
          break label$22;
         };
        }
        $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
       label$37 : {
        if ($6_1 >>> 0 > 7 >>> 0) {
         break label$37
        }
        $4_1 = $6_1 + 1 | 0;
        break label$12;
       }
       $4_1 = 2;
       if ($6_1 >>> 0 < 11 >>> 0) {
        break label$12
       }
       $0_1 = -4;
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$4
       }
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 140 | 0) >> 2] = 376;
       HEAP32[($3_1 + 136 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 132 | 0) >> 2] = 12414;
       HEAP32[($3_1 + 128 | 0) >> 2] = 12377;
       $827(12382 | 0, $3_1 + 128 | 0 | 0);
       break label$4;
      }
      $859(12523 | 0, 12541 | 0, 331 | 0);
      abort();
     }
     HEAP8[($1_1 + 1 | 0) >> 0] = $4_1;
     $4_1 = 8;
     label$38 : {
      label$39 : {
       switch ($7_1 | 0) {
       case 2:
        $4_1 = 12;
        break label$38;
       case 3:
        $0_1 = -4;
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$4
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 124 | 0) >> 2] = 386;
        HEAP32[($3_1 + 120 | 0) >> 2] = 12152;
        HEAP32[($3_1 + 116 | 0) >> 2] = 12414;
        HEAP32[($3_1 + 112 | 0) >> 2] = 12377;
        $827(12382 | 0, $3_1 + 112 | 0 | 0);
        break label$4;
       case 4:
        $4_1 = 16;
        break label$38;
       case 5:
        $4_1 = 20;
        break label$38;
       case 6:
        $4_1 = 24;
        break label$38;
       default:
        $0_1 = -4;
        if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$4
        }
        if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 60 | 0) >> 2] = 395;
        HEAP32[($3_1 + 56 | 0) >> 2] = 12152;
        HEAP32[($3_1 + 52 | 0) >> 2] = 12414;
        HEAP32[($3_1 + 48 | 0) >> 2] = 12377;
        $827(12382 | 0, $3_1 + 48 | 0 | 0);
        break label$4;
       case 1:
        break label$38;
       case 0:
        break label$39;
       };
      }
      $4_1 = HEAPU8[($2_1 + 17 | 0) >> 0] | 0;
     }
     HEAP8[($1_1 + 2 | 0) >> 0] = $4_1;
     $2_1 = $785($3_1 + 272 | 0 | 0) | 0;
     $6_1 = $754($0_1 | 0) | 0;
     $4_1 = $790($3_1 + 272 | 0 | 0, 8 | 0) | 0;
     label$46 : {
      if (!($784($3_1 + 272 | 0 | 0) | 0)) {
       break label$46
      }
      $0_1 = -1;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 76 | 0) >> 2] = 400;
      HEAP32[($3_1 + 72 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 68 | 0) >> 2] = 12427;
      HEAP32[($3_1 + 64 | 0) >> 2] = 12423;
      $827(12382 | 0, $3_1 + 64 | 0 | 0);
      break label$3;
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $266_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3_1 + 256 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $266_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $269_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 256 | 0) >> 2] = $269_1;
     HEAP32[($3_1 + 260 | 0) >> 2] = i64toi32_i32$0;
     label$47 : {
      $0_1 = $2_1 - $6_1 | 0;
      $2_1 = $173($3_1 + 256 | 0 | 0, $0_1 | 0) | 0;
      if (($4_1 | 0) == ($2_1 | 0)) {
       break label$47
      }
      $0_1 = -3;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$4
      }
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$4
      }
      HEAP32[($3_1 + 108 | 0) >> 2] = 406;
      HEAP32[($3_1 + 104 | 0) >> 2] = $2_1;
      HEAP32[($3_1 + 100 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 96 | 0) >> 2] = 12439;
      $827(12618 | 0, $3_1 + 96 | 0 | 0);
      break label$4;
     }
     $0_1 = $0_1 + 1 | 0;
     if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 84 | 0) >> 2] = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
     HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
     $827(12666 | 0, $3_1 + 80 | 0 | 0);
     break label$3;
    }
    $0_1 = -4;
   }
   if (!($784($3_1 + 272 | 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = -1;
   if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = 415;
   HEAP32[($3_1 + 24 | 0) >> 2] = 12152;
   HEAP32[($3_1 + 20 | 0) >> 2] = 12427;
   HEAP32[($3_1 + 16 | 0) >> 2] = 12423;
   $827(12382 | 0, $3_1 + 16 | 0 | 0);
  }
  label$48 : {
   $10_1 = $3_1 + 288 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, $17_1 = 0, $7_1 = 0, $6_1 = 0, $97$hi = 0, $99$hi = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1 & 7 | 0) {
       break label$6
      }
      $1_1 = $790($0_1 | 0, 8 | 0) | 0;
      label$7 : {
       if (!($784($0_1 | 0) | 0)) {
        break label$7
       }
       $0_1 = 0;
       if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$3
       }
       $0_1 = 0;
       if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$3
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 162;
       HEAP32[($3_1 + 8 | 0) >> 2] = 12152;
       HEAP32[($3_1 + 4 | 0) >> 2] = 12427;
       HEAP32[$3_1 >> 2] = 12423;
       $827(12382 | 0, $3_1 | 0);
       break label$3;
      }
      label$8 : {
       if ($1_1 & 128 | 0) {
        break label$8
       }
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = $2_1;
       HEAP32[i64toi32_i32$1 >> 2] = $1_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       break label$4;
      }
      $4_1 = 31;
      $5_1 = 1;
      if (($1_1 & 224 | 0 | 0) == (192 | 0)) {
       break label$5
      }
      label$9 : {
       if (($1_1 & 240 | 0 | 0) != (224 | 0)) {
        break label$9
       }
       $5_1 = 2;
       $4_1 = 15;
       break label$5;
      }
      label$10 : {
       if (($1_1 & 248 | 0 | 0) != (240 | 0)) {
        break label$10
       }
       $5_1 = 3;
       $4_1 = 7;
       break label$5;
      }
      $4_1 = 3;
      $5_1 = 3;
      if (($1_1 & 252 | 0 | 0) == (248 | 0)) {
       break label$5
      }
      label$11 : {
       if (($1_1 & 254 | 0 | 0) != (252 | 0)) {
        break label$11
       }
       $5_1 = 4;
       $4_1 = 1;
       break label$5;
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 60 | 0) >> 2] = 186;
      HEAP32[($3_1 + 56 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 52 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 48 | 0) >> 2] = 13300;
      $827(13252 | 0, $3_1 + 48 | 0 | 0);
      break label$3;
     }
     $859(13232 | 0, 12541 | 0, 160 | 0);
     abort();
    }
    i64toi32_i32$0 = 0;
    $8_1 = $1_1 & $4_1 | 0;
    $8$hi = i64toi32_i32$0;
    $4_1 = 0;
    label$12 : while (1) {
     $1_1 = $790($0_1 | 0, 8 | 0) | 0;
     label$13 : {
      if (!($784($0_1 | 0) | 0)) {
       break label$13
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 28 | 0) >> 2] = 193;
      HEAP32[($3_1 + 24 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 20 | 0) >> 2] = 12427;
      HEAP32[($3_1 + 16 | 0) >> 2] = 12423;
      $827(12382 | 0, $3_1 + 16 | 0 | 0);
      break label$3;
     }
     label$14 : {
      if (($1_1 & 192 | 0 | 0) == (128 | 0)) {
       break label$14
      }
      $0_1 = 0;
      if ((HEAP8[(0 + 61848 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$3
      }
      $0_1 = 0;
      if (!($828(2 | 0, 61848 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 195;
      HEAP32[($3_1 + 40 | 0) >> 2] = 12152;
      HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = 13300;
      $827(13305 | 0, $3_1 + 32 | 0 | 0);
      break label$3;
     }
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 6;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $17_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $97$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $99$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $97$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$2 = $99$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $8_1 = i64toi32_i32$0 | $1_1 | 0;
     $8$hi = i64toi32_i32$2;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $8_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   }
   $0_1 = 1;
  }
  label$15 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($4_1 | 0) < (1 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + -1 | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $4_1 + 1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$5;
     }
     $4_1 = $764($0_1 | 0) | 0;
     if (($4_1 | 0) != (-1 | 0)) {
      break label$5
     }
     if (!($834(61848 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = $1_1;
     $827(13351 | 0, $2_1 | 0);
     break label$3;
    }
    $3_1 = $174($3_1 & 255 | 0 | 0, $4_1 & 255 | 0 | 0) | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$7 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 & 255 | 0 | 0;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAPU8[(($1_1 ^ $0_1 | 0) + 13392 | 0) >> 0] | 0 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(556 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 556 | 0, $1_1 | 0, 13648 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $176($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(13760 | 0, 13768 | 0, 110 | 0);
  abort();
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 90 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 351 | 0) >> 0] = 0;
  HEAP32[($0_1 + 340 | 0) >> 2] = 33;
  HEAP32[($0_1 + 32 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $219($0_1 + 36 | 0 | 0);
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 133 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 556 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $178($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, $4_1 = 0, $6_1 = 0, $17_1 = 0, $17$hi = 0, $5_1 = 0, $9_1 = 0, $16_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $157_1 = 0, $225_1 = 0, $272_1 = 0;
  label$1 : {
   $3_1 = global$0 - 560 | 0;
   $15_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 305 | 0);
  }
  $219($3_1 + 240 | 0 | 0);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 544 | 0 | 0, $4_1 | 0);
  HEAP8[($3_1 + 239 | 0) >> 0] = 0;
  $1_1 = $179($3_1 + 544 | 0 | 0) | 0;
  $5_1 = $772($3_1 + 544 | 0 | 0) | 0;
  $6_1 = $754($3_1 + 544 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    if ((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$6
    }
    $7_1 = $0_1 + 36 | 0;
    $8_1 = $0_1 + 344 | 0;
    $9_1 = $1_1 << 8 | 0 | $5_1 | 0;
    $10_1 = $3_1 + 156 | 0;
    $11_1 = $3_1 + 152 | 0;
    $12_1 = $3_1 + 144 | 0;
    $13_1 = $3_1 + 148 | 0;
    label$7 : while (1) {
     $14_1 = $1_1 & 128 | 0;
     $1_1 = ($1_1 >>> 1 | 0) & 63 | 0;
     label$8 : {
      if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[$10_1 >> 2] = $6_1;
      HEAP32[$11_1 >> 2] = $5_1 & 7 | 0;
      HEAP32[$12_1 >> 2] = $1_1;
      HEAP32[($3_1 + 136 | 0) >> 2] = $9_1;
      HEAP32[$13_1 >> 2] = ($9_1 >>> 3 | 0) & 63 | 0;
      HEAP32[($3_1 + 132 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 128 | 0) >> 2] = 13926;
      HEAP32[($3_1 + 140 | 0) >> 2] = $14_1 >>> 7 | 0;
      $827(13852 | 0, $3_1 + 128 | 0 | 0);
     }
     label$9 : {
      label$10 : {
       if ($14_1) {
        break label$10
       }
       label$11 : {
        label$12 : {
         switch ($1_1 | 0) {
         case 33:
          $1_1 = $180($0_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 240 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
          if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
           break label$6
          }
          if (!$1_1) {
           break label$10
          }
          $252($8_1 | 0, $3_1 + 160 | 0 | 0, 64 | 0) | 0;
          label$15 : {
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU8[($0_1 + 346 | 0) >> 0] | 0;
           HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
           HEAP32[($3_1 + 48 | 0) >> 2] = 13926;
           HEAP32[($3_1 + 56 | 0) >> 2] = $3_1 + 160 | 0;
           $827(13950 | 0, $3_1 + 48 | 0 | 0);
          }
          $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($0_1 + 8 | 0) >> 2] = $14_1;
          label$16 : {
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            break label$16
           }
           if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
            break label$16
           }
           if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
            break label$16
           }
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
           $157_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1 + 32 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $157_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 24 | 0) >> 2] = $17_1;
           HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 13926;
           $827(13980 | 0, $3_1 + 16 | 0 | 0);
           break label$11;
          }
          label$17 : {
           $1_1 = HEAPU8[($0_1 + 346 | 0) >> 0] | 0;
           if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
            break label$17
           }
           HEAP32[($0_1 + 32 | 0) >> 2] = -1;
           HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
           i64toi32_i32$1 = $0_1;
           i64toi32_i32$0 = 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
           $973($7_1 | 0, $3_1 + 240 | 0 | 0, 304 | 0) | 0;
           break label$9;
          }
          label$18 : {
           if ((HEAPU16[($3_1 + 248 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 44 | 0) >> 1] | 0 | 0)) {
            break label$18
           }
           if ((HEAPU16[($3_1 + 250 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 46 | 0) >> 1] | 0 | 0)) {
            break label$9
           }
          }
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = -1;
          HEAP32[($0_1 + 28 | 0) >> 2] = -1;
          HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
          i64toi32_i32$1 = $0_1;
          i64toi32_i32$0 = 0;
          HEAP32[($0_1 + 20 | 0) >> 2] = 0;
          HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 34:
          $1_1 = $181($0_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
          if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
           break label$6
          }
          if (!$1_1) {
           break label$10
          }
          $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($0_1 + 12 | 0) >> 2] = $14_1;
          label$19 : {
           if ($14_1 >>> 0 < $1_1 >>> 0) {
            break label$19
           }
           if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
            break label$19
           }
           if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
            break label$19
           }
           if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
           $225_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1 + 80 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $225_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
           i64toi32_i32$0 = $17$hi;
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 72 | 0) >> 2] = $17_1;
           HEAP32[($3_1 + 76 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 64 | 0) >> 2] = 13926;
           $827(13980 | 0, $3_1 + 64 | 0 | 0);
           break label$11;
          }
          $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
          if (($1_1 | 0) != (HEAPU8[($0_1 + 353 | 0) >> 0] | 0 | 0)) {
           break label$9
          }
          if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
           break label$9
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
          break label$9;
         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 7:
         case 8:
         case 9:
         case 16:
         case 17:
         case 18:
         case 19:
         case 20:
         case 21:
          break label$12;
         default:
          break label$9;
         };
        }
        $1_1 = $182($0_1 | 0, $1_1 | 0, $3_1 + 544 | 0 | 0, $3_1 + 239 | 0 | 0) | 0;
        if (HEAPU8[($3_1 + 239 | 0) >> 0] | 0) {
         break label$6
        }
        if (!$1_1) {
         break label$10
        }
        if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
         break label$9
        }
        if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
         break label$9
        }
        if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        $272_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $3_1 + 112 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $272_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($3_1 + 100 | 0) >> 2] = $0_1;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$1 = $3_1;
        HEAP32[($3_1 + 104 | 0) >> 2] = $17_1;
        HEAP32[($3_1 + 108 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($3_1 + 96 | 0) >> 2] = 13926;
        $827(13980 | 0, $3_1 + 96 | 0 | 0);
       }
       $0_1 = $183($0_1 | 0) | 0;
       break label$5;
      }
      HEAP8[$2_1 >> 0] = 1;
      $738($4_1 | 0);
      $0_1 = 0;
      break label$5;
     }
     HEAP8[($3_1 + 239 | 0) >> 0] = 0;
     $1_1 = $179($3_1 + 544 | 0 | 0) | 0;
     $5_1 = $772($3_1 + 544 | 0 | 0) | 0;
     $9_1 = $1_1 << 8 | 0 | $5_1 | 0;
     $6_1 = $754($3_1 + 544 | 0 | 0) | 0;
     if ((HEAP32[($3_1 + 548 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   label$20 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$20
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$20
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = 13926;
    $827(14019 | 0, $3_1 | 0);
   }
   $0_1 = 0;
   if ($6_1 >>> 0 < 6 >>> 0) {
    break label$5
   }
   $763($3_1 + 544 | 0 | 0, $4_1 | 0);
   $766($3_1 + 544 | 0 | 0, $6_1 + -5 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 544 | 0 | 0);
  }
  label$21 : {
   $16_1 = $3_1 + 560 | 0;
   if ($16_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  return $0_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  return $262($0_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = 0;
  HEAP8[$3_1 >> 0] = 0;
  $185($0_1 | 0, $1_1 | 0, $4_1 + 8 | 0 | 0);
  label$3 : {
   label$4 : {
    $1_1 = $0_1 + 344 | 0;
    if ($249($1_1 | 0, $2_1 | 0, $4_1 + 8 | 0 | 4 | 0 | 0) | 0) {
     break label$4
    }
    if (!($784($4_1 + 36 | 0 | 0) | 0)) {
     break label$3
    }
    label$5 : {
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (200 | 0)) {
      break label$5
     }
     $5_1 = 0;
     if (!($834(61864 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[$4_1 >> 2] = $0_1;
     $827(14051 | 0, $4_1 | 0);
     break label$3;
    }
    HEAP8[$3_1 >> 0] = 1;
    break label$3;
   }
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   $8_1 = $1_1 + 3 | 0;
   $9_1 = $2_1 + 19 | 0;
   $10_1 = HEAPU8[$8_1 >> 0] | 0 | ((HEAPU8[($8_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$9_1 >> 0] = $10_1;
   HEAP8[($9_1 + 1 | 0) >> 0] = $10_1 >>> 8 | 0;
   HEAP8[($9_1 + 2 | 0) >> 0] = $10_1 >>> 16 | 0;
   HEAP8[($9_1 + 3 | 0) >> 0] = $10_1 >>> 24 | 0;
   $5_1 = 1;
  }
  label$6 : {
   $7_1 = $4_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  HEAP8[$2_1 >> 0] = 0;
  $185($0_1 | 0, $1_1 | 0, $3_1 + 24 | 0 | 0);
  $1_1 = $3_1 + 52 | 0;
  HEAP8[($0_1 + 352 | 0) >> 0] = $791($1_1 | 0) | 0;
  HEAP8[($0_1 + 353 | 0) >> 0] = $791($1_1 | 0) | 0;
  HEAP8[($0_1 + 354 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
  $792($1_1 | 0, 1 | 0);
  HEAP8[($0_1 + 355 | 0) >> 0] = $790($1_1 | 0, 3 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!($784($1_1 | 0) | 0)) {
     break label$4
    }
    HEAP8[$2_1 >> 0] = 1;
    break label$3;
   }
   HEAP8[($0_1 + 351 | 0) >> 0] = 1;
   label$5 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    $1_1 = HEAPU8[($0_1 + 352 | 0) >> 0] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU8[($0_1 + 353 | 0) >> 0] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = 13926;
    $827(14097 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$6 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP8[$3_1 >> 0] = 0;
  $185($0_1 | 0, $2_1 | 0, $4_1 + 40 | 0 | 0);
  $5_1 = 1;
  label$3 : {
   if (!(HEAPU8[($0_1 + 351 | 0) >> 0] | 0)) {
    break label$3
   }
   $2_1 = $4_1 + 68 | 0;
   $6_1 = $789($2_1 | 0) | 0;
   label$4 : {
    if (($1_1 & -8 | 0 | 0) != (16 | 0)) {
     break label$4
    }
    $792($2_1 | 0, 1 | 0);
   }
   $1_1 = $791($2_1 | 0) | 0;
   label$5 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$5
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   label$6 : {
    if (($1_1 | 0) == (HEAPU8[($0_1 + 352 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = HEAPU8[($0_1 + 352 | 0) >> 0] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
    $827(14135 | 0, $4_1 + 16 | 0 | 0);
    break label$3;
   }
   if (HEAPU8[($0_1 + 354 | 0) >> 0] | 0) {
    break label$3
   }
   label$7 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$7
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   if (!$6_1) {
    break label$3
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 355 | 0) >> 0] | 0)) {
     break label$8
    }
    $5_1 = 0;
    label$9 : while (1) {
     $792($2_1 | 0, 1 | 0);
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 >>> 0 < (HEAPU8[($0_1 + 355 | 0) >> 0] | 0) >>> 0) {
      continue label$9
     }
     break label$9;
    };
   }
   $1_1 = $791($2_1 | 0) | 0;
   label$10 : {
    if (!($784($2_1 | 0) | 0)) {
     break label$10
    }
    HEAP8[$3_1 >> 0] = 1;
    $5_1 = 0;
    break label$3;
   }
   label$11 : {
    if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$4_1 >> 2] = 14243;
    $827(14213 | 0, $4_1 | 0);
   }
   $5_1 = 1;
   HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
   if (($1_1 | 0) != (2 | 0)) {
    break label$3
   }
   $5_1 = 1;
   HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  }
  label$12 : {
   $8_1 = $4_1 + 80 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $183($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $218($1_1 | 0);
   HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 36 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (13648 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 556 | 0, $0_1 | 0, 13648 | 0, 13768 | 0, 449 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = ($6_1 | 0) == (33 | 0) ? 14346 : 14336;
   HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(14266 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$7
    }
    if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
     break label$7
    }
    $252($0_1 + 52 | 0 | 0, $2_1 + 48 | 0 | 0, 64 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 61864 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 61864 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[$2_1 >> 2] = $2_1 + 48 | 0;
     $827(14347 | 0, $2_1 | 0);
    }
    HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0 ? 90 : 50;
    $0_1 = $183($0_1 | 0) | 0;
    break label$6;
   }
   label$9 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$9
    }
    if ((HEAP32[($0_1 + 340 | 0) >> 2] | 0 | 0) == (33 | 0)) {
     break label$9
    }
    HEAP32[$1_1 >> 2] = 50;
    $0_1 = $183($0_1 | 0) | 0;
    break label$6;
   }
   $0_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
  }
  label$10 : {
   $10_1 = $2_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $6_1 = 0, $11_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $2_1 + 4 | 0;
  $3_1 = $0_1 + 356 | 0;
  $0_1 = $279($1_1 | 0, $3_1 | 0, 200 | 0) | 0;
  HEAP16[($2_1 + 26 | 0) >> 1] = 1;
  HEAP16[($2_1 + 24 | 0) >> 1] = $0_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $760($1_1 | 0, $2_1 + 20 | 0 | 0, 1 | 0);
  $783($2_1 + 28 | 0 | 0, $1_1 | 0);
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $778($0_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(14379 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return ($0_1 >>> 2 | 0) & 2080768 | 0 | ($0_1 & 127 | 0) | 0 | (($0_1 >>> 3 | 0) & 266338304 | 0) | 0 | (($0_1 >>> 1 | 0) & 16256 | 0) | 0 | 0;
 }
 
 function $187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($782($0_1 | 0) | 0 | 0) != (4801587 | 0)) {
    break label$3
   }
   HEAP16[$1_1 >> 1] = $775($0_1 | 0) | 0;
   $3_1 = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 8 | 0) >> 0] = $3_1 >>> 7 | 0;
   HEAP8[($1_1 + 11 | 0) >> 0] = ($3_1 >>> 4 | 0) & 1 | 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = ($3_1 >>> 5 | 0) & 1 | 0;
   HEAP8[($1_1 + 9 | 0) >> 0] = ($3_1 >>> 6 | 0) & 1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $186($0_1 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
    $4_1 = HEAPU16[$1_1 >> 1] | 0;
    $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $6_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU8[($1_1 + 11 | 0) >> 0] | 0 ? 14515 : 14475;
    HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 ? 14492 : 14475;
    HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$2_1 >> 2] = $4_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $3_1 ? 14476 : 14475;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 ? 14457 : 14475;
    $827(14404 | 0, $2_1 | 0);
   }
   $3_1 = 1;
  }
  label$5 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $188($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  $4_1 = $186($0_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 0;
  label$3 : {
   if ($4_1 >>> 0 < 5 >>> 0) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(14530 | 0, $2_1 | 0);
   }
   $766($0_1 | 0, $4_1 + -4 | 0 | 0) | 0;
   $3_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $189($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $12_1 = 0, $11_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  HEAP32[$2_1 >> 2] = $778($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAPU16[$1_1 >> 1] | 0) >>> 0 < 4 >>> 0) {
     break label$4
    }
    $1_1 = $186($0_1 | 0) | 0;
    break label$3;
   }
   $1_1 = $778($0_1 | 0) | 0;
  }
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
  $1_1 = $777($0_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1 & 1 | 0;
  HEAP8[($2_1 + 10 | 0) >> 0] = ($1_1 >>> 12 | 0) & 1 | 0;
  HEAP8[($2_1 + 9 | 0) >> 0] = ($1_1 >>> 13 | 0) & 1 | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = ($1_1 >>> 14 | 0) & 1 | 0;
  $1_1 = $1_1 & 255 | 0;
  HEAP8[($2_1 + 14 | 0) >> 0] = ($1_1 >>> 1 | 0) & 1 | 0;
  HEAP8[($2_1 + 13 | 0) >> 0] = ($1_1 >>> 2 | 0) & 1 | 0;
  HEAP8[($2_1 + 12 | 0) >> 0] = ($1_1 >>> 3 | 0) & 1 | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = ($1_1 >>> 6 | 0) & 1 | 0;
  $1_1 = 0;
  label$5 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    $0_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    $4_1 = HEAPU8[($2_1 + 9 | 0) >> 0] | 0;
    $5_1 = HEAPU8[($2_1 + 10 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($2_1 + 11 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($2_1 + 12 | 0) >> 0] | 0;
    $8_1 = HEAPU8[($2_1 + 13 | 0) >> 0] | 0;
    $9_1 = HEAPU8[($2_1 + 14 | 0) >> 0] | 0;
    $10_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 48 | 0) >> 2] = $10_1 ? 14729 : 14475;
    HEAP32[($3_1 + 44 | 0) >> 2] = $9_1 ? 14457 : 14475;
    HEAP32[($3_1 + 40 | 0) >> 2] = $8_1 ? 14718 : 14475;
    HEAP32[($3_1 + 36 | 0) >> 2] = $7_1 ? 14706 : 14475;
    HEAP32[($3_1 + 32 | 0) >> 2] = $6_1 ? 14688 : 14475;
    HEAP32[($3_1 + 28 | 0) >> 2] = $5_1 ? 14678 : 14475;
    HEAP32[($3_1 + 24 | 0) >> 2] = $4_1 ? 14654 : 14475;
    HEAP32[($3_1 + 20 | 0) >> 2] = $0_1 ? 14631 : 14475;
    HEAP32[($3_1 + 12 | 0) >> 2] = $1_1 & 255 | 0;
    HEAP32[$3_1 >> 2] = $1_1 >>> 24 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
    $827(14562 | 0, $3_1 | 0);
   }
   $1_1 = 1;
  }
  label$7 : {
   $12_1 = $3_1 + 64 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!(HEAPU8[($2_1 + 11 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($2_1 + 16 | 0) >> 0] = $772($0_1 | 0) | 0;
  }
  label$2 : {
   if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
    break label$2
   }
   HEAP8[($2_1 + 17 | 0) >> 0] = $772($0_1 | 0) | 0;
  }
  label$3 : {
   if (!(HEAPU8[($2_1 + 15 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = $186($0_1 | 0) | 0;
  }
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 61880 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61880 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(14751 | 0, $1_1 | 0);
  }
  label$4 : {
   if (($782($0_1 | 0) | 0 | 0) != (4801587 | 0)) {
    break label$4
   }
   if (($775($0_1 | 0) | 0) >>> 0 > 4 >>> 0) {
    break label$4
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$4
   }
   $766($0_1 | 0, 1 | 0) | 0;
   $3_1 = $778($0_1 | 0) | 0;
   $2_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$4
   }
   $2_1 = !($3_1 & -2139062144 | 0);
  }
  label$5 : {
   $5_1 = $1_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (($776($0_1 | 0) | 0 | 0) != (1179011410 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $766($0_1 | 0, 4 | 0) | 0;
   $1_1 = ($776($0_1 | 0) | 0 | 0) == (1096303683 | 0) & (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61896 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(14926 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 14788 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (14788 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 14788 | 0, 14848 | 0, 113 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $195($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (14788 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 14788 | 0, 14848 | 0, 131 | 0);
  }
  label$5 : {
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    if (!$3_1) {
     break label$5
    }
    $5_1 = 0;
    label$7 : {
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $0_1 = $50($1_1 | 0, HEAP32[$3_1 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 44 | 0, $4_1 + 12 | 0 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $762($4_1 + 16 | 0 | 0, $0_1 | 0);
     $1_1 = $192($4_1 + 16 | 0 | 0) | 0;
     $735($0_1 | 0);
     if (!$1_1) {
      break label$7
     }
     $0_1 = $813(40 | 0) | 0;
     if (!$0_1) {
      break label$7
     }
     $214($0_1 | 0, 22 | 0);
     $5_1 = $0_1;
    }
    label$8 : {
     $7_1 = $4_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $5_1 | 0;
   }
   $859(14971 | 0, 14848 | 0, 132 | 0);
   abort();
  }
  $859(14975 | 0, 14848 | 0, 133 | 0);
  abort();
 }
 
 function $196() {
  var $1_1 = 0, $2_1 = 0, $0_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $0_1 = global$0 - 16 | 0;
   $3_1 = $0_1;
   if ($0_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $1_1 = $813(88 | 0) | 0;
    if ($1_1) {
     break label$4
    }
    $1_1 = 0;
    if (!($835(61912 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = 88;
    $827(15024 | 0, $0_1 | 0);
    break label$3;
   }
   $845($1_1 | 0, 88 | 0, $1_1 | 0, 15008 | 0);
   $2_1 = $732(56088 | 0, 16 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   label$5 : {
    if (!$2_1) {
     break label$5
    }
    $2_1 = $794($2_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $974($1_1 + 12 | 0 | 0, 0 | 0, 76 | 0) | 0;
     break label$3;
    }
    $733(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
   }
   $815($1_1 | 0);
   $1_1 = 0;
  }
  label$7 : {
   $4_1 = $0_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 178 | 0);
  }
  $1_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 16 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 15152 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($3_1);
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $235($1_1 | 0);
  }
  $795(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  $733(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 88 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 1;
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   if (!$1_1) {
    break label$3
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$3
   }
   if (!(HEAPU8[$1_1 >> 0] | 0)) {
    break label$3
   }
   $3_1 = 0;
   $4_1 = $0_1;
   label$4 : {
    label$5 : while (1) {
     if (!($199($4_1 | 0, $1_1 | 0) | 0)) {
      break label$4
     }
     $3_1 = $3_1 + 1 | 0;
     $4_1 = $0_1 + Math_imul($3_1, 6) | 0;
     if (HEAPU8[$4_1 >> 0] | 0) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $1_1;
   $827(15224 | 0, $2_1 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3_1 = HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0;
      $4_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $3_1 = 0;
      break label$1;
     }
     $3_1 = ((((($3_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0 ? $3_1 & 223 | 0 : $3_1) << 24 | 0) >> 24 | 0) - ((((($4_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0 ? $4_1 & 223 | 0 : $4_1) << 24 | 0) >> 24 | 0) | 0;
     if ($3_1) {
      break label$1
     }
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $13$hi = 0, $12_1 = 0, $11_1 = 0, $10_1 = 0, $13_1 = 0, $19_1 = 0, $451$hi = 0, $20_1 = 0;
  label$1 : {
   $3_1 = global$0 - 576 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $1_1 = -1;
     break label$4;
    }
    HEAP32[($3_1 + 424 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 416 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 420 | 0) >> 2] = 0;
    label$6 : {
     if ($0_1) {
      break label$6
     }
     $1_1 = $820($1_1 | 0, $2_1 | 0, 15275 | 0, 0 | 0) | 0;
     break label$4;
    }
    HEAP8[($3_1 + 432 | 0) >> 0] = 0;
    $4_1 = 15275;
    label$7 : {
     label$8 : {
      switch ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0 | 0) {
      case 0:
       $4_1 = 15283;
       if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) != (32768 | 0)) {
        break label$7
       }
       $5_1 = 15286;
       label$28 : {
        $4_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + -1 | 0;
        if ($4_1 >>> 0 > 3 >>> 0) {
         break label$28
        }
        $5_1 = HEAP32[(($4_1 << 2 | 0) + 17576 | 0) >> 2] | 0;
       }
       $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       $7_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
       $8_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($3_1 + 308 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
       HEAP32[($3_1 + 304 | 0) >> 2] = $8_1 ? 15339 : 15286;
       HEAP32[($3_1 + 300 | 0) >> 2] = $7_1;
       HEAP32[($3_1 + 292 | 0) >> 2] = $6_1;
       HEAP32[($3_1 + 288 | 0) >> 2] = $5_1;
       HEAP32[($3_1 + 296 | 0) >> 2] = $4_1 ? 15339 : 15286;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15321 | 0, $3_1 + 288 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 1:
       $4_1 = 15343;
       break label$7;
      case 2:
       $4_1 = 15347;
       break label$7;
      case 3:
       $4_1 = 15351;
       break label$7;
      case 4:
       $4_1 = 15360;
       break label$7;
      case 5:
       $4_1 = 15367;
       break label$7;
      case 6:
       $4_1 = 15375;
       break label$7;
      case 8:
       $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       $4_1 = ($5_1 >>> 0) / (1e3 >>> 0) | 0;
       HEAP32[($3_1 + 320 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 324 | 0) >> 2] = $5_1 - Math_imul($4_1, 1e3) | 0;
       $820($3_1 + 432 | 0 | 0, 16 | 0, 15387 | 0, $3_1 + 320 | 0 | 0) | 0;
       $4_1 = 15383;
       break label$7;
      case 9:
       $4_1 = 15400;
       break label$7;
      case 21:
       $4_1 = 15406;
       break label$7;
      case 10:
       $5_1 = HEAPU8[($0_1 + 120 | 0) >> 0] | 0;
       $4_1 = HEAPU8[($0_1 + 121 | 0) >> 0] | 0;
       HEAP32[($3_1 + 336 | 0) >> 2] = $0_1 + 122 | 0;
       HEAP32[($3_1 + 344 | 0) >> 2] = $4_1 ? 15440 : 15286;
       HEAP32[($3_1 + 340 | 0) >> 2] = $5_1 ? 15286 : 15424;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15411 | 0, $3_1 + 336 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 12:
       $5_1 = HEAPU8[($0_1 + 56 | 0) >> 0] | 0;
       HEAP32[($3_1 + 352 | 0) >> 2] = $0_1 + 84 | 0;
       HEAP32[($3_1 + 356 | 0) >> 2] = $5_1 ? 15463 : 15286;
       $820($3_1 + 448 | 0 | 0, 128 | 0, 15452 | 0, $3_1 + 352 | 0 | 0) | 0;
       $4_1 = $3_1 + 448 | 0;
       break label$7;
      case 11:
       $4_1 = 15476;
       break label$7;
      case 13:
       $4_1 = 15480;
       break label$7;
      case 16:
       $4_1 = 15484;
       break label$7;
      case 17:
       $4_1 = 15488;
       break label$7;
      case 14:
       $4_1 = 15493;
       break label$7;
      case 18:
       $4_1 = 15498;
       break label$7;
      case 19:
       $4_1 = 15502;
       break label$7;
      case 20:
       break label$8;
      default:
       break label$7;
      };
     }
     $4_1 = 15507;
    }
    $6_1 = 15286;
    label$29 : {
     $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0;
     if ($5_1 >>> 0 > 4 >>> 0) {
      break label$29
     }
     $6_1 = HEAP32[(($5_1 << 2 | 0) + 17592 | 0) >> 2] | 0;
    }
    $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[(($3_1 + 240 | 0) + 32 | 0) >> 2] = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 16 | 0) >> 2] = ($5_1 >>> 0) / (36e5 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 24 | 0) >> 2] = ((($5_1 >>> 0) / (1e3 >>> 0) | 0) >>> 0) % (60 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 20 | 0) >> 2] = ((($5_1 >>> 0) / (6e4 >>> 0) | 0) >>> 0) % (60 >>> 0) | 0;
    HEAP32[(($3_1 + 240 | 0) + 28 | 0) >> 2] = $3_1 + 432 | 0;
    HEAP32[($3_1 + 252 | 0) >> 2] = $8_1;
    HEAP32[($3_1 + 248 | 0) >> 2] = $7_1;
    HEAP32[($3_1 + 244 | 0) >> 2] = $6_1;
    HEAP32[($3_1 + 240 | 0) >> 2] = $4_1;
    $201($3_1 + 416 | 0 | 0, $820($1_1 | 0, $2_1 | 0, 15556 | 0, $3_1 + 240 | 0 | 0) | 0 | 0);
    label$30 : {
     $1_1 = HEAP32[$0_1 >> 2] | 0;
     if (!$1_1) {
      break label$30
     }
     $9_1 = $3_1 + 368 | 0 | 1 | 0;
     $10_1 = ($3_1 + 64 | 0) + 20 | 0;
     $4_1 = 0;
     label$31 : while (1) {
      HEAP16[($3_1 + 368 | 0) >> 1] = 0;
      label$32 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) == ($2_1 | 0)) {
        break label$32
       }
       $4_1 = $2_1;
       if (($1_1 | 0) == (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$32
       }
       $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 15593 | 0, 0 | 0) | 0 | 0);
       $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      }
      label$33 : {
       label$34 : {
        label$35 : {
         switch (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) {
         case 1:
          label$39 : {
           label$40 : {
            label$41 : {
             label$42 : {
              label$43 : {
               label$44 : {
                label$45 : {
                 label$46 : {
                  label$47 : {
                   label$48 : {
                    label$49 : {
                     label$50 : {
                      label$51 : {
                       label$52 : {
                        label$53 : {
                         label$54 : {
                          label$55 : {
                           label$56 : {
                            label$57 : {
                             label$58 : {
                              label$59 : {
                               label$60 : {
                                label$61 : {
                                 label$62 : {
                                  label$63 : {
                                   label$64 : {
                                    label$65 : {
                                     label$66 : {
                                      label$67 : {
                                       label$68 : {
                                        label$69 : {
                                         label$70 : {
                                          label$71 : {
                                           label$72 : {
                                            label$73 : {
                                             $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                                             if (($5_1 | 0) > (128 | 0)) {
                                              break label$73
                                             }
                                             $2_1 = 15597;
                                             label$74 : {
                                              switch ($5_1 + -1 | 0 | 0) {
                                              case 2:
                                               break label$39;
                                              case 5:
                                               break label$41;
                                              case 1:
                                              case 3:
                                              case 4:
                                               break label$42;
                                              case 0:
                                               break label$72;
                                              default:
                                               break label$74;
                                              };
                                             }
                                             switch ($5_1 + -15 | 0 | 0) {
                                             case 3:
                                              break label$69;
                                             case 2:
                                              break label$70;
                                             case 0:
                                              break label$71;
                                             default:
                                              break label$42;
                                             };
                                            }
                                            $2_1 = 15648;
                                            label$75 : {
                                             switch ($5_1 + -129 | 0 | 0) {
                                             case 0:
                                              break label$40;
                                             case 22:
                                             case 23:
                                              break label$42;
                                             case 27:
                                              break label$43;
                                             case 26:
                                              break label$44;
                                             case 25:
                                              break label$45;
                                             case 24:
                                              break label$46;
                                             case 20:
                                              break label$47;
                                             case 19:
                                              break label$48;
                                             case 11:
                                              break label$49;
                                             case 4:
                                              break label$50;
                                             case 3:
                                              break label$51;
                                             case 2:
                                              break label$52;
                                             case 1:
                                              break label$53;
                                             case 14:
                                              break label$54;
                                             case 12:
                                              break label$55;
                                             case 21:
                                              break label$56;
                                             case 13:
                                              break label$57;
                                             case 18:
                                              break label$59;
                                             case 17:
                                              break label$60;
                                             case 16:
                                              break label$61;
                                             case 15:
                                              break label$62;
                                             case 9:
                                              break label$63;
                                             case 10:
                                              break label$64;
                                             case 8:
                                              break label$65;
                                             case 7:
                                              break label$66;
                                             case 6:
                                              break label$67;
                                             case 5:
                                              break label$68;
                                             default:
                                              break label$75;
                                             };
                                            }
                                            if (($5_1 | 0) == (218 | 0)) {
                                             break label$58
                                            }
                                            if (($5_1 | 0) != (240 | 0)) {
                                             break label$42
                                            }
                                            $2_1 = 15735;
                                            break label$39;
                                           }
                                           $2_1 = 15614;
                                           break label$39;
                                          }
                                          $2_1 = 15629;
                                          break label$39;
                                         }
                                         $2_1 = 15633;
                                         break label$39;
                                        }
                                        $2_1 = 15638;
                                        break label$39;
                                       }
                                       $2_1 = 15657;
                                       break label$39;
                                      }
                                      $2_1 = 15669;
                                      break label$39;
                                     }
                                     $2_1 = 15681;
                                     break label$39;
                                    }
                                    $2_1 = 15689;
                                    break label$39;
                                   }
                                   $2_1 = 15697;
                                   break label$39;
                                  }
                                  $2_1 = 15706;
                                  break label$39;
                                 }
                                 $2_1 = 15710;
                                 break label$39;
                                }
                                $2_1 = 15717;
                                break label$39;
                               }
                               $2_1 = 15724;
                               break label$39;
                              }
                              $2_1 = 15488;
                              break label$39;
                             }
                             $2_1 = 15731;
                             break label$39;
                            }
                            $2_1 = 15740;
                            break label$39;
                           }
                           $2_1 = 15745;
                           break label$39;
                          }
                          $2_1 = 15750;
                          break label$39;
                         }
                         $2_1 = 15756;
                         break label$39;
                        }
                        $2_1 = 15766;
                        break label$39;
                       }
                       $2_1 = 15770;
                       break label$39;
                      }
                      $2_1 = 15777;
                      break label$39;
                     }
                     $2_1 = 15784;
                     break label$39;
                    }
                    $2_1 = 15792;
                    break label$39;
                   }
                   $2_1 = 15498;
                   break label$39;
                  }
                  $2_1 = 15802;
                  break label$39;
                 }
                 $2_1 = 15806;
                 break label$39;
                }
                $2_1 = 15811;
                break label$39;
               }
               $2_1 = 15815;
               break label$39;
              }
              $2_1 = 15824;
              break label$39;
             }
             $2_1 = 15275;
             break label$39;
            }
            $2_1 = 15652;
           }
           if (!(HEAPU8[($1_1 + 32 | 0) >> 0] | 0)) {
            break label$39
           }
           HEAP8[($3_1 + 368 | 0) >> 0] = 32;
           label$76 : {
            label$77 : {
             $5_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
             if (($5_1 | 0) == (6 | 0)) {
              break label$77
             }
             if (($5_1 | 0) != (129 | 0)) {
              break label$76
             }
             $820($9_1 | 0, 47 | 0, 15648 | 0, 0 | 0) | 0;
             break label$39;
            }
            $820($9_1 | 0, 47 | 0, 15652 | 0, 0 | 0) | 0;
            break label$39;
           }
           $820($9_1 | 0, 47 | 0, 15828 | 0, 0 | 0) | 0;
          }
          $5_1 = HEAPU8[($1_1 + 24 | 0) >> 0] | 0;
          $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
          $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $8_1 = HEAPU16[($1_1 + 26 | 0) >> 1] | 0;
          HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
          HEAP32[(($3_1 + 32 | 0) + 20 | 0) >> 2] = $8_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $7_1;
          HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
          HEAP32[($3_1 + 40 | 0) >> 2] = $6_1;
          HEAP32[($3_1 + 44 | 0) >> 2] = $5_1;
          HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $3_1 + 368 | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 15836 | 0, $3_1 + 32 | 0 | 0) | 0;
          break label$34;
         case 0:
          label$78 : {
           label$79 : {
            label$80 : {
             label$81 : {
              label$82 : {
               label$83 : {
                label$84 : {
                 label$85 : {
                  label$86 : {
                   label$87 : {
                    label$88 : {
                     label$89 : {
                      label$90 : {
                       label$91 : {
                        label$92 : {
                         label$93 : {
                          label$94 : {
                           label$95 : {
                            label$96 : {
                             label$97 : {
                              label$98 : {
                               $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
                               if (($5_1 | 0) > (65 | 0)) {
                                break label$98
                               }
                               $2_1 = 15892;
                               label$99 : {
                                switch ($5_1 + -26 | 0 | 0) {
                                case 7:
                                 break label$79;
                                case 1:
                                 break label$83;
                                case 5:
                                 break label$84;
                                case 2:
                                case 3:
                                case 4:
                                 break label$85;
                                case 6:
                                 break label$96;
                                case 0:
                                 break label$97;
                                default:
                                 break label$99;
                                };
                               }
                               $2_1 = 15400;
                               switch ($5_1 + -1 | 0 | 0) {
                               case 0:
                                break label$81;
                               case 1:
                                break label$82;
                               default:
                                break label$86;
                               };
                              }
                              label$100 : {
                               switch ($5_1 + -234 | 0 | 0) {
                               case 2:
                               case 3:
                               case 4:
                               case 5:
                                break label$85;
                               case 11:
                                break label$87;
                               case 12:
                                break label$88;
                               case 10:
                                break label$89;
                               case 9:
                                break label$90;
                               case 8:
                                break label$91;
                               case 6:
                                break label$92;
                               case 7:
                                break label$93;
                               case 1:
                                break label$94;
                               case 0:
                                break label$95;
                               default:
                                break label$100;
                               };
                              }
                              if (($5_1 | 0) == (66 | 0)) {
                               break label$80
                              }
                              if (($5_1 | 0) != (785 | 0)) {
                               break label$85
                              }
                              $2_1 = 15943;
                              break label$78;
                             }
                             $2_1 = 15886;
                             break label$78;
                            }
                            $2_1 = 15908;
                            break label$83;
                           }
                           $2_1 = 15924;
                           break label$78;
                          }
                          $2_1 = 15932;
                          break label$78;
                         }
                         $2_1 = 15957;
                         break label$78;
                        }
                        $2_1 = 15961;
                        break label$78;
                       }
                       $2_1 = 15973;
                       break label$78;
                      }
                      $2_1 = 15978;
                      break label$78;
                     }
                     $2_1 = 15982;
                     break label$78;
                    }
                    $2_1 = 15986;
                    break label$78;
                   }
                   $2_1 = 15990;
                   break label$78;
                  }
                  $2_1 = 15874;
                  if (($5_1 | 0) == (16 | 0)) {
                   break label$78
                  }
                 }
                 $2_1 = 15275;
                 break label$78;
                }
                $2_1 = 15898;
               }
               $5_1 = $1_1 + 36 | 0;
               if (!(HEAPU8[$5_1 >> 0] | 0)) {
                break label$78
               }
               HEAP8[($3_1 + 368 | 0) >> 0] = 32;
               $248($5_1 | 0, $9_1 | 0, 47 | 0) | 0;
               break label$78;
              }
              $2_1 = 15868;
             }
             $6_1 = 15286;
             $7_1 = 15286;
             label$101 : {
              $5_1 = (HEAPU8[($1_1 + 48 | 0) >> 0] | 0) + -1 | 0;
              if (($5_1 & 255 | 0) >>> 0 > 4 >>> 0) {
               break label$101
              }
              $7_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 17612 | 0) >> 2] | 0;
             }
             label$102 : {
              $5_1 = (HEAPU8[($1_1 + 49 | 0) >> 0] | 0) + -4 | 0;
              if (($5_1 & 255 | 0) >>> 0 > 6 >>> 0) {
               break label$102
              }
              $6_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 17632 | 0) >> 2] | 0;
             }
             $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
             HEAP32[(($3_1 + 144 | 0) + 16 | 0) >> 2] = HEAPU8[($1_1 + 50 | 0) >> 0] | 0 ? 16080 : 15286;
             HEAP32[($3_1 + 156 | 0) >> 2] = $6_1;
             HEAP32[($3_1 + 152 | 0) >> 2] = $7_1;
             $6_1 = ($5_1 >>> 0) / (1e3 >>> 0) | 0;
             HEAP32[($3_1 + 144 | 0) >> 2] = $6_1;
             HEAP32[($3_1 + 148 | 0) >> 2] = $5_1 - Math_imul($6_1, 1e3) | 0;
             $820($3_1 + 368 | 0 | 0, 48 | 0, 16059 | 0, $3_1 + 144 | 0 | 0) | 0;
             break label$78;
            }
            $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
            $5_1 = ($2_1 >>> 0) / (1e3 >>> 0) | 0;
            HEAP32[($3_1 + 176 | 0) >> 2] = $5_1;
            HEAP32[($3_1 + 180 | 0) >> 2] = $2_1 - Math_imul($5_1, 1e3) | 0;
            $820($3_1 + 368 | 0 | 0, 48 | 0, 16093 | 0, $3_1 + 176 | 0 | 0) | 0;
            $2_1 = 15953;
            break label$78;
           }
           $2_1 = 15918;
           $5_1 = $1_1 + 36 | 0;
           if (!(HEAPU8[$5_1 >> 0] | 0)) {
            break label$78
           }
           HEAP8[($3_1 + 368 | 0) >> 0] = 32;
           $252($5_1 | 0, $9_1 | 0, 47 | 0) | 0;
          }
          $5_1 = $202($3_1 + 368 | 0 | 0) | 0;
          label$103 : {
           label$104 : {
            label$105 : {
             label$106 : {
              $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              switch ($6_1 + -9 | 0 | 0) {
              case 1:
               break label$103;
              case 2:
               break label$105;
              case 0:
               break label$106;
              default:
               break label$104;
              };
             }
             $6_1 = HEAP32[($1_1 + 352 | 0) >> 2] | 0;
             HEAP32[($3_1 + 108 | 0) >> 2] = $6_1 >>> 24 | 0;
             HEAP32[($3_1 + 96 | 0) >> 2] = $6_1 & 255 | 0;
             HEAP32[($3_1 + 104 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
             HEAP32[($3_1 + 100 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
             $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16105 | 0, $3_1 + 96 | 0 | 0) | 0;
             break label$103;
            }
            i64toi32_i32$2 = $1_1 + 336 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $13_1 = i64toi32_i32$0;
            $13$hi = i64toi32_i32$1;
            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
             break label$103
            }
            i64toi32_i32$2 = $1_1;
            i64toi32_i32$1 = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
            i64toi32_i32$0 = 0;
            HEAP32[($3_1 + 120 | 0) >> 2] = HEAPU8[($1_1 + 348 | 0) >> 0] | 0 ? 16132 : 15286;
            $19_1 = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, 1e6 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $451$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $13$hi;
            i64toi32_i32$0 = $451$hi;
            $20_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $13$hi;
            i64toi32_i32$1 = __wasm_i64_udiv($20_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $6_1 = i64toi32_i32$1;
            $7_1 = ($6_1 >>> 0) / (1e3 >>> 0) | 0;
            HEAP32[($3_1 + 112 | 0) >> 2] = $7_1;
            HEAP32[($3_1 + 116 | 0) >> 2] = $6_1 - Math_imul($7_1, 1e3) | 0;
            $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16117 | 0, $3_1 + 112 | 0 | 0) | 0;
            break label$103;
           }
           if (($6_1 | 0) != (4 | 0)) {
            break label$103
           }
           if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
            break label$103
           }
           if ((HEAP32[($1_1 + 328 | 0) >> 2] | 0 | 0) != (6 | 0)) {
            break label$103
           }
           if (!(HEAP32[($1_1 + 360 | 0) >> 2] | 0)) {
            break label$103
           }
           HEAP32[($3_1 + 128 | 0) >> 2] = ($1_1 + 356 | 0) + 8 | 0;
           $820(($3_1 + 368 | 0) + $5_1 | 0 | 0, 48 - $5_1 | 0 | 0, 16136 | 0, $3_1 + 128 | 0 | 0) | 0;
          }
          $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
          $6_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
          $7_1 = HEAPU16[($1_1 + 30 | 0) >> 1] | 0;
          $8_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[(($3_1 + 64 | 0) + 16 | 0) >> 2] = HEAPU16[($1_1 + 28 | 0) >> 1] | 0;
          HEAP32[$10_1 >> 2] = $7_1;
          HEAP32[(($3_1 + 64 | 0) + 24 | 0) >> 2] = ($6_1 | 0) == (1 | 0) ? 16186 : 15286;
          HEAP32[($3_1 + 64 | 0) >> 2] = $8_1;
          HEAP32[($3_1 + 68 | 0) >> 2] = $2_1;
          HEAP32[($3_1 + 76 | 0) >> 2] = $5_1;
          HEAP32[($3_1 + 72 | 0) >> 2] = $3_1 + 368 | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16151 | 0, $3_1 + 64 | 0 | 0) | 0;
          break label$34;
         case 2:
          HEAP32[($3_1 + 192 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16191 | 0, $3_1 + 192 | 0 | 0) | 0;
          break label$34;
         case 4:
          break label$35;
         default:
          break label$33;
         };
        }
        $2_1 = 15275;
        label$107 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (4 | 0)) {
          break label$107
         }
         if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
          break label$107
         }
         label$108 : {
          switch ((HEAP32[($1_1 + 328 | 0) >> 2] | 0) + -1 | 0 | 0) {
          case 0:
           $2_1 = 16203;
           break label$107;
          case 1:
           $2_1 = 16217;
           break label$107;
          case 2:
           $2_1 = 16226;
           break label$107;
          case 3:
           $2_1 = 16230;
           break label$107;
          case 4:
           $2_1 = 16234;
           break label$107;
          case 5:
           break label$108;
          default:
           break label$107;
          };
         }
         $2_1 = 16238;
         if (!(HEAP32[($1_1 + 360 | 0) >> 2] | 0)) {
          break label$107
         }
         HEAP32[($3_1 + 224 | 0) >> 2] = ($1_1 + 356 | 0) + 8 | 0;
         $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 + 224 | 0 | 0) | 0 | 0);
        }
        HEAP32[($3_1 + 208 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        HEAP32[($3_1 + 212 | 0) >> 2] = $2_1;
        $2_1 = $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16252 | 0, $3_1 + 208 | 0 | 0) | 0;
       }
       $201($3_1 + 416 | 0 | 0, $2_1 | 0);
      }
      label$114 : {
       label$115 : {
        label$116 : {
         label$117 : {
          switch ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0 | 0) {
          case 9:
           $2_1 = $1_1 + 345 | 0;
           $5_1 = $1_1 + 329 | 0;
           if (!(HEAPU8[($1_1 + 328 | 0) >> 0] | 0)) {
            break label$115
           }
           $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16263 | 0, 0 | 0) | 0 | 0);
           break label$115;
          case 7:
           $5_1 = $1_1 + 349 | 0;
           break label$116;
          case 0:
           if (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (36864 | 0)) {
            break label$114
           }
           if (!(HEAPU8[($1_1 + 348 | 0) >> 0] | 0)) {
            break label$114
           }
           $5_1 = $1_1 + 350 | 0;
           break label$116;
          case 5:
           break label$117;
          default:
           break label$114;
          };
         }
         $5_1 = $1_1 + 357 | 0;
        }
        $2_1 = 0;
       }
       label$121 : {
        if (!(HEAPU8[$5_1 >> 0] | 0)) {
         break label$121
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 + 16 | 0 | 0) | 0 | 0);
       }
       if (!$2_1) {
        break label$114
       }
       if (!(HEAPU8[$2_1 >> 0] | 0)) {
        break label$114
       }
       HEAP32[$3_1 >> 2] = $2_1;
       $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16246 | 0, $3_1 | 0) | 0 | 0);
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if ($1_1) {
       continue label$31
      }
      break label$31;
     };
    }
    $201($3_1 + 416 | 0 | 0, $820(HEAP32[($3_1 + 424 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 416 | 0) >> 2] | 0 | 0, 16275 | 0, 0 | 0) | 0 | 0);
    $1_1 = HEAP32[($3_1 + 420 | 0) >> 2] | 0;
   }
   label$122 : {
    $12_1 = $3_1 + 576 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $1_1 | 0;
  }
  $859(15266 | 0, 15069 | 0, 384 | 0);
  abort();
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $1_1 | 0;
    label$3 : {
     if ($2_1 >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[$0_1 >> 2] = $2_1 - $1_1 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
     return;
    }
    HEAP32[$0_1 >> 2] = 1;
    HEAP32[($0_1 + 8 | 0) >> 2] = ($2_1 + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0) + -1 | 0;
   }
   return;
  }
  $859(16545 | 0, 15069 | 0, 357 | 0);
  abort();
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[$2_1 >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 - $0_1 | 0 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10_1 = 0, $9_1 = 0, $139_1 = 0, $139$hi = 0, $141_1 = 0, $141$hi = 0, $143$hi = 0, $145$hi = 0, $31_1 = 0, $153_1 = 0, $153$hi = 0, $155_1 = 0, $155$hi = 0, $157$hi = 0, $159$hi = 0, $32_1 = 0;
  label$1 : {
   $3_1 = global$0 - 288 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1486 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if (!$1_1) {
         break label$10
        }
        if (!$2_1) {
         break label$9
        }
        $4_1 = 0;
        $5_1 = 0;
        label$11 : {
         $6_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($6_1) {
          break label$11
         }
         label$12 : {
          $5_1 = $813(1048576 | 0) | 0;
          if ($5_1) {
           break label$12
          }
          $7_1 = 0;
          break label$5;
         }
         $55($3_1 + 256 | 0 | 0);
         HEAP32[($3_1 + 276 | 0) >> 2] = $1_1;
         HEAP32[($3_1 + 268 | 0) >> 2] = $5_1;
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$0 = 1048576;
         HEAP32[($3_1 + 260 | 0) >> 2] = 128;
         HEAP32[($3_1 + 264 | 0) >> 2] = i64toi32_i32$0;
         $6_1 = $57(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 256 | 0 | 0) | 0;
         if ($6_1) {
          break label$11
         }
         $7_1 = 0;
         label$13 : {
          if (!($835(61912 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          HEAP32[$3_1 >> 2] = $0_1;
          $827(16287 | 0, $3_1 | 0);
         }
         $815($5_1 | 0);
         break label$5;
        }
        label$14 : {
         $7_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$7_1) {
          break label$14
         }
         $7_1 = $204($7_1 | 0) | 0;
         $8_1 = $7_1 + 1 | 0;
         $4_1 = $7_1 ? $8_1 : 0;
         if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         $9_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = $7_1 ? $8_1 : 16372;
         HEAP32[($3_1 + 32 | 0) >> 2] = $9_1;
         $827(16332 | 0, $3_1 + 32 | 0 | 0);
        }
        $7_1 = $205($0_1 | 0, $1_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
        label$15 : {
         if (!$4_1) {
          break label$15
         }
         if ($7_1) {
          break label$15
         }
         label$16 : {
          if (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) {
           break label$16
          }
          $7_1 = 0;
          break label$15;
         }
         $7_1 = $205($0_1 | 0, $1_1 | 0, $6_1 | 0, $2_1 | 0, 0 | 0) | 0;
        }
        $8_1 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, 0, i64toi32_i32$0, 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $796(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
        label$17 : {
         if ($7_1) {
          break label$17
         }
         if (!(HEAPU8[($2_1 + 8 | 0) >> 0] | 0)) {
          break label$7
         }
         $7_1 = $206($0_1 | 0, $4_1 | 0, $6_1 | 0) | 0;
         label$18 : {
          if (!$4_1) {
           break label$18
          }
          if ($7_1) {
           break label$18
          }
          if (!(HEAPU8[($2_1 + 9 | 0) >> 0] | 0)) {
           break label$8
          }
          $7_1 = $206($0_1 | 0, 0 | 0, $6_1 | 0) | 0;
         }
         if (!$7_1) {
          break label$8
         }
        }
        label$19 : {
         label$20 : {
          if (!(HEAP32[($7_1 + 20 | 0) >> 2] | 0)) {
           break label$20
          }
          if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
           break label$19
          }
         }
         if (FUNCTION_TABLE[HEAP32[($1_1 + 8 | 0) >> 2] | 0]($1_1, $3_1 + 48 | 0, $3_1 + 248 | 0) | 0) {
          break label$19
         }
         label$21 : {
          $0_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
          if (!$0_1) {
           break label$21
          }
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$1 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
          $139_1 = i64toi32_i32$1;
          $139$hi = i64toi32_i32$0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$0 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
          $141_1 = i64toi32_i32$0;
          $141$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $139$hi;
          i64toi32_i32$2 = $139_1;
          i64toi32_i32$0 = $141$hi;
          i64toi32_i32$3 = $141_1;
          i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          i64toi32_i32$2 = 0;
          i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 8e3 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          $143$hi = i64toi32_i32$5;
          i64toi32_i32$5 = 0;
          $145$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $143$hi;
          $31_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $145$hi;
          i64toi32_i32$2 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$5 | 0, $0_1 | 0, i64toi32_i32$2 | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
          HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$2;
          break label$19;
         }
         $0_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
         if (!$0_1) {
          break label$19
         }
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$5 = HEAP32[($3_1 + 248 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($3_1 + 252 | 0) >> 2] | 0;
         $153_1 = i64toi32_i32$5;
         $153$hi = i64toi32_i32$2;
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$2 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
         $155_1 = i64toi32_i32$2;
         $155$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $153$hi;
         i64toi32_i32$1 = $153_1;
         i64toi32_i32$2 = $155$hi;
         i64toi32_i32$3 = $155_1;
         i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
         $157$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $159$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $157$hi;
         $32_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $159$hi;
         i64toi32_i32$1 = __wasm_i64_sdiv($32_1 | 0, i64toi32_i32$4 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
         HEAP32[($7_1 + 16 | 0) >> 2] = i64toi32_i32$1;
        }
        label$22 : {
         $1_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
         if ($1_1 >>> 0 > 17 >>> 0) {
          break label$22
         }
         label$23 : {
          $0_1 = $1_1 + -7 | 0;
          if ($0_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          if (!((801 >>> ($0_1 & 65535 | 0) | 0) & 1 | 0)) {
           break label$23
          }
          $1_1 = HEAP32[(($0_1 << 2 | 0) + 17660 | 0) >> 2] | 0;
          HEAP32[($7_1 + 32 | 0) >> 2] = $1_1;
         }
         $0_1 = HEAP32[$7_1 >> 2] | 0;
         if (!$0_1) {
          break label$22
         }
         label$24 : while (1) {
          label$25 : {
           if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
            break label$25
           }
           HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
          }
          $0_1 = HEAP32[$0_1 >> 2] | 0;
          if ($0_1) {
           continue label$24
          }
          break label$24;
         };
        }
        $8_1 = 1;
        if ((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        $0_1 = HEAP32[$7_1 >> 2] | 0;
        if (!$0_1) {
         break label$6
        }
        if (HEAP32[$0_1 >> 2] | 0) {
         break label$6
        }
        $8_1 = 1;
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$6
        }
        label$26 : {
         label$27 : {
          $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          switch ($0_1 + -15 | 0 | 0) {
          case 0:
          case 3:
           break label$26;
          case 1:
          case 2:
           break label$6;
          default:
           break label$27;
          };
         }
         if (($0_1 | 0) == (129 | 0)) {
          break label$26
         }
         if (($0_1 | 0) != (6 | 0)) {
          break label$6
         }
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = 5;
        break label$6;
       }
       $859(16277 | 0, 15069 | 0, 1487 | 0);
       abort();
      }
      $859(16280 | 0, 15069 | 0, 1488 | 0);
      abort();
     }
     $8_1 = 0;
    }
    $7_1 = 0;
   }
   label$28 : {
    if (HEAP32[($2_1 + 16 | 0) >> 2] | 0) {
     break label$28
    }
    $59($6_1 | 0);
   }
   label$29 : {
    if (!$5_1) {
     break label$29
    }
    $815($5_1 | 0);
   }
   if (!$8_1) {
    break label$5
   }
   $200($7_1 | 0, $3_1 + 48 | 0 | 0, 196 | 0) | 0;
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $3_1 + 48 | 0;
   $827(16377 | 0, $3_1 + 16 | 0 | 0);
  }
  label$30 : {
   $11_1 = $3_1 + 288 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $207($0_1 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $0_1 + $1_1 | 0;
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) == (46 | 0)) {
      break label$1
     }
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $2_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) == (46 | 0) ? $0_1 : 0;
  }
  return $2_1 | 0;
 }
 
 function $205($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $24_1 = 0, $38_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $12_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  i64toi32_i32$0 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $24_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 72 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0;
  HEAP8[($5_1 + 73 | 0) >> 0] = HEAPU8[($3_1 + 13 | 0) >> 0] | 0;
  HEAP16[($5_1 + 74 | 0) >> 1] = HEAPU16[($3_1 + 14 | 0) >> 1] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = -1;
  $38_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 80 | 0) >> 2] = $38_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = 0;
  $974($5_1 + 96 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP16[($5_1 + 240 | 0) >> 1] = 257;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 16843009;
  HEAP32[($5_1 + 232 | 0) >> 2] = 16843009;
  HEAP32[($5_1 + 236 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 16843009;
  HEAP32[($5_1 + 224 | 0) >> 2] = 16843009;
  HEAP32[($5_1 + 228 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$5
     }
     if (!($208($5_1 + 224 | 0 | 0, $7_1 | 0) | 0)) {
      break label$4
     }
    }
    if (!($209($5_1 + 224 | 0 | 0, $4_1 | 0) | 0)) {
     break label$4
    }
    $8_1 = 0;
    if (!($210($5_1 + 224 | 0 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0) | 0)) {
     break label$3
    }
    $9_1 = 0;
    $8_1 = 0;
    $6_1 = 0;
    label$6 : {
     label$7 : while (1) {
      label$8 : {
       if (!(HEAPU8[(($5_1 + 224 | 0) + $9_1 | 0) >> 0] | 0)) {
        break label$8
       }
       label$9 : {
        $4_1 = $9_1 << 2 | 0;
        $7_1 = ($0_1 + $4_1 | 0) + 16 | 0;
        if (HEAP32[$7_1 >> 2] | 0) {
         break label$9
        }
        $10_1 = HEAP32[($4_1 + 15152 | 0) >> 2] | 0;
        $11_1 = FUNCTION_TABLE[HEAP32[($10_1 + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
        HEAP32[$7_1 >> 2] = $11_1;
        if ($11_1) {
         break label$9
        }
        if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1;
        $827(16556 | 0, $5_1 | 0);
        break label$8;
       }
       $796(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
       label$10 : {
        if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 15152 | 0) >> 2] | 0) >> 2] | 0;
        HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
        $827(16619 | 0, $5_1 + 48 | 0 | 0);
       }
       label$11 : {
        $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($4_1 + 15152 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0](HEAP32[$7_1 >> 2] | 0, $2_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0, $5_1 + 64 | 0) | 0;
        if ($8_1) {
         break label$11
        }
        $8_1 = 0;
        break label$8;
       }
       HEAP32[($8_1 + 32 | 0) >> 2] = $9_1;
       label$12 : {
        if (!(HEAPU8[($3_1 + 11 | 0) >> 0] | 0)) {
         break label$12
        }
        label$13 : {
         label$14 : {
          switch ((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + -3 | 0 | 0) {
          case 1:
           $4_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$4_1) {
            break label$12
           }
           label$17 : while (1) {
            label$18 : {
             if ((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (2 | 0)) {
              break label$18
             }
             $4_1 = $556(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
             break label$13;
            }
            $4_1 = HEAP32[$4_1 >> 2] | 0;
            if ($4_1) {
             continue label$17
            }
            break label$12;
           };
          case 0:
          case 4:
           $4_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$4_1) {
            break label$12
           }
           label$19 : while (1) {
            label$20 : {
             if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
              break label$20
             }
             $4_1 = $516(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
             break label$13;
            }
            $4_1 = HEAP32[$4_1 >> 2] | 0;
            if ($4_1) {
             continue label$19
            }
            break label$12;
           };
          case 7:
           break label$14;
          default:
           break label$12;
          };
         }
         $4_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$4_1) {
          break label$12
         }
         label$21 : while (1) {
          label$22 : {
           if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
            break label$22
           }
           $4_1 = $486(HEAPU16[($4_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
           break label$13;
          }
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if ($4_1) {
           continue label$21
          }
          break label$12;
         };
        }
        if (!$4_1) {
         break label$12
        }
        label$23 : {
         $7_1 = $211($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
         if (!$7_1) {
          break label$23
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = 0;
         HEAP32[($8_1 + 20 | 0) >> 2] = $7_1;
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1);
       }
       label$24 : {
        label$25 : {
         if (HEAPU8[($3_1 + 8 | 0) >> 0] | 0) {
          break label$25
         }
         if (!(HEAPU8[($3_1 + 10 | 0) >> 0] | 0)) {
          break label$24
         }
        }
        $11_1 = 0;
        HEAP32[($5_1 + 88 | 0) >> 2] = 0;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$0 = 0;
        HEAP32[($5_1 + 80 | 0) >> 2] = 0;
        HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
        $7_1 = (HEAPU8[($3_1 + 56 | 0) >> 0] | 0 | 0) != (0 | 0);
        label$26 : {
         $4_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$4_1) {
          break label$26
         }
         label$27 : while (1) {
          $11_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          label$28 : {
           label$29 : {
            if (!($7_1 & 1 | 0)) {
             break label$29
            }
            $7_1 = 1;
            label$30 : {
             if (($11_1 | 0) != (1 | 0)) {
              break label$30
             }
             label$31 : {
              label$32 : {
               switch ($9_1 + -12 | 0 | 0) {
               case 0:
               case 4:
                break label$32;
               default:
                break label$31;
               };
              }
              if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
               break label$31
              }
              if (!(HEAPU8[($4_1 + 348 | 0) >> 0] | 0)) {
               break label$31
              }
              $7_1 = 0;
              if (HEAPU8[($4_1 + 349 | 0) >> 0] | 0) {
               break label$30
              }
             }
             label$33 : {
              $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
              if (($11_1 | 0) > (31 | 0)) {
               break label$33
              }
              HEAP32[((($5_1 + 64 | 0) + ($11_1 << 2 | 0) | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
              $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
             }
             $7_1 = 1;
             HEAP32[($5_1 + 88 | 0) >> 2] = $11_1 + 1 | 0;
            }
            label$34 : {
             if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$34
             }
             if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$34
             }
             $11_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
             $10_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             HEAP32[($5_1 + 40 | 0) >> 2] = $7_1;
             HEAP32[($5_1 + 36 | 0) >> 2] = $10_1;
             HEAP32[($5_1 + 32 | 0) >> 2] = $11_1;
             $827(16660 | 0, $5_1 + 32 | 0 | 0);
            }
            if (HEAP32[($4_1 + 4 | 0) >> 2] | 0) {
             break label$28
            }
            label$35 : {
             $7_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
             if (($7_1 | 0) > (31 | 0)) {
              break label$35
             }
             HEAP32[((($5_1 + 64 | 0) + ($7_1 << 2 | 0) | 0) + 32 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
             $7_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
            }
            HEAP32[($5_1 + 88 | 0) >> 2] = $7_1 + 1 | 0;
            break label$28;
           }
           if ($11_1 >>> 0 > 1 >>> 0) {
            break label$28
           }
           HEAP32[($5_1 + 88 | 0) >> 2] = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 1 | 0;
          }
          $7_1 = (HEAPU8[($3_1 + 56 | 0) >> 0] | 0 | 0) != (0 | 0);
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if ($4_1) {
           continue label$27
          }
          break label$27;
         };
         $11_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
        }
        HEAP8[($5_1 + 92 | 0) >> 0] = $7_1 & ($11_1 | 0) != (0 | 0) | 0;
        label$36 : {
         if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$36
         }
         if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$36
         }
         HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
         $827(16700 | 0, $5_1 + 16 | 0 | 0);
        }
        label$37 : {
         switch ($9_1 + -12 | 0 | 0) {
         case 0:
          $212($0_1 | 0, $8_1 | 0, 44960 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0, $3_1 | 0);
          break label$24;
         case 4:
          break label$37;
         default:
          break label$24;
         };
        }
        $212($0_1 | 0, $8_1 | 0, 44992 | 0, $2_1 | 0, $5_1 + 64 | 0 | 0, $3_1 | 0);
       }
       label$39 : {
        label$40 : {
         switch ((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + -3 | 0 | 0) {
         case 1:
          $4_1 = HEAP32[$8_1 >> 2] | 0;
          if (!$4_1) {
           break label$39
          }
          $11_1 = 0;
          $7_1 = 0;
          label$42 : while (1) {
           label$43 : {
            label$44 : {
             switch (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) {
             case 2:
              $11_1 = 1;
              break label$43;
             case 0:
              break label$44;
             default:
              break label$43;
             };
            }
            $7_1 = 1;
           }
           label$46 : {
            if (!($7_1 & 1 | 0)) {
             break label$46
            }
            if (!($11_1 & 1 | 0)) {
             break label$46
            }
            HEAP32[($8_1 + 12 | 0) >> 2] = 5;
           }
           $4_1 = HEAP32[$4_1 >> 2] | 0;
           if ($4_1) {
            continue label$42
           }
           break label$39;
          };
         case 0:
         case 4:
          break label$40;
         default:
          break label$39;
         };
        }
        $4_1 = HEAP32[$8_1 >> 2] | 0;
        if (!$4_1) {
         break label$39
        }
        label$47 : {
         label$48 : while (1) {
          if (!(HEAP32[($4_1 + 4 | 0) >> 2] | 0)) {
           break label$47
          }
          $4_1 = HEAP32[$4_1 >> 2] | 0;
          if (!$4_1) {
           break label$39
          }
          continue label$48;
         };
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = 5;
       }
       label$49 : {
        if (!$6_1) {
         break label$49
        }
        $213($0_1 | 0, $6_1 | 0);
       }
       if (HEAP32[$8_1 >> 2] | 0) {
        break label$6
       }
       $6_1 = $8_1;
      }
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) != (18 | 0)) {
       continue label$7
      }
      break label$3;
     };
    }
    $6_1 = 0;
    break label$3;
   }
   $8_1 = 0;
  }
  label$50 : {
   $13_1 = $5_1 + 256 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return ($8_1 ? $8_1 : $6_1) | 0;
 }
 
 function $206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $11$hi = 0, $11_1 = 0, i64toi32_i32$5 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $78$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if ($4_1) {
      break label$5
     }
     $4_1 = $234(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
     if (!$4_1) {
      break label$4
     }
    }
    $237($4_1 | 0, $1_1 | 0);
    i64toi32_i32$0 = 0;
    $11_1 = 0;
    $11$hi = i64toi32_i32$0;
    $5_1 = $3_1 + 20 | 0;
    $6_1 = $3_1 + 16 | 0;
    label$6 : while (1) {
     i64toi32_i32$0 = $11$hi;
     $4_1 = $50($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 8192 | 0, $3_1 + 28 | 0 | 0) | 0;
     label$7 : {
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$7
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$7
      }
      i64toi32_i32$0 = $11$hi;
      $1_1 = $11_1;
      $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
      label$8 : {
       label$9 : {
        if ($4_1) {
         break label$9
        }
        $8_1 = 0;
        break label$8;
       }
       $8_1 = $756($4_1 | 0) | 0;
      }
      HEAP32[$5_1 >> 2] = $8_1;
      HEAP32[$6_1 >> 2] = $4_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = 8192;
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$3_1 >> 2] = $0_1;
      $827(17508 | 0, $3_1 | 0);
     }
     label$10 : {
      label$11 : {
       if ($4_1) {
        break label$11
       }
       $4_1 = $240(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       break label$10;
      }
      $1_1 = $756($4_1 | 0) | 0;
      $4_1 = $239(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0, $3_1 + 24 | 0 | 0) | 0;
      if ($4_1) {
       break label$10
      }
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = 0;
      $78$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1 + $1_1 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + $78$hi | 0;
      if (i64toi32_i32$4 >>> 0 < $1_1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $11_1 = i64toi32_i32$4;
      $11$hi = i64toi32_i32$5;
      if (HEAP32[($3_1 + 24 | 0) >> 2] | 0) {
       continue label$6
      }
     }
     break label$6;
    };
    $236(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
    $1_1 = 0;
    if (!$4_1) {
     break label$3
    }
    label$12 : {
     $1_1 = $813(40 | 0) | 0;
     if (!$1_1) {
      break label$12
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = 1;
     HEAP32[($1_1 + 32 | 0) >> 2] = 18;
     $214($1_1 | 0, 1 | 0);
     label$13 : {
      label$14 : {
       switch (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) {
       case 1:
        if (HEAP32[($1_1 + 16 | 0) >> 2] | 0) {
         break label$13
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAPU16[($4_1 + 26 | 0) >> 1] | 0, 1e3);
        break label$13;
       case 0:
        break label$14;
       default:
        break label$13;
       };
      }
      HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 32 | 0) >> 2] | 0, 1e3);
     }
     $215($1_1 | 0, $4_1 | 0);
     break label$3;
    }
    $815($4_1 | 0);
   }
   $1_1 = 0;
  }
  label$16 : {
   $10_1 = $3_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $1_1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 | 0;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 0;
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = $0_1 + $4_1 | 0;
    if (!(HEAPU8[$5_1 >> 0] | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP32[(HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + 1 | 0;
     break label$4;
    }
    HEAP8[$5_1 >> 0] = 0;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$6 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$2_1 >> 2] = $3_1;
   $827(16724 | 0, $2_1 | 0);
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = 0;
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = $0_1 + $4_1 | 0;
    if (!(HEAPU8[$5_1 >> 0] | 0)) {
     break label$4
    }
    $6_1 = $198(HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $6_1;
    $3_1 = $3_1 + $6_1 | 0;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$2_1 >> 2] = $1_1 ? $1_1 : 16372;
   $827(16761 | 0, $2_1 | 0);
  }
  label$6 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $210($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $12_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $13_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $4_1 = 0;
  $5_1 = 4;
  label$3 : while (1) {
   label$4 : {
    if (!(HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0)) {
     break label$4
    }
    $6_1 = HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $5_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $6_1 : $5_1;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (18 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$5 : {
   label$6 : {
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $5_1 | 0, $3_1 + 12 | 0 | 0) | 0;
    if (!$1_1) {
     break label$6
    }
    $6_1 = 0;
    $4_1 = 0;
    label$7 : while (1) {
     label$8 : {
      $5_1 = $0_1 + $4_1 | 0;
      if (!(HEAPU8[$5_1 >> 0] | 0)) {
       break label$8
      }
      $762($3_1 + 16 | 0 | 0, $1_1 | 0);
      label$9 : {
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[(($4_1 << 2 | 0) + 15152 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1 + 16 | 0) | 0)) {
        break label$9
       }
       $6_1 = $6_1 + 1 | 0;
       break label$8;
      }
      HEAP8[$5_1 >> 0] = 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (18 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $735($1_1 | 0);
    break label$5;
   }
   i64toi32_i32$0 = $0_1;
   i64toi32_i32$1 = 0;
   $13_1 = 0;
   HEAP8[$0_1 >> 0] = $13_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
   HEAP8[($0_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
   HEAP8[($0_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
   HEAP8[($0_1 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[($0_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[($0_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[($0_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   $6_1 = 0;
   $15_1 = $0_1 + 16 | 0;
   $16_1 = 0;
   HEAP8[$15_1 >> 0] = $16_1;
   HEAP8[($15_1 + 1 | 0) >> 0] = $16_1 >>> 8 | 0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   $12_1 = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   $14_1 = 0;
   HEAP8[$12_1 >> 0] = $14_1;
   HEAP8[($12_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($12_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($12_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   HEAP8[($12_1 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[($12_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[($12_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[($12_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  }
  label$10 : {
   if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$3_1 >> 2] = $6_1;
   $827(16804 | 0, $3_1 | 0);
  }
  label$11 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $211($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0, $11$hi = 0, $11_1 = 0, $8_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $13$hi = 0, $12_1 = 0, $13_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $10_1 = 0, $9_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $54_1 = 0, $54$hi = 0, $56_1 = 0, $56$hi = 0, $70$hi = 0, $77$hi = 0, $85_1 = 0, $81$hi = 0, $98_1 = 0, $101_1 = 0, $134_1 = 0, $134$hi = 0, $136_1 = 0, $136$hi = 0, $150_1 = 0, $152_1 = 0, $153_1 = 0, $153$hi = 0, $207_1 = 0, $207$hi = 0, $209_1 = 0, $209$hi = 0, $211$hi = 0, $215$hi = 0, $86_1 = 0, $224_1 = 0, $224$hi = 0, $226_1 = 0, $226$hi = 0, $228$hi = 0, $232$hi = 0, $87_1 = 0, $268_1 = 0, $269_1 = 0, $270_1 = 0, $271_1 = 0, $274_1 = 0, $274$hi = 0, $277_1 = 0, $277$hi = 0, $279_1 = 0, $279$hi = 0, $281_1 = 0, $282_1 = 0, $283_1 = 0, $284_1 = 0, $286_1 = 0, $286$hi = 0, $291$hi = 0, $88_1 = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $326$hi = 0, $328$hi = 0, $89_1 = 0;
  label$1 : {
   $5_1 = global$0 - 160 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1186 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$3_1) {
      break label$7
     }
     if (!$2_1) {
      break label$6
     }
     if (!$1_1) {
      break label$5
     }
     $6_1 = 0;
     label$8 : {
      if (FUNCTION_TABLE[HEAP32[($1_1 + 8 | 0) >> 2] | 0]($1_1, $5_1 + 104 | 0, $5_1 + 96 | 0) | 0) {
       break label$8
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      if ($221($0_1 | 0, $2_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $5_1 + 144 | 0 | 0) | 0) {
       break label$8
      }
      $50_1 = $0_1;
      $51_1 = $2_1;
      $52_1 = $3_1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $54_1 = i64toi32_i32$1;
      $54$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      $56_1 = i64toi32_i32$0;
      $56$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $54$hi;
      i64toi32_i32$2 = $54_1;
      i64toi32_i32$0 = $56$hi;
      i64toi32_i32$3 = $56_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$2 = 0;
      i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      if ($221($50_1 | 0, $51_1 | 0, $52_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, $5_1 + 112 | 0 | 0) | 0) {
       break label$8
      }
      $1_1 = 8192;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$5;
      $11$hi = i64toi32_i32$2;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         i64toi32_i32$1 = $5_1;
         i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
         $12_1 = i64toi32_i32$2;
         $12$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $13_1 = $1_1;
         $13$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $12$hi;
         i64toi32_i32$1 = i64toi32_i32$2;
         i64toi32_i32$2 = $13$hi;
         i64toi32_i32$3 = $1_1;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $70$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $11$hi;
         i64toi32_i32$4 = $70$hi;
         i64toi32_i32$5 = i64toi32_i32$0;
         i64toi32_i32$1 = $11$hi;
         i64toi32_i32$3 = $11_1;
         if ((i64toi32_i32$4 | 0) > (i64toi32_i32$1 | 0)) {
          $79_1 = 1
         } else {
          if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $80_1 = 0
           } else {
            $80_1 = 1
           }
           $81_1 = $80_1;
          } else {
           $81_1 = 0
          }
          $79_1 = $81_1;
         }
         if ($79_1) {
          break label$11
         }
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$5 = $13$hi;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$4 = $13$hi;
         i64toi32_i32$1 = $13_1;
         i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
         i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
         i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
         i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
         $11_1 = i64toi32_i32$2;
         $11$hi = i64toi32_i32$0;
         break label$10;
        }
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $77$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $77$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$1 = $12_1;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 4 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $85_1 = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($85_1 | 0, i64toi32_i32$2 | 0, 3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $81$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = $81$hi;
        i64toi32_i32$3 = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$4;
       }
       label$12 : {
        i64toi32_i32$4 = $11$hi;
        if (!($221($0_1 | 0, $2_1 | 0, $3_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, $5_1 + 128 | 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$2 = ($5_1 + 112 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $98_1 = i64toi32_i32$4;
        i64toi32_i32$4 = ($5_1 + 128 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $98_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
        $101_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $5_1;
        HEAP32[($5_1 + 128 | 0) >> 2] = $101_1;
        HEAP32[($5_1 + 132 | 0) >> 2] = i64toi32_i32$4;
        $6_1 = $1_1 >>> 0 < 2097152 >>> 0;
        $1_1 = $1_1 << 1 | 0;
        if ($6_1) {
         continue label$9
        }
       }
       break label$9;
      };
      $6_1 = 0;
      label$13 : {
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
       HEAP32[($5_1 + 80 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[($5_1 + 84 | 0) >> 2] = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$3 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
       HEAP32[($5_1 + 64 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
       HEAP32[($5_1 + 72 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[($5_1 + 76 | 0) >> 2] = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
       $827(16864 | 0, $5_1 + 64 | 0 | 0);
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$3;
      $134$hi = i64toi32_i32$4;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$4 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
      $136_1 = i64toi32_i32$4;
      $136$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $134$hi;
      i64toi32_i32$2 = $134_1;
      i64toi32_i32$4 = $136$hi;
      i64toi32_i32$1 = $136_1;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$4 | 0)) {
       $82_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         $83_1 = 0
        } else {
         $83_1 = 1
        }
        $84_1 = $83_1;
       } else {
        $84_1 = 0
       }
       $82_1 = $84_1;
      }
      if ($82_1) {
       break label$8
      }
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$3 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
      $12_1 = i64toi32_i32$3;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$3 = $12$hi;
      $6_1 = $222($5_1 + 144 | 0 | 0, $5_1 + 128 | 0 | 0, $11_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$3 | 0) | 0;
      $150_1 = $5_1 + 144 | 0;
      $152_1 = $5_1 + 112 | 0;
      i64toi32_i32$3 = i64toi32_i32$2;
      $153_1 = $11_1;
      $153$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 2 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $153$hi;
      i64toi32_i32$1 = $13$hi;
      $1_1 = $222($150_1 | 0, $152_1 | 0, $153_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$0 = $12$hi;
      $7_1 = $222($5_1 + 112 | 0 | 0, $5_1 + 128 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
      label$14 : {
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($5_1 + 48 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 36 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
       HEAP32[($5_1 + 44 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 40 | 0) >> 2] = $7_1 + $1_1 | 0;
       $827(16932 | 0, $5_1 + 32 | 0 | 0);
      }
      label$15 : {
       label$16 : {
        $8_1 = $6_1 >>> 4 | 0;
        $1_1 = $7_1 + $1_1 | 0;
        if (Math_imul($8_1, 9) >>> 0 > $1_1 >>> 0) {
         break label$16
        }
        if (Math_imul($8_1, 21) >>> 0 >= $1_1 >>> 0) {
         break label$15
        }
       }
       $1_1 = 0;
       $7_1 = 0;
       label$17 : {
        $6_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
        $8_1 = HEAP32[($5_1 + 144 | 0) >> 2] | 0;
        if ($6_1 >>> 0 <= $8_1 >>> 0) {
         break label$17
        }
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        $207_1 = i64toi32_i32$0;
        $207$hi = i64toi32_i32$1;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 152 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
        $209_1 = i64toi32_i32$1;
        $209$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $207$hi;
        i64toi32_i32$3 = $207_1;
        i64toi32_i32$1 = $209$hi;
        i64toi32_i32$4 = $209_1;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$5 | 0, 36e4 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $211$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $215$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $211$hi;
        $86_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $215$hi;
        i64toi32_i32$3 = __wasm_i64_sdiv($86_1 | 0, i64toi32_i32$5 | 0, $6_1 - $8_1 | 0 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$3;
       }
       label$18 : {
        $8_1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
        if ($8_1 >>> 0 <= $6_1 >>> 0) {
         break label$18
        }
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$5 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
        $224_1 = i64toi32_i32$5;
        $224$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
        $226_1 = i64toi32_i32$3;
        $226$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $224$hi;
        i64toi32_i32$0 = $224_1;
        i64toi32_i32$3 = $226$hi;
        i64toi32_i32$4 = $226_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 36e4 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $228$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $232$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $228$hi;
        $87_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $232$hi;
        i64toi32_i32$0 = __wasm_i64_sdiv($87_1 | 0, i64toi32_i32$2 | 0, $8_1 - $6_1 | 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $1_1 = i64toi32_i32$0;
       }
       label$19 : {
        if (!(HEAP32[($4_1 + 40 | 0) >> 2] | 0)) {
         break label$19
        }
        if (!(HEAP32[($4_1 + 32 | 0) >> 2] | 0)) {
         break label$19
        }
        $6_1 = $7_1 >>> 0 > $1_1 >>> 0;
        $8_1 = (Math_imul(HEAP32[($4_1 + 36 | 0) >> 2] | 0, $6_1 ? $1_1 : $7_1) >>> 0) / (100 >>> 0) | 0;
        label$20 : {
         if (!$7_1) {
          break label$20
         }
         if (!$1_1) {
          break label$20
         }
         if ((($6_1 ? $7_1 - $1_1 | 0 : $1_1 - $7_1 | 0) | 0) <= ($8_1 | 0)) {
          break label$19
         }
        }
        $268_1 = $0_1;
        $269_1 = $2_1;
        $270_1 = $3_1;
        $271_1 = $4_1;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$2 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$0;
        $274_1 = i64toi32_i32$2;
        $274$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $277_1 = i64toi32_i32$0;
        $277$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $277$hi;
        i64toi32_i32$4 = $277_1;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_sdiv(i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $279_1 = i64toi32_i32$5;
        $279$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $274$hi;
        i64toi32_i32$5 = $279$hi;
        $7_1 = $223($268_1 | 0, $269_1 | 0, $270_1 | 0, $271_1 | 0, $274_1 | 0, i64toi32_i32$1 | 0, $279_1 | 0, i64toi32_i32$5 | 0, 1 | 0) | 0;
        $281_1 = $0_1;
        $282_1 = $2_1;
        $283_1 = $3_1;
        $284_1 = $4_1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$5 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $286_1 = i64toi32_i32$5;
        $286$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $286$hi;
        i64toi32_i32$2 = $286_1;
        i64toi32_i32$1 = $11$hi;
        i64toi32_i32$4 = $11_1;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        i64toi32_i32$2 = 0;
        i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 2 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $291$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $291$hi;
        $88_1 = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        $1_1 = $223($281_1 | 0, $282_1 | 0, $283_1 | 0, $284_1 | 0, $88_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$2 | 0, 1 | 0) | 0;
       }
       $3_1 = $1_1 + -245760 | 0;
       label$21 : {
        label$22 : {
         label$23 : {
          $6_1 = $7_1 + -245760 | 0;
          if ($6_1 >>> 0 < 40714241 >>> 0) {
           break label$23
          }
          $2_1 = $1_1;
          if ($3_1 >>> 0 < 40714241 >>> 0) {
           break label$22
          }
         }
         label$24 : {
          if ($6_1 >>> 0 > 40714240 >>> 0) {
           break label$24
          }
          $2_1 = $7_1;
          if ($3_1 >>> 0 > 40714240 >>> 0) {
           break label$22
          }
         }
         $2_1 = $1_1 ? ($7_1 ? ($7_1 >>> 0 < $1_1 >>> 0 ? $7_1 : $1_1) : $1_1) : $7_1;
         if ($2_1) {
          break label$22
         }
         $6_1 = 0;
         break label$21;
        }
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$2 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$2;
        $322$hi = i64toi32_i32$3;
        i64toi32_i32$5 = $5_1;
        i64toi32_i32$3 = HEAP32[($5_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($5_1 + 108 | 0) >> 2] | 0;
        $324_1 = i64toi32_i32$3;
        $324$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $322$hi;
        i64toi32_i32$5 = $322_1;
        i64toi32_i32$3 = $324$hi;
        i64toi32_i32$4 = $324_1;
        i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 8e3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $326$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $328$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $326$hi;
        $89_1 = i64toi32_i32$5;
        i64toi32_i32$5 = $328$hi;
        i64toi32_i32$5 = __wasm_i64_sdiv($89_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $6_1 = i64toi32_i32$5;
       }
       if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
       HEAP32[$5_1 >> 2] = $0_1;
       $827(16991 | 0, $5_1 | 0);
       break label$8;
      }
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $6_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      $827(17086 | 0, $5_1 + 16 | 0 | 0);
     }
     label$25 : {
      $10_1 = $5_1 + 160 | 0;
      if ($10_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $10_1;
     }
     return $6_1 | 0;
    }
    $859(16843 | 0, 15069 | 0, 1187 | 0);
    abort();
   }
   $859(16860 | 0, 15069 | 0, 1188 | 0);
   abort();
  }
  $859(16277 | 0, 15069 | 0, 1189 | 0);
  abort();
 }
 
 function $212($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $13_1 = 0, $8_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, $21_1 = 0, $20_1 = 0, $185_1 = 0;
  label$1 : {
   $6_1 = global$0 - 48 | 0;
   $20_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  $7_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : while (1) {
       label$8 : {
        if ((HEAP32[(($7_1 << 2 | 0) + 15152 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$8
        }
        label$9 : {
         $8_1 = ($0_1 + ($7_1 << 2 | 0) | 0) + 16 | 0;
         $7_1 = HEAP32[$8_1 >> 2] | 0;
         if ($7_1) {
          break label$9
         }
         $7_1 = FUNCTION_TABLE[HEAP32[($2_1 + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
         HEAP32[$8_1 >> 2] = $7_1;
         if ($7_1) {
          break label$9
         }
         if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$3
         }
         HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$6_1 >> 2] = $0_1;
         $827(17292 | 0, $6_1 | 0);
         break label$3;
        }
        $9_1 = FUNCTION_TABLE[HEAP32[($2_1 + 24 | 0) >> 2] | 0]($7_1, $3_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0, $4_1) | 0;
        if (!$9_1) {
         break label$3
        }
        if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$4
        }
        label$10 : {
         if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
          break label$10
         }
         HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($9_1 + 20 | 0) >> 2] | 0;
        }
        label$11 : {
         if (HEAP32[($1_1 + 16 | 0) >> 2] | 0) {
          break label$11
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
        }
        $10_1 = HEAP32[$9_1 >> 2] | 0;
        if (!$10_1) {
         break label$5
        }
        $11_1 = 0;
        $12_1 = 0;
        label$12 : while (1) {
         label$13 : {
          label$14 : {
           if (($10_1 | 0) != (HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0)) {
            break label$14
           }
           i64toi32_i32$1 = $9_1;
           i64toi32_i32$0 = 0;
           HEAP32[$9_1 >> 2] = 0;
           HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $13_1 = 0;
           break label$13;
          }
          $13_1 = HEAP32[$10_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $13_1;
         }
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             $7_1 = HEAP32[$1_1 >> 2] | 0;
             if (!$7_1) {
              break label$18
             }
             $14_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
             $3_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
             $0_1 = 0;
             label$19 : {
              label$20 : while (1) {
               $15_1 = $0_1;
               $4_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
               $16_1 = ($3_1 ^ $4_1 | 0) & 8191 | 0;
               label$21 : {
                label$22 : {
                 $17_1 = ($4_1 | 0) == ($3_1 | 0);
                 if ($17_1) {
                  break label$22
                 }
                 if (($14_1 | 0) == (4 | 0) & !$16_1 | 0) {
                  break label$22
                 }
                 $0_1 = $15_1;
                 break label$21;
                }
                $18_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
                label$23 : {
                 label$24 : {
                  $19_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                  if (($19_1 | 0) == (4 | 0)) {
                   break label$24
                  }
                  if (($19_1 | 0) != ($18_1 | 0)) {
                   break label$23
                  }
                 }
                 $0_1 = 1;
                 label$25 : {
                  switch ($19_1 | 0) {
                  case 4:
                   HEAP32[($7_1 + 4 | 0) >> 2] = $18_1;
                   label$28 : {
                    switch (HEAP32[($10_1 + 4 | 0) >> 2] | 0 | 0) {
                    case 0:
                     break label$17;
                    case 1:
                     break label$28;
                    default:
                     break label$16;
                    };
                   }
                   $973($7_1 + 20 | 0 | 0, $10_1 + 20 | 0 | 0, 44 | 0) | 0;
                   break label$16;
                  case 0:
                   $0_1 = $10_1 + 20 | 0;
                   $3_1 = $7_1 + 20 | 0;
                   label$29 : {
                    label$30 : {
                     $4_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                     if (!$4_1) {
                      break label$30
                     }
                     if (($4_1 | 0) == (HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0)) {
                      break label$30
                     }
                     if (!(HEAPU8[($5_1 + 57 | 0) >> 0] | 0)) {
                      break label$29
                     }
                     if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$30
                     }
                     $4_1 = HEAP32[$3_1 >> 2] | 0;
                     HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
                     HEAP32[($6_1 + 16 | 0) >> 2] = $4_1;
                     $827(17360 | 0, $6_1 + 16 | 0 | 0);
                    }
                    $973($3_1 | 0, $0_1 | 0, 304 | 0) | 0;
                   }
                   $0_1 = 0;
                   label$31 : {
                    $3_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
                    if (($3_1 | 0) < (1 | 0)) {
                     break label$31
                    }
                    label$32 : while (1) {
                     $3_1 = $0_1 << 3 | 0;
                     i64toi32_i32$2 = ($7_1 + $3_1 | 0) + 68 | 0;
                     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                     $185_1 = i64toi32_i32$0;
                     i64toi32_i32$0 = ($10_1 + $3_1 | 0) + 68 | 0;
                     HEAP32[i64toi32_i32$0 >> 2] = $185_1;
                     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                     $0_1 = $0_1 + 1 | 0;
                     $3_1 = HEAP32[($7_1 + 316 | 0) >> 2] | 0;
                     if (($0_1 | 0) < ($3_1 | 0)) {
                      continue label$32
                     }
                     break label$32;
                    };
                   }
                   HEAP32[($10_1 + 316 | 0) >> 2] = $3_1;
                   break label$16;
                  case 1:
                   break label$25;
                  default:
                   break label$21;
                  };
                 }
                 label$33 : {
                  label$34 : {
                   if ($17_1) {
                    break label$34
                   }
                   if (($14_1 | 0) != (4 | 0)) {
                    break label$34
                   }
                   if (!$16_1) {
                    break label$33
                   }
                  }
                  if (($4_1 | 0) != ($3_1 | 0)) {
                   break label$16
                  }
                  $0_1 = $10_1 + 20 | 0;
                  $3_1 = $7_1 + 20 | 0;
                  label$35 : {
                   label$36 : {
                    $7_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                    if (!$7_1) {
                     break label$36
                    }
                    $4_1 = HEAP32[($10_1 + 20 | 0) >> 2] | 0;
                    if (($7_1 | 0) != ($4_1 | 0)) {
                     break label$35
                    }
                   }
                   $973($3_1 | 0, $0_1 | 0, 44 | 0) | 0;
                   break label$16;
                  }
                  label$37 : {
                   if (($7_1 | 0) != (131 | 0)) {
                    break label$37
                   }
                   if (($4_1 | 0) != (130 | 0)) {
                    break label$37
                   }
                   HEAP32[($973($3_1 | 0, $0_1 | 0, 44 | 0) | 0) >> 2] = 131;
                   break label$16;
                  }
                  if (!(HEAPU8[($5_1 + 57 | 0) >> 0] | 0)) {
                   break label$16
                  }
                  label$38 : {
                   if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$38
                   }
                   $7_1 = HEAP32[$3_1 >> 2] | 0;
                   HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
                   HEAP32[($6_1 + 32 | 0) >> 2] = $7_1;
                   $827(17434 | 0, $6_1 + 32 | 0 | 0);
                  }
                  $973($3_1 | 0, $0_1 | 0, 44 | 0) | 0;
                  break label$16;
                 }
                 $4_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                 $16_1 = HEAP32[($10_1 + 20 | 0) >> 2] | 0;
                 $0_1 = $15_1 | ($4_1 | 0) == ($16_1 | 0) | 0;
                 if (($4_1 | 0) != ($16_1 | 0)) {
                  break label$21
                 }
                 break label$19;
                }
                $0_1 = $15_1 | ($18_1 | 0) == (4 | 0) | 0;
               }
               $7_1 = HEAP32[$7_1 >> 2] | 0;
               if ($7_1) {
                continue label$20
               }
               break label$20;
              };
             }
             if ($0_1 & 1 | 0) {
              break label$16
             }
            }
            HEAP32[$10_1 >> 2] = $12_1;
            $11_1 = $11_1 ? $11_1 : $10_1;
            $12_1 = $10_1;
            break label$15;
           }
           $973($7_1 + 20 | 0 | 0, $10_1 + 20 | 0 | 0, 304 | 0) | 0;
          }
          $815($10_1 | 0);
          $13_1 = HEAP32[$9_1 >> 2] | 0;
         }
         $10_1 = $13_1;
         if (!$10_1) {
          break label$6
         }
         continue label$12;
        };
       }
       $7_1 = $7_1 + 1 | 0;
       if (($7_1 | 0) != (18 | 0)) {
        continue label$7
       }
       break label$3;
      };
     }
     if (!$12_1) {
      break label$5
     }
     $0_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     label$39 : while (1) {
      $7_1 = $12_1;
      $12_1 = 0;
      $3_1 = 0;
      label$40 : {
       if (($7_1 | 0) == ($11_1 | 0)) {
        break label$40
       }
       $12_1 = HEAP32[$7_1 >> 2] | 0;
       $3_1 = $11_1;
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = -1;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[($0_1 ? $0_1 : $1_1) >> 2] = $7_1;
      $0_1 = $7_1;
      $11_1 = $3_1;
      if ($12_1) {
       continue label$39
      }
      break label$39;
     };
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
    }
    $7_1 = HEAP32[($9_1 + 36 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$4
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = $7_1;
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 28 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $9_1);
  }
  label$41 : {
   $21_1 = $6_1 + 48 | 0;
   if ($21_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $21_1;
  }
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (15008 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 88 | 0, $0_1 | 0, 15008 | 0, 15069 | 0, 1633 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
             switch ($2_1 + -36864 | 0 | 0) {
             case 0:
              break label$10;
             case 2:
              break label$11;
             case 1:
              break label$12;
             default:
              break label$13;
             };
            }
            if (($2_1 | 0) != (32768 | 0)) {
             break label$8
            }
            $3_1 = 31084;
            break label$9;
           }
           $3_1 = 46008;
           break label$9;
          }
          $3_1 = 42528;
          break label$9;
         }
         $3_1 = 45976;
        }
        $2_1 = 0;
        label$14 : while (1) {
         if ((HEAP32[(($2_1 << 2 | 0) + 15152 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
          break label$5
         }
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != (18 | 0)) {
          continue label$14
         }
         break label$4;
        };
       }
       if (($2_1 | 0) != (37119 | 0)) {
        break label$6
       }
       break label$4;
      }
      $859(16401 | 0, 15069 | 0, 1634 | 0);
      abort();
     }
     label$15 : {
      if ($2_1 >>> 0 < 19 >>> 0) {
       break label$15
      }
      $859(16408 | 0, 15069 | 0, 1657 | 0);
      abort();
     }
     if (($2_1 | 0) == (18 | 0)) {
      break label$4
     }
    }
    $2_1 = $2_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 16 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 15152 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1, $1_1);
    return;
   }
   $217($2_1 | 0, $1_1 | 0);
   return;
  }
  $859(16445 | 0, 15069 | 0, 1671 | 0);
  abort();
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$1_1) {
        break label$6
       }
       $3_1 = 1;
       label$8 : {
        $4_1 = HEAP32[$0_1 >> 2] | 0;
        if (!$4_1) {
         break label$8
        }
        $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        $6_1 = $4_1;
        label$9 : while (1) {
         label$10 : {
          if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
           break label$10
          }
          if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          label$11 : {
           if (!($834(61912 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
           $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
           HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
           HEAP32[($2_1 + 8 | 0) >> 2] = $6_1;
           HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
           HEAP32[$2_1 >> 2] = $0_1;
           $827(16479 | 0, $2_1 | 0);
          }
          $815($1_1 | 0);
          break label$3;
         }
         $6_1 = HEAP32[$6_1 >> 2] | 0;
         if ($6_1) {
          continue label$9
         }
         break label$9;
        };
        if (!$4_1) {
         break label$8
        }
        label$12 : {
         label$13 : {
          $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if ($5_1 >>> 0 <= $3_1 >>> 0) {
           break label$13
          }
          $7_1 = 0;
          $3_1 = 1;
          break label$12;
         }
         $6_1 = $4_1;
         label$14 : {
          label$15 : {
           label$16 : while (1) {
            $8_1 = $5_1;
            $7_1 = $6_1;
            $6_1 = HEAP32[$6_1 >> 2] | 0;
            if (!$6_1) {
             break label$15
            }
            $5_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
            if ($5_1 >>> 0 > $3_1 >>> 0) {
             break label$14
            }
            continue label$16;
           };
          }
          $3_1 = ($8_1 | 0) != ($3_1 | 0);
          break label$5;
         }
         $3_1 = ($8_1 | 0) != ($3_1 | 0);
        }
        if ($7_1) {
         break label$5
        }
       }
       HEAP32[$1_1 >> 2] = $4_1;
       label$17 : {
        if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
         break label$17
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
       }
       HEAP32[$0_1 >> 2] = $1_1;
       HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
       if (!$3_1) {
        break label$3
       }
       break label$4;
      }
      $859(16401 | 0, 15069 | 0, 1725 | 0);
      abort();
     }
     $859(16469 | 0, 15069 | 0, 1726 | 0);
     abort();
    }
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
    label$18 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break label$18
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    }
    HEAP32[$7_1 >> 2] = $1_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
    if (!$3_1) {
     break label$3
    }
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  }
  label$19 : {
   $10_1 = $2_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 64 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 16843009;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 524288;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 56 | 0) >> 1] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = 0;
       break label$4;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
     }
     $815($2_1 | 0);
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $815($1_1 | 0);
   return;
  }
  $859(16401 | 0, 15069 | 0, 1701 | 0);
  abort();
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 328 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4;
 }
 
 function $219($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 304 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 300 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $220() {
  return 18 | 0;
 }
 
 function $221($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $11_1 = 0, $10_1 = 0, $9_1 = 0, $16_1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $16$hi = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $37_1 = 0, $39$hi = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $14_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[HEAP32[(HEAP32[$2_1 >> 2] | 0) >> 2] | 0]($2_1, $3_1, i64toi32_i32$0);
  HEAP32[$4_1 >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = $5_1 + 40 | 0;
  $7_1 = $5_1 + 36 | 0;
  $8_1 = $5_1 + 32 | 0;
  $9_1 = 0;
  label$3 : {
   label$4 : while (1) {
    $37_1 = $1_1;
    i64toi32_i32$0 = 0;
    $39$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $39$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$4 = $9_1 + $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + $3$hi | 0;
    if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$5;
    $10_1 = $50($37_1 | 0, $16_1 | 0, i64toi32_i32$5 | 0, 8192 | 0, $5_1 + 76 | 0 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$5 = $16$hi;
     $11_1 = $16_1;
     $12_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       if ($10_1) {
        break label$7
       }
       $13_1 = 0;
       break label$6;
      }
      $13_1 = $756($10_1 | 0) | 0;
     }
     HEAP32[$6_1 >> 2] = $13_1;
     HEAP32[$7_1 >> 2] = $10_1;
     HEAP32[$8_1 >> 2] = $12_1;
     HEAP32[($5_1 + 28 | 0) >> 2] = 8192;
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     HEAP32[($5_1 + 20 | 0) >> 2] = $11_1;
     HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
     $827(17154 | 0, $5_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!$10_1) {
      break label$8
     }
     $12_1 = $756($10_1 | 0) | 0;
     $762($5_1 + 56 | 0 | 0, $10_1 | 0);
     $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 4 | 0) >> 2] | 0]($2_1, $5_1 + 56 | 0, $4_1) | 0;
     label$9 : {
      if ((HEAP8[(0 + 61912 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 61912 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$2;
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[i64toi32_i32$0 >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[($5_1 + 4 | 0) >> 2] = $11_1;
      HEAP32[$5_1 >> 2] = $0_1;
      $827(17231 | 0, $5_1 | 0);
     }
     $735($10_1 | 0);
     label$10 : {
      if (!$11_1) {
       break label$10
      }
      if (($11_1 | 0) != (1 | 0)) {
       break label$3
      }
      $11_1 = 0;
      break label$3;
     }
     $9_1 = $12_1 + $9_1 | 0;
     if ($9_1 >>> 0 < 4194304 >>> 0) {
      continue label$4
     }
    }
    break label$4;
   };
   $11_1 = -1;
  }
  label$11 : {
   $15_1 = $5_1 + 80 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $11_1 | 0;
 }
 
 function $222($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $6_1 = 0, $7$hi = 0, i64toi32_i32$6 = 0, $4_1 = 0, $5_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $7_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $28$hi = 0, $30$hi = 0, $31_1 = 0, $38_1 = 0, $38$hi = 0, $40_1 = 0, $40$hi = 0;
  $4_1 = 0;
  label$1 : {
   $5_1 = (HEAP32[$1_1 >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $25_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $26_1 = 0
     } else {
      $26_1 = 1
     }
     $27_1 = $26_1;
    } else {
     $27_1 = 0
    }
    $25_1 = $27_1;
   }
   if ($25_1) {
    break label$1
   }
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
    $28_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0) {
      $29_1 = 0
     } else {
      $29_1 = 1
     }
     $30_1 = $29_1;
    } else {
     $30_1 = 0
    }
    $28_1 = $30_1;
   }
   if ($28_1) {
    break label$1
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $28$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   $30$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $28$hi;
   $31_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $30$hi;
   i64toi32_i32$1 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$5 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
   if (!i64toi32_i32$1) {
    break label$1
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $38_1 = i64toi32_i32$3;
   $38$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $40_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
   $40$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $38$hi;
   i64toi32_i32$5 = $40$hi;
   i64toi32_i32$5 = __wasm_i64_sdiv($38_1 | 0, i64toi32_i32$3 | 0, $40_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $4_1 = i64toi32_i32$5;
  }
  return $4_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $15$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $16$hi = 0, $17$hi = 0, $15_1 = 0, $14$hi = 0, $16_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $49_1 = 0, $14_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $17_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $13_1 = 0, $12_1 = 0, $34$hi = 0, $37_1 = 0, $37$hi = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $88$hi = 0, $92$hi = 0, $59_1 = 0, $103$hi = 0, $107$hi = 0, $60_1 = 0;
  label$1 : {
   $7_1 = global$0 - 48 | 0;
   $12_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $8_1 = 0;
  label$3 : {
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $41_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $42_1 = 0
     } else {
      $42_1 = 1
     }
     $43_1 = $42_1;
    } else {
     $43_1 = 0
    }
    $41_1 = $43_1;
   }
   if ($41_1) {
    break label$3
   }
   label$4 : {
    if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) <= ($6_1 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $3_1 + 44 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = 0;
    $37_1 = i64toi32_i32$5;
    $37$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$5 = $37$hi;
    i64toi32_i32$1 = $37_1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $49_1 = $45_1;
     } else {
      $49_1 = 0
     }
     $44_1 = $49_1;
    }
    if ($44_1) {
     break label$4
    }
    i64toi32_i32$2 = $4$hi;
    if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, $7_1 + 32 | 0 | 0) | 0) {
     break label$3
    }
    $46_1 = $0_1;
    $47_1 = $1_1;
    $48_1 = $2_1;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_sdiv(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 2 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $14_1 = i64toi32_i32$1;
    $14$hi = i64toi32_i32$4;
    if ($221($46_1 | 0, $47_1 | 0, $48_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, $7_1 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$4 = $5$hi;
    if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, i64toi32_i32$4 | 0, $7_1 + 16 | 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $16_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
     $50_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $51_1 = 0
      } else {
       $51_1 = 1
      }
      $52_1 = $51_1;
     } else {
      $52_1 = 0
     }
     $50_1 = $52_1;
    }
    if ($50_1) {
     break label$3
    }
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
    $17_1 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$1 = $15_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $53_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0) {
       $54_1 = 0
      } else {
       $54_1 = 1
      }
      $55_1 = $54_1;
     } else {
      $55_1 = 0
     }
     $53_1 = $55_1;
    }
    if ($53_1) {
     break label$3
    }
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$2 = $17_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$4 | 0)) {
     $56_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       $57_1 = 0
      } else {
       $57_1 = 1
      }
      $58_1 = $57_1;
     } else {
      $58_1 = 0
     }
     $56_1 = $58_1;
    }
    if ($56_1) {
     break label$3
    }
    $9_1 = 0;
    $8_1 = 0;
    label$5 : {
     $10_1 = HEAP32[$7_1 >> 2] | 0;
     $11_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
     if ($10_1 >>> 0 <= $11_1 >>> 0) {
      break label$5
     }
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $88$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $92$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $88$hi;
     $59_1 = i64toi32_i32$2;
     i64toi32_i32$2 = $92$hi;
     i64toi32_i32$2 = __wasm_i64_sdiv($59_1 | 0, i64toi32_i32$0 | 0, $10_1 - $11_1 | 0 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $8_1 = i64toi32_i32$2;
    }
    label$6 : {
     $11_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if ($11_1 >>> 0 <= $10_1 >>> 0) {
      break label$6
     }
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $103$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $107$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $103$hi;
     $60_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $107$hi;
     i64toi32_i32$1 = __wasm_i64_sdiv($60_1 | 0, i64toi32_i32$3 | 0, $11_1 - $10_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $9_1 = i64toi32_i32$1;
    }
    $10_1 = ($8_1 | 0) > ($9_1 | 0);
    $11_1 = (Math_imul($10_1 ? $9_1 : $8_1, HEAP32[($3_1 + 36 | 0) >> 2] | 0) | 0) / (100 | 0) | 0;
    label$7 : {
     label$8 : {
      if (!$8_1) {
       break label$8
      }
      if (!$9_1) {
       break label$8
      }
      if ((($10_1 ? $8_1 - $9_1 | 0 : $9_1 - $8_1 | 0) | 0) <= ($11_1 | 0)) {
       break label$7
      }
     }
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $14$hi;
     $6_1 = $6_1 + 1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $14$hi;
     $8_1 = $223($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0) | 0;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$3 = $5$hi;
     $3_1 = $223($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $14_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0) | 0;
     $8_1 = $8_1 ? $8_1 : $3_1 ? $3_1 : $8_1;
     $9_1 = $3_1 ? $3_1 : $8_1 ? $8_1 : $3_1;
    }
    $8_1 = ($9_1 + $8_1 | 0 | 0) / (2 | 0) | 0;
    break label$3;
   }
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $5$hi;
   $8_1 = $224($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
  }
  label$9 : {
   $13_1 = $7_1 + 48 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $8_1 | 0;
 }
 
 function $224($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $15$hi = 0, $7_1 = 0, $14$hi = 0, $15_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $16$hi = 0, $17$hi = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $14_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $10_1 = 0, $11_1 = 0, $16_1 = 0, $17_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $13_1 = 0, $12_1 = 0, $30$hi = 0, $35_1 = 0, $35$hi = 0, $80$hi = 0, $84$hi = 0, $50_1 = 0, $95_1 = 0, $98_1 = 0;
  label$1 : {
   $6_1 = global$0 - 32 | 0;
   $12_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $7_1 = 0;
  label$3 : {
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $38_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $39_1 = 0
     } else {
      $39_1 = 1
     }
     $40_1 = $39_1;
    } else {
     $40_1 = 0
    }
    $38_1 = $40_1;
   }
   if ($38_1) {
    break label$3
   }
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $30$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($3_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $30$hi;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $14_1 = i64toi32_i32$3;
   $14$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, $6_1 + 16 | 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$2 = $14_1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $15$hi;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$1 = $5_1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
    $41_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      $42_1 = 0
     } else {
      $42_1 = 1
     }
     $43_1 = $42_1;
    } else {
     $43_1 = 0
    }
    $41_1 = $43_1;
   }
   if ($41_1) {
    break label$3
   }
   if ((HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $8_1 = 0;
   $7_1 = 0;
   $9_1 = 0;
   label$4 : {
    label$5 : while (1) {
     i64toi32_i32$5 = $15$hi;
     if ($221($0_1 | 0, $1_1 | 0, $2_1 | 0, $15_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0) | 0) {
      break label$4
     }
     label$6 : {
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $4_1;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0) {
       break label$6
      }
      $10_1 = HEAP32[$6_1 >> 2] | 0;
      $11_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
      if ($10_1 >>> 0 <= $11_1 >>> 0) {
       break label$6
      }
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $44_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0) {
         $45_1 = 0
        } else {
         $45_1 = 1
        }
        $46_1 = $45_1;
       } else {
        $46_1 = 0
       }
       $44_1 = $46_1;
      }
      if ($44_1) {
       break label$6
      }
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$4 = $16_1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$4 = __wasm_i64_mul(i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $80$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $84$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $80$hi;
      $50_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $84$hi;
      i64toi32_i32$4 = __wasm_i64_sdiv($50_1 | 0, i64toi32_i32$0 | 0, $10_1 - $11_1 | 0 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $8_1 = $8_1 + i64toi32_i32$4 | 0;
      $9_1 = $9_1 + 1 | 0;
     }
     i64toi32_i32$2 = $6_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $95_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($6_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $95_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98_1 = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $98_1;
     HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$5 = $14_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$5 = $5_1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
      $47_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        $48_1 = 0
       } else {
        $48_1 = 1
       }
       $49_1 = $48_1;
      } else {
       $49_1 = 0
      }
      $47_1 = $49_1;
     }
     if ($47_1) {
      break label$4
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) < (HEAP32[($3_1 + 40 | 0) >> 2] | 0 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   label$7 : {
    if ($9_1) {
     break label$7
    }
    $7_1 = 0;
    break label$3;
   }
   $7_1 = ($8_1 >>> 0) / ($9_1 >>> 0) | 0;
  }
  label$8 : {
   $13_1 = $6_1 + 32 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $7_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  $226($0_1 | 0);
  $974($0_1 + 44 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $6_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = HEAP32[($0_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     label$6 : {
      if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
       break label$6
      }
      label$7 : {
       if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
       HEAP32[$1_1 >> 2] = $0_1;
       $827(17700 | 0, $1_1 | 0);
      }
      $235(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     }
     $228($0_1 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     $815($3_1 | 0);
     $3_1 = $4_1;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (8 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$8 : {
   $7_1 = $1_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $2_1 = $0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $0_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $0_1;
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$0_1) {
       break label$2
      }
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
     return;
    }
    HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
   }
   return;
  }
  $859(18153 | 0, 17900 | 0, 40 | 0);
  abort();
 }
 
 function $229($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 80 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $6_1 = 0;
  label$3 : {
   label$4 : {
    if (!($230($0_1 | 0, $2_1 | 0) | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $7_1 = $231($0_1 | 0, $2_1 | 0) | 0;
         if ($7_1) {
          break label$9
         }
         label$10 : {
          $7_1 = $813(16 | 0) | 0;
          if ($7_1) {
           break label$10
          }
          $6_1 = 0;
          if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($5_1 + 4 | 0) >> 2] = 16;
          HEAP32[$5_1 >> 2] = $0_1;
          $827(17765 | 0, $5_1 | 0);
          break label$4;
         }
         HEAP8[($7_1 + 12 | 0) >> 0] = 0;
         HEAP32[($7_1 + 4 | 0) >> 2] = $2_1;
         $1_1 = $234($1_1 | 0) | 0;
         HEAP32[($7_1 + 8 | 0) >> 2] = $1_1;
         label$11 : {
          if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          label$12 : {
           if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$12
           }
           $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
           HEAP32[($5_1 + 72 | 0) >> 2] = $2_1;
           HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
           HEAP32[($5_1 + 64 | 0) >> 2] = $0_1;
           $827(17817 | 0, $5_1 + 64 | 0 | 0);
          }
          $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
         }
         label$13 : {
          if ($1_1) {
           break label$13
          }
          $815($7_1 | 0);
          break label$8;
         }
         label$14 : {
          if (($3_1 | 0) == (4 | 0)) {
           break label$14
          }
          if ($238($1_1 | 0, $3_1 | 0) | 0) {
           break label$14
          }
          label$15 : {
           if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $827(17877 | 0, 0 | 0);
          }
          HEAP8[($7_1 + 12 | 0) >> 0] = 1;
          HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
         }
         $232($0_1 | 0, $2_1 | 0, $7_1 | 0);
         HEAP32[($0_1 + 32 | 0) >> 2] = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 1 | 0;
        }
        $1_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$3
        }
        if (HEAPU8[($7_1 + 12 | 0) >> 0] | 0) {
         break label$5
        }
        label$16 : {
         $6_1 = $239($1_1 | 0, $4_1 | 0, $5_1 + 76 | 0 | 0) | 0;
         if ($6_1) {
          break label$16
         }
         if (HEAP32[($5_1 + 76 | 0) >> 2] | 0) {
          break label$16
         }
         $6_1 = $813(328 | 0) | 0;
         if ($6_1) {
          break label$7
         }
         $6_1 = 0;
         if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$4
         }
         HEAP32[($5_1 + 52 | 0) >> 2] = 328;
         HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
         $827(17765 | 0, $5_1 + 48 | 0 | 0);
         break label$4;
        }
        if ($6_1) {
         break label$6
        }
       }
       $6_1 = 0;
       break label$4;
      }
      $218($6_1 | 0);
      HEAP32[($6_1 + 4 | 0) >> 2] = 4;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
     HEAP8[($7_1 + 12 | 0) >> 0] = 1;
     HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     if ((HEAP8[(0 + 61928 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$4
     }
     if (!($828(2 | 0, 61928 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
     $827(18002 | 0, $5_1 + 16 | 0 | 0);
     break label$4;
    }
    $735($4_1 | 0);
   }
   label$17 : {
    $9_1 = $5_1 + 80 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(17985 | 0, 17900 | 0, 116 | 0);
  abort();
 }
 
 function $230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$2
    }
    $2_1 = 0;
    label$3 : while (1) {
     $3_1 = 0;
     $4_1 = HEAP32[(($0_1 + ($2_1 << 2 | 0) | 0) + 44 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$1
     }
     if (($4_1 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) == (32 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      return $0_1 | 0;
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return 0 | 0;
  }
  $859(18153 | 0, 17900 | 0, 40 | 0);
  abort();
 }
 
 function $232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(18153 | 0, 17900 | 0, 40 | 0);
   abort();
  }
  $0_1 = $0_1 + (((($1_1 >>> 4 | 0) ^ $1_1 | 0) & 7 | 0) << 2 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $5_1 = HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    label$5 : while (1) {
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$6 : {
      if (HEAPU8[($5_1 + 12 | 0) >> 0] | 0) {
       break label$6
      }
      label$7 : {
       $7_1 = $240(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
       if ($7_1) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!$2_1) {
          break label$9
         }
         $7_1 = FUNCTION_TABLE[$2_1]() | 0;
         break label$8;
        }
        $7_1 = $813(328 | 0) | 0;
       }
       label$10 : {
        if ($7_1) {
         break label$10
        }
        if (!($835(61928 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 328;
        HEAP32[$3_1 >> 2] = $0_1;
        $827(18075 | 0, $3_1 | 0);
        break label$4;
       }
       $218($7_1 | 0);
       HEAP32[($7_1 + 4 | 0) >> 2] = 4;
      }
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      $215($1_1 | 0, $7_1 | 0);
     }
     $5_1 = $6_1;
     if ($5_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (8 | 0)) {
    continue label$3
   }
   break label$3;
  };
  label$11 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(64 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(61944 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 64;
    $827(18179 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 64 | 0, $2_1 | 0, 18160 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   $974($2_1 + 8 | 0 | 0, 0 | 0, 44 | 0) | 0;
   $7_1 = $2_1 + 60 | 0;
   $8_1 = 257;
   HEAP8[$7_1 >> 0] = $8_1;
   HEAP8[($7_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
   $5_1 = 16843009;
   HEAP8[($2_1 + 52 | 0) >> 0] = $5_1;
   HEAP8[($2_1 + 53 | 0) >> 0] = $5_1 >>> 8 | 0;
   HEAP8[($2_1 + 54 | 0) >> 0] = $5_1 >>> 16 | 0;
   HEAP8[($2_1 + 55 | 0) >> 0] = $5_1 >>> 24 | 0;
   $6_1 = 16843009;
   HEAP8[($2_1 + 56 | 0) >> 0] = $6_1;
   HEAP8[($2_1 + 57 | 0) >> 0] = $6_1 >>> 8 | 0;
   HEAP8[($2_1 + 58 | 0) >> 0] = $6_1 >>> 16 | 0;
   HEAP8[($2_1 + 59 | 0) >> 0] = $6_1 >>> 24 | 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 97 | 0);
  }
  $1_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 18320 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0]($3_1);
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
  $845($0_1 | 0, 64 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 115 | 0);
  }
  $1_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  label$3 : while (1) {
   label$4 : {
    $2_1 = $1_1 << 2 | 0;
    $3_1 = HEAP32[(($0_1 + $2_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($2_1 + 18320 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1);
   }
   HEAP8[(($0_1 + $1_1 | 0) + 52 | 0) >> 0] = 1;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 132 | 0);
  }
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = ($0_1 + $2_1 | 0) + 52 | 0;
    if (!(HEAPU8[$3_1 >> 0] | 0)) {
     break label$4
    }
    HEAP8[$3_1 >> 0] = $198(HEAP32[((HEAP32[(($2_1 << 2 | 0) + 18320 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 148 | 0);
  }
  $2_1 = 0;
  $3_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $4_1 = ($0_1 + $3_1 | 0) + 52 | 0;
    if (!(HEAPU8[$4_1 >> 0] | 0)) {
     break label$4
    }
    $5_1 = (HEAP32[(HEAP32[(($3_1 << 2 | 0) + 18320 | 0) >> 2] | 0) >> 2] | 0 | 0) == ($1_1 | 0);
    HEAP8[$4_1 >> 0] = $5_1;
    $2_1 = $2_1 | $5_1 | 0;
   }
   $3_1 = $3_1 + 1 | 0;
   if (($3_1 | 0) != (10 | 0)) {
    continue label$3
   }
   break label$3;
  };
  return $2_1 & 1 | 0 | 0;
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $9_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 168 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = ($756($1_1 | 0) | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  $4_1 = 0;
  $5_1 = 0;
  label$5 : {
   label$6 : while (1) {
    label$7 : {
     $6_1 = ($0_1 + $5_1 | 0) + 52 | 0;
     if (!(HEAPU8[$6_1 >> 0] | 0)) {
      break label$7
     }
     label$8 : {
      label$9 : {
       $7_1 = $5_1 << 2 | 0;
       $8_1 = ($0_1 + $7_1 | 0) + 12 | 0;
       if (HEAP32[$8_1 >> 2] | 0) {
        break label$9
       }
       $9_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($7_1 + 18320 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
       HEAP32[$8_1 >> 2] = $9_1;
       if (!$9_1) {
        break label$8
       }
      }
      $734($1_1 | 0);
      HEAP8[($3_1 + 15 | 0) >> 0] = 0;
      $9_1 = HEAP32[($7_1 + 18320 | 0) >> 2] | 0;
      $7_1 = FUNCTION_TABLE[HEAP32[($9_1 + 24 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $1_1, $3_1 + 15 | 0) | 0;
      $735($1_1 | 0);
      $4_1 = $4_1 + 1 | 0;
      label$10 : {
       if ($7_1) {
        break label$10
       }
       label$11 : {
        if (HEAPU8[($3_1 + 15 | 0) >> 0] | 0) {
         break label$11
        }
        label$12 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($9_1 + 12 | 0) >> 2] | 0) >>> 0) {
          break label$12
         }
         HEAP8[($3_1 + 15 | 0) >> 0] = 1;
         HEAP32[($3_1 + 8 | 0) >> 2] = 0;
         label$13 : {
          $7_1 = FUNCTION_TABLE[HEAP32[($9_1 + 32 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0, $3_1 + 8 | 0) | 0;
          if (!$7_1) {
           break label$13
          }
          if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 > 49 >>> 0) {
           break label$13
          }
          $815($7_1 | 0);
          break label$12;
         }
         if ($7_1) {
          break label$10
         }
        }
        if (!(HEAPU8[($3_1 + 15 | 0) >> 0] | 0)) {
         break label$7
        }
       }
       FUNCTION_TABLE[HEAP32[($9_1 + 28 | 0) >> 2] | 0](HEAP32[$8_1 >> 2] | 0);
       break label$8;
      }
      HEAP8[$6_1 >> 0] = 0;
      break label$5;
     }
     HEAP8[$6_1 >> 0] = 0;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != (10 | 0)) {
     continue label$6
    }
    break label$6;
   };
   $7_1 = 0;
  }
  $735($1_1 | 0);
  HEAP32[$2_1 >> 2] = $4_1;
  label$14 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $7_1 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $7_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (18160 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 | 0, 18160 | 0, 18227 | 0, 223 | 0);
  }
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$5 : while (1) {
   label$6 : {
    $5_1 = $4_1 << 2 | 0;
    $6_1 = HEAP32[(($0_1 + $5_1 | 0) + 12 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 18320 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0]($6_1, $1_1 + 12 | 0) | 0;
    if (!$5_1) {
     break label$6
    }
    $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    label$7 : {
     label$8 : {
      if ($2_1) {
       break label$8
      }
      $3_1 = $6_1;
      break label$7;
     }
     label$9 : {
      if ($6_1 >>> 0 >= $3_1 >>> 0) {
       break label$9
      }
      $815($5_1 | 0);
      break label$6;
     }
     $815($2_1 | 0);
     $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    }
    $2_1 = $5_1;
   }
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (10 | 0)) {
    continue label$5
   }
   break label$5;
  };
  label$10 : {
   $8_1 = $1_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
  return 0 | 0;
 }
 
 function $242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(18376 | 0, 18380 | 0, 58 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 7;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $1_1 = $866(HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    return $1_1 | 0;
   }
   $859(18464 | 0, 18380 | 0, 70 | 0);
   abort();
  }
  $859(18464 | 0, 18380 | 0, 72 | 0);
  abort();
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $1_1 = $863(HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0, $0_1 + 12 | 0 | 0) | 0;
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    return $1_1 | 0;
   }
   $859(18464 | 0, 18380 | 0, 80 | 0);
   abort();
  }
  $859(18464 | 0, 18380 | 0, 82 | 0);
  abort();
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = HEAPU8[((HEAP32[$0_1 >> 2] | 0) + $1_1 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     $1_1 = $3_1 + -1 | 0;
     break label$2;
    }
    $4_1 = -1;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = 7;
   }
   $4_1 = ($2_1 >>> $3_1 | 0) & 1 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $3_1 = $245($0_1 | 0) | 0;
     if (($3_1 | 0) >= (0 | 0)) {
      break label$3
     }
     return -1 | 0;
    }
    $2_1 = $3_1 & 1 | 0 | ($2_1 << 1 | 0) | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$1_1) {
         break label$6
        }
        if (!$0_1) {
         break label$5
        }
        $3_1 = 0;
        HEAP32[($0_1 + 8 | 0) >> 2] = 0;
        HEAP8[$0_1 >> 0] = 0;
        if ($2_1 >>> 0 < 3 >>> 0) {
         break label$1
        }
        HEAP8[$0_1 >> 0] = 1;
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
        HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $2_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
            if (($2_1 | 0) > (-1 | 0)) {
             break label$10
            }
            if (($4_1 | 0) == (66 | 0)) {
             break label$9
            }
            HEAP8[($0_1 + 8 | 0) >> 0] = 1;
            $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
           }
           if (($4_1 | 0) == (77 | 0)) {
            break label$7
           }
           if ($2_1 & 64 | 0) {
            break label$8
           }
           break label$7;
          }
          if (!($2_1 & 64 | 0)) {
           break label$4
          }
         }
         HEAP8[($0_1 + 9 | 0) >> 0] = 1;
         $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
        }
        $3_1 = 1;
        if (!($2_1 & 32 | 0)) {
         break label$1
        }
        if (($4_1 | 0) == (88 | 0)) {
         break label$2
        }
        break label$3;
       }
       $859(18487 | 0, 18380 | 0, 122 | 0);
       abort();
      }
      $859(18491 | 0, 18380 | 0, 123 | 0);
      abort();
     }
     $3_1 = 1;
     if (!($2_1 & 32 | 0)) {
      break label$1
     }
    }
    $3_1 = 1;
    HEAP8[($0_1 + 10 | 0) >> 0] = 1;
    if (($4_1 | 0) == (100 | 0)) {
     break label$1
    }
    if (!((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) & 32 | 0)) {
     break label$1
    }
   }
   $3_1 = 1;
   HEAP8[($0_1 + 11 | 0) >> 0] = 1;
  }
  return $3_1 | 0;
 }
 
 function $248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (HEAPU8[$0_1 >> 0] | 0) {
     break label$4
    }
    $4_1 = 0;
    HEAP8[$1_1 >> 0] = 0;
    break label$3;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($4_1 | 0) > (99 | 0)) {
          break label$10
         }
         label$11 : {
          if (($4_1 | 0) != (66 | 0)) {
           break label$11
          }
          $5_1 = 18495;
          break label$5;
         }
         if (($4_1 | 0) == (77 | 0)) {
          break label$9
         }
         if (($4_1 | 0) != (88 | 0)) {
          break label$6
         }
         $5_1 = 18509;
         break label$5;
        }
        label$12 : {
         if (($4_1 | 0) > (121 | 0)) {
          break label$12
         }
         if (($4_1 | 0) == (100 | 0)) {
          break label$8
         }
         if (($4_1 | 0) != (110 | 0)) {
          break label$6
         }
         $5_1 = 18523;
         break label$5;
        }
        if (($4_1 | 0) == (122 | 0)) {
         break label$7
        }
        if (($4_1 | 0) != (144 | 0)) {
         break label$6
        }
        $5_1 = 18540;
        break label$5;
       }
       $5_1 = 18504;
       break label$5;
      }
      $5_1 = 18518;
      break label$5;
     }
     $5_1 = 18531;
     break label$5;
    }
    HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
    $820($3_1 + 88 | 0 | 0, 8 | 0, 18549 | 0, $3_1 + 80 | 0 | 0) | 0;
    $5_1 = $3_1 + 88 | 0;
   }
   label$13 : {
    label$14 : {
     if (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) {
      break label$14
     }
     $4_1 = 1;
     break label$13;
    }
    HEAP32[($3_1 + 64 | 0) >> 2] = 18495;
    $4_1 = $820($3_1 + 96 | 0 | 1 | 0 | 0, 63 | 0, 18552 | 0, $3_1 + 64 | 0 | 0) | 0;
    $4_1 = ($4_1 | 0) < (1 | 0) ? 1 : $4_1 + 1 | 0;
   }
   label$15 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$15
    }
    if (!((HEAPU8[($0_1 + 9 | 0) >> 0] | 0) & 255 | 0)) {
     break label$15
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = 18504;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 48 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$16 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$16
    }
    if (!((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) & 255 | 0)) {
     break label$16
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = 18509;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 32 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$17 : {
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$17
    }
    if (!((HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 255 | 0)) {
     break label$17
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = 18518;
    $6_1 = $820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 64 - $4_1 | 0 | 0, 18552 | 0, $3_1 + 16 | 0 | 0) | 0;
    $4_1 = (($6_1 | 0) > (0 | 0) ? $6_1 : 0) + $4_1 | 0;
   }
   label$18 : {
    label$19 : {
     if ($4_1 >>> 0 < 2 >>> 0) {
      break label$19
     }
     HEAP8[($3_1 + 96 | 0) >> 0] = 91;
     if ($4_1 >>> 0 > 63 >>> 0) {
      break label$18
     }
     HEAP8[(($4_1 + ($3_1 + 96 | 0) | 0) + -1 | 0) >> 0] = 93;
     break label$18;
    }
    HEAP8[($3_1 + 96 | 0) >> 0] = 0;
   }
   $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
   HEAP32[$3_1 >> 2] = $5_1;
   $0_1 = (($4_1 & 255 | 0) >>> 0) / (10 >>> 0) | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = ($4_1 - Math_imul($0_1, 10) | 0) & 255 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 96 | 0;
   $4_1 = $820($1_1 | 0, $2_1 | 0, 18556 | 0, $3_1 | 0) | 0;
  }
  label$20 : {
   $8_1 = $3_1 + 160 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $249($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$2_1) {
     break label$3
    }
    $783($3_1 | 0, $2_1 | 0);
    $2_1 = 0;
    label$5 : {
     if (!($250($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0)) {
      break label$5
     }
     $2_1 = 1;
     HEAP8[$0_1 >> 0] = 1;
    }
    label$6 : {
     $5_1 = $3_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $2_1 | 0;
   }
   $859(18491 | 0, 18380 | 0, 622 | 0);
   abort();
  }
  $859(18567 | 0, 18380 | 0, 623 | 0);
  abort();
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 592 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = 0;
  $974($3_1 + 336 | 0 | 0, 0 | 0, 256 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $827(18621 | 0, 0 | 0);
  }
  HEAP8[($0_1 + 2 | 0) >> 0] = $790($2_1 | 0, 4 | 0) | 0;
  $5_1 = $790($2_1 | 0, 3 | 0) | 0;
  $792($2_1 | 0, 1 | 0);
  label$4 : {
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   if (!($251($0_1 | 0, $2_1 | 0, $5_1 | 0) | 0)) {
    break label$4
   }
   $791($2_1 | 0) | 0;
   $6_1 = $791($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   label$5 : {
    if (($6_1 | 0) != (3 | 0)) {
     break label$5
    }
    $792($2_1 | 0, 1 | 0);
   }
   HEAP16[($1_1 + 8 | 0) >> 1] = $791($2_1 | 0) | 0;
   HEAP16[($1_1 + 10 | 0) >> 1] = $791($2_1 | 0) | 0;
   $6_1 = $789($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   label$6 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    label$7 : {
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
     HEAP32[($3_1 + 324 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
     HEAP32[($3_1 + 320 | 0) >> 2] = $4_1;
     $827(18651 | 0, $3_1 + 320 | 0 | 0);
    }
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 304 | 0) >> 2] = ($6_1 | 0) != (0 | 0);
    $827(18701 | 0, $3_1 + 304 | 0 | 0);
   }
   label$8 : {
    if (!$6_1) {
     break label$8
    }
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
   }
   HEAP8[($0_1 + 5 | 0) >> 0] = ($791($2_1 | 0) | 0) + 8 | 0;
   HEAP8[($0_1 + 6 | 0) >> 0] = ($791($2_1 | 0) | 0) + 8 | 0;
   $4_1 = 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $6_1 = ($791($2_1 | 0) | 0) + 4 | 0;
   if ($6_1 >>> 0 > 16 >>> 0) {
    break label$4
   }
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $0_1 = $789($2_1 | 0) | 0;
   label$9 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$9
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$9
    }
    HEAP32[($3_1 + 288 | 0) >> 2] = $5_1;
    $827(18759 | 0, $3_1 + 288 | 0 | 0);
   }
   $0_1 = $0_1 ? 0 : $5_1;
   label$10 : while (1) {
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $791($2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    if ($0_1 >>> 0 <= $5_1 >>> 0) {
     continue label$10
    }
    break label$10;
   };
   $4_1 = 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   $791($2_1 | 0) | 0;
   if ($784($2_1 | 0) | 0) {
    break label$4
   }
   $0_1 = $789($2_1 | 0) | 0;
   label$11 : {
    if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[($3_1 + 272 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
    $827(18819 | 0, $3_1 + 272 | 0 | 0);
   }
   label$12 : {
    label$13 : {
     if (!$0_1) {
      break label$13
     }
     $7_1 = 0;
     $0_1 = $789($2_1 | 0) | 0;
     label$14 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$14
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$14
      }
      HEAP32[($3_1 + 256 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(18879 | 0, $3_1 + 256 | 0 | 0);
     }
     if (!$0_1) {
      break label$13
     }
     label$15 : while (1) {
      $0_1 = 1 << (($7_1 << 1 | 0) + 4 | 0) | 0;
      $0_1 = $0_1 >>> 0 < 64 >>> 0 ? $0_1 : 64;
      $4_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
      $8_1 = ($7_1 | 0) == (3 | 0) ? 3 : 1;
      $5_1 = 0;
      label$16 : while (1) {
       label$17 : {
        label$18 : {
         if ($789($2_1 | 0) | 0) {
          break label$18
         }
         $791($2_1 | 0) | 0;
         break label$17;
        }
        label$19 : {
         if ($7_1 >>> 0 < 2 >>> 0) {
          break label$19
         }
         $791($2_1 | 0) | 0;
        }
        $0_1 = 0;
        label$20 : while (1) {
         $791($2_1 | 0) | 0;
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($4_1 | 0)) {
          continue label$20
         }
         break label$20;
        };
       }
       if ($784($2_1 | 0) | 0) {
        break label$12
       }
       $5_1 = $5_1 + $8_1 | 0;
       if ($5_1 >>> 0 < 6 >>> 0) {
        continue label$16
       }
       break label$16;
      };
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != (4 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $4_1 = 0;
    if ($784($2_1 | 0) | 0) {
     break label$4
    }
    $792($2_1 | 0, 1 | 0);
    $792($2_1 | 0, 1 | 0);
    $0_1 = $789($2_1 | 0) | 0;
    label$21 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$21
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$21
     }
     HEAP32[($3_1 + 240 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(18948 | 0, $3_1 + 240 | 0 | 0);
    }
    label$22 : {
     if (!$0_1) {
      break label$22
     }
     $792($2_1 | 0, 4 | 0);
     $792($2_1 | 0, 4 | 0);
     $791($2_1 | 0) | 0;
     $791($2_1 | 0) | 0;
     $792($2_1 | 0, 1 | 0);
    }
    $7_1 = 0;
    $9_1 = $791($2_1 | 0) | 0;
    label$23 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$23
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$23
     }
     HEAP32[($3_1 + 224 | 0) >> 2] = $9_1;
     $827(18999 | 0, $3_1 + 224 | 0 | 0);
    }
    label$24 : {
     if (!$9_1) {
      break label$24
     }
     label$25 : while (1) {
      label$26 : {
       label$27 : {
        if (!$7_1) {
         break label$27
        }
        $0_1 = $789($2_1 | 0) | 0;
        label$28 : {
         if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$28
         }
         if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$28
         }
         HEAP32[($3_1 + 208 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
         $827(19061 | 0, $3_1 + 208 | 0 | 0);
        }
        if (!$0_1) {
         break label$27
        }
        $792($2_1 | 0, 1 | 0);
        $791($2_1 | 0) | 0;
        $4_1 = 0;
        $8_1 = ($3_1 + 336 | 0) + ($7_1 << 2 | 0) | 0;
        HEAP32[$8_1 >> 2] = 0;
        $0_1 = 0;
        $5_1 = HEAP32[($8_1 + -4 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$26
        }
        label$29 : while (1) {
         label$30 : {
          label$31 : {
           if ($789($2_1 | 0) | 0) {
            break label$31
           }
           if (!($789($2_1 | 0) | 0)) {
            break label$30
           }
          }
          $4_1 = $4_1 + 1 | 0;
          HEAP32[$8_1 >> 2] = $4_1;
         }
         if ($784($2_1 | 0) | 0) {
          break label$12
         }
         $0_1 = $0_1 + 1 | 0;
         if ($0_1 >>> 0 >= $5_1 >>> 0) {
          break label$26
         }
         continue label$29;
        };
       }
       $5_1 = $791($2_1 | 0) | 0;
       $8_1 = $791($2_1 | 0) | 0;
       label$32 : {
        if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$32
        }
        label$33 : {
         if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$33
         }
         HEAP32[($3_1 + 192 | 0) >> 2] = $5_1;
         $827(19129 | 0, $3_1 + 192 | 0 | 0);
        }
        if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$32
        }
        if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$32
        }
        HEAP32[($3_1 + 176 | 0) >> 2] = $8_1;
        $827(19181 | 0, $3_1 + 176 | 0 | 0);
       }
       if ($784($2_1 | 0) | 0) {
        break label$12
       }
       $4_1 = 0;
       $0_1 = 0;
       label$34 : {
        if (!$5_1) {
         break label$34
        }
        label$35 : while (1) {
         $791($2_1 | 0) | 0;
         $792($2_1 | 0, 1 | 0);
         if ($784($2_1 | 0) | 0) {
          break label$4
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($5_1 | 0)) {
          continue label$35
         }
         break label$35;
        };
       }
       $4_1 = 0;
       $0_1 = 0;
       label$36 : {
        if (!$8_1) {
         break label$36
        }
        label$37 : while (1) {
         $791($2_1 | 0) | 0;
         $792($2_1 | 0, 1 | 0);
         if ($784($2_1 | 0) | 0) {
          break label$4
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($8_1 | 0)) {
          continue label$37
         }
         break label$37;
        };
       }
       HEAP32[(($3_1 + 336 | 0) + ($7_1 << 2 | 0) | 0) >> 2] = $8_1 + $5_1 | 0;
      }
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != ($9_1 | 0)) {
       continue label$25
      }
      break label$25;
     };
    }
    $0_1 = $789($2_1 | 0) | 0;
    label$38 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$38
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$38
     }
     HEAP32[($3_1 + 160 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(19233 | 0, $3_1 + 160 | 0 | 0);
    }
    label$39 : {
     if (!$0_1) {
      break label$39
     }
     $0_1 = 0;
     $4_1 = $791($2_1 | 0) | 0;
     label$40 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$40
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$40
      }
      HEAP32[($3_1 + 144 | 0) >> 2] = $4_1;
      $827(19299 | 0, $3_1 + 144 | 0 | 0);
     }
     if (!$4_1) {
      break label$39
     }
     label$41 : while (1) {
      $792($2_1 | 0, $6_1 | 0);
      $792($2_1 | 0, 1 | 0);
      if ($784($2_1 | 0) | 0) {
       break label$12
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($4_1 | 0)) {
       continue label$41
      }
      break label$41;
     };
    }
    $4_1 = 0;
    if ($784($2_1 | 0) | 0) {
     break label$4
    }
    $0_1 = $789($2_1 | 0) | 0;
    $4_1 = $789($2_1 | 0) | 0;
    label$42 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$42
     }
     label$43 : {
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$43
      }
      HEAP32[($3_1 + 128 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19360 | 0, $3_1 + 128 | 0 | 0);
     }
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$42
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$42
     }
     HEAP32[($3_1 + 112 | 0) >> 2] = ($4_1 | 0) != (0 | 0);
     $827(19424 | 0, $3_1 + 112 | 0 | 0);
    }
    $0_1 = $789($2_1 | 0) | 0;
    label$44 : {
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$44
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$44
     }
     HEAP32[($3_1 + 96 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
     $827(19494 | 0, $3_1 + 96 | 0 | 0);
    }
    label$45 : {
     if (!$0_1) {
      break label$45
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$46 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$46
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$46
      }
      HEAP32[($3_1 + 80 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19556 | 0, $3_1 + 80 | 0 | 0);
     }
     label$47 : {
      if (!$0_1) {
       break label$47
      }
      if (($790($2_1 | 0, 8 | 0) | 0 | 0) != (255 | 0)) {
       break label$47
      }
      $792($2_1 | 0, 16 | 0);
      $792($2_1 | 0, 16 | 0);
     }
     label$48 : {
      if (!($789($2_1 | 0) | 0)) {
       break label$48
      }
      $792($2_1 | 0, 1 | 0);
     }
     label$49 : {
      if (!($789($2_1 | 0) | 0)) {
       break label$49
      }
      $792($2_1 | 0, 3 | 0);
      $792($2_1 | 0, 1 | 0);
      $0_1 = $789($2_1 | 0) | 0;
      label$50 : {
       if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$50
       }
       if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$50
       }
       HEAP32[($3_1 + 64 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
       $827(19621 | 0, $3_1 + 64 | 0 | 0);
      }
      if (!$0_1) {
       break label$49
      }
      $792($2_1 | 0, 8 | 0);
      $792($2_1 | 0, 8 | 0);
      $792($2_1 | 0, 8 | 0);
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$51 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$51
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$51
      }
      HEAP32[($3_1 + 48 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19687 | 0, $3_1 + 48 | 0 | 0);
     }
     label$52 : {
      if (!$0_1) {
       break label$52
      }
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
     }
     $792($2_1 | 0, 1 | 0);
     $792($2_1 | 0, 1 | 0);
     $792($2_1 | 0, 1 | 0);
     $0_1 = $789($2_1 | 0) | 0;
     label$53 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$53
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$53
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19750 | 0, $3_1 + 32 | 0 | 0);
     }
     label$54 : {
      if (!$0_1) {
       break label$54
      }
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
      $791($2_1 | 0) | 0;
     }
     $0_1 = $789($2_1 | 0) | 0;
     label$55 : {
      if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$55
      }
      if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$55
      }
      HEAP32[($3_1 + 16 | 0) >> 2] = ($0_1 | 0) != (0 | 0);
      $827(19812 | 0, $3_1 + 16 | 0 | 0);
     }
     if (!$0_1) {
      break label$45
     }
     $0_1 = $790($2_1 | 0, 16 | 0) | 0;
     $4_1 = $790($2_1 | 0, 16 | 0) | 0;
     $5_1 = ($790($2_1 | 0, 16 | 0) | 0) << 16 | 0 | ($790($2_1 | 0, 16 | 0) | 0) | 0;
     label$56 : {
      $0_1 = $4_1 | ($0_1 << 16 | 0) | 0;
      if (!$0_1) {
       break label$56
      }
      HEAPF32[($1_1 + 300 | 0) >> 2] = Math_fround(Math_fround($5_1 >>> 0) / Math_fround($0_1 >>> 0));
     }
     if ((HEAP8[(0 + 61960 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$45
     }
     if (!($828(2 | 0, 61960 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$45
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(19875 | 0, $3_1 | 0);
    }
    $4_1 = ($784($2_1 | 0) | 0) ^ 1 | 0;
    break label$4;
   }
   $4_1 = 0;
  }
  label$57 : {
   $11_1 = $3_1 + 592 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $251($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 < 8 >>> 0) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(61960 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $2_1;
    $827(19967 | 0, $3_1 | 0);
    break label$3;
   }
   $4_1 = 0;
   $5_1 = $790($1_1 | 0, 2 | 0) | 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   if ($5_1) {
    break label$3
   }
   $4_1 = 0;
   HEAP8[($0_1 + 1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($0_1 + 4 | 0) >> 0] = $790($1_1 | 0, 5 | 0) | 0;
   label$5 : while (1) {
    $792($1_1 | 0, 1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (33 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $792($1_1 | 0, 1 | 0);
   $792($1_1 | 0, 1 | 0);
   $792($1_1 | 0, 1 | 0);
   $790($1_1 | 0, 22 | 0) | 0;
   $4_1 = 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   $790($1_1 | 0, 22 | 0) | 0;
   if ($784($1_1 | 0) | 0) {
    break label$3
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $790($1_1 | 0, 8 | 0) | 0;
   label$6 : {
    if (!$2_1) {
     break label$6
    }
    $4_1 = 0;
    label$7 : while (1) {
     HEAP8[(($3_1 + 24 | 0) + $4_1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
     HEAP8[(($3_1 + 16 | 0) + $4_1 | 0) >> 0] = ($789($1_1 | 0) | 0 | 0) != (0 | 0);
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
    label$8 : {
     if (($2_1 + -1 | 0) >>> 0 >= 7 >>> 0) {
      break label$8
     }
     $0_1 = $2_1;
     label$9 : while (1) {
      $4_1 = 0;
      $5_1 = $790($1_1 | 0, 2 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (8 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    if (!$2_1) {
     break label$6
    }
    $0_1 = 0;
    label$10 : while (1) {
     label$11 : {
      if (!(HEAPU8[(($3_1 + 24 | 0) + $0_1 | 0) >> 0] | 0)) {
       break label$11
      }
      $792($1_1 | 0, 2 | 0);
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 5 | 0);
      $4_1 = 0;
      label$12 : while (1) {
       $792($1_1 | 0, 1 | 0);
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (33 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 1 | 0);
      $792($1_1 | 0, 1 | 0);
      $4_1 = 0;
      $5_1 = $790($1_1 | 0, 22 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
      $5_1 = $790($1_1 | 0, 22 | 0) | 0;
      if ($784($1_1 | 0) | 0) {
       break label$3
      }
      if ($5_1) {
       break label$3
      }
     }
     label$13 : {
      if (!(HEAPU8[(($3_1 + 16 | 0) + $0_1 | 0) >> 0] | 0)) {
       break label$13
      }
      $792($1_1 | 0, 8 | 0);
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($2_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   $4_1 = ($784($1_1 | 0) | 0) ^ 1 | 0;
  }
  label$14 : {
   $7_1 = $3_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
    $5_1 = $4_1 + -1 | 0;
    $6_1 = $5_1 & 255 | 0;
    if ($6_1 >>> 0 >= 9 >>> 0) {
     break label$4
    }
    if (!((279 >>> $6_1 | 0) & 1 | 0)) {
     break label$4
    }
    $6_1 = HEAP32[(((($5_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 20040 | 0) >> 2] | 0;
    break label$3;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   $820($3_1 + 24 | 0 | 0, 8 | 0, 18600 | 0, $3_1 + 16 | 0 | 0) | 0;
   $6_1 = $3_1 + 24 | 0;
  }
  $4_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $0_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  HEAP32[$3_1 >> 2] = $6_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 ? 18518 : 18504;
  HEAP32[($3_1 + 4 | 0) >> 2] = ($4_1 >>> 0) / (30 >>> 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = ((($4_1 >>> 0) / (3 >>> 0) | 0) >>> 0) % (10 >>> 0) | 0;
  $0_1 = $820($1_1 | 0, $2_1 | 0, 18603 | 0, $3_1 | 0) | 0;
  label$5 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $0_1 | 0;
 }
 
 function $253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2$hi = 0, $2_1 = 0, $12$hi = 0, $18_1 = 0, $18$hi = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$1 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$0 | 0, 4500 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   label$2 : {
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($2_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    return i64toi32_i32$1 | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = 0 - $1_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$1 = __wasm_i64_udiv($2_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   return i64toi32_i32$1 ^ -1 | 0 | 0;
  }
  $859(20076 | 0, 20082 | 0, 78 | 0);
  abort();
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $255($1_1 | 0, $2_1 + 24 | 0 | 0);
    label$5 : {
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAPU8[($2_1 + 26 | 0) >> 0] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($2_1 + 25 | 0) >> 0] | 0;
     $827(20171 | 0, $2_1 | 0);
    }
    $7_1 = 61951;
    HEAP8[$0_1 >> 0] = $7_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $7_1 >>> 8 | 0;
    $1_1 = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($2_1 + 26 | 0) >> 0] | 0;
    $4_1 = HEAPU8[($2_1 + 25 | 0) >> 0] | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $4_1 << 6 | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 << 2 | 0 | ($3_1 << 6 | 0) | 0 | (($4_1 >>> 2 | 0) & 1 | 0) | 0;
    label$6 : {
     $6_1 = $2_1 + 32 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return;
   }
   $859(20160 | 0, 20082 | 0, 144 | 0);
   abort();
  }
  $859(20167 | 0, 20082 | 0, 145 | 0);
  abort();
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $11_1 = 0, $6_1 = 0, $13$hi = 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $6_1 = $1_1;
  $2_1 = (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) + -1 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 3;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $10_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $10_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 1;
  i64toi32_i32$1 = 50462976;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$3 = $10_1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $11_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $11_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  HEAP8[($6_1 + 2 | 0) >> 0] = ($2_1 & 255 | 0) >>> 0 < 5 >>> 0 ? $11_1 : 1;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (5 | 0)) {
     break label$2
    }
    if ($257($1_1 | 0, ($256($2_1 | 0) | 0) >>> 1 | 0 | 0) | 0) {
     break label$1
    }
    HEAP8[$1_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
    return;
   }
   HEAP8[$1_1 >> 0] = $2_1;
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (15 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($0_1 << 2 | 0) + 20272 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     $3_1 = 0;
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : while (1) {
         label$10 : {
          $4_1 = HEAP32[(($3_1 << 2 | 0) + 20272 | 0) >> 2] | 0;
          if (($4_1 | 0) != ($1_1 | 0)) {
           break label$10
          }
          HEAP8[$0_1 >> 0] = $3_1;
          break label$6;
         }
         if ($4_1 >>> 0 < $1_1 >>> 0) {
          break label$8
         }
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != (12 | 0)) {
          continue label$9
         }
         break label$9;
        };
        $4_1 = 11;
        if ($1_1) {
         break label$7
        }
        break label$4;
       }
       label$11 : {
        if (!$3_1) {
         break label$11
        }
        $4_1 = 11;
        if (($3_1 | 0) == (12 | 0)) {
         break label$7
        }
        $4_1 = $3_1 + -1 | 0;
        if (($1_1 - (HEAP32[(($3_1 << 2 | 0) + 20272 | 0) >> 2] | 0) | 0) >>> 0 > ((HEAP32[(($4_1 << 2 | 0) + 20272 | 0) >> 2] | 0) - $1_1 | 0) >>> 0) {
         break label$7
        }
       }
       $4_1 = $3_1;
      }
      if ((((Math_imul(HEAP32[(($4_1 << 2 | 0) + 20272 | 0) >> 2] | 0, 1e3) >>> 0) / ($1_1 >>> 0) | 0) + -995 | 0) >>> 0 > 10 >>> 0) {
       break label$4
      }
      HEAP8[$0_1 >> 0] = $4_1;
     }
     $3_1 = 1;
     break label$3;
    }
    $859(20167 | 0, 20082 | 0, 344 | 0);
    abort();
   }
   $3_1 = 0;
   if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $1_1;
   $827(20320 | 0, $2_1 | 0);
  }
  label$12 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $258($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = 252;
    $1_1 = $2_1 + 7 | 0;
    HEAP8[($0_1 + 5 | 0) >> 0] = $1_1 << 5 | 0 | 31 | 0;
    HEAP8[($0_1 + 4 | 0) >> 0] = $1_1 >>> 3 | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $3_1 | (($1_1 >>> 11 | 0) & 3 | 0) | 0;
    return 7 | 0;
   }
   $859(20264 | 0, 20082 | 0, 177 | 0);
   abort();
  }
  $859(20160 | 0, 20082 | 0, 178 | 0);
  abort();
 }
 
 function $259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   $3_1 = 0;
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if ((HEAPU8[($3_1 + 20387 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
       break label$6
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $3_1;
      $3_1 = 1;
      break label$4;
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (8 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $3_1 = 0;
    if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $1_1;
    $827(20395 | 0, $2_1 | 0);
   }
   label$7 : {
    $5_1 = $2_1 + 16 | 0;
    if ($5_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $5_1;
   }
   return $3_1 | 0;
  }
  $859(20167 | 0, 20082 | 0, 390 | 0);
  abort();
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $7_1 = 0, $22_1 = 0, $25_1 = 0, $5_1 = 0, $6_1 = 0, $142_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 96 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 96 | 0) >> 2] = $25_1;
  HEAP32[($2_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[$0_1 >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 2 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$4
    }
    $1_1 = 0;
    if (!($835(61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = 20493;
    $827(20468 | 0, $2_1 | 0);
    break label$3;
   }
   $3_1 = $775($1_1 | 0) | 0;
   HEAP16[($0_1 + 16 | 0) >> 1] = $3_1;
   label$5 : {
    label$6 : {
     label$7 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      label$8 : {
       $1_1 = $3_1 + 18 | 0;
       $4_1 = $771($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
       if (($4_1 | 0) == ($1_1 | 0)) {
        break label$8
       }
       if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 88 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 80 | 0) >> 2] = 20493;
       $827(20513 | 0, $2_1 + 80 | 0 | 0);
       break label$6;
      }
      label$9 : {
       if ($3_1 >>> 0 < 111 >>> 0) {
        break label$9
       }
       if (!($835(61976 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 72 | 0) >> 2] = 128;
       HEAP32[($2_1 + 68 | 0) >> 2] = $1_1;
       HEAP32[($2_1 + 64 | 0) >> 2] = 20493;
       $827(20566 | 0, $2_1 + 64 | 0 | 0);
       break label$6;
      }
      if (($1_1 | 0) == ($768($2_1 + 96 | 0 | 0, $0_1 + 24 | 0 | 0, $1_1 | 0) | 0 | 0)) {
       break label$5
      }
      $859(20610 | 0, 20082 | 0, 435 | 0);
      abort();
     }
     if (!($834(61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = 20493;
     $827(20634 | 0, $2_1 + 48 | 0 | 0);
    }
    HEAP16[($0_1 + 16 | 0) >> 1] = 0;
    $768($2_1 + 96 | 0 | 0, $0_1 + 24 | 0 | 0, 16 | 0) | 0;
    $15_1 = $0_1 + 40 | 0;
    $16_1 = 0;
    HEAP8[$15_1 >> 0] = $16_1;
    HEAP8[($15_1 + 1 | 0) >> 0] = $16_1 >>> 8 | 0;
    $1_1 = 18;
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
   $1_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
   $4_1 = HEAPU16[$0_1 >> 1] | 0;
   $5_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
   $6_1 = HEAPU16[($0_1 + 14 | 0) >> 1] | 0;
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($0_1 + 16 | 0) >> 1] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
   $142_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = $142_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 16 | 0) >> 2] = 20493;
   $827(20657 | 0, $2_1 + 16 | 0 | 0);
  }
  label$10 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $1_1 | 0;
 }
 
 function $261($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $74_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[$0_1 >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP16[($0_1 + 12 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP16[($0_1 + 14 | 0) >> 1] = $775($1_1 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $776($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $776($1_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $0_1 >>> 24 | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
   $74_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $74_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
   $827(20762 | 0, $2_1 | 0);
  }
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  label$4 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return ($1_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = 255;
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($4_1 | 0) < (1 | 0)) {
       break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + -1 | 0;
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $4_1 + 1 | 0;
      $4_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$3;
     }
     $4_1 = $764($0_1 | 0) | 0;
     if (($4_1 | 0) == (-1 | 0)) {
      break label$1
     }
    }
    label$5 : {
     $2_1 = $4_1 | ($2_1 << 8 | 0) | 0;
     if (($2_1 & -256 | 0 | 0) == (256 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     continue label$2;
    }
    break label$2;
   };
   return $2_1 | 0;
  }
  return 0 | 0;
 }
 
 function $263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP16[($0_1 + 4 | 0) >> 1] = 1536;
  HEAP8[($0_1 + 6 | 0) >> 0] = 4;
  HEAP16[($0_1 + 16 | 0) >> 1] = 0;
  $1_1 = $1_1 + 10 | 0;
  HEAP8[($0_1 + 15 | 0) >> 0] = $1_1;
  HEAP8[($0_1 + 14 | 0) >> 0] = $1_1 >>> 8 | 0;
  HEAP8[($0_1 + 13 | 0) >> 0] = $1_1 >>> 16 | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $1_1 >>> 24 | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) >= (16 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    HEAP8[($1_1 + (HEAPU8[($2_1 + 20928 | 0) >> 0] | 0) | 0) >> 0] = $772($0_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (16 | 0)) {
     continue label$2
    }
    break label$2;
   };
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 31 | 0 | 0;
  }
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = 0;
  label$3 : while (1) {
   HEAP8[($1_1 + (HEAPU8[($2_1 + 20928 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($3_1 + $2_1 | 0) >> 0] | 0;
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (16 | 0)) {
    continue label$3
   }
   break label$3;
  };
  HEAP32[$0_1 >> 2] = $3_1 + 16 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -16 | 0;
  return 1 | 0;
 }
 
 function $265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) - (HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0) | 0;
    if ($3_1) {
     break label$1
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (16 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $266($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $20_1 = 0, $19_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $19_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  $4_1 = HEAPU8[$0_1 >> 0] | 0;
  $5_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $6_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $7_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $8_1 = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
  $9_1 = HEAPU8[($0_1 + 5 | 0) >> 0] | 0;
  $10_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
  $11_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
  $12_1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
  $13_1 = HEAPU8[($0_1 + 9 | 0) >> 0] | 0;
  $14_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
  $15_1 = HEAPU8[($0_1 + 11 | 0) >> 0] | 0;
  $16_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
  $17_1 = HEAPU8[($0_1 + 13 | 0) >> 0] | 0;
  $18_1 = HEAPU8[($0_1 + 14 | 0) >> 0] | 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU8[($0_1 + 15 | 0) >> 0] | 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = $18_1;
  HEAP32[($3_1 + 52 | 0) >> 2] = $17_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $16_1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $15_1;
  HEAP32[($3_1 + 40 | 0) >> 2] = $14_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $13_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $12_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $11_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $9_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $8_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $4_1;
  $820($1_1 | 0, $2_1 | 0, 20944 | 0, $3_1 | 0) | 0;
  label$3 : {
   $20_1 = $3_1 + 64 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
  return $1_1 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) != (65534 | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 < 18 >>> 0) {
    break label$3
   }
   HEAP16[($2_1 + 110 | 0) >> 1] = 1;
   HEAP16[($2_1 + 108 | 0) >> 1] = $4_1 + -18 | 0;
   HEAP32[($2_1 + 104 | 0) >> 2] = $0_1 + 42 | 0;
   $760($2_1 + 88 | 0 | 0, $2_1 + 104 | 0 | 0, 1 | 0);
   HEAP16[$1_1 >> 1] = $775($2_1 + 88 | 0 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($2_1 + 88 | 0 | 0) | 0;
   $3_1 = $1_1 + 8 | 0;
   $264($2_1 + 88 | 0 | 0, $3_1 | 0) | 0;
   label$4 : {
    $0_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$4
    }
    $0_1 = $266($3_1 | 0, $2_1 + 16 | 0 | 0, 64 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU16[$1_1 >> 1] | 0;
     $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $3_1;
     $827(21013 | 0, $2_1 | 0);
    }
    $0_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
   }
   $3_1 = ($0_1 | 0) > (-1 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 112 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 1;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) == (1 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($267($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($265($1_1 + 16 | 0 | 0, 21081 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 1;
  label$3 : {
   if ((HEAPU16[$0_1 >> 1] | 0 | 0) == (8192 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($267($0_1 | 0, $1_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($265($1_1 + 16 | 0 | 0, 21097 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $4_1 = $775($0_1 | 0) | 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         switch ($2_1 | 0) {
         case 0:
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          if (($4_1 | 0) != (32766 | 0)) {
           break label$6
          }
          break label$5;
         case 3:
          $2_1 = 4;
          label$12 : {
           switch ($4_1 + -32766 | 0 | 0) {
           case 3:
            break label$3;
           case 0:
            break label$5;
           case 1:
           case 2:
            break label$6;
           default:
            break label$12;
           };
          }
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          break label$6;
         case 1:
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          label$13 : {
           if (($4_1 | 0) != (59392 | 0)) {
            break label$13
           }
           $2_1 = 2;
           break label$3;
          }
          if (($4_1 | 0) == (32766 | 0)) {
           break label$5
          }
          break label$6;
         case 4:
          label$14 : {
           if ($4_1 >>> 0 < 64512 >>> 0) {
            break label$14
           }
           $3_1 = $3_1 + 1 | 0;
           break label$6;
          }
          if (($4_1 | 0) == (8191 | 0)) {
           break label$4
          }
          if (($4_1 | 0) == (32766 | 0)) {
           break label$5
          }
          break label$6;
         case 2:
          break label$7;
         default:
          break label$3;
         };
        }
        label$15 : {
         if (($4_1 & 65520 | 0 | 0) != (2032 | 0)) {
          break label$15
         }
         $1_1 = $1_1 + 1 | 0;
         break label$6;
        }
        if (($4_1 | 0) == (8191 | 0)) {
         break label$4
        }
        if (($4_1 | 0) == (32766 | 0)) {
         break label$5
        }
       }
       $2_1 = 0;
       break label$3;
      }
      $2_1 = 3;
      break label$3;
     }
     $2_1 = 1;
    }
    if (($3_1 | 0) > (1 | 0)) {
     break label$1
    }
    if (($1_1 | 0) < (2 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 | 0) > (1 | 0) | ($1_1 | 0) > (1 | 0) | 0 | 0;
 }
 
 function $271($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $83_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    $802($3_1 + 40 | 0 | 0, $1_1 | 0, $2_1 | 0);
    $760($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0, 1 | 0);
    HEAP8[$0_1 >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 2 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP8[($0_1 + 3 | 0) >> 0] = $772($3_1 + 24 | 0 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = (($764($3_1 + 24 | 0 | 0) | 0) & 3 | 0) + 1 | 0;
    $1_1 = 0;
    label$5 : {
     $2_1 = $764($3_1 + 24 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$5
     }
     if (!($272($0_1 + 8 | 0 | 0, $3_1 + 24 | 0 | 0, $2_1 & 31 | 0 | 0) | 0)) {
      break label$5
     }
     $2_1 = $764($3_1 + 24 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$5
     }
     if (!($272($0_1 + 16 | 0 | 0, $3_1 + 24 | 0 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $1_1 = 1;
     if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $83_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[$3_1 >> 2] = $83_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $827(21123 | 0, $3_1 | 0);
    }
    label$6 : {
     $5_1 = $3_1 + 48 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $1_1 | 0;
   }
   $859(21113 | 0, 20082 | 0, 1196 | 0);
   abort();
  }
  $859(21118 | 0, 20082 | 0, 1197 | 0);
  abort();
 }
 
 function $272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    label$3 : while (1) {
     $0_1 = $777($1_1 | 0) | 0;
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$2
     }
     if (($766($1_1 | 0, $0_1 | 0) | 0 | 0) != ($0_1 | 0)) {
      break label$2
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   return 0 | 0;
  }
  return 1 | 0;
 }
 
 function $273($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $4_1 = 0;
      label$5 : while (1) {
       $5_1 = $0_1 + 2 | 0;
       $0_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) | 0;
       if (($4_1 | 0) == ($1_1 | 0)) {
        break label$3
       }
       $0_1 = $5_1 + $0_1 | 0;
       $4_1 = $4_1 + 1 | 0;
       if ($4_1 >>> 0 < $3_1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
     }
     $0_1 = 0;
     $5_1 = 0;
    }
    HEAP32[$2_1 >> 2] = $0_1;
    return $5_1 | 0;
   }
   $859(21172 | 0, 20082 | 0, 1234 | 0);
   abort();
  }
  $859(21182 | 0, 20082 | 0, 1235 | 0);
  abort();
 }
 
 function $274($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $19_1 = 0, $9_1 = 0, $8_1 = 0, $39_1 = 0, $42$hi = 0, $44$hi = 0, $45_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = 0;
  $5_1 = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = $5_1 & 31 | 0;
  HEAP8[$1_1 >> 0] = $5_1 >>> 6 | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = ($5_1 >>> 5 | 0) & 1 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $778($0_1 | 0) | 0;
  $39_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $19_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $19_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $42$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $44$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$1 = $19_1;
  i64toi32_i32$2 = $44$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  $45_1 = i64toi32_i32$1 | $5_1 | 0;
  i64toi32_i32$1 = $39_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $45_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  HEAP8[($1_1 + 16 | 0) >> 0] = $772($0_1 | 0) | 0;
  HEAP16[($1_1 + 18 | 0) >> 1] = ($777($0_1 | 0) | 0) & 4095 | 0;
  HEAP8[($1_1 + 20 | 0) >> 0] = ($772($0_1 | 0) | 0) & 3 | 0;
  HEAP8[($1_1 + 21 | 0) >> 0] = ($772($0_1 | 0) | 0) & 3 | 0;
  HEAP8[($1_1 + 22 | 0) >> 0] = ($772($0_1 | 0) | 0) & 7 | 0 | 8 | 0;
  HEAP8[($1_1 + 23 | 0) >> 0] = ($772($0_1 | 0) | 0) & 7 | 0 | 8 | 0;
  HEAP16[($1_1 + 24 | 0) >> 1] = $777($0_1 | 0) | 0;
  $5_1 = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 26 | 0) >> 0] = $5_1 >>> 6 | 0;
  HEAP8[($1_1 + 29 | 0) >> 0] = ($5_1 & 3 | 0) + 1 | 0;
  HEAP8[($1_1 + 28 | 0) >> 0] = ($5_1 >>> 2 | 0) & 1 | 0;
  HEAP8[($1_1 + 27 | 0) >> 0] = ($5_1 >>> 3 | 0) & 7 | 0;
  $5_1 = $772($0_1 | 0) | 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $4_1 = HEAPU8[($1_1 + 29 | 0) >> 0] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
    $827(21187 | 0, $3_1 + 16 | 0 | 0);
   }
   label$5 : {
    if ($5_1) {
     break label$5
    }
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = 0;
    HEAP32[($1_1 + 32 | 0) >> 2] = 0;
    HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$2;
    $4_1 = 1;
    break label$3;
   }
   $4_1 = 0;
   if (!($275($0_1 | 0, $5_1 | 0, $3_1 + 24 | 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
   $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = $7_1;
   $7_1 = $6_1 + Math_imul($7_1, 12) | 0;
   $6_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2] | 0]($2_1, $7_1) | 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = $6_1;
   if (!$6_1) {
    break label$3
   }
   label$6 : {
    if ($276($0_1 | 0, $5_1 | 0, $1_1 | 0) | 0) {
     break label$6
    }
    FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0);
    break label$3;
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 22 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 23 | 0) >> 0] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU8[($1_1 + 25 | 0) >> 0] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[$3_1 >> 2] = $7_1;
   $827(21239 | 0, $3_1 | 0);
  }
  label$7 : {
   $9_1 = $3_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $4_1 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $22_1 = 0, $25_1 = 0, $77_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 16 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $25_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $4_1 = 0;
     label$6 : while (1) {
      if (!($277($3_1 + 16 | 0 | 0, $3_1 + 8 | 0 | 0) | 0)) {
       break label$4
      }
      $5_1 = HEAPU16[($3_1 + 10 | 0) >> 1] | 0;
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $5_1 | 0;
      $6_1 = 0;
      label$7 : {
       if (!$5_1) {
        break label$7
       }
       label$8 : while (1) {
        $0_1 = $777($3_1 + 16 | 0 | 0) | 0;
        if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $0_1 | 0;
        $766($3_1 + 16 | 0 | 0, $0_1 | 0) | 0;
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) != ($5_1 | 0)) {
         continue label$8
        }
        break label$8;
       };
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != ($1_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $0_1 = 0;
    if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $0_1 = 1;
    if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $77_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[$3_1 >> 2] = $77_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $827(21554 | 0, $3_1 | 0);
    break label$3;
   }
   $0_1 = 0;
  }
  label$9 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $0_1 | 0;
 }
 
 function $276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $7_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($1_1) {
       break label$6
      }
      $4_1 = 0;
      break label$5;
     }
     $5_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($2_1 + 32 | 0) >> 2] | 0, 12) | 0;
     $4_1 = 0;
     $6_1 = 0;
     label$7 : while (1) {
      if (!($277($0_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
       break label$4
      }
      label$8 : {
       $7_1 = HEAPU16[($3_1 + 10 | 0) >> 1] | 0;
       if (!$7_1) {
        break label$8
       }
       $8_1 = $4_1 + ($7_1 >>> 0 > 1 >>> 0 ? $7_1 : 1) | 0;
       label$9 : while (1) {
        $7_1 = $777($0_1 | 0) | 0;
        if ($4_1 >>> 0 >= (HEAP32[($2_1 + 32 | 0) >> 2] | 0) >>> 0) {
         break label$4
        }
        if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        $9_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + Math_imul($4_1, 12) | 0;
        HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
        HEAP16[($9_1 + 10 | 0) >> 1] = 1;
        HEAP16[($9_1 + 8 | 0) >> 1] = $7_1;
        $768($0_1 | 0, $5_1 | 0, $7_1 | 0) | 0;
        $5_1 = $5_1 + $7_1 | 0;
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != ($8_1 | 0)) {
         continue label$9
        }
        break label$9;
       };
       $4_1 = $8_1;
      }
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($1_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $4_1 = ($4_1 | 0) == (HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $4_1 = 0;
  }
  label$10 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$1_1 >> 0] = ($772($0_1 | 0) | 0) & 63 | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $2_1);
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
 }
 
 function $279($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = -1;
   label$2 : while (1) {
    $5_1 = $764($0_1 | 0) | 0;
    if (($5_1 | 0) == (-1 | 0)) {
     break label$1
    }
    label$3 : {
     $4_1 = ($5_1 | ($4_1 << 8 | 0) | 0) & 16777215 | 0;
     if (($4_1 | 0) == (3 | 0)) {
      break label$3
     }
     HEAP8[($1_1 + $3_1 | 0) >> 0] = $5_1;
     $3_1 = $3_1 + 1 | 0;
    }
    if ($3_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $862(20082 | 0, $0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $281($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $14_1 = 0, $13_1 = 0, $27_1 = 0, $30_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $13_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 64 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = $30_1;
  HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $783($2_1 + 48 | 0 | 0, $2_1 + 64 | 0 | 0);
  $3_1 = $789($2_1 + 48 | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$4
    }
    $280(1753 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$5 : {
    if ($3_1) {
     break label$5
    }
    $280(1755 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   HEAP8[$1_1 >> 0] = $790($2_1 + 48 | 0 | 0, 7 | 0) | 0;
   label$6 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$6
    }
    $280(1758 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$7 : {
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (1 | 0)) {
     break label$7
    }
    $280(1759 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 3 | 0) | 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 5 | 0) | 0;
   $3_1 = 0;
   HEAP8[($1_1 + 3 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 4 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 5 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 6 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 7 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 8 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   HEAP8[($1_1 + 9 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 2 | 0) | 0;
   $4_1 = $790($2_1 + 48 | 0 | 0, 3 | 0) | 0;
   label$8 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$8
    }
    $280(1772 | 0, 10 | 0);
    break label$3;
   }
   label$9 : {
    if (!$4_1) {
     break label$9
    }
    $280(1773 | 0, 8 | 0);
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = ($789($2_1 + 48 | 0 | 0) | 0 | 0) != (0 | 0);
   label$10 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$10
    }
    $280(1776 | 0, 10 | 0);
    break label$3;
   }
   HEAP8[($1_1 + 11 | 0) >> 0] = 0;
   label$11 : {
    label$12 : {
     if (!(HEAPU8[($1_1 + 10 | 0) >> 0] | 0)) {
      break label$12
     }
     HEAP8[($1_1 + 11 | 0) >> 0] = $790($2_1 + 48 | 0 | 0, 4 | 0) | 0;
     break label$11;
    }
    $792($2_1 + 48 | 0 | 0, 4 | 0);
   }
   label$13 : {
    if (!($784($2_1 + 48 | 0 | 0) | 0)) {
     break label$13
    }
    $280(1784 | 0, 10 | 0);
    $3_1 = 0;
    break label$3;
   }
   $766($0_1 | 0, $785($2_1 + 48 | 0 | 0) | 0 | 0) | 0;
   $3_1 = 1;
   if ((HEAP8[(0 + 61976 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61976 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
   $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   $7_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
   $8_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
   $9_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
   $10_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   $11_1 = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
   $12_1 = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
   $3_1 = 1;
   HEAP32[($2_1 + 40 | 0) >> 2] = $12_1 + 1 | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $11_1 ? 21515 : 21431;
   HEAP32[($2_1 + 28 | 0) >> 2] = $10_1 ? 21493 : 21431;
   HEAP32[($2_1 + 24 | 0) >> 2] = $9_1 ? 21471 : 21431;
   HEAP32[($2_1 + 20 | 0) >> 2] = $8_1 ? 21459 : 21431;
   HEAP32[($2_1 + 16 | 0) >> 2] = $7_1 ? 21447 : 21431;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$2_1 >> 2] = $5_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $4_1 ? 21432 : 21431;
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 ? 21419 : 21431;
   $827(21305 | 0, $2_1 | 0);
  }
  label$14 : {
   $14_1 = $2_1 + 80 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $3_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 237 | 0);
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 219 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 219 | 0) >> 0] = 0;
   $345($0_1 + 56 | 0 | 0);
  }
  label$4 : {
   if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
    break label$4
   }
   HEAP8[($0_1 + 217 | 0) >> 0] = 0;
   $347($0_1 + 8 | 0 | 0);
  }
  label$5 : {
   if (!(HEAPU8[($0_1 + 218 | 0) >> 0] | 0)) {
    break label$5
   }
   HEAP8[($0_1 + 218 | 0) >> 0] = 0;
   $343($0_1 + 36 | 0 | 0);
  }
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $845($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0);
  $284($0_1 | 0);
  $303($2_1 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 85;
  HEAP32[($2_1 + 4 | 0) >> 2] = 86;
  HEAP32[$2_1 >> 2] = $0_1;
  $1_1 = $302($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   $294($1_1 | 0, $0_1 + 320 | 0 | 0, 440786851 | 0, 87 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 336 | 0 | 0, 290298740 | 0, 88 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 352 | 0 | 0, 374648427 | 0, 89 | 0);
   $294(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 368 | 0 | 0, 357149030 | 0, 90 | 0);
   $1_1 = 0;
   HEAP16[($0_1 + 384 | 0) >> 1] = 0;
  }
  label$5 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  HEAP8[($0_1 + 302 | 0) >> 0] = 0;
  HEAP16[($0_1 + 300 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 0;
  HEAP32[($0_1 + 292 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 216 | 0) >> 2] = 0;
  HEAP32[($0_1 + 220 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 380 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 364 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 348 | 0) >> 2] = $0_1;
  HEAP32[($0_1 + 332 | 0) >> 2] = $0_1;
  i64toi32_i32$1 = $0_1 + 248 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $67($0_1 + 224 | 0 | 0);
  $67($0_1 + 256 | 0 | 0);
  $67($0_1 + 272 | 0 | 0);
 }
 
 function $285($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   $827(22103 | 0, $3_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 81 | 0);
  }
  label$6 : {
   if ((HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$6
   }
   HEAP32[($0_1 + 296 | 0) >> 2] = 0;
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(22149 | 0, $3_1 | 0);
  }
  $4_1 = 0;
  label$7 : {
   if (($1_1 | 0) != (408125543 | 0)) {
    break label$7
   }
   $4_1 = 1;
   HEAP8[($0_1 + 302 | 0) >> 0] = 1;
  }
  label$8 : {
   $6_1 = $3_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $286($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $85_1 = 0, $106_1 = 0, $112_1 = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $3$hi;
   HEAP32[($4_1 + 144 | 0) >> 2] = $3_1;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($4_1 + 140 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 136 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 132 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 128 | 0) >> 2] = 22020;
   $827(21990 | 0, $4_1 + 128 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 40 | 0);
  }
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        if (($1_1 | 0) > (408125542 | 0)) {
         break label$11
        }
        if (($1_1 | 0) == (236 | 0)) {
         break label$9
        }
        if (($1_1 | 0) == (272869232 | 0)) {
         break label$10
        }
        if (($1_1 | 0) != (290298740 | 0)) {
         break label$6
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 252 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$6
        }
        $1_1 = $0_1 + 240 | 0;
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$7
        }
        i64toi32_i32$2 = $3$hi;
        HEAP32[($4_1 + 112 | 0) >> 2] = $3_1;
        i64toi32_i32$2 = $2$hi;
        HEAP32[($4_1 + 108 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 104 | 0) >> 2] = 22088;
        HEAP32[($4_1 + 100 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 96 | 0) >> 2] = 22020;
        $827(22051 | 0, $4_1 + 96 | 0 | 0);
        break label$7;
       }
       if (($1_1 | 0) == (408125543 | 0)) {
        break label$8
       }
       if (($1_1 | 0) == (524531317 | 0)) {
        break label$9
       }
       if (($1_1 | 0) != (423732329 | 0)) {
        break label$6
       }
       label$12 : {
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$2 = $3$hi;
        HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
        i64toi32_i32$2 = $2$hi;
        HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = 21942;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 22020;
        $827(22051 | 0, $4_1 | 0);
       }
       $85_1 = $0_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$0 = $2_1;
       i64toi32_i32$4 = $3_1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$3 = $85_1;
       HEAP32[(i64toi32_i32$3 + 288 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$3 + 292 | 0) >> 2] = i64toi32_i32$5;
       $1_1 = $0_1 + 256 | 0;
       break label$7;
      }
      label$13 : {
       if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$5 = $3$hi;
       HEAP32[($4_1 + 48 | 0) >> 2] = $3_1;
       i64toi32_i32$5 = $2$hi;
       HEAP32[($4_1 + 44 | 0) >> 2] = $2_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = 21953;
       HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
       HEAP32[($4_1 + 32 | 0) >> 2] = 22020;
       $827(22051 | 0, $4_1 + 32 | 0 | 0);
      }
      $106_1 = $0_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + $2$hi | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = $106_1;
      HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] = i64toi32_i32$4;
      $1_1 = $0_1 + 272 | 0;
      break label$7;
     }
     $112_1 = $0_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = $3$hi + $2$hi | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$5 = $112_1;
     HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] = i64toi32_i32$3;
     HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] = i64toi32_i32$1;
     break label$6;
    }
    label$14 : {
     if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$14
     }
     if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$14
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $3$hi;
     HEAP32[($4_1 + 80 | 0) >> 2] = $3_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $2$hi;
     HEAP32[($4_1 + 76 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 72 | 0) >> 2] = 22080;
     HEAP32[($4_1 + 68 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 64 | 0) >> 2] = 22020;
     $827(22051 | 0, $4_1 + 64 | 0 | 0);
    }
    $1_1 = $0_1 + 224 | 0;
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = $2$hi;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $2_1;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = $2$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $3$hi;
   HEAP32[i64toi32_i32$5 >> 2] = $3_1;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = $3$hi;
  }
  label$15 : {
   $6_1 = $4_1 + 160 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return 0 | 0;
 }
 
 function $287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $88_1 = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 72 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = 22234;
   $827(22210 | 0, $3_1 + 64 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 101 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (!(HEAPU8[($4_1 + 216 | 0) >> 0] | 0)) {
      break label$10
     }
     label$11 : {
      if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      HEAP32[($3_1 + 52 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 48 | 0) >> 2] = 22234;
      $827(22257 | 0, $3_1 + 48 | 0 | 0);
     }
     $0_1 = 1;
     HEAP8[($4_1 + 301 | 0) >> 0] = 1;
     if ($2_1) {
      break label$9
     }
     break label$8;
    }
    label$12 : {
     if ($2_1) {
      break label$12
     }
     $0_1 = 0;
     break label$8;
    }
    $762($3_1 + 96 | 0 | 0, $2_1 | 0);
    label$13 : {
     label$14 : {
      if (!($339($3_1 + 96 | 0 | 0, $756($2_1 | 0) | 0 | 0, $3_1 + 112 | 0 | 0) | 0)) {
       break label$14
      }
      if (!($341($3_1 + 112 | 0 | 0) | 0)) {
       break label$13
      }
      $0_1 = ($3_1 + 112 | 0) + 16 | 0;
      $823($4_1 + 303 | 0 | 0, $0_1 | 0, 16 | 0) | 0;
      HEAP8[($4_1 + 216 | 0) >> 0] = 1;
      if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$13
      }
      if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$13
      }
      i64toi32_i32$0 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
      $88_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 16 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $88_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[$3_1 >> 2] = 22234;
      HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
      $827(22305 | 0, $3_1 | 0);
      break label$13;
     }
     label$15 : {
      if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      HEAP32[($3_1 + 40 | 0) >> 2] = 22398;
      HEAP32[($3_1 + 36 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = 22234;
      $827(22345 | 0, $3_1 + 32 | 0 | 0);
     }
     HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    }
    $0_1 = 0;
   }
   $735($2_1 | 0);
  }
  label$16 : {
   $7_1 = $3_1 + 160 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$3_1 >> 2] = 22403;
   $827(22210 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 140 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   $762($3_1 + 32 | 0 | 0, $2_1 | 0);
   label$9 : {
    if (HEAPU8[($4_1 + 218 | 0) >> 0] | 0) {
     break label$9
    }
    $1_1 = $4_1 + 36 | 0;
    $0_1 = $342($3_1 + 32 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 218 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    $343($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$10 : {
   $7_1 = $3_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $289($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $5_1 = 0;
     break label$4;
    }
    $5_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = 22430;
   $827(22210 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 163 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   label$9 : {
    if (HEAPU8[($4_1 + 217 | 0) >> 0] | 0) {
     break label$9
    }
    $762($3_1 + 48 | 0 | 0, $2_1 | 0);
    $1_1 = $4_1 + 8 | 0;
    $0_1 = $346($3_1 + 48 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 217 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    label$10 : {
     if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 21915;
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = 22430;
     $827(22345 | 0, $3_1 | 0);
    }
    HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    $347($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $290($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $5_1 = 0;
     break label$4;
    }
    $5_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = 22455;
   $827(22210 | 0, $3_1 + 16 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 392 | 0, $4_1 | 0, 21616 | 0, 21636 | 0, 188 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   label$9 : {
    if (HEAPU8[($4_1 + 219 | 0) >> 0] | 0) {
     break label$9
    }
    $762($3_1 + 48 | 0 | 0, $2_1 | 0);
    $1_1 = $4_1 + 56 | 0;
    $0_1 = $344($3_1 + 48 | 0 | 0, $756($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($4_1 + 219 | 0) >> 0] = $0_1;
    if ($0_1) {
     break label$9
    }
    label$10 : {
     if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 22537;
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = 22455;
     $827(22486 | 0, $3_1 | 0);
    }
    HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    $345($1_1 | 0);
   }
   $735($2_1 | 0);
  }
  label$11 : {
   $7_1 = $3_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return 0 | 0;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (21616 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 392 | 0, $0_1 | 0, 21616 | 0, 21636 | 0, 283 | 0);
  }
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 320 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 368 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 352 | 0 | 0);
  $295(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 336 | 0 | 0);
  $306(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $292($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $10_1 = 0, $14_1 = 0, $14$hi = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, $4_1 = 0, $113$hi = 0, $9_1 = 0, $202_1 = 0, $204_1 = 0, $204$hi = 0, $206_1 = 0, $206$hi = 0, $226_1 = 0, $226$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $230$hi = 0, $231$hi = 0, $246_1 = 0, $246$hi = 0;
  label$1 : {
   $3_1 = global$0 - 192 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $284($0_1 | 0);
  $4_1 = $3_1 + 128 | 0;
  i64toi32_i32$0 = 0;
  $13_1 = 0;
  $13$hi = i64toi32_i32$0;
  $5_1 = 0;
  $6_1 = 1;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 156 | 0) >> 2] = 4096;
      i64toi32_i32$0 = $13$hi;
      HEAP32[($3_1 + 152 | 0) >> 2] = $13_1;
      HEAP32[($3_1 + 148 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 144 | 0) >> 2] = 21740;
      $827(21719 | 0, $3_1 + 144 | 0 | 0);
     }
     label$7 : {
      i64toi32_i32$0 = $13$hi;
      $7_1 = $50($1_1 | 0, $13_1 | 0, i64toi32_i32$0 | 0, 4096 | 0, $3_1 + 188 | 0 | 0) | 0;
      if (!$7_1) {
       break label$7
      }
      $8_1 = $756($7_1 | 0) | 0;
      label$8 : {
       if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[$4_1 >> 2] = $7_1;
       HEAP32[($3_1 + 124 | 0) >> 2] = $8_1;
       i64toi32_i32$0 = $13$hi;
       HEAP32[($3_1 + 120 | 0) >> 2] = $13_1;
       HEAP32[($3_1 + 116 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 112 | 0) >> 2] = 21740;
       $827(21764 | 0, $3_1 + 112 | 0 | 0);
      }
      label$9 : {
       if ($8_1) {
        break label$9
       }
       $735($7_1 | 0);
       break label$7;
      }
      $797($2_1 | 0, $7_1 | 0);
      $7_1 = $307(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
      label$10 : {
       if (!($6_1 & 1 | 0)) {
        break label$10
       }
       if (HEAPU8[($0_1 + 216 | 0) >> 0] | 0) {
        break label$10
       }
       if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
       HEAP32[$3_1 >> 2] = 21827;
       $827(21789 | 0, $3_1 | 0);
       break label$4;
      }
      label$11 : {
       if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
        break label$11
       }
       if (!(HEAPU8[($0_1 + 219 | 0) >> 0] | 0)) {
        break label$11
       }
       if (($5_1 ^ 1 | 0) & 1 | 0) {
        break label$11
       }
       label$12 : {
        if (!(HEAPU8[($0_1 + 384 | 0) >> 0] | 0)) {
         break label$12
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 264 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
        if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
         break label$11
        }
       }
       if (!(HEAPU8[($0_1 + 385 | 0) >> 0] | 0)) {
        break label$7
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$1 = HEAP32[($0_1 + 280 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0_1 + 284 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
        break label$7
       }
      }
      if (HEAPU8[($0_1 + 302 | 0) >> 0] | 0) {
       break label$4
      }
      label$13 : {
       if ($7_1) {
        break label$13
       }
       if (!($834(61992 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = 21827;
       $827(21855 | 0, $3_1 + 16 | 0 | 0);
       break label$4;
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = 0;
      $113$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $113$hi;
      i64toi32_i32$1 = $8_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $13_1 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$5;
      label$14 : {
       if (HEAP32[($0_1 + 296 | 0) >> 2] | 0) {
        break label$14
       }
       label$15 : {
        label$16 : {
         if (HEAPU8[($0_1 + 218 | 0) >> 0] | 0) {
          break label$16
         }
         $7_1 = 0;
         break label$15;
        }
        label$17 : {
         label$18 : {
          $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
          if ($6_1) {
           break label$18
          }
          $7_1 = 0;
          $8_1 = 1;
          break label$17;
         }
         $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         $7_1 = 0;
         label$19 : while (1) {
          label$20 : {
           $8_1 = $9_1 + Math_imul($7_1, 24) | 0;
           if (!(HEAPU8[($8_1 + 17 | 0) >> 0] | 0)) {
            break label$20
           }
           if (!(HEAPU8[($8_1 + 16 | 0) >> 0] | 0)) {
            break label$20
           }
           label$21 : {
            label$22 : {
             label$23 : {
              $10_1 = HEAP32[$8_1 >> 2] | 0;
              if (($10_1 | 0) > (374648426 | 0)) {
               break label$23
              }
              if (($10_1 | 0) == (272869232 | 0)) {
               break label$22
              }
              if (($10_1 | 0) != (357149030 | 0)) {
               break label$20
              }
              if (HEAPU8[($0_1 + 221 | 0) >> 0] | 0) {
               break label$20
              }
              HEAP8[($0_1 + 221 | 0) >> 0] = 1;
              if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$21
              }
              HEAP32[($3_1 + 72 | 0) >> 2] = 21922;
              HEAP32[($3_1 + 68 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 64 | 0) >> 2] = 21827;
              $827(21892 | 0, $3_1 + 64 | 0 | 0);
              break label$21;
             }
             label$24 : {
              if (($10_1 | 0) == (423732329 | 0)) {
               break label$24
              }
              if (($10_1 | 0) != (374648427 | 0)) {
               break label$20
              }
              if (HEAPU8[($0_1 + 220 | 0) >> 0] | 0) {
               break label$20
              }
              HEAP8[($0_1 + 220 | 0) >> 0] = 1;
              if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$21
              }
              HEAP32[($3_1 + 56 | 0) >> 2] = 21915;
              HEAP32[($3_1 + 52 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 48 | 0) >> 2] = 21827;
              $827(21892 | 0, $3_1 + 48 | 0 | 0);
              break label$21;
             }
             if (HEAPU8[($0_1 + 222 | 0) >> 0] | 0) {
              break label$20
             }
             HEAP8[($0_1 + 222 | 0) >> 0] = 1;
             if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$21
             }
             if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$21
             }
             HEAP32[($3_1 + 88 | 0) >> 2] = 21942;
             HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
             HEAP32[($3_1 + 80 | 0) >> 2] = 21827;
             $827(21892 | 0, $3_1 + 80 | 0 | 0);
             break label$21;
            }
            if (HEAPU8[($0_1 + 223 | 0) >> 0] | 0) {
             break label$20
            }
            HEAP8[($0_1 + 223 | 0) >> 0] = 1;
            if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$21
            }
            if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$21
            }
            HEAP32[($3_1 + 104 | 0) >> 2] = 21953;
            HEAP32[($3_1 + 100 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 96 | 0) >> 2] = 21827;
            $827(21892 | 0, $3_1 + 96 | 0 | 0);
           }
           HEAP32[($0_1 + 296 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
           $202_1 = $0_1;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$5 = HEAP32[($0_1 + 224 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
           $204_1 = i64toi32_i32$5;
           $204$hi = i64toi32_i32$3;
           i64toi32_i32$2 = $8_1;
           i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $206_1 = i64toi32_i32$3;
           $206$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $204$hi;
           i64toi32_i32$2 = $204_1;
           i64toi32_i32$3 = $206$hi;
           i64toi32_i32$1 = $206_1;
           i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           i64toi32_i32$2 = $202_1;
           HEAP32[(i64toi32_i32$2 + 288 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(i64toi32_i32$2 + 292 | 0) >> 2] = i64toi32_i32$4;
           $7_1 = 1;
           $8_1 = 0;
           break label$17;
          }
          $8_1 = 1;
          $7_1 = $7_1 + 1 | 0;
          if ($7_1 >>> 0 < $6_1 >>> 0) {
           continue label$19
          }
          break label$19;
         };
         $7_1 = 0;
        }
        $5_1 = $5_1 | $8_1 | 0;
       }
       i64toi32_i32$5 = $0_1;
       i64toi32_i32$4 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$4;
       $14$hi = i64toi32_i32$2;
       if (!(i64toi32_i32$4 | i64toi32_i32$2 | 0)) {
        break label$14
       }
       i64toi32_i32$4 = $0_1;
       i64toi32_i32$2 = 0;
       HEAP32[($0_1 + 288 | 0) >> 2] = 0;
       HEAP32[($0_1 + 292 | 0) >> 2] = i64toi32_i32$2;
       $296(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 160 | 0 | 0);
       label$25 : {
        if ($7_1) {
         break label$25
        }
        i64toi32_i32$2 = $14$hi;
        $226_1 = $14_1;
        $226$hi = i64toi32_i32$2;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
        $228_1 = i64toi32_i32$2;
        $228$hi = i64toi32_i32$4;
        i64toi32_i32$5 = $3_1;
        i64toi32_i32$4 = HEAP32[($3_1 + 168 | 0) >> 2] | 0;
        i64toi32_i32$2 = 0;
        $230_1 = i64toi32_i32$4;
        $230$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $228$hi;
        i64toi32_i32$5 = $228_1;
        i64toi32_i32$4 = $230$hi;
        i64toi32_i32$1 = $230_1;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $231$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $226$hi;
        i64toi32_i32$2 = $226_1;
        i64toi32_i32$5 = $231$hi;
        i64toi32_i32$1 = i64toi32_i32$3;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
         break label$14
        }
       }
       $796($2_1 | 0);
       label$26 : {
        if ((HEAP8[(0 + 61992 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$26
        }
        if (!($828(2 | 0, 61992 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$26
        }
        HEAP32[($3_1 + 32 | 0) >> 2] = 21827;
        HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
        i64toi32_i32$2 = $14$hi;
        HEAP32[($3_1 + 40 | 0) >> 2] = $14_1;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
        $246_1 = i64toi32_i32$2;
        $246$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$1 = $14_1;
        i64toi32_i32$2 = $246$hi;
        i64toi32_i32$5 = $246_1;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$4 - (HEAP32[($3_1 + 168 | 0) >> 2] | 0) | 0;
        $827(21962 | 0, $3_1 + 32 | 0 | 0);
       }
       i64toi32_i32$3 = $14$hi;
       $299(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $14_1 | 0, i64toi32_i32$3 | 0) | 0;
       $13_1 = $14_1;
       $13$hi = i64toi32_i32$3;
      }
      $6_1 = 0;
      continue label$5;
     }
     break label$5;
    };
    if (!(HEAPU8[($0_1 + 217 | 0) >> 0] | 0)) {
     break label$4
    }
    $7_1 = (((HEAPU8[($0_1 + 219 | 0) >> 0] | 0) << 24 | 0) + -16777216 | 0) >> 24 | 0;
    break label$3;
   }
   $7_1 = -1;
  }
  $298(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$27 : {
   $12_1 = $3_1 + 192 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $7_1 | 0;
 }
 
 function $293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0;
  $822($1_1 | 0, 0 | 0, 16 | 0) | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = 0;
  HEAP16[$1_1 >> 1] = 256;
  label$1 : {
   if (!(HEAPU8[($0_1 + 276 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP16[$1_1 >> 1] = 1;
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 240 | 0) >> 2] | 0;
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!(HEAPU8[($0_1 + 38 | 0) >> 0] | 0)) {
     break label$2
    }
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$1
    }
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 37 | 0) >> 0] | 0)) {
     break label$3
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 39 | 0) >> 0] | 0)) {
     break label$4
    }
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 2 | 0) >> 0] = 1;
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   if (!(HEAPU8[($0_1 + 13 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = ($2_1 | 0) == (3 | 0);
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
 }
 
 function $294($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 107 | 0);
  }
  $4_1 = $0_1 + 12 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     $6_1 = 0;
     $7_1 = $5_1;
     label$6 : {
      label$7 : {
       label$8 : while (1) {
        $0_1 = $7_1;
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$9 : {
         if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
          break label$9
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         if ($6_1) {
          break label$7
         }
         break label$4;
        }
        $6_1 = $0_1;
        $7_1 = HEAP32[$0_1 >> 2] | 0;
        if ($7_1) {
         continue label$8
        }
        break label$8;
       };
       HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
       $6_1 = $0_1;
      }
      $5_1 = HEAP32[$6_1 >> 2] | 0;
      break label$3;
     }
     $859(22660 | 0, 22582 | 0, 111 | 0);
     abort();
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   }
   $6_1 = $4_1;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = $1_1;
 }
 
 function $295($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 131 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(22675 | 0, 22582 | 0, 132 | 0);
  abort();
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 323 | 0);
  }
  i64toi32_i32$2 = $0_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = 0;
  $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  label$3 : {
   $3_1 = $297($0_1 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  label$4 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 3 >>> 0) {
    break label$4
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 23188 | 0) >> 2] | 0;
  }
 }
 
 function $297($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 24) + ($0_1 + 48 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 356 | 0);
  }
  $822($0_1 + 16 | 0 | 0, 0 | 0, 32 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
 }
 
 function $299($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $8$hi = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $10$hi = 0, i64toi32_i32$6 = 0, $10_1 = 0, $9$hi = 0, $9_1 = 0, $4_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $44_1 = 0, $45_1 = 0, $7_1 = 0, $6_1 = 0, $27_1 = 0, $27$hi = 0, $31_1 = 0, $31$hi = 0, $32$hi = 0, $43_1 = 0, $51_1 = 0, $51$hi = 0, $63_1 = 0, $122_1 = 0, $125_1 = 0, $125$hi = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 371 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        i64toi32_i32$2 = $0_1 + 24 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $27_1 = i64toi32_i32$0;
        $27$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
        $31_1 = i64toi32_i32$0;
        $31$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $27$hi;
        i64toi32_i32$2 = $27_1;
        i64toi32_i32$0 = $31$hi;
        i64toi32_i32$3 = $31_1;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $32$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1$hi;
        i64toi32_i32$5 = $32$hi;
        i64toi32_i32$1 = i64toi32_i32$4;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$3 = $1_1;
        if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
         break label$10
        }
        if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$9
        }
        if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        HEAP32[$2_1 >> 2] = $0_1;
        i64toi32_i32$1 = $1$hi;
        HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
        $43_1 = $2_1;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$5 = 0;
         $34_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        } else {
         i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
         $34_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
        }
        HEAP32[($43_1 + 4 | 0) >> 2] = $34_1;
        $827(22718 | 0, $2_1 | 0);
        break label$9;
       }
       $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
       $51_1 = i64toi32_i32$5;
       $51$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$5 = $51$hi;
       i64toi32_i32$2 = $51_1;
       i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
       $8_1 = i64toi32_i32$0;
       $8$hi = i64toi32_i32$4;
       label$11 : {
        if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$11
        }
        if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        i64toi32_i32$4 = $8$hi;
        HEAP32[($2_1 + 28 | 0) >> 2] = $8_1;
        HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
        i64toi32_i32$4 = $1$hi;
        HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
        $63_1 = $2_1;
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = 32;
        i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $35_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
         $35_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
        }
        HEAP32[($63_1 + 20 | 0) >> 2] = $35_1;
        $827(22754 | 0, $2_1 + 16 | 0 | 0);
       }
       label$12 : {
        label$13 : {
         label$14 : {
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$4 = $8_1;
          i64toi32_i32$3 = 0;
          i64toi32_i32$2 = 1;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
           $36_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
             $37_1 = 0
            } else {
             $37_1 = 1
            }
            $38_1 = $37_1;
           } else {
            $38_1 = 0
           }
           $36_1 = $38_1;
          }
          if ($36_1) {
           break label$14
          }
          $3_1 = $297($0_1 | 0) | 0;
          if (!$3_1) {
           break label$13
          }
          label$15 : while (1) {
           label$16 : {
            i64toi32_i32$4 = $8$hi;
            i64toi32_i32$2 = $3_1;
            i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
            $9_1 = i64toi32_i32$4;
            $9$hi = i64toi32_i32$1;
            i64toi32_i32$2 = i64toi32_i32$4;
            i64toi32_i32$4 = 0;
            i64toi32_i32$3 = -1;
            i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
            $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
            $10$hi = i64toi32_i32$4;
            i64toi32_i32$4 = $8$hi;
            i64toi32_i32$1 = $8_1;
            i64toi32_i32$2 = $10$hi;
            i64toi32_i32$3 = $10_1;
            if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$16
            }
            i64toi32_i32$1 = $8$hi;
            $300($0_1 | 0, $8_1 | 0) | 0;
            break label$13;
           }
           i64toi32_i32$1 = $9$hi;
           $3_1 = $9_1;
           if ($300($0_1 | 0, $3_1 | 0) | 0) {
            break label$8
           }
           $301($0_1 | 0, $3_1 | 0);
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$1 = $10$hi;
           i64toi32_i32$1 = $8$hi;
           i64toi32_i32$3 = $8_1;
           i64toi32_i32$4 = $10$hi;
           i64toi32_i32$2 = $10_1;
           i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
           i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
           i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
           i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
           $8_1 = i64toi32_i32$5;
           $8$hi = i64toi32_i32$0;
           $3_1 = $297($0_1 | 0) | 0;
           if ($3_1) {
            continue label$15
           }
           break label$15;
          };
          i64toi32_i32$0 = $8$hi;
          i64toi32_i32$1 = $8_1;
          i64toi32_i32$3 = -1;
          i64toi32_i32$2 = -1;
          if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
           $39_1 = 1
          } else {
           if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
             $40_1 = 0
            } else {
             $40_1 = 1
            }
            $41_1 = $40_1;
           } else {
            $41_1 = 0
           }
           $39_1 = $41_1;
          }
          if ($39_1) {
           break label$13
          }
          $859(22797 | 0, 22582 | 0, 400 | 0);
          abort();
         }
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$2 = $8_1;
         i64toi32_i32$0 = -1;
         i64toi32_i32$3 = -1;
         if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
          $42_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $44_1 = 0
           } else {
            $44_1 = 1
           }
           $45_1 = $44_1;
          } else {
           $45_1 = 0
          }
          $42_1 = $45_1;
         }
         if ($42_1) {
          break label$12
         }
         $3_1 = $297($0_1 | 0) | 0;
         if (!$3_1) {
          break label$13
         }
         i64toi32_i32$2 = $8$hi;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = $8$hi;
         i64toi32_i32$0 = $8_1;
         i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
         i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
         i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
         $8_1 = i64toi32_i32$4;
         $8$hi = i64toi32_i32$5;
         label$17 : while (1) {
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$3;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $9_1 = i64toi32_i32$3;
          $9$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$0 = $9_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
           break label$7
          }
          label$18 : {
           i64toi32_i32$2 = $8$hi;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$2 = $9$hi;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$0 = $10_1;
           i64toi32_i32$5 = $9$hi;
           i64toi32_i32$3 = $9_1;
           i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
           i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
           i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
           i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
           i64toi32_i32$2 = i64toi32_i32$1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
           $10_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           $10$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$4 = $8_1;
           i64toi32_i32$2 = $10$hi;
           i64toi32_i32$3 = $10_1;
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$18
           }
           $122_1 = $3_1;
           i64toi32_i32$4 = $9$hi;
           i64toi32_i32$4 = $8$hi;
           i64toi32_i32$3 = $8_1;
           i64toi32_i32$0 = 0;
           i64toi32_i32$2 = -1;
           i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
           $125_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
           $125$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $9$hi;
           i64toi32_i32$4 = $9_1;
           i64toi32_i32$3 = $125$hi;
           i64toi32_i32$2 = $125_1;
           i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           i64toi32_i32$4 = $122_1;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$5;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
           break label$13;
          }
          $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          if (!$3_1) {
           break label$6
          }
          if ($3_1 >>> 0 >= 17 >>> 0) {
           break label$5
          }
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$1 = $8$hi;
          i64toi32_i32$0 = $8_1;
          i64toi32_i32$4 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
          i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
          $8_1 = i64toi32_i32$3;
          $8$hi = i64toi32_i32$5;
          label$19 : {
           label$20 : while (1) {
            label$21 : {
             $4_1 = $3_1 + -1 | 0;
             if ($4_1) {
              break label$21
             }
             $4_1 = 0;
             break label$19;
            }
            $5_1 = Math_imul($3_1, 24);
            $3_1 = $4_1;
            i64toi32_i32$1 = ($5_1 + $0_1 | 0) + 16 | 0;
            i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            if (!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
             continue label$20
            }
            break label$20;
           };
          }
          HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
          $3_1 = $297($0_1 | 0) | 0;
          if ($3_1) {
           continue label$17
          }
          break label$17;
         };
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       }
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$5 = $0_1;
       HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $1_1;
       HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$0;
      }
      label$22 : {
       $7_1 = $2_1 + 32 | 0;
       if ($7_1 >>> 0 < global$2 >>> 0) {
        fimport$11()
       }
       global$0 = $7_1;
      }
      return 0 | 0;
     }
     $859(22789 | 0, 22582 | 0, 397 | 0);
     abort();
    }
    $859(22805 | 0, 22582 | 0, 408 | 0);
    abort();
   }
   $859(22834 | 0, 22582 | 0, 417 | 0);
   abort();
  }
  $859(22857 | 0, 22582 | 0, 418 | 0);
  abort();
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $3$hi = 0, i64toi32_i32$5 = 0, $2_1 = 0, $4$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 >= 17 >>> 0) {
      break label$2
     }
     $0_1 = ($0_1 + Math_imul($2_1 + -1 | 0, 24) | 0) + 64 | 0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $3_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $0_1;
     HEAP32[i64toi32_i32$3 >> 2] = $3_1;
     HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
     return $3_1 | 0;
    }
    $859(23063 | 0, 22582 | 0, 249 | 0);
    abort();
   }
   $859(22857 | 0, 22582 | 0, 250 | 0);
   abort();
  }
  $859(23084 | 0, 22582 | 0, 252 | 0);
  abort();
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $7$hi = 0, $8$hi = 0, $7_1 = 0, $8_1 = 0, $6$hi = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $26_1 = 0, $33_1 = 0, $35$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ($2_1 >>> 0 > 16 >>> 0) {
      break label$2
     }
     i64toi32_i32$0 = 0;
     $6_1 = $1_1;
     $6$hi = i64toi32_i32$0;
     $3_1 = $0_1 + 48 | 0;
     $1_1 = $0_1 + 56 | 0;
     label$4 : {
      label$5 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
       $26_1 = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
       $4_1 = Math_imul($2_1, 24);
       $33_1 = HEAP32[(($3_1 + $4_1 | 0) + 28 | 0) >> 2] | 0;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $35$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$1 = $35$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2_1 = FUNCTION_TABLE[HEAP32[($0_1 + 448 | 0) >> 2] | 0]($26_1, $33_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
       HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($2_1 | 0) == (1 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$4
       }
       $5_1 = (Math_imul($2_1, 24) + $1_1 | 0) + -16 | 0;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$5;
       $7$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $1_1 + $4_1 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $8_1 = i64toi32_i32$2;
       $8$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$3 = $8_1;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$1
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$2 = $8_1;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
        continue label$5
       }
       break label$5;
      };
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $8$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$4 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      i64toi32_i32$2 = $5_1;
      HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
     }
     return;
    }
    $859(22834 | 0, 22582 | 0, 210 | 0);
    abort();
   }
   $859(22857 | 0, 22582 | 0, 211 | 0);
   abort();
  }
  $859(23104 | 0, 22582 | 0, 223 | 0);
  abort();
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(456 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62008 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 456;
      $827(22909 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 456 | 0, $3_1 | 0, 22567 | 0);
     HEAP32[($3_1 + 448 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 440 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 444 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      $298($3_1 | 0);
      break label$5;
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(22897 | 0, 22582 | 0, 451 | 0);
   abort();
  }
  $859(22901 | 0, 22582 | 0, 452 | 0);
  abort();
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(22897 | 0, 22582 | 0, 501 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 91;
  HEAP32[($0_1 + 4 | 0) >> 2] = 92;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $304($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $305($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 513 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     if (!($834(62008 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     $827(22939 | 0, $1_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!($834(62008 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$1_1 >> 2] = $0_1;
     $827(22987 | 0, $1_1 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $298($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 456 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
  label$9 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $5_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $6_1 = 0, $60$hi = 0, $88$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (22567 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 456 | 0, $0_1 | 0, 22567 | 0, 22582 | 0, 534 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $3_1 = $798($1_1 | 0) | 0;
       if ($3_1) {
        break label$9
       }
       $4_1 = 0;
       break label$8;
      }
      $4_1 = 0;
      label$10 : while (1) {
       HEAP8[($0_1 + 40 | 0) >> 0] = 0;
       $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $4_1 = ($756($3_1 | 0) | 0) + $4_1 | 0;
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : while (1) {
           $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
           $763($2_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
           label$15 : {
            switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
            case 0:
             if (!($308($0_1 | 0, $2_1 | 0) | 0)) {
              break label$11
             }
             $309($0_1 | 0, $2_1 | 0);
             continue label$14;
            case 1:
             $5_1 = $297($0_1 | 0) | 0;
             if (!$5_1) {
              break label$7
             }
             i64toi32_i32$0 = 0;
             $8_1 = $3_1;
             $8$hi = i64toi32_i32$0;
             i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
             $9_1 = i64toi32_i32$0;
             $60$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $8$hi;
             i64toi32_i32$1 = $60$hi;
             i64toi32_i32$0 = $8$hi;
             i64toi32_i32$3 = $3_1;
             i64toi32_i32$4 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $9_1 >>> 0 > $3_1 >>> 0 | 0) | 0;
             i64toi32_i32$0 = i64toi32_i32$4 ? $3_1 : $9_1;
             i64toi32_i32$3 = i64toi32_i32$4 ? $8$hi : i64toi32_i32$1;
             $3_1 = i64toi32_i32$0;
             $766($2_1 | 0, $3_1 | 0) | 0;
             if ($300($0_1 | 0, $3_1 | 0) | 0) {
              break label$12
             }
             $301($0_1 | 0, $3_1 | 0);
             HEAP32[($0_1 + 16 | 0) >> 2] = 0;
             $3_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
             $309($0_1 | 0, $2_1 | 0);
             if (!$3_1) {
              continue label$14
             }
             break label$11;
            case 3:
             break label$13;
            case 2:
             break label$15;
            default:
             break label$11;
            };
           }
           $5_1 = $297($0_1 | 0) | 0;
           if (!$5_1) {
            break label$6
           }
           i64toi32_i32$4 = $5_1;
           i64toi32_i32$3 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $8_1 = i64toi32_i32$3;
           $8$hi = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           $88$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $8$hi;
           i64toi32_i32$4 = i64toi32_i32$3;
           i64toi32_i32$3 = $88$hi;
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > $3_1 >>> 0 | 0) | 0) {
            break label$11
           }
           i64toi32_i32$4 = $8$hi;
           i64toi32_i32$4 = $8$hi;
           $3_1 = $8_1;
           if ($300($0_1 | 0, $3_1 | 0) | 0) {
            break label$5
           }
           $310($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0);
           HEAP32[($0_1 + 32 | 0) >> 2] = 0;
           $301($0_1 | 0, $3_1 | 0);
           $5_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
           $766($2_1 | 0, $3_1 | 0) | 0;
           $309($0_1 | 0, $2_1 | 0);
           HEAP32[($0_1 + 16 | 0) >> 2] = 0;
           if (!$5_1) {
            continue label$14
           }
           break label$8;
          };
         }
         $766($2_1 | 0, $3_1 | 0) | 0;
        }
        $309($0_1 | 0, $2_1 | 0);
       }
       $3_1 = $798($1_1 | 0) | 0;
       if ($3_1) {
        continue label$10
       }
       break label$10;
      };
     }
     label$18 : {
      $7_1 = $2_1 + 16 | 0;
      if ($7_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $7_1;
     }
     return $4_1 | 0;
    }
    $859(23036 | 0, 22582 | 0, 562 | 0);
    abort();
   }
   $859(23036 | 0, 22582 | 0, 575 | 0);
   abort();
  }
  $859(23043 | 0, 22582 | 0, 583 | 0);
  abort();
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  label$3 : {
   label$4 : {
    if (!($329($1_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    $3_1 = 0;
    $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$3
    }
    i64toi32_i32$0 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) == (-1 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
     break label$3
    }
    $3_1 = $311($0_1 | 0, $4_1 | 0) | 0;
    $4_1 = $297($0_1 | 0) | 0;
    label$5 : {
     if (!($312($0_1 | 0, $2_1 + 8 | 0 | 0, $3_1 | 0, $754($1_1 | 0) | 0 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      if (($1_1 | 0) != (408125543 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      $3_1 = 1;
      break label$3;
     }
     if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     label$7 : {
      if ($3_1) {
       break label$7
      }
      if (!$4_1) {
       break label$5
      }
      if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 2;
     HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 32 | 0) >> 2] = $3_1;
     $3_1 = 1;
     break label$3;
    }
    $3_1 = 1;
    HEAP32[($0_1 + 16 | 0) >> 2] = 1;
    break label$3;
   }
   $769($1_1 | 0, $2_1 + 24 | 0 | 0);
   $3_1 = 0;
  }
  label$8 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $310($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $47_1 = 0, $50_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62008 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62008 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
       HEAP32[$5_1 >> 2] = $7_1;
       $827(23131 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $47_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $47_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $50_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 16 | 0) >> 2] = $50_1;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $7_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 16 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$7_1) {
         break label$3
        }
        $7_1 = FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0]($6_1, $2_1, $7_1) | 0;
        break label$8;
       }
       $7_1 = FUNCTION_TABLE[HEAP32[($6_1 + 8 | 0) >> 2] | 0]($6_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($7_1 | 0) == (1 | 0) | 0;
      $6_1 = HEAP32[$6_1 >> 2] | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $9_1 = $5_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return;
   }
   $859(23166 | 0, 22582 | 0, 175 | 0);
   abort();
  }
  $859(23180 | 0, 22582 | 0, 177 | 0);
  abort();
 }
 
 function $311($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $312($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $40$hi = 0, $43$hi = 0, $45$hi = 0, $46$hi = 0;
  $4_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($5_1 >>> 0 > 15 >>> 0) {
    break label$1
   }
   $4_1 = ($0_1 + 48 | 0) + Math_imul($5_1, 24) | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 28 | 0) >> 2] = $1_1;
   $4_1 = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $5_1 + 1 | 0;
   $36_1 = $0_1 + 44 | 0;
   $38_1 = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
   $39_1 = $1_1;
   $40_1 = $6_1;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $43$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $45$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $43$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $45$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $46$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $40$hi;
   i64toi32_i32$2 = $46$hi;
   $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 444 | 0) >> 2] | 0]($38_1, $39_1, $40_1, i64toi32_i32$5, i64toi32_i32$4, i64toi32_i32$2) | 0;
   HEAP32[$36_1 >> 2] = $1_1;
   $0_1 = $0_1 + 40 | 0;
   HEAP8[$0_1 >> 0] = HEAPU8[$0_1 >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 64 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (!($329($0_1 | 0, $1_1 + 48 | 0 | 0) | 0)) {
    break label$3
   }
   if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (440786851 | 0)) {
    break label$3
   }
   if (!($339($0_1 | 0, HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $2_1 = $341($1_1 | 0) | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 64 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(656 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 656;
    $827(23284 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 656 | 0, $2_1 | 0, 23204 | 0);
   HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   if (($283($2_1 + 176 | 0 | 0, $0_1 | 0) | 0 | 0) >= (0 | 0)) {
    break label$3
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 204 | 0);
  }
  $291($0_1 + 176 | 0 | 0);
  $845($0_1 | 0, 656 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $316($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 876 | 0);
  }
  HEAP8[($0_1 + 560 | 0) >> 0] = HEAPU8[($3_1 + 10 | 0) >> 0] | 0;
  $5_1 = 0;
  label$5 : {
   $6_1 = $0_1 + 176 | 0;
   if ($292($6_1 | 0, $1_1 | 0, $2_1 | 0) | 0) {
    break label$5
   }
   if (!(HEAPU8[($0_1 + 395 | 0) >> 0] | 0)) {
    break label$5
   }
   label$6 : {
    $5_1 = $813(104 | 0) | 0;
    if ($5_1) {
     break label$6
    }
    $5_1 = 0;
    if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 104;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(23416 | 0, $4_1 | 0);
    break label$5;
   }
   $822($5_1 | 0, 0 | 0, 104 | 0) | 0;
   $823($5_1 + 84 | 0 | 0, $0_1 + 479 | 0 | 0, 16 | 0) | 0;
   label$7 : {
    $2_1 = $0_1 + 16 | 0;
    if (($70($2_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 61440 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $7_1 = $0_1 + 96 | 0;
    if (($70($7_1 | 0, $1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 61440 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $214($5_1 | 0, 13 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[($5_1 + 40 | 0) >> 2] = 0;
    HEAP32[($5_1 + 44 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 3;
    i64toi32_i32$1 = $5_1 + 48 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 56 | 0) >> 0] = 0;
    label$8 : {
     if (!(HEAPU8[($0_1 + 385 | 0) >> 0] | 0)) {
      break label$8
     }
     if (!(HEAPU8[($0_1 + 384 | 0) >> 0] | 0)) {
      break label$8
     }
     label$9 : {
      label$10 : {
       $11_1 = +HEAPF64[($0_1 + 336 | 0) >> 3] * +((HEAP32[($0_1 + 332 | 0) >> 2] | 0) >>> 0) / 1.0e6;
       if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
        break label$10
       }
       $8_1 = ~~$11_1 >>> 0;
       break label$9;
      }
      $8_1 = 0;
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $8_1;
    }
    $317($0_1 | 0, $5_1 | 0);
    label$11 : {
     i64toi32_i32$2 = $0_1 + 440 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$11
     }
     $318($0_1 | 0, $5_1 | 0, $0_1 + 432 | 0 | 0);
    }
    label$12 : {
     i64toi32_i32$2 = $0_1 + 456 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
      break label$12
     }
     $319($0_1 | 0, $5_1 | 0, $0_1 + 448 | 0 | 0);
    }
    label$13 : {
     if (!(HEAPU8[($3_1 + 11 | 0) >> 0] | 0)) {
      break label$13
     }
     $320($0_1 | 0, $5_1 | 0, $1_1 | 0);
    }
    $71($2_1 | 0);
    $71($7_1 | 0);
    break label$5;
   }
   $815($5_1 | 0);
   $5_1 = 0;
  }
  $282($6_1 | 0);
  label$14 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $9_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $15_1 = 0, $17_1 = 0.0, $8_1 = 0, $16_1 = Math_fround(0), $14_1 = 0, $13_1 = 0, $12_1 = 0, $215_1 = 0, $230_1 = 0, $238_1 = 0, $245_1 = 0, $15$hi = 0;
  label$1 : {
   $2_1 = global$0 - 224 | 0;
   $13_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 393 | 0) >> 0] | 0)) {
    break label$3
   }
   if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = 1;
   label$4 : {
    $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    $4_1 = 0;
    label$5 : while (1) {
     label$6 : {
      $5_1 = (HEAP32[($0_1 + 192 | 0) >> 2] | 0) + Math_imul($4_1, 280) | 0;
      if (!(HEAPU8[($5_1 + 244 | 0) >> 0] | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        $6_1 = $5_1 + 260 | 0;
        if (HEAPU8[$6_1 >> 0] | 0) {
         break label$8
        }
        $3_1 = 0;
        break label$7;
       }
       $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
      }
      label$9 : {
       $7_1 = $5_1 + 261 | 0;
       if (!(HEAPU8[$7_1 >> 0] | 0)) {
        break label$9
       }
       $3_1 = (HEAP32[($5_1 + 120 | 0) >> 2] | 0) + $3_1 | 0;
      }
      label$10 : {
       $8_1 = $5_1 + 274 | 0;
       if (!(HEAPU8[$8_1 >> 0] | 0)) {
        break label$10
       }
       if (!(HEAP32[($5_1 + 212 | 0) >> 2] | 0)) {
        break label$10
       }
       label$11 : {
        $9_1 = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
        if (!(HEAPU8[($9_1 + 94 | 0) >> 0] | 0)) {
         break label$11
        }
        $3_1 = (HEAP32[($9_1 + 64 | 0) >> 2] | 0) + $3_1 | 0;
       }
       if (!(HEAPU8[($9_1 + 95 | 0) >> 0] | 0)) {
        break label$10
       }
       $3_1 = (HEAP32[($9_1 + 72 | 0) >> 2] | 0) + $3_1 | 0;
      }
      label$12 : {
       $9_1 = $813($3_1 + 488 | 0 | 0) | 0;
       if ($9_1) {
        break label$12
       }
       if (!($835(62024 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$0 = 488;
       HEAP32[($2_1 + 4 | 0) >> 2] = 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[$2_1 >> 2] = 23493;
       $827(23462 | 0, $2_1 | 0);
       break label$4;
      }
      $218($9_1 | 0);
      HEAP32[($1_1 + 28 | 0) >> 2] = (HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$0 = 0;
      HEAP32[($9_1 + 424 | 0) >> 2] = 0;
      HEAP32[($9_1 + 428 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($9_1 + 345 | 0) >> 0] = 0;
      HEAP8[($9_1 + 329 | 0) >> 0] = 0;
      HEAP8[($9_1 + 379 | 0) >> 0] = 0;
      $10_1 = $9_1 + 384 | 0;
      $822($10_1 | 0, 0 | 0, 32 | 0) | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[($9_1 + 416 | 0) >> 2] = 0;
      HEAP32[($9_1 + 8 | 0) >> 2] = $3_1;
      HEAP8[($9_1 + 377 | 0) >> 0] = 0;
      HEAP8[($9_1 + 328 | 0) >> 0] = 0;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$0 = 0;
      HEAP32[($9_1 + 456 | 0) >> 2] = 0;
      HEAP32[($9_1 + 460 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$9_1 >> 2] = 0;
      i64toi32_i32$1 = $9_1 + 464 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $9_1 + 472 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $9_1 + 480 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      label$13 : {
       label$14 : {
        $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$14
        }
        HEAP32[$3_1 >> 2] = $9_1;
        break label$13;
       }
       HEAP32[$1_1 >> 2] = $9_1;
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $9_1;
      label$15 : {
       if (!(HEAPU8[($5_1 + 258 | 0) >> 0] | 0)) {
        break label$15
       }
       $823($9_1 + 329 | 0 | 0, $5_1 + 64 | 0 | 0, 16 | 0) | 0;
      }
      $11_1 = $9_1 + 488 | 0;
      label$16 : {
       if (!(HEAPU8[$6_1 >> 0] | 0)) {
        break label$16
       }
       HEAP32[($9_1 + 420 | 0) >> 2] = $11_1;
       $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
       HEAP32[($9_1 + 416 | 0) >> 2] = $3_1;
       $823($11_1 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
       $11_1 = $11_1 + (HEAP32[($5_1 + 112 | 0) >> 2] | 0) | 0;
      }
      label$17 : {
       if (!(HEAPU8[($5_1 + 259 | 0) >> 0] | 0)) {
        break label$17
       }
       $823($9_1 + 345 | 0 | 0, $5_1 + 80 | 0 | 0, 32 | 0) | 0;
      }
      label$18 : {
       if (!(HEAPU8[$7_1 >> 0] | 0)) {
        break label$18
       }
       HEAP32[($9_1 + 428 | 0) >> 2] = $11_1;
       $3_1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
       HEAP32[($9_1 + 424 | 0) >> 2] = $3_1;
       $823($11_1 | 0, HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
       $11_1 = $11_1 + (HEAP32[($5_1 + 120 | 0) >> 2] | 0) | 0;
      }
      label$19 : {
       if (!(HEAPU8[($5_1 + 262 | 0) >> 0] | 0)) {
        break label$19
       }
       label$20 : {
        $7_1 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$20
        }
        $12_1 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
        $3_1 = 0;
        label$21 : while (1) {
         i64toi32_i32$2 = $12_1 + ($3_1 << 4 | 0) | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $215_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $10_1 + ($3_1 << 3 | 0) | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $215_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         if ($3_1 >>> 0 > 2 >>> 0) {
          break label$20
         }
         $3_1 = $3_1 + 1 | 0;
         if ($3_1 >>> 0 < $7_1 >>> 0) {
          continue label$21
         }
         break label$21;
        };
       }
       HEAP8[($9_1 + 379 | 0) >> 0] = 1;
      }
      label$22 : {
       if (!(HEAPU8[($5_1 + 245 | 0) >> 0] | 0)) {
        break label$22
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $230_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $9_1;
       HEAP32[($9_1 + 448 | 0) >> 2] = $230_1;
       HEAP32[($9_1 + 452 | 0) >> 2] = i64toi32_i32$0;
      }
      label$23 : {
       if (!(HEAPU8[($5_1 + 268 | 0) >> 0] | 0)) {
        break label$23
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$0 = HEAP32[($5_1 + 176 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($5_1 + 180 | 0) >> 2] | 0;
       $238_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $9_1 + 456 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $238_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      }
      label$24 : {
       if (!(HEAPU8[($5_1 + 270 | 0) >> 0] | 0)) {
        break label$24
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$1 = HEAP32[($5_1 + 184 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
       $245_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $9_1;
       HEAP32[($9_1 + 464 | 0) >> 2] = $245_1;
       HEAP32[($9_1 + 468 | 0) >> 2] = i64toi32_i32$0;
      }
      label$25 : {
       if (!(HEAPU8[($5_1 + 272 | 0) >> 0] | 0)) {
        break label$25
       }
       HEAP8[($9_1 + 377 | 0) >> 0] = HEAPU8[($5_1 + 192 | 0) >> 0] | 0;
      }
      $293($5_1 | 0, $2_1 + 208 | 0 | 0);
      HEAP8[($9_1 + 328 | 0) >> 0] = (HEAPU8[($2_1 + 209 | 0) >> 0] | 0) ^ 1 | 0;
      HEAP8[($9_1 + 378 | 0) >> 0] = HEAPU8[($2_1 + 210 | 0) >> 0] | 0;
      HEAP32[($9_1 + 380 | 0) >> 2] = HEAP32[($2_1 + 212 | 0) >> 2] | 0;
      label$26 : {
       label$27 : {
        label$28 : {
         label$29 : {
          label$30 : {
           label$31 : {
            label$32 : {
             if (!(HEAPU8[$8_1 >> 0] | 0)) {
              break label$32
             }
             HEAP32[($9_1 + 20 | 0) >> 2] = 0;
             HEAP32[($9_1 + 4 | 0) >> 2] = 0;
             if (!(HEAP32[($5_1 + 212 | 0) >> 2] | 0)) {
              break label$26
             }
             label$33 : {
              $3_1 = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
              if (!(HEAPU8[($3_1 + 94 | 0) >> 0] | 0)) {
               break label$33
              }
              HEAP32[($9_1 + 472 | 0) >> 2] = $11_1;
              HEAP32[($9_1 + 476 | 0) >> 2] = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
              $823($11_1 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0) | 0;
              $11_1 = $11_1 + (HEAP32[($3_1 + 64 | 0) >> 2] | 0) | 0;
             }
             label$34 : {
              if (!(HEAPU8[($3_1 + 95 | 0) >> 0] | 0)) {
               break label$34
              }
              HEAP32[($9_1 + 480 | 0) >> 2] = $11_1;
              HEAP32[($9_1 + 484 | 0) >> 2] = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
              $823($11_1 | 0, HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0) | 0;
             }
             label$35 : {
              if (!(HEAPU8[($3_1 + 82 | 0) >> 0] | 0)) {
               break label$35
              }
              HEAP16[($9_1 + 28 | 0) >> 1] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
             }
             label$36 : {
              if (!(HEAPU8[($3_1 + 83 | 0) >> 0] | 0)) {
               break label$36
              }
              HEAP16[($9_1 + 30 | 0) >> 1] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
             }
             label$37 : {
              if (!(HEAPU8[($3_1 + 88 | 0) >> 0] | 0)) {
               break label$37
              }
              HEAP32[($9_1 + 432 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
             }
             label$38 : {
              if (!(HEAPU8[($3_1 + 89 | 0) >> 0] | 0)) {
               break label$38
              }
              HEAP32[($9_1 + 436 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
             }
             i64toi32_i32$2 = $5_1;
             i64toi32_i32$0 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
             $15_1 = i64toi32_i32$0;
             $15$hi = i64toi32_i32$1;
             i64toi32_i32$0 = $9_1;
             HEAP32[($9_1 + 440 | 0) >> 2] = $15_1;
             HEAP32[($9_1 + 444 | 0) >> 2] = i64toi32_i32$1;
             label$39 : {
              if (!($15_1 | i64toi32_i32$1 | 0)) {
               break label$39
              }
              label$40 : {
               label$41 : {
                if (HEAPU8[($3_1 + 80 | 0) >> 0] | 0) {
                 break label$41
                }
                $16_1 = Math_fround(1.0e9);
                break label$40;
               }
               $16_1 = HEAPU8[$3_1 >> 0] | 0 ? Math_fround(2.0e9) : Math_fround(1.0e9);
              }
              i64toi32_i32$1 = $15$hi;
              i64toi32_i32$0 = $15_1;
              i64toi32_i32$2 = 0;
              HEAPF32[($9_1 + 320 | 0) >> 2] = Math_fround($16_1 / Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)));
             }
             label$42 : {
              if (!($348($5_1 | 0) | 0)) {
               break label$42
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 27;
              if (!(HEAPU8[$6_1 >> 0] | 0)) {
               break label$26
              }
              $3_1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
              if (!$3_1) {
               break label$26
              }
              $5_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
              if ($5_1 >>> 0 < 8 >>> 0) {
               break label$26
              }
              $802($2_1 + 184 | 0 | 0, $3_1 | 0, $5_1 | 0);
              $760($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0, 1 | 0);
              $766($2_1 + 24 | 0 | 0, 5 | 0) | 0;
              $3_1 = $764($2_1 + 24 | 0 | 0) | 0;
              if (($3_1 | 0) == (-1 | 0)) {
               break label$26
              }
              $10_1 = $3_1 & 31 | 0;
              if (!$10_1) {
               break label$26
              }
              $3_1 = $9_1 + 36 | 0;
              $5_1 = 0;
              label$43 : while (1) {
               $9_1 = $777($2_1 + 24 | 0 | 0) | 0;
               if (!$9_1) {
                break label$26
               }
               if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                break label$26
               }
               $247($3_1 | 0, (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + 1 | 0 | 0, $9_1 + -1 | 0 | 0) | 0;
               if (HEAPU8[$3_1 >> 0] | 0) {
                break label$26
               }
               $5_1 = $5_1 + 1 | 0;
               if ($5_1 >>> 0 < $10_1 >>> 0) {
                continue label$43
               }
               break label$26;
              };
             }
             label$44 : {
              if (!($349($5_1 | 0) | 0)) {
               break label$44
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 33;
              if (!(HEAPU8[$6_1 >> 0] | 0)) {
               break label$26
              }
              $3_1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
              if (!$3_1) {
               break label$26
              }
              if ((HEAP32[($5_1 + 112 | 0) >> 2] | 0) >>> 0 < 18 >>> 0) {
               break label$26
              }
              HEAP8[($9_1 + 41 | 0) >> 0] = (HEAPU8[($3_1 + 16 | 0) >> 0] | 0) & 7 | 0 | 8 | 0;
              HEAP8[($9_1 + 42 | 0) >> 0] = (HEAPU8[($3_1 + 17 | 0) >> 0] | 0) & 7 | 0 | 8 | 0;
              break label$26;
             }
             if ($351($5_1 | 0) | 0) {
              break label$27
             }
             label$45 : {
              if (!($350($5_1 | 0) | 0)) {
               break label$45
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 2;
              break label$26;
             }
             if ($353($5_1 | 0) | 0) {
              break label$28
             }
             label$46 : {
              if (!($364($5_1 | 0) | 0)) {
               break label$46
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 243;
              break label$26;
             }
             label$47 : {
              if (!($365($5_1 | 0) | 0)) {
               break label$47
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 244;
              break label$26;
             }
             label$48 : {
              if (!($366($5_1 | 0) | 0)) {
               break label$48
              }
              HEAP32[($9_1 + 20 | 0) >> 2] = 246;
              break label$26;
             }
             if (!($352($5_1 | 0) | 0)) {
              break label$26
             }
             HEAP32[($9_1 + 24 | 0) >> 2] = 1;
             $802($2_1 + 200 | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
             $760($2_1 + 184 | 0 | 0, $2_1 + 200 | 0 | 0, 1 | 0);
             if (!($261($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
              break label$26
             }
             label$49 : {
              $3_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
              if (($3_1 | 0) > (875967079 | 0)) {
               break label$49
              }
              label$50 : {
               if (($3_1 | 0) > (829843762 | 0)) {
                break label$50
               }
               label$51 : {
                if (($3_1 | 0) > (826496576 | 0)) {
                 break label$51
                }
                label$52 : {
                 if (($3_1 | 0) > (808802371 | 0)) {
                  break label$52
                 }
                 if (($3_1 | 0) == (541283905 | 0)) {
                  break label$31
                 }
                 if (($3_1 | 0) == (543389281 | 0)) {
                  break label$31
                 }
                 break label$26;
                }
                if (($3_1 | 0) == (808802372 | 0)) {
                 break label$28
                }
                if (($3_1 | 0) == (808810596 | 0)) {
                 break label$28
                }
                break label$26;
               }
               label$53 : {
                if (($3_1 | 0) > (827738418 | 0)) {
                 break label$53
                }
                if (($3_1 | 0) == (826496577 | 0)) {
                 break label$31
                }
                if (($3_1 | 0) == (826496599 | 0)) {
                 break label$29
                }
                break label$26;
               }
               if (($3_1 | 0) == (827738419 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (828601953 | 0)) {
                break label$31
               }
               if (($3_1 | 0) != (828601975 | 0)) {
                break label$26
               }
               break label$29;
              }
              label$54 : {
               if (($3_1 | 0) > (859066444 | 0)) {
                break label$54
               }
               label$55 : {
                if (($3_1 | 0) > (844515634 | 0)) {
                 break label$55
                }
                if (($3_1 | 0) == (829843763 | 0)) {
                 break label$28
                }
                if (($3_1 | 0) == (844313677 | 0)) {
                 break label$28
                }
                break label$26;
               }
               if (($3_1 | 0) == (844515635 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (846410861 | 0)) {
                break label$28
               }
               if (($3_1 | 0) == (846620979 | 0)) {
                break label$28
               }
               break label$26;
              }
              label$56 : {
               if (($3_1 | 0) > (861292867 | 0)) {
                break label$56
               }
               if (($3_1 | 0) == (859066445 | 0)) {
                break label$30
               }
               if (($3_1 | 0) != (859074669 | 0)) {
                break label$26
               }
               break label$30;
              }
              if (($3_1 | 0) == (861292868 | 0)) {
               break label$30
              }
              if (($3_1 | 0) == (863398244 | 0)) {
               break label$30
              }
              if (($3_1 | 0) != (875967048 | 0)) {
               break label$26
              }
              break label$31;
             }
             label$57 : {
              if (($3_1 | 0) > (1096174934 | 0)) {
               break label$57
              }
              label$58 : {
               if (($3_1 | 0) > (880175459 | 0)) {
                break label$58
               }
               label$59 : {
                if (($3_1 | 0) > (878070083 | 0)) {
                 break label$59
                }
                if (($3_1 | 0) == (875967080 | 0)) {
                 break label$31
                }
                if (($3_1 | 0) == (877677894 | 0)) {
                 break label$28
                }
                break label$26;
               }
               if (($3_1 | 0) == (878070084 | 0)) {
                break label$30
               }
               if (($3_1 | 0) == (879783270 | 0)) {
                break label$28
               }
               break label$26;
              }
              label$60 : {
               if (($3_1 | 0) > (896952675 | 0)) {
                break label$60
               }
               if (($3_1 | 0) == (880175460 | 0)) {
                break label$30
               }
               if (($3_1 | 0) == (894847300 | 0)) {
                break label$28
               }
               break label$26;
              }
              if (($3_1 | 0) == (896952676 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (911624516 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (913729892 | 0)) {
               break label$28
              }
              break label$26;
             }
             label$61 : {
              if (($3_1 | 0) > (1635151222 | 0)) {
               break label$61
              }
              label$62 : {
               if (($3_1 | 0) > (1213420373 | 0)) {
                break label$62
               }
               if (($3_1 | 0) == (1096174935 | 0)) {
                break label$29
               }
               if (($3_1 | 0) == (1145656920 | 0)) {
                break label$28
               }
               break label$26;
              }
              if (($3_1 | 0) == (1213420374 | 0)) {
               break label$31
              }
              if (($3_1 | 0) == (1395937357 | 0)) {
               break label$28
              }
              if (($3_1 | 0) == (1482049860 | 0)) {
               break label$28
              }
              break label$26;
             }
             label$63 : {
              if (($3_1 | 0) > (1752396661 | 0)) {
               break label$63
              }
              if (($3_1 | 0) == (1635151223 | 0)) {
               break label$29
              }
              if (($3_1 | 0) == (1684633208 | 0)) {
               break label$28
              }
              break label$26;
             }
             if (($3_1 | 0) == (1752396662 | 0)) {
              break label$31
             }
             if (($3_1 | 0) == (2021026148 | 0)) {
              break label$28
             }
             if (($3_1 | 0) == (1932816493 | 0)) {
              break label$28
             }
             break label$26;
            }
            label$64 : {
             label$65 : {
              label$66 : {
               if (!(HEAPU8[($5_1 + 275 | 0) >> 0] | 0)) {
                break label$66
               }
               HEAP32[($9_1 + 20 | 0) >> 2] = 0;
               HEAP32[($9_1 + 4 | 0) >> 2] = 1;
               if (!(HEAP32[($5_1 + 224 | 0) >> 2] | 0)) {
                break label$26
               }
               label$67 : {
                $3_1 = HEAP32[($5_1 + 228 | 0) >> 2] | 0;
                if (!(HEAPU8[($3_1 + 32 | 0) >> 0] | 0)) {
                 break label$67
                }
                label$68 : {
                 label$69 : {
                  $17_1 = +HEAPF64[$3_1 >> 3];
                  if (!($17_1 < 4294967296.0 & $17_1 >= 0.0 | 0)) {
                   break label$69
                  }
                  $10_1 = ~~$17_1 >>> 0;
                  break label$68;
                 }
                 $10_1 = 0;
                }
                HEAP32[($9_1 + 28 | 0) >> 2] = $10_1;
               }
               label$70 : {
                if (!(HEAPU8[($3_1 + 34 | 0) >> 0] | 0)) {
                 break label$70
                }
                HEAP8[($9_1 + 24 | 0) >> 0] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
               }
               label$71 : {
                if (!(HEAPU8[($3_1 + 36 | 0) >> 0] | 0)) {
                 break label$71
                }
                HEAP8[($9_1 + 25 | 0) >> 0] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
               }
               label$72 : {
                label$73 : {
                 if ($354($5_1 | 0) | 0) {
                  break label$73
                 }
                 if (!($355($5_1 | 0, $2_1 + 200 | 0 | 0) | 0)) {
                  break label$72
                 }
                }
                $802($2_1 + 176 | 0 | 0, HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
                $760($2_1 + 24 | 0 | 0, $2_1 + 176 | 0 | 0, 1 | 0);
                label$74 : {
                 label$75 : {
                  if (!($580($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
                   break label$75
                  }
                  HEAP32[($9_1 + 28 | 0) >> 2] = $256(HEAPU8[($2_1 + 184 | 0) >> 0] | 0 | 0) | 0;
                  $3_1 = HEAPU8[($2_1 + 186 | 0) >> 0] | 0;
                  HEAP32[($9_1 + 20 | 0) >> 2] = ($3_1 | 0) == (5 | 0) ? 18 : 15;
                  $3_1 = $3_1 >>> 0 < 6 >>> 0 ? $3_1 : 0;
                  break label$74;
                 }
                 HEAP32[($9_1 + 20 | 0) >> 2] = 15;
                 $3_1 = 2;
                }
                HEAP32[($9_1 + 32 | 0) >> 2] = $3_1;
                break label$26;
               }
               if ($360($5_1 | 0) | 0) {
                break label$27
               }
               if ($361($5_1 | 0) | 0) {
                break label$64
               }
               label$76 : {
                if (!($356($5_1 | 0) | 0)) {
                 break label$76
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 129;
                break label$26;
               }
               label$77 : {
                if (!($358($5_1 | 0) | 0)) {
                 break label$77
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 6;
                break label$26;
               }
               if ($357($5_1 | 0) | 0) {
                break label$65
               }
               label$78 : {
                if (!($359($5_1 | 0) | 0)) {
                 break label$78
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 149;
                break label$26;
               }
               label$79 : {
                if (!($363($5_1 | 0) | 0)) {
                 break label$79
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 146;
                break label$26;
               }
               label$80 : {
                if (!($367($5_1 | 0) | 0)) {
                 break label$80
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 153;
                break label$26;
               }
               label$81 : {
                if (!($368($5_1 | 0) | 0)) {
                 break label$81
                }
                HEAP32[($9_1 + 20 | 0) >> 2] = 138;
                break label$26;
               }
               if (!($362($5_1 | 0) | 0)) {
                break label$26
               }
               HEAP32[($2_1 + 176 | 0) >> 2] = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
               $3_1 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
               HEAP16[($2_1 + 182 | 0) >> 1] = 1;
               HEAP16[($2_1 + 180 | 0) >> 1] = $3_1;
               $760($2_1 + 184 | 0 | 0, $2_1 + 176 | 0 | 0, 1 | 0);
               if (!($260($2_1 + 24 | 0 | 0, $2_1 + 184 | 0 | 0) | 0)) {
                break label$26
               }
               $3_1 = HEAPU16[($2_1 + 24 | 0) >> 1] | 0;
               if (($3_1 | 0) == (8193 | 0)) {
                break label$65
               }
               if (($3_1 | 0) == (85 | 0)) {
                break label$27
               }
               if (($3_1 | 0) == (80 | 0)) {
                break label$64
               }
               break label$26;
              }
              HEAP32[($9_1 + 4 | 0) >> 2] = 4;
              break label$26;
             }
             HEAP32[($9_1 + 20 | 0) >> 2] = 130;
             break label$26;
            }
            HEAP32[($9_1 + 20 | 0) >> 2] = 3;
            break label$26;
           }
           HEAP32[($9_1 + 20 | 0) >> 2] = 27;
           break label$26;
          }
          HEAP32[($9_1 + 20 | 0) >> 2] = 785;
          break label$26;
         }
         HEAP32[($9_1 + 20 | 0) >> 2] = 234;
         break label$26;
        }
        HEAP32[($9_1 + 20 | 0) >> 2] = 16;
        break label$26;
       }
       HEAP32[($9_1 + 20 | 0) >> 2] = 1;
      }
      $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $5_1 = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$3
   }
   $9_1 = 0;
   label$82 : while (1) {
    label$83 : {
     $3_1 = (HEAP32[($0_1 + 204 | 0) >> 2] | 0) + Math_imul($9_1, 20) | 0;
     if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
      break label$83
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
    }
    label$84 : {
     if (!(HEAPU8[($3_1 + 17 | 0) >> 0] | 0)) {
      break label$84
     }
     HEAP32[($1_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    }
    label$85 : {
     if (!(HEAPU8[($3_1 + 18 | 0) >> 0] | 0)) {
      break label$85
     }
     $5_1 = $813(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($1_1 + 80 | 0) >> 2] = $5_1;
     $823($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     $5_1 = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
    }
    $9_1 = $9_1 + 1 | 0;
    if ($9_1 >>> 0 < $5_1 >>> 0) {
     continue label$82
    }
    break label$82;
   };
  }
  label$86 : {
   $14_1 = $2_1 + 224 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
 }
 
 function $318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $16$hi = 0, $8_1 = 0, $16_1 = 0, $11_1 = 0, $17_1 = 0, $17$hi = 0, $6_1 = 0, $7_1 = 0, $15_1 = 0, $14_1 = 0, $31_1 = 0, $31$hi = 0, $33_1 = 0, $33$hi = 0, $5_1 = 0, $9_1 = 0, $10_1 = 0, $62$hi = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $95$hi = 0, $100_1 = 0, $103$hi = 0, $107$hi = 0, $114$hi = 0, $163_1 = 0, $165_1 = 0, $165$hi = 0, $167_1 = 0, $167$hi = 0, $175_1 = 0, $18_1 = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  $4_1 = $0_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$0;
  $31$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  $33$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$1 = $33$hi;
  $74($4_1 | 0, $31_1 | 0, i64toi32_i32$0 | 0, $33_1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $72($4_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   if (!($76($4_1 | 0, 12 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 + 40 | 0;
   $6_1 = $0_1 + 576 | 0;
   $7_1 = $0_1 + 584 | 0;
   $8_1 = $0_1 + 568 | 0;
   $9_1 = $3_1 + 20 | 0;
   $10_1 = $3_1 + 16 | 0;
   label$4 : while (1) {
    if (!($329($4_1 | 0, $3_1 + 48 | 0 | 0) | 0)) {
     break label$3
    }
    $11_1 = $754($4_1 | 0) | 0;
    label$5 : {
     label$6 : {
      if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) == (24999 | 0)) {
       break label$6
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = 0;
      $62$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$0 = $62$hi;
      i64toi32_i32$3 = $11_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $63$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
      $65_1 = i64toi32_i32$5;
      $65$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $63$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$5 = $65$hi;
      i64toi32_i32$3 = $65_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$4;
      break label$5;
     }
     $322($8_1 | 0);
     $67($3_1 + 32 | 0 | 0);
     $12_1 = $11_1;
     label$7 : {
      label$8 : while (1) {
       $76($4_1 | 0, 16384 | 0) | 0;
       HEAP8[($0_1 + 612 | 0) >> 0] = 0;
       if (!($331($4_1 | 0, ($11_1 - $12_1 | 0) + (HEAP32[($3_1 + 56 | 0) >> 2] | 0) | 0 | 0, 23520 | 0, 23640 | 0, $8_1 | 0) | 0)) {
        break label$7
       }
       $337(23520 | 0, 2 | 0, 0 | 0, 23640 | 0, $8_1 | 0);
       $13_1 = $754($4_1 | 0) | 0;
       label$9 : {
        if (!(HEAPU8[($0_1 + 612 | 0) >> 0] | 0)) {
         break label$9
        }
        i64toi32_i32$4 = $73($4_1 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $93_1 = i64toi32_i32$4;
        $93$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 600 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 604 | 0) >> 2] | 0;
        $95_1 = i64toi32_i32$1;
        $95$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $93$hi;
        i64toi32_i32$1 = $95$hi;
        $68($3_1 + 32 | 0 | 0, $93_1 | 0, i64toi32_i32$4 | 0, $95_1 | 0, i64toi32_i32$1 | 0);
        $13_1 = $13_1 + (HEAP32[(i64toi32_i32$2 + 600 | 0) >> 2] | 0) | 0;
       }
       $100_1 = $4_1;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$1 = 0;
       $103$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$2 = $16_1;
       i64toi32_i32$4 = $103$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $16_1 = i64toi32_i32$5;
       $16$hi = i64toi32_i32$0;
       $72($100_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
       $107$hi = i64toi32_i32$2;
       $12_1 = $13_1 + $12_1 | 0;
       i64toi32_i32$2 = 0;
       $114$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $107$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = $114$hi;
       i64toi32_i32$3 = $12_1 - $11_1 | 0;
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
        continue label$8
       }
       break label$8;
      };
      $13_1 = $813((((HEAP32[$8_1 >> 2] | 0) + (HEAP32[$7_1 >> 2] | 0) | 0) + (HEAP32[$6_1 >> 2] | 0) | 0) + 48 | 0 | 0) | 0;
      if (!$13_1) {
       break label$3
      }
      $822($13_1 | 0, 0 | 0, 48 | 0) | 0;
      $12_1 = $13_1 + 48 | 0;
      label$10 : {
       if (!(HEAPU8[($0_1 + 609 | 0) >> 0] | 0)) {
        break label$10
       }
       HEAP32[($13_1 + 32 | 0) >> 2] = $12_1;
       $12_1 = $323($12_1 | 0, $6_1 | 0) | 0;
      }
      label$11 : {
       if (!(HEAPU8[($0_1 + 608 | 0) >> 0] | 0)) {
        break label$11
       }
       HEAP32[($13_1 + 36 | 0) >> 2] = $12_1;
       $12_1 = $323($12_1 | 0, $8_1 | 0) | 0;
      }
      label$12 : {
       if (!(HEAPU8[($0_1 + 610 | 0) >> 0] | 0)) {
        break label$12
       }
       HEAP32[($13_1 + 40 | 0) >> 2] = $12_1;
       $323($12_1 | 0, $7_1 | 0) | 0;
      }
      label$13 : {
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$1;
       $17$hi = i64toi32_i32$2;
       if (!(i64toi32_i32$1 | i64toi32_i32$2 | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$1 = $13_1;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = 1;
       $163_1 = i64toi32_i32$1;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $165_1 = i64toi32_i32$2;
       $165$hi = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
       $167_1 = i64toi32_i32$1;
       $167$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $165$hi;
       i64toi32_i32$3 = $165_1;
       i64toi32_i32$1 = $167$hi;
       i64toi32_i32$0 = $167_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$3 = $163_1;
       HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$5;
      }
      label$14 : {
       if (!(HEAPU8[($0_1 + 611 | 0) >> 0] | 0)) {
        break label$14
       }
       HEAP8[($13_1 + 5 | 0) >> 0] = 1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 592 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 596 | 0) >> 2] | 0;
       $175_1 = i64toi32_i32$5;
       i64toi32_i32$5 = $13_1;
       HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $175_1;
       HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$3;
      }
      label$15 : {
       if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$15
       }
       if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$15
       }
       i64toi32_i32$2 = $13_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$3;
       $17$hi = i64toi32_i32$5;
       $12_1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$3;
       $19$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       HEAP32[$9_1 >> 2] = i64toi32_i32$5;
       i64toi32_i32$3 = $19$hi;
       HEAP32[$10_1 >> 2] = $19_1;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$5 = $3_1;
       HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = $18_1;
       HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = $12_1;
       i64toi32_i32$3 = $17$hi;
       HEAP32[i64toi32_i32$5 >> 2] = $17_1;
       $827(23653 | 0, i64toi32_i32$5 | 0);
      }
      HEAP32[$13_1 >> 2] = 0;
      $12_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($12_1 ? $12_1 : $5_1) >> 2] = $13_1;
      HEAP32[($1_1 + 44 | 0) >> 2] = $13_1;
      $335(23520 | 0, $8_1 | 0);
      i64toi32_i32$3 = $73($4_1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $72($4_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
      break label$5;
     }
     $335(23520 | 0, $8_1 | 0);
     break label$3;
    }
    i64toi32_i32$5 = $16$hi;
    $72($4_1 | 0, $16_1 | 0, i64toi32_i32$5 | 0);
    if ($76($4_1 | 0, 12 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$16 : {
   $15_1 = $3_1 + 64 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $3_1 = 0, $10_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $14_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $19_1 = 0, $19$hi = 0, $12_1 = 0, $18_1 = 0, $18$hi = 0, $38_1 = 0, $13_1 = 0, $39_1 = 0, $17_1 = 0, $16_1 = 0, $33_1 = 0, $33$hi = 0, $35_1 = 0, $35$hi = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $89_1 = 0, $123_1 = 0, $11_1 = 0, $161_1 = 0, $40_1 = 0, $41_1 = 0, $20_1 = 0, $20$hi = 0, $242_1 = 0, $250_1 = 0;
  label$1 : {
   $3_1 = global$0 - 112 | 0;
   $16_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  $4_1 = $0_1 + 96 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  $33$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  $35$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$1 = $35$hi;
  $74($4_1 | 0, $33_1 | 0, i64toi32_i32$0 | 0, $35_1 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   if (!($76($4_1 | 0, 12 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 + 48 | 0;
   $6_1 = $0_1 + 616 | 0;
   $7_1 = ($3_1 + 48 | 0) + 16 | 0;
   $8_1 = $3_1 + 32 | 0;
   $9_1 = $3_1 + 24 | 0;
   label$4 : while (1) {
    if (!($329($4_1 | 0, $3_1 + 96 | 0 | 0) | 0)) {
     break label$3
    }
    if (!($76($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) | 0)) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if ((HEAP32[($3_1 + 96 | 0) >> 2] | 0 | 0) == (17849 | 0)) {
       break label$6
      }
      $766($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0) | 0;
      break label$5;
     }
     $754($4_1 | 0) | 0;
     $324($6_1 | 0);
     $67($3_1 + 80 | 0 | 0);
     label$7 : {
      if ($331($4_1 | 0, HEAP32[($3_1 + 104 | 0) >> 2] | 0 | 0, 23760 | 0, 23880 | 0, $6_1 | 0) | 0) {
       break label$7
      }
      $335(23760 | 0, $6_1 | 0);
      break label$3;
     }
     $337(23760 | 0, 2 | 0, 0 | 0, 23880 | 0, $6_1 | 0);
     $10_1 = $813(40 | 0) | 0;
     if (!$10_1) {
      break label$3
     }
     $822($10_1 | 0, 0 | 0, 40 | 0) | 0;
     label$8 : {
      if (!(HEAPU8[($0_1 + 648 | 0) >> 0] | 0)) {
       break label$8
      }
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $89_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $10_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $89_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     }
     label$9 : {
      if (!(HEAPU8[($0_1 + 649 | 0) >> 0] | 0)) {
       break label$9
      }
      HEAP32[($10_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 624 | 0) >> 2] | 0;
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 650 | 0) >> 0] | 0)) {
       break label$10
      }
      HEAP32[($10_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 628 | 0) >> 2] | 0;
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 651 | 0) >> 0] | 0)) {
       break label$11
      }
      HEAP32[($10_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 632 | 0) >> 2] | 0;
     }
     label$12 : {
      if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$12
      }
      if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$12
      }
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      HEAP32[($3_1 + 52 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$1 = $3_1;
      HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $18_1;
      HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
      $123_1 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $38_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      HEAP32[($123_1 + 48 | 0) >> 2] = $38_1;
      $827(23893 | 0, $3_1 + 48 | 0 | 0);
     }
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = i64toi32_i32$1;
     label$13 : {
      if (!(HEAP32[($0_1 + 640 | 0) >> 2] | 0)) {
       break label$13
      }
      $11_1 = HEAP32[($0_1 + 644 | 0) >> 2] | 0;
      $12_1 = 0;
      $13_1 = 0;
      label$14 : while (1) {
       $14_1 = 0;
       label$15 : {
        $15_1 = $11_1 + Math_imul($12_1, 88) | 0;
        if (!(HEAPU8[($15_1 + 85 | 0) >> 0] | 0)) {
         break label$15
        }
        $14_1 = HEAP32[($15_1 + 72 | 0) >> 2] | 0;
        $13_1 = (HEAP32[$14_1 >> 2] | 0) + 32 | 0;
       }
       $2_1 = $813($13_1 + 48 | 0 | 0) | 0;
       if (!$2_1) {
        break label$13
       }
       $822($2_1 | 0, 0 | 0, 48 | 0) | 0;
       label$16 : {
        if (!(HEAPU8[($15_1 + 76 | 0) >> 0] | 0)) {
         break label$16
        }
        HEAP8[($2_1 + 4 | 0) >> 0] = 1;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $161_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $161_1;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
       }
       label$17 : {
        if (!(HEAPU8[($15_1 + 77 | 0) >> 0] | 0)) {
         break label$17
        }
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
        $40_1 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$2 = __wasm_i64_udiv($40_1 | 0, i64toi32_i32$1 | 0, 1e6 | 0, i64toi32_i32$2 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$2;
       }
       label$18 : {
        if (!(HEAPU8[($15_1 + 78 | 0) >> 0] | 0)) {
         break label$18
        }
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $41_1 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv($41_1 | 0, i64toi32_i32$2 | 0, 1e6 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
       }
       label$19 : {
        if (!(HEAPU8[($15_1 + 79 | 0) >> 0] | 0)) {
         break label$19
        }
        HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($15_1 + 24 | 0) >> 2] | 0;
       }
       label$20 : {
        if (!(HEAPU8[($15_1 + 80 | 0) >> 0] | 0)) {
         break label$20
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($15_1 + 28 | 0) >> 2] | 0;
       }
       label$21 : {
        if (!$14_1) {
         break label$21
        }
        $15_1 = $2_1 + 48 | 0;
        label$22 : {
         if (!(HEAPU8[($14_1 + 40 | 0) >> 0] | 0)) {
          break label$22
         }
         HEAP32[($2_1 + 32 | 0) >> 2] = $15_1;
         $15_1 = $323($15_1 | 0, $14_1 | 0) | 0;
        }
        label$23 : {
         if (!(HEAPU8[($14_1 + 41 | 0) >> 0] | 0)) {
          break label$23
         }
         HEAP32[($2_1 + 36 | 0) >> 2] = $15_1;
         $823($15_1 | 0, $14_1 + 8 | 0 | 0, 16 | 0) | 0;
         $15_1 = $15_1 + 16 | 0;
        }
        if (!(HEAPU8[($14_1 + 42 | 0) >> 0] | 0)) {
         break label$21
        }
        HEAP32[($2_1 + 40 | 0) >> 2] = $15_1;
        $823($15_1 | 0, $14_1 + 24 | 0 | 0, 16 | 0) | 0;
       }
       label$24 : {
        if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$2;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        HEAP32[$8_1 >> 2] = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
        $242_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $9_1;
        HEAP32[i64toi32_i32$1 >> 2] = $242_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$1 = $3_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $20_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
        i64toi32_i32$2 = $19$hi;
        HEAP32[($3_1 + 4 | 0) >> 2] = $19_1;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$1 = $3_1;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $18_1;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
        $250_1 = i64toi32_i32$1;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$250_1 >> 2] = $39_1;
        $827(23931 | 0, $3_1 | 0);
       }
       HEAP32[$2_1 >> 2] = 0;
       label$25 : {
        label$26 : {
         $15_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
         if (!$15_1) {
          break label$26
         }
         HEAP32[$15_1 >> 2] = $2_1;
         break label$25;
        }
        HEAP32[($10_1 + 28 | 0) >> 2] = $2_1;
       }
       HEAP32[($10_1 + 32 | 0) >> 2] = $2_1;
       $12_1 = $12_1 + 1 | 0;
       if ($12_1 >>> 0 < (HEAP32[($0_1 + 640 | 0) >> 2] | 0) >>> 0) {
        continue label$14
       }
       break label$14;
      };
     }
     HEAP32[$10_1 >> 2] = 0;
     $2_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
     HEAP32[($2_1 ? $2_1 : $5_1) >> 2] = $10_1;
     HEAP32[($1_1 + 52 | 0) >> 2] = $10_1;
     $335(23760 | 0, $6_1 | 0);
     i64toi32_i32$1 = $73($4_1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $72($4_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    }
    if ($76($4_1 | 0, 12 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$27 : {
   $17_1 = $3_1 + 112 | 0;
   if ($17_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
 }
 
 function $320($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $14_1 = 0, $17_1 = 0, $17$hi = 0, $20_1 = 0, $20$hi = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   $14_1 = $2_1;
   i64toi32_i32$2 = $0_1 + 408 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 400 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$2 = $17_1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   $2_1 = $50($14_1 | 0, $6_1 | 0, i64toi32_i32$5 | 0, 12 | 0, $3_1 + 44 | 0 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $800($2_1 | 0, 24756 | 0);
   $762($3_1 + 24 | 0 | 0, $2_1 | 0);
   label$4 : {
    if (!($329($3_1 + 24 | 0 | 0, $3_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (440786851 | 0)) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 62024 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62024 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(24761 | 0, $3_1 | 0);
    }
    HEAP8[($1_1 + 56 | 0) >> 0] = 1;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $1_1 + 64 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
   }
   $735($2_1 | 0);
  }
  label$6 : {
   $5_1 = $3_1 + 48 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (23204 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 656 | 0, $0_1 | 0, 23204 | 0, 23339 | 0, 947 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       i64toi32_i32$0 = 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       break label$6;
      }
      HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if ($0_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$8 : {
    $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$8
    }
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       if (($0_1 | 0) != (HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0)) {
        break label$11
       }
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 40 | 0) >> 2] = 0;
       HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$0;
       break label$10;
      }
      HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
     }
     $815($0_1 | 0);
     $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$9
     }
     break label$9;
    };
   }
   label$12 : {
    $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$12
    }
    label$13 : while (1) {
     label$14 : {
      label$15 : {
       if (($2_1 | 0) != (HEAP32[($1_1 + 52 | 0) >> 2] | 0 | 0)) {
        break label$15
       }
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 48 | 0) >> 2] = 0;
       HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
       break label$14;
      }
      HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
     }
     label$16 : {
      label$17 : while (1) {
       $0_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$16
       }
       label$18 : {
        label$19 : {
         if (($0_1 | 0) != (HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0)) {
          break label$19
         }
         i64toi32_i32$0 = 0;
         HEAP32[($2_1 + 28 | 0) >> 2] = 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
         break label$18;
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
       }
       $815($0_1 | 0);
       continue label$17;
      };
     }
     $815($2_1 | 0);
     $2_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$13
     }
     break label$13;
    };
   }
   label$20 : {
    $0_1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$20
    }
    $815($0_1 | 0);
   }
   $815($1_1 | 0);
   return;
  }
  $859(24815 | 0, 23339 | 0, 950 | 0);
  abort();
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 48 | 0) | 0;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $823($0_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 + (HEAP32[$1_1 >> 2] | 0) | 0 | 0;
 }
 
 function $324($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 40 | 0) | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 88 | 0) | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 8 | 0) | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $19_1 = 0, $7_1 = 0, $6_1 = 0, $68$hi = 0, $71$hi = 0, $88_1 = 0, $88$hi = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $6_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) < (4 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      $4_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!($4_1 & 128 | 0)) {
       break label$6
      }
      $5_1 = $4_1 & 127 | 0;
      $4_1 = 1;
      break label$5;
     }
     label$7 : {
      if (!($4_1 & 64 | 0)) {
       break label$7
      }
      $5_1 = ($4_1 << 8 | 0) & 16128 | 0 | (HEAPU8[($3_1 + 1 | 0) >> 0] | 0) | 0;
      $4_1 = 2;
      break label$5;
     }
     if (!($4_1 & 32 | 0)) {
      break label$4
     }
     $5_1 = (HEAPU8[($3_1 + 1 | 0) >> 0] | 0) << 8 | 0 | (($4_1 << 16 | 0) & 2031616 | 0) | 0 | (HEAPU8[($3_1 + 2 | 0) >> 0] | 0) | 0;
     $4_1 = 3;
    }
    HEAP32[$0_1 >> 2] = $3_1 + $4_1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
    i64toi32_i32$0 = 0;
    $8_1 = $5_1;
    $8$hi = i64toi32_i32$0;
    break label$3;
   }
   label$8 : {
    $4_1 = $764($0_1 | 0) | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$8
    }
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    $2_1 = 0;
    label$9 : {
     if ($4_1 & 128 | 0) {
      break label$9
     }
     label$10 : while (1) {
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $19_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $19_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $68$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $71$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $68$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = $71$hi;
      i64toi32_i32$3 = $772($0_1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $8_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $8$hi = i64toi32_i32$2;
      $2_1 = $2_1 + 1 | 0;
      if (!(($4_1 << $2_1 | 0) & 128 | 0)) {
       continue label$10
      }
      break label$10;
     };
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$0 = ((127 >>> $2_1 | 0) & $4_1 | 0) << ($2_1 << 3 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $88_1 = i64toi32_i32$0;
    $88$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = $88$hi;
    i64toi32_i32$3 = $88_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    break label$3;
   }
   label$11 : {
    if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$11
    }
    if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$11
    }
    HEAP32[$1_1 >> 2] = $0_1;
    $827(24822 | 0, $1_1 | 0);
   }
   $766($0_1 | 0, ($770($0_1 | 0) | 0) + 1 | 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $8_1 = 0;
   $8$hi = i64toi32_i32$0;
  }
  label$12 : {
   $7_1 = $1_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $329($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $20_1 = 0, $8_1 = 0, $7_1 = 0, $119_1 = 0, $126_1 = 0, $126$hi = 0, $134$hi = 0, $21_1 = 0, $140_1 = 0, $140$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) < (6 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      $5_1 = HEAPU8[$4_1 >> 0] | 0;
      if (!($5_1 & 128 | 0)) {
       break label$6
      }
      $6_1 = $4_1;
      break label$5;
     }
     if (!($5_1 & 64 | 0)) {
      break label$4
     }
     $6_1 = $4_1 + 1 | 0;
     $5_1 = $5_1 << 8 | 0 | (HEAPU8[($4_1 + 1 | 0) >> 0] | 0) | 0;
    }
    HEAP32[$1_1 >> 2] = $5_1;
    label$7 : {
     label$8 : {
      $5_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
      if (!($5_1 & 128 | 0)) {
       break label$8
      }
      $5_1 = $5_1 & 127 | 0;
      if (($5_1 | 0) != (127 | 0)) {
       break label$7
      }
      break label$4;
     }
     label$9 : {
      if (!($5_1 & 64 | 0)) {
       break label$9
      }
      $5_1 = ($5_1 << 8 | 0) & 16128 | 0 | (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) | 0;
      if (($5_1 | 0) == (16383 | 0)) {
       break label$4
      }
      $6_1 = $6_1 + 1 | 0;
      break label$7;
     }
     if (!($5_1 & 32 | 0)) {
      break label$4
     }
     $5_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 8 | 0 | (($5_1 << 16 | 0) & 2031616 | 0) | 0 | (HEAPU8[($6_1 + 3 | 0) >> 0] | 0) | 0;
     if (($5_1 | 0) == (2097151 | 0)) {
      break label$4
     }
     $6_1 = $6_1 + 2 | 0;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = $6_1 + 2 | 0;
    HEAP32[$0_1 >> 2] = $5_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = ($3_1 - $5_1 | 0) + $4_1 | 0;
    $5_1 = 1;
    break label$3;
   }
   label$10 : {
    label$11 : {
     $3_1 = $764($0_1 | 0) | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$11
     }
     label$12 : {
      label$13 : {
       if (!($3_1 & 128 | 0)) {
        break label$13
       }
       $5_1 = $3_1;
       break label$12;
      }
      $6_1 = 0;
      $5_1 = $3_1;
      label$14 : while (1) {
       $5_1 = $5_1 << 8 | 0 | ($772($0_1 | 0) | 0) | 0;
       $6_1 = $6_1 + 1 | 0;
       if (!(($3_1 << $6_1 | 0) & 128 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     HEAP32[$1_1 >> 2] = $5_1;
     $6_1 = $754($0_1 | 0) | 0;
     i64toi32_i32$0 = $328($0_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $119_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $119_1;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$10
     }
     $3_1 = $754($0_1 | 0) | 0;
     $5_1 = 1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $126_1 = i64toi32_i32$1;
     $126$hi = i64toi32_i32$0;
     $6_1 = $3_1 - $6_1 | 0;
     $3_1 = Math_imul($6_1, 7);
     i64toi32_i32$0 = 0;
     $134$hi = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = $134$hi;
     i64toi32_i32$3 = 64 - $3_1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$4 = $3_1 >>> 0 < 65 >>> 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ? $20_1 : 0;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
     i64toi32_i32$2 = $6_1;
     $21_1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $6_1 ? $21_1 : 0;
     i64toi32_i32$4 = $6_1 ? i64toi32_i32$0 : i64toi32_i32$3;
     $140_1 = i64toi32_i32$1;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $126$hi;
     i64toi32_i32$2 = $126_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $140_1;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$3
     }
     label$15 : {
      if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$15
      }
      if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      HEAP32[$2_1 >> 2] = $0_1;
      $827(24915 | 0, $2_1 | 0);
     }
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$2 = -1;
     HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = -2;
     HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
     break label$3;
    }
    if (($3_1 | 0) == (-1 | 0)) {
     break label$10
    }
    label$16 : {
     if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$16
     }
     if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$16
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(24880 | 0, $2_1 + 16 | 0 | 0);
    }
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = 0;
    HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[i64toi32_i32$4 >> 2] = -1;
    $5_1 = 1;
    break label$3;
   }
   $5_1 = 0;
   HEAP32[$1_1 >> 2] = 0;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$2 = 0;
   HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$2;
  }
  label$17 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $4$hi = 0, $4_1 = 0, $2_1 = 0, $5$hi = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = 0;
  i64toi32_i32$0 = 0;
  $4_1 = 0;
  $4$hi = i64toi32_i32$0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($3_1 | 0) < (1 | 0)) {
       break label$4
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + -1 | 0;
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
      $3_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$3;
     }
     $3_1 = $764($0_1 | 0) | 0;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $13_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $13_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $4_1 = $13_1;
    $4$hi = i64toi32_i32$1;
    label$5 : {
     label$6 : {
      if ($2_1) {
       break label$6
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 56;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $14_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $14_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 56;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $15_1 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
       $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $5_1 = $15_1;
      $5$hi = i64toi32_i32$0;
      break label$5;
     }
     i64toi32_i32$0 = 0;
     $5_1 = $3_1 & 255 | 0;
     $5$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $331($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $14_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $19$hi = 0, $15_1 = 0, $16_1 = 0, $10_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $18_1 = 0, $17_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $431_1 = 0, $534_1 = 0, $559_1 = 0, $611_1 = 0, $675_1 = 0, $710_1 = 0, $735_1 = 0, $735$hi = 0, $856_1 = 0, $856$hi = 0, $900_1 = 0;
  label$1 : {
   $5_1 = global$0 - 944 | 0;
   $17_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $17_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       label$8 : {
        if (!$2_1) {
         break label$8
        }
        $6_1 = ($754($0_1 | 0) | 0) + $1_1 | 0;
        $7_1 = 0;
        label$9 : {
         if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) == (14 | 0)) {
          break label$9
         }
         $8_1 = $2_1 + 4 | 0;
         $9_1 = $2_1;
         label$10 : while (1) {
          label$11 : {
           $1_1 = $9_1;
           if ((HEAPU16[($1_1 + 14 | 0) >> 1] | 0 | 0) == (1 | 0)) {
            break label$11
           }
           if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           $9_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
           $10_1 = HEAPU16[($1_1 + 14 | 0) >> 1] | 0;
           HEAP32[(($5_1 + 896 | 0) + 20 | 0) >> 2] = 1;
           HEAP32[(($5_1 + 896 | 0) + 16 | 0) >> 2] = $10_1;
           HEAP32[($5_1 + 908 | 0) >> 2] = $9_1;
           HEAP32[($5_1 + 904 | 0) >> 2] = $3_1;
           HEAP32[($5_1 + 900 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 896 | 0) >> 2] = 25113;
           $827(25067 | 0, $5_1 + 896 | 0 | 0);
          }
          label$12 : {
           label$13 : {
            switch (HEAP32[$8_1 >> 2] | 0 | 0) {
            case 0:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 500 | 0) >> 2] = 4;
             HEAP32[($5_1 + 496 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 492 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 488 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 484 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 480 | 0) >> 2] = 25113;
             $827(25132 | 0, $5_1 + 480 | 0 | 0);
             break label$4;
            case 7:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 532 | 0) >> 2] = 4;
             HEAP32[($5_1 + 528 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 524 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 520 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 516 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 512 | 0) >> 2] = 25113;
             $827(25187 | 0, $5_1 + 512 | 0 | 0);
             break label$4;
            case 6:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 564 | 0) >> 2] = 8;
             HEAP32[($5_1 + 560 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 556 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 552 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 548 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 544 | 0) >> 2] = 25113;
             $827(25235 | 0, $5_1 + 544 | 0 | 0);
             break label$4;
            case 1:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (4 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 596 | 0) >> 2] = 4;
             HEAP32[($5_1 + 592 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 588 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 584 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 580 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 576 | 0) >> 2] = 25113;
             $827(25292 | 0, $5_1 + 576 | 0 | 0);
             break label$4;
            case 2:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (16 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 628 | 0) >> 2] = 16;
             HEAP32[(($5_1 + 608 | 0) + 16 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 620 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 616 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 612 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 608 | 0) >> 2] = 25113;
             $827(25347 | 0, $5_1 + 608 | 0 | 0);
             break label$4;
            case 3:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 660 | 0) >> 2] = 8;
             HEAP32[($5_1 + 656 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 652 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 648 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 644 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 640 | 0) >> 2] = 25113;
             $827(25402 | 0, $5_1 + 640 | 0 | 0);
             break label$4;
            case 4:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 692 | 0) >> 2] = 8;
             HEAP32[($5_1 + 688 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 684 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 680 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 676 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 672 | 0) >> 2] = 25113;
             $827(25452 | 0, $5_1 + 672 | 0 | 0);
             break label$4;
            case 8:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 724 | 0) >> 2] = 8;
             HEAP32[($5_1 + 720 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 716 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 712 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 708 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 704 | 0) >> 2] = 25113;
             $827(25503 | 0, $5_1 + 704 | 0 | 0);
             break label$4;
            case 11:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 756 | 0) >> 2] = 8;
             HEAP32[($5_1 + 752 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 748 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 744 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 740 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 736 | 0) >> 2] = 25113;
             $827(25553 | 0, $5_1 + 736 | 0 | 0);
             break label$4;
            case 10:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 788 | 0) >> 2] = 8;
             HEAP32[($5_1 + 784 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 780 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 776 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 772 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 768 | 0) >> 2] = 25113;
             $827(25603 | 0, $5_1 + 768 | 0 | 0);
             break label$4;
            case 9:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (12 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 820 | 0) >> 2] = 12;
             HEAP32[($5_1 + 816 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 812 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 808 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 804 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 800 | 0) >> 2] = 25113;
             $827(25503 | 0, $5_1 + 800 | 0 | 0);
             break label$4;
            case 12:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (1 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 852 | 0) >> 2] = 4;
             HEAP32[($5_1 + 848 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 844 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 840 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 836 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 832 | 0) >> 2] = 25113;
             $827(25655 | 0, $5_1 + 832 | 0 | 0);
             break label$4;
            case 13:
             if ((HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) == (8 | 0)) {
              break label$12
             }
             if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$4
             }
             $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
             $1_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
             HEAP32[($5_1 + 884 | 0) >> 2] = 8;
             HEAP32[($5_1 + 880 | 0) >> 2] = $1_1;
             HEAP32[($5_1 + 876 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 872 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 868 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 864 | 0) >> 2] = 25113;
             $827(25705 | 0, $5_1 + 864 | 0 | 0);
             break label$4;
            case 5:
            case 14:
             break label$12;
            default:
             break label$13;
            };
           }
           if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$4
           }
           $1_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
           HEAP32[($5_1 + 464 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
           HEAP32[($5_1 + 460 | 0) >> 2] = $1_1;
           HEAP32[($5_1 + 456 | 0) >> 2] = $3_1;
           HEAP32[($5_1 + 452 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 448 | 0) >> 2] = 25113;
           $827(25755 | 0, $5_1 + 448 | 0 | 0);
           break label$4;
          }
          $9_1 = $1_1 + 20 | 0;
          $7_1 = $7_1 + 1 | 0;
          $8_1 = $1_1 + 24 | 0;
          if ((HEAP32[$8_1 >> 2] | 0 | 0) != (14 | 0)) {
           continue label$10
          }
          break label$10;
         };
        }
        $1_1 = 1;
        if (($754($0_1 | 0) | 0) >>> 0 >= $6_1 >>> 0) {
         break label$3
        }
        $9_1 = $7_1 >>> 0 > 1 >>> 0 ? $7_1 : 1;
        $11_1 = !$7_1;
        $12_1 = ($5_1 + 416 | 0) + 16 | 0;
        $13_1 = $5_1 + 440 | 0;
        $1_1 = 0;
        label$27 : {
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $8_1 = $2_1 + Math_imul($1_1, 20) | 0;
            if (HEAP32[$8_1 >> 2] | 0) {
             break label$30
            }
            $1_1 = $1_1 + 1 | 0;
            break label$29;
           }
           if (!($329($0_1 | 0, $5_1 + 928 | 0 | 0) | 0)) {
            break label$4
           }
           label$31 : {
            label$32 : {
             label$33 : {
              if ($1_1 >>> 0 >= $7_1 >>> 0) {
               break label$33
              }
              $431_1 = HEAP32[$8_1 >> 2] | 0;
              $8_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
              $10_1 = ($431_1 | 0) == ($8_1 | 0);
              if (!($10_1 | $11_1 | 0)) {
               break label$32
              }
              $1_1 = $10_1 ? $1_1 : 0;
              break label$31;
             }
             label$34 : {
              if ($7_1) {
               break label$34
              }
              $1_1 = 0;
              break label$31;
             }
             $8_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
            }
            $1_1 = 0;
            label$35 : while (1) {
             if ((HEAP32[($2_1 + Math_imul($1_1, 20) | 0) >> 2] | 0 | 0) == ($8_1 | 0)) {
              break label$31
             }
             $1_1 = $1_1 + 1 | 0;
             if (($1_1 | 0) != ($9_1 | 0)) {
              continue label$35
             }
             break label$35;
            };
            $1_1 = $9_1;
           }
           $8_1 = $2_1 + Math_imul($1_1, 20) | 0;
           $10_1 = $8_1 + 4 | 0;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) == (14 | 0)) {
                 break label$40
                }
                label$41 : {
                 if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$41
                 }
                 if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$41
                 }
                 $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                 HEAP32[$12_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
                 HEAP32[(($5_1 + 416 | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
                 i64toi32_i32$2 = $5_1;
                 i64toi32_i32$0 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                 HEAP32[$13_1 >> 2] = i64toi32_i32$0;
                 HEAP32[($5_1 + 416 | 0) >> 2] = 25113;
                 HEAP32[($5_1 + 420 | 0) >> 2] = $0_1;
                 HEAP32[($5_1 + 424 | 0) >> 2] = $3_1;
                 HEAP32[($5_1 + 428 | 0) >> 2] = $14_1;
                 $827(25795 | 0, $5_1 + 416 | 0 | 0);
                }
                HEAP8[($4_1 + (HEAPU16[($8_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 1;
                $1_1 = $1_1 + 1 | 0;
                $14_1 = $4_1 + (HEAPU16[($8_1 + 8 | 0) >> 1] | 0) | 0;
                label$42 : {
                 switch (HEAP32[$10_1 >> 2] | 0 | 0) {
                 case 0:
                 case 6:
                 case 7:
                 case 12:
                  label$53 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$0 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$1;
                   $19$hi = i64toi32_i32$0;
                   i64toi32_i32$2 = $19_1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$3 = 8;
                   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
                    break label$53
                   }
                   i64toi32_i32$2 = $19$hi;
                   i64toi32_i32$2 = $332($0_1 | 0, $19_1 | 0) | 0;
                   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                   $19_1 = i64toi32_i32$2;
                   $19$hi = i64toi32_i32$0;
                   label$54 : {
                    $15_1 = HEAP32[$10_1 >> 2] | 0;
                    if (($15_1 | 0) == (6 | 0)) {
                     break label$54
                    }
                    label$55 : {
                     if (($15_1 | 0) == (12 | 0)) {
                      break label$55
                     }
                     label$56 : {
                      i64toi32_i32$0 = $19$hi;
                      i64toi32_i32$3 = $19_1;
                      i64toi32_i32$2 = 0;
                      i64toi32_i32$1 = -2;
                      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                       break label$56
                      }
                      i64toi32_i32$3 = $19$hi;
                      HEAP32[$14_1 >> 2] = $19_1;
                      break label$38;
                     }
                     if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$36
                     }
                     $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                     i64toi32_i32$3 = $19$hi;
                     HEAP32[(($5_1 + 32 | 0) + 20 | 0) >> 2] = $19_1;
                     $534_1 = ($5_1 + 32 | 0) + 16 | 0;
                     i64toi32_i32$1 = $19_1;
                     i64toi32_i32$0 = 0;
                     i64toi32_i32$2 = 32;
                     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                      i64toi32_i32$0 = 0;
                      $38_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                     } else {
                      i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
                      $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
                     }
                     HEAP32[$534_1 >> 2] = $38_1;
                     HEAP32[($5_1 + 44 | 0) >> 2] = $14_1;
                     HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
                     HEAP32[($5_1 + 36 | 0) >> 2] = $0_1;
                     HEAP32[($5_1 + 32 | 0) >> 2] = 25113;
                     $827(25847 | 0, $5_1 + 32 | 0 | 0);
                     break label$36;
                    }
                    label$57 : {
                     label$58 : {
                      i64toi32_i32$0 = $19$hi;
                      switch ($19_1 | 0) {
                      case 0:
                       break label$39;
                      case 1:
                       break label$58;
                      default:
                       break label$57;
                      };
                     }
                     HEAP8[$14_1 >> 0] = 1;
                     break label$38;
                    }
                    if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$36
                    }
                    $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                    i64toi32_i32$0 = $19$hi;
                    HEAP32[(($5_1 + 64 | 0) + 20 | 0) >> 2] = $19_1;
                    $559_1 = ($5_1 + 64 | 0) + 16 | 0;
                    i64toi32_i32$3 = $19_1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                     i64toi32_i32$1 = 0;
                     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                    } else {
                     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
                     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                    }
                    HEAP32[$559_1 >> 2] = $39_1;
                    HEAP32[($5_1 + 76 | 0) >> 2] = $14_1;
                    HEAP32[($5_1 + 72 | 0) >> 2] = $3_1;
                    HEAP32[($5_1 + 68 | 0) >> 2] = $0_1;
                    HEAP32[($5_1 + 64 | 0) >> 2] = 25113;
                    $827(25909 | 0, $5_1 + 64 | 0 | 0);
                    break label$36;
                   }
                   i64toi32_i32$1 = $19$hi;
                   i64toi32_i32$3 = $14_1;
                   HEAP32[i64toi32_i32$3 >> 2] = $19_1;
                   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$1 = $19$hi;
                  HEAP32[(($5_1 + 96 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 108 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 104 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 100 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 96 | 0) >> 2] = 25113;
                  $827(25962 | 0, $5_1 + 96 | 0 | 0);
                  break label$37;
                 case 1:
                  label$59 : {
                   i64toi32_i32$0 = $5_1;
                   i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$3 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$1;
                   $19$hi = i64toi32_i32$3;
                   i64toi32_i32$0 = $19_1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$2 = 8;
                   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & $19_1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                    break label$59
                   }
                   label$60 : {
                    i64toi32_i32$0 = $19$hi;
                    i64toi32_i32$0 = $330($0_1 | 0, $19_1 | 0) | 0;
                    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                    $19_1 = i64toi32_i32$0;
                    $19$hi = i64toi32_i32$3;
                    i64toi32_i32$2 = $19_1;
                    i64toi32_i32$0 = 0;
                    i64toi32_i32$1 = 2147483646;
                    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                    }
                    i64toi32_i32$3 = i64toi32_i32$4;
                    i64toi32_i32$2 = 0;
                    i64toi32_i32$1 = -3;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
                     break label$60
                    }
                    if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$36
                    }
                    $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                    i64toi32_i32$3 = $19$hi;
                    HEAP32[(($5_1 + 128 | 0) + 20 | 0) >> 2] = $19_1;
                    $611_1 = ($5_1 + 128 | 0) + 16 | 0;
                    i64toi32_i32$1 = $19_1;
                    i64toi32_i32$5 = 0;
                    i64toi32_i32$2 = 32;
                    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                     i64toi32_i32$5 = 0;
                     $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                    } else {
                     i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                     $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
                    }
                    HEAP32[$611_1 >> 2] = $40_1;
                    HEAP32[($5_1 + 140 | 0) >> 2] = $14_1;
                    HEAP32[($5_1 + 136 | 0) >> 2] = $3_1;
                    HEAP32[($5_1 + 132 | 0) >> 2] = $0_1;
                    HEAP32[($5_1 + 128 | 0) >> 2] = 25113;
                    $827(26019 | 0, $5_1 + 128 | 0 | 0);
                    break label$36;
                   }
                   i64toi32_i32$5 = $19$hi;
                   HEAP32[$14_1 >> 2] = $19_1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$5 = $19$hi;
                  HEAP32[(($5_1 + 160 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 172 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 168 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 164 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 160 | 0) >> 2] = 25113;
                  $827(26079 | 0, $5_1 + 160 | 0 | 0);
                  break label$37;
                 case 2:
                  label$61 : {
                   i64toi32_i32$3 = $5_1;
                   i64toi32_i32$5 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$5;
                   $19$hi = i64toi32_i32$1;
                   i64toi32_i32$3 = $19_1;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$2 = 16;
                   if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
                    break label$61
                   }
                   $768($0_1 | 0, $14_1 | 0, 16 | 0) | 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[(($5_1 + 192 | 0) + 20 | 0) >> 2] = 16;
                  i64toi32_i32$3 = $19$hi;
                  HEAP32[(($5_1 + 192 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 204 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 200 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 196 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 192 | 0) >> 2] = 25113;
                  $827(26136 | 0, $5_1 + 192 | 0 | 0);
                  break label$37;
                 case 3:
                  label$62 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$3 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$3;
                   $19$hi = i64toi32_i32$1;
                   i64toi32_i32$2 = i64toi32_i32$3;
                   i64toi32_i32$3 = 0;
                   i64toi32_i32$5 = 8;
                   if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
                    break label$62
                   }
                   i64toi32_i32$2 = $780($0_1 | 0) | 0;
                   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                   $675_1 = i64toi32_i32$2;
                   i64toi32_i32$2 = $14_1;
                   HEAP32[$14_1 >> 2] = $675_1;
                   HEAP32[($14_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[(($5_1 + 224 | 0) + 20 | 0) >> 2] = 8;
                  i64toi32_i32$1 = $19$hi;
                  HEAP32[(($5_1 + 224 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 236 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 232 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 228 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 224 | 0) >> 2] = 25113;
                  $827(26191 | 0, $5_1 + 224 | 0 | 0);
                  break label$37;
                 case 4:
                  label$63 : {
                   label$64 : {
                    label$65 : {
                     i64toi32_i32$5 = $5_1;
                     i64toi32_i32$1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                     i64toi32_i32$2 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                     $19_1 = i64toi32_i32$1;
                     $19$hi = i64toi32_i32$2;
                     i64toi32_i32$5 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -4;
                     i64toi32_i32$0 = $19_1 + i64toi32_i32$3 | 0;
                     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                     }
                     switch (i64toi32_i32$0 | 0) {
                     case 4:
                      break label$64;
                     case 0:
                      break label$65;
                     default:
                      break label$63;
                     };
                    }
                    HEAP32[$14_1 >> 2] = $778($0_1 | 0) | 0;
                    HEAPF64[$14_1 >> 3] = +Math_fround(HEAPF32[$14_1 >> 2]);
                    break label$38;
                   }
                   i64toi32_i32$4 = $780($0_1 | 0) | 0;
                   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                   $710_1 = i64toi32_i32$4;
                   i64toi32_i32$4 = $14_1;
                   HEAP32[$14_1 >> 2] = $710_1;
                   HEAP32[($14_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$4 = ($5_1 + 256 | 0) + 20 | 0;
                  i64toi32_i32$5 = 8;
                  HEAP32[i64toi32_i32$4 >> 2] = 4;
                  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
                  i64toi32_i32$5 = $19$hi;
                  HEAP32[(($5_1 + 256 | 0) + 16 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 268 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 264 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 260 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 256 | 0) >> 2] = 25113;
                  $827(26241 | 0, $5_1 + 256 | 0 | 0);
                  break label$37;
                 case 5:
                  label$66 : {
                   i64toi32_i32$2 = $5_1;
                   i64toi32_i32$5 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$4 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$5;
                   $19$hi = i64toi32_i32$4;
                   i64toi32_i32$2 = $8_1;
                   i64toi32_i32$4 = HEAPU16[(i64toi32_i32$2 + 10 | 0) >> 1] | 0;
                   i64toi32_i32$5 = 0;
                   $735_1 = i64toi32_i32$4;
                   $735$hi = i64toi32_i32$5;
                   i64toi32_i32$5 = $19$hi;
                   i64toi32_i32$2 = $19_1;
                   i64toi32_i32$4 = $735$hi;
                   i64toi32_i32$3 = $735_1;
                   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                    break label$66
                   }
                   i64toi32_i32$2 = $19$hi;
                   $15_1 = $19_1;
                   $768($0_1 | 0, $14_1 | 0, $19_1 | 0) | 0;
                   HEAP8[($14_1 + $19_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  $14_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  $15_1 = HEAPU16[($8_1 + 10 | 0) >> 1] | 0;
                  i64toi32_i32$2 = $19$hi;
                  HEAP32[(($5_1 + 288 | 0) + 20 | 0) >> 2] = $19_1;
                  HEAP32[(($5_1 + 288 | 0) + 16 | 0) >> 2] = $15_1;
                  HEAP32[($5_1 + 300 | 0) >> 2] = $14_1;
                  HEAP32[($5_1 + 296 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 292 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 288 | 0) >> 2] = 25113;
                  $827(26295 | 0, $5_1 + 288 | 0 | 0);
                  break label$37;
                 case 9:
                  if ($333($0_1 | 0, HEAP32[($5_1 + 936 | 0) >> 2] | 0 | 0, $14_1 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) | 0) {
                   break label$38
                  }
                  break label$36;
                 case 10:
                  label$67 : {
                   $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                   if (!$15_1) {
                    break label$67
                   }
                   $815($15_1 | 0);
                  }
                  $16_1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                  $15_1 = $813($16_1 + 1 | 0 | 0) | 0;
                  HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  label$68 : {
                   if (!$15_1) {
                    break label$68
                   }
                   $768($0_1 | 0, $15_1 | 0, $16_1 | 0) | 0;
                   HEAP8[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + $16_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 320 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[($5_1 + 332 | 0) >> 2] = $16_1;
                  HEAP32[($5_1 + 328 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 324 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 320 | 0) >> 2] = 25113;
                  $827(26355 | 0, $5_1 + 320 | 0 | 0);
                  break label$37;
                 case 11:
                  label$69 : {
                   $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                   if (!$15_1) {
                    break label$69
                   }
                   $815($15_1 | 0);
                  }
                  $16_1 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                  $15_1 = $813($16_1 | 0) | 0;
                  HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  label$70 : {
                   if (!$15_1) {
                    break label$70
                   }
                   HEAP32[$14_1 >> 2] = $16_1;
                   $768($0_1 | 0, $15_1 | 0, $16_1 | 0) | 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 352 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  HEAP32[($5_1 + 364 | 0) >> 2] = $16_1;
                  HEAP32[($5_1 + 360 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 356 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 352 | 0) >> 2] = 25113;
                  $827(26415 | 0, $5_1 + 352 | 0 | 0);
                  break label$37;
                 case 8:
                  $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                  label$71 : {
                   i64toi32_i32$3 = $5_1;
                   i64toi32_i32$2 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                   i64toi32_i32$5 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                   $19_1 = i64toi32_i32$2;
                   $19$hi = i64toi32_i32$5;
                   i64toi32_i32$3 = $14_1;
                   i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                   i64toi32_i32$2 = 0;
                   $856_1 = i64toi32_i32$5;
                   $856$hi = i64toi32_i32$2;
                   i64toi32_i32$2 = $19$hi;
                   i64toi32_i32$3 = $19_1;
                   i64toi32_i32$5 = $856$hi;
                   i64toi32_i32$4 = $856_1;
                   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
                    break label$71
                   }
                   label$72 : {
                    if (!$15_1) {
                     break label$72
                    }
                    $815($15_1 | 0);
                   }
                   i64toi32_i32$3 = $19$hi;
                   $15_1 = $813($19_1 + 1 | 0 | 0) | 0;
                   HEAP32[($14_1 + 4 | 0) >> 2] = $15_1;
                  }
                  label$73 : {
                   if (!$15_1) {
                    break label$73
                   }
                   i64toi32_i32$3 = $19$hi;
                   $16_1 = $19_1;
                   HEAP32[$14_1 >> 2] = $19_1 + 1 | 0;
                   $768($0_1 | 0, $15_1 | 0, $19_1 | 0) | 0;
                   HEAP8[((HEAP32[($14_1 + 4 | 0) >> 2] | 0) + $19_1 | 0) >> 0] = 0;
                   break label$38;
                  }
                  if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$37
                  }
                  HEAP32[(($5_1 + 384 | 0) + 16 | 0) >> 2] = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                  i64toi32_i32$3 = $19$hi;
                  HEAP32[($5_1 + 396 | 0) >> 2] = $19_1;
                  HEAP32[($5_1 + 392 | 0) >> 2] = $3_1;
                  HEAP32[($5_1 + 388 | 0) >> 2] = $0_1;
                  HEAP32[($5_1 + 384 | 0) >> 2] = 25113;
                  $827(26473 | 0, $5_1 + 384 | 0 | 0);
                  break label$37;
                 case 14:
                  break label$40;
                 case 13:
                  break label$42;
                 default:
                  break label$38;
                 };
                }
                i64toi32_i32$4 = $5_1;
                i64toi32_i32$3 = HEAP32[($5_1 + 936 | 0) >> 2] | 0;
                i64toi32_i32$2 = HEAP32[($5_1 + 940 | 0) >> 2] | 0;
                $900_1 = i64toi32_i32$3;
                i64toi32_i32$3 = $14_1;
                HEAP32[i64toi32_i32$3 >> 2] = $900_1;
                HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
                break label$27;
               }
               $14_1 = HEAP32[($5_1 + 928 | 0) >> 2] | 0;
               if (($14_1 | 0) == (191 | 0)) {
                break label$37
               }
               if (($14_1 | 0) == (236 | 0)) {
                break label$37
               }
               if (($14_1 | 0) == (-1 | 0)) {
                break label$4
               }
               if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                break label$37
               }
               if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$37
               }
               HEAP32[($5_1 + 12 | 0) >> 2] = $14_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
               HEAP32[$5_1 >> 2] = 25113;
               $827(26532 | 0, $5_1 | 0);
               break label$37;
              }
              HEAP8[$14_1 >> 0] = 0;
             }
             if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              break label$29
             }
             if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$36
             }
             HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
             HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($5_1 + 16 | 0) >> 2] = 25113;
             $827(26565 | 0, $5_1 + 16 | 0 | 0);
             break label$36;
            }
            $766($0_1 | 0, HEAP32[($5_1 + 936 | 0) >> 2] | 0 | 0) | 0;
           }
           label$74 : {
            if ((HEAP32[$10_1 >> 2] | 0 | 0) == (14 | 0)) {
             break label$74
            }
            HEAP8[($4_1 + (HEAPU16[($8_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 0;
           }
           if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
            break label$29
           }
           $1_1 = 0;
           break label$3;
          }
          if (($754($0_1 | 0) | 0) >>> 0 < $6_1 >>> 0) {
           continue label$28
          }
          break label$28;
         };
        }
        $1_1 = 1;
        break label$3;
       }
       $859(25059 | 0, 24971 | 0, 452 | 0);
       abort();
      }
      $859(25052 | 0, 24971 | 0, 451 | 0);
      abort();
     }
     $859(25047 | 0, 24971 | 0, 450 | 0);
     abort();
    }
    $859(24961 | 0, 24971 | 0, 449 | 0);
    abort();
   }
   $1_1 = 0;
   if (($754($0_1 | 0) | 0) >>> 0 <= $6_1 >>> 0) {
    break label$3
   }
   $766($0_1 | 0, $6_1 - ($754($0_1 | 0) | 0) | 0 | 0) | 0;
  }
  label$75 : {
   $18_1 = $5_1 + 944 | 0;
   if ($18_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  return $1_1 | 0;
 }
 
 function $332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, $2_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $39_1 = 0, $40_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $26_1 = 0, $26$hi = 0, $29$hi = 0, $30_1 = 0, $30$hi = 0, $32_1 = 0, $32$hi = 0, $38_1 = 0, $38$hi = 0, $41$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $46_1 = 0, $46$hi = 0, $48_1 = 0, $48$hi = 0, $61$hi = 0, $65$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) < (5 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$0;
     label$4 : {
      label$5 : {
       switch ($1_1 | 0) {
       case 1:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
        i64toi32_i32$1 = 0;
        $4_1 = i64toi32_i32$0;
        $4$hi = i64toi32_i32$1;
        break label$4;
       case 2:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $33_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $33_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $18$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = HEAPU8[(i64toi32_i32$0 + 1 | 0) >> 0] | 0;
        i64toi32_i32$2 = 0;
        $20_1 = i64toi32_i32$1;
        $20$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$0 = $33_1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        $4_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $4$hi = i64toi32_i32$1;
        break label$4;
       case 3:
        $3_1 = HEAP32[$0_1 >> 2] | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $34_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $34_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $26_1 = $34_1;
        $26$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $3_1;
        i64toi32_i32$1 = HEAPU8[i64toi32_i32$0 >> 0] | 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 16;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $35_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $35_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $29$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$2 = $26_1;
        i64toi32_i32$0 = $29$hi;
        i64toi32_i32$3 = $35_1;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        $30_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
        $30$hi = i64toi32_i32$0;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 2 | 0) >> 0] | 0;
        i64toi32_i32$2 = 0;
        $32_1 = i64toi32_i32$0;
        $32$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $30$hi;
        i64toi32_i32$1 = $30_1;
        i64toi32_i32$0 = $32$hi;
        i64toi32_i32$3 = $32_1;
        i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        $4$hi = i64toi32_i32$0;
        break label$4;
       case 0:
        break label$1;
       case 4:
        break label$5;
       default:
        break label$2;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $36_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $36_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $38_1 = $36_1;
      $38$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = HEAPU8[i64toi32_i32$1 >> 0] | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 24;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $37_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $37_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $41$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$2 = $38_1;
      i64toi32_i32$1 = $41$hi;
      i64toi32_i32$3 = $37_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      $42_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $42$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$0 + 2 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 8;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $39_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
       $39_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $45$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $42$hi;
      i64toi32_i32$2 = $42_1;
      i64toi32_i32$0 = $45$hi;
      i64toi32_i32$3 = $39_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $46_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $46$hi = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 3 | 0) >> 0] | 0;
      i64toi32_i32$2 = 0;
      $48_1 = i64toi32_i32$0;
      $48$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $46$hi;
      i64toi32_i32$1 = $46_1;
      i64toi32_i32$0 = $48$hi;
      i64toi32_i32$3 = $48_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 - $1_1 | 0;
     HEAP32[$0_1 >> 2] = $3_1 + $1_1 | 0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
     return i64toi32_i32$1 | 0;
    }
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   }
   i64toi32_i32$0 = 0;
   $4_1 = 0;
   $4$hi = i64toi32_i32$0;
   label$9 : while (1) {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 8;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $40_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $61$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $65$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $61$hi;
    i64toi32_i32$0 = $40_1;
    i64toi32_i32$2 = $65$hi;
    i64toi32_i32$3 = ($764($0_1 | 0) | 0) & 255 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$2;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$9
    }
    break label$9;
   };
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        $5_1 = HEAP32[$2_1 >> 2] | 0;
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 <= $6_1 >>> 0) {
         break label$8
        }
        $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        break label$7;
       }
       $7_1 = Math_imul($5_1, 3) >>> 1 | 0;
       $8_1 = $7_1 + 1 | 0;
       $5_1 = $813(Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, $8_1) | 0) | 0;
       $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $6_1 >>> 0) {
        break label$4
       }
       if (!$5_1) {
        break label$6
       }
       label$9 : {
        label$10 : {
         if ($6_1) {
          break label$10
         }
         $6_1 = 0;
         break label$9;
        }
        $7_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$3
        }
        $823($5_1 | 0, $7_1 | 0, Math_imul(HEAP32[($3_1 + 36 | 0) >> 2] | 0, $6_1) | 0) | 0;
        $815(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0);
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       HEAP32[$2_1 >> 2] = $8_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      }
      $7_1 = 1;
      $8_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      if ($334($0_1 | 0, $3_1 | 0, $1_1 | 0, $5_1 + Math_imul($8_1, $6_1) | 0 | 0) | 0) {
       break label$5
      }
      $769($0_1 | 0, $4_1 + 8 | 0 | 0);
      $766($0_1 | 0, $1_1 | 0) | 0;
     }
     $7_1 = 0;
    }
    label$11 : {
     $10_1 = $4_1 + 16 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $7_1 | 0;
   }
   $859(27857 | 0, 24971 | 0, 384 | 0);
   abort();
  }
  $859(27886 | 0, 24971 | 0, 389 | 0);
  abort();
 }
 
 function $334($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $9$hi = 0, i64toi32_i32$3 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $8_1 = 0, $7_1 = 0, $58_1 = 0, $81_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    FUNCTION_TABLE[$5_1]($3_1);
    break label$3;
   }
   $822($3_1 | 0, 0 | 0, HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     if (HEAP32[$5_1 >> 2] | 0) {
      break label$7
     }
     if ($2_1 >>> 0 >= 9 >>> 0) {
      break label$5
     }
     $6_1 = $3_1 + (HEAPU16[($5_1 + 8 | 0) >> 1] | 0) | 0;
     i64toi32_i32$0 = $332($0_1 | 0, $2_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     label$8 : {
      label$9 : {
       $2_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (6 | 0)) {
        break label$9
       }
       label$10 : {
        if (($2_1 | 0) == (12 | 0)) {
         break label$10
        }
        label$11 : {
         i64toi32_i32$1 = $9$hi;
         i64toi32_i32$2 = $9_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = -2;
         if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
          break label$11
         }
         i64toi32_i32$2 = $9$hi;
         HEAP32[$6_1 >> 2] = $9_1;
         break label$8;
        }
        $2_1 = 0;
        if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$6
        }
        $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$2 = $9$hi;
        HEAP32[($4_1 + 20 | 0) >> 2] = $9_1;
        $58_1 = $4_1 + 16 | 0;
        i64toi32_i32$3 = $9_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $18_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
         $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
        }
        HEAP32[$58_1 >> 2] = $18_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
        HEAP32[$4_1 >> 2] = 25113;
        $827(25847 | 0, $4_1 | 0);
        break label$6;
       }
       label$12 : {
        label$13 : {
         label$14 : {
          i64toi32_i32$1 = $9$hi;
          switch ($9_1 | 0) {
          case 1:
           break label$13;
          case 0:
           break label$14;
          default:
           break label$12;
          };
         }
         HEAP8[$6_1 >> 0] = 0;
         break label$8;
        }
        HEAP8[$6_1 >> 0] = 1;
        break label$8;
       }
       $2_1 = 0;
       if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = $9$hi;
       HEAP32[($4_1 + 52 | 0) >> 2] = $9_1;
       $81_1 = $4_1 + 48 | 0;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       HEAP32[$81_1 >> 2] = $19_1;
       HEAP32[($4_1 + 44 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
       HEAP32[($4_1 + 32 | 0) >> 2] = 25113;
       $827(25909 | 0, $4_1 + 32 | 0 | 0);
       break label$6;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = $9$hi;
      HEAP32[i64toi32_i32$2 >> 2] = $9_1;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = $9$hi;
     }
     $2_1 = 1;
     HEAP8[($3_1 + (HEAPU16[($5_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 1;
     break label$6;
    }
    $2_1 = $331($0_1 | 0, $2_1 | 0, $5_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
   }
   label$15 : {
    $8_1 = $4_1 + 64 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return $2_1 | 0;
  }
  $859(31043 | 0, 24971 | 0, 340 | 0);
  abort();
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) == (14 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      HEAP8[($1_1 + (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >> 0] = 0;
      $3_1 = $1_1 + (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ($2_1 + -8 | 0 | 0) {
          case 2:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 3:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 0:
           $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           $815($2_1 | 0);
           break label$7;
          case 1:
           break label$8;
          default:
           break label$5;
          };
         }
         $336($3_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
         break label$5;
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 0;
       }
       HEAP32[$3_1 >> 2] = 0;
      }
      $3_1 = $0_1 + 24 | 0;
      $0_1 = $0_1 + 20 | 0;
      $2_1 = HEAP32[$3_1 >> 2] | 0;
      if (($2_1 | 0) != (14 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    return;
   }
   $859(25047 | 0, 24971 | 0, 782 | 0);
   abort();
  }
  $859(25059 | 0, 24971 | 0, 781 | 0);
  abort();
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = 0;
   label$2 : while (1) {
    $335(HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, $2_1 | 0);
    $2_1 = $2_1 + (HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
    $3_1 = $3_1 + 1 | 0;
    if ($3_1 >>> 0 < (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$3
   }
   $815($2_1 | 0);
  }
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $337($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $13_1 = 0, $6_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $14_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $25_1 = 0, $8_1 = 0, $26_1 = 0, $16_1 = 0, $15_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $17_1 = 0, $17$hi = 0, $110_1 = 0;
  label$1 : {
   $5_1 = global$0 - 368 | 0;
   $15_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if (!$4_1) {
      break label$4
     }
     if (!$3_1) {
      break label$3
     }
     label$6 : {
      $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($6_1 | 0) == (14 | 0)) {
       break label$6
      }
      $7_1 = 33 - ($5_1 + 320 | 0) | 0;
      $8_1 = ($5_1 + 320 | 0) + 33 | 0;
      $9_1 = $1_1 + -2 | 0;
      $10_1 = $5_1 + 16 | 0;
      label$7 : while (1) {
       label$8 : {
        $11_1 = $0_1;
        if (!(HEAPU8[($4_1 + (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >> 0] | 0)) {
         break label$8
        }
        $0_1 = HEAPU16[($11_1 + 8 | 0) >> 1] | 0;
        $12_1 = 0;
        HEAP8[($5_1 + 320 | 0) >> 0] = 0;
        $13_1 = $4_1 + $0_1 | 0;
        $14_1 = $5_1 + 320 | 0;
        $0_1 = $14_1;
        label$9 : {
         label$10 : {
          switch ($6_1 | 0) {
          case 12:
           $14_1 = HEAPU8[$13_1 >> 0] | 0 ? 26601 : 26604;
           break label$9;
          case 0:
           label$23 : {
            $0_1 = HEAP32[$13_1 >> 2] | 0;
            if ($0_1 >>> 0 > 32 >>> 0) {
             break label$23
            }
            HEAP32[($5_1 + 128 | 0) >> 2] = $0_1;
            $820($5_1 + 320 | 0 | 0, 33 | 0, 26608 | 0, $5_1 + 128 | 0 | 0) | 0;
            break label$9;
           }
           HEAP32[($5_1 + 148 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 144 | 0) >> 2] = $0_1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26611 | 0, $5_1 + 144 | 0 | 0) | 0;
           break label$9;
          case 7:
           HEAP32[($5_1 + 160 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26618 | 0, $5_1 + 160 | 0 | 0) | 0;
           break label$9;
          case 6:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$0 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           $17_1 = i64toi32_i32$0;
           $17$hi = i64toi32_i32$1;
           $0_1 = i64toi32_i32$0;
           label$24 : {
            i64toi32_i32$2 = $0_1;
            i64toi32_i32$0 = 0;
            i64toi32_i32$3 = 15;
            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $0_1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
             break label$24
            }
            HEAP32[($5_1 + 176 | 0) >> 2] = $0_1;
            $820($5_1 + 320 | 0 | 0, 33 | 0, 26622 | 0, $5_1 + 176 | 0 | 0) | 0;
            break label$9;
           }
           HEAP32[($5_1 + 200 | 0) >> 2] = $0_1;
           HEAP32[($5_1 + 192 | 0) >> 2] = $0_1;
           $110_1 = $5_1;
           i64toi32_i32$2 = $17$hi;
           i64toi32_i32$3 = $17_1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 32;
           i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
           if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
            i64toi32_i32$1 = 0;
            $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
           } else {
            i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
           }
           HEAP32[($110_1 + 196 | 0) >> 2] = $26_1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26626 | 0, $5_1 + 192 | 0 | 0) | 0;
           break label$9;
          case 1:
           HEAP32[($5_1 + 208 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26639 | 0, $5_1 + 208 | 0 | 0) | 0;
           break label$9;
          case 11:
           HEAP32[($5_1 + 240 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
           $0_1 = $820($5_1 + 320 | 0 | 0, 33 | 0, 26642 | 0, $5_1 + 240 | 0 | 0) | 0;
           if (($0_1 | 0) < (0 | 0)) {
            break label$9
           }
           $6_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           if (!$6_1) {
            break label$9
           }
           $0_1 = ($5_1 + 320 | 0) + $0_1 | 0;
           $12_1 = 0;
           label$25 : while (1) {
            if ((HEAP32[$13_1 >> 2] | 0) >>> 0 <= $12_1 >>> 0) {
             break label$9
            }
            label$26 : {
             if ($0_1 >>> 0 < $8_1 >>> 0) {
              break label$26
             }
             $25_1 = 3026478;
             HEAP8[($5_1 + 349 | 0) >> 0] = $25_1;
             HEAP8[($5_1 + 350 | 0) >> 0] = $25_1 >>> 8 | 0;
             HEAP8[($5_1 + 351 | 0) >> 0] = $25_1 >>> 16 | 0;
             HEAP8[($5_1 + 352 | 0) >> 0] = $25_1 >>> 24 | 0;
             break label$9;
            }
            HEAP32[($5_1 + 224 | 0) >> 2] = HEAPU8[($6_1 + $12_1 | 0) >> 0] | 0;
            $6_1 = $820($0_1 | 0, $8_1 - $0_1 | 0 | 0, 26647 | 0, $5_1 + 224 | 0 | 0) | 0;
            if (($6_1 | 0) < (0 | 0)) {
             break label$9
            }
            $12_1 = $12_1 + 1 | 0;
            $0_1 = $0_1 + $6_1 | 0;
            $6_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
            if ($6_1) {
             continue label$25
            }
            break label$9;
           };
          case 2:
           label$27 : while (1) {
            HEAP32[($5_1 + 256 | 0) >> 2] = HEAPU8[($13_1 + $12_1 | 0) >> 0] | 0;
            $6_1 = $820($0_1 | 0, $7_1 + $0_1 | 0 | 0, 26647 | 0, $5_1 + 256 | 0 | 0) | 0;
            if (($6_1 | 0) < (0 | 0)) {
             break label$9
            }
            $0_1 = $0_1 + $6_1 | 0;
            if ($0_1 >>> 0 >= $8_1 >>> 0) {
             break label$9
            }
            $6_1 = $12_1 >>> 0 < 15 >>> 0;
            $12_1 = $12_1 + 1 | 0;
            if ($6_1) {
             continue label$27
            }
            break label$9;
           };
          case 3:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$1 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           HEAP32[($5_1 + 272 | 0) >> 2] = i64toi32_i32$1;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26622 | 0, $5_1 + 272 | 0 | 0) | 0;
           break label$9;
          case 4:
           HEAPF64[($5_1 + 288 | 0) >> 3] = +Math_fround(+HEAPF64[$13_1 >> 3]);
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26652 | 0, $5_1 + 288 | 0 | 0) | 0;
           break label$9;
          case 9:
           $338($13_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0);
           break label$8;
          case 13:
           i64toi32_i32$2 = $13_1;
           i64toi32_i32$3 = HEAP32[$13_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           HEAP32[($5_1 + 304 | 0) >> 2] = i64toi32_i32$3;
           $820($5_1 + 320 | 0 | 0, 33 | 0, 26642 | 0, $5_1 + 304 | 0 | 0) | 0;
           break label$8;
          case 8:
          case 10:
           $13_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
           break;
          case 5:
           break label$10;
          default:
           break label$9;
          };
         }
         $14_1 = $13_1;
         if (!$13_1) {
          break label$8
         }
        }
        label$28 : {
         switch ($9_1 | 0) {
         case 0:
          if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$8
          }
          if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[$10_1 >> 2] = $14_1;
          HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 4 | 0) >> 2] = 32;
          HEAP32[$5_1 >> 2] = $2_1;
          $827(26655 | 0, $5_1 | 0);
          break label$8;
         case 1:
          if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[(($5_1 + 32 | 0) + 16 | 0) >> 2] = $14_1;
          HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 36 | 0) >> 2] = 32;
          HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
          $827(26655 | 0, $5_1 + 32 | 0 | 0);
          break label$8;
         case 2:
          if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$8
          }
          $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
          HEAP32[(($5_1 + 64 | 0) + 16 | 0) >> 2] = $14_1;
          HEAP32[($5_1 + 76 | 0) >> 2] = $0_1;
          HEAP32[($5_1 + 72 | 0) >> 2] = $3_1;
          HEAP32[($5_1 + 68 | 0) >> 2] = 32;
          HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
          $827(26655 | 0, $5_1 + 64 | 0 | 0);
          break label$8;
         case 3:
          break label$28;
         default:
          break label$8;
         };
        }
        if (!($836(62040 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        $0_1 = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        HEAP32[(($5_1 + 96 | 0) + 16 | 0) >> 2] = $14_1;
        HEAP32[($5_1 + 108 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 104 | 0) >> 2] = $3_1;
        HEAP32[($5_1 + 100 | 0) >> 2] = 32;
        HEAP32[($5_1 + 96 | 0) >> 2] = $2_1;
        $827(26655 | 0, $5_1 + 96 | 0 | 0);
       }
       $0_1 = $11_1 + 20 | 0;
       $6_1 = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
       if (($6_1 | 0) != (14 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     label$32 : {
      $16_1 = $5_1 + 368 | 0;
      if ($16_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $16_1;
     }
     return;
    }
    $859(25059 | 0, 24971 | 0, 837 | 0);
    abort();
   }
   $859(25047 | 0, 24971 | 0, 838 | 0);
   abort();
  }
  $859(26596 | 0, 24971 | 0, 840 | 0);
  abort();
 }
 
 function $338($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = 0, $5_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$3
   }
   $6_1 = $2_1 + 4 | 0;
   $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $8_1 = $1_1 + -2 | 0;
   $9_1 = 0;
   label$4 : while (1) {
    label$5 : {
     if ($5_1 >>> 0 < 2 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($8_1 | 0) {
      case 0:
       if ((HEAP8[(0 + 62040 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$5
       }
       if (!($828(2 | 0, 62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 4 | 0) >> 2] = 32;
       HEAP32[$4_1 >> 2] = $2_1;
       $827(27898 | 0, $4_1 | 0);
       break label$5;
      case 1:
       if (!($834(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 28 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 20 | 0) >> 2] = 32;
       HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
       $827(27898 | 0, $4_1 + 16 | 0 | 0);
       break label$5;
      case 2:
       if (!($835(62040 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($4_1 + 44 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 40 | 0) >> 2] = $3_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = 32;
       HEAP32[($4_1 + 32 | 0) >> 2] = $2_1;
       $827(27898 | 0, $4_1 + 32 | 0 | 0);
       break label$5;
      case 3:
       break label$6;
      default:
       break label$5;
      };
     }
     if (!($836(62040 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 60 | 0) >> 2] = $9_1;
     HEAP32[($4_1 + 56 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 52 | 0) >> 2] = 32;
     HEAP32[($4_1 + 48 | 0) >> 2] = $2_1;
     $827(27898 | 0, $4_1 + 48 | 0 | 0);
    }
    $337(HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0, $3_1 | 0, $7_1 | 0);
    $7_1 = $7_1 + (HEAP32[($3_1 + 36 | 0) >> 2] | 0) | 0;
    $9_1 = $9_1 + 1 | 0;
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($9_1 >>> 0 < $5_1 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$10 : {
   $11_1 = $4_1 + 64 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $339($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $340($2_1 | 0);
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 26688 | 0, 26848 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(26688 | 0, 2 | 0, 0 | 0, 26848 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(27909 | 0, 24971 | 0, 956 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 48 | 0) | 0;
  i64toi32_i32$0 = 8;
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[$0_1 >> 2] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $823($0_1 + 16 | 0 | 0, 26667 | 0, 9 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 16843009;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 32 | 0) >> 2] = 1;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 43 | 0;
  $3_1 = 16843009;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $341($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 42 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 > 4 >>> 0) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 43 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 41 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$2
    }
    $1_1 = 1;
    $0_1 = $0_1 + 16 | 0;
    if (!($824(26667 | 0, $0_1 | 0, 9 | 0) | 0)) {
     break label$1
    }
    if (!($824(26676 | 0, $0_1 | 0, 5 | 0) | 0)) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 16 | 0) | 0;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 26976 | 0, 27016 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(26976 | 0, 2 | 0, 0 | 0, 27016 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $343($0_1) {
  $0_1 = $0_1 | 0;
  $335(26976 | 0, $0_1 | 0);
 }
 
 function $344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 160 | 0) | 0;
  HEAP8[($2_1 + 152 | 0) >> 0] = 1;
  HEAP32[($2_1 + 100 | 0) >> 2] = 1e6;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 27040 | 0, 27320 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(27040 | 0, 2 | 0, 0 | 0, 27320 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $345($0_1) {
  $0_1 = $0_1 | 0;
  $335(27040 | 0, $0_1 | 0);
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $822($2_1 | 0, 0 | 0, 28 | 0) | 0;
  label$1 : {
   $0_1 = $331($0_1 | 0, $1_1 | 0, 27344 | 0, 27404 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $337(27344 | 0, 2 | 0, 0 | 0, 27404 | 0, $2_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $347($0_1) {
  $0_1 = $0_1 | 0;
  $335(27344 | 0, $0_1 | 0);
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27424 | 0, 16 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1446 | 0);
  abort();
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27440 | 0, 17 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1453 | 0);
  abort();
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27457 | 0, 8 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1460 | 0);
  abort();
 }
 
 function $351($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27465 | 0, 8 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1467 | 0);
  abort();
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27488 | 0, 16 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1475 | 0);
  abort();
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return !($824($0_1 + 80 | 0 | 0, 27504 | 0, 16 | 0) | 0) | 0;
 }
 
 function $354($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27520 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1489 | 0);
  abort();
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    $2_1 = 0;
    label$3 : {
     if (!(HEAPU8[($0_1 + 259 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAPU8[($0_1 + 275 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAP32[($0_1 + 224 | 0) >> 2] | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
     if (!(HEAPU8[($3_1 + 32 | 0) >> 0] | 0)) {
      break label$3
     }
     if (!(HEAPU8[($3_1 + 34 | 0) >> 0] | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $5_1 = +HEAPF64[$3_1 >> 3];
       if (!($5_1 < 4294967296.0 & $5_1 >= 0.0 | 0)) {
        break label$5
       }
       $4_1 = ~~$5_1 >>> 0;
       break label$4;
      }
      $4_1 = 0;
     }
     if (!($257($1_1 | 0, ($4_1 + 1 | 0) & -2 | 0 | 0) | 0)) {
      break label$3
     }
     if (!($259($1_1 | 0, HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     label$6 : {
      label$7 : {
       label$8 : {
        $0_1 = $0_1 + 80 | 0;
        if (!($824($0_1 | 0, 27553 | 0, 15 | 0) | 0)) {
         break label$8
        }
        if (!($824($0_1 | 0, 27568 | 0, 19 | 0) | 0)) {
         break label$8
        }
        if (!($824($0_1 | 0, 27616 | 0, 15 | 0) | 0)) {
         break label$8
        }
        if ($824($0_1 | 0, 27632 | 0, 19 | 0) | 0) {
         break label$7
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 0;
       break label$6;
      }
      label$9 : {
       label$10 : {
        if (!($824($0_1 | 0, 27536 | 0, 17 | 0) | 0)) {
         break label$10
        }
        if ($824($0_1 | 0, 27664 | 0, 17 | 0) | 0) {
         break label$9
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 1;
       return 1 | 0;
      }
      label$11 : {
       label$12 : {
        if (!($824($0_1 | 0, 27600 | 0, 16 | 0) | 0)) {
         break label$12
        }
        if ($824($0_1 | 0, 27696 | 0, 16 | 0) | 0) {
         break label$11
        }
       }
       HEAP8[($1_1 + 2 | 0) >> 0] = 2;
       break label$6;
      }
      if ($824($0_1 | 0, 27712 | 0, 16 | 0) | 0) {
       break label$3
      }
      HEAP8[($1_1 + 2 | 0) >> 0] = 3;
     }
     $2_1 = 1;
    }
    return $2_1 | 0;
   }
   $859(27411 | 0, 24971 | 0, 1510 | 0);
   abort();
  }
  $859(27728 | 0, 24971 | 0, 1511 | 0);
  abort();
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27732 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1554 | 0);
  abort();
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27738 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1561 | 0);
  abort();
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27744 | 0, 7 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1568 | 0);
  abort();
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27751 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1575 | 0);
  abort();
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27760 | 0, 10 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1582 | 0);
  abort();
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = $0_1 + 80 | 0;
    if ($824($0_1 | 0, 27770 | 0, 10 | 0) | 0) {
     break label$2
    }
    return 1 | 0;
   }
   return !($824($0_1 | 0, 27780 | 0, 10 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1591 | 0);
  abort();
 }
 
 function $362($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27790 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1605 | 0);
  abort();
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27799 | 0, 9 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1612 | 0);
  abort();
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27808 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1619 | 0);
  abort();
 }
 
 function $365($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27814 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1626 | 0);
  abort();
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27820 | 0, 6 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1633 | 0);
  abort();
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27826 | 0, 7 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1640 | 0);
  abort();
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (HEAPU8[($0_1 + 259 | 0) >> 0] | 0) {
     break label$2
    }
    return 0 | 0;
   }
   return !($824($0_1 + 80 | 0 | 0, 27833 | 0, 14 | 0) | 0) | 0;
  }
  $859(27411 | 0, 24971 | 0, 1647 | 0);
  abort();
 }
 
 function $369($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  $822($0_1 | 0, 0 | 0, 280 | 0) | 0;
  HEAP8[($0_1 + 254 | 0) >> 0] = 1;
  i64toi32_i32$0 = 1072693248;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 16777473;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 16843009;
  HEAP8[($0_1 + 247 | 0) >> 0] = $2_1;
  HEAP8[($0_1 + 248 | 0) >> 0] = $2_1 >>> 8 | 0;
  HEAP8[($0_1 + 249 | 0) >> 0] = $2_1 >>> 16 | 0;
  HEAP8[($0_1 + 250 | 0) >> 0] = $2_1 >>> 24 | 0;
  HEAP8[($0_1 + 251 | 0) >> 0] = 1;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $822($0_1 | 0, 0 | 0, 96 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP8[$0_1 >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 90 | 0) >> 1] = 257;
  HEAP16[($0_1 + 80 | 0) >> 1] = 257;
  HEAP32[($0_1 + 84 | 0) >> 2] = 16843009;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 40 | 0) | 0;
  HEAP8[($0_1 + 34 | 0) >> 0] = 1;
  HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1086275584;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
  HEAP8[($0_1 + 38 | 0) >> 0] = 1;
  HEAP16[($0_1 + 36 | 0) >> 1] = 257;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1;
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 16 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 44 | 0) | 0;
  HEAP16[($0_1 + 40 | 0) >> 1] = 257;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  $822($0_1 | 0, 0 | 0, 20 | 0) | 0;
 }
 
 function $376($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $19_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = 1;
  label$3 : {
   if ($377(i64toi32_i32$2 | 0) | 0) {
    break label$3
   }
   $2_1 = $378($1_1 | 0) | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = global$0 - 64 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(31116 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $777($0_1 | 0) | 0;
   if ($3_1 >>> 0 < 65504 >>> 0) {
    break label$4
   }
   $2_1 = ($596($0_1 | 0, $3_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 8 | 0 | 0) | 0 | 0) != (0 | 0);
  }
  label$5 : {
   $5_1 = $1_1 + 64 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $378($0_1) {
  $0_1 = $0_1 | 0;
  return $191($0_1 | 0) | 0 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $827(31165 | 0, 0 | 0);
  }
  label$4 : {
   label$5 : {
    $2_1 = $813(24 | 0) | 0;
    if ($2_1) {
     break label$5
    }
    $3_1 = 0;
    if (!($835(62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$1_1 >> 2] = 24;
    $827(31184 | 0, $1_1 | 0);
    break label$4;
   }
   $845($2_1 | 0, 24 | 0, $2_1 | 0, 31056 | 0);
   $3_1 = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   $4_1 = $736($0_1 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   label$6 : {
    if (!$4_1) {
     break label$6
    }
    $0_1 = FUNCTION_TABLE[HEAP32[(0 + 48472 | 0) >> 2] | 0]($0_1) | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    label$7 : {
     if (!$0_1) {
      break label$7
     }
     $3_1 = $2_1;
     break label$4;
    }
    $739(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
   }
   $815($2_1 | 0);
  }
  label$8 : {
   $6_1 = $1_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (31056 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 | 0, 31056 | 0, 31228 | 0, 144 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  FUNCTION_TABLE[HEAP32[(0 + 48476 | 0) >> 2] | 0](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
  $845($0_1 | 0, 24 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $381($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $15$hi = 0, $15_1 = 0, $9_1 = 0, $11_1 = 0, $8_1 = 0, $10_1 = 0, $16$hi = 0, $6_1 = 0, $7_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $16_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $14_1 = 0, $13_1 = 0, $48_1 = 0, $52_1 = 0, $55$hi = 0, $157_1 = 0, $157$hi = 0, $159_1 = 0, $159$hi = 0, $49_1 = 0, $161$hi = 0, $163$hi = 0, $50_1 = 0, $51_1 = 0, $173_1 = 0, $173$hi = 0, $175_1 = 0, $175$hi = 0, $214_1 = 0, $214$hi = 0, $216_1 = 0, $216$hi = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  HEAP16[($4_1 + 20 | 0) >> 1] = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (31056 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 | 0, 31056 | 0, 31228 | 0, 694 | 0);
  }
  $5_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = $0_1;
   $827(31305 | 0, $4_1 | 0);
  }
  $6_1 = HEAP32[(0 + 48484 | 0) >> 2] | 0;
  FUNCTION_TABLE[$6_1](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $48_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         $7_1 = HEAP32[(0 + 48468 | 0) >> 2] | 0;
         if (!$7_1) {
          break label$12
         }
         $8_1 = 0;
         $5_1 = 0;
         $9_1 = 0;
         $10_1 = 0;
         $11_1 = 0;
         label$13 : while (1) {
          $52_1 = $1_1;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$0 = 0;
          $55$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$2 = $15_1;
          i64toi32_i32$1 = $55$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $12_1 = $50($52_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 8192 | 0, $4_1 + 76 | 0 | 0) | 0;
          if (!$12_1) {
           break label$8
          }
          $762($4_1 + 56 | 0 | 0, $12_1 | 0);
          label$14 : {
           label$15 : {
            label$16 : {
             label$17 : {
              label$18 : {
               label$19 : {
                label$20 : {
                 label$21 : {
                  switch ($9_1 | 0) {
                  case 0:
                   label$23 : {
                    if (!($378($4_1 + 56 | 0 | 0) | 0)) {
                     break label$23
                    }
                    $9_1 = $382($0_1 | 0, $12_1 | 0, $1_1 | 0) | 0;
                    if (!$5_1) {
                     break label$16
                    }
                    label$24 : {
                     if ((HEAP32[($9_1 + 40 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($5_1 + 40 | 0) >> 2] | 0) >>> 0) {
                      break label$24
                     }
                     $815($5_1 | 0);
                     break label$16;
                    }
                    $815($9_1 | 0);
                    break label$15;
                   }
                   if ($5_1) {
                    break label$17
                   }
                   $5_1 = 0;
                   if ($60($1_1 | 0, $4_1 + 48 | 0 | 0, $4_1 + 40 | 0 | 0) | 0) {
                    break label$18
                   }
                   i64toi32_i32$0 = $4_1;
                   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
                   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
                   $15_1 = i64toi32_i32$5;
                   $15$hi = i64toi32_i32$2;
                   i64toi32_i32$0 = i64toi32_i32$5;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$3 = 128;
                   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
                    $42_1 = 1
                   } else {
                    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
                     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
                      $43_1 = 0
                     } else {
                      $43_1 = 1
                     }
                     $44_1 = $43_1;
                    } else {
                     $44_1 = 0
                    }
                    $42_1 = $44_1;
                   }
                   if ($42_1) {
                    break label$18
                   }
                   label$25 : {
                    if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
                     break label$25
                    }
                    i64toi32_i32$0 = $15$hi;
                    i64toi32_i32$3 = $15_1;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$5 = -128;
                    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                    }
                    $15_1 = i64toi32_i32$1;
                    $15$hi = i64toi32_i32$4;
                    $5_1 = 0;
                    $9_1 = 1;
                    break label$14;
                   }
                   $5_1 = $383(0 | 0, 0 | 0) | 0;
                   if (!$5_1) {
                    break label$20
                   }
                   $9_1 = 2;
                   i64toi32_i32$4 = 0;
                   $15_1 = 0;
                   $15$hi = i64toi32_i32$4;
                   break label$14;
                  case 2:
                   break label$19;
                  case 1:
                   break label$21;
                  default:
                   break label$14;
                  };
                 }
                 $5_1 = $384($4_1 + 56 | 0 | 0) | 0;
                 if ($5_1) {
                  break label$17
                 }
                 $5_1 = $383(0 | 0, 0 | 0) | 0;
                 if ($5_1) {
                  break label$17
                 }
                }
                $8_1 = $12_1;
                break label$9;
               }
               $11_1 = $590(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $12_1 | 0, $4_1 + 16 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
               $9_1 = $11_1 ? 3 : 2;
               $10_1 = ($756($12_1 | 0) | 0) + $10_1 | 0;
               break label$14;
              }
              $8_1 = $12_1;
              break label$8;
             }
             i64toi32_i32$0 = $0_1;
             i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
             i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
             $15_1 = i64toi32_i32$4;
             $15$hi = i64toi32_i32$3;
             $9_1 = 2;
             break label$14;
            }
            $5_1 = $9_1;
           }
           i64toi32_i32$0 = $0_1;
           i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$3;
           $15$hi = i64toi32_i32$4;
           $9_1 = 0;
          }
          $735($12_1 | 0);
          label$26 : {
           if (($9_1 | 0) == (3 | 0)) {
            break label$26
           }
           if ($10_1 >>> 0 < $7_1 >>> 0) {
            continue label$13
           }
          }
          break label$13;
         };
         if ($11_1) {
          break label$11
         }
        }
        $8_1 = 0;
        $11_1 = FUNCTION_TABLE[HEAP32[(0 + 48488 | 0) >> 2] | 0](HEAP32[($0_1 + 12 | 0) >> 2] | 0, $4_1 + 12 | 0) | 0;
        if (!$11_1) {
         break label$10
        }
       }
       if (!$5_1) {
        break label$7
       }
       HEAP32[($11_1 + 8 | 0) >> 2] = 1;
       label$27 : {
        if (!(HEAP32[($4_1 + 24 | 0) >> 2] | 0)) {
         break label$27
        }
        $12_1 = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
        if (!$12_1) {
         break label$6
        }
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$4 = HEAPU16[(i64toi32_i32$0 + 20 | 0) >> 1] | 0;
        i64toi32_i32$3 = 0;
        $157_1 = i64toi32_i32$4;
        $157$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
        i64toi32_i32$4 = 0;
        $159_1 = i64toi32_i32$3;
        $159$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $157$hi;
        i64toi32_i32$3 = $159$hi;
        i64toi32_i32$3 = __wasm_i64_mul($157_1 | 0, i64toi32_i32$4 | 0, $159_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $49_1 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$3 = __wasm_i64_mul($49_1 | 0, i64toi32_i32$4 | 0, 1e3 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $161$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        $163$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $161$hi;
        $50_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $163$hi;
        i64toi32_i32$3 = __wasm_i64_udiv($50_1 | 0, i64toi32_i32$4 | 0, $12_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$4;
        $12_1 = i64toi32_i32$3;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$3;
        if (!i64toi32_i32$3) {
         break label$27
        }
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$3 = 0;
        $51_1 = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$4 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$3 | 0, 8e3 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $173_1 = i64toi32_i32$4;
        $173$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = -1;
        i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
        $175_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $175$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $173$hi;
        i64toi32_i32$0 = $175$hi;
        i64toi32_i32$0 = __wasm_i64_udiv($173_1 | 0, i64toi32_i32$4 | 0, $175_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $12_1 = i64toi32_i32$0;
        HEAP32[($5_1 + 16 | 0) >> 2] = i64toi32_i32$0;
        if (!i64toi32_i32$0) {
         break label$27
        }
        HEAP16[($11_1 + 26 | 0) >> 1] = ($12_1 >>> 0) / (1e3 >>> 0) | 0;
       }
       label$28 : {
        $12_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($12_1) {
         break label$28
        }
        $12_1 = Math_imul(HEAPU16[($11_1 + 26 | 0) >> 1] | 0, 1e3);
        HEAP32[($5_1 + 16 | 0) >> 2] = $12_1;
       }
       label$29 : {
        if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
         break label$29
        }
        if (!$12_1) {
         break label$29
        }
        if ($60($1_1 | 0, $4_1 + 48 | 0 | 0, $4_1 + 40 | 0 | 0) | 0) {
         break label$29
        }
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$4;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$0;
        $16$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$3 = $15_1;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$5 = $16_1;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
         $45_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0) {
           $46_1 = 0
          } else {
           $46_1 = 1
          }
          $47_1 = $46_1;
         } else {
          $47_1 = 0
         }
         $45_1 = $47_1;
        }
        if ($45_1) {
         break label$29
        }
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$5 = $15_1;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$0 = $16_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, 8e3 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $214_1 = i64toi32_i32$5;
        $214$hi = i64toi32_i32$1;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
        i64toi32_i32$5 = 0;
        $216_1 = i64toi32_i32$1;
        $216$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $214$hi;
        i64toi32_i32$1 = $216$hi;
        i64toi32_i32$1 = __wasm_i64_sdiv($214_1 | 0, i64toi32_i32$5 | 0, $216_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$1;
       }
       $215($5_1 | 0, $11_1 | 0);
       $8_1 = 0;
       break label$8;
      }
      $815($5_1 | 0);
     }
     $5_1 = 0;
    }
    FUNCTION_TABLE[$6_1](HEAP32[($0_1 + 12 | 0) >> 2] | 0);
    $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    label$30 : {
     if (!$8_1) {
      break label$30
     }
     $735($8_1 | 0);
    }
    label$31 : {
     $14_1 = $4_1 + 80 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return $5_1 | 0;
   }
   $859(31328 | 0, 31228 | 0, 791 | 0);
   abort();
  }
  $859(31335 | 0, 31228 | 0, 795 | 0);
  abort();
 }
 
 function $382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $12$hi = 0, i64toi32_i32$3 = 0, $12_1 = 0, $11_1 = 0, $10_1 = 0, $36_1 = 0, $39$hi = 0, $49_1 = 0, $51$hi = 0, $55$hi = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  $763($3_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  $1_1 = $756($1_1 | 0) | 0;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = -1;
  HEAP32[($3_1 + 24 | 0) >> 2] = -1;
  HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  $36_1 = $3_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = i64toi32_i32$2 + $1_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $1_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $36_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
  $1_1 = 0;
  label$3 : {
   if (!($385($3_1 | 0, 16 | 0) | 0)) {
    break label$3
   }
   if (!($187($3_1 | 0, $3_1 + 80 | 0 | 0) | 0)) {
    break label$3
   }
   $49_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
   $51$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $55$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $51$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $55$hi;
   i64toi32_i32$3 = (HEAP32[($3_1 + 84 | 0) >> 2] | 0) + 10 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $49_1;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$4;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$4;
   label$4 : {
    if (!(HEAPU8[($3_1 + 89 | 0) >> 0] | 0)) {
     break label$4
    }
    if (!($385($3_1 | 0, 16 | 0) | 0)) {
     break label$3
    }
    if (!($188($3_1 | 0, $3_1 + 56 | 0 | 0) | 0)) {
     break label$3
    }
   }
   $2_1 = $383($3_1 + 40 | 0 | 0, 3072 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $1_1 = 4;
   label$5 : {
    $4_1 = HEAP16[($3_1 + 80 | 0) >> 1] | 0;
    if ($4_1 >>> 0 > 3 >>> 0) {
     break label$5
    }
    $1_1 = HEAP32[(($4_1 << 2 | 0) + 33444 | 0) >> 2] | 0;
   }
   HEAP32[($2_1 + 40 | 0) >> 2] = $1_1;
   label$6 : {
    if (!($385($3_1 | 0, 10 | 0) | 0)) {
     break label$6
    }
    $4_1 = $2_1 + 52 | 0;
    $5_1 = $2_1 + 44 | 0;
    $6_1 = $2_1 + 60 | 0;
    $7_1 = $2_1 + 68 | 0;
    $8_1 = $2_1 + 76 | 0;
    $9_1 = $2_1 + 100 | 0;
    label$7 : while (1) {
     if (!($189($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0) | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              $1_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
              if (($1_1 | 0) > (1413697357 | 0)) {
               break label$16
              }
              if (!$1_1) {
               break label$14
              }
              if (($1_1 | 0) == (1129270605 | 0)) {
               break label$9
              }
              if (($1_1 | 0) != (1413565506 | 0)) {
               break label$15
              }
              $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $6_1 | 0);
              break label$8;
             }
             label$17 : {
              if (($1_1 | 0) > (1414091825 | 0)) {
               break label$17
              }
              if (($1_1 | 0) == (1413697358 | 0)) {
               break label$10
              }
              if (($1_1 | 0) != (1413762898 | 0)) {
               break label$15
              }
              $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $7_1 | 0);
              break label$8;
             }
             if (($1_1 | 0) == (1414091826 | 0)) {
              break label$11
             }
             if (($1_1 | 0) == (1414546737 | 0)) {
              break label$12
             }
            }
            $1_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
            break label$13;
           }
           $1_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
           if (!$1_1) {
            break label$6
           }
          }
          $387($3_1 | 0, $1_1 | 0);
          break label$8;
         }
         $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $4_1 | 0);
         break label$8;
        }
        $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $5_1 | 0);
        break label$8;
       }
       $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $8_1 | 0);
       break label$8;
      }
      $386($3_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, $3_1 + 40 | 0 | 0, $9_1 | 0);
     }
     if ($385($3_1 | 0, 10 | 0) | 0) {
      continue label$7
     }
     break label$7;
    };
   }
   $1_1 = $2_1;
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$18 : {
   $11_1 = $3_1 + 96 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $1_1 | 0;
 }
 
 function $383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   $2_1 = $1_1 + 112 | 0;
   $3_1 = $813($2_1 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  $822($3_1 | 0, 0 | 0, $2_1 | 0) | 0;
  $214($3_1 | 0, 1 | 0);
  HEAP16[($3_1 + 108 | 0) >> 1] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 5;
  $388($3_1 | 0, $3_1 + 44 | 0 | 0);
  $388($3_1 | 0, $3_1 + 52 | 0 | 0);
  $388($3_1 | 0, $3_1 + 60 | 0 | 0);
  $388($3_1 | 0, $3_1 + 68 | 0 | 0);
  $388($3_1 | 0, $3_1 + 100 | 0 | 0);
  label$2 : {
   if (!$0_1) {
    break label$2
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = 2;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1 + 110 | 0;
  }
  return $3_1 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $1_1 = global$0 - 112 | 0;
   $13_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $2_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 80 | 0) >> 2] = $0_1;
   $827(31648 | 0, $1_1 + 80 | 0 | 0);
  }
  label$4 : {
   if (($782($0_1 | 0) | 0 | 0) != (5521735 | 0)) {
    break label$4
   }
   $3_1 = $383($1_1 + 96 | 0 | 0, 128 | 0) | 0;
   if (!$3_1) {
    break label$4
   }
   $389($3_1 + 44 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 52 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 60 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 30 | 0);
   $389($3_1 + 68 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 4 | 0);
   $389($3_1 + 100 | 0 | 0, $1_1 + 96 | 0 | 0, $0_1 | 0, 4 | 0);
   $4_1 = $772($0_1 | 0) | 0;
   label$5 : {
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$5
    }
    $815($3_1 | 0);
    break label$4;
   }
   label$6 : {
    label$7 : {
     if ($4_1 >>> 0 > 125 >>> 0) {
      break label$7
     }
     $0_1 = HEAP32[(($4_1 << 2 | 0) + 31680 | 0) >> 2] | 0;
     break label$6;
    }
    $0_1 = 32184;
   }
   HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
   $0_1 = $390($0_1 | 0) | 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = 1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
   label$8 : {
    if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$8
    }
    if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    $0_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    $2_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    $4_1 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
    $5_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
    $6_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
    $7_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    $8_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
    $9_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
    $10_1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
    $11_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
    $12_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 76 | 0) >> 2] | 0;
    HEAP32[($1_1 + 64 | 0) >> 2] = $12_1 ? 32267 : 32266;
    HEAP32[($1_1 + 60 | 0) >> 2] = $12_1 ? 32295 : 32266;
    HEAP32[($1_1 + 56 | 0) >> 2] = $11_1;
    HEAP32[($1_1 + 44 | 0) >> 2] = $10_1;
    HEAP32[($1_1 + 32 | 0) >> 2] = $9_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = $8_1;
    HEAP32[($1_1 + 52 | 0) >> 2] = $6_1 ? 32267 : 32266;
    HEAP32[($1_1 + 48 | 0) >> 2] = $6_1 ? 32287 : 32266;
    HEAP32[($1_1 + 40 | 0) >> 2] = $5_1 ? 32267 : 32266;
    HEAP32[($1_1 + 36 | 0) >> 2] = $5_1 ? 32282 : 32266;
    HEAP32[($1_1 + 28 | 0) >> 2] = $4_1 ? 32267 : 32266;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 ? 32276 : 32266;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1 ? 32267 : 32266;
    HEAP32[($1_1 + 8 | 0) >> 2] = $7_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $2_1 ? 32269 : 32266;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 ? 32267 : 32266;
    HEAP32[$1_1 >> 2] = $0_1 ? 32260 : 32266;
    $827(32192 | 0, $1_1 | 0);
   }
   $2_1 = $3_1;
  }
  label$9 : {
   $14_1 = $1_1 + 112 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $2_1 | 0;
 }
 
 function $385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $3_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, i64toi32_i32$6 = 0, $10_1 = 0, $5_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $80_1 = 0, $82$hi = 0, $84$hi = 0, $119_1 = 0, $119$hi = 0, $121_1 = 0, $121$hi = 0, $134_1 = 0, $134$hi = 0, $136_1 = 0, $136$hi = 0, $143_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $745($3_1 | 0, $0_1 | 0);
  $4_1 = $740($3_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 44 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $9$hi;
   HEAP32[($2_1 + 36 | 0) >> 2] = $9_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$2;
   $827(31368 | 0, $2_1 + 32 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $9_1 = i64toi32_i32$0;
       $9$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $32_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $33_1 = 0
         } else {
          $33_1 = 1
         }
         $34_1 = $33_1;
        } else {
         $34_1 = 0
        }
        $32_1 = $34_1;
       }
       if ($32_1) {
        break label$8
       }
       i64toi32_i32$3 = $0_1;
       i64toi32_i32$2 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = $9$hi;
       i64toi32_i32$0 = $9_1;
       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
        $35_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          $36_1 = 0
         } else {
          $36_1 = 1
         }
         $37_1 = $36_1;
        } else {
         $37_1 = 0
        }
        $35_1 = $37_1;
       }
       if ($35_1) {
        break label$7
       }
      }
      $5_1 = 1;
      if ($4_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$9 : while (1) {
       label$10 : {
        if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$10
        }
        if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$0 = $0_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
        $9_1 = i64toi32_i32$3;
        $9$hi = i64toi32_i32$1;
        HEAP32[($2_1 + 8 | 0) >> 2] = 8192;
        HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[$2_1 >> 2] = i64toi32_i32$0;
        $827(31411 | 0, $2_1 | 0);
       }
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
       $4_1 = $50(HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, 8192 | 0, $2_1 + 64 | 0 | 0) | 0;
       if (!$4_1) {
        break label$6
       }
       $6_1 = $756($4_1 | 0) | 0;
       $80_1 = $0_1;
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
       $82$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $84$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $82$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = $84$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = $80_1;
       HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$5;
       $744($3_1 | 0, $4_1 | 0);
       $735($4_1 | 0);
       if (($740($3_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
        continue label$9
       }
       break label$5;
      };
     }
     $5_1 = 1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$0 = $9_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $40_1 = $39_1;
      } else {
       $40_1 = 0
      }
      $38_1 = $40_1;
     }
     if ($38_1) {
      break label$4
     }
     label$11 : {
      if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$11
      }
      if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$2;
      $9$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$2;
      HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $9$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$5 = $9_1;
      i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$3;
      $827(31479 | 0, $2_1 + 16 | 0 | 0);
     }
     label$12 : {
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $119_1 = i64toi32_i32$4;
      $119$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
      $121_1 = i64toi32_i32$0;
      $121$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $119$hi;
      i64toi32_i32$2 = $119_1;
      i64toi32_i32$0 = $121$hi;
      i64toi32_i32$5 = $121_1;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
      if ($4_1 >>> 0 <= i64toi32_i32$1 >>> 0) {
       break label$12
      }
      $763($0_1 | 0, $3_1 | 0);
      $763($2_1 + 64 | 0 | 0, $3_1 | 0);
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$3 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$3;
      $134$hi = i64toi32_i32$2;
      i64toi32_i32$4 = $0_1;
      i64toi32_i32$2 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $136_1 = i64toi32_i32$2;
      $136$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $134$hi;
      i64toi32_i32$4 = $134_1;
      i64toi32_i32$2 = $136$hi;
      i64toi32_i32$5 = $136_1;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $766($2_1 + 64 | 0 | 0, $4_1 + i64toi32_i32$0 | 0 | 0) | 0;
      i64toi32_i32$3 = $0_1;
      i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $143_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $143_1;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$4;
      $4_1 = $753($3_1 | 0, i64toi32_i32$1 | 0, $2_1 + 64 | 0 | 0, 0 | 0, 0 | 0) | 0;
      $738($3_1 | 0);
      if (!$4_1) {
       break label$5
      }
      $744($3_1 | 0, $4_1 | 0);
      $735($4_1 | 0);
      break label$5;
     }
     $738($3_1 | 0);
     break label$5;
    }
    $738($3_1 | 0);
    $5_1 = 0;
   }
   $763($0_1 | 0, $3_1 | 0);
   label$13 : {
    $8_1 = $2_1 + 80 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return $5_1 | 0;
  }
  $859(31456 | 0, 31228 | 0, 460 | 0);
  abort();
 }
 
 function $386($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) {
      break label$5
     }
     if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
      break label$4
     }
    }
    label$6 : {
     if (!($834(62056 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[$5_1 >> 2] = $0_1;
     $827(31525 | 0, $5_1 | 0);
    }
    $387($0_1 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
    break label$3;
   }
   $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   label$7 : {
    if ((HEAP32[$3_1 >> 2] | 0) >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $387($0_1 | 0, $6_1 | 0);
    break label$3;
   }
   if (!($385($0_1 | 0, $6_1 | 0) | 0)) {
    break label$3
   }
   if (!($190($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0)) {
    break label$3
   }
   $7_1 = $754($0_1 | 0) | 0;
   $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if ($8_1 >>> 0 <= $7_1 >>> 0) {
    break label$3
   }
   $9_1 = HEAP32[$3_1 >> 2] | 0;
   $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + $9_1 | 0;
   HEAP32[$4_1 >> 2] = $6_1;
   $7_1 = $8_1 - $7_1 | 0;
   label$8 : {
    label$9 : {
     if (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) {
      break label$9
     }
     if (!(HEAPU8[($2_1 + 14 | 0) >> 0] | 0)) {
      break label$8
     }
    }
    $772($0_1 | 0) | 0;
    label$10 : {
     if ($7_1 >>> 0 < 2 >>> 0) {
      break label$10
     }
     $2_1 = 0;
     label$11 : while (1) {
      HEAP8[$6_1 >> 0] = $2_1;
      label$12 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) < (1 | 0)) {
        break label$12
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
       HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
       break label$10;
      }
      if (($764($0_1 | 0) | 0 | 0) != (-1 | 0)) {
       break label$10
      }
      $2_1 = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
      HEAP32[$3_1 >> 2] = $2_1;
      $6_1 = $6_1 + 1 | 0;
      label$13 : {
       if ($2_1 >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 - (HEAP32[$4_1 >> 2] | 0) | 0;
       $766($0_1 | 0, $7_1 | 0) | 0;
       break label$3;
      }
      $2_1 = 255;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1 >>> 0 > 1 >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = ($6_1 - (HEAP32[$4_1 >> 2] | 0) | 0) + 1 | 0;
    break label$3;
   }
   label$14 : {
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($9_1 + $7_1 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$14
    }
    $768($0_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
    break label$3;
   }
   $1_1 = $2_1 - $9_1 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $2_1;
   $768($0_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
   $766($0_1 | 0, ((HEAP32[$3_1 >> 2] | 0) + $7_1 | 0) - (HEAP32[($3_1 + 4 | 0) >> 2] | 0) | 0 | 0) | 0;
  }
  label$15 : {
   $11_1 = $5_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $6$hi = 0, $44_1 = 0, $46$hi = 0, $50$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = $766($0_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62056 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62056 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $6$hi;
   HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(31605 | 0, $2_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (($3_1 | 0) != ($1_1 | 0)) {
     break label$5
    }
    $745(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $0_1 | 0);
    break label$4;
   }
   $44_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $46$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $50$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $46$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $50$hi;
   i64toi32_i32$3 = $1_1 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $44_1;
   HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$5;
   $738(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
   $763($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  HEAP32[$1_1 >> 2] = $0_1 + 108 | 0;
 }
 
 function $389($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = $4_1;
  label$1 : {
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (($5_1 | 0) != ($6_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!($834(62056 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$2
    }
    $827(32301 | 0, 0 | 0);
   }
   $766($2_1 | 0, $3_1 | 0) | 0;
   return;
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   $7_1 = ($6_1 + $4_1 | 0) + -1 | 0;
   $4_1 = $4_1 + $5_1 | 0;
   $6_1 = 0;
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
       $5_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$6;
      }
      $5_1 = $764($2_1 | 0) | 0;
      if (($5_1 | 0) == (-1 | 0)) {
       break label$4
      }
     }
     label$8 : {
      if ($4_1 >>> 0 >= $7_1 >>> 0) {
       break label$8
      }
      HEAP8[$4_1 >> 0] = $5_1;
      $6_1 = $5_1 & -33 | 0 ? $4_1 : $6_1;
      $4_1 = $4_1 + 1 | 0;
     }
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   if (!$6_1) {
    break label$3
   }
   HEAP8[($6_1 + 1 | 0) >> 0] = 0;
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $4_1 = $2_1 + (HEAP32[$1_1 >> 2] | 0) | 0;
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = ($6_1 + 1 | 0) - $4_1 | 0;
   HEAP32[$1_1 >> 2] = ($6_1 - $2_1 | 0) + 2 | 0;
  }
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 1 | 0;
   if (HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 | 0;
 }
 
 function $391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 121 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 52 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[(($4_1 + 32 | 0) + 16 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 40 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   $827(33553 | 0, $4_1 + 32 | 0 | 0);
  }
  $5_1 = $0_1 + 12 | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = 0;
      label$10 : {
       if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$10
       }
       $8_1 = $6_1;
       label$11 : while (1) {
        label$12 : {
         $7_1 = $8_1;
         $8_1 = HEAP32[$7_1 >> 2] | 0;
         if ($8_1) {
          break label$12
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$7;
        }
        if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$11
        }
        break label$11;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($7_1) {
       break label$7
      }
      break label$8;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $7_1 = $5_1;
    break label$6;
   }
   $6_1 = HEAP32[$7_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$13 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   $827(33604 | 0, $4_1 | 0);
  }
  label$14 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 144 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    $827(33663 | 0, $2_1 + 32 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    $827(33713 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 64 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(33655 | 0, 33475 | 0, 145 | 0);
  abort();
 }
 
 function $393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 376 | 0);
  }
  i64toi32_i32$2 = $0_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $2_1 = 0;
  $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  label$3 : {
   $3_1 = $394($0_1 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
  label$4 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($0_1 >>> 0 > 3 >>> 0) {
    break label$4
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[(($0_1 << 2 | 0) + 34980 | 0) >> 2] | 0;
  }
 }
 
 function $394($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 ? (($1_1 << 5 | 0) + ($0_1 + 48 | 0) | 0) + -24 | 0 : 0) | 0;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(33798 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 409 | 0);
  }
  $822($0_1 + 16 | 0 | 0, 0 | 0, 32 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  label$6 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(33816 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $396($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0, $18$hi = 0, $18_1 = 0, $7_1 = 0, $19$hi = 0, $19_1 = 0, i64toi32_i32$6 = 0, $6_1 = 0, $20$hi = 0, $21$hi = 0, $4_1 = 0, $20_1 = 0, $21_1 = 0, $5_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $10_1 = 0, $17_1 = 0, $16_1 = 0, $38_1 = 0, $38$hi = 0, $42_1 = 0, $42$hi = 0, $43$hi = 0, $54_1 = 0, $62_1 = 0, $62$hi = 0, $74_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $237_1 = 0, $240_1 = 0, $240$hi = 0;
  label$1 : {
   $2_1 = global$0 - 160 | 0;
   $16_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 424 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       i64toi32_i32$2 = $0_1 + 24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $38_1 = i64toi32_i32$0;
       $38$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $42_1 = i64toi32_i32$0;
       $42$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $38$hi;
       i64toi32_i32$2 = $38_1;
       i64toi32_i32$0 = $42$hi;
       i64toi32_i32$3 = $42_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $43$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$5 = $43$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$3 = $1_1;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$9
       }
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$8
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[$2_1 >> 2] = $0_1;
       i64toi32_i32$1 = $1$hi;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       $54_1 = $2_1;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 32;
       i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $46_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
       }
       HEAP32[($54_1 + 4 | 0) >> 2] = $46_1;
       $827(33834 | 0, $2_1 | 0);
       break label$8;
      }
      $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
      $62_1 = i64toi32_i32$5;
      $62$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$5 = $62$hi;
      i64toi32_i32$2 = $62_1;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      label$10 : {
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       i64toi32_i32$4 = $18$hi;
       HEAP32[($2_1 + 156 | 0) >> 2] = $18_1;
       HEAP32[($2_1 + 144 | 0) >> 2] = $0_1;
       i64toi32_i32$4 = $1$hi;
       HEAP32[($2_1 + 152 | 0) >> 2] = $1_1;
       $74_1 = $2_1;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 32;
       i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $47_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
        $47_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
       }
       HEAP32[($74_1 + 148 | 0) >> 2] = $47_1;
       $827(33870 | 0, $2_1 + 144 | 0 | 0);
      }
      label$11 : {
       label$12 : {
        label$13 : {
         i64toi32_i32$1 = $18$hi;
         i64toi32_i32$4 = $18_1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$2 = 1;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $48_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $49_1 = 0
           } else {
            $49_1 = 1
           }
           $50_1 = $49_1;
          } else {
           $50_1 = 0
          }
          $48_1 = $50_1;
         }
         if ($48_1) {
          break label$13
         }
         $3_1 = $394($0_1 | 0) | 0;
         if (!$3_1) {
          break label$12
         }
         $4_1 = $2_1 + 44 | 0;
         $5_1 = $2_1 + 36 | 0;
         label$14 : while (1) {
          label$15 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$15
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
           $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $19_1 = i64toi32_i32$4;
           $19$hi = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $18$hi;
           HEAP32[$4_1 >> 2] = $18_1;
           i64toi32_i32$4 = $20$hi;
           HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$4 = $19$hi;
           HEAP32[$5_1 >> 2] = $19_1;
           HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $7_1 & 255 | 0;
           HEAP32[($2_1 + 20 | 0) >> 2] = $7_1 >>> 24 | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 + -1 | 0;
           HEAP32[($2_1 + 28 | 0) >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
           HEAP32[($2_1 + 24 | 0) >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
           $827(33905 | 0, $2_1 + 16 | 0 | 0);
          }
          label$16 : {
           i64toi32_i32$4 = $18$hi;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
           $19_1 = i64toi32_i32$4;
           $19$hi = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$4;
           i64toi32_i32$4 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
           $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
           $20$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $18$hi;
           i64toi32_i32$1 = $18_1;
           i64toi32_i32$2 = $20$hi;
           i64toi32_i32$3 = $20_1;
           if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$16
           }
           i64toi32_i32$1 = $18$hi;
           $397($0_1 | 0, $18_1 | 0) | 0;
           break label$12;
          }
          i64toi32_i32$1 = $19$hi;
          $3_1 = $19_1;
          if ($397($0_1 | 0, $3_1 | 0) | 0) {
           break label$7
          }
          $398($0_1 | 0, $3_1 | 0);
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $20$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$4 = $20$hi;
          i64toi32_i32$2 = $20_1;
          i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
          i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
          i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
          $18_1 = i64toi32_i32$5;
          $18$hi = i64toi32_i32$0;
          $3_1 = $394($0_1 | 0) | 0;
          if ($3_1) {
           continue label$14
          }
          break label$14;
         };
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$1 = $18_1;
         i64toi32_i32$3 = -1;
         i64toi32_i32$2 = -1;
         if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
          $51_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
            $52_1 = 0
           } else {
            $52_1 = 1
           }
           $53_1 = $52_1;
          } else {
           $53_1 = 0
          }
          $51_1 = $53_1;
         }
         if ($51_1) {
          break label$12
         }
         $859(33971 | 0, 33475 | 0, 453 | 0);
         abort();
        }
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $55_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $56_1 = 0
          } else {
           $56_1 = 1
          }
          $57_1 = $56_1;
         } else {
          $57_1 = 0
         }
         $55_1 = $57_1;
        }
        if ($55_1) {
         break label$11
        }
        $3_1 = $394($0_1 | 0) | 0;
        if (!$3_1) {
         break label$12
        }
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = $18$hi;
        i64toi32_i32$0 = $18_1;
        i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        $21_1 = i64toi32_i32$4;
        $21$hi = i64toi32_i32$5;
        $8_1 = ($2_1 + 112 | 0) + 28 | 0;
        $9_1 = ($2_1 + 112 | 0) + 20 | 0;
        $10_1 = $0_1 + 56 | 0;
        $11_1 = $2_1 + 96 | 0;
        $12_1 = $2_1 + 92 | 0;
        $13_1 = $2_1 + 88 | 0;
        $14_1 = $2_1 + 84 | 0;
        $15_1 = $2_1 + 80 | 0;
        label$17 : while (1) {
         label$18 : {
          if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$18
          }
          if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$18
          }
          $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
          $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$5;
          $18$hi = i64toi32_i32$3;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $21$hi;
          HEAP32[$8_1 >> 2] = $21_1;
          i64toi32_i32$5 = $19$hi;
          HEAP32[(($2_1 + 112 | 0) + 24 | 0) >> 2] = i64toi32_i32$3;
          i64toi32_i32$5 = $18$hi;
          HEAP32[$9_1 >> 2] = $18_1;
          HEAP32[(($2_1 + 112 | 0) + 16 | 0) >> 2] = $7_1 & 255 | 0;
          HEAP32[($2_1 + 116 | 0) >> 2] = $7_1 >>> 24 | 0;
          HEAP32[($2_1 + 112 | 0) >> 2] = $6_1 + -1 | 0;
          HEAP32[($2_1 + 124 | 0) >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
          HEAP32[($2_1 + 120 | 0) >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
          $827(33905 | 0, $2_1 + 112 | 0 | 0);
         }
         i64toi32_i32$2 = $3_1;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$3;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $19$hi;
         i64toi32_i32$2 = $19_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$0 = $18_1;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
          break label$6
         }
         label$19 : {
          i64toi32_i32$2 = $21$hi;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$5 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
          i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
          i64toi32_i32$2 = i64toi32_i32$1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
          $19_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          $19$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $21$hi;
          i64toi32_i32$4 = $21_1;
          i64toi32_i32$2 = $19$hi;
          i64toi32_i32$3 = $19_1;
          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$19
          }
          $237_1 = $3_1;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$4 = $21$hi;
          i64toi32_i32$3 = $21_1;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = -1;
          i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
          $240_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
          $240$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$4 = $18_1;
          i64toi32_i32$3 = $240$hi;
          i64toi32_i32$2 = $240_1;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          i64toi32_i32$4 = $237_1;
          HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = i64toi32_i32$5;
          HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
          break label$12;
         }
         $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$5
         }
         label$20 : {
          label$21 : {
           if ($3_1 >>> 0 >= 17 >>> 0) {
            break label$21
           }
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$1 = $19$hi;
           i64toi32_i32$1 = $21$hi;
           i64toi32_i32$0 = $21_1;
           i64toi32_i32$4 = $19$hi;
           i64toi32_i32$2 = $19_1;
           i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
           i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
           i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
           $21_1 = i64toi32_i32$3;
           $21$hi = i64toi32_i32$5;
           break label$20;
          }
          $859(34022 | 0, 33475 | 0, 471 | 0);
          abort();
         }
         label$22 : {
          label$23 : while (1) {
           $7_1 = $3_1 + -1 | 0;
           HEAP32[($0_1 + 48 | 0) >> 2] = $7_1;
           if (!$7_1) {
            break label$22
           }
           $3_1 = $3_1 + -2 | 0;
           label$24 : {
            if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $4_1 = $10_1 + ($3_1 << 5 | 0) | 0;
            $6_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
            $5_1 = $10_1 + ($7_1 << 5 | 0) | 0;
            $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
            i64toi32_i32$1 = $4_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
            $18_1 = i64toi32_i32$5;
            $18$hi = i64toi32_i32$0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            $19_1 = i64toi32_i32$0;
            $19$hi = i64toi32_i32$5;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
            $20_1 = i64toi32_i32$5;
            $20$hi = i64toi32_i32$0;
            $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
            i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
            HEAP32[$11_1 >> 2] = i64toi32_i32$0;
            i64toi32_i32$5 = $20$hi;
            HEAP32[$12_1 >> 2] = $20_1;
            i64toi32_i32$5 = $19$hi;
            HEAP32[(($2_1 + 48 | 0) + 24 | 0) >> 2] = $19_1;
            i64toi32_i32$5 = $18$hi;
            HEAP32[(($2_1 + 48 | 0) + 20 | 0) >> 2] = $18_1;
            HEAP32[$13_1 >> 2] = $7_1 & 255 | 0;
            HEAP32[(($2_1 + 48 | 0) + 28 | 0) >> 2] = $7_1 >>> 24 | 0;
            HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
            HEAP32[$14_1 >> 2] = ($7_1 >>> 8 | 0) & 255 | 0;
            HEAP32[$15_1 >> 2] = ($7_1 >>> 16 | 0) & 255 | 0;
            HEAP32[($2_1 + 48 | 0) >> 2] = $4_1 + -1 | 0;
            HEAP32[($2_1 + 52 | 0) >> 2] = $6_1 >>> 24 | 0;
            HEAP32[($2_1 + 60 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
            HEAP32[($2_1 + 56 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
            $827(34055 | 0, $2_1 + 48 | 0 | 0);
           }
           i64toi32_i32$1 = ($0_1 + ($3_1 << 5 | 0) | 0) + 64 | 0;
           i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           if (!!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
            break label$22
           }
           $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
           if ($3_1) {
            continue label$23
           }
           break label$23;
          };
         }
         $3_1 = $394($0_1 | 0) | 0;
         if ($3_1) {
          continue label$17
         }
         break label$17;
        };
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      }
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $0_1;
      HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $1_1;
      HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$0;
     }
     label$25 : {
      $17_1 = $2_1 + 160 | 0;
      if ($17_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $17_1;
     }
     return 0 | 0;
    }
    $859(33963 | 0, 33475 | 0, 450 | 0);
    abort();
   }
   $859(33979 | 0, 33475 | 0, 461 | 0);
   abort();
  }
  $859(34002 | 0, 33475 | 0, 470 | 0);
  abort();
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $8$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9$hi = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ($3_1 >>> 0 >= 17 >>> 0) {
     break label$3
    }
    $3_1 = $3_1 + -1 | 0;
    label$5 : {
     if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = ($0_1 + 48 | 0) + ($3_1 << 5 | 0) | 0;
     $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     i64toi32_i32$2 = $4_1 + 16 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $8_1 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $5_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $4_1 + -1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $5_1 >>> 24 | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
     $827(34579 | 0, $2_1 | 0);
    }
    label$6 : {
     label$7 : {
      $3_1 = ($0_1 + ($3_1 << 5 | 0) | 0) + 64 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $9_1 = $1_1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$3 = $1_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$7
      }
      $399($0_1 | 0, 34619 | 0, 290 | 0);
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
      $0_1 = 0;
      break label$6;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $8_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $3_1;
     HEAP32[$3_1 >> 2] = $8_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$5;
     $0_1 = $8_1;
    }
    label$8 : {
     $7_1 = $2_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $0_1 | 0;
   }
   $859(34561 | 0, 33475 | 0, 287 | 0);
   abort();
  }
  $859(34022 | 0, 33475 | 0, 288 | 0);
  abort();
 }
 
 function $398($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $15$hi = 0, i64toi32_i32$4 = 0, $15_1 = 0, $16$hi = 0, $10_1 = 0, $11_1 = 0, $16_1 = 0, $14$hi = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $14_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $55_1 = 0, $59_1 = 0, $61$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ($3_1 >>> 0 > 16 >>> 0) {
      break label$5
     }
     i64toi32_i32$0 = 0;
     $14_1 = $1_1;
     $14$hi = i64toi32_i32$0;
     $4_1 = $0_1 + 48 | 0;
     $5_1 = $2_1 + 40 | 0;
     $6_1 = $2_1 + 36 | 0;
     $7_1 = $2_1 + 32 | 0;
     $8_1 = $2_1 + 20 | 0;
     break label$4;
    }
    $859(34022 | 0, 33475 | 0, 235 | 0);
    abort();
   }
   label$6 : {
    label$7 : while (1) {
     $3_1 = $3_1 + -1 | 0;
     HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     $3_1 = $4_1 + ($3_1 << 5 | 0) | 0;
     $400($0_1 | 0, HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0);
     $55_1 = HEAP32[($0_1 + 568 | 0) >> 2] | 0;
     $9_1 = $3_1 + 28 | 0;
     $59_1 = HEAP32[$9_1 >> 2] | 0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $61$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $61$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 576 | 0) >> 2] | 0]($55_1, $59_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
     HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     $3_1 = $3_1 + 8 | 0;
     $1_1 = $1_1 + -1 | 0;
     label$8 : {
      if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $10_1 = $4_1 + ($1_1 << 5 | 0) | 0;
      $11_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
      i64toi32_i32$1 = $10_1 + 16 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$2;
      $10_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      $9_1 = HEAP32[$9_1 >> 2] | 0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      HEAP32[$5_1 >> 2] = i64toi32_i32$2;
      HEAP32[$6_1 >> 2] = $9_1 & 255 | 0;
      HEAP32[$7_1 >> 2] = ($9_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = ($9_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = $9_1 >>> 24 | 0;
      i64toi32_i32$5 = $15$hi;
      HEAP32[$8_1 >> 2] = $15_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $11_1 & 255 | 0;
      HEAP32[$2_1 >> 2] = $10_1 + -1 | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $11_1 >>> 24 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = ($11_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = ($11_1 >>> 16 | 0) & 255 | 0;
      $827(34674 | 0, $2_1 | 0);
     }
     label$9 : {
      label$10 : {
       label$11 : {
        $1_1 = ($0_1 + ($1_1 << 5 | 0) | 0) + 64 | 0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$5;
        $15$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$1 = $15_1;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$3 = $16_1;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$11
        }
        $399($0_1 | 0, 34726 | 0, 248 | 0);
        break label$10;
       }
       i64toi32_i32$1 = $15$hi;
       i64toi32_i32$1 = $16$hi;
       i64toi32_i32$1 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$5 = $16$hi;
       i64toi32_i32$2 = $16_1;
       if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$9
       }
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$6
      }
      continue label$7;
     }
     break label$7;
    };
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$5 = $16_1;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$4 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    i64toi32_i32$2 = $1_1;
    HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
   }
   label$12 : {
    $13_1 = $2_1 + 48 | 0;
    if ($13_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $13_1;
   }
   return;
  }
  $859(34002 | 0, 33475 | 0, 234 | 0);
  abort();
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if (!($835(62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = 33475;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = $0_1;
   $827(34636 | 0, $3_1 | 0);
  }
  label$4 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $400($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $16_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $93_1 = 0, $96_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $16_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $16_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $6_1 = $2_1 & 255 | 0;
     $7_1 = $2_1 >>> 24 | 0;
     $8_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $9_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $10_1 = $5_1 + 36 | 0;
     $11_1 = $5_1 + 32 | 0;
     $12_1 = $5_1 + 28 | 0;
     $13_1 = $5_1 + 20 | 0;
     $14_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($14_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$10_1 >> 2] = $1_1;
       HEAP32[$11_1 >> 2] = $4_1;
       HEAP32[$12_1 >> 2] = $6_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $8_1;
       HEAP32[$13_1 >> 2] = $9_1;
       HEAP32[($5_1 + 16 | 0) >> 2] = $7_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $15_1 & 255 | 0;
       HEAP32[$5_1 >> 2] = $15_1 >>> 24 | 0;
       HEAP32[($5_1 + 8 | 0) >> 2] = ($15_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = ($15_1 >>> 16 | 0) & 255 | 0;
       $827(34917 | 0, $5_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $93_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $93_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $96_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $96_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        if (($766($5_1 + 48 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $15_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $5_1 + 48 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$15_1) {
         break label$3
        }
        $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, $15_1) | 0;
        break label$8;
       }
       $15_1 = FUNCTION_TABLE[HEAP32[($14_1 + 8 | 0) >> 2] | 0]($14_1, $2_1, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($15_1 | 0) == (1 | 0) | 0;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      if ($14_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $17_1 = $5_1 + 64 | 0;
     if ($17_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $17_1;
    }
    return;
   }
   $859(34961 | 0, 33475 | 0, 188 | 0);
   abort();
  }
  $859(34975 | 0, 33475 | 0, 190 | 0);
  abort();
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   $827(34137 | 0, $2_1 + 48 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $3_1 = $813(584 | 0) | 0;
       if ($3_1) {
        break label$8
       }
       if (!($835(62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = 584;
       $827(34168 | 0, $2_1 + 16 | 0 | 0);
       break label$7;
      }
      $845($3_1 | 0, 584 | 0, $3_1 | 0, 33460 | 0);
      HEAP32[($3_1 + 576 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 568 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($3_1 + 572 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      $0_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       $395($3_1 | 0);
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
       HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
       $827(34198 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      $815($3_1 | 0);
     }
     $3_1 = 0;
     if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     $3_1 = 0;
     if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $3_1 = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(34198 | 0, $2_1 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(34156 | 0, 33475 | 0, 503 | 0);
   abort();
  }
  $859(34160 | 0, 33475 | 0, 504 | 0);
  abort();
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(34156 | 0, 33475 | 0, 554 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 112;
  HEAP32[($0_1 + 4 | 0) >> 2] = 113;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $403($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $404($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  return 0 | 0;
 }
 
 function $405($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 64 | 0) >> 2] = $0_1;
   $827(34222 | 0, $1_1 + 64 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 566 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   $3_1 = $1_1 + 36 | 0;
   label$7 : while (1) {
    label$8 : {
     if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 52 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
     $827(34242 | 0, $1_1 + 48 | 0 | 0);
    }
    label$9 : {
     if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 & 255 | 0;
     HEAP32[(($1_1 + 16 | 0) + 16 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 >>> 24 | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     $827(34287 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $395($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 584 | 0, $0_1 | 0, 0 | 0);
  label$10 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(34339 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$11 : {
   $6_1 = $1_1 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $9$hi = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $3_1 = 0, $10_1 = 0, $8_1 = 0, $7_1 = 0, $112$hi = 0, $156$hi = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (33460 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 584 | 0, $0_1 | 0, 33460 | 0, 33475 | 0, 588 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 84 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 88 | 0) >> 2] = $5_1 + $4_1 | 0;
   $827(34359 | 0, $2_1 + 80 | 0 | 0);
  }
  HEAP8[($0_1 + 40 | 0) >> 0] = 0;
  label$6 : {
   $4_1 = $798($1_1 | 0) | 0;
   if (!$4_1) {
    break label$6
   }
   label$7 : {
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$7
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($2_1 + 72 | 0) >> 2] = $756($4_1 | 0) | 0;
    HEAP32[($2_1 + 68 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
    $827(34387 | 0, $2_1 + 64 | 0 | 0);
   }
   $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 | 0);
   $3_1 = $756($4_1 | 0) | 0;
   $735($4_1 | 0);
  }
  $1_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $763($2_1 + 96 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$8 : {
   label$9 : {
    if ($4_1) {
     break label$9
    }
    if (!$1_1) {
     break label$8
    }
   }
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
         case 0:
          if (!($407($0_1 | 0, $2_1 + 96 | 0 | 0) | 0)) {
           break label$8
          }
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          break label$11;
         case 1:
          $5_1 = $394($0_1 | 0) | 0;
          if (!$5_1) {
           break label$14
          }
          label$19 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $9_1 = i64toi32_i32$0;
           $9$hi = i64toi32_i32$1;
           HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
           HEAP32[$2_1 >> 2] = i64toi32_i32$0;
           $827(34430 | 0, $2_1 | 0);
          }
          i64toi32_i32$1 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $112$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$0 = $112$hi;
          i64toi32_i32$1 = $9$hi;
          i64toi32_i32$3 = $1_1;
          i64toi32_i32$4 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & $10_1 >>> 0 > $1_1 >>> 0 | 0) | 0;
          i64toi32_i32$1 = i64toi32_i32$4 ? $1_1 : $10_1;
          i64toi32_i32$3 = i64toi32_i32$4 ? $9$hi : i64toi32_i32$0;
          $1_1 = i64toi32_i32$1;
          $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          label$20 : {
           if (!($397($0_1 | 0, $1_1 | 0) | 0)) {
            break label$20
           }
           $408($0_1 | 0, $2_1 + 96 | 0 | 0);
           break label$8;
          }
          $398($0_1 | 0, $1_1 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          $1_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          if ($1_1) {
           break label$8
          }
          break label$11;
         case 2:
          $5_1 = $394($0_1 | 0) | 0;
          if (!$5_1) {
           break label$13
          }
          label$21 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$21
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$21
           }
           i64toi32_i32$4 = $5_1;
           i64toi32_i32$3 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           $9_1 = i64toi32_i32$3;
           $9$hi = i64toi32_i32$1;
           HEAP32[($2_1 + 52 | 0) >> 2] = $1_1;
           HEAP32[($2_1 + 48 | 0) >> 2] = i64toi32_i32$3;
           $827(34462 | 0, $2_1 + 48 | 0 | 0);
          }
          i64toi32_i32$4 = $5_1;
          i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
          $9_1 = i64toi32_i32$1;
          $9$hi = i64toi32_i32$3;
          i64toi32_i32$3 = 0;
          $156$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $9$hi;
          i64toi32_i32$4 = i64toi32_i32$1;
          i64toi32_i32$1 = $156$hi;
          if ($9$hi >>> 0 > i64toi32_i32$1 >>> 0 | (($9$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > $1_1 >>> 0 | 0) | 0) {
           break label$8
          }
          i64toi32_i32$4 = $9$hi;
          i64toi32_i32$4 = $9$hi;
          $1_1 = $9_1;
          label$22 : {
           if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$22
           }
           if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$22
           }
           $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
           HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $1_1;
           HEAP32[($2_1 + 28 | 0) >> 2] = $6_1 & 255 | 0;
           HEAP32[($2_1 + 16 | 0) >> 2] = $6_1 >>> 24 | 0;
           HEAP32[($2_1 + 24 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
           HEAP32[($2_1 + 20 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
           $827(34494 | 0, $2_1 + 16 | 0 | 0);
          }
          if ($397($0_1 | 0, $1_1 | 0) | 0) {
           break label$12
          }
          $400($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, $1_1 | 0);
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
          label$23 : {
           $6_1 = $409($0_1 | 0) | 0;
           if (!$6_1) {
            break label$23
           }
           $6_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
           if (!$6_1) {
            break label$23
           }
           $400($0_1 | 0, $6_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, $1_1 | 0);
          }
          $398($0_1 | 0, $1_1 | 0);
          $5_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
          $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
          $408($0_1 | 0, $2_1 + 96 | 0 | 0);
          HEAP32[($0_1 + 16 | 0) >> 2] = 0;
          if (!$5_1) {
           break label$11
          }
          break label$8;
         case 3:
          break label$15;
         default:
          break label$8;
         };
        }
        $766($2_1 + 96 | 0 | 0, $1_1 | 0) | 0;
        $408($0_1 | 0, $2_1 + 96 | 0 | 0);
        break label$8;
       }
       $859(34426 | 0, 33475 | 0, 623 | 0);
       abort();
      }
      $859(34426 | 0, 33475 | 0, 636 | 0);
      abort();
     }
     $859(34541 | 0, 33475 | 0, 645 | 0);
     abort();
    }
    $1_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    $763($2_1 + 96 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    if ($4_1) {
     continue label$10
    }
    if ($1_1) {
     continue label$10
    }
    break label$10;
   };
  }
  label$24 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $84$hi = 0, $86$hi = 0;
  label$1 : {
   $2_1 = global$0 - 144 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($2_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 140 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $3_1 = $427($1_1 | 0, $2_1 + 120 | 0 | 0) | 0;
       if (!$3_1) {
        break label$7
       }
       label$8 : {
        if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
        HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = i64toi32_i32$0;
        $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
        HEAP32[($2_1 + 96 | 0) >> 2] = $1_1 >>> 24 | 0;
        HEAP32[($2_1 + 108 | 0) >> 2] = $1_1 & 255 | 0;
        HEAP32[($2_1 + 100 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($2_1 + 104 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
        $827(34750 | 0, $2_1 + 96 | 0 | 0);
       }
       $1_1 = $410($0_1 | 0, HEAP32[($2_1 + 128 | 0) >> 2] | 0 | 0) | 0;
       $4_1 = $394($0_1 | 0) | 0;
       label$9 : {
        if (!($411($0_1 | 0, $2_1 + 120 | 0 | 0, $3_1 | 0, $1_1 | 0) | 0)) {
         break label$9
        }
        label$10 : {
         label$11 : {
          $5_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
          if (($5_1 | 0) > (1836475767 | 0)) {
           break label$11
          }
          if (($5_1 | 0) == (1835297121 | 0)) {
           break label$10
          }
          if (($5_1 | 0) == (1835626086 | 0)) {
           break label$10
          }
          if (($5_1 | 0) == (1836019574 | 0)) {
           break label$10
          }
          break label$6;
         }
         if (($5_1 | 0) == (1836475768 | 0)) {
          break label$10
         }
         if (($5_1 | 0) == (1953653099 | 0)) {
          break label$10
         }
         if (($5_1 | 0) != (1937007212 | 0)) {
          break label$6
         }
        }
        label$12 : {
         i64toi32_i32$1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($2_1 + 124 | 0) >> 2] | 0;
         $84$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $86$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $84$hi;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = $86$hi;
         if ((i64toi32_i32$2 | 0) == ($3_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
          break label$12
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = 0;
         $1_1 = 1;
         if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$3
         }
         if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$3
         }
         $0_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
         HEAP32[($2_1 + 64 | 0) >> 2] = $0_1 >>> 24 | 0;
         HEAP32[($2_1 + 76 | 0) >> 2] = $0_1 & 255 | 0;
         HEAP32[($2_1 + 68 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 72 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
         $827(34780 | 0, $2_1 + 64 | 0 | 0);
         break label$3;
        }
        label$13 : {
         if (!($834(62072 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$13
         }
         $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
         HEAP32[($2_1 + 48 | 0) >> 2] = $1_1 >>> 24 | 0;
         HEAP32[($2_1 + 60 | 0) >> 2] = $1_1 & 255 | 0;
         HEAP32[($2_1 + 52 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 56 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
         $827(34797 | 0, $2_1 + 48 | 0 | 0);
        }
        HEAP32[($0_1 + 44 | 0) >> 2] = 2;
        break label$5;
       }
       if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$4
       }
       if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$4
       }
       $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
       HEAP32[($2_1 + 80 | 0) >> 2] = $1_1 >>> 24 | 0;
       HEAP32[($2_1 + 92 | 0) >> 2] = $1_1 & 255 | 0;
       HEAP32[($2_1 + 84 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 88 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
       $827(34861 | 0, $2_1 + 80 | 0 | 0);
       break label$4;
      }
      $769($1_1 | 0, $2_1 + 136 | 0 | 0);
      $1_1 = 0;
      break label$3;
     }
     if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     label$14 : {
      if ($1_1) {
       break label$14
      }
      if (!$4_1) {
       break label$5
      }
      if (!(HEAP32[($4_1 + 16 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     label$15 : {
      if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$15
      }
      if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$15
      }
      $3_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
      HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(34833 | 0, $2_1 + 16 | 0 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 2;
     HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     $1_1 = 1;
     break label$3;
    }
    if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $1_1 = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 >>> 24 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1 & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
    $827(34861 | 0, $2_1 | 0);
   }
   $1_1 = 1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  }
  label$16 : {
   $7_1 = $2_1 + 144 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $1_1 | 0;
 }
 
 function $408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $8_1 = 0, $10$hi = 0, $12$hi = 0;
  $2_1 = $754($1_1 | 0) | 0;
  $3_1 = $0_1 + 24 | 0;
  $8_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $8_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $409($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (($1_1 << 5 | 0) + ($0_1 + 48 | 0) | 0) + -56 | 0 : 0) | 0;
 }
 
 function $410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $411($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $14$hi = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $14_1 = 0, $15$hi = 0, $9_1 = 0, $72_1 = 0, $74_1 = 0, $76_1 = 0, $77_1 = 0, $77$hi = 0, $80$hi = 0, $82$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $11_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $5_1 = 0;
  label$3 : {
   $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > 15 >>> 0) {
    break label$3
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$4 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
   i64toi32_i32$1 = 1073741824;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$4 ? 0 : $13_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $13_1 = i64toi32_i32$3;
   $13$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $14_1 = $2_1;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$1 = $2_1;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
    break label$3
   }
   $5_1 = ($0_1 + 48 | 0) + ($6_1 << 5 | 0) | 0;
   $7_1 = $5_1 + 16 | 0;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$1 = $13_1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
   $15$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
   $8_1 = $5_1 + 8 | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = i64toi32_i32$4;
   HEAP32[i64toi32_i32$1 >> 2] = $13_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
   $9_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   $10_1 = $5_1 + 28 | 0;
   HEAP32[$10_1 >> 2] = $9_1;
   $5_1 = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $6_1 + 1 | 0;
   $400($0_1 | 0, $3_1 | 0, 0 | 0, 0 | 0, 0 | 0);
   $72_1 = $0_1 + 44 | 0;
   $74_1 = HEAP32[($0_1 + 568 | 0) >> 2] | 0;
   $76_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$5 = $15$hi;
   $77_1 = i64toi32_i32$0;
   $77$hi = i64toi32_i32$5;
   i64toi32_i32$4 = $0_1 + 24 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $80$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $82$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $77$hi;
   i64toi32_i32$4 = $82$hi;
   $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 572 | 0) >> 2] | 0]($74_1, $76_1, $77_1, i64toi32_i32$0, i64toi32_i32$2, i64toi32_i32$4, $2_1) | 0;
   HEAP32[$72_1 >> 2] = $1_1;
   $2_1 = $0_1 + 40 | 0;
   HEAP8[$2_1 >> 0] = HEAPU8[$2_1 >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
   if ((HEAP8[(0 + 62072 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62072 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $0_1 = HEAP32[$10_1 >> 2] | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$4;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$4 = $13$hi;
   HEAP32[($4_1 + 20 | 0) >> 2] = $13_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $0_1 & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 >>> 24 | 0;
   HEAP32[$4_1 >> 2] = $1_1 + -1 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   $827(34880 | 0, $4_1 | 0);
  }
  label$4 : {
   $12_1 = $4_1 + 32 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $5_1 | 0;
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (!($427($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($0_1 | 0) > (1836019557 | 0)) {
      break label$5
     }
     label$6 : {
      if (($0_1 | 0) > (1835295091 | 0)) {
       break label$6
      }
      if (($0_1 | 0) == (1718773093 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1718909296 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1786080875 | 0)) {
       break label$4
      }
      break label$3;
     }
     label$7 : {
      if (($0_1 | 0) > (1835365472 | 0)) {
       break label$7
      }
      if (($0_1 | 0) == (1835295092 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1835361135 | 0)) {
       break label$4
      }
      break label$3;
     }
     if (($0_1 | 0) == (1835365473 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1835430497 | 0)) {
      break label$4
     }
     break label$3;
    }
    label$8 : {
     if (($0_1 | 0) > (1886285683 | 0)) {
      break label$8
     }
     label$9 : {
      if (($0_1 | 0) > (1885628781 | 0)) {
       break label$9
      }
      if (($0_1 | 0) == (1836019558 | 0)) {
       break label$4
      }
      if (($0_1 | 0) == (1836019574 | 0)) {
       break label$4
      }
      break label$3;
     }
     if (($0_1 | 0) == (1885628782 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1885954932 | 0)) {
      break label$4
     }
     break label$3;
    }
    label$10 : {
     if (($0_1 | 0) > (1970628963 | 0)) {
      break label$10
     }
     if (($0_1 | 0) == (1886285684 | 0)) {
      break label$4
     }
     if (($0_1 | 0) == (1936419184 | 0)) {
      break label$4
     }
     break label$3;
    }
    if (($0_1 | 0) == (2003395685 | 0)) {
     break label$4
    }
    if (($0_1 | 0) != (1970628964 | 0)) {
     break label$3
    }
   }
   $2_1 = 1;
  }
  label$11 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(176 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 176;
    $827(35056 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 176 | 0, $2_1 | 0, 34996 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 72 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 172 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 156 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 140 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 124 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 108 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 92 | 0) >> 2] = $2_1;
   $402($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 20 | 0) >> 2] = 114;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $401($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $391($0_1 | 0, $2_1 + 80 | 0 | 0, 1718909296 | 0, 115 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 96 | 0 | 0, 1836019574 | 0, 116 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 112 | 0 | 0, 1953653099 | 0, 117 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 128 | 0 | 0, 1835297121 | 0, 118 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 144 | 0 | 0, 1835626086 | 0, 119 | 0);
    $391(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 160 | 0 | 0, 1937007212 | 0, 120 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $414($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $137_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $3$hi;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $1_1 & 255 | 0;
   HEAP32[$5_1 >> 2] = $0_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $1_1 >>> 24 | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
   $827(35208 | 0, $5_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 297 | 0);
  }
  $6_1 = 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          if (($1_1 | 0) > (1919775328 | 0)) {
           break label$13
          }
          label$14 : {
           if (($1_1 | 0) > (1836019557 | 0)) {
            break label$14
           }
           if (($1_1 | 0) == (1835295092 | 0)) {
            break label$12
           }
           if (($1_1 | 0) != (1835296868 | 0)) {
            break label$6
           }
           $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           if (!$7_1) {
            break label$6
           }
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$1 = $7_1;
           HEAP32[(i64toi32_i32$1 + 504 | 0) >> 2] = $3_1;
           HEAP32[(i64toi32_i32$1 + 508 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$1 = i64toi32_i32$1 + 512 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $2_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           break label$6;
          }
          label$15 : {
           if (($1_1 | 0) == (1836019558 | 0)) {
            break label$15
           }
           if (($1_1 | 0) == (1836019574 | 0)) {
            break label$11
           }
           if (($1_1 | 0) != (1836475768 | 0)) {
            break label$6
           }
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$0 = $3$hi;
           i64toi32_i32$0 = $2$hi;
           i64toi32_i32$1 = $3$hi;
           $424($0_1 | 0, 72 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
          }
          $7_1 = $425($0_1 | 0) | 0;
          if (!$7_1) {
           break label$7
          }
          $6_1 = 1;
          HEAP8[($7_1 + 121 | 0) >> 0] = 1;
          break label$6;
         }
         label$16 : {
          if (($1_1 | 0) > (1937011577 | 0)) {
           break label$16
          }
          if (($1_1 | 0) == (1919775329 | 0)) {
           break label$10
          }
          if (($1_1 | 0) != (1937011556 | 0)) {
           break label$6
          }
          $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          if (!$7_1) {
           break label$6
          }
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$0 = $7_1;
          HEAP32[(i64toi32_i32$0 + 488 | 0) >> 2] = $3_1;
          HEAP32[(i64toi32_i32$0 + 492 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = $2$hi;
          i64toi32_i32$0 = i64toi32_i32$0 + 496 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $2_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          break label$6;
         }
         if (($1_1 | 0) == (1937011578 | 0)) {
          break label$8
         }
         if (($1_1 | 0) == (1937013298 | 0)) {
          break label$9
         }
         if (($1_1 | 0) != (1970628964 | 0)) {
          break label$6
         }
         i64toi32_i32$1 = $2$hi;
         i64toi32_i32$1 = $3$hi;
         i64toi32_i32$1 = $2$hi;
         i64toi32_i32$0 = $3$hi;
         $424($0_1 | 0, 104 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
         break label$6;
        }
        HEAP8[($0_1 + 32 | 0) >> 0] = 1;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$1 = $3$hi;
        $424($0_1 | 0, 56 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
        break label$6;
       }
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$0 = $3$hi;
       $424($0_1 | 0, 40 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
       break label$6;
      }
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      $424($0_1 | 0, 88 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0);
      break label$6;
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     $68($0_1 + 56 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
     break label$7;
    }
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$1 = $2$hi;
    $68($0_1 + 40 | 0 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0);
   }
   $6_1 = 1;
  }
  label$17 : {
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1024;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $2_1 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$17
   }
   $7_1 = 0;
   label$18 : {
    label$19 : while (1) {
     if ((HEAP32[(($7_1 << 2 | 0) + 35120 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$18
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) == (22 | 0)) {
      break label$17
     }
     continue label$19;
    };
   }
   $137_1 = $0_1;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$4 = $3_1 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = $3$hi + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$3 = $137_1;
   HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$5;
   $6_1 = 1;
  }
  label$20 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $415($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $10_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(35420 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 183 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1718909296 | 0)) {
    break label$8
   }
   label$9 : {
    if (!$2_1) {
     break label$9
    }
    if (!($430($2_1 | 0, $3_1 + 48 | 0 | 0) | 0)) {
     break label$8
    }
    $0_1 = $425($4_1 | 0) | 0;
    if (!$0_1) {
     break label$8
    }
    $1_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    $5_1 = 0;
    HEAP8[($0_1 + 126 | 0) >> 0] = 0;
    HEAP8[($0_1 + 125 | 0) >> 0] = $1_1;
    HEAP8[($0_1 + 124 | 0) >> 0] = $1_1 >>> 8 | 0;
    HEAP8[($0_1 + 123 | 0) >> 0] = $1_1 >>> 16 | 0;
    HEAP8[($0_1 + 122 | 0) >> 0] = $1_1 >>> 24 | 0;
    $6_1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
    label$10 : while (1) {
     $4_1 = 0;
     label$11 : {
      label$12 : {
       label$13 : while (1) {
        if (($1_1 | 0) == (HEAP32[(($4_1 << 2 | 0) + 35392 | 0) >> 2] | 0 | 0)) {
         break label$12
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) == (7 | 0)) {
         break label$11
        }
        continue label$13;
       };
      }
      HEAP8[($0_1 + 120 | 0) >> 0] = 1;
      break label$8;
     }
     if (($5_1 | 0) == ($6_1 | 0)) {
      break label$8
     }
     $1_1 = HEAP32[((($3_1 + 48 | 0) + ($5_1 << 2 | 0) | 0) + 8 | 0) >> 2] | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$10;
    };
   }
   $859(35477 | 0, 35264 | 0, 186 | 0);
   abort();
  }
  label$14 : {
   if (!$2_1) {
    break label$14
   }
   $735($2_1 | 0);
  }
  label$15 : {
   $14_1 = $3_1 + 128 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $416($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $21_1 = 0, $120_1 = 0, $120$hi = 0, $122_1 = 0, $122$hi = 0;
  label$1 : {
   $3_1 = global$0 - 160 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(35481 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 366 | 0);
  }
  $0_1 = 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       switch ($1_1 + 1 | 0 | 0) {
       case 1:
        $425($4_1 | 0) | 0;
        break label$11;
       default:
        if (($1_1 | 0) != (1836476516 | 0)) {
         break label$11
        }
        if (!$2_1) {
         break label$8
        }
        $1_1 = $431($2_1 | 0, $3_1 + 72 | 0 | 0) | 0;
        HEAP8[($4_1 + 24 | 0) >> 0] = $1_1;
        label$15 : {
         if ($1_1) {
          break label$15
         }
         label$16 : {
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          HEAP32[$3_1 >> 2] = $4_1;
          $827(35534 | 0, $3_1 | 0);
         }
         $0_1 = 1;
         HEAP8[($4_1 + 26 | 0) >> 0] = 1;
         break label$10;
        }
        $0_1 = 0;
        $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$10
        }
        i64toi32_i32$0 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 108 | 0) >> 2] | 0;
        $21_1 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $120_1 = i64toi32_i32$0;
        $120$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$0 = 0;
        $122_1 = i64toi32_i32$1;
        $122$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $120$hi;
        i64toi32_i32$1 = $122$hi;
        i64toi32_i32$1 = __wasm_i64_udiv($120_1 | 0, i64toi32_i32$0 | 0, $122_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
        break label$10;
       case 0:
        break label$12;
       };
      }
      label$17 : {
       if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$17
       }
       if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$17
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(35583 | 0, $3_1 + 16 | 0 | 0);
      }
      $0_1 = 1;
      HEAP8[($4_1 + 25 | 0) >> 0] = 1;
     }
     if (!$2_1) {
      break label$9
     }
    }
    $735($2_1 | 0);
   }
   label$18 : {
    $14_1 = $3_1 + 160 | 0;
    if ($14_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $14_1;
   }
   return $0_1 | 0;
  }
  $859(35477 | 0, 35264 | 0, 372 | 0);
  abort();
 }
 
 function $417($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $20_1 = 0, $15$hi = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 224 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 116 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 112 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 108 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 80 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 100 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 80 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 92 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 88 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
   $827(35624 | 0, $3_1 + 80 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 444 | 0);
  }
  $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        switch ($1_1 + 1 | 0 | 0) {
        default:
         if (($1_1 | 0) != (1953196132 | 0)) {
          break label$12
         }
         if (!$2_1) {
          break label$9
         }
         if (!$0_1) {
          break label$11
         }
         $1_1 = $432($2_1 | 0, $3_1 + 128 | 0 | 0) | 0;
         HEAP8[($4_1 + 27 | 0) >> 0] = $1_1;
         if (!$1_1) {
          break label$11
         }
         HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 152 | 0) >> 2] | 0;
         break label$11;
        case 1:
         label$16 : {
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$16
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$16
          }
          HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
          $827(35677 | 0, $3_1 + 16 | 0 | 0);
         }
         label$17 : {
          $1_1 = $813(536 | 0) | 0;
          if ($1_1) {
           break label$17
          }
          if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$12
          }
          i64toi32_i32$1 = $3_1;
          i64toi32_i32$0 = 536;
          HEAP32[$3_1 >> 2] = 0;
          HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $827(35717 | 0, $3_1 | 0);
          break label$12;
         }
         $218($1_1 | 0);
         HEAP8[($1_1 + 481 | 0) >> 0] = 0;
         HEAP8[($1_1 + 348 | 0) >> 0] = 0;
         HEAP32[($1_1 + 328 | 0) >> 2] = 0;
         i64toi32_i32$1 = $1_1;
         i64toi32_i32$0 = 0;
         HEAP32[($1_1 + 336 | 0) >> 2] = 0;
         HEAP32[($1_1 + 340 | 0) >> 2] = i64toi32_i32$0;
         $974($1_1 + 488 | 0 | 0, 0 | 0, 48 | 0) | 0;
         HEAP8[($4_1 + 31 | 0) >> 0] = 0;
         $20_1 = 0;
         HEAP8[($4_1 + 27 | 0) >> 0] = $20_1;
         HEAP8[($4_1 + 28 | 0) >> 0] = $20_1 >>> 8 | 0;
         HEAP8[($4_1 + 29 | 0) >> 0] = $20_1 >>> 16 | 0;
         HEAP8[($4_1 + 30 | 0) >> 0] = $20_1 >>> 24 | 0;
         $67($4_1 + 56 | 0 | 0);
         $67($4_1 + 40 | 0 | 0);
         HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
         break label$12;
        case 0:
         break label$13;
        };
       }
       if (!$0_1) {
        break label$12
       }
       label$18 : {
        label$19 : {
         if (!(HEAPU8[($4_1 + 27 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 28 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 30 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAPU8[($4_1 + 31 | 0) >> 0] | 0)) {
          break label$19
         }
         if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
          break label$8
         }
         label$20 : {
          label$21 : {
           label$22 : {
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($1_1 | 0) != (1 | 0)) {
             break label$22
            }
            if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
             break label$21
            }
            if (!(HEAP32[($0_1 + 28 | 0) >> 2] | 0)) {
             break label$21
            }
            $426($4_1 | 0, $0_1 | 0);
            $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           }
           if ($1_1) {
            break label$21
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$0;
           $15$hi = i64toi32_i32$1;
           if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
            break label$21
           }
           i64toi32_i32$1 = $15$hi;
           i64toi32_i32$0 = $15_1;
           i64toi32_i32$2 = 0;
           HEAPF32[($0_1 + 320 | 0) >> 2] = Math_fround(Math_fround(Math_fround((HEAP32[($0_1 + 328 | 0) >> 2] | 0) >>> 0) * Math_fround(1.0e3)) / Math_fround(+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)));
           if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$20
           }
           if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$21
           }
           $1_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
           $15_1 = i64toi32_i32$1;
           $15$hi = i64toi32_i32$0;
           HEAPF64[($3_1 + 64 | 0) >> 3] = +Math_fround(HEAPF32[($0_1 + 320 | 0) >> 2]);
           i64toi32_i32$1 = $3_1;
           HEAP32[($3_1 + 56 | 0) >> 2] = $15_1;
           HEAP32[($3_1 + 60 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($3_1 + 48 | 0) >> 2] = $1_1;
           $827(35777 | 0, $3_1 + 48 | 0 | 0);
          }
          if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$20
          }
          if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$20
          }
          $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 488 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 492 | 0) >> 2] | 0;
          $15_1 = i64toi32_i32$0;
          $15$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $0_1 + 496 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$0 = $15$hi;
          HEAP32[($3_1 + 36 | 0) >> 2] = $15_1;
          HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
          $827(35838 | 0, $3_1 + 32 | 0 | 0);
         }
         $215(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0);
         break label$18;
        }
        $815($0_1 | 0);
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      }
      if (!$2_1) {
       break label$10
      }
     }
     $735($2_1 | 0);
    }
    label$23 : {
     $14_1 = $3_1 + 224 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return 0 | 0;
   }
   $859(35477 | 0, 35264 | 0, 448 | 0);
   abort();
  }
  $859(35763 | 0, 35264 | 0, 490 | 0);
  abort();
 }
 
 function $418($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $22_1 = 0, $111_1 = 0, $111$hi = 0, $113_1 = 0, $113$hi = 0, $114_1 = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 68 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
   $827(36129 | 0, $3_1 + 32 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 532 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $0_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       if (!$0_1) {
        break label$12
       }
       label$13 : {
        if (($1_1 | 0) == (1751411826 | 0)) {
         break label$13
        }
        if (($1_1 | 0) != (1835296868 | 0)) {
         break label$12
        }
        if (!$2_1) {
         break label$9
        }
        $1_1 = $433($2_1 | 0, $3_1 + 80 | 0 | 0) | 0;
        HEAP8[($4_1 + 30 | 0) >> 0] = $1_1;
        label$14 : {
         if (!$1_1) {
          break label$14
         }
         i64toi32_i32$0 = HEAP32[($3_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$0 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $111_1 = i64toi32_i32$0;
         $111$hi = i64toi32_i32$1;
         i64toi32_i32$1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
         i64toi32_i32$0 = 0;
         $113_1 = i64toi32_i32$1;
         $113$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $111$hi;
         i64toi32_i32$1 = $113$hi;
         i64toi32_i32$1 = __wasm_i64_udiv($111_1 | 0, i64toi32_i32$0 | 0, $113_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $114_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 336 | 0) >> 2] = $114_1;
         HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
         $823($0_1 + 349 | 0 | 0, $3_1 + 120 | 0 | 0, 4 | 0) | 0;
         break label$11;
        }
        if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$11
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[$3_1 >> 2] = $4_1;
        $827(36182 | 0, $3_1 | 0);
        break label$11;
       }
       if (!$2_1) {
        break label$8
       }
       $1_1 = $435($2_1 | 0, $3_1 + 80 | 0 | 0) | 0;
       HEAP8[($4_1 + 31 | 0) >> 0] = $1_1;
       label$15 : {
        if ($1_1) {
         break label$15
        }
        if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
        $827(36245 | 0, $3_1 + 16 | 0 | 0);
       }
       HEAP32[($4_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
       break label$11;
      }
      if (!$2_1) {
       break label$10
      }
     }
     $735($2_1 | 0);
    }
    label$16 : {
     $14_1 = $3_1 + 128 | 0;
     if ($14_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $14_1;
    }
    return 0 | 0;
   }
   $859(35477 | 0, 35264 | 0, 537 | 0);
   abort();
  }
  $859(35477 | 0, 35264 | 0, 548 | 0);
  abort();
 }
 
 function $419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $1_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $8_1 = $0_1 & 255 | 0;
   $9_1 = $0_1 >>> 24 | 0;
   $10_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $11_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $0_1 = 0;
     break label$4;
    }
    $0_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $9_1;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(36313 | 0, $3_1 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 788 | 0);
  }
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   $735($2_1 | 0);
  }
  label$9 : {
   $13_1 = $3_1 + 48 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return 0 | 0;
 }
 
 function $420($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $12_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $13_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $304_1 = 0, $305_1 = 0, $307_1 = 0, $307$hi = 0, $310_1 = 0, $310$hi = 0;
  label$1 : {
   $3_1 = global$0 - 128 | 0;
   $13_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$3 : {
   if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $1_1 & 255 | 0;
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $9_1 = $0_1 & 255 | 0;
   $10_1 = $0_1 >>> 24 | 0;
   $11_1 = ($0_1 >>> 8 | 0) & 255 | 0;
   $0_1 = ($0_1 >>> 16 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $12_1 = 0;
     break label$4;
    }
    $12_1 = $756($2_1 | 0) | 0;
   }
   HEAP32[($3_1 + 84 | 0) >> 2] = $12_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $7_1;
   HEAP32[(($3_1 + 48 | 0) + 24 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $6_1;
   HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $11_1;
   HEAP32[($3_1 + 56 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 52 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 48 | 0) >> 2] = $4_1;
   $827(36372 | 0, $3_1 + 48 | 0 | 0);
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    if ((HEAP32[$4_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$6
    }
   }
   $846($4_1 | 0, 176 | 0, $4_1 | 0, 34996 | 0, 35264 | 0, 574 | 0);
  }
  label$8 : {
   if (($1_1 | 0) != (1937011556 | 0)) {
    break label$8
   }
   $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   label$9 : {
    if (!(HEAPU8[($4_1 + 31 | 0) >> 0] | 0)) {
     break label$9
    }
    $0_1 = $440($2_1 | 0, $3_1 + 104 | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0;
    HEAP8[($4_1 + 28 | 0) >> 0] = $0_1;
    HEAP8[($1_1 + 348 | 0) >> 0] = 0;
    label$10 : {
     if (!$0_1) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if (!(HEAP32[($3_1 + 112 | 0) >> 2] | 0)) {
        break label$12
       }
       $4_1 = HEAP32[($3_1 + 116 | 0) >> 2] | 0;
       HEAP8[($1_1 + 348 | 0) >> 0] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
       HEAP32[($1_1 + 344 | 0) >> 2] = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
       $823($1_1 + 353 | 0 | 0, $4_1 + 44 | 0 | 0, 128 | 0) | 0;
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    label$26 : {
                     label$27 : {
                      label$28 : {
                       label$29 : {
                        label$30 : {
                         label$31 : {
                          label$32 : {
                           label$33 : {
                            label$34 : {
                             label$35 : {
                              $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                              switch ($0_1 | 0) {
                              case 14:
                               break label$14;
                              case 23:
                               break label$16;
                              case 24:
                               break label$17;
                              case 22:
                               break label$18;
                              case 20:
                               break label$19;
                              case 19:
                               break label$20;
                              case 18:
                               break label$21;
                              case 17:
                               break label$22;
                              case 15:
                              case 16:
                               break label$23;
                              case 12:
                               break label$24;
                              case 13:
                               break label$25;
                              case 9:
                              case 10:
                              case 11:
                               break label$26;
                              case 8:
                               break label$27;
                              case 6:
                              case 7:
                               break label$28;
                              case 21:
                               break label$29;
                              case 1:
                               break label$30;
                              case 5:
                               break label$31;
                              case 2:
                               break label$32;
                              case 3:
                               break label$33;
                              case 4:
                               break label$34;
                              case 0:
                               break label$35;
                              default:
                               break label$11;
                              };
                             }
                             HEAP32[($1_1 + 20 | 0) >> 2] = 27;
                             $5_1 = $4_1 + 264 | 0;
                             if (!(HEAP32[$5_1 >> 2] | 0)) {
                              break label$15
                             }
                             $8_1 = $1_1 + 36 | 0;
                             $0_1 = 0;
                             label$36 : while (1) {
                              $6_1 = $273($5_1 | 0, $0_1 | 0, $3_1 + 100 | 0 | 0) | 0;
                              if (!$6_1) {
                               break label$15
                              }
                              label$37 : {
                               $7_1 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
                               if (!$7_1) {
                                break label$37
                               }
                               $247($8_1 | 0, $6_1 + 1 | 0 | 0, $7_1 + -1 | 0 | 0) | 0;
                               if (HEAPU8[$8_1 >> 0] | 0) {
                                break label$15
                               }
                              }
                              $0_1 = $0_1 + 1 | 0;
                              if ($0_1 >>> 0 < (HEAP32[$5_1 >> 2] | 0) >>> 0) {
                               continue label$36
                              }
                              break label$15;
                             };
                            }
                            HEAP32[($1_1 + 20 | 0) >> 2] = 1;
                            break label$15;
                           }
                           HEAP32[($1_1 + 20 | 0) >> 2] = 2;
                           break label$15;
                          }
                          HEAP32[($1_1 + 20 | 0) >> 2] = 16;
                          break label$15;
                         }
                         HEAP32[($1_1 + 20 | 0) >> 2] = 26;
                         break label$15;
                        }
                        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
                        HEAP8[($1_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 178 | 0) >> 0] | 0;
                        HEAP8[($1_1 + 25 | 0) >> 0] = HEAPU8[($4_1 + 180 | 0) >> 0] | 0;
                        label$38 : {
                         label$39 : {
                          $0_1 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
                          if (!$0_1) {
                           break label$39
                          }
                          $0_1 = $0_1 >>> 16 | 0;
                          break label$38;
                         }
                         label$40 : {
                          $0_1 = HEAPU8[($4_1 + 209 | 0) >> 0] | 0;
                          if (($0_1 | 0) == (15 | 0)) {
                           break label$40
                          }
                          $0_1 = $256($0_1 | 0) | 0;
                          break label$38;
                         }
                         $0_1 = HEAP32[($4_1 + 212 | 0) >> 2] | 0;
                        }
                        HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
                        label$41 : {
                         label$42 : {
                          $0_1 = HEAPU8[($4_1 + 208 | 0) >> 0] | 0;
                          if (($0_1 | 0) != (5 | 0)) {
                           break label$42
                          }
                          $0_1 = 18;
                          break label$41;
                         }
                         label$43 : {
                          label$44 : {
                           if (($0_1 | 0) == (39 | 0)) {
                            break label$44
                           }
                           if (($0_1 | 0) != (23 | 0)) {
                            break label$43
                           }
                          }
                          $0_1 = 17;
                          break label$41;
                         }
                         $0_1 = 15;
                        }
                        HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
                        label$45 : {
                         $4_1 = HEAPU8[($4_1 + 208 | 0) >> 0] | 0;
                         if ($4_1 >>> 0 > 5 >>> 0) {
                          break label$45
                         }
                         HEAP32[($1_1 + 32 | 0) >> 2] = $4_1;
                         break label$11;
                        }
                        HEAP32[($1_1 + 32 | 0) >> 2] = 0;
                        break label$11;
                       }
                       HEAP32[($1_1 + 20 | 0) >> 2] = 154;
                       $5_1 = $4_1 + 204 | 0;
                       $0_1 = $4_1 + 176 | 0;
                       break label$13;
                      }
                      HEAP32[($1_1 + 20 | 0) >> 2] = ($0_1 | 0) == (6 | 0) ? 129 : 6;
                      $0_1 = $4_1 + 176 | 0;
                      $5_1 = 0;
                      break label$13;
                     }
                     HEAP32[($1_1 + 20 | 0) >> 2] = 156;
                     $0_1 = $4_1 + 176 | 0;
                     $5_1 = 0;
                     break label$13;
                    }
                    HEAP32[($1_1 + 20 | 0) >> 2] = ($0_1 | 0) == (9 | 0) ? 144 : 145;
                    $0_1 = $4_1 + 176 | 0;
                    $5_1 = 0;
                    break label$13;
                   }
                   HEAP8[($1_1 + 348 | 0) >> 0] = 1;
                   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
                   HEAP32[($1_1 + 4 | 0) >> 2] = 1;
                   break label$11;
                  }
                  HEAP8[($1_1 + 348 | 0) >> 0] = 1;
                  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
                  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
                  break label$11;
                 }
                 HEAP32[($1_1 + 20 | 0) >> 2] = 143;
                 $0_1 = $4_1 + 176 | 0;
                 $5_1 = 0;
                 break label$13;
                }
                HEAP32[($1_1 + 20 | 0) >> 2] = 245;
                break label$15;
               }
               HEAP32[($1_1 + 20 | 0) >> 2] = 138;
               $0_1 = $4_1 + 176 | 0;
               $5_1 = 0;
               break label$13;
              }
              $0_1 = $4_1 + 176 | 0;
              label$46 : {
               if ((HEAP32[($4_1 + 204 | 0) >> 2] | 0 | 0) != (1685353317 | 0)) {
                break label$46
               }
               HEAP32[($1_1 + 20 | 0) >> 2] = 133;
               $5_1 = 0;
               break label$13;
              }
              HEAP32[($1_1 + 20 | 0) >> 2] = 130;
              $5_1 = 0;
              break label$13;
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 33;
             HEAP8[($1_1 + 41 | 0) >> 0] = HEAPU8[($4_1 + 278 | 0) >> 0] | 0;
             HEAP8[($1_1 + 42 | 0) >> 0] = HEAPU8[($4_1 + 279 | 0) >> 0] | 0;
             break label$15;
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 1;
            $0_1 = $4_1 + 176 | 0;
            $5_1 = 0;
            break label$13;
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = 4;
           break label$11;
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 246;
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = 0;
         HEAP16[($1_1 + 28 | 0) >> 1] = HEAPU16[($4_1 + 176 | 0) >> 1] | 0;
         HEAP16[($1_1 + 30 | 0) >> 1] = HEAPU16[($4_1 + 178 | 0) >> 1] | 0;
         label$47 : {
          if (!(HEAPU8[($4_1 + 224 | 0) >> 0] | 0)) {
           break label$47
          }
          HEAP8[($1_1 + 481 | 0) >> 0] = HEAPU8[($4_1 + 226 | 0) >> 0] | 0;
         }
         if (!(HEAPU8[($4_1 + 225 | 0) >> 0] | 0)) {
          break label$11
         }
         i64toi32_i32$2 = $1_1 + 496 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
          break label$11
         }
         i64toi32_i32$2 = $4_1 + 240 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $304_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $1_1 + 528 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $304_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $305_1 = $1_1;
         i64toi32_i32$2 = $1_1;
         i64toi32_i32$0 = HEAP32[($1_1 + 488 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1_1 + 492 | 0) >> 2] | 0;
         $307_1 = i64toi32_i32$0;
         $307$hi = i64toi32_i32$1;
         i64toi32_i32$2 = $4_1 + 232 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $310_1 = i64toi32_i32$1;
         $310$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $307$hi;
         i64toi32_i32$2 = $307_1;
         i64toi32_i32$1 = $310$hi;
         i64toi32_i32$3 = $310_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         i64toi32_i32$2 = $305_1;
         HEAP32[(i64toi32_i32$2 + 520 | 0) >> 2] = i64toi32_i32$4;
         HEAP32[(i64toi32_i32$2 + 524 | 0) >> 2] = i64toi32_i32$5;
         break label$11;
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = 3;
        $5_1 = $4_1 + 204 | 0;
        $0_1 = $4_1 + 176 | 0;
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = 1;
       HEAP8[($1_1 + 24 | 0) >> 0] = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       HEAP8[($1_1 + 25 | 0) >> 0] = HEAPU8[($0_1 + 4 | 0) >> 0] | 0;
       $0_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 16 | 0;
       HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
       if (!$5_1) {
        break label$11
       }
       if ($0_1) {
        break label$11
       }
       if ((HEAPU8[($5_1 + 5 | 0) >> 0] | 0 | 0) != (15 | 0)) {
        break label$11
       }
       HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 212 | 0) >> 2] | 0;
       break label$11;
      }
      label$48 : {
       if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$48
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(36431 | 0, $3_1 + 16 | 0 | 0);
      }
      HEAP8[($4_1 + 28 | 0) >> 0] = 0;
     }
     $455($3_1 + 104 | 0 | 0);
     break label$8;
    }
    if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
    $827(36509 | 0, $3_1 + 32 | 0 | 0);
    break label$8;
   }
   if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $827(36578 | 0, $3_1 | 0);
  }
  label$49 : {
   if (!$2_1) {
    break label$49
   }
   $735($2_1 | 0);
  }
  label$50 : {
   $14_1 = $3_1 + 128 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return 0 | 0;
 }
 
 function $421($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 842 | 0);
  }
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 160 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 144 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 128 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 112 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 96 | 0 | 0);
  $392(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 80 | 0 | 0);
  $405(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 176 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $422($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $12$hi = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13$hi = 0, $13_1 = 0, $6_1 = 0, $37_1 = 0, $7_1 = 0, $5_1 = 0, $11_1 = 0, $10_1 = 0, $64_1 = 0, $70_1 = 0, $72$hi = 0, $122_1 = 0, $132$hi = 0, $245_1 = 0, $248_1 = 0, $248$hi = 0, $251_1 = 0, $251$hi = 0, $253$hi = 0, $255$hi = 0, $38_1 = 0, $14_1 = 0, $14$hi = 0, $15$hi = 0;
  label$1 : {
   $4_1 = global$0 - 144 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 863 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
    break label$5
   }
   HEAP8[($0_1 + 29 | 0) >> 0] = 0;
   HEAP8[($0_1 + 32 | 0) >> 0] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 19 | 0;
   i64toi32_i32$0 = 0;
   $37_1 = 0;
   HEAP8[i64toi32_i32$1 >> 0] = $37_1;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $37_1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $37_1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $37_1 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   $5_1 = $0_1 + 56 | 0;
   $67($5_1 | 0);
   $6_1 = $0_1 + 40 | 0;
   $67($6_1 | 0);
   $7_1 = $0_1 + 12 | 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$6 : while (1) {
    label$7 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$7
     }
     i64toi32_i32$1 = $13$hi;
     $396(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     $12_1 = $13_1;
     $12$hi = i64toi32_i32$1;
    }
    label$8 : {
     if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$0;
     HEAP32[($4_1 + 72 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
     $64_1 = $4_1;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($64_1 + 68 | 0) >> 2] = i64toi32_i32$4;
     $827(36689 | 0, $4_1 + 64 | 0 | 0);
    }
    label$9 : {
     label$10 : {
      label$11 : {
       $70_1 = $1_1;
       i64toi32_i32$0 = $3_1;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $72$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$2 = $72$hi;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $8_1 = $50($70_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 140 | 0 | 0) | 0;
       if ($8_1) {
        break label$11
       }
       $393(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 112 | 0 | 0);
       label$12 : {
        if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
        HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
        $827(36725 | 0, $4_1 + 32 | 0 | 0);
       }
       if ((HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) != (2 | 0)) {
        break label$9
       }
       $8_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
       if ((HEAP32[($4_1 + 124 | 0) >> 2] | 0) >>> 0 > $8_1 >>> 0) {
        break label$9
       }
       $9_1 = 0;
       if ($8_1 >>> 0 >= 16 >>> 0) {
        break label$10
       }
       break label$9;
      }
      $9_1 = $756($8_1 | 0) | 0;
      label$13 : {
       if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$4;
       $13$hi = i64toi32_i32$0;
       HEAP32[($4_1 + 60 | 0) >> 2] = $8_1;
       HEAP32[($4_1 + 56 | 0) >> 2] = $9_1;
       HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
       $122_1 = $4_1;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       HEAP32[($122_1 + 52 | 0) >> 2] = i64toi32_i32$5;
       $827(36775 | 0, $4_1 + 48 | 0 | 0);
      }
      $797($2_1 | 0, $8_1 | 0);
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = 0;
      $132$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = $132$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$0 + $9_1 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < $9_1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
     }
     label$14 : {
      if (($406(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) == ($9_1 | 0)) {
       break label$14
      }
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      if (!(i64toi32_i32$5 | i64toi32_i32$0 | 0)) {
       break label$9
      }
     }
     if (HEAPU8[($0_1 + 26 | 0) >> 0] | 0) {
      break label$9
     }
     label$15 : {
      if (!(HEAPU8[($0_1 + 25 | 0) >> 0] | 0)) {
       break label$15
      }
      if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
       break label$9
      }
      $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$15
      }
      if (HEAPU8[($9_1 + 121 | 0) >> 0] | 0) {
       break label$9
      }
     }
     label$16 : {
      if (HEAPU8[($0_1 + 29 | 0) >> 0] | 0) {
       break label$16
      }
      $9_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$9_1) {
       break label$16
      }
      label$17 : {
       if (!($69($6_1 | 0) | 0)) {
        break label$17
       }
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $8_1 = $50($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 128 | 0, $4_1 + 140 | 0 | 0) | 0;
       if (!$8_1) {
        break label$9
       }
       $762($4_1 + 96 | 0 | 0, $8_1 | 0);
       HEAP8[($0_1 + 29 | 0) >> 0] = $456($4_1 + 96 | 0 | 0, $4_1 + 80 | 0 | 0) | 0;
       $735($8_1 | 0);
       label$18 : {
        if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
         break label$18
        }
        HEAP32[($9_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
       }
       $67($6_1 | 0);
       break label$16;
      }
      if (!($69($6_1 | 0) | 0)) {
       break label$16
      }
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $8_1 = $50($1_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 128 | 0, $4_1 + 140 | 0 | 0) | 0;
      if (!$8_1) {
       break label$9
      }
      $762($4_1 + 96 | 0 | 0, $8_1 | 0);
      HEAP8[($0_1 + 29 | 0) >> 0] = $457($4_1 + 96 | 0 | 0, $4_1 + 80 | 0 | 0) | 0;
      $735($8_1 | 0);
      if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
       break label$16
      }
      HEAP32[($9_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
     }
     if ((HEAP32[($4_1 + 140 | 0) >> 2] | 0 | 0) != (2 | 0)) {
      continue label$6
     }
     $393(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 112 | 0 | 0);
     if ((HEAP32[($4_1 + 124 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($4_1 + 120 | 0) >> 2] | 0) >>> 0) {
      continue label$6
     }
    }
    break label$6;
   };
   label$19 : {
    $9_1 = HEAP32[$7_1 >> 2] | 0;
    if (!$9_1) {
     break label$19
    }
    $815($9_1 | 0);
    HEAP32[$7_1 >> 2] = 0;
   }
   $395(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
   label$20 : {
    $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$20
    }
    label$21 : {
     $8_1 = HEAP32[($9_1 + 20 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$21
     }
     $245_1 = $9_1;
     i64toi32_i32$1 = $9_1 + 48 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $248_1 = i64toi32_i32$0;
     $248$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $9_1 + 64 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $251_1 = i64toi32_i32$5;
     $251$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $248$hi;
     i64toi32_i32$1 = $248_1;
     i64toi32_i32$5 = $251$hi;
     i64toi32_i32$3 = $251_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 8e3 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $253$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $255$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $253$hi;
     $38_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $255$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($38_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     HEAP32[($245_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    }
    if ((HEAP8[(0 + 62088 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$20
    }
    if (!($828(2 | 0, 62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$20
    }
    i64toi32_i32$0 = $9_1 + 48 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $9_1 + 64 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$1;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
    $15$hi = i64toi32_i32$4;
    HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0) >>> 10 | 0;
    i64toi32_i32$4 = $13$hi;
    HEAP32[($4_1 + 16 | 0) >> 2] = $13_1;
    i64toi32_i32$4 = $15$hi;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$4 = $12$hi;
    HEAP32[($4_1 + 8 | 0) >> 2] = $12_1;
    i64toi32_i32$4 = $14$hi;
    HEAP32[($4_1 + 4 | 0) >> 2] = $14_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(36814 | 0, $4_1 | 0);
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   label$22 : {
    $11_1 = $4_1 + 144 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $9_1 | 0;
  }
  $859(36669 | 0, 35264 | 0, 864 | 0);
  abort();
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (34996 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 176 | 0, $0_1 | 0, 34996 | 0, 35264 | 0, 972 | 0);
  }
  $217($0_1 | 0, $1_1 | 0);
 }
 
 function $424($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   $0_1 = $425($0_1 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = $0_1 + $1_1 | 0;
   i64toi32_i32$0 = $2$hi;
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   HEAP32[$0_1 >> 2] = $3_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($2_1) {
    break label$3
   }
   label$4 : {
    $2_1 = $813(128 | 0) | 0;
    if (!$2_1) {
     break label$4
    }
    $214($2_1 | 0, 11 | 0);
    HEAP32[($2_1 + 12 | 0) >> 2] = 3;
    $974($2_1 + 40 | 0 | 0, 0 | 0, 83 | 0) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    break label$3;
   }
   $2_1 = 0;
   if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = 128;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(35341 | 0, $1_1 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $44$hi = 0, $11_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($257($2_1 + 40 | 0 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (!(HEAPU8[($0_1 + 29 | 0) >> 0] | 0)) {
       break label$6
      }
      if (!(HEAPU8[($0_1 + 30 | 0) >> 0] | 0)) {
       break label$6
      }
      i64toi32_i32$0 = HEAP32[($1_1 + 336 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 340 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$0;
      $6$hi = i64toi32_i32$1;
      if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
       break label$6
      }
      $0_1 = HEAP32[($1_1 + 328 | 0) >> 2] | 0;
      if ($0_1) {
       break label$5
      }
     }
     if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = 35978;
     $827(35873 | 0, $2_1 | 0);
     break label$3;
    }
    label$7 : {
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 1024e3 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $44$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $44$hi;
     $11_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = __wasm_i64_udiv($11_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     if (!($257($2_1 + 40 | 0 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$7
     }
     $0_1 = $256(HEAPU8[($2_1 + 40 | 0) >> 0] | 0 | 0) | 0;
     label$8 : {
      if (!($834(62088 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = 35978;
      $827(36011 | 0, $2_1 + 16 | 0 | 0);
     }
     HEAP32[($1_1 + 28 | 0) >> 2] = $0_1;
     break label$3;
    }
    if (!($835(62088 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = 35978;
    $827(36083 | 0, $2_1 + 32 | 0 | 0);
    break label$3;
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $256(HEAPU8[($2_1 + 40 | 0) >> 0] | 0 | 0) | 0;
  }
  label$9 : {
   $5_1 = $2_1 + 48 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $60_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $3_1 = $778($0_1 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
    $4_1 = 0;
    label$5 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (($3_1 | 0) == (1 | 0)) {
       break label$6
      }
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $1_1;
      HEAP32[$1_1 >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = 8;
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$5
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2_1 + 44 | 0) >> 2] = $0_1 & 255 | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = $0_1 >>> 24 | 0;
      $4_1 = 8;
      HEAP32[($2_1 + 40 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
      $827(36955 | 0, $2_1 + 32 | 0 | 0);
      break label$5;
     }
     i64toi32_i32$1 = $780($0_1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $60_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $1_1;
     HEAP32[$1_1 >> 2] = $60_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = 0;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     $4_1 = 16;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     $4_1 = 16;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $0_1 >>> 24 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
     $827(36955 | 0, $2_1 | 0);
    }
    label$7 : {
     $6_1 = $2_1 + 64 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $4_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 61 | 0);
   abort();
  }
  $859(36951 | 0, 36875 | 0, 62 | 0);
  abort();
 }
 
 function $428($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $16$hi = 0, $15_1 = 0, $14_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $16_1 = 0, $96$hi = 0, $149_1 = 0, $154_1 = 0;
  label$1 : {
   $3_1 = global$0 - 96 | 0;
   $14_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  $4_1 = $754($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    $5_1 = $427($0_1 | 0, $3_1 + 80 | 0 | 0) | 0;
    if (!$5_1) {
     break label$4
    }
    $6_1 = (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) < (3 | 0);
    label$5 : {
     if ((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$5
     }
     $7_1 = $1_1 & 255 | 0;
     $8_1 = $1_1 >>> 24 | 0;
     $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $10_1 = ($1_1 >>> 16 | 0) & 255 | 0;
     $11_1 = $3_1 + 60 | 0;
     $12_1 = $3_1 + 64 | 0;
     $13_1 = $3_1 + 52 | 0;
     label$6 : while (1) {
      label$7 : {
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $6_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
       HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $6_1 >>> 24 | 0;
       HEAP32[$11_1 >> 2] = $6_1 & 255 | 0;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$0 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
       HEAP32[$12_1 >> 2] = i64toi32_i32$0;
       HEAP32[$13_1 >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
       HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($3_1 + 32 | 0) >> 2] = $8_1;
       HEAP32[($3_1 + 36 | 0) >> 2] = $10_1;
       HEAP32[($3_1 + 40 | 0) >> 2] = $9_1;
       HEAP32[($3_1 + 44 | 0) >> 2] = $7_1;
       $827(37019 | 0, $3_1 + 32 | 0 | 0);
      }
      label$8 : {
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$1;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $96$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $96$hi;
       i64toi32_i32$3 = $5_1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$8
       }
       i64toi32_i32$2 = $16$hi;
       $766($0_1 | 0, $16_1 - $5_1 | 0 | 0) | 0;
      }
      $4_1 = $754($0_1 | 0) | 0;
      $5_1 = $427($0_1 | 0, $3_1 + 80 | 0 | 0) | 0;
      if (!$5_1) {
       break label$4
      }
      $6_1 = (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) < (3 | 0);
      if ((HEAP32[($3_1 + 88 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$9 : {
     if (!$6_1) {
      break label$9
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$2;
     $0_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $0_1 >>> 24 | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
     $827(36985 | 0, $3_1 | 0);
    }
    if (!$2_1) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = $4_1;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($3_1 + 84 | 0) >> 2] | 0;
    $149_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $149_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$3 = $3_1 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $154_1 = i64toi32_i32$2;
    i64toi32_i32$2 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$2 >> 2] = $154_1;
    HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$3;
   }
   $5_1 = 0;
  }
  label$10 : {
   $15_1 = $3_1 + 96 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
  return $5_1 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $782($0_1 | 0) | 0;
    label$5 : {
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $827(37076 | 0, $2_1 | 0);
    }
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    label$6 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
   }
   $859(36868 | 0, 36875 | 0, 126 | 0);
   abort();
  }
  $859(36951 | 0, 36875 | 0, 127 | 0);
  abort();
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 32 | 0 | 0, $0_1 | 0);
    HEAP32[$1_1 >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
    $0_1 = 0;
    label$5 : {
     if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : while (1) {
       HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 8 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
       label$8 : {
        if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
         break label$8
        }
        $3_1 = $0_1;
        break label$6;
       }
       $3_1 = 16;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != (16 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($1_1 + 72 | 0) >> 2] = $3_1;
     $0_1 = 1;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 12 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[$2_1 >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     $827(37126 | 0, $2_1 | 0);
    }
    label$9 : {
     $6_1 = $2_1 + 48 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 140 | 0);
   abort();
  }
  $859(37117 | 0, 36875 | 0, 141 | 0);
  abort();
 }
 
 function $431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $9$hi = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $36_1 = 0, $40_1 = 0, $3_1 = 0, $10_1 = 0, $10$hi = 0, $11_1 = 0, $11$hi = 0, $5_1 = 0, $6_1 = 0, $148$hi = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 64 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 64 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $36_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $36_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $40_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $40_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 64 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $9_1 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37221 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $9_1 = $778($2_1 + 64 | 0 | 0) | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $9_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($1_1 + 40 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
     HEAP16[($1_1 + 44 | 0) >> 1] = $777($2_1 + 64 | 0 | 0) | 0;
     $766($2_1 + 64 | 0 | 0, 10 | 0) | 0;
     $0_1 = 0;
     label$10 : while (1) {
      HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 48 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (9 | 0)) {
       continue label$10
      }
      break label$10;
     };
     $766($2_1 + 64 | 0 | 0, 4 | 0) | 0;
     HEAP32[($1_1 + 84 | 0) >> 2] = $778($2_1 + 64 | 0 | 0) | 0;
     $0_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & (HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) > (-1 | 0) | 0;
     if (($0_1 | 0) != (1 | 0)) {
      break label$5
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     $0_1 = 1;
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     $4_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$1;
     $9$hi = i64toi32_i32$0;
     $5_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     $6_1 = HEAPU16[($1_1 + 44 | 0) >> 1] | 0;
     HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     $148$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $148$hi;
     i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $4_1;
     i64toi32_i32$0 = $11$hi;
     HEAP32[($2_1 + 24 | 0) >> 2] = $11_1;
     i64toi32_i32$0 = $10$hi;
     HEAP32[($2_1 + 20 | 0) >> 2] = $10_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     $827(37264 | 0, $2_1 + 16 | 0 | 0);
    }
    label$11 : {
     $8_1 = $2_1 + 80 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 169 | 0);
   abort();
  }
  $859(37209 | 0, 36875 | 0, 170 | 0);
  abort();
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $9_1 = 0, $36_1 = 0, $40_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 48 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 48 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $36_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $36_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $40_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $40_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
        $766($2_1 + 48 | 0 | 0, 4 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37221 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      $766($2_1 + 48 | 0 | 0, 4 | 0) | 0;
      i64toi32_i32$1 = 0;
      $11_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $11$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $11_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     $766($2_1 + 48 | 0 | 0, 8 | 0) | 0;
     HEAP16[($1_1 + 40 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     HEAP16[($1_1 + 42 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     HEAP16[($1_1 + 44 | 0) >> 1] = $777($2_1 + 48 | 0 | 0) | 0;
     $766($2_1 + 48 | 0 | 0, 2 | 0) | 0;
     $0_1 = 0;
     $3_1 = $778($2_1 + 48 | 0 | 0) | 0;
     label$10 : while (1) {
      HEAP32[(($1_1 + ($0_1 << 2 | 0) | 0) + 48 | 0) >> 2] = $3_1;
      $3_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (9 | 0)) {
       continue label$10
      }
      break label$10;
     };
     HEAP32[($1_1 + 84 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 88 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
     $3_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     $0_1 = ($3_1 | 0) > (-1 | 0);
     if (($3_1 | 0) < (0 | 0)) {
      break label$5
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     $0_1 = 1;
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $3_1 = HEAPU16[($1_1 + 86 | 0) >> 1] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$1;
     $11$hi = i64toi32_i32$0;
     $6_1 = HEAPU16[($1_1 + 40 | 0) >> 1] | 0;
     $7_1 = HEAPU16[($1_1 + 42 | 0) >> 1] | 0;
     $8_1 = HEAPU16[($1_1 + 44 | 0) >> 1] | 0;
     HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 90 | 0) >> 1] | 0;
     HEAP32[($2_1 + 40 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = $8_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $7_1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
     $827(37417 | 0, $2_1 + 16 | 0 | 0);
    }
    label$11 : {
     $10_1 = $2_1 + 64 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 219 | 0);
   abort();
  }
  $859(37405 | 0, 36875 | 0, 220 | 0);
  abort();
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0, $4_1 = 0, $33_1 = 0, $37_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $131$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 48 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 48 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       switch (HEAPU8[$1_1 >> 0] | 0 | 0) {
       case 1:
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $33_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $1_1;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $33_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $37_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = $37_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$0 = $780($2_1 + 48 | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $6_1 = i64toi32_i32$0;
        $6$hi = i64toi32_i32$1;
        break label$6;
       default:
        $0_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
        $827(37545 | 0, $2_1 | 0);
        break label$5;
       case 0:
        break label$7;
       };
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($2_1 + 48 | 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $6_1 = $778($2_1 + 48 | 0 | 0) | 0;
      $6$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$0 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $6_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     $0_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
     HEAP8[($1_1 + 40 | 0) >> 0] = 0;
     $0_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & ($0_1 | 0) > (-1 | 0) | 0;
     $3_1 = $777($2_1 + 48 | 0 | 0) | 0;
     label$10 : {
      if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$10
      }
      HEAP8[($1_1 + 43 | 0) >> 0] = 0;
      HEAP8[($1_1 + 42 | 0) >> 0] = $3_1 & 31 | 0 | 96 | 0;
      HEAP8[($1_1 + 40 | 0) >> 0] = $3_1 >>> 10 | 0 | 96 | 0;
      HEAP8[($1_1 + 41 | 0) >> 0] = ($3_1 >>> 5 | 0) & 31 | 0 | 96 | 0;
     }
     if ($0_1 ^ 1 | 0 | (HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0) | 0) {
      break label$5
     }
     label$11 : {
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$11
      }
      $3_1 = HEAPU8[$1_1 >> 0] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
      $0_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$0;
      HEAP32[($2_1 + 40 | 0) >> 2] = $1_1 + 40 | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      $131$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = $131$hi;
      i64toi32_i32$1 = __wasm_i64_udiv($6_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($2_1 + 28 | 0) >> 2] = $0_1;
      i64toi32_i32$0 = $8$hi;
      HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
      i64toi32_i32$0 = $7$hi;
      HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
      $827(37588 | 0, $2_1 + 16 | 0 | 0);
     }
     $0_1 = 1;
    }
    label$12 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 271 | 0);
   abort();
  }
  $859(37533 | 0, 36875 | 0, 272 | 0);
  abort();
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$0_1) {
         break label$6
        }
        if (!$2_1) {
         break label$5
        }
        if (!$1_1) {
         break label$4
        }
        $3_1 = 0;
        label$7 : while (1) {
         $4_1 = $764($0_1 | 0) | 0;
         if (($4_1 | 0) == (-1 | 0)) {
          break label$3
         }
         HEAP8[($1_1 + $3_1 | 0) >> 0] = $4_1;
         if (!$4_1) {
          break label$1
         }
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != ($2_1 | 0)) {
          continue label$7
         }
         break label$2;
        };
       }
       $859(36868 | 0, 36875 | 0, 317 | 0);
       abort();
      }
      $859(37706 | 0, 36875 | 0, 318 | 0);
      abort();
     }
     $859(37715 | 0, 36875 | 0, 319 | 0);
     abort();
    }
    $2_1 = $3_1 + 1 | 0;
   }
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = 0;
  }
  return 1 | 0;
 }
 
 function $435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $762($2_1 + 32 | 0 | 0, $0_1 | 0);
    $0_1 = 0;
    label$5 : {
     if (!($429($2_1 + 32 | 0 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     $766($2_1 + 32 | 0 | 0, 4 | 0) | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = $778($2_1 + 32 | 0 | 0) | 0;
     $766($2_1 + 32 | 0 | 0, 12 | 0) | 0;
     $3_1 = $1_1 + 12 | 0;
     if (!($434($2_1 + 32 | 0 | 0, $3_1 | 0, 32 | 0) | 0)) {
      break label$5
     }
     label$6 : {
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      $4_1 = HEAPU8[$1_1 >> 0] | 0;
      $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1 & 255 | 0;
      HEAP32[$2_1 >> 2] = $4_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $0_1 >>> 24 | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
      $827(37730 | 0, $2_1 | 0);
     }
     $0_1 = 1;
     $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == (1936684398 | 0)) {
      break label$5
     }
     if (($1_1 | 0) == (1986618469 | 0)) {
      break label$5
     }
     $0_1 = 0;
    }
    label$7 : {
     $6_1 = $2_1 + 48 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $0_1 | 0;
   }
   $859(36951 | 0, 36875 | 0, 345 | 0);
   abort();
  }
  $859(37722 | 0, 36875 | 0, 346 | 0);
  abort();
 }
 
 function $436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $27_1 = 0, $30_1 = 0, $63_1 = 0, $66_1 = 0, $76_1 = 0, $78$hi = 0, $80$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 0;
  HEAP16[($1_1 + 48 | 0) >> 1] = 0;
  label$3 : {
   if (!($437($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $3_1 = ($2_1 + 32 | 0) + 8 | 0;
   $4_1 = $0_1 + 8 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $27_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $27_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $30_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $30_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($428($2_1 + 32 | 0 | 0, 1936995172 | 0, 0 | 0) | 0)) {
       break label$6
      }
      if (!($429($2_1 + 32 | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
       break label$5
      }
      HEAP8[($1_1 + 50 | 0) >> 0] = $772($2_1 + 32 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      HEAP8[($1_1 + 48 | 0) >> 0] = 1;
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAPU8[($1_1 + 50 | 0) >> 0] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
      $827(37795 | 0, $2_1 + 16 | 0 | 0);
     }
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $63_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[i64toi32_i32$0 >> 2] = $63_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $66_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $66_1;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $428($2_1 + 32 | 0 | 0, 1937126244 | 0, $1_1 + 56 | 0 | 0) | 0;
     if ($4_1) {
      break label$4
     }
    }
    $3_1 = 1;
    break label$3;
   }
   $3_1 = 1;
   HEAP8[($1_1 + 49 | 0) >> 0] = 1;
   $5_1 = $1_1 + 64 | 0;
   $76_1 = $5_1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $78$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $80$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $78$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $80$hi;
   i64toi32_i32$4 = i64toi32_i32$2 + $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = $76_1;
   HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$5;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(37843 | 0, $2_1 | 0);
  }
  label$7 : {
   $7_1 = $2_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $10_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $766($0_1 | 0, 16 | 0) | 0;
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  HEAP16[($1_1 + 12 | 0) >> 1] = $777($0_1 | 0) | 0;
  $3_1 = $1_1 + 14 | 0;
  $768($0_1 | 0, $3_1 | 0, 32 | 0) | 0;
  HEAP8[($1_1 + 45 | 0) >> 0] = 0;
  HEAP16[($1_1 + 46 | 0) >> 1] = $777($0_1 | 0) | 0;
  $766($0_1 | 0, 2 | 0) | 0;
  label$3 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$3
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
   $5_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
   $6_1 = HEAPU16[$1_1 >> 1] | 0;
   $7_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $8_1 = HEAPU16[($1_1 + 12 | 0) >> 1] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = HEAPU16[($1_1 + 46 | 0) >> 1] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $8_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$2_1 >> 2] = $6_1;
   $827(39604 | 0, $2_1 | 0);
  }
  label$4 : {
   $10_1 = $2_1 + 32 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $9_1 = 0.0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $2_1 = global$0 - 96 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP16[$1_1 >> 1] = $777($0_1 | 0) | 0;
  $766($0_1 | 0, 6 | 0) | 0;
  label$3 : {
   label$4 : {
    $3_1 = HEAPU16[$1_1 >> 1] | 0;
    if ($3_1 >>> 0 > 1 >>> 0) {
     break label$4
    }
    label$5 : {
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
     $827(37898 | 0, $2_1 + 16 | 0 | 0);
    }
    HEAP16[($1_1 + 2 | 0) >> 1] = $777($0_1 | 0) | 0;
    HEAP16[($1_1 + 4 | 0) >> 1] = $777($0_1 | 0) | 0;
    $766($0_1 | 0, 4 | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
    label$6 : {
     label$7 : {
      if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 16 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 20 | 0) >> 2] = $778($0_1 | 0) | 0;
      HEAP32[($1_1 + 24 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$6;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 1;
     HEAP32[($1_1 + 20 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 3 | 0;
    }
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = ($0_1 | 0) > (-1 | 0);
    if (($0_1 | 0) < (0 | 0)) {
     break label$3
    }
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    $4_1 = 1;
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $0_1 = HEAPU16[$1_1 >> 1] | 0;
    $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $5_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(37929 | 0, $2_1 | 0);
    break label$3;
   }
   $4_1 = 0;
   if (($3_1 | 0) != (2 | 0)) {
    break label$3
   }
   $4_1 = 0;
   label$8 : {
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$8
    }
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$8
    }
    HEAP32[($2_1 + 80 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
    $827(37898 | 0, $2_1 + 80 | 0 | 0);
   }
   if (($777($0_1 | 0) | 0 | 0) != (3 | 0)) {
    break label$3
   }
   if (($777($0_1 | 0) | 0 | 0) != (16 | 0)) {
    break label$3
   }
   if (($777($0_1 | 0) | 0 | 0) != (65534 | 0)) {
    break label$3
   }
   if ($777($0_1 | 0) | 0) {
    break label$3
   }
   if (($778($0_1 | 0) | 0 | 0) != (65536 | 0)) {
    break label$3
   }
   $766($0_1 | 0, 4 | 0) | 0;
   i64toi32_i32$0 = $780($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   label$9 : {
    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$9
    }
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$9
    }
    i64toi32_i32$1 = $8$hi;
    wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    HEAPF64[($2_1 + 64 | 0) >> 3] = +Math_fround(+wasm2js_scratch_load_f64());
    $827(38013 | 0, $2_1 + 64 | 0 | 0);
   }
   label$10 : {
    label$11 : {
     i64toi32_i32$1 = $8$hi;
     wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $9_1 = +wasm2js_scratch_load_f64();
     if (!($9_1 < 4294967296.0 & $9_1 >= 0.0 | 0)) {
      break label$11
     }
     $4_1 = ~~$9_1 >>> 0;
     break label$10;
    }
    $4_1 = 0;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $4_1 << 16 | 0;
   HEAP16[($1_1 + 2 | 0) >> 1] = $778($0_1 | 0) | 0;
   $4_1 = 0;
   if (($778($0_1 | 0) | 0 | 0) != (2130706432 | 0)) {
    break label$3
   }
   $4_1 = $778($0_1 | 0) | 0;
   HEAP16[($1_1 + 4 | 0) >> 1] = $4_1 & 65528 | 0;
   HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 >>> 3 | 0;
   $3_1 = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $4_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   label$12 : {
    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$12
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
    $827(38028 | 0, $2_1 + 48 | 0 | 0);
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU16[$1_1 >> 1] | 0;
   $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
   $5_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
   HEAP32[($2_1 + 44 | 0) >> 2] = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
   HEAP32[($2_1 + 40 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
   $827(37929 | 0, $2_1 + 32 | 0 | 0);
  }
  label$13 : {
   $7_1 = $2_1 + 96 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $439($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $55_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $4_1 = $1_1 + 104 | 0;
    $768($0_1 | 0, $4_1 | 0, $2_1 | 0) | 0;
    $0_1 = 0;
    label$5 : {
     if (!($271($1_1 + 80 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = 1;
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $2_1 = HEAPU8[($1_1 + 83 | 0) >> 0] | 0;
     $4_1 = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
     $5_1 = HEAPU8[($1_1 + 81 | 0) >> 0] | 0;
     $6_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     $7_1 = HEAPU8[($1_1 + 80 | 0) >> 0] | 0;
     i64toi32_i32$2 = $1_1 + 84 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $55_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $55_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[$3_1 >> 2] = $7_1;
     $827(38058 | 0, $3_1 | 0);
    }
    label$6 : {
     $9_1 = $3_1 + 32 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $0_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 505 | 0);
   abort();
  }
  $859(38054 | 0, 36875 | 0, 506 | 0);
  abort();
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $16_1 = 0, $20$hi = 0, $14_1 = 0, $6_1 = 0, $20_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $19_1 = 0, $18_1 = 0, $7_1 = 0, $12_1 = 0, $13_1 = 0, $90$hi = 0, $93$hi = 0, $118_1 = 0, $121_1 = 0, $131_1 = 0, $134_1 = 0, $146$hi = 0, $154$hi = 0, $156$hi = 0, $171$hi = 0, $173$hi = 0, $196_1 = 0, $199_1 = 0, $502$hi = 0, $588$hi = 0, $710$hi = 0;
  label$1 : {
   $3_1 = global$0 - 240 | 0;
   $18_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $18_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        if (!$0_1) {
         break label$8
        }
        if (!$1_1) {
         break label$7
        }
        $762($3_1 + 224 | 0 | 0, $0_1 | 0);
        $4_1 = 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = 0;
        if (!($429($3_1 + 224 | 0 | 0, $1_1 | 0) | 0)) {
         break label$4
        }
        $5_1 = $778($3_1 + 224 | 0 | 0) | 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
        $4_1 = 0;
        if ((HEAP32[($3_1 + 228 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$4
        }
        label$9 : {
         if ($5_1 >>> 0 < 3 >>> 0) {
          break label$9
         }
         label$10 : {
          if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$10
          }
          $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          HEAP32[($3_1 + 148 | 0) >> 2] = 2;
          HEAP32[($3_1 + 144 | 0) >> 2] = $4_1;
          $827(38249 | 0, $3_1 + 144 | 0 | 0);
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = 2;
         break label$6;
        }
        if ($5_1) {
         break label$6
        }
        $6_1 = 0;
        break label$5;
       }
       $859(36951 | 0, 36875 | 0, 970 | 0);
       abort();
      }
      $859(38242 | 0, 36875 | 0, 971 | 0);
      abort();
     }
     $7_1 = ($2_1 | 0) == (1986618469 | 0) ? 78 : 28;
     $8_1 = $2_1 & 255 | 0;
     $9_1 = $2_1 >>> 24 | 0;
     $10_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $11_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $12_1 = ($3_1 + 112 | 0) + 20 | 0;
     $13_1 = ($2_1 | 0) == (1936684398 | 0);
     $6_1 = 0;
     label$11 : while (1) {
      $14_1 = $754($3_1 + 224 | 0 | 0) | 0;
      label$12 : {
       label$13 : {
        if (!($427($3_1 + 224 | 0 | 0, $3_1 + 208 | 0 | 0) | 0)) {
         break label$13
        }
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
        $90$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $93$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $90$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $93$hi;
        i64toi32_i32$3 = $756($0_1 | 0) | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$12
        }
       }
       if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[$3_1 >> 2] = $6_1;
       $827(38306 | 0, $3_1 | 0);
       break label$5;
      }
      $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
      label$14 : {
       label$15 : {
        label$16 : {
         $15_1 = ($2_1 | 0) != (1986618469 | 0);
         if ($15_1) {
          break label$16
         }
         $16_1 = 0;
         $4_1 = 0;
         if (($5_1 | 0) == (1701733238 | 0)) {
          break label$15
         }
         break label$14;
        }
        $16_1 = 0;
        label$17 : {
         if (($2_1 | 0) == (1936684398 | 0)) {
          break label$17
         }
         $4_1 = 0;
         break label$14;
        }
        $4_1 = 0;
        if (($5_1 | 0) != (1701733217 | 0)) {
         break label$14
        }
       }
       $17_1 = ($3_1 + 176 | 0) + 8 | 0;
       i64toi32_i32$3 = ($3_1 + 224 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $118_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $17_1;
       HEAP32[i64toi32_i32$2 >> 2] = $118_1;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 224 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($3_1 + 228 | 0) >> 2] | 0;
       $121_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[($3_1 + 176 | 0) >> 2] = $121_1;
       HEAP32[($3_1 + 180 | 0) >> 2] = i64toi32_i32$2;
       $766($3_1 + 176 | 0 | 0, $7_1 | 0) | 0;
       $16_1 = ($3_1 + 192 | 0) + 8 | 0;
       i64toi32_i32$3 = $17_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $131_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $16_1;
       HEAP32[i64toi32_i32$2 >> 2] = $131_1;
       HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
       $134_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[($3_1 + 192 | 0) >> 2] = $134_1;
       HEAP32[($3_1 + 196 | 0) >> 2] = i64toi32_i32$2;
       label$18 : {
        label$19 : {
         $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
         if (!$5_1) {
          break label$19
         }
         label$20 : while (1) {
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$2 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$2;
          $20$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $146$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $20$hi;
          i64toi32_i32$3 = i64toi32_i32$2;
          i64toi32_i32$2 = $146$hi;
          i64toi32_i32$0 = $5_1;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < $5_1 >>> 0 | 0) | 0) {
           break label$19
          }
          i64toi32_i32$3 = $20$hi;
          $4_1 = $771($3_1 + 192 | 0 | 0, $20_1 | 0) | 0;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$3 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
          $154$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          $156$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $154$hi;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$3 = $156$hi;
          i64toi32_i32$2 = $4_1;
          if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
           break label$19
          }
          label$21 : {
           if ((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) != (1936289382 | 0)) {
            break label$21
           }
           if ($4_1 >>> 0 >= 129 >>> 0) {
            break label$18
           }
           $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
           if (!$5_1) {
            break label$19
           }
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$0 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
           $171$hi = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           $173$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $171$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $173$hi;
           i64toi32_i32$3 = $5_1;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < $5_1 >>> 0 | 0) | 0) {
            break label$19
           }
           label$22 : {
            if ((HEAP32[($3_1 + 168 | 0) >> 2] | 0 | 0) != (1718775137 | 0)) {
             break label$22
            }
            $5_1 = $778($3_1 + 176 | 0 | 0) | 0;
            if ((HEAP32[($3_1 + 180 | 0) >> 2] | 0 | 0) < (0 | 0)) {
             break label$19
            }
            HEAP32[($3_1 + 216 | 0) >> 2] = $5_1;
           }
           if (!$4_1) {
            break label$19
           }
           break label$18;
          }
          $766($3_1 + 176 | 0 | 0, $4_1 - $5_1 | 0 | 0) | 0;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
          $196_1 = i64toi32_i32$2;
          i64toi32_i32$2 = $16_1;
          HEAP32[i64toi32_i32$2 >> 2] = $196_1;
          HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$3 = $3_1;
          i64toi32_i32$1 = HEAP32[($3_1 + 176 | 0) >> 2] | 0;
          i64toi32_i32$2 = HEAP32[($3_1 + 180 | 0) >> 2] | 0;
          $199_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $3_1;
          HEAP32[($3_1 + 192 | 0) >> 2] = $199_1;
          HEAP32[($3_1 + 196 | 0) >> 2] = i64toi32_i32$2;
          $5_1 = $427($3_1 + 176 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
          if ($5_1) {
           continue label$20
          }
          break label$20;
         };
        }
        $4_1 = 0;
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$18
        }
        $4_1 = 0;
        $827(38343 | 0, 0 | 0);
       }
       $16_1 = 1;
      }
      label$23 : {
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$23
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$23
       }
       $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
       HEAP32[(($3_1 + 112 | 0) + 16 | 0) >> 2] = $5_1 >>> 24 | 0;
       HEAP32[(($3_1 + 112 | 0) + 28 | 0) >> 2] = $5_1 & 255 | 0;
       HEAP32[$12_1 >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
       HEAP32[(($3_1 + 112 | 0) + 24 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
       HEAP32[($3_1 + 112 | 0) >> 2] = $9_1;
       HEAP32[($3_1 + 116 | 0) >> 2] = $11_1;
       HEAP32[($3_1 + 120 | 0) >> 2] = $10_1;
       HEAP32[($3_1 + 124 | 0) >> 2] = $8_1;
       $827(38442 | 0, $3_1 + 112 | 0 | 0);
      }
      $17_1 = 24;
      label$24 : {
       label$25 : {
        label$26 : {
         label$27 : {
          label$28 : {
           if ($13_1) {
            break label$28
           }
           if ($15_1) {
            break label$24
           }
           label$29 : {
            label$30 : {
             $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
             if (($5_1 | 0) > (1685481572 | 0)) {
              break label$30
             }
             label$31 : {
              if (($5_1 | 0) > (1685220712 | 0)) {
               break label$31
              }
              if (($5_1 + -1635148593 | 0) >>> 0 < 4 >>> 0) {
               break label$25
              }
              if (($5_1 | 0) != (1635135537 | 0)) {
               break label$24
              }
              $17_1 = 23;
              if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$24
              }
              if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$24
              }
              $827(38689 | 0, 0 | 0);
              break label$24;
             }
             label$32 : {
              if (($5_1 | 0) > (1685479797 | 0)) {
               break label$32
              }
              if (($5_1 | 0) == (1685220713 | 0)) {
               break label$29
              }
              if (($5_1 | 0) != (1685479729 | 0)) {
               break label$24
              }
              break label$25;
             }
             if (($5_1 | 0) == (1685479798 | 0)) {
              break label$25
             }
             if (($5_1 | 0) != (1685481521 | 0)) {
              break label$24
             }
             break label$26;
            }
            label$33 : {
             label$34 : {
              label$35 : {
               if (($5_1 | 0) > (1835692128 | 0)) {
                break label$35
               }
               label$36 : {
                if (($5_1 | 0) > (1751479856 | 0)) {
                 break label$36
                }
                if (($5_1 | 0) == (1685481573 | 0)) {
                 break label$26
                }
                if (($5_1 | 0) == (1748121139 | 0)) {
                 break label$34
                }
                break label$24;
               }
               if (($5_1 | 0) == (1751479857 | 0)) {
                break label$26
               }
               if (($5_1 | 0) == (1752589105 | 0)) {
                break label$26
               }
               if (($5_1 | 0) != (1785750887 | 0)) {
                break label$24
               }
               break label$27;
              }
              if (($5_1 + -1835692129 | 0) >>> 0 < 2 >>> 0) {
               break label$27
              }
              if (($5_1 | 0) == (1836070006 | 0)) {
               break label$33
              }
              if (($5_1 | 0) != (1932670515 | 0)) {
               break label$24
              }
             }
             $17_1 = 5;
             if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$24
             }
             if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$24
             }
             $827(38587 | 0, 0 | 0);
             break label$24;
            }
            $17_1 = 2;
            if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            $17_1 = 2;
            if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $827(38550 | 0, 0 | 0);
            break label$24;
           }
           $17_1 = 12;
           if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$24
           }
           if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$24
           }
           $827(38660 | 0, 0 | 0);
           break label$24;
          }
          label$37 : {
           label$38 : {
            label$39 : {
             label$40 : {
              label$41 : {
               label$42 : {
                label$43 : {
                 label$44 : {
                  label$45 : {
                   $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
                   if (($5_1 | 0) > (1768775987 | 0)) {
                    break label$45
                   }
                   label$46 : {
                    if (($5_1 | 0) > (1685353314 | 0)) {
                     break label$46
                    }
                    label$47 : {
                     switch ($5_1 + -1633889587 | 0 | 0) {
                     case 1:
                      break label$43;
                     case 0:
                      break label$44;
                     default:
                      break label$47;
                     };
                    }
                    if (($5_1 | 0) == (778924083 | 0)) {
                     break label$38
                    }
                    if (($5_1 | 0) != (1685220723 | 0)) {
                     break label$24
                    }
                    $17_1 = 13;
                    if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                     break label$24
                    }
                    if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                     break label$24
                    }
                    $827(38934 | 0, 0 | 0);
                    break label$24;
                   }
                   $15_1 = $5_1 + -1685353315 | 0;
                   if ($15_1 >>> 0 <= 9 >>> 0) {
                    break label$39
                   }
                   break label$37;
                  }
                  label$48 : {
                   label$49 : {
                    label$50 : {
                     if (($5_1 | 0) > (1935764849 | 0)) {
                      break label$50
                     }
                     label$51 : {
                      if (($5_1 | 0) > (1836069984 | 0)) {
                       break label$51
                      }
                      if (($5_1 | 0) == (1768775988 | 0)) {
                       break label$40
                      }
                      if (($5_1 | 0) == (1819304813 | 0)) {
                       break label$49
                      }
                      break label$24;
                     }
                     if (($5_1 | 0) == (1836069985 | 0)) {
                      break label$48
                     }
                     if (($5_1 | 0) != (1836253201 | 0)) {
                      break label$24
                     }
                     $17_1 = 15;
                     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                      break label$24
                     }
                     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$24
                     }
                     $827(38963 | 0, 0 | 0);
                     break label$24;
                    }
                    label$52 : {
                     if (($5_1 | 0) > (1935767407 | 0)) {
                      break label$52
                     }
                     if (($5_1 | 0) == (1935764850 | 0)) {
                      break label$42
                     }
                     if (($5_1 | 0) != (1935767394 | 0)) {
                      break label$24
                     }
                     $17_1 = 10;
                     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                      break label$24
                     }
                     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                      break label$24
                     }
                     $827(38874 | 0, 0 | 0);
                     break label$24;
                    }
                    if (($5_1 | 0) == (1935767408 | 0)) {
                     break label$41
                    }
                    if (($5_1 | 0) == (1936684916 | 0)) {
                     break label$49
                    }
                    if (($5_1 | 0) != (1953984371 | 0)) {
                     break label$24
                    }
                   }
                   $17_1 = 18;
                   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                    break label$24
                   }
                   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                    break label$24
                   }
                   $827(39034 | 0, 0 | 0);
                   break label$24;
                  }
                  $17_1 = 1;
                  if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                   break label$24
                  }
                  if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                   break label$24
                  }
                  $827(38718 | 0, 0 | 0);
                  break label$24;
                 }
                 $17_1 = 6;
                 if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$24
                 }
                 if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$24
                 }
                 $827(38753 | 0, 0 | 0);
                 break label$24;
                }
                $17_1 = 8;
                if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$24
                }
                if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$24
                }
                $827(38814 | 0, 0 | 0);
                break label$24;
               }
               $17_1 = 9;
               if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                break label$24
               }
               if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$24
               }
               $827(38844 | 0, 0 | 0);
               break label$24;
              }
              $17_1 = 11;
              if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$24
              }
              if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$24
              }
              $827(38904 | 0, 0 | 0);
              break label$24;
             }
             $17_1 = 16;
             if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$24
             }
             if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$24
             }
             $827(38998 | 0, 0 | 0);
             break label$24;
            }
            if (!((1 << $15_1 | 0) & 549 | 0)) {
             break label$37
            }
            $17_1 = 19;
            if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$24
            }
            if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$24
            }
            $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
            HEAP32[($3_1 + 96 | 0) >> 2] = $5_1 >>> 24 | 0;
            HEAP32[($3_1 + 108 | 0) >> 2] = $5_1 & 255 | 0;
            HEAP32[($3_1 + 100 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
            HEAP32[($3_1 + 104 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
            $827(39064 | 0, $3_1 + 96 | 0 | 0);
            break label$24;
           }
           $17_1 = 22;
           if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$24
           }
           if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$24
           }
           $827(39104 | 0, 0 | 0);
           break label$24;
          }
          if (($5_1 | 0) != (1700998451 | 0)) {
           break label$24
          }
          $17_1 = 7;
          if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$24
          }
          if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$24
          }
          $827(38783 | 0, 0 | 0);
          break label$24;
         }
         $17_1 = 17;
         if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$24
         }
         if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$24
         }
         $5_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
         HEAP32[($3_1 + 80 | 0) >> 2] = $5_1 >>> 24 | 0;
         HEAP32[($3_1 + 92 | 0) >> 2] = $5_1 & 255 | 0;
         HEAP32[($3_1 + 84 | 0) >> 2] = ($5_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($3_1 + 88 | 0) >> 2] = ($5_1 >>> 8 | 0) & 255 | 0;
         $827(38618 | 0, $3_1 + 80 | 0 | 0);
         break label$24;
        }
        $17_1 = 20;
        if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$24
        }
        if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$24
        }
        $827(38520 | 0, 0 | 0);
        break label$24;
       }
       $17_1 = 0;
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$24
       }
       $17_1 = 0;
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$24
       }
       $17_1 = 0;
       $827(38491 | 0, 0 | 0);
      }
      label$53 : {
       $5_1 = $813(3352 | 0) | 0;
       if ($5_1) {
        break label$53
       }
       if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = 3352;
       $827(39133 | 0, $3_1 + 16 | 0 | 0);
       break label$5;
      }
      $15_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $17_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $15_1;
      $766($3_1 + 224 | 0 | 0, 6 | 0) | 0;
      $15_1 = $777($3_1 + 224 | 0 | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = $4_1;
      HEAP8[($5_1 + 2 | 0) >> 0] = $16_1;
      HEAP16[$5_1 >> 1] = $15_1;
      $16_1 = $5_1 + 16 | 0;
      $822($16_1 | 0, 0 | 0, 24 | 0) | 0;
      label$54 : {
       label$55 : {
        label$56 : {
         label$57 : {
          if (!$4_1) {
           break label$57
          }
          if ($4_1 >>> 0 >= 129 >>> 0) {
           break label$56
          }
          $768($3_1 + 192 | 0 | 0, $5_1 + 44 | 0 | 0, $4_1 | 0) | 0;
         }
         label$58 : {
          label$59 : {
           $4_1 = $754($3_1 + 224 | 0 | 0) | 0;
           if ($4_1 >>> 0 < $14_1 >>> 0) {
            break label$59
           }
           i64toi32_i32$3 = $3_1;
           i64toi32_i32$2 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
           $20_1 = i64toi32_i32$2;
           $20$hi = i64toi32_i32$1;
           $15_1 = $4_1 - $14_1 | 0;
           i64toi32_i32$1 = 0;
           $502$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$3 = i64toi32_i32$2;
           i64toi32_i32$2 = $502$hi;
           i64toi32_i32$0 = $15_1;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
            break label$59
           }
           i64toi32_i32$3 = $20$hi;
           $15_1 = $20_1 - $15_1 | 0;
           break label$58;
          }
          $15_1 = 0;
          if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$58
          }
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$3 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
          HEAP32[($3_1 + 64 | 0) >> 2] = i64toi32_i32$3;
          HEAP32[($3_1 + 68 | 0) >> 2] = $4_1 - $14_1 | 0;
          $827(39259 | 0, $3_1 + 64 | 0 | 0);
         }
         $4_1 = $5_1 + 8 | 0;
         label$60 : {
          switch ($17_1 | 0) {
          case 0:
           if ($441($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $15_1 | 0, $16_1 | 0) | 0) {
            break label$54
           }
           if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$55
           }
           $827(39310 | 0, 0 | 0);
           break label$55;
          case 1:
           label$76 : {
            if ($442($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $15_1 | 0, $16_1 | 0) | 0) {
             break label$76
            }
            label$77 : {
             if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$77
             }
             $827(39360 | 0, 0 | 0);
            }
            HEAP32[$4_1 >> 2] = 24;
           }
           label$78 : {
            $17_1 = HEAPU8[($5_1 + 206 | 0) >> 0] | 0;
            if (($17_1 | 0) == (64 | 0)) {
             break label$78
            }
            if (($17_1 | 0) != (107 | 0)) {
             break label$54
            }
            HEAP32[$4_1 >> 2] = 14;
            break label$54;
           }
           if ((HEAPU8[($5_1 + 208 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break label$54
           }
           HEAP32[$4_1 >> 2] = 21;
           break label$54;
          case 2:
           $443($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0);
           break label$54;
          case 5:
           if (!($444($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 6:
          case 7:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 8:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 9:
          case 10:
          case 11:
           label$79 : {
            $17_1 = $754($3_1 + 224 | 0 | 0) | 0;
            if ($17_1 >>> 0 < $14_1 >>> 0) {
             break label$79
            }
            i64toi32_i32$0 = $3_1;
            i64toi32_i32$1 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
            i64toi32_i32$3 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
            $20_1 = i64toi32_i32$1;
            $20$hi = i64toi32_i32$3;
            $16_1 = $17_1 - $14_1 | 0;
            i64toi32_i32$3 = 0;
            $588$hi = i64toi32_i32$3;
            i64toi32_i32$3 = $20$hi;
            i64toi32_i32$0 = i64toi32_i32$1;
            i64toi32_i32$1 = $588$hi;
            i64toi32_i32$2 = $16_1;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
             break label$79
            }
            i64toi32_i32$0 = $20$hi;
            $17_1 = $20_1 - $16_1 | 0;
           }
           if (!($445($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $17_1 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 15:
           if (!($446($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 16:
           if (!($447($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 17:
           if (!($448($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 18:
           if (!($449($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 19:
           if (!($450($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, HEAP32[($3_1 + 216 | 0) >> 2] | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 20:
           if (!($451($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $16_1 | 0, $3_1 + 208 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 22:
           if (!($438($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0) | 0)) {
            break label$55
           }
           break label$54;
          case 23:
           if ($452($3_1 + 224 | 0 | 0, $5_1 + 176 | 0 | 0, $16_1 | 0) | 0) {
            break label$54
           }
           if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$55
           }
           $827(39411 | 0, 0 | 0);
           break label$55;
          default:
           break label$60;
          };
         }
         if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$54
         }
         HEAP32[(($3_1 + 32 | 0) + 16 | 0) >> 2] = $9_1;
         HEAP32[(($3_1 + 32 | 0) + 20 | 0) >> 2] = $11_1;
         HEAP32[(($3_1 + 32 | 0) + 24 | 0) >> 2] = $10_1;
         HEAP32[(($3_1 + 32 | 0) + 28 | 0) >> 2] = $8_1;
         $17_1 = HEAP32[($3_1 + 216 | 0) >> 2] | 0;
         HEAP32[($3_1 + 32 | 0) >> 2] = $17_1 >>> 24 | 0;
         HEAP32[($3_1 + 44 | 0) >> 2] = $17_1 & 255 | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = ($17_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($3_1 + 40 | 0) >> 2] = ($17_1 >>> 8 | 0) & 255 | 0;
         $827(39461 | 0, $3_1 + 32 | 0 | 0);
         break label$54;
        }
        $859(39176 | 0, 36875 | 0, 1176 | 0);
        abort();
       }
       HEAP32[$4_1 >> 2] = 24;
      }
      $17_1 = $754($3_1 + 224 | 0 | 0) | 0;
      if ($17_1 >>> 0 < $14_1 >>> 0) {
       break label$3
      }
      label$80 : {
       label$81 : {
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$3;
        $14_1 = $17_1 - $14_1 | 0;
        i64toi32_i32$3 = 0;
        $710$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $710$hi;
        i64toi32_i32$1 = $14_1;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
         break label$81
        }
        i64toi32_i32$2 = $20$hi;
        $766($3_1 + 224 | 0 | 0, $20_1 - $14_1 | 0 | 0) | 0;
        break label$80;
       }
       label$82 : {
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$82
        }
        $827(39548 | 0, 0 | 0);
       }
       HEAP32[$4_1 >> 2] = 24;
      }
      HEAP32[(($1_1 + ($6_1 << 2 | 0) | 0) + 12 | 0) >> 2] = $5_1;
      $6_1 = $6_1 + 1 | 0;
      if ($6_1 >>> 0 < (HEAP32[($1_1 + 8 | 0) >> 2] | 0) >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    $4_1 = 1;
   }
   label$83 : {
    $19_1 = $3_1 + 240 | 0;
    if ($19_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $19_1;
   }
   return $4_1 | 0;
  }
  $859(39529 | 0, 36875 | 0, 1281 | 0);
  abort();
 }
 
 function $441($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $8_1 = 0, $12$hi = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, $12_1 = 0, $81$hi = 0, $111_1 = 0, $116_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!$0_1) {
       break label$6
      }
      if (!$1_1) {
       break label$5
      }
      $5_1 = 0;
      $6_1 = $754($0_1 | 0) | 0;
      if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
       break label$3
      }
      $7_1 = $754($0_1 | 0) | 0;
      $8_1 = $754($0_1 | 0) | 0;
      $9_1 = $427($0_1 | 0, $4_1 + 32 | 0 | 0) | 0;
      if (!$9_1) {
       break label$3
      }
      label$7 : {
       $2_1 = ($6_1 + $2_1 | 0) - $7_1 | 0;
       if ($2_1 >>> 0 <= $9_1 >>> 0) {
        break label$7
       }
       if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1635148611 | 0)) {
        break label$4
       }
      }
      label$8 : while (1) {
       label$9 : {
        if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
        HEAP32[($4_1 + 16 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
        $6_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
        HEAP32[$4_1 >> 2] = $6_1 >>> 24 | 0;
        HEAP32[($4_1 + 12 | 0) >> 2] = $6_1 & 255 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($4_1 + 8 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
        $827(39732 | 0, $4_1 | 0);
       }
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
       $12_1 = i64toi32_i32$1;
       $12$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $81$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $81$hi;
       i64toi32_i32$3 = $2_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > $2_1 >>> 0 | 0) | 0) {
        break label$3
       }
       i64toi32_i32$2 = $12$hi;
       $6_1 = $12_1;
       $766($0_1 | 0, $6_1 - $9_1 | 0 | 0) | 0;
       $8_1 = $754($0_1 | 0) | 0;
       $9_1 = $427($0_1 | 0, $4_1 + 32 | 0 | 0) | 0;
       if (!$9_1) {
        break label$3
       }
       $2_1 = $2_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= $9_1 >>> 0) {
        continue label$8
       }
       if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1635148611 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     $859(36868 | 0, 36875 | 0, 519 | 0);
     abort();
    }
    $859(38054 | 0, 36875 | 0, 520 | 0);
    abort();
   }
   HEAP32[$3_1 >> 2] = $8_1;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
   $111_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $3_1;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $111_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$3 = $4_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $116_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $116_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $5_1 = $439($0_1 | 0, $1_1 | 0, $2_1 - $9_1 | 0 | 0) | 0;
  }
  label$10 : {
   $11_1 = $4_1 + 48 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $442($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $7_1 = 0, $78_1 = 0, $83_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $5_1 = $754($0_1 | 0) | 0;
  $6_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $6_1 = $5_1 + $2_1 | 0;
   $2_1 = $754($0_1 | 0) | 0;
   HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($4_1 + 76 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($427($0_1 | 0, $4_1 + 56 | 0 | 0) | 0)) {
       break label$6
      }
      if ((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) == (1702061171 | 0)) {
       break label$5
      }
     }
     label$7 : while (1) {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$4
      }
      if (($754($0_1 | 0) | 0) >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      $769($0_1 | 0, $4_1 + 72 | 0 | 0);
      $766($0_1 | 0, 2 | 0) | 0;
      $2_1 = $754($0_1 | 0) | 0;
      HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      if (!($427($0_1 | 0, $4_1 + 56 | 0 | 0) | 0)) {
       continue label$7
      }
      if ((HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) != (1702061171 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    $6_1 = 0;
    if (!($429($0_1 | 0, $4_1 + 48 | 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $2_1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $78_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 64 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $83_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (!($578($0_1 | 0, $1_1 + 28 | 0 | 0) | 0)) {
     break label$4
    }
    $6_1 = 1;
    label$8 : {
     label$9 : {
      label$10 : {
       $0_1 = HEAPU8[($1_1 + 30 | 0) >> 0] | 0;
       switch ($0_1 + -103 | 0 | 0) {
       case 4:
        break label$3;
       case 1:
       case 2:
       case 3:
        break label$8;
       case 0:
        break label$9;
       default:
        break label$10;
       };
      }
      if (($0_1 | 0) != (64 | 0)) {
       break label$8
      }
     }
     $0_1 = 39593;
     label$11 : {
      $2_1 = (HEAPU8[($1_1 + 32 | 0) >> 0] | 0) + -1 | 0;
      if (($2_1 & 255 | 0) >>> 0 > 4 >>> 0) {
       break label$11
      }
      $0_1 = HEAP32[(((($2_1 << 24 | 0) >> 24 | 0) << 2 | 0) + 40708 | 0) >> 2] | 0;
     }
     $2_1 = 0;
     label$12 : {
      $5_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
      if ($5_1 >>> 0 > 12 >>> 0) {
       break label$12
      }
      $2_1 = HEAP32[(($5_1 << 2 | 0) + 39808 | 0) >> 2] | 0;
     }
     if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$3
     }
     if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     $5_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
     $3_1 = HEAPU8[($1_1 + 33 | 0) >> 0] | 0;
     HEAP32[($4_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 34 | 0) >> 0] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $827(39900 | 0, $4_1 + 16 | 0 | 0);
     break label$3;
    }
    if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$4_1 >> 2] = HEAPU8[($1_1 + 30 | 0) >> 0] | 0;
    $827(39984 | 0, $4_1 | 0);
   }
   $6_1 = 0;
  }
  label$13 : {
   $8_1 = $4_1 + 80 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $443($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
     break label$4
    }
    if (!($428($0_1 | 0, 1702061171 | 0, 0 | 0) | 0)) {
     break label$4
    }
    if (!($429($0_1 | 0, $3_1 + 8 | 0 | 0) | 0)) {
     break label$4
    }
    if (!($578($0_1 | 0, $1_1 + 80 | 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
    if (($0_1 | 0) == (32 | 0)) {
     break label$3
    }
    label$5 : {
     if ((($0_1 + -96 | 0) & 255 | 0) >>> 0 > 5 >>> 0) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = 3;
     break label$3;
    }
    label$6 : {
     if (($0_1 | 0) != (106 | 0)) {
      break label$6
     }
     HEAP32[$2_1 >> 2] = 4;
     break label$3;
    }
    if (!($834(62104 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$3_1 >> 2] = HEAPU8[($1_1 + 82 | 0) >> 0] | 0;
    $827(40046 | 0, $3_1 | 0);
   }
   HEAP32[$2_1 >> 2] = 24;
  }
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $436($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $445($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $4_1 = $754($0_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   $5_1 = $4_1 + $2_1 | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   label$4 : {
    label$5 : {
     if (!($427($0_1 | 0, $3_1 + 40 | 0 | 0) | 0)) {
      break label$5
     }
     if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) == (1684106610 | 0)) {
      break label$4
     }
    }
    label$6 : while (1) {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$4
     }
     if (($754($0_1 | 0) | 0) >>> 0 >= $5_1 >>> 0) {
      break label$4
     }
     $769($0_1 | 0, $3_1 + 56 | 0 | 0);
     $766($0_1 | 0, 2 | 0) | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
     if (!($427($0_1 | 0, $3_1 + 40 | 0 | 0) | 0)) {
      continue label$6
     }
     if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) != (1684106610 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP8[($1_1 + 32 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP16[($1_1 + 34 | 0) >> 1] = $777($0_1 | 0) | 0;
   HEAP8[($1_1 + 36 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 37 | 0) >> 0] = $772($0_1 | 0) | 0;
   $5_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $5_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   $2_1 = HEAPU8[($1_1 + 32 | 0) >> 0] | 0;
   $4_1 = HEAPU16[($1_1 + 34 | 0) >> 1] | 0;
   $6_1 = HEAPU8[($1_1 + 36 | 0) >> 0] | 0;
   HEAP32[($3_1 + 28 | 0) >> 2] = HEAPU8[($1_1 + 37 | 0) >> 0] | 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1 & 255 | 0;
   HEAP32[$3_1 >> 2] = $0_1 >>> 24 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = ($0_1 >>> 8 | 0) & 255 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = ($0_1 >>> 16 | 0) & 255 | 0;
   $827(40108 | 0, $3_1 | 0);
  }
  label$7 : {
   $8_1 = $3_1 + 64 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $778($0_1 | 0) | 0;
   $2_1 = 0;
   if (!($428($0_1 | 0, 2002876005 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = 0;
   if (!($428($0_1 | 0, 1718775137 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = 0;
   if (!($428($0_1 | 0, $778($0_1 | 0) | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $2_1 = $260($1_1 + 28 | 0 | 0, $0_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $447($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
      break label$5
     }
     if ($453($0_1 | 0, $1_1 + 28 | 0 | 0) | 0) {
      break label$4
     }
     break label$3;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = 64;
    HEAP32[($1_1 + 32 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, 34);
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $827(40225 | 0, $2_1 | 0);
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $448($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 80 | 0) >> 2] = $2_1;
  return $436($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $449($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
  $2_1 = 0;
  label$3 : {
   if (!($438($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if ((HEAPU16[$1_1 >> 1] | 0 | 0) != (1 | 0)) {
      break label$5
     }
     if ($453($0_1 | 0, $1_1 + 32 | 0 | 0) | 0) {
      break label$4
     }
     break label$3;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    HEAP32[($1_1 + 36 | 0) >> 2] = Math_imul(HEAPU16[($1_1 + 2 | 0) >> 1] | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 3 | 0;
   }
   $2_1 = 1;
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $827(40400 | 0, $3_1 | 0);
  }
  label$6 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $2_1 | 0;
 }
 
 function $450($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
  return $438($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $451($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $28_1 = 0, $31_1 = 0, $63$hi = 0, $65$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $5_1 = 0;
    label$5 : {
     if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $28_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $28_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $31_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = 0;
     HEAP8[($1_1 + 120 | 0) >> 0] = 0;
     if (!($428($0_1 | 0, 1752589123 | 0, $2_1 | 0) | 0)) {
      break label$5
     }
     $2_1 = $772($0_1 | 0) | 0;
     $5_1 = 0;
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (($2_1 | 0) == (1 | 0)) {
       break label$6
      }
      $5_1 = 0;
      if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$4_1 >> 2] = $2_1;
      $827(40467 | 0, $4_1 | 0);
      break label$5;
     }
     label$7 : {
      if ($274($0_1 | 0, $1_1 + 80 | 0 | 0, 56088 | 0) | 0) {
       break label$7
      }
      $5_1 = 0;
      if (!($835(62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      $5_1 = 0;
      $827(40517 | 0, 0 | 0);
      break label$5;
     }
     $5_1 = 0;
     label$8 : {
      if (!($428($4_1 + 16 | 0 | 0, 1685480259 | 0, 0 | 0) | 0)) {
       break label$8
      }
      $0_1 = $754($4_1 + 16 | 0 | 0) | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $63$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $65$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $63$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $65$hi;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 <= $0_1 >>> 0 | 0) | 0) {
       break label$8
      }
      $5_1 = 0;
      if (!($679($4_1 + 16 | 0 | 0, $1_1 + 121 | 0 | 0) | 0)) {
       break label$5
      }
      $5_1 = 1;
      HEAP8[($1_1 + 120 | 0) >> 0] = 1;
      break label$5;
     }
     $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if (($0_1 | 0) == (1685481521 | 0)) {
      break label$5
     }
     if (($0_1 | 0) == (1685481573 | 0)) {
      break label$5
     }
     $5_1 = 1;
    }
    label$9 : {
     $7_1 = $4_1 + 32 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $5_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 553 | 0);
   abort();
  }
  $859(40462 | 0, 36875 | 0, 554 | 0);
  abort();
 }
 
 function $452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $9$hi = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0, $62$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (!$1_1) {
     break label$3
    }
    $4_1 = 0;
    label$5 : {
     if (!($436($0_1 | 0, $1_1 | 0) | 0)) {
      break label$5
     }
     $5_1 = $428($0_1 | 0, 1635135811 | 0, $2_1 | 0) | 0;
     if (!$5_1) {
      break label$5
     }
     $6_1 = $754($0_1 | 0) | 0;
     if (!($281($0_1 | 0, $1_1 + 80 | 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = $754($0_1 | 0) | 0;
     label$6 : {
      if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
      HEAP32[($3_1 + 20 | 0) >> 2] = $4_1 - $6_1 | 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      $827(40568 | 0, $3_1 + 16 | 0 | 0);
     }
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       $9_1 = i64toi32_i32$1;
       $9$hi = i64toi32_i32$0;
       $4_1 = $4_1 - $6_1 | 0;
       i64toi32_i32$0 = 0;
       $62$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = $62$hi;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $4_1 >>> 0 | 0) | 0) {
        break label$8
       }
       $454(928 | 0);
       break label$7;
      }
      i64toi32_i32$2 = $9$hi;
      HEAP32[($1_1 + 92 | 0) >> 2] = $9_1 - ($4_1 + $5_1 | 0) | 0;
      label$9 : {
       if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
       $827(40661 | 0, $3_1 | 0);
      }
      $4_1 = 1;
      if (($768($0_1 | 0, $1_1 + 96 | 0 | 0, HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0) | 0 | 0) == (HEAP32[($1_1 + 92 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $454(934 | 0);
     }
     $4_1 = 0;
    }
    label$10 : {
     $8_1 = $3_1 + 32 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return $4_1 | 0;
   }
   $859(36868 | 0, 36875 | 0, 910 | 0);
   abort();
  }
  $859(40564 | 0, 36875 | 0, 911 | 0);
  abort();
 }
 
 function $453($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($458($0_1 | 0, $2_1 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $3_1 = 1;
  }
  label$4 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  $862(36875 | 0, $0_1 | 0, 8 | 0) | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $2_1 = ($0_1 + ($1_1 << 2 | 0) | 0) + 12 | 0;
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (20 | 0)) {
       break label$4
      }
      $278($3_1 + 256 | 0 | 0, 56088 | 0);
      $3_1 = HEAP32[$2_1 >> 2] | 0;
     }
     $815($3_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 >>> 0 < (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   return;
  }
  $859(38242 | 0, 36875 | 0, 1301 | 0);
  abort();
 }
 
 function $456($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($429($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if (!($429($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $782($0_1 | 0) | 0;
   HEAP8[($1_1 + 8 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $5$hi = 0, $37_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[$1_1 >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
  label$3 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($0_1 | 0) < (0 | 0)) {
    break label$3
   }
   if ((HEAP8[(0 + 62104 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62104 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $37_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $37_1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   HEAP32[i64toi32_i32$1 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $827(40287 | 0, i64toi32_i32$1 | 0);
  }
  label$4 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return ($0_1 ^ -1 | 0) >>> 31 | 0 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(40753 | 0, 40760 | 0, 93 | 0);
   abort();
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 126;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[$0_1 >> 1] = $1_1;
 }
 
 function $460($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 0 | 0;
 }
 
 function $461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $5_1 = -1;
    break label$3;
   }
   $859(40840 | 0, 40760 | 0, 110 | 0);
   abort();
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      $6_1 = $5_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
      $4_1 = $778($2_1 | 0) | 0;
      if (($4_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$7
      }
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         label$12 : {
          $5_1 = $4_1 & 255 | 0;
          if ($462($5_1 | 0) | 0) {
           break label$12
          }
          label$13 : {
           switch (($4_1 & 255 | 0) + -186 | 0 | 0) {
           case 0:
            $766($2_1 | 0, 8 | 0) | 0;
            break label$10;
           case 1:
            break label$13;
           default:
            break label$6;
           };
          }
          $4_1 = $777($2_1 | 0) | 0;
          if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
           break label$11
          }
          if (($766($2_1 | 0, $4_1 | 0) | 0 | 0) == ($4_1 | 0)) {
           break label$10
          }
          break label$11;
         }
         $7_1 = $777($2_1 | 0) | 0;
         label$15 : {
          label$16 : {
           label$17 : {
            label$18 : {
             if (($5_1 | 0) != (HEAPU16[$0_1 >> 1] | 0 | 0)) {
              break label$18
             }
             label$19 : while (1) {
              $4_1 = $764($2_1 | 0) | 0;
              if (($4_1 | 0) == (255 | 0)) {
               continue label$19
              }
              break label$19;
             };
             if (($4_1 | 0) == (-1 | 0)) {
              break label$11
             }
             label$20 : {
              if (($4_1 & 192 | 0 | 0) != (64 | 0)) {
               break label$20
              }
              $772($2_1 | 0) | 0;
              $4_1 = $772($2_1 | 0) | 0;
             }
             label$21 : {
              if (($4_1 & 224 | 0 | 0) == (32 | 0)) {
               break label$21
              }
              $5_1 = $6_1;
              break label$18;
             }
             $5_1 = $778($2_1 | 0) | 0;
             $5_1 = ($5_1 >>> 3 | 0) & 536854528 | 0 | (($4_1 << 28 | 0) & -536870912 | 0) | 0 | (($5_1 >>> 2 | 0) & 16383 | 0) | 0;
             label$22 : {
              if (!($4_1 & 16 | 0)) {
               break label$22
              }
              $766($2_1 | 0, 5 | 0) | 0;
             }
             HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
             $5_1 = $6_1;
             if (FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0]($0_1, 0, $1_1, $2_1, $7_1) | 0) {
              break label$17
             }
            }
            $769($2_1 | 0, $3_1 + 8 | 0 | 0);
            $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            $6_1 = $7_1 + 6 | 0;
            if (($4_1 | 0) < ($6_1 | 0)) {
             break label$16
            }
            $4_1 = $4_1 - $6_1 | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
            HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $6_1 | 0;
            break label$15;
           }
           $769($2_1 | 0, $3_1 + 8 | 0 | 0);
           $5_1 = -2;
           break label$5;
          }
          $766($2_1 | 0, $6_1 | 0) | 0;
          $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         }
         if (($4_1 | 0) < (0 | 0)) {
          break label$5
         }
         continue label$8;
        }
        $5_1 = $6_1;
        break label$5;
       }
       HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
       $4_1 = $778($2_1 | 0) | 0;
       if (($4_1 & -256 | 0 | 0) == (256 | 0)) {
        continue label$9
       }
       break label$9;
      };
      break label$8;
     };
    }
    if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(40847 | 0, $3_1 | 0);
   }
   $769($2_1 | 0, $3_1 + 8 | 0 | 0);
   $5_1 = -3;
  }
  label$23 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 & -4 | 0 | 0) == (188 | 0) | ($0_1 & 192 | 0 | 0) == (192 | 0) | 0 | 0;
 }
 
 function $463($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9_1 = 0, i64toi32_i32$4 = 0, $11_1 = 0, $10_1 = 0, $3_1 = 0, $69_1 = 0, $72_1 = 0, $133_1 = 0, $135$hi = 0, $137$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $10_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 517 | 0);
  }
  $3_1 = $0_1 + 24 | 0;
  $4_1 = 0;
  $5_1 = 0;
  label$5 : {
   label$6 : while (1) {
    $6_1 = $798($1_1 | 0) | 0;
    label$7 : {
     if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(40933 | 0, $2_1 | 0);
    }
    label$8 : {
     if (!$6_1) {
      break label$8
     }
     $744(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $6_1 | 0);
     $735($6_1 | 0);
     $4_1 = ($756($6_1 | 0) | 0) + $4_1 | 0;
    }
    label$9 : while (1) {
     $7_1 = $740(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     $763($2_1 + 32 | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
           case 0:
            $8_1 = 0;
            $9_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
            if ($7_1 >>> 0 < $9_1 >>> 0) {
             break label$10
            }
            i64toi32_i32$2 = ($2_1 + 32 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $69_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $69_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
            $72_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $2_1;
            HEAP32[($2_1 + 16 | 0) >> 2] = $72_1;
            HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
            $766($2_1 + 32 | 0 | 0, $9_1 | 0) | 0;
            label$18 : {
             $8_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 32 | 0 | 0, 14996 | 0, $3_1 | 0) | 0;
             if (!$8_1) {
              break label$18
             }
             label$19 : {
              $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$19
              }
              $5_1 = FUNCTION_TABLE[HEAP32[($7_1 + 8 | 0) >> 2] | 0]($7_1, HEAPU16[($0_1 + 20 | 0) >> 1] | 0, $8_1) | 0;
              break label$18;
             }
             $735($8_1 | 0);
             $5_1 = 0;
            }
            HEAP32[($0_1 + 36 | 0) >> 2] = 0;
            HEAP32[($0_1 + 16 | 0) >> 2] = 0;
            break label$14;
           case 1:
            $8_1 = $464($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
            break label$10;
           case 2:
            break label$11;
           case 4:
            break label$13;
           case 3:
            break label$15;
           default:
            break label$12;
           };
          }
          $8_1 = $766($2_1 + 32 | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
          $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
          if ($7_1 >>> 0 < $8_1 >>> 0) {
           break label$5
          }
          $7_1 = $7_1 - $8_1 | 0;
          HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
          $8_1 = 0;
          if ($7_1) {
           break label$10
          }
         }
         $465($0_1 | 0);
         $8_1 = 1;
         break label$10;
        }
        $8_1 = $466($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
        break label$10;
       }
       $859(40996 | 0, 40760 | 0, 576 | 0);
       abort();
      }
      $8_1 = $467($0_1 | 0, $2_1 + 32 | 0 | 0) | 0;
     }
     $7_1 = $754($2_1 + 32 | 0 | 0) | 0;
     $133_1 = $0_1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $135$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $137$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $135$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $137$hi;
     i64toi32_i32$4 = i64toi32_i32$2 + $7_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < $7_1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = $133_1;
     HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$5;
     $745(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0);
     label$20 : {
      $7_1 = ($5_1 | 0) == (1 | 0);
      if ($7_1) {
       break label$20
      }
      if ($8_1) {
       continue label$9
      }
     }
     break label$9;
    };
    label$21 : {
     if ($7_1) {
      break label$21
     }
     if ($6_1) {
      continue label$6
     }
    }
    break label$6;
   };
   label$22 : {
    $11_1 = $2_1 + 48 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $4_1 | 0;
  }
  $859(40967 | 0, 40760 | 0, 566 | 0);
  abort();
 }
 
 function $464($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $778($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$6
      }
      $4_1 = $3_1 & 255 | 0;
      if (!($462($4_1 | 0) | 0)) {
       break label$5
      }
      $5_1 = 1;
      if (!($469($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0)) {
       break label$4
      }
      break label$3;
     }
     $769($1_1 | 0, $2_1 + 8 | 0 | 0);
     $470($0_1 | 0);
     $5_1 = 1;
     break label$3;
    }
    $5_1 = 1;
    if ($468($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $5_1 = 0;
  }
  label$7 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 1;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : while (1) {
   $3_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = $764($1_1 | 0) | 0;
   if (($5_1 | 0) > (0 | 0)) {
    continue label$3
   }
   break label$3;
  };
  HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
  label$4 : {
   label$5 : {
    if ($5_1) {
     break label$5
    }
    $5_1 = $764($1_1 | 0) | 0;
    if ($5_1) {
     break label$5
    }
    $3_1 = 1;
    $5_1 = $764($1_1 | 0) | 0;
    if (($5_1 | 0) != (1 | 0)) {
     break label$5
    }
    $769($1_1 | 0, $2_1 + 8 | 0 | 0);
    $465($0_1 | 0);
    break label$4;
   }
   $3_1 = 1;
   if (($5_1 | 0) != (-1 | 0)) {
    break label$4
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $3_1 = 0;
  }
  label$6 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $467($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $778($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = 1;
    if ($468($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $769($1_1 | 0, $2_1 + 8 | 0 | 0);
   $4_1 = 0;
  }
  label$5 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $468($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($2_1 + -441 | 0 | 0) {
      case 1:
       $766($1_1 | 0, 8 | 0) | 0;
       $3_1 = $778($1_1 | 0) | 0;
       $2_1 = 0;
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$1
       }
       label$6 : {
        if (($3_1 | 0) != (443 | 0)) {
         break label$6
        }
        return $477($0_1 | 0, $1_1 | 0) | 0 | 0;
       }
       if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
        break label$3
       }
       $2_1 = $3_1 & 255 | 0;
       if (!($462($2_1 | 0) | 0)) {
        break label$3
       }
       return $469($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
      case 0:
       break label$4;
      default:
       break label$3;
      };
     }
     $465($0_1 | 0);
     break label$2;
    }
    $470($0_1 | 0);
   }
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $469($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $35_1 = 0, $38_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = $777($1_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $6_1 = $479($0_1 | 0, $2_1 | 0) | 0;
   label$4 : {
    label$5 : {
     if ($2_1 >>> 0 < 189 >>> 0) {
      break label$5
     }
     if (!$6_1) {
      break label$5
     }
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $35_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $35_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $38_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[$3_1 >> 2] = $38_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     label$6 : while (1) {
      $7_1 = $764($1_1 | 0) | 0;
      if (($7_1 | 0) == (255 | 0)) {
       continue label$6
      }
      break label$6;
     };
     if (($7_1 | 0) == (-1 | 0)) {
      break label$3
     }
     label$7 : {
      if (($7_1 & 192 | 0 | 0) != (64 | 0)) {
       break label$7
      }
      $772($1_1 | 0) | 0;
      $7_1 = $772($1_1 | 0) | 0;
     }
     $8_1 = 0;
     $9_1 = 0;
     label$8 : {
      if (($7_1 & 224 | 0 | 0) != (32 | 0)) {
       break label$8
      }
      $8_1 = $778($1_1 | 0) | 0;
      $9_1 = ($8_1 >>> 3 | 0) & 536854528 | 0 | (($7_1 << 28 | 0) & -536870912 | 0) | 0 | (($8_1 >>> 2 | 0) & 16383 | 0) | 0;
      $8_1 = 1;
      if (!($7_1 & 16 | 0)) {
       break label$8
      }
      $766($1_1 | 0, 5 | 0) | 0;
     }
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$3
     }
     label$9 : {
      $1_1 = $767($3_1 | 0, $1_1 | 0) | 0;
      if ($1_1 >>> 0 > $4_1 >>> 0) {
       break label$9
      }
      $480($0_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 - $1_1 | 0 | 0, $8_1 | 0, $9_1 | 0);
      break label$4;
     }
     $470($0_1 | 0);
     break label$4;
    }
    $478($0_1 | 0, $4_1 | 0);
   }
   $5_1 = 1;
  }
  label$10 : {
   $11_1 = $3_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $5_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62120 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62120 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(41071 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(40998 | 0, 40760 | 0, 593 | 0);
   abort();
  }
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 601 | 0);
  }
  $739(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 56 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 611 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$4;
    }
    label$6 : while (1) {
     $3_1 = $2_1;
     $2_1 = HEAP32[$2_1 >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$7 : {
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$7
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   return;
  }
  $859(41002 | 0, 40760 | 0, 612 | 0);
  abort();
 }
 
 function $474($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 623 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(41002 | 0, 40760 | 0, 624 | 0);
   abort();
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
  HEAP16[($1_1 + 4 | 0) >> 1] = $2_1;
  HEAP16[($1_1 + 6 | 0) >> 1] = $3_1;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (40736 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 | 0, 40736 | 0, 40760 | 0, 635 | 0);
  }
  $738(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 2;
 }
 
 function $476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(56 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62120 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 56;
      $827(41018 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 56 | 0, $3_1 | 0, 40736 | 0);
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = 0;
     HEAP32[($3_1 + 48 | 0) >> 2] = $1_1;
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     label$7 : {
      if (!$0_1) {
       break label$7
      }
      $475($3_1 | 0);
      break label$5;
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(40998 | 0, 40760 | 0, 649 | 0);
   abort();
  }
  $859(41010 | 0, 40760 | 0, 650 | 0);
  abort();
 }
 
 function $477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $777($1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $478($0_1 | 0, $2_1 | 0);
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 3;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
 }
 
 function $479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (((HEAPU16[($0_1 + 6 | 0) >> 1] | 0) & $1_1 | 0 | 0) != (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
  HEAP16[($0_1 + 20 | 0) >> 1] = $2_1;
  HEAP16[($0_1 + 32 | 0) >> 1] = 0;
  HEAP8[($0_1 + 31 | 0) >> 0] = $4_1;
  HEAP8[($0_1 + 30 | 0) >> 0] = 0;
  HEAP16[($0_1 + 28 | 0) >> 1] = 127;
  HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = 0;
  label$3 : {
   if (($778($0_1 | 0) | 0 | 0) != (442 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if ((($778($0_1 | 0) | 0) & -251657984 | 0 | 0) != (553648384 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if ((($778($0_1 | 0) | 0) & 25165825 | 0 | 0) != (25165825 | 0)) {
    break label$3
   }
   $2_1 = 0;
   if (($778($0_1 | 0) | 0 | 0) != (443 | 0)) {
    break label$3
   }
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$4 : {
   if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $754($0_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = $2_1 ? 41389 : 41396;
   $827(41352 | 0, $1_1 | 0);
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $482($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = $813(240 | 0) | 0;
     if ($2_1) {
      break label$5
     }
     $2_1 = 0;
     if (!($835(62136 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     HEAP32[$1_1 >> 2] = 240;
     $827(41411 | 0, $1_1 | 0);
     break label$4;
    }
    $845($2_1 | 0, 240 | 0, $2_1 + 12 | 0 | 0, 41104 | 0);
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 192 | 0) >> 2] = 0;
    $471($1_1 + 8 | 0 | 0);
    $0_1 = $476($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
    HEAP32[($2_1 + 196 | 0) >> 2] = $0_1;
    label$6 : {
     if (!$0_1) {
      break label$6
     }
     $474($0_1 | 0, $2_1 | 0, 0 | 0, 0 | 0, 127 | 0);
     break label$4;
    }
    $815($2_1 | 0);
    $2_1 = 0;
   }
   label$7 : {
    $4_1 = $1_1 + 16 | 0;
    if ($4_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $4_1;
   }
   return $2_1 | 0;
  }
  $859(41403 | 0, 41204 | 0, 175 | 0);
  abort();
 }
 
 function $483($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $44_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 119 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $3_1 = 1;
    label$5 : {
     label$6 : {
      if (($1_1 & 224 | 0 | 0) == (192 | 0)) {
       break label$6
      }
      $3_1 = 0;
      if (($1_1 & 240 | 0 | 0) == (224 | 0)) {
       break label$6
      }
      $735($2_1 | 0);
      break label$5;
     }
     $4_1 = $759($2_1 | 0) | 0;
     if (!$4_1) {
      break label$3
     }
     label$7 : {
      if (!(HEAPU8[($4_1 + 7 | 0) >> 0] | 0)) {
       break label$7
      }
      label$8 : {
       if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
        break label$8
       }
       if ((HEAPU8[($0_1 + 209 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 216 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
       i64toi32_i32$2 = $0_1 + 200 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $44_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $0_1;
       HEAP32[($0_1 + 232 | 0) >> 2] = $44_1;
       HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$1;
       break label$7;
      }
      HEAP8[($0_1 + 209 | 0) >> 0] = $1_1;
      HEAP8[($0_1 + 208 | 0) >> 0] = 1;
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[($0_1 + 212 | 0) >> 2] = $4_1;
      i64toi32_i32$2 = $0_1 + 200 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $5_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 224 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 232 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 236 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($0_1 + 216 | 0) >> 2] = $4_1;
     }
     label$9 : {
      $2_1 = $229($0_1 + 20 | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
      if ($2_1) {
       break label$9
      }
      if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
       break label$5
      }
      if ((HEAPU8[($0_1 + 209 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
       break label$5
      }
     }
     label$10 : {
      $3_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
      if ($3_1) {
       break label$10
      }
      label$11 : {
       $3_1 = $813(40 | 0) | 0;
       if ($3_1) {
        break label$11
       }
       $815($2_1 | 0);
       break label$5;
      }
      $214($3_1 | 0, 10 | 0);
      HEAP32[($0_1 + 192 | 0) >> 2] = $3_1;
     }
     if (!$2_1) {
      break label$5
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
     $215($3_1 | 0, $2_1 | 0);
    }
    return 0 | 0;
   }
   $859(41457 | 0, 41204 | 0, 120 | 0);
   abort();
  }
  $859(41464 | 0, 41204 | 0, 130 | 0);
  abort();
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 202 | 0);
  }
  $473(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0, $0_1 | 0);
  $472(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $485($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $11$hi = 0, $9_1 = 0, $8_1 = 0, $42_1 = 0, $48_1 = 0, $50$hi = 0, $72_1 = 0, $80_1 = 0, $83$hi = 0, $143_1 = 0, $143$hi = 0, $146_1 = 0, $146$hi = 0, $148$hi = 0, $152$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) == (41104 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 240 | 0, $0_1 + 12 | 0 | 0, 41104 | 0, 41204 | 0, 218 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 192 | 0) >> 2] | 0) {
    break label$5
   }
   $5_1 = $0_1 + 20 | 0;
   $225($5_1 | 0);
   HEAP8[($0_1 + 208 | 0) >> 0] = 0;
   i64toi32_i32$0 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$0;
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$1;
     HEAP32[($4_1 + 40 | 0) >> 2] = 8192;
     HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
     $42_1 = $4_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     HEAP32[($42_1 + 36 | 0) >> 2] = i64toi32_i32$4;
     $827(41488 | 0, $4_1 + 32 | 0 | 0);
    }
    label$8 : {
     $48_1 = $1_1;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $50$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $50$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $6_1 = $50($48_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 44 | 0 | 0) | 0;
     if (!$6_1) {
      break label$8
     }
     $7_1 = $756($6_1 | 0) | 0;
     label$9 : {
      if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 28 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $7_1;
      HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
      $72_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      HEAP32[($72_1 + 20 | 0) >> 2] = i64toi32_i32$5;
      $827(41526 | 0, $4_1 + 16 | 0 | 0);
     }
     $797($2_1 | 0, $6_1 | 0);
     $80_1 = $0_1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = $83$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $80_1;
     HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$5;
     if (($463(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
      break label$8
     }
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 131073;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      continue label$6
     }
     if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
      continue label$6
     }
    }
    break label$6;
   };
   label$10 : {
    if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    i64toi32_i32$0 = $10$hi;
    $7_1 = $10_1;
    label$11 : {
     label$12 : {
      $2_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
      if ($2_1) {
       break label$12
      }
      $2_1 = 0;
      break label$11;
     }
     $2_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $7_1;
    HEAP32[$4_1 >> 2] = $0_1;
    $827(41567 | 0, $4_1 | 0);
   }
   $6_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
   HEAP32[($0_1 + 192 | 0) >> 2] = 0;
   label$13 : {
    if (!$6_1) {
     break label$13
    }
    $233($5_1 | 0, $6_1 | 0, 0 | 0);
    if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
     break label$13
    }
    $7_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
    if ($7_1 >>> 0 <= $2_1 >>> 0) {
     break label$13
    }
    i64toi32_i32$3 = $0_1 + 232 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $143_1 = i64toi32_i32$0;
    $143$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $0_1 + 224 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $146_1 = i64toi32_i32$5;
    $146$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $143$hi;
    i64toi32_i32$3 = $143_1;
    i64toi32_i32$5 = $146$hi;
    i64toi32_i32$1 = $146_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    i64toi32_i32$4 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$3 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $152$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $148$hi;
    $31_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$3 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$4 | 0, $7_1 - $2_1 | 0 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    HEAP32[($6_1 + 16 | 0) >> 2] = i64toi32_i32$3;
   }
   $475(HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0);
   $227($5_1 | 0);
   label$14 : {
    $9_1 = $4_1 + 48 | 0;
    if ($9_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $9_1;
   }
   return $6_1 | 0;
  }
  $859(41468 | 0, 41204 | 0, 219 | 0);
  abort();
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(56 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $487();
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 56 | 0, $3_1 + 4 | 0 | 0, 41184 | 0);
   label$5 : {
    if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(41283 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 41340;
   $459($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 36 | 0) >> 2] = 0;
   HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 28 | 0) >> 2] = 128;
   i64toi32_i32$1 = $3_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 52 | 0) >> 2] = 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = $3_1;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $487() {
  $862(41204 | 0, 411 | 0, 3 | 0) | 0;
 }
 
 function $488($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $45_1 = 0, $46$hi = 0, $48$hi = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62136 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62136 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAPU16[$0_1 >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(41729 | 0, $5_1 | 0);
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($1_1) {
    break label$4
   }
   $859(41783 | 0, 41204 | 0, 396 | 0);
   abort();
  }
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $3_1 = $754($3_1 | 0) | 0;
  $45_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $46$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $48$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $46$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $48$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $45_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$5 : {
   $9_1 = $5_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return 1 | 0;
 }
 
 function $489($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (41184 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 41184 | 0, 41204 | 0, 366 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(41649 | 0, 41204 | 0, 368 | 0);
   abort();
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $490($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $9$hi = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $42_1 = 0, $44$hi = 0, $47$hi = 0, $53_1 = 0, $55$hi = 0, $58$hi = 0, $65_1 = 0, $68_1 = 0, $121_1 = 0, $124$hi = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (41184 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 41184 | 0, 41204 | 0, 316 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if (!$1_1) {
       break label$8
      }
      if (!$2_1) {
       break label$7
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      $4_1 = $770($1_1 | 0) | 0;
      HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = $2_1;
      $5_1 = i64toi32_i32$2 + 16 | 0;
      label$9 : while (1) {
       label$10 : {
        $2_1 = $461($5_1 | 0, 0 | 0, $1_1 | 0) | 0;
        if (($2_1 | 0) < (0 | 0)) {
         break label$10
        }
        $42_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $44$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $47$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $44$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $47$hi;
        i64toi32_i32$3 = $754($1_1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $42_1;
        HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$5;
        continue label$9;
       }
       $6_1 = 0;
       label$11 : {
        switch ($2_1 + 3 | 0 | 0) {
        case 1:
         if (HEAP32[($0_1 + 36 | 0) >> 2] | 0) {
          break label$6
         }
         $53_1 = $0_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
         $55$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $58$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $55$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $58$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$0 = $53_1;
         HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$4;
         $6_1 = 1;
         break label$5;
        case 0:
         break label$11;
        case 2:
         break label$5;
        default:
         continue label$9;
        };
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 0;
       label$13 : while (1) {
        i64toi32_i32$2 = $1_1 + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $65_1 = i64toi32_i32$4;
        i64toi32_i32$4 = $3_1 + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $65_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $68_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[i64toi32_i32$0 >> 2] = $68_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
        label$14 : {
         label$15 : {
          $2_1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) < (4 | 0)) {
           break label$15
          }
          HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 + -4 | 0;
          $2_1 = HEAP32[$3_1 >> 2] | 0;
          HEAP32[$3_1 >> 2] = $2_1 + 4 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $2_1 = $2_1 << 24 | 0 | (($2_1 << 8 | 0) & 16711680 | 0) | 0 | (($2_1 >>> 8 | 0) & 65280 | 0 | ($2_1 >>> 24 | 0) | 0) | 0;
          break label$14;
         }
         $2_1 = $774($3_1 | 0, 4 | 0) | 0;
        }
        label$16 : {
         if (($2_1 & -256 | 0 | 0) != (256 | 0)) {
          break label$16
         }
         if ($462($2_1 & 255 | 0 | 0) | 0) {
          continue label$9
         }
        }
        if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$5
        }
        label$17 : {
         $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) < (1 | 0)) {
          break label$17
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
         HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
         continue label$13;
        }
        if (($764($1_1 | 0) | 0 | 0) != (-1 | 0)) {
         continue label$13
        }
        break label$13;
       };
       break label$9;
      };
      $859(41707 | 0, 41204 | 0, 351 | 0);
      abort();
     }
     $859(41659 | 0, 41204 | 0, 317 | 0);
     abort();
    }
    $859(41666 | 0, 41204 | 0, 318 | 0);
    abort();
   }
   $859(41676 | 0, 41204 | 0, 328 | 0);
   abort();
  }
  $121_1 = $0_1;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = 0;
  $124$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = $124$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = $121_1;
  HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$1;
  label$18 : {
   $8_1 = $3_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 56 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $492($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(41804 | 0, 41811 | 0, 76 | 0);
   abort();
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 136;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[$0_1 >> 1] = $1_1;
 }
 
 function $493($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 2 | 0;
 }
 
 function $494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
   $5_1 = -1;
   label$4 : {
    label$5 : {
     label$6 : {
      $6_1 = $778($2_1 | 0) | 0;
      if (($6_1 & -256 | 0 | 0) != (256 | 0)) {
       break label$6
      }
      $7_1 = -1;
      label$7 : while (1) {
       $8_1 = $777($2_1 | 0) | 0;
       label$8 : {
        label$9 : {
         $5_1 = $6_1 & 255 | 0;
         switch (($495($5_1 | 0) | 0) + -1 | 0 | 0) {
         case 1:
          break label$5;
         case 0:
          break label$8;
         default:
          break label$9;
         };
        }
        if (($5_1 | 0) != (HEAPU16[$0_1 >> 1] | 0 | 0)) {
         break label$8
        }
        $5_1 = $782($2_1 | 0) | 0;
        $4_1 = $5_1 & 262144 | 0 | $4_1 | 0;
        label$10 : {
         if ($5_1 & 32768 | 0) {
          break label$10
         }
         $5_1 = $7_1;
         break label$8;
        }
        $5_1 = $772($2_1 | 0) | 0;
        $6_1 = $778($2_1 | 0) | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = ($6_1 >>> 3 | 0) & 536854528 | 0 | (($6_1 >>> 2 | 0) & 16383 | 0) | 0 | (($5_1 << 28 | 0) & -536870912 | 0) | 0;
        $5_1 = $7_1;
        $4_1 = $4_1 | 65536 | 0;
        if ((FUNCTION_TABLE[HEAP32[($0_1 + 16 | 0) >> 2] | 0]($0_1, $4_1, $1_1, $2_1, $8_1) | 0 | 0) == (2 | 0)) {
         break label$8
        }
        $769($2_1 | 0, $3_1 + 8 | 0 | 0);
        $5_1 = -2;
        break label$4;
       }
       $769($2_1 | 0, $3_1 + 8 | 0 | 0);
       label$11 : {
        label$12 : {
         $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $8_1 = $8_1 + 6 | 0;
         if (($6_1 | 0) < ($8_1 | 0)) {
          break label$12
         }
         $6_1 = $6_1 - $8_1 | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
         HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $8_1 | 0;
         break label$11;
        }
        $766($2_1 | 0, $8_1 | 0) | 0;
        $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       if (($6_1 | 0) < (0 | 0)) {
        break label$4
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
       $7_1 = $5_1;
       $6_1 = $778($2_1 | 0) | 0;
       if (($6_1 & -256 | 0 | 0) == (256 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$4
     }
     if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$3_1 >> 2] = $0_1;
     $827(41901 | 0, $3_1 | 0);
    }
    $769($2_1 | 0, $3_1 + 8 | 0 | 0);
    $5_1 = -3;
   }
   label$13 : {
    $10_1 = $3_1 + 16 | 0;
    if ($10_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $10_1;
   }
   return $5_1 | 0;
  }
  $859(41894 | 0, 41811 | 0, 93 | 0);
  abort();
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($0_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     $1_1 = $0_1 + -240 | 0;
     if ($1_1 >>> 0 > 15 >>> 0) {
      break label$2
     }
     if (!((1 << $1_1 | 0) & 33031 | 0)) {
      break label$2
     }
     break label$1;
    }
    $859(41990 | 0, 41811 | 0, 221 | 0);
    abort();
   }
   label$4 : {
    $1_1 = $0_1 + -188 | 0;
    if ($1_1 >>> 0 > 3 >>> 0) {
     break label$4
    }
    if (($1_1 | 0) != (1 | 0)) {
     break label$1
    }
   }
   return ($0_1 >>> 0 < 189 >>> 0) << 1 | 0 | 0;
  }
  return 1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP8[($0_1 + 13 | 0) >> 0] = 0;
  HEAP8[($0_1 + 32 | 0) >> 0] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $497($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = $736($0_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return -1 | 0;
  }
  HEAP32[($1_1 + 40 | 0) >> 2] = 137;
  HEAP32[($1_1 + 36 | 0) >> 2] = 0;
  HEAP8[($1_1 + 12 | 0) >> 0] = $2_1;
  $496($1_1 | 0);
  return 0 | 0;
 }
 
 function $498($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $766($2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $499($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $52_1 = 0, $55_1 = 0, $148_1 = 0, $151_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
       if (!$2_1) {
        break label$5
       }
       $6_1 = 0;
       if (HEAPU8[($0_1 + 13 | 0) >> 0] | 0) {
        break label$3
       }
       label$8 : {
        if ((HEAP32[$0_1 >> 2] | 0 | 0) != (2 | 0)) {
         break label$8
        }
        label$9 : {
         $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
         if (!$6_1) {
          break label$9
         }
         $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
         if ($7_1 >>> 0 < $6_1 >>> 0) {
          break label$8
         }
         HEAP32[$0_1 >> 2] = 1;
         if ($7_1 >>> 0 <= $6_1 >>> 0) {
          break label$8
         }
         HEAP32[$0_1 >> 2] = 0;
         $1_1 = $1_1 | 131072 | 0;
         break label$8;
        }
        if ($4_1 >>> 0 < 4 >>> 0) {
         break label$8
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $52_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $52_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $55_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 16 | 0) >> 2] = $55_1;
        HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        label$10 : {
         label$11 : {
          $6_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (($6_1 | 0) < (4 | 0)) {
           break label$11
          }
          HEAP32[($5_1 + 20 | 0) >> 2] = $6_1 + -4 | 0;
          $6_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          HEAP32[($5_1 + 16 | 0) >> 2] = $6_1 + 4 | 0;
          $6_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $6_1 = $6_1 << 24 | 0 | (($6_1 << 8 | 0) & 16711680 | 0) | 0 | (($6_1 >>> 8 | 0) & 65280 | 0 | ($6_1 >>> 24 | 0) | 0) | 0;
          break label$10;
         }
         $6_1 = $774($5_1 + 16 | 0 | 0, 4 | 0) | 0;
        }
        if (($6_1 | 0) != (HEAPU8[($0_1 + 32 | 0) >> 0] | 0 | 256 | 0 | 0)) {
         break label$8
        }
        label$12 : {
         if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
         HEAP32[($5_1 + 4 | 0) >> 2] = $6_1;
         HEAP32[$5_1 >> 2] = $0_1;
         $827(42028 | 0, $5_1 | 0);
        }
        HEAP32[$0_1 >> 2] = 1;
       }
       label$13 : {
        if (!($1_1 & 4194304 | 0)) {
         break label$13
        }
        HEAP32[$0_1 >> 2] = 1;
        HEAP32[($0_1 + 28 | 0) >> 2] = 0;
        break label$4;
       }
       $6_1 = 1;
       label$14 : {
        switch (HEAP32[$0_1 >> 2] | 0 | 0) {
        case 2:
         HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0;
         label$16 : {
          if (!$4_1) {
           break label$16
          }
          FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0](HEAP32[($0_1 + 36 | 0) >> 2] | 0, $2_1, $3_1, $4_1, $0_1 + 16 | 0);
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = 0;
         $0_1 = $0_1 + 28 | 0;
         HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $4_1 | 0;
         break label$3;
        case 0:
         break label$14;
        case 1:
         break label$4;
        default:
         break label$3;
        };
       }
       $766($3_1 | 0, $4_1 | 0) | 0;
       break label$3;
      }
      $859(42006 | 0, 41811 | 0, 336 | 0);
      abort();
     }
     $859(42010 | 0, 41811 | 0, 337 | 0);
     abort();
    }
    $859(42024 | 0, 41811 | 0, 338 | 0);
    abort();
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $148_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $148_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $151_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $151_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $766($3_1 | 0, $4_1 | 0) | 0;
   $755($1_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0, $3_1 | 0) | 0;
   $763($5_1 + 16 | 0 | 0, $1_1 | 0);
   $6_1 = 1;
   label$17 : {
    switch ($500($0_1 | 0, $5_1 + 16 | 0 | 0) | 0 | 0) {
    case 0:
     $745($1_1 | 0, $5_1 + 16 | 0 | 0);
     label$19 : {
      $3_1 = $740($1_1 | 0) | 0;
      if (!$3_1) {
       break label$19
      }
      $763($5_1 + 16 | 0 | 0, $1_1 | 0);
      FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0](HEAP32[($0_1 + 36 | 0) >> 2] | 0, $1_1, $5_1 + 16 | 0, $3_1, $0_1 + 16 | 0);
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
     }
     $738($1_1 | 0);
     HEAP32[$0_1 >> 2] = 2;
     $0_1 = $0_1 + 28 | 0;
     HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $3_1 | 0;
     break label$3;
    case 1:
    case 2:
    case 3:
     break label$17;
    default:
     break label$3;
    };
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 131072;
   HEAP32[$0_1 >> 2] = 0;
   $738($1_1 | 0);
  }
  label$20 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $3_1 = 4;
  label$3 : {
   if (($771($1_1 | 0, 9 | 0) | 0 | 0) != (9 | 0)) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$4 : {
    $5_1 = $778($1_1 | 0) | 0;
    if (($5_1 & -256 | 0 | 0) == (256 | 0)) {
     break label$4
    }
    $3_1 = 1;
    if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(42322 | 0, $2_1 + 16 | 0 | 0);
    break label$3;
   }
   HEAP8[($0_1 + 32 | 0) >> 0] = $5_1;
   label$5 : {
    $3_1 = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$5
    }
    if (($3_1 | 0) == ($5_1 & 255 | 0 | 0)) {
     break label$5
    }
    $3_1 = 2;
    if (!($834(62152 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $1_1 = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(42403 | 0, $2_1 | 0);
    break label$3;
   }
   HEAP16[($0_1 + 10 | 0) >> 1] = $777($1_1 | 0) | 0;
   $3_1 = 1;
   label$6 : {
    switch (($495($5_1 & 255 | 0 | 0) | 0) + -1 | 0 | 0) {
    case 0:
     HEAP16[($0_1 + 8 | 0) >> 1] = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
     $766($1_1 | 0, 6 | 0) | 0;
     $3_1 = 0;
     break label$3;
    case 1:
     break label$3;
    default:
     break label$6;
    };
   }
   $4_1 = $4_1 & -327681 | 0;
   $5_1 = 0;
   label$8 : {
    $6_1 = $782($1_1 | 0) | 0;
    if (!($6_1 & 32768 | 0)) {
     break label$8
    }
    $3_1 = $772($1_1 | 0) | 0;
    $5_1 = $778($1_1 | 0) | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = ($5_1 >>> 3 | 0) & 536854528 | 0 | (($5_1 >>> 2 | 0) & 16383 | 0) | 0 | (($3_1 << 28 | 0) & -536870912 | 0) | 0;
    $4_1 = $4_1 | 65536 | 0;
    $5_1 = 5;
   }
   label$9 : {
    if (!($6_1 & 16384 | 0)) {
     break label$9
    }
    $3_1 = $772($1_1 | 0) | 0;
    $7_1 = $778($1_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = ($7_1 >>> 3 | 0) & 536854528 | 0 | (($7_1 >>> 2 | 0) & 16383 | 0) | 0 | (($3_1 << 28 | 0) & -536870912 | 0) | 0;
    $5_1 = $5_1 + 5 | 0;
    $4_1 = $4_1 | 262144 | 0;
   }
   $3_1 = 3;
   $6_1 = $6_1 & 255 | 0;
   if ($6_1 >>> 0 < $5_1 >>> 0) {
    break label$3
   }
   $766($1_1 | 0, $6_1 - $5_1 | 0 | 0) | 0;
   $3_1 = 4;
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   label$10 : {
    $1_1 = $6_1 + 3 | 0;
    $3_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
    if ($1_1 >>> 0 >= $3_1 >>> 0) {
     break label$10
    }
    HEAP16[($0_1 + 8 | 0) >> 1] = $3_1 - $1_1 | 0;
    $3_1 = 0;
    break label$3;
   }
   $3_1 = 0;
   HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  }
  label$11 : {
   $9_1 = $2_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $3_1 | 0;
 }
 
 function $501($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(42006 | 0, 41811 | 0, 442 | 0);
   abort();
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 137;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     $2_1 = $813(80 | 0) | 0;
     if (!$2_1) {
      break label$3
     }
     $845($2_1 | 0, 80 | 0, $2_1 | 0, 42096 | 0);
     $3_1 = $736($0_1 | 0) | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      label$5 : {
       if ($497($0_1 | 0, $2_1 + 20 | 0 | 0, 0 | 0) | 0) {
        break label$5
       }
       HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $504($2_1 | 0);
       return $2_1 | 0;
      }
      $739(HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0);
     }
     $815($2_1 | 0);
    }
    return 0 | 0;
   }
   $859(42115 | 0, 41811 | 0, 472 | 0);
   abort();
  }
  $859(42123 | 0, 41811 | 0, 473 | 0);
  abort();
 }
 
 function $504($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 504 | 0);
  }
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $496($0_1 + 20 | 0 | 0);
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 528 | 0);
  }
  $739(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $501($0_1 + 20 | 0 | 0);
  $845($0_1 | 0, 80 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $17_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 559 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(42130 | 0, 41811 | 0, 560 | 0);
   abort();
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 72 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $3_1 = 0, $65_1 = 0, $68_1 = 0, $139_1 = 0, $141$hi = 0, $143$hi = 0, $228_1 = 0, $230$hi = 0, $232$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 80 | 0, $0_1 | 0, 42096 | 0, 41811 | 0, 572 | 0);
  }
  $3_1 = $0_1 + 20 | 0;
  $4_1 = $798($1_1 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $6_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       label$10 : {
        label$11 : {
         if ($4_1) {
          break label$11
         }
         $7_1 = 0;
         break label$10;
        }
        $7_1 = $756($4_1 | 0) | 0;
       }
       HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
       $827(42137 | 0, $2_1 + 16 | 0 | 0);
      }
      label$12 : {
       if (!$4_1) {
        break label$12
       }
       $744($5_1 | 0, $4_1 | 0);
       $7_1 = $756($4_1 | 0) | 0;
       $735($4_1 | 0);
       $6_1 = $7_1 + $6_1 | 0;
      }
      label$13 : {
       label$14 : while (1) {
        $763($2_1 + 48 | 0 | 0, $5_1 | 0);
        i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $65_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $65_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
        $68_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $68_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              switch (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) {
              case 0:
               $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               label$23 : {
                label$24 : {
                 $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if (!$7_1) {
                  break label$24
                 }
                 if ($7_1 >>> 0 <= $4_1 >>> 0) {
                  break label$13
                 }
                 $4_1 = $766($2_1 + 48 | 0 | 0, $7_1 - $4_1 | 0 | 0) | 0;
                 if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
                  break label$23
                 }
                 $859(42206 | 0, 41811 | 0, 597 | 0);
                 abort();
                }
                label$25 : {
                 if ($4_1) {
                  break label$25
                 }
                 $766($2_1 + 48 | 0 | 0, 6 | 0) | 0;
                }
                label$26 : {
                 label$27 : {
                  label$28 : while (1) {
                   $4_1 = $508($2_1 + 48 | 0 | 0) | 0;
                   $8_1 = $754($2_1 + 48 | 0 | 0) | 0;
                   $7_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
                   if ($4_1 >>> 0 > 184 >>> 0) {
                    break label$27
                   }
                   if (($7_1 | 0) > (-1 | 0)) {
                    continue label$28
                   }
                   break label$28;
                  };
                  if ($8_1 >>> 0 > 4 >>> 0) {
                   break label$26
                  }
                  break label$18;
                 }
                 if (($7_1 | 0) <= (-1 | 0)) {
                  break label$7
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = 1;
                 if ($8_1 >>> 0 <= 3 >>> 0) {
                  break label$6
                 }
                }
                $4_1 = $8_1 + -4 | 0;
               }
               if (!$4_1) {
                break label$18
               }
               $7_1 = $499($3_1 | 0, !(HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 22 | 0 | 0, $5_1 | 0, $2_1 + 32 | 0 | 0, $4_1 | 0) | 0;
               $8_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               label$29 : {
                if (($8_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
                 break label$29
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = 1;
               }
               $139_1 = $0_1;
               i64toi32_i32$2 = $0_1;
               i64toi32_i32$0 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
               $141$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               $143$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $141$hi;
               i64toi32_i32$2 = i64toi32_i32$0;
               i64toi32_i32$0 = $143$hi;
               i64toi32_i32$4 = i64toi32_i32$2 + $4_1 | 0;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$4 >>> 0 < $4_1 >>> 0) {
                i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
               }
               i64toi32_i32$2 = $139_1;
               HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] = i64toi32_i32$4;
               HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] = i64toi32_i32$5;
               $745($5_1 | 0, $2_1 + 32 | 0 | 0);
               if ($7_1) {
                continue label$14
               }
               break label$17;
              case 1:
               $4_1 = $778($2_1 + 48 | 0 | 0) | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = 0;
               HEAP32[($0_1 + 8 | 0) >> 2] = $777($2_1 + 48 | 0 | 0) | 0;
               if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                break label$18
               }
               label$30 : {
                label$31 : {
                 label$32 : {
                  if (($4_1 & -256 | 0 | 0) != (256 | 0)) {
                   break label$32
                  }
                  if (($495($4_1 & 255 | 0 | 0) | 0 | 0) == (2 | 0)) {
                   break label$31
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
                  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                  if (!$4_1) {
                   continue label$14
                  }
                  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + 6 | 0;
                  continue label$14;
                 }
                 if ($4_1 >>> 0 > 16777215 >>> 0) {
                  break label$30
                 }
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = 2;
                continue label$14;
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = 3;
               continue label$14;
              case 2:
               break label$19;
              case 3:
               break label$20;
              default:
               continue label$14;
              };
             }
             HEAP32[($0_1 + 64 | 0) >> 2] = (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 1 | 0;
             if ((HEAP8[(0 + 62152 | 0) >> 0] | 0 | 0) > (2 | 0)) {
              break label$19
             }
             if (!($828(2 | 0, 62152 | 0, 0 | 0, 0 | 0) | 0)) {
              break label$19
             }
             HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
             HEAP32[$2_1 >> 2] = $0_1;
             $827(42269 | 0, $2_1 | 0);
            }
            label$33 : while (1) {
             $4_1 = $495($508($2_1 + 48 | 0 | 0) | 0 | 0) | 0;
             $7_1 = $754($2_1 + 48 | 0 | 0) | 0;
             if (($4_1 | 0) != (2 | 0)) {
              break label$16
             }
             if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
              continue label$33
             }
             break label$33;
            };
            $7_1 = $7_1 + 1 | 0;
            if ($7_1 >>> 0 > 4 >>> 0) {
             break label$15
            }
           }
           $4_1 = $798($1_1 | 0) | 0;
           if ($4_1) {
            continue label$8
           }
          }
          label$34 : {
           $10_1 = $2_1 + 64 | 0;
           if ($10_1 >>> 0 < global$2 >>> 0) {
            fimport$11()
           }
           global$0 = $10_1;
          }
          return $6_1 | 0;
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = 1;
         if ($7_1 >>> 0 <= 3 >>> 0) {
          break label$5
         }
        }
        $4_1 = $7_1 + -4 | 0;
        $766($2_1 + 32 | 0 | 0, $4_1 | 0) | 0;
        $228_1 = $0_1;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$5 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
        $230$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        $232$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $230$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $232$hi;
        i64toi32_i32$0 = i64toi32_i32$1 + $4_1 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < $4_1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        i64toi32_i32$1 = $228_1;
        HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$4;
        $745($5_1 | 0, $2_1 + 32 | 0 | 0);
        continue label$14;
       };
      }
      break label$8;
     };
     $859(42172 | 0, 41811 | 0, 595 | 0);
     abort();
    }
    $859(42239 | 0, 41811 | 0, 614 | 0);
    abort();
   }
   $859(42262 | 0, 41811 | 0, 619 | 0);
   abort();
  }
  $859(42262 | 0, 41811 | 0, 685 | 0);
  abort();
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = -1;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) < (1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
     $2_1 = HEAPU8[$2_1 >> 0] | 0;
     break label$2;
    }
    $2_1 = $764($0_1 | 0) | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $1_1 = $2_1 | ($1_1 << 8 | 0) | 0;
   if (($1_1 & -256 | 0 | 0) != (256 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $2_1 & 255 | 0 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $0_1 = $510($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  label$3 : {
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(42740 | 0, $1_1 | 0);
  }
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = $778($0_1 | 0) | 0;
  $4_1 = $777($0_1 | 0) | 0;
  $5_1 = 0;
  label$3 : {
   if (($3_1 & -256 | 0 | 0) != (256 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
   HEAP8[$1_1 >> 0] = $3_1;
   $5_1 = $495($3_1 & 255 | 0 | 0) | 0;
   label$4 : {
    if (($3_1 | 0) == (443 | 0)) {
     break label$4
    }
    if (($5_1 | 0) != (2 | 0)) {
     break label$4
    }
    $5_1 = 0;
    if (($3_1 | 0) != (442 | 0)) {
     break label$3
    }
    if (($4_1 & 49152 | 0 | 0) != (16384 | 0)) {
     break label$3
    }
    $766($0_1 | 0, 6 | 0) | 0;
    $3_1 = $772($0_1 | 0) | 0;
    $5_1 = 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$3
    }
    $3_1 = $772($0_1 | 0) | 0;
    $5_1 = 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 & 7 | 0 | 8 | 0;
   }
   $5_1 = 1;
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(42756 | 0, $2_1 | 0);
  }
  label$5 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(232 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 232;
    $827(42805 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 232 | 0, $2_1 | 0, 42464 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   $502($1_1 + 8 | 0 | 0);
   HEAP32[($1_1 + 12 | 0) >> 2] = 138;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
   $0_1 = $503($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
   HEAP32[($2_1 + 188 | 0) >> 2] = $0_1;
   if ($0_1) {
    break label$3
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $512($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $11_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $34_1 = 0, $37_1 = 0, $60_1 = 0, $76_1 = 0, $78$hi = 0, $80$hi = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 171 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
         break label$10
        }
        i64toi32_i32$2 = $2_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $34_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $34_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $37_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $37_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
        $766(i64toi32_i32$2 | 0, $3_1 | 0) | 0;
        $6_1 = 1;
        $7_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
        label$11 : {
         if (!((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) & 1 | 0)) {
          break label$11
         }
         label$12 : {
          if (!(HEAPU8[($0_1 + 200 | 0) >> 0] | 0)) {
           break label$12
          }
          if ((HEAPU8[($0_1 + 201 | 0) >> 0] | 0 | 0) != ($7_1 | 0)) {
           break label$11
          }
          HEAP32[($0_1 + 208 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          i64toi32_i32$2 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
          $60_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $0_1;
          HEAP32[($0_1 + 224 | 0) >> 2] = $60_1;
          HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$1;
          break label$11;
         }
         HEAP8[($0_1 + 201 | 0) >> 0] = $7_1;
         HEAP8[($0_1 + 200 | 0) >> 0] = 1;
         $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         HEAP32[($0_1 + 204 | 0) >> 2] = $8_1;
         i64toi32_i32$2 = $0_1;
         i64toi32_i32$1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
         $11_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 216 | 0) >> 2] = $11_1;
         HEAP32[($0_1 + 220 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = $0_1;
         HEAP32[($0_1 + 224 | 0) >> 2] = $11_1;
         HEAP32[($0_1 + 228 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($0_1 + 208 | 0) >> 2] = $8_1;
        }
        $76_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$0 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
        $78$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $80$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $78$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = $80$hi;
        i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $76_1;
        HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] = i64toi32_i32$5;
        if (($7_1 & 224 | 0 | 0) == (192 | 0)) {
         break label$7
        }
        $6_1 = 0;
        if (($7_1 & 240 | 0 | 0) == (224 | 0)) {
         break label$7
        }
        label$13 : {
         switch ($7_1 + -189 | 0 | 0) {
         case 0:
          HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 7;
          label$15 : {
           if (!(HEAP32[($4_1 + 12 | 0) >> 2] | 0)) {
            break label$15
           }
           $7_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
           if (!$7_1) {
            break label$6
           }
           $7_1 = $7_1 << 8 | 0 | 189 | 0;
           break label$8;
          }
          HEAP32[($0_1 + 184 | 0) >> 2] = 0;
          if ($3_1 >>> 0 < 5 >>> 0) {
           break label$6
          }
          $8_1 = ($778($5_1 + 48 | 0 | 0) | 0) >>> 24 | 0;
          label$16 : {
           if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$16
           }
           if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$16
           }
           HEAP32[($5_1 + 40 | 0) >> 2] = $8_1;
           HEAP32[($5_1 + 36 | 0) >> 2] = 189;
           HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
           $827(42868 | 0, $5_1 + 32 | 0 | 0);
          }
          $7_1 = $8_1 << 8 | 0 | 189 | 0;
          $6_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
          if (!$6_1) {
           break label$9
          }
          label$17 : while (1) {
           if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
            break label$6
           }
           $6_1 = HEAP32[$6_1 >> 2] | 0;
           if (!$6_1) {
            break label$9
           }
           continue label$17;
          };
         case 2:
          break label$13;
         default:
          break label$6;
         };
        }
        HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 7;
        break label$6;
       }
       $859(42854 | 0, 42583 | 0, 173 | 0);
       abort();
      }
      label$18 : {
       switch ((($8_1 & 240 | 0) + -128 | 0) >>> 4 | 0 | 0) {
       case 2:
        $6_1 = 1;
        if (!($519($0_1 | 0, $7_1 | 0, $5_1 + 48 | 0 | 0, $3_1 + -4 | 0 | 0) | 0)) {
         break label$7
        }
        break label$5;
       case 0:
       case 1:
       case 4:
        break label$18;
       default:
        break label$6;
       };
      }
      HEAP32[($0_1 + 184 | 0) >> 2] = $8_1;
     }
     $6_1 = 1;
    }
    $2_1 = $753($1_1 | 0, $5_1 + 48 | 0 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0;
    if (!$2_1) {
     break label$5
    }
    label$20 : {
     if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$20
     }
     if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$20
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $756($2_1 | 0) | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
     HEAP32[$5_1 >> 2] = $0_1;
     $827(42933 | 0, $5_1 | 0);
    }
    $2_1 = $229($0_1 + 12 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $7_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
    if (!$2_1) {
     break label$5
    }
    $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
    break label$5;
   }
   if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $2_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
   $827(42993 | 0, $5_1 + 16 | 0 | 0);
  }
  label$21 : {
   $10_1 = $5_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 292 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(43095 | 0, 42583 | 0, 293 | 0);
   abort();
  }
  $505(HEAP32[($0_1 + 188 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 232 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $514($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $12$hi = 0, $5_1 = 0, $12_1 = 0, $6_1 = 0, $13$hi = 0, $9_1 = 0, $13_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $53_1 = 0, $59_1 = 0, $61$hi = 0, $79_1 = 0, $99_1 = 0, $119$hi = 0, $184_1 = 0, $184$hi = 0, $187_1 = 0, $187$hi = 0, $189$hi = 0, $193$hi = 0, $34_1 = 0;
  label$1 : {
   $4_1 = global$0 - 128 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (42464 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 232 | 0, $0_1 | 0, 42464 | 0, 42583 | 0, 340 | 0);
  }
  label$5 : {
   if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
    break label$5
   }
   $5_1 = 0;
   label$6 : {
    $6_1 = $813(40 | 0) | 0;
    if (!$6_1) {
     break label$6
    }
    $214($6_1 | 0, 3 | 0);
    HEAP32[($0_1 + 184 | 0) >> 2] = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    $7_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
    $8_1 = $0_1 + 12 | 0;
    $225($8_1 | 0);
    HEAP8[($0_1 + 200 | 0) >> 0] = 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $12_1 = 0;
    $12$hi = i64toi32_i32$0;
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$0;
       $13$hi = i64toi32_i32$1;
       HEAP32[($4_1 + 88 | 0) >> 2] = 8192;
       HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
       $53_1 = $4_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$1 = $13$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       HEAP32[($53_1 + 84 | 0) >> 2] = i64toi32_i32$4;
       $827(43115 | 0, $4_1 + 80 | 0 | 0);
      }
      label$10 : {
       label$11 : {
        $59_1 = $1_1;
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $61$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$2 = $61$hi;
        i64toi32_i32$1 = i64toi32_i32$5;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $5_1 = $50($59_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 124 | 0 | 0) | 0;
        if ($5_1) {
         break label$11
        }
        if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$4;
        $13$hi = i64toi32_i32$1;
        HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
        $79_1 = $4_1;
        i64toi32_i32$1 = $12$hi;
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$2 = i64toi32_i32$4;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        HEAP32[($79_1 + 24 | 0) >> 2] = i64toi32_i32$5;
        $827(43156 | 0, $4_1 + 16 | 0 | 0);
        break label$10;
       }
       $9_1 = $756($5_1 | 0) | 0;
       label$12 : {
        if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$2;
        HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + 72 | 0) >> 2] = $9_1;
        HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
        $99_1 = $4_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$3 = $12_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        HEAP32[($99_1 + 68 | 0) >> 2] = i64toi32_i32$4;
        $827(43207 | 0, $4_1 + 64 | 0 | 0);
       }
       label$13 : {
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$2 = $12_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | ($12$hi | 0) != (i64toi32_i32$1 | 0) | 0) {
         break label$13
        }
        if ($515($1_1 | 0, $5_1 | 0, $3_1 | 0) | 0) {
         break label$13
        }
        $735($5_1 | 0);
        $815($6_1 | 0);
        $5_1 = 0;
        break label$6;
       }
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$5 = $0_1;
       HEAP32[($0_1 + 192 | 0) >> 2] = $12_1;
       HEAP32[($0_1 + 196 | 0) >> 2] = i64toi32_i32$2;
       $797($2_1 | 0, $5_1 | 0);
       i64toi32_i32$2 = 0;
       $119$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $12$hi;
       i64toi32_i32$3 = $12_1;
       i64toi32_i32$5 = $119$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $12_1 = i64toi32_i32$0;
       $12$hi = i64toi32_i32$4;
       if (($507($7_1 | 0, $2_1 | 0) | 0 | 0) != ($9_1 | 0)) {
        break label$10
       }
       $506($7_1 | 0, $4_1 + 104 | 0 | 0);
       $5_1 = HEAP8[(0 + 62168 | 0) >> 0] | 0;
       label$14 : {
        if ((HEAP32[($4_1 + 104 | 0) >> 2] | 0) >>> 0 < 9 >>> 0) {
         break label$14
        }
        if (($5_1 | 0) > (2 | 0)) {
         break label$7
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$10
        }
        HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
        $827(43251 | 0, $4_1 + 32 | 0 | 0);
        break label$10;
       }
       label$15 : {
        if (($5_1 | 0) > (2 | 0)) {
         break label$15
        }
        if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$4;
        $13$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $12$hi;
        HEAP32[($4_1 + 52 | 0) >> 2] = $12_1;
        i64toi32_i32$3 = $13$hi;
        i64toi32_i32$4 = $4_1;
        HEAP32[($4_1 + 56 | 0) >> 2] = $13_1;
        HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$3;
        HEAP32[($4_1 + 48 | 0) >> 2] = i64toi32_i32$2;
        $827(43302 | 0, $4_1 + 48 | 0 | 0);
       }
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = 3145728;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
        continue label$8
       }
      }
      break label$8;
     };
     if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $12$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $12_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(43364 | 0, $4_1 | 0);
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 200 | 0) >> 0] | 0)) {
      break label$16
     }
     $5_1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
     $9_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
     if ($5_1 >>> 0 <= $9_1 >>> 0) {
      break label$16
     }
     i64toi32_i32$1 = $0_1 + 224 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $184_1 = i64toi32_i32$2;
     $184$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $0_1 + 216 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $187_1 = i64toi32_i32$3;
     $187$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $184$hi;
     i64toi32_i32$1 = $184_1;
     i64toi32_i32$3 = $187$hi;
     i64toi32_i32$4 = $187_1;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$0 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $189$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $193$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $189$hi;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $193$hi;
     i64toi32_i32$1 = __wasm_i64_sdiv($34_1 | 0, i64toi32_i32$0 | 0, $5_1 - $9_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($6_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    }
    $233($8_1 | 0, $6_1 | 0, 0 | 0);
    $227($8_1 | 0);
    $504($7_1 | 0);
    $5_1 = $6_1;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   label$17 : {
    $11_1 = $4_1 + 128 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return $5_1 | 0;
  }
  $859(43095 | 0, 42583 | 0, 342 | 0);
  abort();
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $44_1 = 0, $46$hi = 0, $48_1 = 0, $48$hi = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $762($3_1 + 24 | 0 | 0, $1_1 | 0);
  $1_1 = 0;
  label$3 : {
   if (!($510($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    if ($4_1) {
     break label$4
    }
    $1_1 = ((HEAPU8[($3_1 + 40 | 0) >> 0] | 0) & 240 | 0 | 0) == (224 | 0);
    break label$3;
   }
   $1_1 = 0;
   label$5 : {
    if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    $5_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 8192;
    HEAP32[$3_1 >> 2] = ($4_1 + $5_1 | 0) + 5 | 0;
    $827(43409 | 0, $3_1 | 0);
   }
   $44_1 = $0_1;
   i64toi32_i32$0 = 0;
   $46$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $46$hi;
   i64toi32_i32$0 = $48$hi;
   i64toi32_i32$3 = $48_1;
   i64toi32_i32$4 = $4_1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$3 = 5;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + 0 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = $50($44_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $3_1 + 20 | 0 | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   $762($3_1 + 24 | 0 | 0, $2_1 | 0);
   $1_1 = 1;
   $766($3_1 + 24 | 0 | 0, 1 | 0) | 0;
   label$6 : {
    if (!($771($3_1 + 24 | 0 | 0, 4 | 0) | 0)) {
     break label$6
    }
    $1_1 = $510($3_1 + 24 | 0 | 0, $3_1 + 40 | 0 | 0) | 0;
   }
   $735($2_1 | 0);
  }
  label$7 : {
   $7_1 = $3_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $1_1 | 0;
 }
 
 function $516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(64 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $517();
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 64 | 0, $3_1 + 4 | 0 | 0, 42560 | 0);
   label$5 : {
    if ((HEAP8[(0 + 62168 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$5
    }
    if (!($828(2 | 0, 62168 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$5
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(42665 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 42728;
   $492($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 40 | 0) >> 2] = 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = 139;
   i64toi32_i32$1 = $3_1 + 56 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 36 | 0) >> 2] = $3_1;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $517() {
  $862(42583 | 0, 572 | 0, 3 | 0) | 0;
 }
 
 function $518($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $23_1 = 0, $24$hi = 0, $26$hi = 0;
  $5_1 = 2;
  label$1 : {
   label$2 : {
    if (!($1_1 & 65536 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    $5_1 = $754($3_1 | 0) | 0;
    $23_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $26$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $5_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $5_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $23_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    $5_1 = 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   }
   return $5_1 | 0;
  }
  $859(43523 | 0, 42583 | 0, 556 | 0);
  abort();
 }
 
 function $519($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($3_1 >>> 0 < 3 >>> 0) {
     break label$2
    }
    $3_1 = $782($2_1 | 0) | 0;
    if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) <= (-1 | 0)) {
     break label$1
    }
    $2_1 = $813(328 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    $218($2_1 | 0);
    HEAP32[($2_1 + 20 | 0) >> 2] = 139;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    $4_1 = 1;
    HEAP32[($2_1 + 4 | 0) >> 2] = 1;
    $1_1 = (($3_1 >>> 8 | 0) & 7 | 0) + 1 | 0;
    HEAP8[($2_1 + 24 | 0) >> 0] = $1_1;
    $5_1 = HEAP32[((($3_1 >>> 10 | 0) & 12 | 0) + 43056 | 0) >> 2] | 0;
    HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
    $3_1 = HEAPU8[((($3_1 >>> 14 | 0) & 3 | 0) + 43044 | 0) >> 0] | 0;
    HEAP8[($2_1 + 25 | 0) >> 0] = $3_1;
    HEAP16[($2_1 + 26 | 0) >> 1] = Math_imul(Math_imul($3_1, $1_1), $5_1) >>> 10 | 0;
    $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
   }
   return $4_1 | 0;
  }
  $859(43072 | 0, 42583 | 0, 143 | 0);
  abort();
 }
 
 function $520($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (42560 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 42560 | 0, 42583 | 0, 528 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(43465 | 0, 42583 | 0, 530 | 0);
   abort();
  }
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $9$hi = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $42_1 = 0, $44$hi = 0, $47$hi = 0, $53_1 = 0, $55$hi = 0, $58$hi = 0, $66_1 = 0, $69_1 = 0, $93_1 = 0, $96$hi = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (42560 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 42560 | 0, 42583 | 0, 468 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if (!$1_1) {
       break label$8
      }
      if (!$2_1) {
       break label$7
      }
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$1;
      $4_1 = $770($1_1 | 0) | 0;
      HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $2_1;
      $5_1 = i64toi32_i32$2 + 16 | 0;
      label$9 : while (1) {
       label$10 : {
        $2_1 = $494($5_1 | 0, 0 | 0, $1_1 | 0) | 0;
        if (($2_1 | 0) < (0 | 0)) {
         break label$10
        }
        $42_1 = $0_1;
        i64toi32_i32$2 = $0_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        $44$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $47$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $44$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$1 = $47$hi;
        i64toi32_i32$3 = $754($1_1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        i64toi32_i32$2 = $42_1;
        HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = i64toi32_i32$4;
        HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$5;
        continue label$9;
       }
       $6_1 = 0;
       label$11 : {
        switch ($2_1 + 3 | 0 | 0) {
        case 1:
         if (HEAP32[($0_1 + 40 | 0) >> 2] | 0) {
          break label$6
         }
         $53_1 = $0_1;
         i64toi32_i32$0 = $0_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
         $55$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $58$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $55$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $58$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$0 = $53_1;
         HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$4;
         $6_1 = 1;
         break label$5;
        case 0:
         break label$11;
        case 2:
         break label$5;
        default:
         continue label$9;
        };
       }
       i64toi32_i32$0 = $0_1;
       i64toi32_i32$4 = 0;
       HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$4;
       label$13 : while (1) {
        i64toi32_i32$2 = $1_1 + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $66_1 = i64toi32_i32$4;
        i64toi32_i32$4 = ($3_1 + 8 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$4 >> 2] = $66_1;
        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $69_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $69_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
        label$14 : {
         if (!($510(i64toi32_i32$0 + 8 | 0 | 0, i64toi32_i32$0 + 24 | 0 | 0) | 0)) {
          break label$14
         }
         if (!($495(HEAPU8[($3_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
          continue label$9
         }
         $766($1_1 | 0, (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 6 | 0 | 0) | 0;
         if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
          break label$5
         }
         continue label$13;
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$5
        }
        $766($1_1 | 0, 1 | 0) | 0;
        continue label$13;
       };
      };
     }
     $859(43475 | 0, 42583 | 0, 469 | 0);
     abort();
    }
    $859(43482 | 0, 42583 | 0, 470 | 0);
    abort();
   }
   $859(43492 | 0, 42583 | 0, 480 | 0);
   abort();
  }
  $93_1 = $0_1;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = 0;
  $96$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = $96$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$2 = $93_1;
  HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$1;
  label$15 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 64 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $738(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  $739(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $736($0_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return -1 | 0;
  }
  HEAP32[($1_1 + 84 | 0) >> 2] = 147;
  HEAP32[($1_1 + 80 | 0) >> 2] = 0;
  HEAP8[($1_1 + 12 | 0) >> 0] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $822($1_1 + 29 | 0 | 0, 255 | 0, 48 | 0) | 0;
  return 0 | 0;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $735($1_1 | 0);
 }
 
 function $527($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $67_1 = 0, $70_1 = 0, $97_1 = 0, $100_1 = 0, $171_1 = 0, $174_1 = 0;
  label$1 : {
   $5_1 = global$0 - 112 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$0_1) {
        break label$7
       }
       if (!$3_1) {
        break label$6
       }
       if (!$2_1) {
        break label$5
       }
       $6_1 = 0;
       label$8 : {
        if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($5_1 + 60 | 0) >> 2] = $1_1;
        HEAP32[($5_1 + 76 | 0) >> 2] = $1_1 & 4194304 | 0 ? 43713 : 43699;
        HEAP32[($5_1 + 72 | 0) >> 2] = $1_1 & 128 | 0 ? 43706 : 43699;
        HEAP32[($5_1 + 68 | 0) >> 2] = $1_1 & 2 | 0 ? 43700 : 43699;
        HEAP32[($5_1 + 64 | 0) >> 2] = $1_1 & 1 | 0 ? 43694 : 43699;
        HEAP32[($5_1 + 56 | 0) >> 2] = $4_1;
        HEAP32[($5_1 + 52 | 0) >> 2] = $3_1;
        HEAP32[($5_1 + 48 | 0) >> 2] = $0_1;
        $827(43649 | 0, $5_1 + 48 | 0 | 0);
       }
       if (HEAPU8[($0_1 + 12 | 0) >> 0] | 0) {
        break label$3
       }
       $7_1 = HEAP32[$0_1 >> 2] | 0;
       i64toi32_i32$2 = $3_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $67_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $67_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $70_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1;
       HEAP32[($5_1 + 96 | 0) >> 2] = $70_1;
       HEAP32[($5_1 + 100 | 0) >> 2] = i64toi32_i32$0;
       $766(i64toi32_i32$2 | 0, $4_1 | 0) | 0;
       label$9 : {
        label$10 : {
         if (!($1_1 & 4194304 | 0)) {
          break label$10
         }
         $738($7_1 | 0);
         if ($4_1 >>> 0 < 16 >>> 0) {
          break label$4
         }
         $1_1 = $772($5_1 + 96 | 0 | 0) | 0;
         if (($1_1 + 16 | 0) >>> 0 > $4_1 >>> 0) {
          break label$4
         }
         $766($5_1 + 96 | 0 | 0, $1_1 | 0) | 0;
         i64toi32_i32$2 = ($5_1 + 96 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $97_1 = i64toi32_i32$0;
         i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $97_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
         $100_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $5_1;
         HEAP32[($5_1 + 80 | 0) >> 2] = $100_1;
         HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
         $6_1 = $0_1 + 13 | 0;
         $768($5_1 + 80 | 0 | 0, $6_1 | 0, 16 | 0) | 0;
         $8_1 = ((HEAPU8[($0_1 + 14 | 0) >> 0] | 0) & 15 | 0) << 8 | 0 | (HEAPU8[($0_1 + 15 | 0) >> 0] | 0) | 0;
         HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $8_1 + 3 | 0;
         label$11 : {
          if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
          $827(43720 | 0, $5_1 + 32 | 0 | 0);
         }
         label$12 : {
          if (!($721($6_1 | 0, $0_1 + 29 | 0 | 0, $0_1 + 61 | 0 | 0, $0_1 + 45 | 0 | 0, 16 | 0) | 0)) {
           break label$12
          }
          $4_1 = $4_1 - $1_1 | 0;
          break label$9;
         }
         if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$4
         }
         if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$4
         }
         HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
         $827(43763 | 0, $5_1 + 16 | 0 | 0);
         break label$4;
        }
        if ($1_1 & 131 | 0) {
         break label$4
        }
       }
       $6_1 = 1;
       if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
        break label$3
       }
       label$13 : {
        $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($1_1 >>> 0 > $4_1 >>> 0) {
         break label$13
        }
        i64toi32_i32$2 = ($5_1 + 96 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $171_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($5_1 + 80 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $171_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 100 | 0) >> 2] | 0;
        $174_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[($5_1 + 80 | 0) >> 2] = $174_1;
        HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
        $766($5_1 + 80 | 0 | 0, $1_1 | 0) | 0;
        $755($7_1 | 0, $2_1 | 0, $5_1 + 96 | 0 | 0, $5_1 + 80 | 0 | 0) | 0;
        $3_1 = $751($7_1 | 0, 0 | 0, 0 | 0) | 0;
        label$14 : {
         if ((HEAP8[(0 + 62184 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62184 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         label$15 : {
          label$16 : {
           if ($3_1) {
            break label$16
           }
           $1_1 = 0;
           break label$15;
          }
          $1_1 = $756($3_1 | 0) | 0;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
         HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
         HEAP32[$5_1 >> 2] = $0_1;
         $827(43810 | 0, $5_1 | 0);
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = 0;
        if (!$3_1) {
         break label$3
        }
        FUNCTION_TABLE[HEAP32[($0_1 + 84 | 0) >> 2] | 0](HEAP32[($0_1 + 80 | 0) >> 2] | 0, $3_1);
        break label$3;
       }
       HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 - $4_1 | 0;
       $755($7_1 | 0, $2_1 | 0, $5_1 + 96 | 0 | 0, $3_1 | 0) | 0;
       break label$3;
      }
      $859(43544 | 0, 43548 | 0, 77 | 0);
      abort();
     }
     $859(43631 | 0, 43548 | 0, 78 | 0);
     abort();
    }
    $859(43645 | 0, 43548 | 0, 79 | 0);
    abort();
   }
   $523($0_1 | 0);
   $6_1 = 1;
  }
  label$17 : {
   $10_1 = $5_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $6_1 | 0;
 }
 
 function $528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(43881 | 0, 43892 | 0, 48 | 0);
   abort();
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 4 | 0) >> 1] = $1_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 148;
  $4_1 = 188;
  HEAP16[($0_1 + 22 | 0) >> 1] = $4_1;
  HEAP16[($0_1 + 24 | 0) >> 1] = $4_1 >>> 16 | 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 14 | 0;
  i64toi32_i32$0 = 0;
  $5_1 = 0;
  HEAP16[i64toi32_i32$1 >> 1] = $5_1;
  HEAP16[(i64toi32_i32$1 + 2 | 0) >> 1] = $5_1 >>> 16 | 0;
  HEAP16[(i64toi32_i32$1 + 4 | 0) >> 1] = i64toi32_i32$0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = i64toi32_i32$0 >>> 16 | 0;
 }
 
 function $529($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return 2 | 0;
 }
 
 function $530($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0, $5_1 = 0, $11_1 = 0, $9_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 144 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $5_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $6_1 = HEAPU16[($0_1 + 22 | 0) >> 1] | 0;
         if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) >= ($6_1 | 0)) {
          break label$9
         }
         if (($771($2_1 | 0, $6_1 | 0) | 0) >>> 0 >= (HEAPU16[($0_1 + 22 | 0) >> 1] | 0) >>> 0) {
          break label$9
         }
         $7_1 = -1;
         break label$8;
        }
        HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        HEAP32[($3_1 + 140 | 0) >> 2] = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
        $766($2_1 | 0, HEAPU16[($0_1 + 24 | 0) >> 1] | 0 | 0) | 0;
        label$10 : {
         label$11 : {
          $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          if (($6_1 | 0) < (4 | 0)) {
           break label$11
          }
          HEAP32[($2_1 + 4 | 0) >> 2] = $6_1 + -4 | 0;
          $6_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $6_1 + 4 | 0;
          $6_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $6_1 = $6_1 << 24 | 0 | (($6_1 << 8 | 0) & 16711680 | 0) | 0 | (($6_1 >>> 8 | 0) & 65280 | 0 | ($6_1 >>> 24 | 0) | 0) | 0;
          break label$10;
         }
         $6_1 = $774($2_1 | 0, 4 | 0) | 0;
        }
        label$12 : {
         label$13 : {
          if (($6_1 & -16777216 | 0 | 0) != (1191182336 | 0)) {
           break label$13
          }
          $7_1 = ($6_1 >>> 8 | 0) & 8191 | 0;
          label$14 : {
           label$15 : {
            if ($6_1 & 8388608 | 0) {
             break label$15
            }
            label$16 : {
             if (($7_1 | 0) != (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
              break label$16
             }
             $8_1 = ($6_1 >>> 4 | 0) & 3 | 0;
             $4_1 = $6_1 & 4194304 | 0 | $4_1 | 0;
             $7_1 = $6_1 & 15 | 0;
             if (($7_1 | 0) == ($5_1 | 0)) {
              break label$12
             }
             if (!($6_1 & 16 | 0)) {
              break label$12
             }
             if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
              break label$14
             }
             break label$12;
            }
            label$17 : {
             $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
             if (($6_1 | 0) < (0 | 0)) {
              break label$17
             }
             if ((HEAP32[($3_1 + 140 | 0) >> 2] | 0 | 0) != (HEAPU16[($2_1 + 8 | 0) >> 1] | 0 | 0)) {
              break label$17
             }
             $4_1 = HEAP32[($3_1 + 136 | 0) >> 2] | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + ($6_1 - $4_1 | 0) | 0;
             break label$8;
            }
            $769($2_1 | 0, $3_1 + 136 | 0 | 0);
            break label$8;
           }
           label$18 : {
            if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$18
            }
            if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$18
            }
            HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
            $827(43981 | 0, $3_1 + 32 | 0 | 0);
           }
           $766($2_1 | 0, 184 | 0) | 0;
           $4_1 = $4_1 | ($7_1 | 0) == (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) | 0;
           break label$5;
          }
          label$19 : {
           if ((($6_1 + 1 | 0) & 15 | 0 | 0) == ($5_1 | 0)) {
            break label$19
           }
           if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$19
           }
           if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$19
           }
           HEAP32[($3_1 + 24 | 0) >> 2] = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = $7_1;
           HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
           $827(44038 | 0, $3_1 + 16 | 0 | 0);
          }
          $4_1 = $4_1 | 2 | 0;
          break label$12;
         }
         $769($2_1 | 0, $3_1 + 136 | 0 | 0);
         $7_1 = -3;
         $6_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
         if (($6_1 | 0) == (255 | 0)) {
          break label$8
         }
         $4_1 = $6_1 + 1 | 0;
         HEAP8[($0_1 + 7 | 0) >> 0] = $4_1;
         label$20 : {
          if ($6_1 >>> 0 < 4 >>> 0) {
           break label$20
          }
          if (($6_1 | 0) != (253 | 0)) {
           break label$8
          }
         }
         $6_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
         $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         HEAP32[($3_1 + 64 | 0) >> 2] = 4;
         HEAP32[($3_1 + 60 | 0) >> 2] = $4_1 & 255 | 0;
         HEAP32[($3_1 + 56 | 0) >> 2] = $8_1;
         HEAP32[($3_1 + 52 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
         $820($3_1 + 80 | 0 | 0, 48 | 0, 44169 | 0, $3_1 + 48 | 0 | 0) | 0;
         $801($2_1 | 0, $3_1 + 80 | 0 | 0);
         break label$8;
        }
        $7_1 = 184;
        label$21 : {
         label$22 : {
          switch ($8_1 | 0) {
          default:
           label$24 : {
            label$25 : {
             $7_1 = $772($2_1 | 0) | 0;
             if (!$7_1) {
              break label$25
             }
             $9_1 = $772($2_1 | 0) | 0;
             $10_1 = $9_1 & 244 | 0;
             $11_1 = $7_1;
             label$26 : {
              if ($7_1 >>> 0 < 7 >>> 0) {
               break label$26
              }
              $11_1 = $7_1;
              if (!($9_1 & 16 | 0)) {
               break label$26
              }
              HEAP32[($0_1 + 16 | 0) >> 2] = $778($2_1 | 0) | 0;
              HEAP16[($0_1 + 20 | 0) >> 1] = ($777($2_1 | 0) | 0) & 511 | 0;
              $11_1 = $7_1 + -6 | 0;
             }
             $4_1 = $10_1 | $4_1 | 0;
             $766($2_1 | 0, $11_1 + -1 | 0 | 0) | 0;
             if ($7_1 >>> 0 > 183 >>> 0) {
              break label$24
             }
            }
            $7_1 = 183 - $7_1 | 0;
            if (($8_1 | 0) == (3 | 0)) {
             break label$21
            }
            $766($2_1 | 0, $7_1 | 0) | 0;
            $7_1 = 0;
            if ($4_1 & 16 | 0) {
             break label$21
            }
            break label$5;
           }
           label$27 : {
            if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$27
            }
            HEAP32[($3_1 + 4 | 0) >> 2] = $11_1;
            HEAP32[$3_1 >> 2] = $0_1;
            $827(44103 | 0, $3_1 | 0);
           }
           $769($2_1 | 0, $3_1 + 136 | 0 | 0);
           $766($2_1 | 0, 188 | 0) | 0;
           if (($8_1 | 0) == (3 | 0)) {
            break label$6
           }
           break label$5;
          case 1:
           break label$21;
          case 0:
           break label$22;
          };
         }
         $766($2_1 | 0, 184 | 0) | 0;
         break label$5;
        }
        $8_1 = FUNCTION_TABLE[HEAP32[($0_1 + 28 | 0) >> 2] | 0]($0_1, $4_1, $1_1, $2_1, $7_1) | 0;
        $4_1 = 0;
        label$28 : {
         switch ($8_1 + -1 | 0 | 0) {
         case 0:
          break label$6;
         case 1:
          break label$7;
         default:
          break label$28;
         };
        }
        $769($2_1 | 0, $3_1 + 136 | 0 | 0);
        $7_1 = -2;
       }
       HEAP8[($0_1 + 6 | 0) >> 0] = $5_1;
       label$29 : {
        $13_1 = $3_1 + 144 | 0;
        if ($13_1 >>> 0 < global$2 >>> 0) {
         fimport$11()
        }
        global$0 = $13_1;
       }
       return $7_1 | 0;
      }
      label$31 : {
       $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       if (($8_1 | 0) < ($7_1 | 0)) {
        break label$31
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $8_1 - $7_1 | 0;
       HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $7_1 | 0;
       break label$6;
      }
      $766($2_1 | 0, $7_1 | 0) | 0;
     }
     $5_1 = ($6_1 + 1 | 0) & 15 | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $859(43974 | 0, 43892 | 0, 93 | 0);
  abort();
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 149;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 2 | 0;
 }
 
 function $533($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 288 | 0);
  }
  HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($0_1 + 144 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = 0;
  HEAP32[($0_1 + 136 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 68 | 0) >> 0] = 1;
  $738(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  $2_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $3_1 = HEAP32[(($0_1 + ($2_1 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     i64toi32_i32$0 = 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($3_1 + 6 | 0) >> 0] = 0;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (16 | 0)) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 314 | 0);
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $1_1;
  $528($1_1 | 0, 8191 | 0);
  HEAP16[($0_1 + 112 | 0) >> 1] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
  $535($0_1 + 4 | 0 | 0);
  $533($0_1 | 0, 0 | 0, 0 | 0);
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  $974($0_1 | 0, 0 | 0, 64 | 0) | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(152 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $3_1 = 0;
    if (!($835(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 152;
    $827(44227 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 152 | 0, $3_1 | 0, 44208 | 0);
   HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($3_1 + 124 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = $736($0_1 | 0) | 0;
   HEAP32[($3_1 + 72 | 0) >> 2] = $1_1;
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    $534($3_1 | 0);
    break label$3;
   }
   $815($3_1 | 0);
   $3_1 = 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 350 | 0);
  }
  $739(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 152 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $538($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 360 | 0);
  }
  label$5 : {
   $3_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
   if ($3_1 >>> 0 >= 8192 >>> 0) {
    break label$5
   }
   label$6 : {
    label$7 : {
     $4_1 = $0_1 + 4 | 0;
     if ($539($4_1 | 0, $3_1 | 0) | 0) {
      break label$7
     }
     $0_1 = HEAPU16[($0_1 + 128 | 0) >> 1] | 0;
     HEAP16[($1_1 + 24 | 0) >> 1] = $0_1;
     HEAP16[($1_1 + 22 | 0) >> 1] = $0_1 + 188 | 0;
     $540($4_1 | 0, HEAPU16[($1_1 + 4 | 0) >> 1] | 0 | 0, $1_1 | 0);
     break label$6;
    }
    if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $1_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $539($4_1 | 0, $1_1 | 0) | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(44303 | 0, $2_1 | 0);
   }
   label$8 : {
    $6_1 = $2_1 + 16 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(44275 | 0, 43892 | 0, 362 | 0);
  abort();
 }
 
 function $539($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : while (1) {
     label$4 : {
      if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      return $0_1 | 0;
     }
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return 0 | 0;
  }
  $859(44766 | 0, 43892 | 0, 246 | 0);
  abort();
 }
 
 function $540($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(44766 | 0, 43892 | 0, 246 | 0);
   abort();
  }
  $0_1 = $0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $541($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 376 | 0);
  }
  label$5 : {
   label$6 : {
    if ($1_1 >>> 0 >= 8192 >>> 0) {
     break label$6
    }
    $3_1 = $0_1 + 4 | 0;
    if (!($539($3_1 | 0, $1_1 | 0) | 0)) {
     break label$5
    }
    HEAP32[($0_1 + 84 | 0) >> 2] = $0_1 + 88 | 0;
    label$7 : {
     if ($542($3_1 | 0, $1_1 | 0) | 0) {
      break label$7
     }
     if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $0_1;
     $827(44434 | 0, $2_1 | 0);
    }
    label$8 : {
     $5_1 = $2_1 + 16 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return;
   }
   $859(44358 | 0, 43892 | 0, 377 | 0);
   abort();
  }
  $859(44381 | 0, 43892 | 0, 378 | 0);
  abort();
 }
 
 function $542($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = $0_1 + (($1_1 & 15 | 0) << 2 | 0) | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAPU16[($3_1 + 4 | 0) >> 1] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     $0_1 = $3_1;
     label$4 : while (1) {
      $4_1 = $0_1;
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if (!$0_1) {
       break label$1
      }
      if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     label$6 : {
      if ($4_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
      break label$5;
     }
     HEAP32[$4_1 >> 2] = HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0;
    }
    return 1 | 0;
   }
   $859(44766 | 0, 43892 | 0, 246 | 0);
   abort();
  }
  return 0 | 0;
 }
 
 function $543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $11_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $13_1 = 0, $12_1 = 0, $3_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 418 | 0);
  }
  $3_1 = $0_1 + 88 | 0;
  $4_1 = $0_1 + 4 | 0;
  $5_1 = $798($1_1 | 0) | 0;
  $6_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  $8_1 = $2_1 + 32 | 0;
  $9_1 = 0;
  label$5 : {
   label$6 : while (1) {
    label$7 : {
     if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
     $827(44491 | 0, $2_1 + 48 | 0 | 0);
    }
    label$8 : {
     if (!$5_1) {
      break label$8
     }
     $744($7_1 | 0, $5_1 | 0);
     $10_1 = $756($5_1 | 0) | 0;
     $735($5_1 | 0);
     $9_1 = $10_1 + $9_1 | 0;
    }
    $763($2_1 + 64 | 0 | 0, $7_1 | 0);
    label$9 : {
     if (!(HEAPU8[($0_1 + 68 | 0) >> 0] | 0)) {
      break label$9
     }
     $544($0_1 | 0, $2_1 + 64 | 0 | 0, $6_1 | 0);
    }
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : while (1) {
        $10_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($0_1 + 84 | 0) >> 2] = $6_1;
        HEAP32[($0_1 + 80 | 0) >> 2] = $10_1;
        $5_1 = $530($6_1 | 0, $7_1 | 0, $2_1 + 64 | 0 | 0) | 0;
        $11_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
        HEAP32[($0_1 + 80 | 0) >> 2] = $11_1;
        HEAP32[($0_1 + 76 | 0) >> 2] = ($11_1 - $10_1 | 0) + (HEAP32[($0_1 + 76 | 0) >> 2] | 0) | 0;
        label$14 : {
         if (($5_1 | 0) < (0 | 0)) {
          break label$14
         }
         if (($5_1 | 0) >= (8192 | 0)) {
          break label$5
         }
         label$15 : {
          $10_1 = $5_1 & 65535 | 0;
          $11_1 = $539($4_1 | 0, $10_1 | 0) | 0;
          if (!$11_1) {
           break label$15
          }
          HEAP32[($0_1 + 84 | 0) >> 2] = $11_1;
          $6_1 = $11_1;
          continue label$13;
         }
         label$16 : {
          if (($5_1 | 0) != (8191 | 0)) {
           break label$16
          }
          $6_1 = $3_1;
          continue label$13;
         }
         label$17 : {
          $5_1 = FUNCTION_TABLE[HEAP32[($0_1 + 124 | 0) >> 2] | 0](HEAP32[($0_1 + 120 | 0) >> 2] | 0, $10_1) | 0;
          if (($5_1 | 0) == (2 | 0)) {
           break label$17
          }
          if (($5_1 | 0) != (1 | 0)) {
           break label$12
          }
          $6_1 = $539($4_1 | 0, $10_1 | 0) | 0;
          if ($6_1) {
           continue label$13
          }
          label$18 : {
           if (!($835(62200 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$18
           }
           HEAP32[$2_1 >> 2] = $0_1;
           $827(44557 | 0, $2_1 | 0);
          }
          $859(44655 | 0, 43892 | 0, 470 | 0);
          abort();
         }
         label$19 : {
          label$20 : {
           $10_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
           $5_1 = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0;
           if (($10_1 | 0) < ($5_1 | 0)) {
            break label$20
           }
           HEAP32[($2_1 + 68 | 0) >> 2] = $10_1 - $5_1 | 0;
           HEAP32[($2_1 + 64 | 0) >> 2] = (HEAP32[($2_1 + 64 | 0) >> 2] | 0) + $5_1 | 0;
           break label$19;
          }
          $766($2_1 + 64 | 0 | 0, $5_1 | 0) | 0;
         }
         HEAP32[($0_1 + 76 | 0) >> 2] = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + 1 | 0;
         continue label$13;
        }
        label$21 : {
         switch ($5_1 + 3 | 0 | 0) {
         case 2:
          break label$11;
         case 1:
          break label$12;
         case 0:
          break label$21;
         default:
          continue label$13;
         };
        }
        label$22 : {
         if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
          break label$22
         }
         if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$22
         }
         $5_1 = HEAPU16[($6_1 + 4 | 0) >> 1] | 0;
         $10_1 = HEAPU8[($6_1 + 7 | 0) >> 0] | 0;
         HEAP32[$8_1 >> 2] = (Math_imul((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0) + (HEAP32[($0_1 + 132 | 0) >> 2] | 0) | 0) + (HEAP32[($0_1 + 144 | 0) >> 2] | 0) | 0;
         HEAP32[($2_1 + 28 | 0) >> 2] = 510;
         HEAP32[($2_1 + 24 | 0) >> 2] = $10_1;
         HEAP32[($2_1 + 20 | 0) >> 2] = $5_1;
         HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
         $827(44657 | 0, $2_1 + 16 | 0 | 0);
        }
        $544($0_1 | 0, $2_1 + 64 | 0 | 0, $6_1 | 0);
        continue label$13;
       };
      }
      $745($7_1 | 0, $2_1 + 64 | 0 | 0);
      break label$10;
     }
     $745($7_1 | 0, $2_1 + 64 | 0 | 0);
     $5_1 = $798($1_1 | 0) | 0;
     if ($5_1) {
      continue label$6
     }
    }
    break label$6;
   };
   label$23 : {
    $13_1 = $2_1 + 80 | 0;
    if ($13_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $13_1;
   }
   return $9_1 | 0;
  }
  $859(44527 | 0, 43892 | 0, 447 | 0);
  abort();
 }
 
 function $544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, $19_1 = 0, $22_1 = 0, $29_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $22_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     $4_1 = $0_1 + 128 | 0;
     $29_1 = $766($3_1 + 32 | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
     $4_1 = HEAP32[$4_1 >> 2] | 0;
     if (($29_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     if (($764($3_1 + 32 | 0 | 0) | 0 | 0) == (71 | 0)) {
      break label$4
     }
     $4_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    HEAP32[($3_1 + 28 | 0) >> 2] = 0;
    label$6 : {
     if (!($545($1_1 | 0, $4_1 | 0, $3_1 + 28 | 0 | 0) | 0)) {
      break label$6
     }
     HEAP8[($0_1 + 68 | 0) >> 0] = 0;
    }
    $1_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$3
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = (HEAP32[($0_1 + 136 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($0_1 + 132 | 0) >> 2] = (HEAP32[($0_1 + 132 | 0) >> 2] | 0) + $1_1 | 0;
    if (HEAPU8[($0_1 + 68 | 0) >> 0] | 0) {
     break label$3
    }
    if ((HEAPU8[($2_1 + 7 | 0) >> 0] | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    if (!($834(62200 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $1_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
    $4_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
    HEAP32[($3_1 + 16 | 0) >> 2] = (Math_imul((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 188 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0) + (HEAP32[($0_1 + 132 | 0) >> 2] | 0) | 0) + (HEAP32[($0_1 + 144 | 0) >> 2] | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 510;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(44768 | 0, $3_1 | 0);
    break label$3;
   }
   HEAP8[($0_1 + 68 | 0) >> 0] = 0;
  }
  label$7 : {
   $6_1 = $3_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $545($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $4_1 = 0, $27_1 = 0, $30_1 = 0, $65_1 = 0, $68_1 = 0;
  label$1 : {
   $3_1 = global$0 - 48 | 0;
   $9_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $4_1 = $1_1 + 188 | 0;
  $5_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     $6_1 = ($3_1 + 32 | 0) + 8 | 0;
     $7_1 = $0_1 + 8 | 0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $27_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $27_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $30_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $30_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $766($3_1 + 32 | 0 | 0, $5_1 + $1_1 | 0 | 0) | 0;
     label$6 : {
      label$7 : {
       $8_1 = $764($3_1 + 32 | 0 | 0) | 0;
       if (($8_1 | 0) == (71 | 0)) {
        break label$7
       }
       if (($8_1 | 0) == (-1 | 0)) {
        break label$4
       }
       label$8 : while (1) {
        $8_1 = $764($3_1 + 32 | 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$4
        }
        if (($8_1 | 0) == (71 | 0)) {
         break label$6
        }
        $5_1 = $5_1 + 1 | 0;
        continue label$8;
       };
      }
      label$9 : {
       if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
       $827(44710 | 0, $3_1 + 16 | 0 | 0);
      }
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $65_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1;
      HEAP32[i64toi32_i32$0 >> 2] = $65_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $68_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = $68_1;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      $766($3_1 + 32 | 0 | 0, $5_1 | 0) | 0;
      $8_1 = 0;
      label$10 : {
       label$11 : while (1) {
        $766($3_1 + 32 | 0 | 0, $1_1 | 0) | 0;
        label$12 : {
         $6_1 = $764($3_1 + 32 | 0 | 0) | 0;
         if (($6_1 | 0) == (71 | 0)) {
          break label$12
         }
         if (($6_1 | 0) == (-1 | 0)) {
          break label$3
         }
         $7_1 = $8_1 + 1 | 0;
         break label$10;
        }
        $766($3_1 + 32 | 0 | 0, 187 | 0) | 0;
        $6_1 = $8_1 >>> 0 < 6 >>> 0;
        $7_1 = $8_1 + 1 | 0;
        $8_1 = $7_1;
        if ($6_1) {
         continue label$11
        }
        break label$11;
       };
      }
      $8_1 = 7;
      if (($7_1 | 0) == (7 | 0)) {
       break label$3
      }
     }
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   $8_1 = 0;
  }
  label$13 : {
   if ((HEAP8[(0 + 62200 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62200 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $8_1;
   HEAP32[$3_1 >> 2] = $5_1;
   $827(44729 | 0, $3_1 | 0);
  }
  $766($0_1 | 0, $5_1 | 0) | 0;
  HEAP32[$2_1 >> 2] = $5_1;
  label$14 : {
   $10_1 = $3_1 + 48 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return ($8_1 | 0) != (0 | 0) | 0;
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $22_1 = 0, $24$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $40$hi = 0, $41_1 = 0, $41$hi = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44208 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 152 | 0, $0_1 | 0, 44208 | 0, 43892 | 0, 502 | 0);
  }
  $2_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  $22_1 = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  $24$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $26$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $26$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $27_1 = i64toi32_i32$4;
  $27$hi = i64toi32_i32$5;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 188;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $31$hi = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  $40$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $31$hi;
  i64toi32_i32$1 = $40$hi;
  i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, ($2_1 + (HEAP32[((HEAP32[($0_1 + 84 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) | 0) - (HEAP32[($0_1 + 80 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $41_1 = i64toi32_i32$1;
  $41$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $27$hi;
  i64toi32_i32$2 = $27_1;
  i64toi32_i32$1 = $41$hi;
  i64toi32_i32$3 = $41_1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  i64toi32_i32$2 = $22_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$5;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  return $548($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  $3_1 = $545($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  $4_1 = 0;
  label$3 : {
   if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0 > 1316 >>> 0) {
    break label$3
   }
   if (!$3_1) {
    break label$3
   }
   $766($0_1 | 0, $1_1 + 188 | 0 | 0) | 0;
   $4_1 = 0;
   $3_1 = 0;
   label$4 : {
    label$5 : while (1) {
     $766($0_1 | 0, $1_1 | 0) | 0;
     label$6 : {
      $5_1 = $764($0_1 | 0) | 0;
      if (($5_1 | 0) == (71 | 0)) {
       break label$6
      }
      $6_1 = $3_1;
      if (($5_1 | 0) == (-1 | 0)) {
       break label$4
      }
      break label$3;
     }
     $766($0_1 | 0, 187 | 0) | 0;
     $6_1 = 1;
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != (7 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = ($6_1 | 0) != (0 | 0);
  }
  label$7 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $4_1 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  return $548($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  return $551($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $551($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(204 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $3_1 = 0;
    if (!($835(62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 204;
    $827(45192 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 204 | 0, $3_1 | 0, 44832 | 0);
   HEAP32[($3_1 + 196 | 0) >> 2] = $1_1 + 188 | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $531($2_1 + 16 | 0 | 0);
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = 150;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
   $0_1 = $536($0_1 | 0, $2_1 + 16 | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
   if ($0_1) {
    break label$3
   }
   $815($3_1 | 0);
   $3_1 = 0;
  }
  label$5 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $552($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 357 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(45407 | 0, 45046 | 0, 358 | 0);
   abort();
  }
  $537(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 204 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $553($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $15$hi = 0, $7_1 = 0, $15_1 = 0, $6_1 = 0, $14$hi = 0, $14_1 = 0, $5_1 = 0, $16$hi = 0, $17$hi = 0, $8_1 = 0, $19$hi = 0, i64toi32_i32$6 = 0, $52_1 = 0, $16_1 = 0, $17_1 = 0, $18$hi = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $13_1 = 0, $12_1 = 0, $65$hi = 0, $10_1 = 0, $18_1 = 0, $11_1 = 0, $89_1 = 0, $95_1 = 0, $97$hi = 0, $115_1 = 0, $135_1 = 0, $145$hi = 0, $170_1 = 0, $198$hi = 0, $201_1 = 0, $201$hi = 0, $207_1 = 0, $207$hi = 0, $320_1 = 0, $323_1 = 0, $323$hi = 0, $326_1 = 0, $326$hi = 0, $328$hi = 0, $332$hi = 0, $68_1 = 0;
  label$1 : {
   $4_1 = global$0 - 192 | 0;
   $12_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  $14$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 382 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break label$7
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     label$8 : {
      $6_1 = $813(44 | 0) | 0;
      if ($6_1) {
       break label$8
      }
      $554(389 | 0, 3 | 0);
      $7_1 = 0;
      break label$5;
     }
     $214($6_1 | 0, 4 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
     $8_1 = $0_1 + 24 | 0;
     $225($8_1 | 0);
     $973($0_1 + 68 | 0 | 0, $3_1 + 32 | 0 | 0, 128 | 0) | 0;
     $9_1 = HEAPU8[($3_1 + 28 | 0) >> 0] | 0;
     HEAP8[($0_1 + 200 | 0) >> 0] = 0;
     HEAP8[($0_1 + 64 | 0) >> 0] = $9_1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$0;
     fimport$0(1 | 0, $4_1 + 184 | 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $52_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $52_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $65$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$4 = !($15_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $65$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? 1048576 : $52_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, 15 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$0;
     $10_1 = (HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) / (-1e6 | 0) | 0;
     i64toi32_i32$0 = 0;
     $15_1 = 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$3;
     $11_1 = $4_1 + 96 | 0;
     label$9 : {
      label$10 : {
       label$11 : while (1) {
        label$12 : {
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$12
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$12
         }
         i64toi32_i32$4 = $3_1;
         i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $19$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 136 | 0) >> 2] = 8192;
         HEAP32[($4_1 + 128 | 0) >> 2] = $0_1;
         $89_1 = $4_1;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$0 = $19$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         HEAP32[($89_1 + 132 | 0) >> 2] = i64toi32_i32$2;
         $827(45427 | 0, $4_1 + 128 | 0 | 0);
        }
        label$13 : {
         $95_1 = $1_1;
         i64toi32_i32$0 = $3_1;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $97$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $15$hi;
         i64toi32_i32$4 = $97$hi;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $9_1 = $50($95_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 8192 | 0, $4_1 + 180 | 0 | 0) | 0;
         if ($9_1) {
          break label$13
         }
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         i64toi32_i32$4 = $3_1;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
         $14_1 = i64toi32_i32$2;
         $14$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
         HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 180 | 0) >> 2] | 0;
         $115_1 = $4_1;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$0 = $14$hi;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         HEAP32[($115_1 + 24 | 0) >> 2] = i64toi32_i32$5;
         $827(45467 | 0, $4_1 + 16 | 0 | 0);
         break label$10;
        }
        $7_1 = $756($9_1 | 0) | 0;
        label$14 : {
         if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         i64toi32_i32$0 = $3_1;
         i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $19$hi = i64toi32_i32$4;
         HEAP32[($4_1 + 124 | 0) >> 2] = $9_1;
         HEAP32[($4_1 + 120 | 0) >> 2] = $7_1;
         HEAP32[($4_1 + 112 | 0) >> 2] = $0_1;
         $135_1 = $4_1;
         i64toi32_i32$4 = $15$hi;
         i64toi32_i32$4 = $19$hi;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$1 = $15_1;
         i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         HEAP32[($135_1 + 116 | 0) >> 2] = i64toi32_i32$2;
         $827(45517 | 0, $4_1 + 112 | 0 | 0);
        }
        $797($2_1 | 0, $9_1 | 0);
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$5 = 0;
        $145$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $15$hi;
        i64toi32_i32$4 = $15_1;
        i64toi32_i32$0 = $145$hi;
        i64toi32_i32$1 = $7_1;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $15_1 = i64toi32_i32$3;
        $15$hi = i64toi32_i32$2;
        if (($543($5_1 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
         break label$10
        }
        $546($5_1 | 0, $4_1 + 152 | 0 | 0);
        $9_1 = HEAP8[(0 + 62216 | 0) >> 0] | 0;
        label$15 : {
         label$16 : {
          if ((HEAP32[($4_1 + 156 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
           break label$16
          }
          if ((HEAP32[($4_1 + 160 | 0) >> 2] | 0) >>> 0 < 1505 >>> 0) {
           break label$15
          }
         }
         if (($9_1 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
         i64toi32_i32$5 = $4_1;
         i64toi32_i32$2 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
         $170_1 = i64toi32_i32$2;
         i64toi32_i32$2 = $4_1;
         HEAP32[($4_1 + 36 | 0) >> 2] = $170_1;
         HEAP32[($4_1 + 40 | 0) >> 2] = i64toi32_i32$4;
         $827(45560 | 0, $4_1 + 32 | 0 | 0);
         break label$10;
        }
        label$17 : {
         if (($9_1 | 0) > (2 | 0)) {
          break label$17
         }
         if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$17
         }
         $9_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[$11_1 >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
         HEAP32[($4_1 + 92 | 0) >> 2] = $7_1;
         HEAP32[($4_1 + 88 | 0) >> 2] = $9_1;
         i64toi32_i32$4 = $15$hi;
         HEAP32[($4_1 + 84 | 0) >> 2] = $15_1;
         HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
         $827(45617 | 0, $4_1 + 80 | 0 | 0);
        }
        fimport$0(1 | 0, $4_1 + 184 | 0 | 0) | 0;
        label$18 : {
         i64toi32_i32$5 = $4_1;
         i64toi32_i32$4 = HEAP32[($4_1 + 184 | 0) >> 2] | 0;
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $198$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $18$hi;
         i64toi32_i32$2 = $198$hi;
         i64toi32_i32$5 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$1 = $18_1;
         i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
         i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
         i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$5 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 1e3 | 0, i64toi32_i32$5 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $201_1 = i64toi32_i32$5;
         $201$hi = i64toi32_i32$3;
         i64toi32_i32$5 = ((HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) / (1e6 | 0) | 0) + $10_1 | 0;
         i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
         $207_1 = i64toi32_i32$5;
         $207$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $201$hi;
         i64toi32_i32$2 = $201_1;
         i64toi32_i32$5 = $207$hi;
         i64toi32_i32$1 = $207_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         i64toi32_i32$3 = i64toi32_i32$4;
         i64toi32_i32$2 = 0;
         i64toi32_i32$1 = 3001;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
          break label$18
         }
         if (!($834(62216 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$10
         }
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
         $14_1 = i64toi32_i32$3;
         $14$hi = i64toi32_i32$0;
         HEAP32[($4_1 + 52 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
         i64toi32_i32$3 = $4_1;
         HEAP32[($4_1 + 56 | 0) >> 2] = $14_1;
         HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = $15$hi;
         HEAP32[($4_1 + 48 | 0) >> 2] = $15_1;
         $827(45686 | 0, $4_1 + 48 | 0 | 0);
         break label$10;
        }
        label$19 : {
         label$20 : {
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$0 = $14$hi;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$1 = $15_1;
          i64toi32_i32$3 = $14$hi;
          i64toi32_i32$2 = $14_1;
          if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
           $53_1 = 1
          } else {
           if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
            if (i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0) {
             $54_1 = 0
            } else {
             $54_1 = 1
            }
            $55_1 = $54_1;
           } else {
            $55_1 = 0
           }
           $53_1 = $55_1;
          }
          if ($53_1) {
           break label$20
          }
          $9_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          if (($9_1 | 0) != (HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0)) {
           break label$20
          }
          if ($9_1 >>> 0 < (HEAP32[($3_1 + 24 | 0) >> 2] | 0) >>> 0) {
           break label$20
          }
          if (HEAPU8[($0_1 + 200 | 0) >> 0] | 0) {
           break label$19
          }
         }
         label$21 : {
          i64toi32_i32$1 = $15$hi;
          i64toi32_i32$1 = $17$hi;
          i64toi32_i32$1 = $15$hi;
          i64toi32_i32$2 = $15_1;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $56_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
             $57_1 = 0
            } else {
             $57_1 = 1
            }
            $58_1 = $57_1;
           } else {
            $58_1 = 0
           }
           $56_1 = $58_1;
          }
          if ($56_1) {
           break label$21
          }
          if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0)) {
           break label$21
          }
          if (HEAPU8[($0_1 + 200 | 0) >> 0] | 0) {
           break label$19
          }
          i64toi32_i32$2 = $15$hi;
          i64toi32_i32$2 = $16$hi;
          i64toi32_i32$2 = $15$hi;
          i64toi32_i32$3 = $15_1;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$0 = $16_1;
          if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
           $59_1 = 1
          } else {
           if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
            if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
             $60_1 = 0
            } else {
             $60_1 = 1
            }
            $61_1 = $60_1;
           } else {
            $61_1 = 0
           }
           $59_1 = $61_1;
          }
          if ($59_1) {
           continue label$11
          }
          break label$19;
         }
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$0 = $15_1;
         i64toi32_i32$2 = $16$hi;
         i64toi32_i32$1 = $16_1;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $62_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0) {
            $63_1 = 0
           } else {
            $63_1 = 1
           }
           $64_1 = $63_1;
          } else {
           $64_1 = 0
          }
          $62_1 = $64_1;
         }
         if ($62_1) {
          continue label$11
         }
        }
        break label$11;
       };
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$1 = $15_1;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $17_1;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
        $65_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0) {
          $66_1 = 0
         } else {
          $66_1 = 1
         }
         $67_1 = $66_1;
        } else {
         $67_1 = 0
        }
        $65_1 = $67_1;
       }
       if ($65_1) {
        break label$10
       }
       if (!($834(62216 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       $9_1 = HEAPU8[($0_1 + 200 | 0) >> 0] | 0;
       HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       HEAP32[($4_1 + 68 | 0) >> 2] = $9_1;
       i64toi32_i32$1 = $15$hi;
       HEAP32[($4_1 + 64 | 0) >> 2] = $15_1;
       $827(45766 | 0, $4_1 + 64 | 0 | 0);
      }
      if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$1 = $15$hi;
      HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(45836 | 0, $4_1 | 0);
     }
     $7_1 = 0;
     $233($8_1 | 0, $6_1 | 0, 0 | 0);
     $227($8_1 | 0);
     $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$9_1) {
      break label$6
     }
     label$22 : while (1) {
      HEAP32[($0_1 + 16 | 0) >> 2] = HEAP32[($9_1 + 128 | 0) >> 2] | 0;
      $541($5_1 | 0, HEAPU16[($9_1 + 4 | 0) >> 1] | 0 | 0);
      $501($9_1 + 32 | 0 | 0);
      $739(HEAP32[($9_1 + 76 | 0) >> 2] | 0 | 0);
      label$23 : {
       if (!(HEAPU8[($9_1 + 84 | 0) >> 0] | 0)) {
        break label$23
       }
       $7_1 = $813(332 | 0) | 0;
       if (!$7_1) {
        break label$23
       }
       $218($7_1 | 0);
       HEAP32[($7_1 + 4 | 0) >> 2] = 2;
       HEAP32[($7_1 + 8 | 0) >> 2] = HEAPU16[($9_1 + 4 | 0) >> 1] | 0;
       HEAP32[($7_1 + 328 | 0) >> 2] = HEAP32[($9_1 + 124 | 0) >> 2] | 0;
       $215($6_1 | 0, $7_1 | 0);
       $7_1 = HEAP32[($9_1 + 104 | 0) >> 2] | 0;
       $3_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($3_1 | 0)) {
        break label$23
       }
       $320_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = $9_1 + 112 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $323_1 = i64toi32_i32$1;
       $323$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $9_1 + 96 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $326_1 = i64toi32_i32$0;
       $326$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $323$hi;
       i64toi32_i32$2 = $323_1;
       i64toi32_i32$0 = $326$hi;
       i64toi32_i32$3 = $326_1;
       i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $328$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $332$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $328$hi;
       $68_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $332$hi;
       i64toi32_i32$2 = __wasm_i64_sdiv($68_1 | 0, i64toi32_i32$4 | 0, $7_1 - $3_1 | 0 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$2;
       if ($320_1 >>> 0 >= i64toi32_i32$2 >>> 0) {
        break label$23
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $7_1;
      }
      $815($9_1 | 0);
      $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($9_1) {
       continue label$22
      }
      break label$22;
     };
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
     $7_1 = $6_1;
     break label$5;
    }
    $859(45407 | 0, 45046 | 0, 384 | 0);
    abort();
   }
   $815($6_1 | 0);
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  $534($5_1 | 0);
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  label$24 : {
   $13_1 = $4_1 + 192 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $7_1 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $862(45046 | 0, $0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  return $551($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1 >>> 0 > 187 >>> 0) {
     break label$4
    }
    $554(677 | 0, 2 | 0);
    $3_1 = 0;
    break label$3;
   }
   label$5 : {
    $3_1 = $813(72 | 0) | 0;
    if ($3_1) {
     break label$5
    }
    $554(680 | 0, 3 | 0);
    $3_1 = 0;
    break label$3;
   }
   $845($3_1 | 0, 72 | 0, $3_1 + 4 | 0 | 0, 45024 | 0);
   label$6 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $3_1;
    $827(45127 | 0, $2_1 | 0);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[$3_1 >> 2] = 45180;
   $528($3_1 + 16 | 0 | 0, $0_1 | 0);
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 44 | 0) >> 2] = 151;
   i64toi32_i32$1 = $3_1 + 60 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 68 | 0) >> 2] = 0;
   HEAP16[($3_1 + 40 | 0) >> 1] = $1_1 + -188 | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $3_1;
  }
  label$7 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $557($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $24_1 = 0, $25$hi = 0, $27$hi = 0;
  $5_1 = 2;
  label$1 : {
   label$2 : {
    if (!($1_1 & 16 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = $0_1 + 48 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $5_1 = $754($3_1 | 0) | 0;
    $24_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $27$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $5_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $5_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = $24_1;
    HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$4;
    HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
    $5_1 = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   }
   return $5_1 | 0;
  }
  $859(45929 | 0, 45046 | 0, 662 | 0);
  abort();
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $3_1 = 2;
  label$3 : {
   if ($1_1 >>> 0 < 16 >>> 0) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(45240 | 0, $2_1 | 0);
   }
   label$5 : {
    label$6 : {
     if (!$0_1) {
      break label$6
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == (44832 | 0)) {
      break label$5
     }
    }
    $846($0_1 | 0, 204 | 0, $0_1 | 0, 44832 | 0, 45046 | 0, 269 | 0);
   }
   $3_1 = 2;
   $4_1 = $813(136 | 0) | 0;
   if (!$4_1) {
    break label$3
   }
   HEAP32[($4_1 + 124 | 0) >> 2] = 0;
   $528($4_1 | 0, $1_1 | 0);
   label$7 : {
    $1_1 = $4_1 + 32 | 0;
    if (($497(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0 | 0) < (0 | 0)) {
     break label$7
    }
    $5_1 = $736(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 76 | 0) >> 2] = $5_1;
    label$8 : {
     if (!$5_1) {
      break label$8
     }
     $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     HEAP8[($4_1 + 84 | 0) >> 0] = 0;
     HEAP32[($4_1 + 80 | 0) >> 2] = 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = 152;
     HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 72 | 0) >> 2] = 153;
     HEAP32[($4_1 + 68 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
     $3_1 = 1;
     HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
     break label$3;
    }
    $501($1_1 | 0);
   }
   $815($4_1 | 0);
  }
  label$9 : {
   $7_1 = $2_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $559($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $40_1 = 0, $7_1 = 0, $79_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $6_1 = $0_1 + 124 | 0;
  HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + $4_1 | 0;
  label$3 : {
   if (!($1_1 & 16 | 0)) {
    break label$3
   }
   $546(HEAP32[((HEAP32[($0_1 + 120 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
   HEAP32[($0_1 + 104 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 112 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$4 : {
    if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
    i64toi32_i32$1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    $827(45278 | 0, $5_1 | 0);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (HEAPU8[($0_1 + 84 | 0) >> 0] | 0) {
       break label$7
      }
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      break label$6;
     }
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ((HEAP32[($0_1 + 88 | 0) >> 2] | 0) >>> 0 <= $6_1 >>> 0) {
      break label$5
     }
    }
    HEAP8[($0_1 + 84 | 0) >> 0] = 1;
    HEAP32[($0_1 + 88 | 0) >> 2] = $6_1;
    i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $79_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 96 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$3;
   }
   HEAP8[((HEAP32[($0_1 + 120 | 0) >> 2] | 0) + 200 | 0) >> 0] = 1;
  }
  $6_1 = 2;
  label$8 : {
   if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == (2 | 0)) {
    break label$8
   }
   $6_1 = $499($0_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  }
  label$9 : {
   $9_1 = $5_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $560($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $33_1 = 0, $36_1 = 0, $78_1 = 0, $81_1 = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    $6_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$4
    }
    if ((HEAP32[$6_1 >> 2] | 0 | 0) == (44832 | 0)) {
     break label$3
    }
   }
   $846($6_1 | 0, 204 | 0, $6_1 | 0, 44832 | 0, 45046 | 0, 176 | 0);
  }
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 48 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $36_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  label$5 : {
   label$6 : {
    $7_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $8_1 = $740($7_1 | 0) | 0;
    if ($8_1 >>> 0 > 8192 >>> 0) {
     break label$6
    }
    $9_1 = 0;
    if (!$8_1) {
     break label$5
    }
    if (HEAP32[($4_1 + 12 | 0) >> 2] | 0) {
     break label$5
    }
   }
   $9_1 = $751($7_1 | 0, 0 | 0, 0 | 0) | 0;
  }
  $766($2_1 | 0, $3_1 | 0) | 0;
  $755($7_1 | 0, $1_1 | 0, $5_1 + 48 | 0 | 0, $2_1 | 0) | 0;
  $7_1 = 4;
  label$7 : {
   if ($3_1 >>> 0 < 47 >>> 0) {
    break label$7
   }
   if (((HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 255 | 0 | 0) != (189 | 0)) {
    break label$7
   }
   $1_1 = (($3_1 + -1 | 0) >>> 0) / (46 >>> 0) | 0;
   if ((Math_imul($1_1, 46) | 1 | 0 | 0) != ($3_1 | 0)) {
    break label$7
   }
   i64toi32_i32$2 = ($5_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $78_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $78_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $81_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $81_1;
   HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = 4;
   if ((($764($5_1 + 32 | 0 | 0) | 0) & -16 | 0 | 0) != (16 | 0)) {
    break label$7
   }
   $7_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
   $2_1 = 0;
   label$8 : {
    label$9 : while (1) {
     label$10 : {
      $3_1 = $764($5_1 + 32 | 0 | 0) | 0;
      if (($3_1 + -2 | 0) >>> 0 < 2 >>> 0) {
       break label$10
      }
      if (($3_1 | 0) != (255 | 0)) {
       break label$8
      }
     }
     if (($764($5_1 + 32 | 0 | 0) | 0 | 0) != (44 | 0)) {
      break label$8
     }
     $766($5_1 + 32 | 0 | 0, 44 | 0) | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($7_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    $2_1 = $7_1;
   }
   $7_1 = ($2_1 | 0) == ($1_1 | 0) ? 3 : 4;
  }
  label$11 : {
   label$12 : {
    if (!$9_1) {
     break label$12
    }
    label$13 : {
     if ((HEAP8[(0 + 62216 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$13
     }
     if (!($828(2 | 0, 62216 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$13
     }
     $2_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
     $3_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = $756($9_1 | 0) | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$5_1 >> 2] = $6_1;
     $827(45329 | 0, $5_1 | 0);
    }
    $2_1 = 1;
    label$14 : {
     $3_1 = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
     if (($3_1 & 224 | 0 | 0) == (192 | 0)) {
      break label$14
     }
     $2_1 = $7_1;
     if (($3_1 & 240 | 0 | 0) != (224 | 0)) {
      break label$14
     }
     $2_1 = 0;
     $3_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$14
     }
     if (HEAP32[($3_1 + 36 | 0) >> 2] | 0) {
      break label$14
     }
     HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    label$15 : {
     $2_1 = $229($6_1 + 24 | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0, $2_1 | 0, $9_1 | 0) | 0;
     if ($2_1) {
      break label$15
     }
     HEAP32[($0_1 + 80 | 0) >> 2] = 1;
     break label$12;
    }
    HEAP32[($0_1 + 80 | 0) >> 2] = 2;
    $738(HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0);
    if (!(HEAP32[($6_1 + 4 | 0) >> 2] | 0)) {
     break label$11
    }
    label$16 : {
     $3_1 = $813(332 | 0) | 0;
     if (!$3_1) {
      break label$16
     }
     $3_1 = $973($3_1 | 0, $2_1 | 0, 328 | 0) | 0;
     HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $815($2_1 | 0);
     $215(HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
     break label$12;
    }
    $554(246 | 0, 3 | 0);
    $815($2_1 | 0);
   }
   label$17 : {
    $11_1 = $5_1 + 64 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return;
  }
  $859(45393 | 0, 45046 | 0, 238 | 0);
  abort();
 }
 
 function $561($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$3 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (45024 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 45024 | 0, 45046 | 0, 637 | 0);
  }
  label$3 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$3
   }
   $859(45895 | 0, 45046 | 0, 639 | 0);
   abort();
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$2;
  HEAP8[($0_1 + 22 | 0) >> 0] = 0;
 }
 
 function $562($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $9$hi = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $36_1 = 0, $36$hi = 0, $38_1 = 0, $38$hi = 0, $39$hi = 0, $43$hi = 0, $68_1 = 0, $70$hi = 0, $73$hi = 0, $94_1 = 0, $96$hi = 0, $99$hi = 0, $101_1 = 0, $104$hi = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (45024 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 45024 | 0, 45046 | 0, 580 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     if (!$2_1) {
      break label$6
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
     $9_1 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$1;
     $4_1 = $770($1_1 | 0) | 0;
     HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = $2_1;
     label$8 : {
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $36_1 = i64toi32_i32$1;
      $36$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$0;
      $38$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $36$hi;
      i64toi32_i32$2 = $36_1;
      i64toi32_i32$0 = $38$hi;
      i64toi32_i32$3 = $38_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
      i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      $39$hi = i64toi32_i32$5;
      $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $43$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $39$hi;
      i64toi32_i32$2 = $43$hi;
      i64toi32_i32$2 = __wasm_i64_srem(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $5_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $2_1 = i64toi32_i32$2;
      if (!i64toi32_i32$2) {
       break label$8
      }
      $2_1 = (($2_1 | 0) < (0 | 0) ? 0 : $5_1) - $2_1 | 0;
      if (($2_1 | 0) <= (0 | 0)) {
       break label$5
      }
      $766($1_1 | 0, $2_1 | 0) | 0;
      HEAP8[($0_1 + 22 | 0) >> 0] = 0;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$5;
     }
     $2_1 = $0_1 + 16 | 0;
     label$9 : {
      label$10 : {
       label$11 : while (1) {
        label$12 : {
         $5_1 = $530($2_1 | 0, 0 | 0, $1_1 | 0) | 0;
         if (($5_1 | 0) < (0 | 0)) {
          break label$12
         }
         $68_1 = $0_1;
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$5 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
         $70$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $73$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $70$hi;
         i64toi32_i32$1 = i64toi32_i32$5;
         i64toi32_i32$5 = $73$hi;
         i64toi32_i32$3 = $754($1_1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         i64toi32_i32$1 = $68_1;
         HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$4;
         $766($1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         continue label$11;
        }
        $6_1 = 0;
        label$13 : {
         switch ($5_1 + 3 | 0 | 0) {
         case 1:
          break label$10;
         case 0:
          break label$13;
         case 2:
          break label$9;
         default:
          continue label$11;
         };
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
        label$14 : {
         if ((HEAPU8[($2_1 + 7 | 0) >> 0] | 0 | 0) == (255 | 0)) {
          break label$14
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = 0;
         HEAP8[($2_1 + 6 | 0) >> 0] = 0;
         HEAP32[($0_1 + 28 | 0) >> 2] = 0;
         if ($545($1_1 | 0, HEAPU16[($0_1 + 40 | 0) >> 1] | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
          continue label$11
         }
        }
        break label$11;
       };
       $6_1 = -3;
       break label$9;
      }
      $94_1 = $0_1;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
      $96$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $99$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $96$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$4 = $99$hi;
      i64toi32_i32$3 = $754($1_1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$2 = $94_1;
      HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = i64toi32_i32$5;
      HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = 1;
     }
     $101_1 = $0_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = 0;
     $104$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $104$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = $101_1;
     HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$5;
     label$15 : {
      $8_1 = $3_1 + 16 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return $6_1 | 0;
    }
    $859(45905 | 0, 45046 | 0, 581 | 0);
    abort();
   }
   $859(45912 | 0, 45046 | 0, 582 | 0);
   abort();
  }
  $859(45922 | 0, 45046 | 0, 595 | 0);
  abort();
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  $845($0_1 | 0, 72 | 0, $0_1 + 4 | 0 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = $813(1200 | 0) | 0;
    if ($3_1) {
     break label$4
    }
    $4_1 = 0;
    if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = 1200;
    $827(46040 | 0, $2_1 | 0);
    break label$3;
   }
   $845($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0);
   $4_1 = 0;
   HEAP32[($3_1 + 156 | 0) >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   HEAP32[($3_1 + 168 | 0) >> 2] = 0;
   HEAP32[($3_1 + 1196 | 0) >> 2] = $1_1 + 188 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
   $531($2_1 + 16 | 0 | 0);
   HEAP32[($2_1 + 24 | 0) >> 2] = $1_1;
   $0_1 = $536($0_1 | 0, $2_1 + 16 | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    label$6 : {
     if (($570($3_1 | 0, $3_1 + 16 | 0 | 0, 0 | 0, 163 | 0) | 0 | 0) < (0 | 0)) {
      break label$6
     }
     $4_1 = $3_1;
     break label$3;
    }
    $537(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
   }
   $815($3_1 | 0);
  }
  label$7 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 1200 | 0, $0_1 | 0, 45952 | 0, 46162 | 0, 870 | 0);
  }
  label$3 : {
   if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
    break label$3
   }
   $859(47373 | 0, 46162 | 0, 871 | 0);
   abort();
  }
  $524($0_1 + 64 | 0 | 0);
  $541(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAPU16[($0_1 + 20 | 0) >> 1] | 0 | 0);
  $537(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 1200 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $567($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $10$hi = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $11$hi = 0, $9_1 = 0, $8_1 = 0, $44_1 = 0, $50_1 = 0, $52$hi = 0, $74_1 = 0, $84$hi = 0, $125_1 = 0, $156_1 = 0, $156$hi = 0, $159_1 = 0, $159$hi = 0, $161$hi = 0, $165$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 112 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 1200 | 0, $0_1 | 0, 45952 | 0, 46162 | 0, 892 | 0);
  }
  label$5 : {
   label$6 : {
    if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
     break label$6
    }
    HEAP8[($0_1 + 152 | 0) >> 0] = 0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 160 | 0) >> 2] = 0;
    HEAP32[($0_1 + 164 | 0) >> 2] = i64toi32_i32$0;
    HEAP16[($0_1 + 154 | 0) >> 1] = 0;
    HEAP8[($0_1 + 48 | 0) >> 0] = 0;
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$7 : while (1) {
     label$8 : {
      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $11$hi = i64toi32_i32$1;
      HEAP32[($4_1 + 72 | 0) >> 2] = 8192;
      HEAP32[($4_1 + 64 | 0) >> 2] = $0_1;
      $44_1 = $4_1;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      HEAP32[($44_1 + 68 | 0) >> 2] = i64toi32_i32$4;
      $827(47393 | 0, $4_1 + 64 | 0 | 0);
     }
     label$9 : {
      $50_1 = $1_1;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $52$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = $52$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = $50($50_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, 8192 | 0, $4_1 + 108 | 0 | 0) | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = $756($6_1 | 0) | 0;
      label$10 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $11$hi = i64toi32_i32$1;
       HEAP32[($4_1 + 60 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 56 | 0) >> 2] = $7_1;
       HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
       $74_1 = $4_1;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       HEAP32[($74_1 + 52 | 0) >> 2] = i64toi32_i32$5;
       $827(47437 | 0, $4_1 + 48 | 0 | 0);
      }
      $797($2_1 | 0, $6_1 | 0);
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$0 = 0;
      $84$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$2 = $84$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $10_1 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$5;
      if (($543($5_1 | 0, $2_1 | 0) | 0 | 0) != ($7_1 | 0)) {
       break label$9
      }
      label$11 : {
       label$12 : {
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 8388608;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$12
        }
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = 6291456;
        if (!((i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) & !(HEAPU8[($0_1 + 48 | 0) >> 0] | 0) | 0)) {
         break label$11
        }
       }
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
       $827(47484 | 0, $4_1 + 16 | 0 | 0);
       break label$9;
      }
      $546($5_1 | 0, $4_1 + 80 | 0 | 0);
      label$13 : {
       label$14 : {
        if ((HEAP32[($4_1 + 84 | 0) >> 2] | 0) >>> 0 > 8 >>> 0) {
         break label$14
        }
        if ((HEAP32[($4_1 + 88 | 0) >> 2] | 0) >>> 0 < 1505 >>> 0) {
         break label$13
        }
       }
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
       $125_1 = i64toi32_i32$3;
       i64toi32_i32$3 = i64toi32_i32$1;
       HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = $125_1;
       HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
       $827(47533 | 0, i64toi32_i32$1 + 32 | 0 | 0);
       break label$9;
      }
      if (!(HEAPU8[($0_1 + 152 | 0) >> 0] | 0)) {
       continue label$7
      }
     }
     break label$7;
    };
    $3_1 = 0;
    label$15 : {
     if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$15
     }
     if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$15
     }
     i64toi32_i32$0 = $10$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $10_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(47590 | 0, $4_1 | 0);
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 152 | 0) >> 0] | 0)) {
      break label$16
     }
     $3_1 = 0;
     $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$16
     }
     label$17 : while (1) {
      label$18 : {
       $7_1 = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
       $2_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($2_1 | 0)) {
        break label$18
       }
       i64toi32_i32$1 = $6_1 + 64 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $156_1 = i64toi32_i32$0;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$1 = $6_1 + 48 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $159_1 = i64toi32_i32$3;
       $159$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $156$hi;
       i64toi32_i32$1 = $156_1;
       i64toi32_i32$3 = $159$hi;
       i64toi32_i32$5 = $159_1;
       i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       i64toi32_i32$4 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul(i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 36e4 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $161$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $165$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $161$hi;
       $31_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $165$hi;
       i64toi32_i32$1 = __wasm_i64_sdiv($31_1 | 0, i64toi32_i32$4 | 0, $7_1 - $2_1 | 0 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$1;
       $3_1 = $3_1 >>> 0 < i64toi32_i32$1 >>> 0 ? i64toi32_i32$1 : $3_1;
      }
      $6_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      if ($6_1) {
       continue label$17
      }
      break label$17;
     };
    }
    $7_1 = 0;
    $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
    $2_1 = ($6_1 | 0) != (0 | 0);
    label$19 : {
     if (!(HEAP32[($0_1 + 160 | 0) >> 2] | 0)) {
      break label$19
     }
     label$20 : while (1) {
      if (!($2_1 & 1 | 0)) {
       break label$5
      }
      $2_1 = Math_imul($7_1, 136);
      $524(($6_1 + $2_1 | 0) + 48 | 0 | 0);
      label$21 : {
       $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
       $2_1 = $6_1 + $2_1 | 0;
       if (!(HEAP32[($2_1 + 36 | 0) >> 2] | 0)) {
        break label$21
       }
       $541($5_1 | 0, HEAPU16[($2_1 + 4 | 0) >> 1] | 0 | 0);
       $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
      }
      $2_1 = ($6_1 | 0) != (0 | 0);
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < (HEAP32[($0_1 + 160 | 0) >> 2] | 0) >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$22 : {
     if (!$2_1) {
      break label$22
     }
     $815($6_1 | 0);
     HEAP32[($0_1 + 156 | 0) >> 2] = 0;
    }
    $523($0_1 + 64 | 0 | 0);
    label$23 : {
     label$24 : while (1) {
      $6_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$23
      }
      HEAP32[($0_1 + 168 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
      $815($6_1 | 0);
      continue label$24;
     };
    }
    $534($5_1 | 0);
    $538($5_1 | 0, $0_1 + 16 | 0 | 0);
    label$25 : {
     $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$25
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 1196 | 0) >> 2] | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    }
    label$26 : {
     $9_1 = $4_1 + 112 | 0;
     if ($9_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $9_1;
    }
    return $6_1 | 0;
   }
   $859(47373 | 0, 46162 | 0, 894 | 0);
   abort();
  }
  $859(47638 | 0, 46162 | 0, 948 | 0);
  abort();
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0, $11_1 = 0, $13_1 = 0, $12_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $12_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0, 46162 | 0, 726 | 0);
  }
  HEAP16[($3_1 + 154 | 0) >> 1] = (HEAPU16[($3_1 + 154 | 0) >> 1] | 0) + 1 | 0;
  HEAP8[($0_1 + 33 | 0) >> 0] = (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) + 1 | 0;
  label$5 : {
   if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
    break label$5
   }
   $4_1 = $572($3_1 | 0, $1_1 | 0) | 0;
   label$6 : {
    if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($2_1 + 100 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 96 | 0) >> 2] = $3_1;
    $827(46247 | 0, $2_1 + 96 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     label$9 : {
      $5_1 = $3_1 + 172 | 0;
      if (!($709($5_1 | 0, $4_1 | 0) | 0)) {
       break label$9
      }
      HEAP8[($0_1 + 32 | 0) >> 0] = 1;
      $6_1 = $711($5_1 | 0) | 0;
      label$10 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 84 | 0) >> 2] = $6_1;
       HEAP32[($2_1 + 80 | 0) >> 2] = $3_1;
       $827(46292 | 0, $2_1 + 80 | 0 | 0);
      }
      label$11 : {
       $0_1 = Math_imul($6_1, 136);
       $7_1 = $813($0_1 | 0) | 0;
       if ($7_1) {
        break label$11
       }
       if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
       HEAP32[$2_1 >> 2] = $3_1;
       $827(46334 | 0, $2_1 | 0);
       break label$7;
      }
      $0_1 = $813(44 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$12 : {
       if ($0_1) {
        break label$12
       }
       if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$8
       }
       HEAP32[($2_1 + 20 | 0) >> 2] = 44;
       HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
       $827(46334 | 0, $2_1 + 16 | 0 | 0);
       break label$8;
      }
      $214($0_1 | 0, 4 | 0);
      if (!$6_1) {
       break label$8
      }
      $8_1 = 0;
      $9_1 = 0;
      label$13 : {
       label$14 : while (1) {
        if ($710($5_1 | 0, $4_1 | 0, $8_1 | 0, $2_1 + 104 | 0 | 0) | 0) {
         break label$13
        }
        label$15 : {
         label$16 : {
          $10_1 = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          if ($10_1) {
           break label$16
          }
          if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$15
          }
          HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
          HEAP32[($2_1 + 36 | 0) >> 2] = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          $827(46386 | 0, $2_1 + 32 | 0 | 0);
          break label$15;
         }
         label$17 : {
          label$18 : {
           label$19 : {
            if (!(HEAPU16[($2_1 + 104 | 0) >> 1] | 0)) {
             break label$19
            }
            $0_1 = 0;
            label$20 : {
             if (!$9_1) {
              break label$20
             }
             label$21 : while (1) {
              $11_1 = $7_1 + Math_imul($0_1, 136) | 0;
              if (($10_1 | 0) == (HEAPU16[($11_1 + 4 | 0) >> 1] | 0 | 0)) {
               break label$18
              }
              $0_1 = $0_1 + 1 | 0;
              if (($0_1 | 0) != ($9_1 | 0)) {
               continue label$21
              }
              break label$21;
             };
            }
            if (($570($3_1 | 0, $7_1 + Math_imul($9_1, 136) | 0 | 0, $10_1 | 0, 164 | 0) | 0 | 0) >= (0 | 0)) {
             break label$17
            }
            break label$13;
           }
           if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$15
           }
           $827(46440 | 0, 0 | 0);
           break label$15;
          }
          label$22 : {
           if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) >= (3 | 0)) {
            break label$22
           }
           if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$22
           }
           HEAP32[($2_1 + 68 | 0) >> 2] = HEAPU16[($11_1 + 4 | 0) >> 1] | 0;
           HEAP32[($2_1 + 64 | 0) >> 2] = $3_1;
           $827(46499 | 0, $2_1 + 64 | 0 | 0);
          }
          if (($574($3_1 | 0, $7_1 + Math_imul($9_1, 136) | 0 | 0, $11_1 | 0) | 0 | 0) < (0 | 0)) {
           break label$13
          }
         }
         $0_1 = $7_1 + Math_imul($9_1, 136) | 0;
         HEAP8[($0_1 + 93 | 0) >> 0] = 2;
         HEAP8[($0_1 + 77 | 0) >> 0] = 0;
         HEAP8[($0_1 + 80 | 0) >> 0] = 0;
         $10_1 = HEAPU8[($2_1 + 105 | 0) >> 0] | 0;
         HEAP8[($0_1 + 81 | 0) >> 0] = 0;
         HEAP8[($0_1 + 96 | 0) >> 0] = $10_1;
         HEAP8[($0_1 + 97 | 0) >> 0] = HEAPU8[($2_1 + 104 | 0) >> 0] | 0;
         HEAP16[($0_1 + 34 | 0) >> 1] = HEAPU16[($2_1 + 104 | 0) >> 1] | 0;
         label$23 : {
          if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$23
          }
          if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$23
          }
          HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
          HEAP32[($2_1 + 52 | 0) >> 2] = $9_1;
          HEAP32[($2_1 + 56 | 0) >> 2] = HEAPU16[($2_1 + 104 | 0) >> 1] | 0;
          HEAP32[($2_1 + 60 | 0) >> 2] = HEAPU16[($2_1 + 106 | 0) >> 1] | 0;
          $827(46558 | 0, $2_1 + 48 | 0 | 0);
         }
         $9_1 = $9_1 + 1 | 0;
        }
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) != ($6_1 | 0)) {
         continue label$14
        }
        break label$14;
       };
      }
      if (!$9_1) {
       break label$8
      }
      HEAP32[($3_1 + 156 | 0) >> 2] = $7_1;
      HEAP32[($3_1 + 160 | 0) >> 2] = $9_1;
      break label$5;
     }
     $800($1_1 | 0, 46611 | 0);
     break label$5;
    }
    $815($7_1 | 0);
   }
   HEAP8[($3_1 + 152 | 0) >> 0] = 1;
  }
  $735($1_1 | 0);
  label$24 : {
   $13_1 = $2_1 + 112 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
 }
 
 function $570($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $528($1_1 | 0, $2_1 | 0);
  label$1 : {
   $2_1 = $525(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 + 48 | 0 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = 165;
   HEAP32[($1_1 + 44 | 0) >> 2] = $0_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = 0;
   HEAP16[($1_1 + 32 | 0) >> 1] = 0;
   HEAP32[($1_1 + 132 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 128 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = $1_1;
   $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $571($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0, $42_1 = 0, $45_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(46111 | 0, $5_1 | 0);
  }
  label$4 : {
   label$5 : {
    $0_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if ($0_1) {
     break label$5
    }
    $6_1 = 1;
    break label$4;
   }
   label$6 : while (1) {
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $42_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $42_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $45_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = $527($0_1 + 48 | 0 | 0, $1_1 | 0, $2_1 | 0, $5_1 + 16 | 0 | 0, $4_1 | 0) | 0;
    $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    if ($0_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $766($3_1 | 0, $4_1 | 0) | 0;
  label$7 : {
   $9_1 = $5_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $572($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $762($2_1 | 0, $1_1 | 0);
  $0_1 = $768($2_1 | 0, $0_1 + 172 | 0 | 0, 1021 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 | 0;
 }
 
 function $573($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $45_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (45952 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 1200 | 0, $3_1 | 0, 45952 | 0, 46162 | 0, 699 | 0);
  }
  HEAP8[($0_1 + 33 | 0) >> 0] = (HEAPU8[($0_1 + 33 | 0) >> 0] | 0) + 1 | 0;
  label$5 : {
   label$6 : {
    if (HEAPU8[($0_1 + 32 | 0) >> 0] | 0) {
     break label$6
    }
    $4_1 = $572($3_1 | 0, $1_1 | 0) | 0;
    label$7 : {
     if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$7
     }
     if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $5_1 = HEAPU16[($0_1 + 34 | 0) >> 1] | 0;
     $6_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 164 | 0) >> 2] | 0;
     $45_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 32 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $45_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     HEAP32[($2_1 + 28 | 0) >> 2] = $5_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
     $827(46623 | 0, $2_1 + 16 | 0 | 0);
    }
    label$8 : {
     if (!($712($3_1 + 172 | 0 | 0, $4_1 | 0) | 0)) {
      break label$8
     }
     HEAP8[($0_1 + 32 | 0) >> 0] = 1;
     if ((HEAP32[($3_1 + 160 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($3_1 + 164 | 0) >> 2] | 0) >>> 0) {
      break label$5
     }
     $575($3_1 | 0, $4_1 | 0, HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0);
     $0_1 = (HEAP32[($3_1 + 164 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($3_1 + 164 | 0) >> 2] = $0_1;
     if (($0_1 | 0) != (HEAP32[($3_1 + 160 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     label$9 : {
      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$9
      }
      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$9
      }
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 160 | 0) >> 2] | 0;
      HEAP32[$2_1 >> 2] = $3_1;
      $827(46741 | 0, $2_1 | 0);
     }
     HEAP8[($3_1 + 152 | 0) >> 0] = 1;
     break label$6;
    }
    $800($1_1 | 0, 46791 | 0);
   }
   $735($1_1 | 0);
   label$10 : {
    $8_1 = $2_1 + 48 | 0;
    if ($8_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $8_1;
   }
   return;
  }
  $859(46702 | 0, 46162 | 0, 706 | 0);
  abort();
 }
 
 function $574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $528($1_1 | 0, HEAPU16[($2_1 + 4 | 0) >> 1] | 0 | 0);
  label$1 : {
   $3_1 = $525(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 + 48 | 0 | 0) | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = 165;
   HEAP32[($1_1 + 44 | 0) >> 2] = $0_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 0;
   HEAP16[($1_1 + 32 | 0) >> 1] = 0;
   HEAP32[($1_1 + 132 | 0) >> 2] = 164;
   HEAP32[($1_1 + 128 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
  }
  return $3_1 | 0;
 }
 
 function $575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $21_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0, $7_1 = 0, $17_1 = 0, $12_1 = 0, $4_1 = 0, $11_1 = 0, $14_1 = 0, $20_1 = 0, $18_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $23_1 = 0, $22_1 = 0, $540_1 = 0, $633_1 = 0;
  label$1 : {
   $3_1 = global$0 - 352 | 0;
   $22_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
        break label$7
       }
       $4_1 = $0_1 + 172 | 0;
       $720($4_1 | 0, $3_1 + 336 | 0 | 0);
       label$8 : {
        $5_1 = $813(436 | 0) | 0;
        if ($5_1) {
         break label$8
        }
        if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 4 | 0) >> 2] = 436;
        HEAP32[$3_1 >> 2] = $0_1;
        $827(46817 | 0, $3_1 | 0);
        break label$4;
       }
       $822($5_1 | 0, 0 | 0, 436 | 0) | 0;
       $218($5_1 | 0);
       HEAP32[($5_1 + 328 | 0) >> 2] = 5;
       HEAP32[($5_1 + 432 | 0) >> 2] = 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       $6_1 = $713($4_1 | 0, $1_1 | 0) | 0;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$0 = 0;
       HEAP32[($5_1 + 332 | 0) >> 2] = 0;
       HEAP32[($5_1 + 336 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 4 | 0) >> 2] = 2;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       HEAP32[($5_1 + 324 | 0) >> 2] = $2_1;
       $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
       label$9 : {
        $5_1 = $813(436 | 0) | 0;
        if ($5_1) {
         break label$9
        }
        if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$4
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = 436;
        HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
        $827(46869 | 0, $3_1 + 16 | 0 | 0);
        break label$4;
       }
       $822($5_1 | 0, 0 | 0, 436 | 0) | 0;
       $218($5_1 | 0);
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = 4;
       HEAP32[($5_1 + 432 | 0) >> 2] = 0;
       $7_1 = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       HEAP32[($5_1 + 328 | 0) >> 2] = 3;
       HEAP32[($5_1 + 12 | 0) >> 2] = $7_1;
       $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
       $5_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$6
       }
       label$10 : while (1) {
        if (($6_1 | 0) == (HEAPU16[($5_1 + 4 | 0) >> 1] | 0 | 0)) {
         break label$5
        }
        $5_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$6
        }
        continue label$10;
       };
      }
      $859(46803 | 0, 46162 | 0, 226 | 0);
      abort();
     }
     $5_1 = $813(80 | 0) | 0;
     if (!$5_1) {
      break label$4
     }
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 64 | 0) >> 2] = 0;
     HEAP32[($5_1 + 68 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($5_1 + 56 | 0) >> 2] = 0;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 48 | 0) >> 2] = 0;
     HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($5_1 + 40 | 0) >> 2] = 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = $0_1;
     $528($5_1 | 0, $6_1 | 0);
     HEAP32[($5_1 + 28 | 0) >> 2] = 166;
     HEAP32[($5_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
     HEAP32[($0_1 + 168 | 0) >> 2] = $5_1;
     $538(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0);
    }
    $8_1 = $715($4_1 | 0, $1_1 | 0) | 0;
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $3_1 + 232 | 0 | 2 | 0;
    $10_1 = $3_1 + 320 | 0 | 1 | 0;
    $11_1 = 0;
    label$11 : while (1) {
     $822($3_1 + 208 | 0 | 0, 0 | 0, 16 | 0) | 0;
     $822($3_1 + 320 | 0 | 0, 0 | 0, 8 | 0) | 0;
     $822($3_1 + 232 | 0 | 0, 0 | 0, 6 | 0) | 0;
     $822($3_1 + 318 | 0 | 0, 0 | 0, 2 | 0) | 0;
     $822($3_1 + 240 | 0 | 0, 0 | 0, 72 | 0) | 0;
     HEAP8[($3_1 + 232 | 0) >> 0] = 0;
     HEAP8[($3_1 + 320 | 0) >> 0] = 0;
     label$12 : {
      label$13 : {
       if (!($716($4_1 | 0, $1_1 | 0, $11_1 | 0, $3_1 + 328 | 0 | 0) | 0)) {
        break label$13
       }
       if (!($834(62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($3_1 + 192 | 0) >> 2] = $0_1;
       HEAP32[($3_1 + 196 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
       HEAP32[($3_1 + 200 | 0) >> 2] = $11_1;
       $827(46938 | 0, $3_1 + 192 | 0 | 0);
       break label$12;
      }
      label$14 : {
       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($3_1 + 176 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
       HEAP32[($3_1 + 180 | 0) >> 2] = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
       $827(47006 | 0, $3_1 + 176 | 0 | 0);
      }
      $12_1 = 0;
      $13_1 = 0;
      label$15 : {
       label$16 : {
        label$17 : {
         label$18 : {
          label$19 : {
           label$20 : {
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                label$25 : {
                 label$26 : {
                  label$27 : {
                   label$28 : {
                    label$29 : {
                     label$30 : {
                      label$31 : {
                       label$32 : {
                        label$33 : {
                         label$34 : {
                          label$35 : {
                           label$36 : {
                            label$37 : {
                             label$38 : {
                              label$39 : {
                               label$40 : {
                                label$41 : {
                                 label$42 : {
                                  label$43 : {
                                   label$44 : {
                                    $5_1 = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
                                    if (($5_1 | 0) > (65 | 0)) {
                                     break label$44
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    label$45 : {
                                     switch ($5_1 + -1 | 0 | 0) {
                                     case 4:
                                     case 6:
                                     case 7:
                                     case 8:
                                     case 9:
                                     case 10:
                                     case 11:
                                     case 12:
                                     case 13:
                                      break label$15;
                                     case 0:
                                      break label$19;
                                     case 1:
                                      break label$20;
                                     case 15:
                                      break label$21;
                                     case 2:
                                     case 3:
                                      break label$29;
                                     case 14:
                                      break label$30;
                                     case 16:
                                      break label$31;
                                     case 5:
                                      break label$43;
                                     default:
                                      break label$45;
                                     };
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    switch ($5_1 + -31 | 0 | 0) {
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 6:
                                    case 7:
                                     break label$15;
                                    case 0:
                                     break label$23;
                                    case 1:
                                     break label$24;
                                    case 5:
                                    case 8:
                                     break label$26;
                                    default:
                                     break label$22;
                                    };
                                   }
                                   label$46 : {
                                    if (($5_1 | 0) > (217 | 0)) {
                                     break label$46
                                    }
                                    label$47 : {
                                     switch ($5_1 + -128 | 0 | 0) {
                                     case 1:
                                      break label$32;
                                     case 2:
                                      break label$33;
                                     case 4:
                                      break label$35;
                                     case 6:
                                      break label$36;
                                     case 3:
                                      break label$37;
                                     case 5:
                                     case 8:
                                      break label$38;
                                     case 7:
                                      break label$39;
                                     case 0:
                                      break label$42;
                                     default:
                                      break label$47;
                                     };
                                    }
                                    $14_1 = 0;
                                    $15_1 = 0;
                                    $16_1 = 0;
                                    switch ($5_1 + -66 | 0 | 0) {
                                    case 0:
                                     break label$25;
                                    case 1:
                                     break label$40;
                                    default:
                                     break label$15;
                                    };
                                   }
                                   if (($5_1 | 0) == (218 | 0)) {
                                    break label$41
                                   }
                                   $14_1 = 0;
                                   $15_1 = 0;
                                   $16_1 = 0;
                                   if (($5_1 | 0) != (234 | 0)) {
                                    break label$15
                                   }
                                   $13_1 = 0;
                                   $5_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
                                   if (!$5_1) {
                                    break label$17
                                   }
                                   $15_1 = 0;
                                   $6_1 = 0;
                                   label$48 : while (1) {
                                    label$49 : {
                                     if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (5 | 0)) {
                                      break label$49
                                     }
                                     $7_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 5 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
                                     if (($7_1 << 24 | 0 | (($7_1 << 8 | 0) & 16711680 | 0) | 0 | (($7_1 >>> 8 | 0) & 65280 | 0 | ($7_1 >>> 24 | 0) | 0) | 0 | 0) != (1447243057 | 0)) {
                                      break label$49
                                     }
                                     if ((HEAPU8[($5_1 + 6 | 0) >> 0] | 0 | 0) != (1 | 0)) {
                                      break label$49
                                     }
                                     $15_1 = (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) >>> 0 > 143 >>> 0 ? 234 : 235;
                                    }
                                    $13_1 = 0;
                                    $14_1 = 0;
                                    $16_1 = 0;
                                    $12_1 = 0;
                                    $6_1 = $6_1 + 1 | 0;
                                    $5_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $6_1 | 0) | 0;
                                    if ($5_1) {
                                     continue label$48
                                    }
                                    break label$15;
                                   };
                                  }
                                  $13_1 = 0;
                                  $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
                                  if (!$6_1) {
                                   break label$17
                                  }
                                  $12_1 = 0;
                                  $16_1 = 0;
                                  $15_1 = 0;
                                  $7_1 = 0;
                                  label$50 : while (1) {
                                   $17_1 = $15_1;
                                   label$51 : {
                                    if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                     break label$51
                                    }
                                    if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                     break label$51
                                    }
                                    $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                    HEAP32[($3_1 + 160 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
                                    HEAP32[($3_1 + 164 | 0) >> 2] = $5_1;
                                    $827(47035 | 0, $3_1 + 160 | 0 | 0);
                                   }
                                   label$52 : {
                                    label$53 : {
                                     label$54 : {
                                      label$55 : {
                                       label$56 : {
                                        label$57 : {
                                         label$58 : {
                                          label$59 : {
                                           label$60 : {
                                            label$61 : {
                                             label$62 : {
                                              label$63 : {
                                               label$64 : {
                                                label$65 : {
                                                 label$66 : {
                                                  label$67 : {
                                                   label$68 : {
                                                    label$69 : {
                                                     label$70 : {
                                                      label$71 : {
                                                       $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                                       if (($5_1 | 0) > (85 | 0)) {
                                                        break label$71
                                                       }
                                                       label$72 : {
                                                        if (($5_1 | 0) > (39 | 0)) {
                                                         break label$72
                                                        }
                                                        label$73 : {
                                                         switch ($5_1 + -2 | 0 | 0) {
                                                         case 1:
                                                          break label$65;
                                                         case 0:
                                                          break label$70;
                                                         default:
                                                          break label$73;
                                                         };
                                                        }
                                                        $15_1 = 16;
                                                        switch ($5_1 + -27 | 0 | 0) {
                                                        case 0:
                                                         break label$52;
                                                        case 1:
                                                         break label$63;
                                                        default:
                                                         break label$55;
                                                        };
                                                       }
                                                       switch ($5_1 + -40 | 0 | 0) {
                                                       case 1:
                                                       case 2:
                                                       case 4:
                                                       case 5:
                                                       case 6:
                                                       case 7:
                                                        break label$55;
                                                       case 3:
                                                        break label$64;
                                                       case 9:
                                                        break label$66;
                                                       case 8:
                                                        break label$67;
                                                       case 0:
                                                        break label$69;
                                                       default:
                                                        break label$68;
                                                       };
                                                      }
                                                      label$74 : {
                                                       if (($5_1 | 0) > (121 | 0)) {
                                                        break label$74
                                                       }
                                                       switch ($5_1 + -86 | 0 | 0) {
                                                       case 1:
                                                       case 2:
                                                        break label$55;
                                                       case 3:
                                                        break label$57;
                                                       case 0:
                                                        break label$58;
                                                       default:
                                                        break label$62;
                                                       };
                                                      }
                                                      switch ($5_1 + -122 | 0 | 0) {
                                                      case 3:
                                                      case 4:
                                                       break label$55;
                                                      case 5:
                                                       break label$56;
                                                      case 1:
                                                       break label$60;
                                                      case 0:
                                                       break label$61;
                                                      case 2:
                                                       break label$63;
                                                      default:
                                                       break label$59;
                                                      };
                                                     }
                                                     $15_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) & 4 | 0 ? 1 : 2;
                                                     break label$52;
                                                    }
                                                    $15_1 = 27;
                                                    break label$52;
                                                   }
                                                   if (($5_1 | 0) != (63 | 0)) {
                                                    break label$55
                                                   }
                                                   $15_1 = 66;
                                                   break label$52;
                                                  }
                                                  $15_1 = 31;
                                                  break label$52;
                                                 }
                                                 $15_1 = 32;
                                                 break label$52;
                                                }
                                                $16_1 = 3;
                                                break label$54;
                                               }
                                               $16_1 = 15;
                                               break label$54;
                                              }
                                              $16_1 = 17;
                                              break label$54;
                                             }
                                             if (($5_1 | 0) != (106 | 0)) {
                                              break label$55
                                             }
                                             $16_1 = 129;
                                             break label$54;
                                            }
                                            $16_1 = 6;
                                            break label$54;
                                           }
                                           $16_1 = 130;
                                           break label$54;
                                          }
                                          if (($5_1 | 0) != (160 | 0)) {
                                           break label$55
                                          }
                                          $16_1 = 218;
                                          break label$54;
                                         }
                                         $13_1 = 2;
                                         break label$53;
                                        }
                                        $823($10_1 | 0, $6_1 + 2 | 0 | 0, 3 | 0) | 0;
                                        $13_1 = 1;
                                        HEAP8[($3_1 + 320 | 0) >> 0] = 1;
                                        HEAP8[($3_1 + 325 | 0) >> 0] = HEAPU8[($6_1 + 5 | 0) >> 0] | 0;
                                        HEAP8[($3_1 + 326 | 0) >> 0] = HEAPU8[($6_1 + 7 | 0) >> 0] | 0;
                                        HEAP8[($3_1 + 327 | 0) >> 0] = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
                                        if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                         break label$53
                                        }
                                        if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                         break label$53
                                        }
                                        HEAP32[($3_1 + 128 | 0) >> 2] = $10_1;
                                        HEAP32[($3_1 + 132 | 0) >> 2] = HEAPU8[($3_1 + 325 | 0) >> 0] | 0;
                                        HEAP32[($3_1 + 136 | 0) >> 2] = HEAPU8[($3_1 + 326 | 0) >> 0] | 0;
                                        HEAP32[($3_1 + 140 | 0) >> 2] = HEAPU8[($3_1 + 327 | 0) >> 0] | 0;
                                        $827(47072 | 0, $3_1 + 128 | 0 | 0);
                                        break label$53;
                                       }
                                       label$75 : {
                                        if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                         break label$75
                                        }
                                        if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                         break label$75
                                        }
                                        $5_1 = HEAPU8[($6_1 + 2 | 0) >> 0] | 0;
                                        $18_1 = HEAPU8[$6_1 >> 0] | 0;
                                        HEAP32[($3_1 + 144 | 0) >> 2] = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
                                        HEAP32[($3_1 + 148 | 0) >> 2] = $18_1;
                                        HEAP32[($3_1 + 152 | 0) >> 2] = $5_1;
                                        $827(47145 | 0, $3_1 + 144 | 0 | 0);
                                       }
                                       $16_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0 | 0) == (21 | 0) ? 156 : $16_1;
                                       break label$54;
                                      }
                                      label$76 : {
                                       if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                        break label$76
                                       }
                                       if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                        break label$76
                                       }
                                       HEAP32[($3_1 + 112 | 0) >> 2] = HEAPU8[$6_1 >> 0] | 0;
                                       $827(47196 | 0, $3_1 + 112 | 0 | 0);
                                      }
                                      if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) >>> 0 < 4 >>> 0) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0 | 0) != (72 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 4 | 0) >> 0] | 0 | 0) != (86 | 0)) {
                                       break label$54
                                      }
                                      if ((HEAPU8[($6_1 + 5 | 0) >> 0] | 0 | 0) != (67 | 0)) {
                                       break label$54
                                      }
                                      $15_1 = 33;
                                      if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                                       break label$52
                                      }
                                      if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
                                       break label$52
                                      }
                                      $827(47218 | 0, 0 | 0);
                                      break label$52;
                                     }
                                     $15_1 = $17_1;
                                     break label$52;
                                    }
                                    $15_1 = $17_1;
                                    $12_1 = $6_1;
                                   }
                                   $14_1 = 0;
                                   $7_1 = $7_1 + 1 | 0;
                                   $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $7_1 | 0) | 0;
                                   if ($6_1) {
                                    continue label$50
                                   }
                                   break label$15;
                                  };
                                 }
                                 $13_1 = 0;
                                 $5_1 = $577($0_1 | 0, $1_1 | 0) | 0;
                                 $16_1 = $5_1 ? 135 : 0;
                                 $15_1 = $5_1 ? 0 : 2;
                                 $14_1 = 0;
                                 $12_1 = 0;
                                 break label$15;
                                }
                                $13_1 = 0;
                                $16_1 = 218;
                                break label$28;
                               }
                               $13_1 = 0;
                               $16_1 = 67;
                               break label$28;
                              }
                              $13_1 = 0;
                              $16_1 = 6;
                              break label$28;
                             }
                             $13_1 = 0;
                             $16_1 = 131;
                             break label$28;
                            }
                            label$77 : {
                             if ($577($0_1 | 0, $1_1 | 0) | 0) {
                              break label$77
                             }
                             $13_1 = 0;
                             $16_1 = 140;
                             break label$28;
                            }
                            $16_1 = 149;
                            HEAP32[($3_1 + 220 | 0) >> 2] = 149;
                            HEAP8[($3_1 + 208 | 0) >> 0] = 118;
                            break label$34;
                           }
                           $13_1 = 0;
                           $16_1 = $577($0_1 | 0, $1_1 | 0) | 0 ? 131 : 0;
                           break label$28;
                          }
                          $16_1 = 6;
                          HEAP32[($3_1 + 220 | 0) >> 2] = 6;
                          HEAP8[($3_1 + 208 | 0) >> 0] = 113;
                         }
                         HEAP32[($3_1 + 212 | 0) >> 2] = 129;
                         HEAP8[($3_1 + 216 | 0) >> 0] = 114;
                         $13_1 = 0;
                         $14_1 = 1;
                         break label$27;
                        }
                        $13_1 = 0;
                        $16_1 = 130;
                        break label$28;
                       }
                       $13_1 = 0;
                       $16_1 = 129;
                       break label$28;
                      }
                      $13_1 = 0;
                      $16_1 = 17;
                      break label$28;
                     }
                     $13_1 = 0;
                     $16_1 = 15;
                     break label$28;
                    }
                    $13_1 = 0;
                    $16_1 = 3;
                   }
                   $14_1 = 0;
                  }
                  $15_1 = 0;
                  $12_1 = 0;
                  break label$15;
                 }
                 $13_1 = 0;
                 $15_1 = 33;
                 break label$18;
                }
                $13_1 = 0;
                $15_1 = 66;
                break label$18;
               }
               $13_1 = 0;
               $15_1 = 32;
               break label$18;
              }
              $13_1 = 0;
              $15_1 = 31;
              break label$18;
             }
             $14_1 = 0;
             $15_1 = 0;
             $16_1 = 0;
             if (($5_1 | 0) != (27 | 0)) {
              break label$15
             }
             $13_1 = 0;
             $15_1 = 27;
             break label$18;
            }
            $13_1 = 0;
            $15_1 = 16;
            break label$18;
           }
           $13_1 = 0;
           $15_1 = 2;
           break label$18;
          }
          $13_1 = 0;
          $15_1 = 1;
         }
         $14_1 = 0;
         break label$16;
        }
        $14_1 = 0;
        $15_1 = 0;
       }
       $16_1 = 0;
       $12_1 = 0;
      }
      $19_1 = 0;
      label$78 : while (1) {
       label$79 : {
        label$80 : {
         label$81 : {
          $20_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $19_1 | 0) | 0;
          if (!$20_1) {
           break label$81
          }
          label$82 : {
           $5_1 = HEAPU8[$20_1 >> 0] | 0;
           if (($5_1 | 0) == (134 | 0)) {
            break label$82
           }
           label$83 : {
            if (($5_1 | 0) == (129 | 0)) {
             break label$83
            }
            if (($5_1 | 0) != (10 | 0)) {
             break label$79
            }
            HEAP8[($3_1 + 232 | 0) >> 0] = 1;
            HEAP8[($3_1 + 233 | 0) >> 0] = HEAPU8[($20_1 + 5 | 0) >> 0] | 0;
            $823($9_1 | 0, $20_1 + 2 | 0 | 0, 3 | 0) | 0;
            HEAP8[($3_1 + 232 | 0) >> 0] = 1;
            HEAP8[($3_1 + 237 | 0) >> 0] = 0;
            if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$80
            }
            if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$80
            }
            HEAP32[($3_1 + 96 | 0) >> 2] = $9_1;
            HEAP32[($3_1 + 100 | 0) >> 2] = HEAPU8[($3_1 + 233 | 0) >> 0] | 0;
            $827(47230 | 0, $3_1 + 96 | 0 | 0);
            break label$80;
           }
           HEAP8[($3_1 + 318 | 0) >> 0] = 1;
           HEAP8[($3_1 + 319 | 0) >> 0] = (HEAPU8[($20_1 + 4 | 0) >> 0] | 0) >>> 5 | 0;
           break label$79;
          }
          HEAP8[($3_1 + 240 | 0) >> 0] = 1;
          $5_1 = (HEAPU8[($20_1 + 2 | 0) >> 0] | 0) & 31 | 0;
          $5_1 = $5_1 >>> 0 < 8 >>> 0 ? $5_1 : 8;
          HEAP32[($3_1 + 244 | 0) >> 2] = $5_1;
          $6_1 = 0;
          label$84 : {
           if ($5_1) {
            break label$84
           }
           $13_1 = 6;
           break label$79;
          }
          label$85 : while (1) {
           $13_1 = 6;
           $5_1 = ($3_1 + 240 | 0) + ($6_1 << 3 | 0) | 0;
           $7_1 = Math_imul($6_1, 6) + $20_1 | 0;
           $823($5_1 + 8 | 0 | 0, $7_1 + 3 | 0 | 0, 3 | 0) | 0;
           HEAP8[($5_1 + 11 | 0) >> 0] = 0;
           $17_1 = $7_1 + 6 | 0;
           $18_1 = HEAPU8[$17_1 >> 0] | 0;
           HEAP8[($5_1 + 12 | 0) >> 0] = $18_1 >>> 7 | 0;
           HEAP8[($5_1 + 13 | 0) >> 0] = (HEAPU8[$17_1 >> 0] | 0) & ((($18_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0) ? 1 : 63) | 0;
           $7_1 = $7_1 + 7 | 0;
           HEAP8[($5_1 + 14 | 0) >> 0] = (HEAPU8[$7_1 >> 0] | 0) >>> 7 | 0;
           HEAP8[($5_1 + 15 | 0) >> 0] = ((HEAPU8[$7_1 >> 0] | 0) >>> 6 | 0) & 1 | 0;
           $6_1 = $6_1 + 1 | 0;
           if ($6_1 >>> 0 < (HEAP32[($3_1 + 244 | 0) >> 2] | 0) >>> 0) {
            continue label$85
           }
           break label$79;
          };
         }
         label$86 : {
          if (!$15_1) {
           break label$86
          }
          $5_1 = 0;
          label$87 : while (1) {
           $6_1 = $714($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
           if (!$6_1) {
            break label$86
           }
           $12_1 = (HEAPU8[$6_1 >> 0] | 0 | 0) == (136 | 0) ? $6_1 : $12_1;
           $5_1 = $5_1 + 1 | 0;
           continue label$87;
          };
         }
         label$88 : {
          label$89 : {
           if ($12_1) {
            break label$89
           }
           $5_1 = 0;
           break label$88;
          }
          $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
         }
         label$90 : {
          $21_1 = $813($5_1 + 436 | 0 | 0) | 0;
          if ($21_1) {
           break label$90
          }
          if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$4
          }
          HEAP32[($3_1 + 36 | 0) >> 2] = 436;
          HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
          $827(46817 | 0, $3_1 + 32 | 0 | 0);
          break label$4;
         }
         $218($21_1 | 0);
         HEAP32[($21_1 + 432 | 0) >> 2] = 0;
         i64toi32_i32$0 = HEAP32[($3_1 + 320 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($3_1 + 324 | 0) >> 2] | 0;
         $540_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $21_1;
         HEAP32[($21_1 + 340 | 0) >> 2] = $540_1;
         HEAP32[($21_1 + 344 | 0) >> 2] = i64toi32_i32$1;
         HEAP16[($21_1 + 428 | 0) >> 1] = HEAPU16[($3_1 + 318 | 0) >> 1] | 0;
         $973($21_1 + 356 | 0 | 0, $3_1 + 240 | 0 | 0, 72 | 0) | 0;
         $29_1 = $21_1 + 352 | 0;
         $30_1 = HEAPU16[($3_1 + 236 | 0) >> 1] | 0;
         HEAP8[$29_1 >> 0] = $30_1;
         HEAP8[($29_1 + 1 | 0) >> 0] = $30_1 >>> 8 | 0;
         $28_1 = HEAP32[($3_1 + 232 | 0) >> 2] | 0;
         HEAP8[($21_1 + 348 | 0) >> 0] = $28_1;
         HEAP8[($21_1 + 349 | 0) >> 0] = $28_1 >>> 8 | 0;
         HEAP8[($21_1 + 350 | 0) >> 0] = $28_1 >>> 16 | 0;
         HEAP8[($21_1 + 351 | 0) >> 0] = $28_1 >>> 24 | 0;
         HEAP32[($21_1 + 12 | 0) >> 2] = HEAPU16[($3_1 + 342 | 0) >> 1] | 0;
         $5_1 = HEAPU16[($3_1 + 330 | 0) >> 1] | 0;
         HEAP32[($21_1 + 328 | 0) >> 2] = $13_1;
         HEAP32[($21_1 + 8 | 0) >> 2] = $5_1;
         label$91 : {
          label$92 : {
           if (!$12_1) {
            break label$92
           }
           $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
           $6_1 = $21_1 + 436 | 0;
           HEAP32[($21_1 + 336 | 0) >> 2] = $6_1;
           HEAP32[($21_1 + 332 | 0) >> 2] = $5_1;
           $823($6_1 | 0, $12_1 + 2 | 0 | 0, $5_1 | 0) | 0;
           break label$91;
          }
          i64toi32_i32$0 = $21_1;
          i64toi32_i32$1 = 0;
          HEAP32[($21_1 + 332 | 0) >> 2] = 0;
          HEAP32[($21_1 + 336 | 0) >> 2] = i64toi32_i32$1;
         }
         label$93 : {
          label$94 : {
           if (!$15_1) {
            break label$94
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = $15_1;
           HEAP32[($21_1 + 4 | 0) >> 2] = 0;
           $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, 0 | 0) | 0;
           if (!$6_1) {
            break label$93
           }
           $13_1 = $21_1 + 68 | 0;
           $19_1 = 0;
           label$95 : while (1) {
            label$96 : {
             if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (134 | 0)) {
              break label$96
             }
             label$97 : {
              $20_1 = (HEAPU8[($6_1 + 2 | 0) >> 0] | 0) & 31 | 0;
              if (!$20_1) {
               break label$97
              }
              $7_1 = 0;
              label$98 : while (1) {
               $5_1 = $13_1 + ($7_1 << 3 | 0) | 0;
               HEAP8[$5_1 >> 0] = HEAPU8[($6_1 + 3 | 0) >> 0] | 0;
               HEAP8[($5_1 + 1 | 0) >> 0] = HEAPU8[($6_1 + 4 | 0) >> 0] | 0;
               HEAP8[($5_1 + 2 | 0) >> 0] = HEAPU8[($6_1 + 5 | 0) >> 0] | 0;
               $17_1 = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
               $18_1 = (HEAPU8[($5_1 + 3 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 4 | 0) >> 0] | 0) << 8 | 0) | 0) & -2 | 0 | ($17_1 >>> 7 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $18_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $18_1 >>> 8 | 0;
               $17_1 = (($17_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0);
               $633_1 = $18_1 & ($17_1 ? -253 : -3) | 0;
               $18_1 = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
               $17_1 = $633_1 | (($17_1 ? $18_1 << 2 | 0 : ($18_1 << 1 | 0) & 2 | 0) & 254 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $17_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $17_1 >>> 8 | 0;
               $17_1 = ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) << 1 | 0) & 256 | 0 | ($17_1 & -257 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $17_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $17_1 >>> 8 | 0;
               $31_1 = ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) << 3 | 0) & 512 | 0 | ($17_1 & 65023 | 0) | 0;
               HEAP8[($5_1 + 3 | 0) >> 0] = $31_1;
               HEAP8[($5_1 + 4 | 0) >> 0] = $31_1 >>> 8 | 0;
               $7_1 = $7_1 + 1 | 0;
               if (($7_1 | 0) != ($20_1 | 0)) {
                continue label$98
               }
               break label$98;
              };
             }
             HEAP32[($21_1 + 316 | 0) >> 2] = $20_1;
            }
            $19_1 = $19_1 + 1 | 0;
            $6_1 = $718($4_1 | 0, $1_1 | 0, $11_1 | 0, $19_1 | 0) | 0;
            if ($6_1) {
             continue label$95
            }
            break label$93;
           };
          }
          label$99 : {
           if (!$16_1) {
            break label$99
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = $16_1;
           HEAP32[($21_1 + 4 | 0) >> 2] = 1;
           if (!$14_1) {
            break label$93
           }
           label$100 : {
            label$101 : {
             if ($12_1) {
              break label$101
             }
             $5_1 = 0;
             break label$100;
            }
            $5_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
           }
           label$102 : {
            label$103 : {
             $5_1 = $813($5_1 + 436 | 0 | 0) | 0;
             if (!$5_1) {
              break label$103
             }
             $218($5_1 | 0);
             $5_1 = $973($5_1 | 0, $21_1 | 0, 436 | 0) | 0;
             HEAP32[($5_1 + 8 | 0) >> 2] = (HEAPU8[($3_1 + 216 | 0) >> 0] | 0) << 16 | 0 | (HEAPU16[($3_1 + 330 | 0) >> 1] | 0) | 0;
             $6_1 = HEAP32[($3_1 + 220 | 0) >> 2] | 0;
             HEAP32[($5_1 + 324 | 0) >> 2] = $2_1;
             HEAP32[($5_1 + 20 | 0) >> 2] = $6_1;
             $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $5_1 | 0);
             break label$102;
            }
            if (!($835(62232 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$102
            }
            HEAP32[($3_1 + 84 | 0) >> 2] = 436;
            HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
            $827(46817 | 0, $3_1 + 80 | 0 | 0);
           }
           HEAP32[($21_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 212 | 0) >> 2] | 0;
           HEAP32[($21_1 + 8 | 0) >> 2] = (HEAPU8[($3_1 + 208 | 0) >> 0] | 0) << 16 | 0 | (HEAPU16[($3_1 + 330 | 0) >> 1] | 0) | 0;
           break label$93;
          }
          HEAP32[($21_1 + 4 | 0) >> 2] = 4;
         }
         label$104 : {
          if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$104
          }
          if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$104
          }
          $5_1 = HEAP32[($21_1 + 4 | 0) >> 2] | 0;
          $6_1 = HEAP32[($21_1 + 8 | 0) >> 2] | 0;
          $7_1 = HEAP32[($21_1 + 12 | 0) >> 2] | 0;
          HEAP32[(($3_1 + 48 | 0) + 16 | 0) >> 2] = HEAPU8[($3_1 + 328 | 0) >> 0] | 0;
          HEAP32[($3_1 + 48 | 0) >> 2] = $21_1;
          HEAP32[($3_1 + 52 | 0) >> 2] = $7_1;
          HEAP32[($3_1 + 56 | 0) >> 2] = $6_1;
          HEAP32[($3_1 + 60 | 0) >> 2] = $5_1;
          $827(47262 | 0, $3_1 + 48 | 0 | 0);
         }
         HEAP32[($21_1 + 324 | 0) >> 2] = $2_1;
         $215(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $21_1 | 0);
         break label$12;
        }
        $12_1 = $20_1;
       }
       $19_1 = $19_1 + 1 | 0;
       continue label$78;
      };
     }
     $11_1 = $11_1 + 1 | 0;
     if (($11_1 | 0) != ($8_1 | 0)) {
      continue label$11
     }
     break label$3;
    };
   }
   HEAP8[($0_1 + 152 | 0) >> 0] = 1;
  }
  label$105 : {
   $23_1 = $3_1 + 352 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
 }
 
 function $576($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $10$hi = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62232 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62232 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $7_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $6_1;
   $827(47318 | 0, $5_1 | 0);
  }
  label$4 : {
   if (!($1_1 & 16 | 0)) {
    break label$4
   }
   $546(HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $5_1 + 24 | 0 | 0);
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
   i64toi32_i32$0 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $0_1 + 64 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   label$5 : {
    label$6 : {
     $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if ($4_1) {
      break label$6
     }
     i64toi32_i32$1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
      break label$5
     }
     break label$4;
    }
    if ($4_1 >>> 0 <= $1_1 >>> 0) {
     break label$4
    }
   }
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $10_1;
   HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 40 | 0) >> 2] = $1_1;
  }
  label$7 : {
   $9_1 = $5_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return 2 | 0;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = $0_1 + 172 | 0;
   $0_1 = $714($3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (5 | 0)) {
      break label$3
     }
     $0_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 3 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     if (($0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0 | 0) != (1212435798 | 0)) {
      break label$3
     }
     return 1 | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    $0_1 = $714($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $5_1 = 0, $98_1 = 0, $101_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (!($579($0_1 | 0, $2_1 + 96 | 0 | 0, 3 | 0) | 0)) {
    break label$3
   }
   HEAP16[$1_1 >> 1] = $777($2_1 + 96 | 0 | 0) | 0;
   $0_1 = $764($2_1 + 96 | 0 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($0_1 & 128 | 0)) {
     break label$4
    }
    $766($2_1 + 96 | 0 | 0, 2 | 0) | 0;
   }
   label$5 : {
    if (!($0_1 & 64 | 0)) {
     break label$5
    }
    $4_1 = $764($2_1 + 96 | 0 | 0) | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $766($2_1 + 96 | 0 | 0, $4_1 | 0) | 0;
   }
   label$6 : {
    if (!($0_1 & 32 | 0)) {
     break label$6
    }
    $766($2_1 + 96 | 0 | 0, 2 | 0) | 0;
   }
   if (!($579($2_1 + 96 | 0 | 0, $2_1 + 80 | 0 | 0, 4 | 0) | 0)) {
    break label$3
   }
   $0_1 = $772($2_1 + 80 | 0 | 0) | 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = $0_1;
   if (!$0_1) {
    break label$3
   }
   $0_1 = $764($2_1 + 80 | 0 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break label$3
   }
   HEAP8[($1_1 + 3 | 0) >> 0] = ($0_1 & 252 | 0) >>> 2 | 0;
   $766($2_1 + 80 | 0 | 0, 11 | 0) | 0;
   label$7 : {
    label$8 : {
     $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
     if (($0_1 | 0) == (32 | 0)) {
      break label$8
     }
     label$9 : {
      if (($0_1 | 0) == (103 | 0)) {
       break label$9
      }
      if (($0_1 | 0) != (64 | 0)) {
       break label$7
      }
     }
     $0_1 = $579($2_1 + 80 | 0 | 0, $2_1 + 64 | 0 | 0, 5 | 0) | 0;
     if (!$0_1) {
      break label$3
     }
     i64toi32_i32$2 = ($2_1 + 64 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 40 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $98_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
     $101_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 40 | 0) >> 2] = $101_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     if (!($580($2_1 + 64 | 0 | 0, $2_1 + 56 | 0 | 0) | 0)) {
      break label$3
     }
     HEAP8[($1_1 + 4 | 0) >> 0] = HEAPU8[($2_1 + 58 | 0) >> 0] | 0;
     HEAP8[($1_1 + 6 | 0) >> 0] = HEAPU8[($2_1 + 57 | 0) >> 0] | 0;
     HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($2_1 + 56 | 0) >> 0] | 0;
     $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     label$10 : {
      if ($0_1 >>> 0 > 3072 >>> 0) {
       break label$10
      }
      $4_1 = $1_1 + 20 | 0;
      $3_1 = $768($2_1 + 40 | 0 | 0, $4_1 | 0, $0_1 | 0) | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
      label$11 : {
       if (($3_1 | 0) != ($0_1 | 0)) {
        break label$11
       }
       HEAP32[($1_1 + 16 | 0) >> 2] = $581($4_1 | 0, $0_1 | 0) | 0;
       break label$7;
      }
      label$12 : {
       if (!($835(62248 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(47654 | 0, $2_1 | 0);
      }
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
      HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     }
     if (!($835(62248 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = 3072;
     HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
     $827(47679 | 0, $2_1 + 16 | 0 | 0);
     break label$7;
    }
    $0_1 = $579($2_1 + 80 | 0 | 0, $2_1 + 64 | 0 | 0, 5 | 0) | 0;
    if (!$0_1) {
     break label$3
    }
    label$13 : {
     if ($0_1 >>> 0 < 129 >>> 0) {
      break label$13
     }
     $3_1 = 0;
     if (!($834(62248 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 36 | 0) >> 2] = 128;
     HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
     $827(47717 | 0, $2_1 + 32 | 0 | 0);
     break label$3;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $768($2_1 + 64 | 0 | 0, $1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   }
   $3_1 = 1;
  }
  label$14 : {
   $6_1 = $2_1 + 112 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $579($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $11_1 = 0, $16_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((($764($0_1 | 0) | 0) & 255 | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $11_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $16_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = $582($1_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $3_1 = ($766($0_1 | 0, $1_1 | 0) | 0 | 0) == ($1_1 | 0) ? $1_1 : 0;
  }
  return $3_1 | 0;
 }
 
 function $580($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $783($2_1 | 0, $0_1 | 0);
  $1_1 = $583($2_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $581($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP16[($2_1 + 14 | 0) >> 1] = 1;
  HEAP16[($2_1 + 12 | 0) >> 1] = $1_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $760($2_1 + 32 | 0 | 0, $2_1 + 8 | 0 | 0, 1 | 0);
  $783($2_1 + 16 | 0 | 0, $2_1 + 32 | 0 | 0);
  $583($2_1 + 16 | 0 | 0, $2_1 | 0) | 0;
  $0_1 = $786($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $2_1 = $764($0_1 | 0) | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $1_1 = $2_1 & 127 | 0 | ($1_1 << 7 | 0) | 0;
   if ((($2_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $1_1 | 0;
 }
 
 function $583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP8[($1_1 + 2 | 0) >> 0] = $584($0_1 | 0) | 0;
  $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
  $4_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $790($0_1 | 0, 4 | 0) | 0;
  label$3 : {
   label$4 : {
    if ($784($0_1 | 0) | 0) {
     break label$4
    }
    label$5 : {
     if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (5 | 0)) {
      break label$5
     }
     $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
     $4_1 = $584($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
    }
    label$6 : {
     if (!($793($0_1 | 0, 8 | 0) | 0)) {
      break label$6
     }
     label$7 : {
      label$8 : {
       if ($4_1 >>> 0 > 23 >>> 0) {
        break label$8
       }
       if (!((1 << $4_1 | 0) & 16384222 | 0)) {
        break label$8
       }
       $789($0_1 | 0) | 0;
       $5_1 = $789($0_1 | 0) | 0;
       if ($784($0_1 | 0) | 0) {
        break label$4
       }
       label$9 : {
        if (!$5_1) {
         break label$9
        }
        $792($0_1 | 0, 14 | 0);
       }
       $5_1 = $789($0_1 | 0) | 0;
       if ($784($0_1 | 0) | 0) {
        break label$4
       }
       label$10 : {
        label$11 : {
         if (($4_1 | 0) == (20 | 0)) {
          break label$11
         }
         if (($4_1 | 0) != (6 | 0)) {
          break label$10
         }
        }
        $792($0_1 | 0, 13 | 0);
       }
       if (!$5_1) {
        break label$7
       }
       label$12 : {
        $5_1 = $4_1 + -17 | 0;
        if ($5_1 >>> 0 > 6 >>> 0) {
         break label$12
        }
        if (!((109 >>> ($5_1 & 255 | 0) | 0) & 1 | 0)) {
         break label$12
        }
        $792($0_1 | 0, HEAP32[(($5_1 << 2 | 0) + 48040 | 0) >> 2] | 0 | 0);
       }
       $789($0_1 | 0) | 0;
       break label$7;
      }
      if (($4_1 | 0) != (39 | 0)) {
       break label$7
      }
      $586($0_1 | 0, $1_1 | 0);
     }
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     label$13 : {
      label$14 : {
       if (($4_1 + -19 | 0) >>> 0 < 9 >>> 0) {
        break label$14
       }
       if (($4_1 | 0) == (39 | 0)) {
        break label$14
       }
       if (($4_1 | 0) != (17 | 0)) {
        break label$13
       }
      }
      label$15 : {
       $5_1 = $790($0_1 | 0, 2 | 0) | 0;
       if (($5_1 & -2 | 0 | 0) != (2 | 0)) {
        break label$15
       }
       $587($0_1 | 0);
      }
      if (!$5_1) {
       break label$13
      }
      $789($0_1 | 0) | 0;
     }
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     label$16 : {
      if (($4_1 | 0) != (5 | 0)) {
       break label$16
      }
      $4_1 = 5;
      break label$6;
     }
     if (!($793($0_1 | 0, 16 | 0) | 0)) {
      break label$6
     }
     if (($790($0_1 | 0, 11 | 0) | 0 | 0) != (695 | 0)) {
      break label$6
     }
     $5_1 = $584($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     if (($5_1 | 0) != (5 | 0)) {
      break label$6
     }
     $5_1 = $789($0_1 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$4
     }
     if (!$5_1) {
      break label$6
     }
     $4_1 = 5;
     $3_1 = $585($0_1 | 0, $1_1 | 0) | 0;
    }
    $5_1 = 1;
    if ((HEAP8[(0 + 62248 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$3
    }
    if (!($828(2 | 0, 62248 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $6_1 = HEAPU8[$1_1 >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
    $827(47872 | 0, $2_1 + 16 | 0 | 0);
    break label$3;
   }
   $5_1 = 0;
   if ((HEAP8[(0 + 62248 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   $5_1 = 0;
   if (!($828(2 | 0, 62248 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $827(47976 | 0, $2_1 | 0);
  }
  label$17 : {
   $9_1 = $2_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $790($0_1 | 0, 5 | 0) | 0;
   if (($1_1 | 0) != (31 | 0)) {
    break label$1
   }
   $1_1 = ($790($0_1 | 0, 6 | 0) | 0) + 32 | 0;
  }
  return $1_1 | 0;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $790($0_1 | 0, 4 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP8[$1_1 >> 0] = $2_1;
  }
  $1_1 = 0;
  label$2 : {
   if ($784($0_1 | 0) | 0) {
    break label$2
   }
   label$3 : {
    if (($2_1 | 0) != (15 | 0)) {
     break label$3
    }
    return $790($0_1 | 0, 24 | 0) | 0 | 0;
   }
   if ($2_1 >>> 0 > 12 >>> 0) {
    break label$2
   }
   $1_1 = HEAP32[(($2_1 << 2 | 0) + 47808 | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  $789($0_1 | 0) | 0;
  label$1 : {
   if (!($789($0_1 | 0) | 0)) {
    break label$1
   }
   $789($0_1 | 0) | 0;
   $789($0_1 | 0) | 0;
   $588($0_1 | 0, HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0);
  }
  label$2 : {
   if (!($790($0_1 | 0, 4 | 0) | 0)) {
    break label$2
   }
   label$3 : while (1) {
    label$4 : {
     $1_1 = $790($0_1 | 0, 4 | 0) | 0;
     if (($1_1 | 0) != (15 | 0)) {
      break label$4
     }
     $1_1 = ($790($0_1 | 0, 8 | 0) | 0) + 15 | 0;
    }
    label$5 : {
     if (($1_1 | 0) != (255 | 0)) {
      break label$5
     }
     $1_1 = ($790($0_1 | 0, 16 | 0) | 0) + 255 | 0;
    }
    if ($784($0_1 | 0) | 0) {
     break label$2
    }
    $792($0_1 | 0, $1_1 | 0);
    if ($790($0_1 | 0, 4 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
  }
  $784($0_1 | 0) | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0;
  $790($0_1 | 0, 8 | 0) | 0;
  $1_1 = $790($0_1 | 0, 2 | 0) | 0;
  $790($0_1 | 0, 3 | 0) | 0;
  $2_1 = $790($0_1 | 0, 3 | 0) | 0;
  label$1 : {
   if ($784($0_1 | 0) | 0) {
    break label$1
   }
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $3_1 = 0;
    $4_1 = ($1_1 | 0) != (2 | 0);
    label$3 : while (1) {
     $5_1 = $790($0_1 | 0, 6 | 0) | 0;
     if ($784($0_1 | 0) | 0) {
      break label$1
     }
     $1_1 = $789($0_1 | 0) | 0;
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $1_1 = !$1_1;
      $6_1 = 0;
      label$5 : while (1) {
       $7_1 = $789($0_1 | 0) | 0;
       $8_1 = $789($0_1 | 0) | 0;
       label$6 : {
        if (($2_1 | 0) == (1 | 0)) {
         break label$6
        }
        $789($0_1 | 0) | 0;
       }
       label$7 : {
        $9_1 = $790($0_1 | 0, 2 | 0) | 0;
        if ($9_1) {
         break label$7
        }
        $789($0_1 | 0) | 0;
       }
       label$8 : {
        if ($4_1) {
         break label$8
        }
        $790($0_1 | 0, 2 | 0) | 0;
       }
       $789($0_1 | 0) | 0;
       $790($0_1 | 0, ($1_1 & 1 | 0 ? 16 : 4) | 0) | 0;
       label$9 : {
        if ($7_1) {
         break label$9
        }
        $790($0_1 | 0, ($9_1 ? 7 : 5) | 0) | 0;
       }
       label$10 : {
        if ($8_1) {
         break label$10
        }
        $790($0_1 | 0, 5 | 0) | 0;
       }
       $7_1 = $789($0_1 | 0) | 0;
       $1_1 = !$7_1;
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) != ($5_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $1_1 = 0;
      if (!$7_1) {
       break label$4
      }
      label$11 : while (1) {
       $790($0_1 | 0, 6 | 0) | 0;
       $1_1 = $1_1 + 1 | 0;
       if (($1_1 | 0) != ($5_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
     }
     $3_1 = $3_1 + 1 | 0;
     if (($3_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$12 : {
    if (!($789($0_1 | 0) | 0)) {
     break label$12
    }
    $790($0_1 | 0, 5 | 0) | 0;
    $790($0_1 | 0, 5 | 0) | 0;
   }
   $784($0_1 | 0) | 0;
  }
 }
 
 function $588($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > 6 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[(($1_1 << 2 | 0) + 48068 | 0) >> 2] | 0;
   $1_1 = 0;
   label$2 : while (1) {
    $589($0_1 | 0);
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $784($0_1 | 0) | 0;
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $789($0_1 | 0) | 0;
  $790($0_1 | 0, 4 | 0) | 0;
  $790($0_1 | 0, 4 | 0) | 0;
  $790($0_1 | 0, 3 | 0) | 0;
  $790($0_1 | 0, 2 | 0) | 0;
  $1_1 = $789($0_1 | 0) | 0;
  $2_1 = $789($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $790($0_1 | 0, 2 | 0) | 0;
   $789($0_1 | 0) | 0;
   $790($0_1 | 0, 2 | 0) | 0;
  }
  label$2 : {
   if (!$2_1) {
    break label$2
   }
   $790($0_1 | 0, 2 | 0) | 0;
   $790($0_1 | 0, 2 | 0) | 0;
   $789($0_1 | 0) | 0;
   $789($0_1 | 0) | 0;
  }
  $784($0_1 | 0) | 0;
 }
 
 function $590($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $13_1 = 0, $6_1 = 0, $7_1 = 0, $94_1 = 0, $97_1 = 0;
  label$1 : {
   $4_1 = global$0 - 176 | 0;
   $13_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 121 | 0);
  }
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $744($5_1 | 0, $1_1 | 0);
   $822($4_1 + 112 | 0 | 0, 0 | 0, 44 | 0) | 0;
   $6_1 = ($4_1 + 48 | 0) + 16 | 0;
   $7_1 = $4_1 + 68 | 0;
   label$6 : while (1) {
    $763($4_1 + 160 | 0 | 0, $5_1 | 0);
    $8_1 = 0;
    $9_1 = 0;
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : while (1) {
        $1_1 = $8_1;
        $10_1 = $764($4_1 + 160 | 0 | 0) | 0;
        if (($10_1 | 0) == (-1 | 0)) {
         break label$9
        }
        $8_1 = $1_1 + 1 | 0;
        $9_1 = $9_1 << 8 | 0 | $10_1 | 0;
        $10_1 = $9_1 & 65535 | 0;
        if ($10_1 >>> 0 < 65504 >>> 0) {
         continue label$10
        }
        break label$10;
       };
       $11_1 = 0;
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : while (1) {
           label$15 : {
            if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$15
            }
            if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$15
            }
            $9_1 = $754($4_1 + 160 | 0 | 0) | 0;
            HEAP32[($4_1 + 84 | 0) >> 2] = $10_1;
            HEAP32[($4_1 + 80 | 0) >> 2] = $0_1;
            HEAP32[($4_1 + 88 | 0) >> 2] = $9_1 + -2 | 0;
            $827(48211 | 0, $4_1 + 80 | 0 | 0);
           }
           $9_1 = $596($4_1 + 160 | 0 | 0, $10_1 | 0, $4_1 + 112 | 0 | 0, $2_1 | 0) | 0;
           label$16 : {
            if (!$3_1) {
             break label$16
            }
            if ($11_1) {
             break label$16
            }
            i64toi32_i32$2 = ($4_1 + 160 | 0) + 8 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $94_1 = i64toi32_i32$0;
            i64toi32_i32$0 = ($4_1 + 96 | 0) + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $94_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $4_1;
            i64toi32_i32$1 = HEAP32[($4_1 + 160 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($4_1 + 164 | 0) >> 2] | 0;
            $97_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $4_1;
            HEAP32[($4_1 + 96 | 0) >> 2] = $97_1;
            HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$0;
            $595($4_1 + 96 | 0 | 0, $2_1 | 0, $3_1 | 0);
           }
           if ((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$11
           }
           if (!$9_1) {
            break label$13
           }
           label$17 : {
            if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
             break label$17
            }
            if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
             break label$17
            }
            $12_1 = $754($4_1 + 160 | 0 | 0) | 0;
            HEAP32[$6_1 >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
            HEAP32[$7_1 >> 2] = HEAPU16[($4_1 + 118 | 0) >> 1] | 0;
            HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
            HEAP32[($4_1 + 52 | 0) >> 2] = $11_1;
            HEAP32[($4_1 + 56 | 0) >> 2] = $12_1;
            HEAP32[($4_1 + 60 | 0) >> 2] = $9_1;
            $827(48259 | 0, $4_1 + 48 | 0 | 0);
           }
           $766($4_1 + 160 | 0 | 0, $9_1 | 0) | 0;
           $9_1 = $777($4_1 + 160 | 0 | 0) | 0;
           if ((HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) < (0 | 0)) {
            break label$11
           }
           label$18 : {
            $12_1 = $9_1 >>> 5 | 0;
            if (($12_1 | 0) != (2047 | 0)) {
             break label$18
            }
            $11_1 = $11_1 + 1 | 0;
            if (($11_1 | 0) == (3 | 0)) {
             break label$12
            }
            continue label$14;
           }
           break label$14;
          };
          if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$13
          }
          if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$13
          }
          $8_1 = $754($4_1 + 160 | 0 | 0) | 0;
          HEAP32[(($4_1 + 16 | 0) + 16 | 0) >> 2] = 2047;
          HEAP32[($4_1 + 28 | 0) >> 2] = $12_1;
          HEAP32[($4_1 + 24 | 0) >> 2] = $9_1;
          HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
          HEAP32[($4_1 + 20 | 0) >> 2] = $8_1 + -2 | 0;
          $827(48336 | 0, $4_1 + 16 | 0 | 0);
         }
         $1_1 = $1_1 + 3 | 0;
         break label$9;
        }
        $738($5_1 | 0);
        $1_1 = $813(328 | 0) | 0;
        if (!$1_1) {
         break label$8
        }
        $218($1_1 | 0);
        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
        $973($1_1 + 20 | 0 | 0, $4_1 + 112 | 0 | 0, 44 | 0) | 0;
        break label$8;
       }
       $1_1 = $8_1;
      }
      label$19 : {
       if ((HEAP8[(0 + 62264 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$19
       }
       if (!($828(2 | 0, 62264 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$19
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(48395 | 0, $4_1 | 0);
      }
      if ($1_1 >>> 0 >= 3 >>> 0) {
       break label$7
      }
      $1_1 = 0;
     }
     label$20 : {
      $14_1 = $4_1 + 176 | 0;
      if ($14_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $14_1;
     }
     return $1_1 | 0;
    }
    $763($4_1 + 160 | 0 | 0, $5_1 | 0);
    $766($4_1 + 160 | 0 | 0, $1_1 + -2 | 0 | 0) | 0;
    $745($5_1 | 0, $4_1 + 160 | 0 | 0);
    continue label$6;
   };
  }
  $859(48201 | 0, 48117 | 0, 122 | 0);
  abort();
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $813(8 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $845($1_1 | 0, 8 | 0, $1_1 | 0, 48096 | 0);
     $0_1 = $736($0_1 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
     if ($0_1) {
      break label$2
     }
     $815($1_1 | 0);
    }
    $1_1 = 0;
   }
   return $1_1 | 0;
  }
  $859(48510 | 0, 48117 | 0, 64 | 0);
  abort();
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 87 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $0_1 = $590($0_1 | 0, $1_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $0_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 48096 | 0, 48117 | 0, 99 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $595($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$2_1) {
     break label$3
    }
    $822($2_1 | 0, 0 | 0, 16 | 0) | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) == (3 | 0);
    $766($0_1 | 0, ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) == (3 | 0) ? ($4_1 ? 17 : 32) : $4_1 ? 9 : 17) | 0) | 0;
    $1_1 = $778($0_1 | 0) | 0;
    label$5 : {
     label$6 : {
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      label$7 : {
       label$8 : {
        if (($1_1 | 0) != (1483304551 | 0)) {
         break label$8
        }
        $1_1 = 2;
        break label$7;
       }
       if (($1_1 | 0) != (1231971951 | 0)) {
        break label$6
       }
       $1_1 = 1;
      }
      HEAP32[$2_1 >> 2] = $1_1;
      $1_1 = $778($0_1 | 0) | 0;
      if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$5
      }
      label$9 : {
       if (!($1_1 & 1 | 0)) {
        break label$9
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
      }
      label$10 : {
       if (!($1_1 & 2 | 0)) {
        break label$10
       }
       HEAP32[($2_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      }
      label$11 : {
       if (!($1_1 & 4 | 0)) {
        break label$11
       }
       $766($0_1 | 0, 100 | 0) | 0;
      }
      if (!($1_1 & 8 | 0)) {
       break label$5
      }
      HEAP32[($2_1 + 12 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     }
     $769($0_1 | 0, $3_1 + 8 | 0 | 0);
     $766($0_1 | 0, 32 | 0) | 0;
     if (($778($0_1 | 0) | 0 | 0) != (1447187017 | 0)) {
      break label$5
     }
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = 2;
     $766($0_1 | 0, 2 | 0) | 0;
     $766($0_1 | 0, 2 | 0) | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = $777($0_1 | 0) | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $778($0_1 | 0) | 0;
    }
    label$12 : {
     $6_1 = $3_1 + 16 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return;
   }
   $859(48518 | 0, 48528 | 0, 133 | 0);
   abort();
  }
  $859(48611 | 0, 48528 | 0, 134 | 0);
  abort();
 }
 
 function $596($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $4_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $5_1 = ($1_1 >>> 1 | 0) & 3 | 0;
  $1_1 = ($1_1 >>> 3 | 0) & 3 | 0;
  $6_1 = 0;
  label$3 : {
   if ((HEAP8[(0 + 62280 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62280 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$4_1 >> 2] = $1_1;
   $827(48620 | 0, $4_1 | 0);
  }
  label$4 : {
   if (($1_1 | 0) == (1 | 0)) {
    break label$4
   }
   if (!$5_1) {
    break label$4
   }
   $0_1 = $777($0_1 | 0) | 0;
   HEAP8[($3_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[$3_1 >> 0] = $5_1;
   $7_1 = ($0_1 >>> 6 | 0) & 3 | 0;
   HEAP8[($3_1 + 2 | 0) >> 0] = $7_1;
   label$5 : {
    label$6 : {
     if (($1_1 | 0) != (3 | 0)) {
      break label$6
     }
     $8_1 = 48688;
     if (($5_1 | 0) == (3 | 0)) {
      break label$5
     }
     $8_1 = ($5_1 | 0) == (2 | 0) ? 48720 : 48752;
     break label$5;
    }
    $8_1 = ($5_1 | 0) == (3 | 0) ? 48784 : 48816;
   }
   $9_1 = ($0_1 >>> 12 | 0) + -1 | 0;
   if ($9_1 >>> 0 > 13 >>> 0) {
    break label$4
   }
   HEAP32[$2_1 >> 2] = ($5_1 | 0) == (1 | 0) ? 1 : 3;
   $8_1 = HEAPU16[($8_1 + ($9_1 << 1 | 0) | 0) >> 1] | 0;
   HEAP16[($2_1 + 6 | 0) >> 1] = $8_1;
   $9_1 = ($0_1 >>> 10 | 0) & 3 | 0;
   if (($9_1 | 0) == (3 | 0)) {
    break label$4
   }
   $6_1 = $0_1 >>> 9 | 0;
   label$7 : {
    label$8 : {
     if (($1_1 | 0) != (3 | 0)) {
      break label$8
     }
     $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48844 | 0) >> 1] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     $1_1 = 0;
     break label$7;
    }
    label$9 : {
     if (($1_1 | 0) != (2 | 0)) {
      break label$9
     }
     $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48850 | 0) >> 1] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
     $1_1 = ($5_1 | 0) == (1 | 0);
     break label$7;
    }
    $1_1 = 1;
    $0_1 = HEAPU16[(($9_1 << 1 | 0) + 48856 | 0) >> 1] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
   }
   $6_1 = $6_1 & 1 | 0;
   HEAP8[($2_1 + 5 | 0) >> 0] = 16;
   HEAP8[($2_1 + 4 | 0) >> 0] = ($7_1 | 0) == (3 | 0) ? 1 : 2;
   label$10 : {
    label$11 : {
     if (($5_1 | 0) != (3 | 0)) {
      break label$11
     }
     $5_1 = (((Math_imul($8_1, 12e3) >>> 0) / (($0_1 << $1_1 | 0) >>> 0) | 0) + $6_1 | 0) << 2 | 0;
     $6_1 = 384;
     break label$10;
    }
    $5_1 = ((Math_imul($8_1, 144e3) >>> 0) / (($0_1 << $1_1 | 0) >>> 0) | 0) + $6_1 | 0;
    $6_1 = 1152;
   }
   HEAP16[($3_1 + 4 | 0) >> 1] = $6_1 >>> $1_1 | 0;
   $6_1 = $5_1 + -4 | 0;
  }
  label$12 : {
   $11_1 = $4_1 + 16 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $6_1 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $813(352 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    $845($1_1 | 0, 352 | 0, $1_1 | 0, 48880 | 0);
    $0_1 = $736($0_1 | 0) | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1;
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     $598($1_1 | 0);
     return $1_1 | 0;
    }
    $815($1_1 | 0);
   }
   return 0 | 0;
  }
  $859(48972 | 0, 48980 | 0, 73 | 0);
  abort();
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $27_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 55 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $219($0_1 + 32 | 0 | 0);
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP8[($0_1 + 10 | 0) >> 0] = 255;
  i64toi32_i32$2 = $0_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 344 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 48 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 336 | 0) >> 2] = $27_1;
  HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 96 | 0);
  }
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 352 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $4_1 = 0, $8_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $7_1 = 0, $9_1 = 0, $109_1 = 0, $112_1 = 0, $11_1 = 0, $179_1 = 0, $182_1 = 0;
  label$1 : {
   $3_1 = global$0 - 432 | 0;
   $12_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 191 | 0);
  }
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $744($4_1 | 0, $1_1 | 0);
  $763($3_1 + 416 | 0 | 0, $4_1 | 0);
  $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
  $1_1 = $262($3_1 + 416 | 0 | 0, -1 | 0) | 0;
  $6_1 = $754($3_1 + 416 | 0 | 0) | 0;
  label$5 : {
   label$6 : {
    if (!$1_1) {
     break label$6
    }
    $7_1 = $0_1 + 32 | 0;
    $8_1 = $0_1 + 336 | 0;
    $9_1 = $3_1 + 48 | 0;
    label$7 : while (1) {
     HEAP8[($0_1 + 10 | 0) >> 0] = $1_1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                $1_1 = $1_1 & 255 | 0;
                switch ($1_1 + -176 | 0 | 0) {
                case 8:
                 break label$12;
                case 2:
                case 4:
                case 6:
                 break label$13;
                case 0:
                case 1:
                 break label$14;
                case 7:
                 break label$15;
                case 3:
                 break label$16;
                case 5:
                 break label$17;
                default:
                 break label$18;
                };
               }
               if ($1_1) {
                break label$13
               }
               HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
               break label$8;
              }
              HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 1 | 0;
              if (($5_1 & 255 | 0 | 0) != (179 | 0)) {
               break label$8
              }
              $1_1 = $778($3_1 + 416 | 0 | 0) | 0;
              $5_1 = $777($3_1 + 416 | 0 | 0) | 0;
              if ((HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0) < (0 | 0)) {
               break label$8
              }
              HEAP8[($0_1 + 336 | 0) >> 0] = 1;
              HEAP8[($0_1 + 351 | 0) >> 0] = ($5_1 & 128 | 0) >>> 7 | 0;
              HEAP8[($0_1 + 350 | 0) >> 0] = ($1_1 >>> 19 | 0) & 1 | 0;
              HEAP8[($0_1 + 349 | 0) >> 0] = ($1_1 >>> 20 | 0) & 15 | 0;
              HEAP8[($0_1 + 348 | 0) >> 0] = ($1_1 >>> 24 | 0) & 7 | 0;
              HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0 | (($1_1 << 17 | 0) & 1073479680 | 0) | 0;
              break label$8;
             }
             $5_1 = ($3_1 + 96 | 0) + 8 | 0;
             $10_1 = $8_1 + 8 | 0;
             i64toi32_i32$2 = $10_1;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $109_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $5_1;
             HEAP32[i64toi32_i32$0 >> 2] = $109_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $8_1;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $112_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $3_1;
             HEAP32[($3_1 + 96 | 0) >> 2] = $112_1;
             HEAP32[($3_1 + 100 | 0) >> 2] = i64toi32_i32$0;
             $1_1 = $601($3_1 + 416 | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
             if ((HEAP32[($3_1 + 420 | 0) >> 2] | 0 | 0) < (0 | 0)) {
              break label$6
             }
             label$19 : {
              if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$19
              }
              if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$19
              }
              HEAP32[($3_1 + 64 | 0) >> 2] = $0_1;
              HEAP32[($3_1 + 68 | 0) >> 2] = HEAPU16[($3_1 + 120 | 0) >> 1] | 0;
              HEAP32[($3_1 + 72 | 0) >> 2] = HEAPU16[($3_1 + 122 | 0) >> 1] | 0;
              $827(49064 | 0, $3_1 + 64 | 0 | 0);
             }
             label$20 : {
              if ($1_1) {
               break label$20
              }
              HEAP8[$2_1 >> 0] = 1;
              break label$11;
             }
             $1_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + 1 | 0;
             HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
             label$21 : {
              if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$21
              }
              label$22 : {
               if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
                break label$22
               }
               $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
               $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
               $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
               HEAP32[$9_1 >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               HEAP32[($3_1 + 44 | 0) >> 2] = $11_1;
               HEAP32[($3_1 + 40 | 0) >> 2] = $6_1;
               HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
               HEAP32[($3_1 + 32 | 0) >> 2] = $0_1;
               $827(49106 | 0, $3_1 + 32 | 0 | 0);
              }
              $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
             }
             label$23 : {
              $1_1 = $1_1 & 65535 | 0;
              if (($1_1 | 0) != (1 | 0)) {
               break label$23
              }
              $973($7_1 | 0, $3_1 + 112 | 0 | 0, 304 | 0) | 0;
              i64toi32_i32$2 = $5_1;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $179_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $10_1;
              HEAP32[i64toi32_i32$0 >> 2] = $179_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = $3_1;
              i64toi32_i32$1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
              i64toi32_i32$0 = HEAP32[($3_1 + 100 | 0) >> 2] | 0;
              $182_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $8_1;
              HEAP32[i64toi32_i32$1 >> 2] = $182_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              label$24 : {
               label$25 : {
                $1_1 = HEAPU16[($3_1 + 122 | 0) >> 1] | 0;
                if (($1_1 | 0) > (719 | 0)) {
                 break label$25
                }
                if (($1_1 | 0) == (480 | 0)) {
                 break label$24
                }
                if (($1_1 | 0) == (576 | 0)) {
                 break label$24
                }
                break label$9;
               }
               if (($1_1 | 0) == (1080 | 0)) {
                break label$24
               }
               if (($1_1 | 0) != (720 | 0)) {
                break label$9
               }
              }
              if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
               break label$9
              }
              if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0) >>> 0 > 1 >>> 0) {
               break label$9
              }
              break label$10;
             }
             label$26 : {
              label$27 : {
               if ((HEAPU16[($3_1 + 120 | 0) >> 1] | 0 | 0) != (HEAPU16[($0_1 + 40 | 0) >> 1] | 0 | 0)) {
                break label$27
               }
               if ((HEAPU16[($3_1 + 122 | 0) >> 1] | 0 | 0) == (HEAPU16[($0_1 + 42 | 0) >> 1] | 0 | 0)) {
                break label$26
               }
              }
              HEAP16[($0_1 + 8 | 0) >> 1] = 0;
              break label$8;
             }
             if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
              break label$8
             }
             if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
              break label$10
             }
             break label$8;
            }
            if (($764($3_1 + 416 | 0 | 0) | 0 | 0) != (-1 | 0)) {
             break label$8
            }
            if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
             break label$8
            }
            if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
             break label$10
            }
            break label$8;
           }
           HEAP8[$2_1 >> 0] = 1;
           if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
            break label$11
           }
           if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
            break label$11
           }
           HEAP32[($3_1 + 84 | 0) >> 2] = $1_1;
           HEAP32[($3_1 + 80 | 0) >> 2] = $0_1;
           $827(49179 | 0, $3_1 + 80 | 0 | 0);
           break label$11;
          }
          label$28 : {
           if (($1_1 + -1 | 0) >>> 0 > 174 >>> 0) {
            break label$28
           }
           HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
           break label$8;
          }
          if ($1_1 >>> 0 < 185 >>> 0) {
           break label$8
          }
          $5_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
          if ($5_1 >>> 0 < 11 >>> 0) {
           break label$8
          }
          HEAP8[$2_1 >> 0] = 1;
          if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
           break label$11
          }
          if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
           break label$11
          }
          HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
          HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
          $827(49179 | 0, $3_1 + 16 | 0 | 0);
          break label$11;
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
         break label$8;
        }
        $738($4_1 | 0);
        $1_1 = 0;
        break label$5;
       }
       $1_1 = $602($0_1 | 0) | 0;
       break label$5;
      }
      HEAP32[($0_1 + 24 | 0) >> 2] = 0;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     }
     $5_1 = HEAPU8[($0_1 + 10 | 0) >> 0] | 0;
     $1_1 = $262($3_1 + 416 | 0 | 0, -1 | 0) | 0;
     $6_1 = $754($3_1 + 416 | 0 | 0) | 0;
     if ($1_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $1_1 = 0;
   label$29 : {
    if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$29
    }
    if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$29
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$3_1 >> 2] = $0_1;
    $827(49240 | 0, $3_1 | 0);
   }
   if ($6_1 >>> 0 < 5 >>> 0) {
    break label$5
   }
   $763($3_1 + 416 | 0 | 0, $4_1 | 0);
   $766($3_1 + 416 | 0 | 0, $6_1 + -4 | 0 | 0) | 0;
   $745($4_1 | 0, $3_1 + 416 | 0 | 0);
  }
  label$30 : {
   $13_1 = $3_1 + 432 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $1_1 | 0;
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = $778($0_1 | 0) | 0;
  $4_1 = $778($0_1 | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $219($1_1 | 0);
   HEAP16[($1_1 + 8 | 0) >> 1] = $3_1 >>> 20 | 0;
   HEAP16[($1_1 + 10 | 0) >> 1] = ($3_1 >>> 8 | 0) & 4095 | 0;
   $5_1 = 0;
   $0_1 = $4_1 >>> 14 | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = ($0_1 | 0) == (262143 | 0) ? 0 : $0_1;
   if (!($3_1 & 240 | 0)) {
    break label$1
   }
   $0_1 = $3_1 & 15 | 0;
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[(($0_1 << 2 | 0) + 49280 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAPF32[($1_1 + 300 | 0) >> 2] = Math_fround(Math_fround($0_1 >>> 0) / Math_fround(1.0e3));
   $5_1 = 1;
  }
  return $5_1 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0, $36_1 = 0, $40_1 = 0;
  $1_1 = $813(328 | 0) | 0;
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = $0_1 + 344 | 0;
   HEAP16[$2_1 >> 1] = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   HEAP16[($0_1 + 346 | 0) >> 1] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $218($1_1 | 0);
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0 ? 2 : 1;
   $3_1 = $0_1 + 44 | 0;
   HEAP32[$3_1 >> 2] = (((HEAP32[$3_1 >> 2] | 0) << 1 | 0) >>> 0) / (5 >>> 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $36_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 48 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $973($1_1 + 20 | 0 | 0, $0_1 + 32 | 0 | 0, 304 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (48880 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 352 | 0, $0_1 | 0, 48880 | 0, 48980 | 0, 322 | 0);
  }
  $3_1 = 0;
  label$5 : {
   if ((HEAP8[(0 + 62296 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62296 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $5_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(49362 | 0, $2_1 | 0);
  }
  label$6 : {
   if (!(HEAP32[($0_1 + 24 | 0) >> 2] | 0)) {
    break label$6
   }
   if (!(HEAPU16[($0_1 + 8 | 0) >> 1] | 0)) {
    break label$6
   }
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$6
   }
   if ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 1 | 0) + 2 | 0) >>> 0 < $4_1 >>> 0) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = 60;
   $3_1 = $602($0_1 | 0) | 0;
  }
  label$7 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $0_1 = $610($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
  $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$3 : {
   $4_1 = $1_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 & ($2_1 | 0) == (2 | 0) | 0 | 0;
 }
 
 function $605($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(8 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62312 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 8;
    $827(49501 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 8 | 0, $2_1 | 0, 49404 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
  label$5 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (49404 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 49404 | 0, 49545 | 0, 64 | 0);
  }
  $845($0_1 | 0, 8 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $607($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $52_1 = 0, $55_1 = 0, $68_1 = 0, $71_1 = 0, $94_1 = 0, $97_1 = 0;
  label$1 : {
   $4_1 = global$0 - 208 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (49404 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 8 | 0, $0_1 | 0, 49404 | 0, 49545 | 0, 96 | 0);
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  $68($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0, 1048576 | 0, i64toi32_i32$1 | 0);
  $5_1 = 0;
  label$5 : {
   if (($608($4_1 + 16 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $4_1 | 0) | 0 | 0) < (0 | 0)) {
    break label$5
   }
   if ((HEAPU8[($4_1 + 120 | 0) >> 0] | 0 | 0) != (2 | 0)) {
    break label$5
   }
   if ((HEAPU8[($4_1 + 121 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$5
   }
   if (HEAPU8[($4_1 + 148 | 0) >> 0] | 0) {
    break label$5
   }
   label$6 : {
    $5_1 = $813(40 | 0) | 0;
    if (!$5_1) {
     break label$6
    }
    $214($5_1 | 0, 17 | 0);
    $0_1 = ($4_1 + 168 | 0) + 8 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $52_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[$0_1 >> 2] = $52_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[($4_1 + 168 | 0) >> 2] = $55_1;
    HEAP32[($4_1 + 172 | 0) >> 2] = i64toi32_i32$1;
    label$7 : {
     if (($766($4_1 + 16 | 0 | 0, HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($4_1 + 144 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = ($4_1 + 152 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[($4_1 + 168 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
     $71_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1;
     HEAP32[($4_1 + 152 | 0) >> 2] = $71_1;
     HEAP32[($4_1 + 156 | 0) >> 2] = i64toi32_i32$1;
     label$8 : {
      label$9 : {
       label$10 : {
        if (!($613($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 0) | 0)) {
         break label$10
        }
        if (((HEAPU8[($4_1 + 184 | 0) >> 0] | 0) & 255 | 0 | 0) != (1 | 0)) {
         break label$10
        }
        $1_1 = 146;
        if ($614($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 4 | 0 | 0) | 0) {
         break label$9
        }
        break label$7;
       }
       i64toi32_i32$2 = ($4_1 + 152 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$1;
       i64toi32_i32$1 = ($4_1 + 168 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1;
       HEAP32[($4_1 + 168 | 0) >> 2] = $97_1;
       HEAP32[($4_1 + 172 | 0) >> 2] = i64toi32_i32$1;
       $1_1 = 153;
       if (!($615($4_1 + 168 | 0 | 0, $4_1 + 184 | 0 | 0) | 0)) {
        break label$8
       }
      }
      $0_1 = $813(328 | 0) | 0;
      if (!$0_1) {
       break label$7
      }
      $218($0_1 | 0);
      HEAP32[$0_1 >> 2] = 0;
      $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 ? $6_1 : $5_1) >> 2] = $0_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = 1;
      $6_1 = HEAP32[($4_1 + 124 | 0) >> 2] | 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $6_1 + 1 | 0;
      label$11 : {
       $1_1 = $1_1 & 15 | 0;
       if (($1_1 | 0) == (9 | 0)) {
        break label$11
       }
       if (($1_1 | 0) != (2 | 0)) {
        break label$8
       }
       $1_1 = HEAPU8[($4_1 + 190 | 0) >> 0] | 0;
       HEAP8[($0_1 + 25 | 0) >> 0] = 16;
       HEAP8[($0_1 + 24 | 0) >> 0] = $1_1;
       HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 192 | 0) >> 2] | 0;
       HEAP16[($0_1 + 26 | 0) >> 1] = ((HEAP32[(($4_1 + 184 | 0) + 16 | 0) >> 2] | 0) >>> 0) / (1e3 >>> 0) | 0;
       break label$8;
      }
      HEAP8[($0_1 + 25 | 0) >> 0] = 16;
      HEAP8[($0_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 185 | 0) >> 0] | 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 188 | 0) >> 2] | 0;
     }
     $609($4_1 + 16 | 0 | 0);
     break label$5;
    }
    $815($5_1 | 0);
   }
   $609($4_1 + 16 | 0 | 0);
   $5_1 = 0;
  }
  label$12 : {
   $8_1 = $4_1 + 208 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $608($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $23_1 = 0, $23$hi = 0, $25_1 = 0, $25$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP8[($0_1 + 133 | 0) >> 0] = 0;
  $5_1 = -1;
  label$3 : {
   if (($70($0_1 | 0, $2_1 | 0, $1_1 | 0, 4 | 0) | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $23_1 = i64toi32_i32$0;
   $23$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$1;
   $25$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$1 = $25$hi;
   $74($0_1 | 0, $23_1 | 0, i64toi32_i32$0 | 0, $25_1 | 0, i64toi32_i32$1 | 0);
   label$4 : {
    if (!($76($0_1 | 0, 282 | 0) | 0)) {
     break label$4
    }
    HEAP8[($0_1 + 133 | 0) >> 0] = 1;
    $5_1 = $0_1 + 104 | 0;
    if (!($610($0_1 | 0, $5_1 | 0) | 0)) {
     break label$4
    }
    if (!($76($0_1 | 0, 16 | 0) | 0)) {
     break label$4
    }
    $3_1 = $0_1 + 80 | 0;
    if (!($611($3_1 | 0, $0_1 | 0, $5_1 | 0) | 0)) {
     break label$4
    }
    $3_1 = $612($3_1 | 0, $5_1 | 0, $0_1 + 132 | 0 | 0) | 0;
    HEAP32[($0_1 + 128 | 0) >> 2] = $3_1;
    label$5 : {
     if ((HEAP8[(0 + 62312 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     label$6 : {
      if (!($828(2 | 0, 62312 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      $827(49460 | 0, $4_1 | 0);
     }
     $3_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $5_1 = 0;
    if ($76($0_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
   }
   $71($0_1 | 0);
   HEAP8[($0_1 + 133 | 0) >> 0] = 0;
   $5_1 = -1;
  }
  label$7 : {
   $7_1 = $4_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 133 | 0) >> 0] | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 133 | 0) >> 0] = 0;
   $71($0_1 | 0);
  }
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $36_1 = 0, $7_1 = 0, $7$hi = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   if (($776($0_1 | 0) | 0 | 0) != (1399285583 | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 0;
   label$4 : {
    label$5 : {
     $4_1 = $764($0_1 | 0) | 0;
     switch ($4_1 + 1 | 0 | 0) {
     case 0:
      break label$3;
     case 1:
      break label$4;
     default:
      break label$5;
     };
    }
    $3_1 = 0;
    if (!($834(62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(49633 | 0, $2_1 | 0);
    break label$3;
   }
   HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
   i64toi32_i32$0 = $779($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $36_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $36_1;
   HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
   $3_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $3_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[$1_1 >> 0] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(49660 | 0, $2_1 + 16 | 0 | 0);
  }
  label$6 : {
   $6_1 = $2_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $611($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $10_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 0;
  return ($766($1_1 | 0, HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0 | 0) == (HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0;
 }
 
 function $612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $4_1 = 0;
  HEAP8[$2_1 >> 0] = 0;
  $5_1 = -1;
  label$3 : {
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   if ($6_1 >>> 0 >= (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) >>> 0) {
    break label$3
   }
   $7_1 = $0_1 + 4 | 0;
   label$4 : {
    label$5 : while (1) {
     $6_1 = $6_1 + 1 | 0;
     $5_1 = $764($7_1 | 0) | 0;
     $4_1 = (($5_1 | 0) == (-1 | 0) ? -1 : $4_1) + $5_1 | 0;
     if (($5_1 | 0) != (255 | 0)) {
      break label$4
     }
     if ($6_1 >>> 0 < (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) >>> 0) {
      continue label$5
     }
     break label$5;
    };
    HEAP8[$2_1 >> 0] = 1;
   }
   HEAP32[$0_1 >> 2] = $6_1;
   label$6 : {
    if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $827(49778 | 0, $3_1 | 0);
   }
   $5_1 = $4_1;
  }
  label$7 : {
   $9_1 = $3_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
  $3_1 = 0;
  label$3 : {
   if ($803($0_1 | 0, 49812 | 0, 6 | 0) | 0) {
    break label$3
   }
   $766($0_1 | 0, 6 | 0) | 0;
   $3_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = HEAPU8[$1_1 >> 0] | 0;
   $827(49818 | 0, $2_1 | 0);
  }
  label$4 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $614($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $62_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = $776($0_1 | 0) | 0;
  HEAP16[$1_1 >> 1] = $3_1;
  $4_1 = 0;
  label$3 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   label$4 : {
    if (!($3_1 & 65535 | 0)) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(62328 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAPU16[$1_1 >> 1] | 0;
    $827(49854 | 0, $2_1 + 32 | 0 | 0);
    break label$3;
   }
   HEAP8[($1_1 + 2 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $776($0_1 | 0) | 0;
   $772($0_1 | 0) | 0;
   $4_1 = 0;
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $4_1 = 1;
   if ((HEAP8[(0 + 62328 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62328 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $62_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = $62_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(49916 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ($803($0_1 | 0, 50011 | 0, 8 | 0) | 0) {
    break label$1
   }
   $766($0_1 | 0, 8 | 0) | 0;
   HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
   HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
   HEAP16[($1_1 + 2 | 0) >> 1] = $775($0_1 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $776($0_1 | 0) | 0;
   HEAP16[($1_1 + 8 | 0) >> 1] = $775($0_1 | 0) | 0;
   HEAP8[($1_1 + 10 | 0) >> 0] = $772($0_1 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $616($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 90 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($4_1 + 52 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[(($4_1 + 32 | 0) + 16 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 40 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 44 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   $827(50127 | 0, $4_1 + 32 | 0 | 0);
  }
  $5_1 = $0_1 + 12 | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$9
      }
      $7_1 = 0;
      label$10 : {
       if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
        break label$10
       }
       $8_1 = $6_1;
       label$11 : while (1) {
        label$12 : {
         $7_1 = $8_1;
         $8_1 = HEAP32[$7_1 >> 2] | 0;
         if ($8_1) {
          break label$12
         }
         HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
         break label$7;
        }
        if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 <= $2_1 >>> 0) {
         continue label$11
        }
        break label$11;
       };
      }
      HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
      if ($7_1) {
       break label$7
      }
      break label$8;
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    }
    $7_1 = $5_1;
    break label$6;
   }
   $6_1 = HEAP32[$7_1 >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$7_1 >> 2] = $1_1;
  label$13 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$13
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$13
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = $2_1 >>> 24 | 0;
   HEAP32[($4_1 + 16 | 0) >> 2] = ($2_1 >>> 16 | 0) & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$4_1 >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $2_1 & 255 | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = ($2_1 >>> 8 | 0) & 255 | 0;
   $827(50179 | 0, $4_1 | 0);
  }
  label$14 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 113 | 0);
  }
  label$5 : {
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    $827(50239 | 0, $2_1 + 32 | 0 | 0);
   }
   label$7 : {
    label$8 : {
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
     break label$7;
    }
    label$9 : while (1) {
     $4_1 = $3_1;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if (($3_1 | 0) != ($1_1 | 0)) {
      continue label$9
     }
     break label$9;
    };
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   label$10 : {
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$10
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$10
    }
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $3_1 >>> 24 | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $0_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1 & 255 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
    $827(50290 | 0, $2_1 | 0);
   }
   label$11 : {
    $6_1 = $2_1 + 64 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return;
  }
  $859(50231 | 0, 50048 | 0, 114 | 0);
  abort();
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  return ($1_1 ? (Math_imul($1_1, 20) + ($0_1 + 56 | 0) | 0) + -16 | 0 : 0) | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
   $827(50341 | 0, $1_1 + 16 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 443 | 0);
  }
  $738(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $822($0_1 + 16 | 0 | 0, 0 | 0, 40 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 41 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$6 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$6
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$6
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(50360 | 0, $1_1 | 0);
  }
  label$7 : {
   $3_1 = $1_1 + 32 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $57_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ($3_1 >>> 0 >= 9 >>> 0) {
     break label$3
    }
    $3_1 = $3_1 + -1 | 0;
    label$5 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     $4_1 = HEAP32[((($0_1 + 56 | 0) + Math_imul($3_1, 20) | 0) + 8 | 0) >> 2] | 0;
     $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$2_1 >> 2] = $5_1 + -1 | 0;
     $827(51036 | 0, $2_1 | 0);
    }
    $0_1 = $0_1 + Math_imul($3_1, 20) | 0;
    $3_1 = $0_1 + 76 | 0;
    HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + $1_1 | 0;
    $0_1 = $0_1 + 64 | 0;
    $57_1 = $0_1;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $0_1 - $1_1 | 0;
    $0_1 = $1_1 >>> 0 > $0_1 >>> 0 ? 0 : $1_1;
    HEAP32[$57_1 >> 2] = $0_1;
    label$6 : {
     $7_1 = $2_1 + 16 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $0_1 | 0;
   }
   $859(50832 | 0, 50048 | 0, 247 | 0);
   abort();
  }
  $859(50402 | 0, 50048 | 0, 248 | 0);
  abort();
 }
 
 function $621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $9$hi = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $66_1 = 0, $69_1 = 0, $71$hi = 0, i64toi32_i32$2 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($3_1 >>> 0 > 8 >>> 0) {
       break label$6
      }
      i64toi32_i32$0 = 0;
      $9_1 = $1_1;
      $9$hi = i64toi32_i32$0;
      $4_1 = $0_1 + 56 | 0;
      break label$5;
     }
     $859(50402 | 0, 50048 | 0, 197 | 0);
     abort();
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = $3_1;
      $1_1 = Math_imul($3_1, 20);
      $3_1 = $4_1 + $1_1 | 0;
      label$9 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       $1_1 = HEAP32[(($0_1 + $1_1 | 0) + 72 | 0) >> 2] | 0;
       HEAP32[($2_1 + 28 | 0) >> 2] = $1_1 >>> 24 | 0;
       HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 & 255 | 0;
       HEAP32[($2_1 + 24 | 0) >> 2] = ($1_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($1_1 >>> 8 | 0) & 255 | 0;
       $827(51065 | 0, $2_1 + 16 | 0 | 0);
      }
      $622($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, -1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0);
      $66_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
      $69_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $71$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $71$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$3 = $9_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $1_1 = FUNCTION_TABLE[HEAP32[($0_1 + 228 | 0) >> 2] | 0]($66_1, $69_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($1_1 | 0) == (1 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$7
      }
      $3_1 = $3_1 + 4 | 0;
      $1_1 = $1_1 + -1 | 0;
      label$10 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$10
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$10
       }
       $5_1 = HEAP32[(($4_1 + Math_imul($1_1, 20) | 0) + 8 | 0) >> 2] | 0;
       $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
       HEAP32[$2_1 >> 2] = $6_1 + -1 | 0;
       $827(51085 | 0, $2_1 | 0);
      }
      $5_1 = ($0_1 + Math_imul($1_1, 20) | 0) + 64 | 0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      $3_1 = HEAP32[$3_1 >> 2] | 0;
      if ($1_1 >>> 0 < $3_1 >>> 0) {
       break label$3
      }
      label$11 : {
       if ($1_1 >>> 0 > $3_1 >>> 0) {
        break label$11
       }
       $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$7
       }
       continue label$8;
      }
      break label$8;
     };
     HEAP32[$5_1 >> 2] = $1_1 - $3_1 | 0;
    }
    label$12 : {
     $8_1 = $2_1 + 32 | 0;
     if ($8_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $8_1;
    }
    return;
   }
   $859(50379 | 0, 50048 | 0, 196 | 0);
   abort();
  }
  $859(51115 | 0, 50048 | 0, 211 | 0);
  abort();
 }
 
 function $622($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $114_1 = 0, $117_1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $8_1 = $6_1 + $4_1 | 0;
     $9_1 = $2_1 >>> 24 | 0;
     $10_1 = $2_1 & 255 | 0;
     $11_1 = ($2_1 >>> 16 | 0) & 255 | 0;
     $12_1 = ($2_1 >>> 8 | 0) & 255 | 0;
     $13_1 = $7_1 + 48 | 0;
     $14_1 = $7_1 + 44 | 0;
     $15_1 = $7_1 + 40 | 0;
     $16_1 = $7_1 + 36 | 0;
     $17_1 = $7_1 + 32 | 0;
     $18_1 = $7_1 + 28 | 0;
     $19_1 = $7_1 + 20 | 0;
     $20_1 = $1_1;
     label$6 : while (1) {
      if ((HEAP32[($20_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      label$7 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       $21_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[$13_1 >> 2] = $8_1;
       HEAP32[$14_1 >> 2] = $6_1;
       HEAP32[$15_1 >> 2] = $5_1;
       HEAP32[$16_1 >> 2] = $1_1;
       HEAP32[$17_1 >> 2] = $4_1;
       HEAP32[$18_1 >> 2] = $9_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
       HEAP32[$19_1 >> 2] = $12_1;
       HEAP32[($7_1 + 16 | 0) >> 2] = $10_1;
       HEAP32[($7_1 + 12 | 0) >> 2] = $21_1 >>> 24 | 0;
       HEAP32[$7_1 >> 2] = $21_1 & 255 | 0;
       HEAP32[($7_1 + 8 | 0) >> 2] = ($21_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = ($21_1 >>> 8 | 0) & 255 | 0;
       $827(51589 | 0, $7_1 | 0);
      }
      label$8 : {
       label$9 : {
        if (!$3_1) {
         break label$9
        }
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $114_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($7_1 + 64 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $114_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $117_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $7_1;
        HEAP32[($7_1 + 64 | 0) >> 2] = $117_1;
        HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$0;
        if (($766($7_1 + 64 | 0 | 0, $4_1 | 0) | 0 | 0) != ($4_1 | 0)) {
         break label$4
        }
        $21_1 = $753(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0, $7_1 + 64 | 0 | 0, 0 | 0, 0 | 0) | 0;
        if (!$21_1) {
         break label$3
        }
        $21_1 = FUNCTION_TABLE[HEAP32[($20_1 + 8 | 0) >> 2] | 0]($20_1, $2_1, $5_1, $6_1, $21_1) | 0;
        break label$8;
       }
       $21_1 = FUNCTION_TABLE[HEAP32[($20_1 + 8 | 0) >> 2] | 0]($20_1, $2_1, 0, 0, 0) | 0;
      }
      HEAP8[($0_1 + 40 | 0) >> 0] = HEAPU8[($0_1 + 40 | 0) >> 0] | 0 | ($21_1 | 0) == (1 | 0) | 0;
      $20_1 = HEAP32[$20_1 >> 2] | 0;
      if ($20_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$10 : {
     $23_1 = $7_1 + 80 | 0;
     if ($23_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $23_1;
    }
    return;
   }
   $859(51643 | 0, 50048 | 0, 157 | 0);
   abort();
  }
  $859(51657 | 0, 50048 | 0, 159 | 0);
  abort();
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $4_1 = 0, $38_1 = 0, $43_1 = 0, $48_1 = 0, $51_1 = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 48 | 0) >> 2] = $1_1;
   $827(50441 | 0, $2_1 + 48 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (!$0_1) {
     break label$4
    }
    label$6 : {
     label$7 : {
      label$8 : {
       $3_1 = $813(256 | 0) | 0;
       if ($3_1) {
        break label$8
       }
       if (!($835(62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = 256;
       $827(50473 | 0, $2_1 + 16 | 0 | 0);
       break label$7;
      }
      $845($3_1 | 0, 256 | 0, $3_1 | 0, 50032 | 0);
      i64toi32_i32$2 = $1_1 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 244 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $38_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $43_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 236 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $43_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $48_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 228 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $48_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $51_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[($3_1 + 220 | 0) >> 2] = $51_1;
      HEAP32[($3_1 + 224 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      $0_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       $619($3_1 | 0);
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
       HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
       $827(50504 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      $815($3_1 | 0);
     }
     $3_1 = 0;
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     $3_1 = 0;
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $3_1 = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[$2_1 >> 2] = $1_1;
     $827(50504 | 0, $2_1 | 0);
    }
    label$10 : {
     $5_1 = $2_1 + 64 | 0;
     if ($5_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $5_1;
    }
    return $3_1 | 0;
   }
   $859(50461 | 0, 50048 | 0, 565 | 0);
   abort();
  }
  $859(50465 | 0, 50048 | 0, 566 | 0);
  abort();
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(50461 | 0, 50048 | 0, 630 | 0);
   abort();
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 184;
  HEAP32[($0_1 + 8 | 0) >> 2] = 185;
  HEAP32[($0_1 + 4 | 0) >> 2] = 186;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 1179011410;
  HEAP32[($0_1 + 28 | 0) >> 2] = 1414744396;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 187;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $626($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  return 0 | 0;
 }
 
 function $627($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  return 0 | 0;
 }
 
 function $628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 80 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($1_1 + 64 | 0) >> 2] = $0_1;
   $827(50529 | 0, $1_1 + 64 | 0 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 647 | 0);
  }
  label$6 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   $3_1 = $1_1 + 36 | 0;
   label$7 : while (1) {
    label$8 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($1_1 + 52 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 48 | 0) >> 2] = $0_1;
     $827(50550 | 0, $1_1 + 48 | 0 | 0);
    }
    label$9 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $4_1 >>> 24 | 0;
     HEAP32[(($1_1 + 16 | 0) + 16 | 0) >> 2] = ($4_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1 & 255 | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = ($4_1 >>> 8 | 0) & 255 | 0;
     $827(50599 | 0, $1_1 + 16 | 0 | 0);
    }
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $619($0_1 | 0);
  $739(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 256 | 0, $0_1 | 0, 0 | 0);
  label$10 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$10
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$10
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(50655 | 0, $1_1 | 0);
  }
  $815($0_1 | 0);
  label$11 : {
   $6_1 = $1_1 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $630($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0, $13_1 = 0;
  label$1 : {
   $2_1 = global$0 - 192 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (50032 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 256 | 0, $0_1 | 0, 50032 | 0, 50048 | 0, 667 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $4_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 164 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 160 | 0) >> 2] = $0_1;
   HEAP32[($2_1 + 168 | 0) >> 2] = $4_1 + $3_1 | 0;
   $827(50676 | 0, $2_1 + 160 | 0 | 0);
  }
  $5_1 = 0;
  label$6 : {
   label$7 : {
    label$8 : {
     label$9 : {
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : while (1) {
          label$14 : {
           label$15 : {
            label$16 : {
             if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
              break label$16
             }
             $3_1 = $798($1_1 | 0) | 0;
             if (!$3_1) {
              break label$15
             }
             $744(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0);
             $4_1 = $756($3_1 | 0) | 0;
             $735($3_1 | 0);
             $5_1 = $4_1 + $5_1 | 0;
            }
            HEAP8[($0_1 + 40 | 0) >> 0] = 0;
            label$17 : while (1) {
             $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
             $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
             HEAP8[($0_1 + 41 | 0) >> 0] = 0;
             label$18 : {
              switch (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) {
              case 0:
               label$22 : {
                i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                $12_1 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$0 = __wasm_i64_srem($12_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $4_1 = i64toi32_i32$0;
                if (($4_1 + -1 | 0) >>> 0 >= $3_1 >>> 0) {
                 break label$22
                }
                label$23 : {
                 if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$23
                 }
                 if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$23
                 }
                 i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                 HEAP32[$2_1 >> 2] = $4_1;
                 $827(50704 | 0, $2_1 | 0);
                }
                if (($4_1 | 0) != (1 | 0)) {
                 break label$12
                }
                label$24 : {
                 if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                  break label$24
                 }
                 if ($620($0_1 | 0, 1 | 0) | 0) {
                  break label$24
                 }
                 $621($0_1 | 0, 1 | 0);
                }
                $766($2_1 + 176 | 0 | 0, 1 | 0) | 0;
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                 continue label$17
                }
                $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               }
               label$25 : {
                label$26 : {
                 if (HEAP32[($0_1 + 56 | 0) >> 2] | 0) {
                  break label$26
                 }
                 if (!($632($0_1 | 0, $2_1 + 176 | 0 | 0) | 0)) {
                  continue label$13
                 }
                 break label$25;
                }
                if (!($633($0_1 | 0, $2_1 + 176 | 0 | 0) | 0)) {
                 continue label$13
                }
               }
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               continue label$17;
              case 3:
               label$27 : {
                if (HEAP32[($0_1 + 56 | 0) >> 2] | 0) {
                 break label$27
                }
                label$28 : {
                 if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$28
                 }
                 HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
                 $827(50745 | 0, $2_1 + 16 | 0 | 0);
                }
                HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 1 | 0;
                FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
                continue label$13;
               }
               $4_1 = $618($0_1 | 0) | 0;
               if (!$4_1) {
                break label$11
               }
               label$29 : {
                if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$29
                }
                if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$29
                }
                $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                HEAP32[($2_1 + 84 | 0) >> 2] = $3_1;
                HEAP32[($2_1 + 80 | 0) >> 2] = $4_1;
                $827(50800 | 0, $2_1 + 80 | 0 | 0);
               }
               label$30 : {
                i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                $13_1 = i64toi32_i32$0;
                i64toi32_i32$0 = 0;
                i64toi32_i32$0 = __wasm_i64_srem($13_1 | 0, i64toi32_i32$1 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
                i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                $4_1 = i64toi32_i32$0;
                if (($4_1 + -1 | 0) >>> 0 >= $3_1 >>> 0) {
                 break label$30
                }
                label$31 : {
                 if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                  break label$31
                 }
                 if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$31
                 }
                 i64toi32_i32$1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$1;
                 HEAP32[($2_1 + 64 | 0) >> 2] = $4_1;
                 $827(50704 | 0, $2_1 + 64 | 0 | 0);
                }
                if (($4_1 | 0) != (1 | 0)) {
                 break label$10
                }
                if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                 break label$9
                }
                label$32 : {
                 if ($620($0_1 | 0, 1 | 0) | 0) {
                  break label$32
                 }
                 $621($0_1 | 0, 1 | 0);
                }
                $766($2_1 + 176 | 0 | 0, 1 | 0) | 0;
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                 continue label$17
                }
                $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               }
               $3_1 = $776($2_1 + 176 | 0 | 0) | 0;
               if ((HEAP32[($2_1 + 180 | 0) >> 2] | 0 | 0) < (0 | 0)) {
                continue label$13
               }
               $763($2_1 + 176 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
               label$33 : {
                if (!($634($0_1 | 0, $3_1 | 0) | 0)) {
                 break label$33
                }
                label$34 : {
                 if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
                  break label$34
                 }
                 i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                 HEAP32[(($2_1 + 32 | 0) + 20 | 0) >> 2] = i64toi32_i32$0;
                 HEAP32[(($2_1 + 32 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
                 HEAP32[($2_1 + 36 | 0) >> 2] = $3_1 & 255 | 0;
                 HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
                 HEAP32[($2_1 + 44 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
                 HEAP32[($2_1 + 40 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
                 $827(50853 | 0, $2_1 + 32 | 0 | 0);
                }
                HEAP32[($0_1 + 16 | 0) >> 2] = 0;
                HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 1 | 0;
                FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
                continue label$17;
               }
               $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
               if (!$3_1) {
                break label$8
               }
               label$35 : {
                $3_1 = (HEAP32[((Math_imul($3_1, 20) + $0_1 | 0) + 44 | 0) >> 2] | 0) >>> 0 < 2 >>> 0 ? 1 : 2;
                if ($620($0_1 | 0, $3_1 | 0) | 0) {
                 break label$35
                }
                $621($0_1 | 0, $3_1 | 0);
               }
               $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               if (HEAPU8[($0_1 + 40 | 0) >> 0] | 0) {
                continue label$13
               }
               continue label$17;
              case 1:
               $4_1 = $618($0_1 | 0) | 0;
               if (!$4_1) {
                break label$7
               }
               label$36 : {
                if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
                 break label$36
                }
                if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
                 break label$36
                }
                $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                HEAP32[($2_1 + 100 | 0) >> 2] = $3_1;
                HEAP32[($2_1 + 96 | 0) >> 2] = $6_1;
                $827(50909 | 0, $2_1 + 96 | 0 | 0);
               }
               $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
               $3_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $3_1 : $4_1;
               $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
               label$37 : {
                if (!($620($0_1 | 0, $3_1 | 0) | 0)) {
                 break label$37
                }
                $631($0_1 | 0, $2_1 + 176 | 0 | 0);
                continue label$13;
               }
               $621($0_1 | 0, $3_1 | 0);
               HEAP32[($0_1 + 16 | 0) >> 2] = 0;
               $3_1 = HEAPU8[($0_1 + 40 | 0) >> 0] | 0;
               $631($0_1 | 0, $2_1 + 176 | 0 | 0);
               if ($3_1) {
                continue label$13
               }
               continue label$17;
              case 4:
               break label$14;
              case 2:
               break label$18;
              default:
               continue label$13;
              };
             }
             $4_1 = $618($0_1 | 0) | 0;
             if (!$4_1) {
              break label$6
             }
             label$38 : {
              if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$38
              }
              if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$38
              }
              $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
              HEAP32[($2_1 + 148 | 0) >> 2] = $3_1;
              HEAP32[($2_1 + 144 | 0) >> 2] = $6_1;
              $827(50942 | 0, $2_1 + 144 | 0 | 0);
             }
             $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             label$39 : {
              label$40 : {
               if (!$3_1) {
                break label$40
               }
               $6_1 = $7_1;
               break label$39;
              }
              $6_1 = 0;
              if ($7_1) {
               continue label$13
              }
             }
             $3_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $3_1 : $6_1;
             label$41 : {
              if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
               break label$41
              }
              if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
               break label$41
              }
              $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
              HEAP32[(($2_1 + 112 | 0) + 16 | 0) >> 2] = $3_1;
              HEAP32[($2_1 + 124 | 0) >> 2] = $6_1 >>> 24 | 0;
              HEAP32[($2_1 + 112 | 0) >> 2] = $6_1 & 255 | 0;
              HEAP32[($2_1 + 120 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
              HEAP32[($2_1 + 116 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
              $827(50975 | 0, $2_1 + 112 | 0 | 0);
             }
             $622($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
             label$42 : {
              $6_1 = $635($0_1 | 0) | 0;
              if (!$6_1) {
               break label$42
              }
              $6_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
              if (!$6_1) {
               break label$42
              }
              $622($0_1 | 0, $6_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
             }
             $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
             $631($0_1 | 0, $2_1 + 176 | 0 | 0);
             label$43 : {
              if ($620($0_1 | 0, $3_1 | 0) | 0) {
               break label$43
              }
              HEAP32[($0_1 + 32 | 0) >> 2] = 0;
              $621($0_1 | 0, $3_1 | 0);
              HEAP32[($0_1 + 16 | 0) >> 2] = 0;
             }
             if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
              continue label$17
             }
             break label$17;
            };
           }
           label$44 : {
            $9_1 = $2_1 + 192 | 0;
            if ($9_1 >>> 0 < global$2 >>> 0) {
             fimport$11()
            }
            global$0 = $9_1;
           }
           return $5_1 | 0;
          }
          $766($2_1 + 176 | 0 | 0, $3_1 | 0) | 0;
          $631($0_1 | 0, $2_1 + 176 | 0 | 0);
          continue label$13;
         };
        }
        $859(50737 | 0, 50048 | 0, 699 | 0);
        abort();
       }
       $859(50796 | 0, 50048 | 0, 733 | 0);
       abort();
      }
      $859(50737 | 0, 50048 | 0, 739 | 0);
      abort();
     }
     $859(50832 | 0, 50048 | 0, 741 | 0);
     abort();
    }
    $859(50832 | 0, 50048 | 0, 769 | 0);
    abort();
   }
   $859(50796 | 0, 50048 | 0, 787 | 0);
   abort();
  }
  $859(50796 | 0, 50048 | 0, 800 | 0);
  abort();
 }
 
 function $631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $5_1 = 0, $34_1 = 0, $36$hi = 0, $38$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $3_1 = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $754($1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
   $827(51139 | 0, $2_1 + 16 | 0 | 0);
  }
  $3_1 = $754($1_1 | 0) | 0;
  $4_1 = $0_1 + 24 | 0;
  $34_1 = $4_1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $38$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $36$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = $38$hi;
  i64toi32_i32$4 = i64toi32_i32$2 + $3_1 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = $34_1;
  HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  $745(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
  label$4 : {
   if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$4
   }
   if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$4
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $740(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(51162 | 0, $2_1 | 0);
  }
  label$5 : {
   $6_1 = $2_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 112 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
     break label$4
    }
    $4_1 = $776($1_1 | 0) | 0;
    break label$3;
   }
   $4_1 = $778($1_1 | 0) | 0;
  }
  label$5 : {
   if ($4_1) {
    break label$5
   }
   $4_1 = -16;
   if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $4_1 = -16;
   HEAP32[($2_1 + 100 | 0) >> 2] = -16;
   HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
   $827(51181 | 0, $2_1 + 96 | 0 | 0);
  }
  $5_1 = 0;
  label$6 : {
   label$7 : {
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$7
    }
    label$8 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[(($2_1 + 64 | 0) + 16 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 76 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 72 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(51231 | 0, $2_1 + 64 | 0 | 0);
    }
    $6_1 = $776($1_1 | 0) | 0;
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$7
    }
    label$9 : {
     if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$9
     }
     if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$9
     }
     HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
     HEAP32[($2_1 + 44 | 0) >> 2] = $6_1 >>> 24 | 0;
     HEAP32[(($2_1 + 16 | 0) + 16 | 0) >> 2] = $6_1 & 255 | 0;
     HEAP32[(($2_1 + 16 | 0) + 24 | 0) >> 2] = ($6_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = ($6_1 >>> 8 | 0) & 255 | 0;
     HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
     HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
     $827(51263 | 0, $2_1 + 16 | 0 | 0);
    }
    label$10 : {
     if ($4_1 >>> 0 < 4 >>> 0) {
      break label$10
     }
     if (($3_1 | 0) != (HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0)) {
      break label$10
     }
     $5_1 = 0;
     if ((FUNCTION_TABLE[HEAP32[($0_1 + 232 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0, $6_1) | 0 | 0) == (1 | 0)) {
      break label$6
     }
     $636($0_1 | 0, $6_1 | 0, $4_1 | 0, 4 | 0, 0 | 0) | 0;
     $5_1 = 1;
     break label$6;
    }
    label$11 : {
     if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$11
     }
     HEAP32[$2_1 >> 2] = $0_1;
     $827(51311 | 0, $2_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 4;
    $5_1 = 1;
    $1_1 = $0_1 + 52 | 0;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
    FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
    break label$6;
   }
   $769($1_1 | 0, $2_1 + 104 | 0 | 0);
  }
  label$12 : {
   $8_1 = $2_1 + 112 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $633($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 160 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($2_1 + 152 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 156 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $776($1_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
     break label$4
    }
    $4_1 = $776($1_1 | 0) | 0;
    break label$3;
   }
   $4_1 = $778($1_1 | 0) | 0;
  }
  $5_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$8
      }
      label$9 : {
       label$10 : {
        if (($3_1 | 0) == (HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0)) {
         break label$10
        }
        $6_1 = 0;
        $7_1 = 0;
        if (($3_1 | 0) != (HEAP32[($0_1 + 244 | 0) >> 2] | 0 | 0)) {
         break label$9
        }
       }
       $3_1 = $776($1_1 | 0) | 0;
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$8
       }
       $7_1 = 4;
       $6_1 = 1;
      }
      $1_1 = $618($0_1 | 0) | 0;
      if (!$1_1) {
       break label$7
      }
      $620($0_1 | 0, 8 | 0) | 0;
      label$11 : {
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$11
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$11
       }
       HEAP32[(($2_1 + 128 | 0) + 16 | 0) >> 2] = $4_1;
       HEAP32[($2_1 + 140 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 128 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 136 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 132 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51379 | 0, $2_1 + 128 | 0 | 0);
      }
      label$12 : {
       if ($4_1) {
        break label$12
       }
       $4_1 = 0;
       label$13 : {
        if (($3_1 | 0) != (1635017060 | 0)) {
         break label$13
        }
        $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       }
       if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$12
       }
       HEAP32[($2_1 + 116 | 0) >> 2] = $4_1;
       HEAP32[(($2_1 + 96 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 96 | 0) >> 2] = $0_1;
       HEAP32[($2_1 + 100 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 108 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 104 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51409 | 0, $2_1 + 96 | 0 | 0);
      }
      $5_1 = $634($0_1 | 0, $3_1 | 0) | 0;
      label$14 : {
       if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0) >>> 0 >= $4_1 >>> 0) {
        break label$14
       }
       label$15 : {
        if (!($834(62344 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$15
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
        HEAP32[$2_1 >> 2] = $0_1;
        $827(51475 | 0, $2_1 | 0);
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = 3;
       $5_1 = 1;
       $1_1 = $0_1 + 44 | 0;
       HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
       FUNCTION_TABLE[HEAP32[($0_1 + 236 | 0) >> 2] | 0](HEAP32[($0_1 + 220 | 0) >> 2] | 0);
       break label$5;
      }
      label$16 : {
       if (!($636($0_1 | 0, $3_1 | 0, $4_1 | 0, $7_1 | 0, ($6_1 ? $5_1 : 0) | 0) | 0)) {
        break label$16
       }
       label$17 : {
        if (!$6_1) {
         break label$17
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 0;
        $5_1 = 1;
        if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$5
        }
        if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$5
        }
        HEAP32[($2_1 + 28 | 0) >> 2] = $3_1 >>> 24 | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 & 255 | 0;
        HEAP32[($2_1 + 24 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
        $827(51525 | 0, $2_1 + 16 | 0 | 0);
        break label$5;
       }
       label$18 : {
        label$19 : {
         if ($5_1) {
          break label$19
         }
         if (!(HEAP32[($1_1 + 8 | 0) >> 2] | 0)) {
          break label$18
         }
        }
        label$20 : {
         if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$20
         }
         if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$20
         }
         HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] = $3_1 >>> 24 | 0;
         HEAP32[($2_1 + 48 | 0) >> 2] = $5_1;
         HEAP32[($2_1 + 52 | 0) >> 2] = $3_1 & 255 | 0;
         HEAP32[($2_1 + 60 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
         HEAP32[($2_1 + 56 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
         $827(51542 | 0, $2_1 + 48 | 0 | 0);
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = 2;
        HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
        HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
        $5_1 = 1;
        break label$5;
       }
       if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$6
       }
       if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$6
       }
       HEAP32[($2_1 + 44 | 0) >> 2] = $3_1 >>> 24 | 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = $3_1 & 255 | 0;
       HEAP32[($2_1 + 40 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
       HEAP32[($2_1 + 36 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
       $827(51570 | 0, $2_1 + 32 | 0 | 0);
       break label$6;
      }
      if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$6
      }
      if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$6
      }
      HEAP32[($2_1 + 92 | 0) >> 2] = $3_1 >>> 24 | 0;
      HEAP32[($2_1 + 80 | 0) >> 2] = $3_1 & 255 | 0;
      HEAP32[($2_1 + 88 | 0) >> 2] = ($3_1 >>> 16 | 0) & 255 | 0;
      HEAP32[($2_1 + 84 | 0) >> 2] = ($3_1 >>> 8 | 0) & 255 | 0;
      $827(51570 | 0, $2_1 + 80 | 0 | 0);
      break label$6;
     }
     $769($1_1 | 0, $2_1 + 152 | 0 | 0);
     break label$5;
    }
    $859(51372 | 0, 50048 | 0, 292 | 0);
    abort();
   }
   $5_1 = 1;
   HEAP32[($0_1 + 16 | 0) >> 2] = 1;
  }
  label$21 : {
   $9_1 = $2_1 + 160 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $5_1 | 0;
 }
 
 function $634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  return ($1_1 >>> 0 > 1 >>> 0 ? (Math_imul($1_1, 20) + ($0_1 + 56 | 0) | 0) + -36 | 0 : 0) | 0;
 }
 
 function $636($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $12_1 = 0, $11_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $64$hi = 0, $67$hi = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $6_1 = 0;
  label$3 : {
   label$4 : {
    $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if ($7_1 >>> 0 > 7 >>> 0) {
     break label$4
    }
    if ($2_1 >>> 0 < $3_1 >>> 0) {
     break label$3
    }
    $6_1 = ($0_1 + 56 | 0) + Math_imul($7_1, 20) | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $1_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
    $8_1 = $6_1 + 8 | 0;
    $9_1 = $2_1 - $3_1 | 0;
    HEAP32[$8_1 >> 2] = $9_1;
    $10_1 = $6_1 + 4 | 0;
    HEAP32[$10_1 >> 2] = $2_1;
    $6_1 = 1;
    HEAP32[($0_1 + 56 | 0) >> 2] = $7_1 + 1 | 0;
    $622($0_1 | 0, $4_1 | 0, 0 | 0, 0 | 0, 0 | 0, $9_1 | 0, 0 | 0);
    $59_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
    $60_1 = $1_1;
    $61_1 = $9_1;
    i64toi32_i32$2 = $0_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $64$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $67$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $64$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $67$hi;
    i64toi32_i32$3 = $3_1 + 8 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 224 | 0) >> 2] | 0]($59_1, $60_1, $61_1, i64toi32_i32$4, i64toi32_i32$5) | 0;
    $2_1 = $0_1 + 40 | 0;
    HEAP8[$2_1 >> 0] = HEAPU8[$2_1 >> 0] | 0 | ($3_1 | 0) == (1 | 0) | 0;
    if ((HEAP8[(0 + 62344 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62344 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $3_1 = HEAP32[$8_1 >> 2] | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[$5_1 >> 2] = $0_1 + -1 | 0;
    $827(51346 | 0, $5_1 | 0);
   }
   label$5 : {
    $12_1 = $5_1 + 16 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $6_1 | 0;
  }
  $859(51333 | 0, 50048 | 0, 179 | 0);
  abort();
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  $4_1 = 105;
  HEAP8[($1_1 + 14 | 0) >> 0] = $4_1;
  HEAP8[($1_1 + 15 | 0) >> 0] = $4_1 >>> 8 | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$14(51662 | 0, $1_1 + 14 | 0 | 0, $1_1 | 0) | 0;
  label$3 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $638() {
  var $0_1 = 0, $2_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = global$0 - 16 | 0;
   $1_1 = $0_1;
   if ($0_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $1_1;
  }
  HEAP8[($0_1 + 15 | 0) >> 0] = 0;
  fimport$14(51771 | 0, $0_1 + 15 | 0 | 0, 0 | 0) | 0;
  label$3 : {
   $2_1 = $0_1 + 16 | 0;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
 }
 
 function $639($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[$5_1 >> 2] = $661($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 + 28 | 0 | 0, $5_1 + 24 | 0 | 0) | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
  $3_1 = $887($3_1 | 0, $4_1 | 0, 51811 | 0, $5_1 | 0) | 0;
  label$3 : {
   $7_1 = $5_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  var $20_1 = 0, $5_1 = 0, $7_1 = 0, $19_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $17_1 = 0, $12_1 = 0, $18_1 = 0, $1_1 = 0, $11_1 = 0, $21_1 = 0, $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $28_1 = 0, $23_1 = 0, $22_1 = 0, $331_1 = 0, $374_1 = 0;
  label$1 : {
   $1_1 = global$0 - 1824 | 0;
   $22_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    $2_1 = 0;
    $3_1 = 0;
    $4_1 = 0;
    $5_1 = 0;
    label$5 : {
     switch ((HEAPU8[$0_1 >> 0] | 0) + -49 | 0 | 0) {
     case 0:
      $3_1 = 1;
      $2_1 = $1_1 + 448 | 0;
      $4_1 = $1_1 + 1152 | 0;
      break;
     case 1:
      break label$5;
     default:
      break label$3;
     };
    }
    $974($1_1 + 1152 | 0 | 0, 0 | 0, 640 | 0) | 0;
    $974($1_1 + 448 | 0 | 0, 0 | 0, 704 | 0) | 0;
    $6_1 = $974($1_1 | 0, 0 | 0, 448 | 0) | 0;
    $7_1 = 1;
    $5_1 = 0;
    $8_1 = 0;
    $9_1 = 0;
    $10_1 = 0;
    $11_1 = 0;
    $12_1 = 0;
    $13_1 = 0;
    $14_1 = 0;
    $15_1 = 0;
    $16_1 = 0;
    $17_1 = 0;
    $18_1 = 0;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               $19_1 = HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0;
               if (($19_1 | 0) == (124 | 0)) {
                break label$17
               }
               if ($19_1) {
                break label$16
               }
              }
              if (!$5_1) {
               break label$9
              }
              $20_1 = ($6_1 + 1792 | 0) + $5_1 | 0;
              $5_1 = 0;
              HEAP8[$20_1 >> 0] = 0;
              $20_1 = $875($6_1 + 1792 | 0 | 0, 61 | 0) | 0;
              if (!$20_1) {
               break label$3
              }
              HEAP8[$20_1 >> 0] = 0;
              $20_1 = $20_1 + 1 | 0;
              label$18 : {
               if ($869($6_1 + 1792 | 0 | 0, 51856 | 0, 3 | 0) | 0) {
                break label$18
               }
               $5_1 = 0;
               $8_1 = $641($20_1 | 0) | 0;
               if ($8_1) {
                break label$8
               }
               break label$3;
              }
              label$19 : {
               if ($869($6_1 + 1792 | 0 | 0, 51859 | 0, 3 | 0) | 0) {
                break label$19
               }
               $5_1 = 0;
               $9_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$20 : {
               if ($869($6_1 + 1792 | 0 | 0, 51862 | 0, 3 | 0) | 0) {
                break label$20
               }
               $10_1 = !($877($20_1 | 0, 51865 | 0) | 0);
               break label$9;
              }
              label$21 : {
               if ($869($6_1 + 1792 | 0 | 0, 51867 | 0, 3 | 0) | 0) {
                break label$21
               }
               label$22 : {
                label$23 : {
                 label$24 : {
                  if ($3_1) {
                   break label$24
                  }
                  $4_1 = 0;
                  if (($11_1 | 0) != (16 | 0)) {
                   break label$23
                  }
                  $11_1 = 16;
                  break label$9;
                 }
                 if ($4_1) {
                  break label$22
                 }
                 break label$10;
                }
                $4_1 = ($6_1 + 1152 | 0) + Math_imul($11_1, 40) | 0;
                $11_1 = $11_1 + 1 | 0;
               }
               HEAP32[($4_1 + 28 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$9;
              }
              label$25 : {
               if ($869($6_1 + 1792 | 0 | 0, 51870 | 0, 3 | 0) | 0) {
                break label$25
               }
               $20_1 = $642($20_1 | 0) | 0;
               if (!$20_1) {
                break label$3
               }
               $5_1 = 0;
               if ($4_1) {
                break label$15
               }
               break label$11;
              }
              label$26 : {
               label$27 : {
                $21_1 = HEAP32[($6_1 + 1792 | 0) >> 2] | 0;
                if (($21_1 | 0) == (5395265 | 0)) {
                 break label$27
                }
                if (($21_1 | 0) != (4735809 | 0)) {
                 break label$26
                }
                $5_1 = 0;
                if (!$4_1) {
                 break label$11
                }
                HEAP32[($4_1 + 20 | 0) >> 2] = $936($20_1 | 0) | 0;
                break label$8;
               }
               $5_1 = 0;
               if (!$4_1) {
                break label$11
               }
               HEAP32[($4_1 + 24 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$28 : {
               if ($869($6_1 + 1792 | 0 | 0, 51873 | 0, 3 | 0) | 0) {
                break label$28
               }
               if (!$4_1) {
                break label$10
               }
               $5_1 = 0;
               HEAP32[($4_1 + 36 | 0) >> 2] = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              label$29 : {
               if ($869($6_1 + 1792 | 0 | 0, 51876 | 0, 3 | 0) | 0) {
                break label$29
               }
               label$30 : {
                label$31 : {
                 label$32 : {
                  if ($3_1) {
                   break label$32
                  }
                  $2_1 = 0;
                  if (($12_1 | 0) != (16 | 0)) {
                   break label$31
                  }
                  $12_1 = 16;
                  break label$9;
                 }
                 if ($2_1) {
                  break label$30
                 }
                 break label$12;
                }
                $2_1 = ($6_1 + 448 | 0) + Math_imul($12_1, 44) | 0;
                $12_1 = $12_1 + 1 | 0;
               }
               HEAP32[($2_1 + 20 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$9;
              }
              label$33 : {
               if ($869($6_1 + 1792 | 0 | 0, 51879 | 0, 3 | 0) | 0) {
                break label$33
               }
               $20_1 = $643($20_1 | 0) | 0;
               if (!$20_1) {
                break label$3
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAP32[($2_1 + 16 | 0) >> 2] = $20_1;
               break label$8;
              }
              label$34 : {
               if ($869($6_1 + 1792 | 0 | 0, 51882 | 0, 3 | 0) | 0) {
                break label$34
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAP32[($2_1 + 32 | 0) >> 2] = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$35 : {
               if ($869($6_1 + 1792 | 0 | 0, 51885 | 0, 3 | 0) | 0) {
                break label$35
               }
               if (!$2_1) {
                break label$12
               }
               $5_1 = 0;
               HEAP32[($2_1 + 36 | 0) >> 2] = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              label$36 : {
               if (($21_1 | 0) != (5391958 | 0)) {
                break label$36
               }
               $5_1 = 0;
               if (!$2_1) {
                break label$13
               }
               HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround(+$928($20_1 | 0));
               break label$8;
              }
              label$37 : {
               label$38 : {
                label$39 : {
                 label$40 : {
                  label$41 : {
                   if (!($869($6_1 + 1792 | 0 | 0, 51888 | 0, 3 | 0) | 0)) {
                    break label$41
                   }
                   if ($869($6_1 + 1792 | 0 | 0, 51891 | 0, 3 | 0) | 0) {
                    break label$40
                   }
                  }
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     if ($3_1) {
                      break label$44
                     }
                     $17_1 = 0;
                     if (($18_1 | 0) != (16 | 0)) {
                      break label$43
                     }
                     $18_1 = 16;
                     break label$9;
                    }
                    if (!$17_1) {
                     break label$39
                    }
                    $21_1 = $18_1;
                    break label$42;
                   }
                   $21_1 = $18_1 + 1 | 0;
                   $17_1 = $6_1 + Math_imul($18_1, 28) | 0;
                  }
                  $5_1 = $869($6_1 + 1792 | 0 | 0, 51891 | 0, 3 | 0) | 0;
                  HEAP8[$17_1 >> 0] = !$5_1;
                  $20_1 = $936($20_1 | 0) | 0;
                  label$45 : {
                   if ($5_1) {
                    break label$45
                   }
                   HEAP32[($17_1 + 24 | 0) >> 2] = $20_1;
                   break label$14;
                  }
                  HEAP32[($17_1 + 20 | 0) >> 2] = $20_1;
                  break label$14;
                 }
                 label$46 : {
                  if (!($869($6_1 + 1792 | 0 | 0, 51894 | 0, 3 | 0) | 0)) {
                   break label$46
                  }
                  if ($869($6_1 + 1792 | 0 | 0, 51897 | 0, 3 | 0) | 0) {
                   break label$37
                  }
                 }
                 if ($17_1) {
                  break label$38
                 }
                }
                $17_1 = 0;
                break label$9;
               }
               $879($17_1 + 1 | 0 | 0, $20_1 | 0, 16 | 0) | 0;
               $5_1 = 0;
               HEAP8[($17_1 + 16 | 0) >> 0] = 0;
               break label$8;
              }
              label$47 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (87 | 0)) {
                break label$47
               }
               $5_1 = 0;
               $16_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$48 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (72 | 0)) {
                break label$48
               }
               $5_1 = 0;
               $15_1 = $936($20_1 | 0) | 0;
               break label$8;
              }
              label$49 : {
               if ((HEAPU16[($6_1 + 1792 | 0) >> 1] | 0 | 0) != (68 | 0)) {
                break label$49
               }
               $5_1 = 0;
               $14_1 = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
               break label$8;
              }
              $5_1 = 0;
              if ($869($6_1 + 1792 | 0 | 0, 51900 | 0, 3 | 0) | 0) {
               break label$8
              }
              $5_1 = 0;
              $13_1 = $935($20_1 | 0, 0 | 0, 16 | 0) | 0;
              break label$8;
             }
             HEAP8[(($6_1 + 1792 | 0) + $5_1 | 0) >> 0] = $19_1;
             $5_1 = $5_1 + 1 | 0;
             if ($5_1 >>> 0 > 18 >>> 0) {
              break label$4
             }
             break label$8;
            }
            HEAP32[($4_1 + 16 | 0) >> 2] = $20_1;
            break label$8;
           }
           $5_1 = 0;
           $18_1 = $21_1;
           break label$8;
          }
          $2_1 = 0;
          break label$8;
         }
         $2_1 = 0;
         break label$9;
        }
        $4_1 = 0;
        break label$8;
       }
       $4_1 = 0;
      }
      $5_1 = 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if ($19_1) {
      continue label$7
     }
     break label$7;
    };
    label$50 : {
     label$51 : {
      if (($8_1 | 0) != (4 | 0)) {
       break label$51
      }
      $5_1 = $813(44 | 0) | 0;
      $7_1 = $974($5_1 | 0, 0 | 0, 44 | 0) | 0;
      $19_1 = $220() | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = 4;
      HEAP32[($7_1 + 32 | 0) >> 2] = $19_1;
      $7_1 = $7_1 + 40 | 0;
      break label$50;
     }
     $5_1 = $813(40 | 0) | 0;
     $7_1 = $974($5_1 | 0, 0 | 0, 40 | 0) | 0;
     HEAP32[($7_1 + 32 | 0) >> 2] = $220() | 0;
     $7_1 = $7_1 + 8 | 0;
     $9_1 = $8_1;
    }
    HEAP32[$7_1 >> 2] = $9_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = $13_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = $14_1;
    label$52 : {
     if (!($10_1 & 1 | 0)) {
      break label$52
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    }
    label$53 : {
     label$54 : {
      label$55 : {
       if (!$3_1) {
        break label$55
       }
       $20_1 = 1;
       $12_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0 ? 1 : $12_1;
       if (HEAP32[($4_1 + 16 | 0) >> 2] | 0) {
        break label$54
       }
      }
      $20_1 = $11_1;
      if (!$20_1) {
       break label$53
      }
     }
     $0_1 = 0;
     label$56 : while (1) {
      $7_1 = $974($813(536 | 0) | 0 | 0, 0 | 0, 536 | 0) | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = 1;
      $19_1 = ($6_1 + 1152 | 0) + Math_imul($0_1, 40) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($19_1 + 28 | 0) >> 2] | 0;
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[($19_1 + 16 | 0) >> 2] | 0;
      HEAP8[($7_1 + 24 | 0) >> 0] = HEAP32[($19_1 + 20 | 0) >> 2] | 0;
      HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($19_1 + 24 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($19_1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      $331_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1;
      HEAP32[($7_1 + 336 | 0) >> 2] = $331_1;
      HEAP32[($7_1 + 340 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$57 : {
       label$58 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$58
        }
        $19_1 = $5_1;
        break label$57;
       }
       $19_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$19_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != ($20_1 | 0)) {
       continue label$56
      }
      break label$56;
     };
    }
    label$59 : {
     label$60 : {
      if ($12_1) {
       break label$60
      }
      $0_1 = 0;
      break label$59;
     }
     $20_1 = 0;
     $0_1 = 0;
     label$61 : while (1) {
      $7_1 = $974($813(536 | 0) | 0 | 0, 0 | 0, 536 | 0) | 0;
      $19_1 = ($6_1 + 448 | 0) + Math_imul($20_1, 44) | 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[($19_1 + 20 | 0) >> 2] | 0;
      $4_1 = HEAP32[($19_1 + 16 | 0) >> 2] | 0;
      HEAP16[($7_1 + 30 | 0) >> 1] = $15_1;
      HEAP16[($7_1 + 28 | 0) >> 1] = $16_1;
      HEAP32[($7_1 + 20 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 320 | 0) >> 2] = HEAP32[($19_1 + 40 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($19_1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$0 = 0;
      $374_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 336 | 0) >> 2] = $374_1;
      HEAP32[($7_1 + 340 | 0) >> 2] = i64toi32_i32$0;
      $19_1 = HEAPU8[($19_1 + 32 | 0) >> 0] | 0;
      HEAP8[($7_1 + 42 | 0) >> 0] = $19_1;
      HEAP8[($7_1 + 41 | 0) >> 0] = $19_1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$62 : {
       label$63 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$63
        }
        $19_1 = $5_1;
        break label$62;
       }
       $19_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$19_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
      $0_1 = $0_1 ? $0_1 : $7_1;
      $20_1 = $20_1 + 1 | 0;
      if (($20_1 | 0) != ($12_1 | 0)) {
       continue label$61
      }
      break label$61;
     };
    }
    if (!$18_1) {
     break label$3
    }
    $19_1 = 0;
    label$64 : while (1) {
     $7_1 = $974($813(436 | 0) | 0 | 0, 0 | 0, 436 | 0) | 0;
     HEAP32[($5_1 + 32 | 0) >> 2] = 37119;
     label$65 : {
      $20_1 = $6_1 + Math_imul($19_1, 28) | 0;
      if (HEAPU8[$20_1 >> 0] | 0) {
       break label$65
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = 4;
      $4_1 = HEAP32[($20_1 + 20 | 0) >> 2] | 0;
      HEAP8[($7_1 + 340 | 0) >> 0] = 1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      $879($7_1 + 341 | 0 | 0, $20_1 | 1 | 0 | 0, 4 | 0) | 0;
      HEAP8[($7_1 + 344 | 0) >> 0] = 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      label$66 : {
       label$67 : {
        if (HEAP32[$5_1 >> 2] | 0) {
         break label$67
        }
        $20_1 = $5_1;
        break label$66;
       }
       $20_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[$20_1 >> 2] = $7_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
     }
     $19_1 = $19_1 + 1 | 0;
     if (($19_1 | 0) != ($18_1 | 0)) {
      continue label$64
     }
     break label$64;
    };
    if (!$0_1) {
     break label$3
    }
    $7_1 = 0;
    label$68 : while (1) {
     label$69 : {
      $19_1 = $6_1 + Math_imul($7_1, 28) | 0;
      if (!(HEAPU8[$19_1 >> 0] | 0)) {
       break label$69
      }
      $20_1 = HEAP32[($0_1 + 316 | 0) >> 2] | 0;
      if (($20_1 | 0) > (30 | 0)) {
       break label$69
      }
      HEAP32[($0_1 + 316 | 0) >> 2] = $20_1 + 1 | 0;
      $20_1 = $0_1 + ($20_1 << 3 | 0) | 0;
      $879($20_1 + 68 | 0 | 0, $19_1 | 1 | 0 | 0, 3 | 0) | 0;
      $20_1 = $20_1 + 71 | 0;
      $28_1 = ((HEAPU16[($19_1 + 24 | 0) >> 1] | 0) << 2 | 0) & 252 | 0 | ((HEAPU8[$20_1 >> 0] | 0 | ((HEAPU8[($20_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0) & 65283 | 0) | 0;
      HEAP8[$20_1 >> 0] = $28_1;
      HEAP8[($20_1 + 1 | 0) >> 0] = $28_1 >>> 8 | 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($18_1 | 0)) {
      continue label$68
     }
     break label$3;
    };
   }
   $5_1 = 0;
  }
  label$70 : {
   $23_1 = $1_1 + 1824 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $5_1 | 0;
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52240 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52244 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (12 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52400 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52404 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (19 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if ($877(HEAP32[(($1_1 << 3 | 0) + 52672 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0) {
     break label$2
    }
    return HEAP32[(($1_1 << 3 | 0) + 52676 | 0) >> 2] | 0 | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (11 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return 0 | 0;
 }
 
 function $644($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    $5_1 = $893($0_1 | 0, 51903 | 0) | 0;
    if ($5_1) {
     break label$4
    }
    $0_1 = -1;
    break label$3;
   }
   $6_1 = $974($1_1 | 0, 0 | 0, $2_1 | 0) | 0;
   $645();
   label$5 : {
    if (!($3_1 & 2 | 0)) {
     break label$5
    }
    $839(2 | 0) | 0;
   }
   $7_1 = $78($5_1 | 0) | 0;
   $8_1 = $196() | 0;
   $216($4_1 | 0);
   HEAP8[($4_1 + 57 | 0) >> 0] = 1;
   HEAP8[($4_1 + 11 | 0) >> 0] = 1;
   label$6 : {
    label$7 : {
     $1_1 = $203($8_1 | 0, $7_1 | 0, $4_1 | 0) | 0;
     if ($1_1) {
      break label$7
     }
     $0_1 = -2;
     break label$6;
    }
    label$8 : {
     $0_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$0_1) {
      break label$8
     }
     label$9 : while (1) {
      label$10 : {
       if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$10
       }
       if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != (138 | 0)) {
        break label$10
       }
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
        break label$10
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = 139;
      }
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ($0_1) {
       continue label$9
      }
      break label$9;
     };
    }
    $0_1 = $646($1_1 | 0, $6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $213($8_1 | 0, $1_1 | 0);
   }
   $79($7_1 | 0);
   $883($5_1 | 0) | 0;
   $197($8_1 | 0);
   $647();
  }
  label$11 : {
   $10_1 = $4_1 + 64 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $0_1 | 0;
 }
 
 function $645() {
  $816() | 0;
  $842() | 0;
 }
 
 function $646($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $4_1 = global$0 - 2592 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($4_1 + 748 | 0) >> 2] = 0;
  $974($4_1 + 752 | 0 | 0, 0 | 0, 1836 | 0) | 0;
  $5_1 = -3;
  label$3 : {
   if (!($652($0_1 | 0, $3_1 | 0, $4_1 + 752 | 0 | 0, 188 | 0, 189 | 0, 190 | 0, 191 | 0) | 0)) {
    break label$3
   }
   HEAP16[($4_1 + 720 | 0) >> 1] = 50;
   HEAP32[($4_1 + 704 | 0) >> 2] = 50;
   $5_1 = -4;
   if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52825 | 0, $4_1 + 704 | 0 | 0) | 0)) {
    break label$3
   }
   $0_1 = $4_1 + 2556 | 0;
   HEAP32[($4_1 + 688 | 0) >> 2] = $0_1;
   $887($4_1 + 720 | 0 | 0, 20 | 0, 52843 | 0, $4_1 + 688 | 0 | 0) | 0;
   HEAP32[($4_1 + 672 | 0) >> 2] = $0_1;
   if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52850 | 0, $4_1 + 672 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    $0_1 = HEAP32[($4_1 + 2572 | 0) >> 2] | 0;
    if (($0_1 | 0) < (1 | 0)) {
     break label$4
    }
    HEAP32[($4_1 + 656 | 0) >> 2] = $0_1;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 52870 | 0, $4_1 + 656 | 0 | 0) | 0;
    HEAP32[($4_1 + 640 | 0) >> 2] = HEAP32[($4_1 + 2572 | 0) >> 2] | 0;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52877 | 0, $4_1 + 640 | 0 | 0) | 0)) {
     break label$3
    }
   }
   label$5 : {
    if (!(HEAPU8[($4_1 + 2576 | 0) >> 0] | 0)) {
     break label$5
    }
    HEAP32[($4_1 + 624 | 0) >> 2] = 89;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 52897 | 0, $4_1 + 624 | 0 | 0) | 0;
    HEAP32[($4_1 + 608 | 0) >> 2] = 89;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52904 | 0, $4_1 + 608 | 0 | 0) | 0)) {
     break label$3
    }
   }
   label$6 : {
    if (!(HEAP32[($4_1 + 752 | 0) >> 2] | 0)) {
     break label$6
    }
    $6_1 = 0;
    label$7 : while (1) {
     $0_1 = ($4_1 + 752 | 0) + Math_imul($6_1, 40) | 0;
     $7_1 = $0_1 + 32 | 0;
     HEAP32[($4_1 + 592 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52922 | 0, $4_1 + 592 | 0 | 0) | 0;
     HEAP32[($4_1 + 576 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52929 | 0, $4_1 + 576 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 | 4 | 0;
     HEAP32[($4_1 + 560 | 0) >> 2] = $7_1;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52948 | 0, $4_1 + 560 | 0 | 0) | 0;
     HEAP32[($4_1 + 544 | 0) >> 2] = $7_1;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52955 | 0, $4_1 + 544 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 24 | 0;
     HEAP32[($4_1 + 528 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 52976 | 0, $4_1 + 528 | 0 | 0) | 0;
     HEAP32[($4_1 + 512 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 52984 | 0, $4_1 + 512 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 28 | 0;
     HEAP32[($4_1 + 496 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53012 | 0, $4_1 + 496 | 0 | 0) | 0;
     HEAP32[($4_1 + 480 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53020 | 0, $4_1 + 480 | 0 | 0) | 0)) {
      break label$3
     }
     label$8 : {
      $7_1 = $0_1 + 40 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$8
      }
      HEAP32[($4_1 + 464 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53046 | 0, $4_1 + 464 | 0 | 0) | 0;
      HEAP32[($4_1 + 448 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53056 | 0, $4_1 + 448 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$9 : {
      $0_1 = $0_1 + 36 | 0;
      $7_1 = HEAP32[$0_1 >> 2] | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break label$9
      }
      HEAP32[($4_1 + 432 | 0) >> 2] = $7_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53081 | 0, $4_1 + 432 | 0 | 0) | 0;
      HEAP32[($4_1 + 416 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53090 | 0, $4_1 + 416 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $6_1 = $6_1 + 1 | 0;
     if ($6_1 >>> 0 < (HEAP32[($4_1 + 752 | 0) >> 2] | 0) >>> 0) {
      continue label$7
     }
     break label$7;
    };
   }
   label$10 : {
    if (!(HEAP32[($4_1 + 1396 | 0) >> 2] | 0)) {
     break label$10
    }
    $6_1 = 0;
    label$11 : while (1) {
     $0_1 = ($4_1 + 752 | 0) + Math_imul($6_1, 44) | 0;
     $7_1 = $0_1 + 668 | 0;
     HEAP32[($4_1 + 400 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53114 | 0, $4_1 + 400 | 0 | 0) | 0;
     HEAP32[($4_1 + 384 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53121 | 0, $4_1 + 384 | 0 | 0) | 0)) {
      break label$3
     }
     $7_1 = $0_1 + 648 | 0;
     HEAP32[($4_1 + 368 | 0) >> 2] = $7_1;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53140 | 0, $4_1 + 368 | 0 | 0) | 0;
     HEAP32[($4_1 + 352 | 0) >> 2] = $7_1;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53147 | 0, $4_1 + 352 | 0 | 0) | 0)) {
      break label$3
     }
     label$12 : {
      $7_1 = $0_1 + 672 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (($8_1 | 0) < (1 | 0)) {
       break label$12
      }
      HEAP32[($4_1 + 336 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53168 | 0, $4_1 + 336 | 0 | 0) | 0;
      HEAP32[($4_1 + 320 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53174 | 0, $4_1 + 320 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$13 : {
      $7_1 = $0_1 + 676 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (($8_1 | 0) < (1 | 0)) {
       break label$13
      }
      HEAP32[($4_1 + 304 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53190 | 0, $4_1 + 304 | 0 | 0) | 0;
      HEAP32[($4_1 + 288 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53196 | 0, $4_1 + 288 | 0 | 0) | 0)) {
       break label$3
      }
     }
     label$14 : {
      $7_1 = $0_1 + 684 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$14
      }
      HEAP32[($4_1 + 272 | 0) >> 2] = $8_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53213 | 0, $4_1 + 272 | 0 | 0) | 0;
      HEAP32[($4_1 + 256 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53223 | 0, $4_1 + 256 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $7_1 = $0_1 + 680 | 0;
     HEAP32[($4_1 + 240 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53248 | 0, $4_1 + 240 | 0 | 0) | 0;
     HEAP32[($4_1 + 224 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53255 | 0, $4_1 + 224 | 0 | 0) | 0)) {
      break label$3
     }
     $0_1 = $0_1 + 688 | 0;
     HEAPF64[($4_1 + 208 | 0) >> 3] = +Math_fround(HEAPF32[$0_1 >> 2]);
     $887($4_1 + 720 | 0 | 0, 20 | 0, 53276 | 0, $4_1 + 208 | 0 | 0) | 0;
     HEAPF64[($4_1 + 192 | 0) >> 3] = +Math_fround(HEAPF32[$0_1 >> 2]);
     if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53284 | 0, $4_1 + 192 | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     if ($6_1 >>> 0 < (HEAP32[($4_1 + 1396 | 0) >> 2] | 0) >>> 0) {
      continue label$11
     }
     break label$11;
    };
   }
   label$15 : {
    if (!(HEAP32[($4_1 + 2104 | 0) >> 2] | 0)) {
     break label$15
    }
    $0_1 = 0;
    label$16 : while (1) {
     label$17 : {
      label$18 : {
       $6_1 = ($4_1 + 752 | 0) + Math_imul($0_1, 28) | 0;
       if (!(HEAPU8[($6_1 + 1356 | 0) >> 0] | 0)) {
        break label$18
       }
       $7_1 = $6_1 + 1380 | 0;
       HEAP32[($4_1 + 176 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
       $887($4_1 + 720 | 0 | 0, 20 | 0, 53309 | 0, $4_1 + 176 | 0 | 0) | 0;
       HEAP32[($4_1 + 160 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
       if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53316 | 0, $4_1 + 160 | 0 | 0) | 0)) {
        break label$3
       }
       $6_1 = $6_1 + 1357 | 0;
       HEAP32[($4_1 + 144 | 0) >> 2] = $6_1;
       $887($4_1 + 720 | 0 | 0, 20 | 0, 53341 | 0, $4_1 + 144 | 0 | 0) | 0;
       HEAP32[($4_1 + 128 | 0) >> 2] = $6_1;
       if ($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53348 | 0, $4_1 + 128 | 0 | 0) | 0) {
        break label$17
       }
       break label$3;
      }
      $7_1 = $6_1 + 1376 | 0;
      HEAP32[($4_1 + 112 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53374 | 0, $4_1 + 112 | 0 | 0) | 0;
      HEAP32[($4_1 + 96 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53381 | 0, $4_1 + 96 | 0 | 0) | 0)) {
       break label$3
      }
      $6_1 = $6_1 + 1357 | 0;
      HEAP32[($4_1 + 80 | 0) >> 2] = $6_1;
      $887($4_1 + 720 | 0 | 0, 20 | 0, 53403 | 0, $4_1 + 80 | 0 | 0) | 0;
      HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
      if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53410 | 0, $4_1 + 64 | 0 | 0) | 0)) {
       break label$3
      }
     }
     $0_1 = $0_1 + 1 | 0;
     if ($0_1 >>> 0 < (HEAP32[($4_1 + 2104 | 0) >> 2] | 0) >>> 0) {
      continue label$16
     }
     break label$16;
    };
   }
   label$19 : {
    $0_1 = HEAP32[($4_1 + 2580 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$19
    }
    HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
    $887($4_1 + 720 | 0 | 0, 20 | 0, 53437 | 0, $4_1 + 48 | 0 | 0) | 0;
    HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 2580 | 0) >> 2] | 0;
    if (!($653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53446 | 0, $4_1 + 32 | 0 | 0) | 0)) {
     break label$3
    }
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 2584 | 0) >> 2] | 0;
   $887($4_1 + 720 | 0 | 0, 20 | 0, 53466 | 0, $4_1 + 16 | 0 | 0) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 2584 | 0) >> 2] | 0;
   $3_1 = $653($3_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 + 748 | 0 | 0, $4_1 + 720 | 0 | 0, 53475 | 0, $4_1 | 0) | 0;
   $5_1 = (wasm2js_i32$0 = HEAP32[($4_1 + 748 | 0) >> 2] | 0, wasm2js_i32$1 = -4, wasm2js_i32$2 = $3_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  label$20 : {
   $10_1 = $4_1 + 2592 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $647() {
  $825();
  $843();
 }
 
 function $648($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  HEAP32[($1_1 + 1832 | 0) >> 2] = $6_1;
  HEAP32[($1_1 + 1828 | 0) >> 2] = $5_1;
  HEAP8[($1_1 + 1824 | 0) >> 0] = $3_1;
  HEAP32[($1_1 + 1820 | 0) >> 2] = $4_1;
  label$1 : {
   $2_1 = $663($2_1 | 0, $0_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $879($1_1 + 1804 | 0 | 0, $2_1 | 0, 16 | 0) | 0;
  return 1 | 0;
 }
 
 function $649($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (($7_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = ($1_1 + 4 | 0) + Math_imul($7_1, 40) | 0;
   HEAP32[($7_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 20 | 0) >> 2] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
   HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   $8_1 = HEAPU16[($2_1 + 26 | 0) >> 1] | 0;
   HEAP32[($7_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($7_1 + 32 | 0) >> 2] = $8_1;
   $2_1 = $664(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $879($7_1 | 0, $2_1 | 0, 16 | 0) | 0;
   $6_1 = 1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 1 | 0;
  }
  return $6_1 | 0;
 }
 
 function $650($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $5_1 = 0;
  label$1 : {
   $6_1 = HEAP32[($1_1 + 644 | 0) >> 2] | 0;
   if (($6_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $6_1 = ($1_1 + 648 | 0) + Math_imul($6_1, 44) | 0;
   HEAP32[($6_1 + 36 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = $7_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
   HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 320 | 0) >> 2] | 0;
   $2_1 = $665(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $879($6_1 | 0, $2_1 | 0, 16 | 0) | 0;
   $5_1 = 1;
   HEAP32[($1_1 + 644 | 0) >> 2] = (HEAP32[($1_1 + 644 | 0) >> 2] | 0) + 1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $651($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0;
  $6_1 = 0;
  label$1 : {
   $7_1 = HEAP32[($1_1 + 1352 | 0) >> 2] | 0;
   if (($7_1 | 0) == (16 | 0)) {
    break label$1
   }
   $7_1 = ($1_1 + 1356 | 0) + Math_imul($7_1, 28) | 0;
   HEAP8[$7_1 >> 0] = $3_1;
   $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   HEAP32[($7_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 20 | 0) >> 2] = $6_1;
   $6_1 = 1;
   $879($7_1 + 1 | 0 | 0, $5_1 | 0, 16 | 0) | 0;
   HEAP32[($1_1 + 1352 | 0) >> 2] = (HEAP32[($1_1 + 1352 | 0) >> 2] | 0) + 1 | 0;
  }
  return $6_1 | 0;
 }
 
 function $652($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $8_1 = 0, $9_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $14_1 = 0, $13_1 = 0, $12_1 = 0;
  label$1 : {
   $7_1 = global$0 - 16 | 0;
   $13_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  label$3 : {
   label$4 : {
    if ($0_1) {
     break label$4
    }
    $8_1 = 0;
    FUNCTION_TABLE[$3_1]($1_1, $2_1, 0, 0, 0, 0, 0) | 0;
    break label$3;
   }
   $8_1 = $663(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
   $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   label$5 : {
    if ($8_1) {
     break label$5
    }
    $8_1 = 0;
    FUNCTION_TABLE[$3_1]($1_1, $2_1, $9_1, 0, 0, 0, 0) | 0;
    break label$3;
   }
   $10_1 = 0;
   $11_1 = 0;
   label$6 : {
    if (($9_1 | 0) != (4 | 0)) {
     break label$6
    }
    $11_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   }
   label$7 : {
    switch ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0 | 0) {
    case 0:
    case 2:
     $10_1 = 1;
     break;
    default:
     break label$7;
    };
   }
   $8_1 = 0;
   if (!(FUNCTION_TABLE[$3_1]($1_1, $2_1, $9_1, $10_1, $11_1, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0) | 0)) {
    break label$3
   }
   label$9 : {
    $8_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$8_1) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       switch (HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) {
       case 1:
        if (!($664(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
         break label$11
        }
        $10_1 = 0;
        $9_1 = 0;
        label$15 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
          break label$15
         }
         $9_1 = HEAP32[($8_1 + 336 | 0) >> 2] | 0;
        }
        label$16 : {
         label$17 : {
          $11_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
          if (($11_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
           break label$17
          }
          $3_1 = -1;
          if (($11_1 | 0) != (37119 | 0)) {
           break label$16
          }
         }
         $3_1 = -1;
         if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
          break label$16
         }
         $11_1 = $8_1 + 348 | 0;
         if (!(HEAPU8[$11_1 >> 0] | 0)) {
          break label$16
         }
         $10_1 = $11_1 + 2 | 0;
         $3_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
        }
        FUNCTION_TABLE[$4_1]($1_1, $2_1, $8_1, $9_1, $10_1, $3_1) | 0;
        break label$11;
       case 0:
        if (!($665(HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
         break label$11
        }
        $9_1 = 0;
        $3_1 = 0;
        label$18 : {
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
          break label$18
         }
         $3_1 = HEAP32[($8_1 + 336 | 0) >> 2] | 0;
        }
        label$19 : {
         if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) != (33 | 0)) {
          break label$19
         }
         label$20 : {
          if ((HEAPU8[($8_1 + 41 | 0) >> 0] | 0 | 0) == (10 | 0)) {
           break label$20
          }
          if ((HEAPU8[($8_1 + 42 | 0) >> 0] | 0 | 0) != (10 | 0)) {
           break label$19
          }
         }
         $9_1 = 10;
        }
        if (!(FUNCTION_TABLE[$5_1]($1_1, $2_1, $8_1, $3_1, $9_1) | 0)) {
         break label$11
        }
        label$21 : {
         $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
         if (($3_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
          break label$21
         }
         if (($3_1 | 0) != (37119 | 0)) {
          break label$11
         }
        }
        if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
         break label$11
        }
        $11_1 = $8_1 + 356 | 0;
        if (!(HEAPU8[$11_1 >> 0] | 0)) {
         break label$11
        }
        if (!(HEAP32[($11_1 + 4 | 0) >> 2] | 0)) {
         break label$11
        }
        $12_1 = $11_1 + 8 | 0;
        $9_1 = 0;
        label$22 : while (1) {
         $3_1 = $12_1 + ($9_1 << 3 | 0) | 0;
         HEAP8[($7_1 + 12 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
         HEAP8[($7_1 + 13 | 0) >> 0] = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
         HEAP8[($7_1 + 15 | 0) >> 0] = 0;
         HEAP8[($7_1 + 14 | 0) >> 0] = $10_1;
         if (!(FUNCTION_TABLE[$6_1]($1_1, $2_1, $8_1, 1, HEAPU8[($3_1 + 5 | 0) >> 0] | 0, $7_1 + 12 | 0) | 0)) {
          break label$11
         }
         $9_1 = $9_1 + 1 | 0;
         if ($9_1 >>> 0 >= (HEAP32[($11_1 + 4 | 0) >> 2] | 0) >>> 0) {
          break label$11
         }
         continue label$22;
        };
       case 4:
        break label$12;
       default:
        break label$11;
       };
      }
      label$23 : {
       $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       if (($3_1 + -36864 | 0) >>> 0 < 2 >>> 0) {
        break label$23
       }
       if (($3_1 | 0) != (37119 | 0)) {
        break label$11
       }
      }
      if ((HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) == (-1 | 0)) {
       break label$11
      }
      $3_1 = $8_1 + 340 | 0;
      if (!(HEAPU8[$3_1 >> 0] | 0)) {
       break label$11
      }
      FUNCTION_TABLE[$6_1]($1_1, $2_1, $8_1, 0, HEAPU8[($8_1 + 346 | 0) >> 0] | 0, $3_1 + 1 | 0) | 0;
     }
     $8_1 = HEAP32[$8_1 >> 2] | 0;
     if ($8_1) {
      continue label$10
     }
     break label$10;
    };
   }
   $8_1 = 1;
  }
  label$24 : {
   $14_1 = $7_1 + 16 | 0;
   if ($14_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  return $8_1 | 0;
 }
 
 function $653($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $7_1 = global$0 - 16 | 0;
   $9_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   if ($0_1 & 1 | 0) {
    break label$3
   }
   HEAP32[($7_1 + 12 | 0) >> 2] = $6_1;
   $886($5_1 | 0, $6_1 | 0) | 0;
  }
  $5_1 = 0;
  label$4 : {
   $0_1 = HEAP32[$3_1 >> 2] | 0;
   $6_1 = $980($4_1 | 0) | 0;
   $8_1 = $0_1 + $6_1 | 0;
   if (($8_1 | 0) >= ($2_1 | 0)) {
    break label$4
   }
   $5_1 = 1;
   label$5 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$5
    }
    $2_1 = 0;
    label$6 : while (1) {
     HEAP8[($1_1 + ($0_1 + $2_1 | 0) | 0) >> 0] = HEAPU8[($4_1 + $2_1 | 0) >> 0] | 0;
     $0_1 = HEAP32[$3_1 >> 2] | 0;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($6_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $8_1 = $0_1 + $6_1 | 0;
   }
   HEAP32[$3_1 >> 2] = $8_1;
  }
  label$7 : {
   $10_1 = $7_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $5_1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = $196() | 0;
  $0_1 = $640($0_1 | 0) | 0;
  $1_1 = $655($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $213($5_1 | 0, $0_1 | 0);
  }
  $197($5_1 | 0);
  return $1_1 | 0;
 }
 
 function $655($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 48 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $656($1_1 | 0, $2_1 | 0, $5_1 + 8 | 0 | 0);
  label$3 : {
   label$4 : {
    if ($0_1) {
     break label$4
    }
    label$5 : {
     if (!$3_1) {
      break label$5
     }
     HEAP32[$3_1 >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    }
    $3_1 = 100;
    if (!$4_1) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $652($0_1 | 0, 0 | 0, $5_1 + 8 | 0 | 0, 192 | 0, 193 | 0, 194 | 0, 195 | 0) | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    HEAP32[$3_1 >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   }
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    HEAP32[$4_1 >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   }
   label$8 : {
    if (HEAPU8[($5_1 + 9 | 0) >> 0] | 0) {
     break label$8
    }
    $3_1 = 200;
    break label$3;
   }
   label$9 : {
    label$10 : {
     $4_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$10
     }
     label$11 : {
      $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$11
      }
      if (($3_1 | 0) != (300 | 0)) {
       break label$3
      }
      $3_1 = $4_1;
      break label$3;
     }
     if (($4_1 | 0) != (300 | 0)) {
      break label$9
     }
     $3_1 = 1;
     if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
      break label$9
     }
     break label$3;
    }
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (11 | 0)) {
     break label$9
    }
    label$12 : {
     $0_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     if (($0_1 | 0) == (300 | 0)) {
      break label$12
     }
     if ($0_1) {
      break label$9
     }
     if ((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0)) {
      break label$9
     }
     $3_1 = 1;
     if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) != (139 | 0)) {
      break label$9
     }
     break label$3;
    }
    $3_1 = 1;
    if ((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) == (139 | 0)) {
     break label$3
    }
   }
   $3_1 = 0;
  }
  label$13 : {
   $7_1 = $5_1 + 48 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $3_1 | 0;
 }
 
 function $656($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $974($2_1 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = 300;
  HEAP32[($2_1 + 20 | 0) >> 2] = 300;
  HEAP32[($2_1 + 8 | 0) >> 2] = $662($1_1 | 0) | 0;
  label$1 : {
   if ($873($0_1 | 0, 51906 | 0) | 0) {
    break label$1
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 1;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$2 : {
   if ($873($0_1 | 0, 51912 | 0) | 0) {
    break label$2
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 0;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$3 : {
   if ($873($0_1 | 0, 51923 | 0) | 0) {
    break label$3
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 0;
   HEAP8[($2_1 + 2 | 0) >> 0] = 1;
   return;
  }
  label$4 : {
   if ($873($0_1 | 0, 51931 | 0) | 0) {
    break label$4
   }
   HEAP8[($2_1 + 14 | 0) >> 0] = 1;
   HEAP16[($2_1 + 12 | 0) >> 1] = 257;
   HEAP8[($2_1 + 6 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$5 : {
   if ($873($0_1 | 0, 51938 | 0) | 0) {
    break label$5
   }
   HEAP8[($2_1 + 6 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$6 : {
   label$7 : {
    if (!($873($0_1 | 0, 51950 | 0) | 0)) {
     break label$7
    }
    if ($873($0_1 | 0, 51957 | 0) | 0) {
     break label$6
    }
   }
   HEAP8[($2_1 + 12 | 0) >> 0] = 1;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   return;
  }
  label$8 : {
   label$9 : {
    if (!($873($0_1 | 0, 51979 | 0) | 0)) {
     break label$9
    }
    if ($873($0_1 | 0, 51986 | 0) | 0) {
     break label$8
    }
   }
   HEAP16[($2_1 + 12 | 0) >> 1] = 257;
   HEAP16[($2_1 + 2 | 0) >> 1] = 257;
   $3_1 = 257;
   HEAP8[($2_1 + 5 | 0) >> 0] = $3_1;
   HEAP8[($2_1 + 6 | 0) >> 0] = $3_1 >>> 8 | 0;
   HEAP8[($2_1 + 24 | 0) >> 0] = 1;
   HEAP8[($2_1 + 14 | 0) >> 0] = 1;
   return;
  }
  label$10 : {
   label$11 : {
    if (!($873($0_1 | 0, 52008 | 0) | 0)) {
     break label$11
    }
    if ($873($0_1 | 0, 52016 | 0) | 0) {
     break label$10
    }
   }
   HEAP8[($2_1 + 4 | 0) >> 0] = 1;
   return;
  }
  label$12 : {
   if ($873($0_1 | 0, 52021 | 0) | 0) {
    break label$12
   }
   HEAP8[($2_1 + 27 | 0) >> 0] = 0;
   $4_1 = 257;
   HEAP8[($2_1 + 25 | 0) >> 0] = $4_1;
   HEAP8[($2_1 + 26 | 0) >> 0] = $4_1 >>> 8 | 0;
   return;
  }
  label$13 : {
   if ($873($0_1 | 0, 52029 | 0) | 0) {
    break label$13
   }
   HEAP8[($2_1 + 27 | 0) >> 0] = 1;
   $5_1 = 257;
   HEAP8[($2_1 + 25 | 0) >> 0] = $5_1;
   HEAP8[($2_1 + 26 | 0) >> 0] = $5_1 >>> 8 | 0;
  }
 }
 
 function $657($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 18 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $7_1 = 1 << $2_1 | 0;
     if ($7_1 & 19610 | 0) {
      break label$3
     }
     if ($7_1 & 406016 | 0) {
      break label$2
     }
     if (($2_1 | 0) != (8 | 0)) {
      break label$1
     }
     if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
      break label$3
     }
     HEAP8[($1_1 + 1 | 0) >> 0] = 0;
     break label$1;
    }
    HEAP8[($1_1 + 1 | 0) >> 0] = 1;
    break label$1;
   }
   label$4 : {
    if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
     break label$4
    }
    if (!(HEAPU8[($1_1 + 26 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   HEAP8[($1_1 + 1 | 0) >> 0] = 1;
  }
  HEAP8[$1_1 >> 0] = ($2_1 | 0) == (11 | 0);
  return HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0;
 }
 
 function $658($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   if (!(HEAP32[($1_1 + 16 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!(HEAPU8[($1_1 + 26 | 0) >> 0] | 0)) {
         break label$6
        }
        label$7 : {
         if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) >>> 0 < 192001 >>> 0) {
          break label$7
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 400;
         break label$1;
        }
        $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $7_1 = $6_1 + -129 | 0;
        if ($7_1 >>> 0 > 18 >>> 0) {
         break label$5
        }
        $7_1 = 1 << $7_1 | 0;
        if ($7_1 & 263776 | 0) {
         break label$2
        }
        if (!($7_1 & 3 | 0)) {
         break label$5
        }
        break label$4;
       }
       label$8 : {
        $7_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
        if ((HEAP32[($2_1 + 28 | 0) >> 2] | 0) >>> 0 <= ($7_1 ? 48e3 : 192e3) >>> 0) {
         break label$8
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = 400;
        break label$1;
       }
       label$9 : {
        label$10 : {
         $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         $8_1 = $6_1 + -129 | 0;
         if ($8_1 >>> 0 > 24 >>> 0) {
          break label$10
         }
         $9_1 = 1 << $8_1 | 0;
         if ($9_1 & 1635 | 0) {
          break label$9
         }
         label$11 : {
          if ($9_1 & 393216 | 0) {
           break label$11
          }
          if (($8_1 | 0) != (24 | 0)) {
           break label$10
          }
          if (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) {
           break label$9
          }
          HEAP32[($1_1 + 16 | 0) >> 2] = 401;
          break label$1;
         }
         if (!$7_1) {
          break label$9
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 401;
         break label$1;
        }
        label$12 : {
         label$13 : {
          label$14 : {
           switch ($6_1 + -1 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           case 1:
           case 3:
           case 4:
            break label$13;
           case 5:
            break label$9;
           default:
            break label$14;
           };
          }
          if ($6_1 >>> 0 > 18 >>> 0) {
           break label$13
          }
          if ((1 << $6_1 | 0) & 425984 | 0) {
           break label$9
          }
         }
         HEAP32[($1_1 + 16 | 0) >> 2] = 401;
         break label$1;
        }
        if ((HEAPU8[($2_1 + 24 | 0) >> 0] | 0) >>> 0 < 3 >>> 0) {
         break label$9
        }
        HEAP32[($1_1 + 16 | 0) >> 2] = 402;
        break label$1;
       }
       HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
       HEAP32[($1_1 + 28 | 0) >> 2] = $6_1;
       HEAP32[($1_1 + 16 | 0) >> 2] = 0;
       break label$1;
      }
      label$15 : {
       switch ($6_1 + -1 | 0 | 0) {
       case 0:
       case 2:
        break label$2;
       case 1:
       case 3:
       case 4:
        break label$3;
       case 5:
        break label$4;
       default:
        break label$15;
       };
      }
      if ($6_1 >>> 0 > 18 >>> 0) {
       break label$3
      }
      if (!((1 << $6_1 | 0) & 425984 | 0)) {
       break label$3
      }
     }
     if (!(HEAPU8[($1_1 + 27 | 0) >> 0] | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = 401;
     break label$1;
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 401;
    break label$1;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   $2_1 = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
   label$16 : {
    label$17 : {
     if (!(HEAPU8[($1_1 + 27 | 0) >> 0] | 0)) {
      break label$17
     }
     if (($2_1 & 255 | 0) >>> 0 < 3 >>> 0) {
      break label$16
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = 402;
     break label$1;
    }
    if (($2_1 & 255 | 0) >>> 0 < 9 >>> 0) {
     break label$16
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 402;
    break label$1;
   }
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 28 | 0) >> 2] = $6_1;
  }
  return 1 | 0;
 }
 
 function $659($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    if (!(HEAPU8[($1_1 + 25 | 0) >> 0] | 0)) {
     break label$4
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = 300;
    break label$3;
   }
   if (!(HEAP32[($1_1 + 20 | 0) >> 2] | 0)) {
    break label$3
   }
   $666(HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0);
   $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   $8_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $6_1 : $7_1;
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $9_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                 if (($9_1 | 0) > (32 | 0)) {
                  break label$18
                 }
                 label$19 : {
                  switch ($9_1 + -1 | 0 | 0) {
                  case 1:
                   break label$15;
                  case 0:
                   break label$16;
                  default:
                   break label$19;
                  };
                 }
                 switch ($9_1 + -26 | 0 | 0) {
                 case 1:
                  break label$14;
                 case 0:
                  break label$16;
                 default:
                  break label$17;
                 };
                }
                if (($9_1 + -234 | 0) >>> 0 < 2 >>> 0) {
                 break label$16
                }
                switch ($9_1 + -243 | 0 | 0) {
                case 1:
                 break label$11;
                case 0:
                 break label$13;
                default:
                 break label$12;
                };
               }
               if (($9_1 | 0) != (16 | 0)) {
                break label$10
               }
              }
              if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
               break label$15
              }
              HEAP32[($1_1 + 20 | 0) >> 2] = 501;
              break label$3;
             }
             label$20 : {
              label$21 : {
               if (!$6_1) {
                break label$21
               }
               if ($7_1) {
                break label$20
               }
              }
              $7_1 = 1088;
              HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
              $6_1 = 1920;
              HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
             }
             label$22 : {
              if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
               break label$22
              }
              if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
               break label$8
              }
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 502;
             break label$3;
            }
            label$23 : {
             if (!(HEAPU8[($1_1 + 4 | 0) >> 0] | 0)) {
              break label$23
             }
             label$24 : {
              label$25 : {
               if (!$6_1) {
                break label$25
               }
               if ($7_1) {
                break label$24
               }
              }
              $7_1 = 1088;
              HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
              $6_1 = 1920;
              HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
             }
             label$26 : {
              if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
               break label$26
              }
              if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
               break label$8
              }
             }
             HEAP32[($1_1 + 20 | 0) >> 2] = 502;
             break label$3;
            }
            label$27 : {
             $10_1 = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
             $9_1 = $10_1 ? 4096 : 2048;
             $6_1 = $6_1 ? ($7_1 ? $8_1 : $9_1) : $9_1;
             $7_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
             if (($6_1 | 0) < ($7_1 | 0)) {
              break label$27
             }
             $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
             if (($6_1 | 0) < ($2_1 | 0)) {
              break label$27
             }
             if (Math_imul($2_1, $7_1) >>> 0 <= ($10_1 ? 8847360 : 2088960) >>> 0) {
              break label$9
             }
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 502;
            break label$3;
           }
           label$28 : {
            label$29 : {
             if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
              break label$29
             }
             if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
              break label$28
             }
            }
            HEAP32[($1_1 + 20 | 0) >> 2] = 501;
            break label$3;
           }
           label$30 : {
            label$31 : {
             if (!$6_1) {
              break label$31
             }
             if ($7_1) {
              break label$30
             }
            }
            $7_1 = 1088;
            HEAP32[($5_1 + 8 | 0) >> 2] = 1088;
            $6_1 = 1920;
            HEAP32[($5_1 + 12 | 0) >> 2] = 1920;
           }
           label$32 : {
            if ($6_1 >>> 0 < (HEAPU16[($2_1 + 28 | 0) >> 1] | 0) >>> 0) {
             break label$32
            }
            if ($7_1 >>> 0 >= (HEAPU16[($2_1 + 30 | 0) >> 1] | 0) >>> 0) {
             break label$8
            }
           }
           HEAP32[($1_1 + 20 | 0) >> 2] = 502;
           break label$3;
          }
          if (($9_1 | 0) != (33 | 0)) {
           break label$10
          }
          label$33 : {
           if (!(HEAPU8[($1_1 + 2 | 0) >> 0] | 0)) {
            break label$33
           }
           label$34 : {
            label$35 : {
             if (!$6_1) {
              break label$35
             }
             if (!$7_1) {
              break label$35
             }
             $7_1 = Math_imul($7_1, $6_1);
             break label$34;
            }
            $6_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
            $7_1 = $6_1 ? 8847360 : 2211840;
            $8_1 = $6_1 ? 4096 : 2048;
           }
           label$36 : {
            $6_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
            if (($8_1 | 0) < ($6_1 | 0)) {
             break label$36
            }
            $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
            if (($8_1 | 0) < ($2_1 | 0)) {
             break label$36
            }
            if ((Math_imul($2_1, $6_1) | 0) <= ($7_1 | 0)) {
             break label$6
            }
           }
           HEAP32[($1_1 + 20 | 0) >> 2] = 502;
           break label$3;
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 503;
          break label$3;
         }
         label$37 : {
          if (!(HEAPU8[($1_1 + 3 | 0) >> 0] | 0)) {
           break label$37
          }
          label$38 : {
           label$39 : {
            if (!$6_1) {
             break label$39
            }
            if (!$7_1) {
             break label$39
            }
            $7_1 = Math_imul($7_1, $6_1);
            break label$38;
           }
           $6_1 = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
           $7_1 = $6_1 ? 8847360 : 2211840;
           $8_1 = $6_1 ? 4096 : 2048;
          }
          label$40 : {
           $6_1 = HEAPU16[($2_1 + 28 | 0) >> 1] | 0;
           if (($8_1 | 0) < ($6_1 | 0)) {
            break label$40
           }
           $2_1 = HEAPU16[($2_1 + 30 | 0) >> 1] | 0;
           if (($8_1 | 0) < ($2_1 | 0)) {
            break label$40
           }
           if ((Math_imul($2_1, $6_1) | 0) <= ($7_1 | 0)) {
            break label$7
           }
          }
          HEAP32[($1_1 + 20 | 0) >> 2] = 502;
          break label$3;
         }
         HEAP32[($1_1 + 20 | 0) >> 2] = 501;
         break label$3;
        }
        HEAP32[($1_1 + 20 | 0) >> 2] = 501;
        break label$3;
       }
       HEAP32[($1_1 + 20 | 0) >> 2] = 0;
       break label$5;
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = 0;
      break label$5;
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = 0;
     break label$5;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = $3_1;
  }
  label$41 : {
   $12_1 = $5_1 + 16 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return 1 | 0;
 }
 
 function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return 0 | 0;
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $645();
  $0_1 = $654($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $647();
  return $0_1 | 0;
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if ($873($0_1 | 0, 52190 | 0) | 0) {
     break label$2
    }
    return 5 | 0;
   }
   label$3 : {
    if ($873($0_1 | 0, 52193 | 0) | 0) {
     break label$3
    }
    return 4 | 0;
   }
   label$4 : {
    if ($873($0_1 | 0, 52196 | 0) | 0) {
     break label$4
    }
    return 3 | 0;
   }
   label$5 : {
    if ($873($0_1 | 0, 52199 | 0) | 0) {
     break label$5
    }
    return 2 | 0;
   }
   if ($873($0_1 | 0, 52203 | 0) | 0) {
    break label$1
   }
   return 1 | 0;
  }
  return 0 | 0;
 }
 
 function $663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52244 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52240 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (12 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53500 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52404 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52400 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (19 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53546 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  $3_1 = 0;
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[(($3_1 << 3 | 0) + 52676 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(($3_1 << 3 | 0) + 52672 | 0) >> 2] | 0;
     break label$3;
    }
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (11 | 0)) {
     continue label$4
    }
    break label$4;
   };
   $3_1 = 0;
   if ($1_1 & 1 | 0) {
    break label$3
   }
   HEAP32[$2_1 >> 2] = $0_1;
   $977(53588 | 0, $2_1 | 0) | 0;
  }
  label$6 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $666($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$1 : {
   $0_1 = $0_1 + -1 | 0;
   if ($0_1 >>> 0 > 4 >>> 0) {
    break label$1
   }
   $3_1 = $0_1 << 2 | 0;
   $4_1 = HEAP32[($3_1 + 53652 | 0) >> 2] | 0;
   $3_1 = HEAP32[($3_1 + 53632 | 0) >> 2] | 0;
  }
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = $4_1;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (($0_1 | 0) > (299 | 0)) {
               break label$12
              }
              $1_1 = 52045;
              label$13 : {
               switch ($0_1 | 0) {
               case 0:
                break label$1;
               case 1:
                break label$11;
               default:
                break label$13;
               };
              }
              if (($0_1 | 0) == (100 | 0)) {
               break label$10
              }
              if (($0_1 | 0) != (200 | 0)) {
               break label$2
              }
              return 52076 | 0;
             }
             label$14 : {
              switch ($0_1 + -400 | 0 | 0) {
              case 2:
               break label$6;
              case 1:
               break label$7;
              case 0:
               break label$8;
              default:
               break label$14;
              };
             }
             switch ($0_1 + -501 | 0 | 0) {
             case 2:
              break label$3;
             case 1:
              break label$4;
             case 0:
              break label$5;
             default:
              break label$9;
             };
            }
            return 52054 | 0;
           }
           return 52063 | 0;
          }
          if (($0_1 | 0) != (300 | 0)) {
           break label$2
          }
          return 52086 | 0;
         }
         return 52095 | 0;
        }
        return 52119 | 0;
       }
       return 52130 | 0;
      }
      return 52145 | 0;
     }
     return 52156 | 0;
    }
    return 52173 | 0;
   }
   $1_1 = 52184;
  }
  return $1_1 | 0;
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 1;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   if ($0_1 >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -4 | 0 | 0) {
    case 1:
     $1_1 = $0_1 + -1 | 0;
     if ($1_1 >>> 0 >= 4 >>> 0) {
      break label$1
     }
     return HEAP32[(($1_1 << 2 | 0) + 53672 | 0) >> 2] | 0 | 0;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   if (($0_1 + -1 | 0) >>> 0 >= 3 >>> 0) {
    break label$1
   }
   return 6 - $0_1 | 0 | 0;
  }
  return $2_1 | 0;
 }
 
 function $669($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($873($0_1 | 0, 51906 | 0) | 0) {
      break label$3
     }
     $4_1 = 0;
     label$4 : {
      switch ($1_1 | 0) {
      case 0:
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$2_1 >> 2] = 5;
       break label$2;
      case 1:
       break label$4;
      default:
       break label$1;
      };
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$6 : {
     label$7 : {
      if (!($873($0_1 | 0, 51912 | 0) | 0)) {
       break label$7
      }
      if ($873($0_1 | 0, 52208 | 0) | 0) {
       break label$6
      }
     }
     $4_1 = 0;
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$8 : {
     if ($873($0_1 | 0, 51979 | 0) | 0) {
      break label$8
     }
     $4_1 = 0;
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$9 : {
     if ($873($0_1 | 0, 51986 | 0) | 0) {
      break label$9
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$10 : {
     if ($873($0_1 | 0, 51950 | 0) | 0) {
      break label$10
     }
     $4_1 = 0;
     label$11 : {
      switch ($1_1 | 0) {
      case 0:
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[$2_1 >> 2] = 5;
       break label$2;
      case 1:
       break label$11;
      default:
       break label$1;
      };
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 4;
     break label$2;
    }
    label$13 : {
     label$14 : {
      if (!($873($0_1 | 0, 51957 | 0) | 0)) {
       break label$14
      }
      if ($873($0_1 | 0, 51931 | 0) | 0) {
       break label$13
      }
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 5;
     break label$2;
    }
    label$15 : {
     label$16 : {
      if (!($873($0_1 | 0, 52213 | 0) | 0)) {
       break label$16
      }
      if (!($873($0_1 | 0, 51923 | 0) | 0)) {
       break label$16
      }
      $4_1 = 0;
      if (!($873($0_1 | 0, 51938 | 0) | 0 | $1_1 | 0)) {
       break label$15
      }
      break label$1;
     }
     $4_1 = 0;
     if ($1_1) {
      break label$1
     }
    }
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$2_1 >> 2] = 4;
   }
   $4_1 = 1;
  }
  return $4_1 | 0;
 }
 
 function $670($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = -1;
  label$3 : {
   if (!($669($0_1 | 0, $1_1 | 0, $4_1 + 24 | 0 | 0, $4_1 + 28 | 0 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    switch ((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + -4 | 0 | 0) {
    case 1:
     label$6 : {
      $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
      if ($5_1) {
       break label$6
      }
      $5_1 = $887($2_1 | 0, $3_1 | 0, 52190 | 0, 0 | 0) | 0;
      break label$3;
     }
     HEAP32[$4_1 >> 2] = $5_1 + 1 | 0;
     $5_1 = $887($2_1 | 0, $3_1 | 0, 52220 | 0, $4_1 | 0) | 0;
     break label$3;
    case 0:
     break label$4;
    default:
     break label$3;
    };
   }
   HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1 | 0;
   $5_1 = $887($2_1 | 0, $3_1 | 0, 52225 | 0, $4_1 + 16 | 0 | 0) | 0;
  }
  label$7 : {
   $7_1 = $4_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($669($0_1 | 0, $1_1 | 0, $3_1 + 8 | 0 | 0, $3_1 + 12 | 0 | 0) | 0)) {
    break label$3
   }
   $4_1 = $668($662($2_1 | 0) | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  label$4 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = $776($0_1 | 0) | 0;
  $766($0_1 | 0, 4 | 0) | 0;
  $2_1 = $776($0_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ($1_1 | 0) == (1179011410 | 0) & ($2_1 | 0) == (1163280727 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(48 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62360 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 48;
    $827(53748 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 48 | 0, $2_1 | 0, 53688 | 0);
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   $624($1_1 + 16 | 0 | 0);
   HEAP32[($1_1 + 28 | 0) >> 2] = 196;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   $0_1 = $623($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = $2_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $2_1;
    $616($0_1 | 0, $2_1 + 16 | 0 | 0, 544501094 | 0, 197 | 0);
    $616(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, 1635017060 | 0, 198 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 48 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 95 | 0);
  }
  return ($1_1 | 0) != (1163280727 | 0) | 0;
 }
 
 function $675($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $10_1 = 0, $12_1 = 0, $11_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $11_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 108 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62360 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62360 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $9_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $10_1 = 0;
     break label$6;
    }
    $10_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(53880 | 0, $5_1 | 0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
      break label$10
     }
     if ($3_1) {
      break label$10
     }
     if (($1_1 | 0) != (544501094 | 0)) {
      break label$10
     }
     if (!$4_1) {
      break label$10
     }
     $1_1 = 1;
     if (($756($4_1 | 0) | 0 | 0) != ($2_1 | 0)) {
      break label$9
     }
     $762($5_1 + 40 | 0 | 0, $4_1 | 0);
     $1_1 = 1;
     if (!($260($5_1 + 56 | 0 | 0, $5_1 + 40 | 0 | 0) | 0)) {
      break label$9
     }
     $3_1 = $813(328 | 0) | 0;
     if (!$3_1) {
      break label$9
     }
     $218($3_1 | 0);
     HEAP32[($3_1 + 4 | 0) >> 2] = 1;
     label$11 : {
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           if ($268($5_1 + 56 | 0 | 0) | 0) {
            break label$16
           }
           label$17 : {
            $1_1 = HEAPU16[($5_1 + 56 | 0) >> 1] | 0;
            if (($1_1 | 0) > (16 | 0)) {
             break label$17
            }
            switch ($1_1 + -2 | 0 | 0) {
            case 0:
             break label$14;
            case 4:
            case 5:
             break label$15;
            default:
             break label$12;
            };
           }
           label$18 : {
            if (($1_1 | 0) > (84 | 0)) {
             break label$18
            }
            if (($1_1 | 0) == (17 | 0)) {
             break label$14
            }
            if (($1_1 | 0) != (80 | 0)) {
             break label$12
            }
            HEAP32[($3_1 + 20 | 0) >> 2] = 3;
            break label$11;
           }
           if (($1_1 | 0) == (85 | 0)) {
            break label$13
           }
           if (($1_1 | 0) != (256 | 0)) {
            break label$12
           }
          }
          HEAP32[($3_1 + 20 | 0) >> 2] = 138;
          break label$11;
         }
         HEAP32[($3_1 + 20 | 0) >> 2] = 150;
         break label$11;
        }
        HEAP32[($3_1 + 20 | 0) >> 2] = 141;
        break label$11;
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 1;
       break label$11;
      }
      label$19 : {
       if (!($269($5_1 + 56 | 0 | 0) | 0)) {
        break label$19
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 129;
       break label$11;
      }
      label$20 : {
       if ((HEAPU16[($5_1 + 56 | 0) >> 1] | 0 | 0) != (8193 | 0)) {
        break label$20
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 130;
       break label$11;
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = 1;
     HEAP8[($3_1 + 24 | 0) >> 0] = HEAPU8[($5_1 + 58 | 0) >> 0] | 0;
     HEAP8[($3_1 + 25 | 0) >> 0] = HEAPU8[($5_1 + 70 | 0) >> 0] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
     HEAP16[($3_1 + 26 | 0) >> 1] = (((HEAP32[($5_1 + 64 | 0) >> 2] | 0) << 3 | 0) >>> 0) / (1e3 >>> 0) | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
     $1_1 = 0;
     break label$9;
    }
    $1_1 = 1;
    if (!$4_1) {
     break label$8
    }
   }
   $735($4_1 | 0);
  }
  label$21 : {
   $12_1 = $5_1 + 208 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  return $1_1 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $11_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $89_1 = 0, $92$hi = 0, $94_1 = 0, $94$hi = 0;
  label$1 : {
   $5_1 = global$0 - 64 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 171 | 0);
  }
  label$5 : {
   if ((HEAP8[(0 + 62360 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$5
   }
   if (!($828(2 | 0, 62360 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   $6_1 = $1_1 >>> 24 | 0;
   $7_1 = $1_1 & 255 | 0;
   $8_1 = ($1_1 >>> 16 | 0) & 255 | 0;
   $1_1 = ($1_1 >>> 8 | 0) & 255 | 0;
   label$6 : {
    label$7 : {
     if ($4_1) {
      break label$7
     }
     $9_1 = 0;
     break label$6;
    }
    $9_1 = $756($4_1 | 0) | 0;
   }
   HEAP32[($5_1 + 32 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = $0_1;
   $827(53931 | 0, $5_1 | 0);
  }
  label$8 : {
   if (!(HEAP32[($0_1 + 8 | 0) >> 2] | 0)) {
    break label$8
   }
   $1_1 = $813(40 | 0) | 0;
   if (!$1_1) {
    break label$8
   }
   $214($1_1 | 0, 14 | 0);
   $6_1 = 0;
   label$9 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$9
    }
    label$10 : {
     if (HEAPU16[($3_1 + 26 | 0) >> 1] | 0) {
      break label$10
     }
     $6_1 = $3_1;
     break label$9;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = 5;
    HEAP32[($1_1 + 16 | 0) >> 2] = Math_imul(HEAPU16[($3_1 + 26 | 0) >> 1] | 0, 1e3);
    $89_1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $21_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $21_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $92$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = HEAPU16[($3_1 + 26 | 0) >> 1] | 0;
    i64toi32_i32$2 = 0;
    $94_1 = i64toi32_i32$1;
    $94$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $92$hi;
    i64toi32_i32$1 = $94$hi;
    i64toi32_i32$1 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$2 | 0, $94_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    HEAP32[($89_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    $6_1 = $3_1;
    if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) != (138 | 0)) {
     break label$9
    }
    $762($5_1 + 48 | 0 | 0, $4_1 | 0);
    label$11 : {
     if (!($270($5_1 + 48 | 0 | 0) | 0)) {
      break label$11
     }
     HEAP8[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 0] = 6;
     HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 132;
     HEAP32[($1_1 + 8 | 0) >> 2] = 1;
    }
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   $215($1_1 | 0, $6_1 | 0);
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  label$12 : {
   if (!$4_1) {
    break label$12
   }
   $735($4_1 | 0);
  }
  label$13 : {
   $11_1 = $5_1 + 64 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return 1 | 0;
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 250 | 0);
  }
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 16 | 0 | 0);
  $617(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 32 | 0 | 0);
  $629(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 48 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $678($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $24_1 = 0, $24$hi = 0, $31_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (53688 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 48 | 0, $0_1 | 0, 53688 | 0, 53803 | 0, 272 | 0);
  }
  label$5 : {
   label$6 : {
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    $31_1 = !(i64toi32_i32$1 | i64toi32_i32$0 | 0) ? 8192 : i64toi32_i32$1;
    i64toi32_i32$0 = $24$hi;
    $3_1 = $50($1_1 | 0, $24_1 | 0, i64toi32_i32$0 | 0, $31_1 | 0, $4_1 + 12 | 0 | 0) | 0;
    if ($3_1) {
     break label$6
    }
    $3_1 = 0;
    break label$5;
   }
   $797($2_1 | 0, $3_1 | 0);
   $630(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   $815($1_1 | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $619(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $796($2_1 | 0);
  label$7 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $11_1 = 0, $33_1 = 0, $36_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $11_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $3_1 = $754($0_1 | 0) | 0;
  HEAP8[$1_1 >> 0] = $772($0_1 | 0) | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = $772($0_1 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 48 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[($2_1 + 48 | 0) >> 2] = $36_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  $783($2_1 + 64 | 0 | 0, $2_1 + 48 | 0 | 0);
  HEAP8[($1_1 + 2 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 7 | 0) | 0;
  HEAP8[($1_1 + 3 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
  $4_1 = 0;
  HEAP8[($1_1 + 4 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 5 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 6 | 0) >> 0] = ($789($2_1 + 64 | 0 | 0) | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 7 | 0) >> 0] = $790($2_1 + 64 | 0 | 0, 6 | 0) | 0;
  $792($2_1 + 64 | 0 | 0, 28 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     if (!($784($2_1 + 64 | 0 | 0) | 0)) {
      break label$5
     }
     $680();
     break label$4;
    }
    $4_1 = $785($2_1 + 64 | 0 | 0) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$3
    }
    $766($0_1 | 0, $4_1 - $3_1 | 0 | 0) | 0;
    $766($0_1 | 0, 16 | 0) | 0;
    $4_1 = 1;
   }
   label$6 : {
    if ((HEAP8[(0 + 62376 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62376 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $6_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    $7_1 = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $8_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    $9_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
    $10_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
    HEAP32[($2_1 + 36 | 0) >> 2] = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = $10_1;
    HEAP32[($2_1 + 28 | 0) >> 2] = $9_1;
    HEAP32[($2_1 + 24 | 0) >> 2] = $8_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
    HEAP32[($2_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 ? 54264 : 54265;
    HEAP32[$2_1 >> 2] = $0_1;
    $827(54099 | 0, $2_1 | 0);
   }
   label$7 : {
    $12_1 = $2_1 + 80 | 0;
    if ($12_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $12_1;
   }
   return $4_1 | 0;
  }
  $859(54069 | 0, 53983 | 0, 74 | 0);
  abort();
 }
 
 function $680() {
  $862(53983 | 0, 70 | 0, 8 | 0) | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $197_1 = 0, $199$hi = 0, $201$hi = 0;
  label$1 : {
   $2_1 = global$0 - 64 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 472 | 0);
  }
  $3_1 = $798($1_1 | 0) | 0;
  $4_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$9
       }
       if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$9
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(54393 | 0, $2_1 | 0);
      }
      label$10 : {
       if (!$3_1) {
        break label$10
       }
       $7_1 = $756($3_1 | 0) | 0;
       $744(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0);
       $735($3_1 | 0);
       $6_1 = $7_1 + $6_1 | 0;
       $5_1 = !$7_1;
      }
      label$11 : while (1) {
       $7_1 = $740(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       $763($2_1 + 48 | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
       $3_1 = 0;
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            switch (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) {
            case 1:
             $3_1 = $682($0_1 | 0, $2_1 + 48 | 0 | 0) | 0;
             break label$12;
            case 0:
             $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
             if ($7_1 >>> 0 < $8_1 >>> 0) {
              break label$12
             }
             i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $73_1 = i64toi32_i32$0;
             i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
             HEAP32[i64toi32_i32$0 >> 2] = $73_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $2_1;
             i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
             i64toi32_i32$0 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
             $76_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $2_1;
             HEAP32[($2_1 + 32 | 0) >> 2] = $76_1;
             HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
             $766($2_1 + 48 | 0 | 0, $8_1 | 0) | 0;
             HEAP16[($2_1 + 24 | 0) >> 1] = 0;
             HEAP32[($2_1 + 20 | 0) >> 2] = 16777343;
             HEAP32[($2_1 + 16 | 0) >> 2] = $253(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, 100 | 0) | 0;
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  $3_1 = HEAPU8[($0_1 + 48 | 0) >> 0] | 0;
                  switch ($3_1 + -8 | 0 | 0) {
                  case 1:
                   break label$21;
                  case 0:
                   break label$22;
                  default:
                   break label$23;
                  };
                 }
                 if (($3_1 | 0) != (18 | 0)) {
                  break label$19
                 }
                 $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
                 break label$20;
                }
                label$24 : {
                 if ((HEAPU8[($0_1 + 50 | 0) >> 0] | 0 | 0) != (10 | 0)) {
                  break label$24
                 }
                 $3_1 = $683($0_1 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                 break label$20;
                }
                $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
                break label$20;
               }
               label$25 : {
                label$26 : {
                 switch ((HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + -2 | 0 | 0) {
                 case 0:
                 case 2:
                 case 3:
                  $3_1 = $684($0_1 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                  break label$20;
                 case 5:
                  break label$26;
                 default:
                  break label$25;
                 };
                }
                if (!(HEAP32[($0_1 + 56 | 0) >> 2] | 0)) {
                 break label$25
                }
                $3_1 = $685($0_1 | 0, $2_1 + 32 | 0 | 0, $8_1 | 0, $2_1 + 16 | 0 | 0) | 0;
                break label$20;
               }
               $3_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 48 | 0 | 0, 14996 | 0, $2_1 + 16 | 0 | 0) | 0;
              }
              if (!$3_1) {
               break label$19
              }
              $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$6
              }
              $4_1 = FUNCTION_TABLE[HEAP32[($7_1 + 8 | 0) >> 2] | 0]($7_1, $3_1, HEAPU8[($0_1 + 49 | 0) >> 0] | 0) | 0;
             }
             HEAP32[($0_1 + 44 | 0) >> 2] = 0;
             HEAP32[($0_1 + 36 | 0) >> 2] = 0;
             break label$15;
            case 4:
             break label$13;
            case 3:
             break label$14;
            case 2:
             break label$16;
            default:
             break label$12;
            };
           }
           $7_1 = $766($2_1 + 48 | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) | 0;
           $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
           if ($8_1 >>> 0 < $7_1 >>> 0) {
            break label$5
           }
           $7_1 = $8_1 - $7_1 | 0;
           HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
           if ($7_1) {
            break label$12
           }
          }
          $3_1 = 1;
          HEAP32[($0_1 + 8 | 0) >> 2] = 1;
          break label$12;
         }
         $3_1 = $686($0_1 | 0, $2_1 + 48 | 0 | 0) | 0;
         break label$12;
        }
        $766($2_1 + 48 | 0 | 0, $7_1 | 0) | 0;
       }
       $7_1 = $754($2_1 + 48 | 0 | 0) | 0;
       $197_1 = $0_1;
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
       $199$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $201$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $199$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = $201$hi;
       i64toi32_i32$4 = i64toi32_i32$2 + $7_1 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < $7_1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$2 = $197_1;
       HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] = i64toi32_i32$5;
       $745(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 48 | 0 | 0);
       label$28 : {
        $7_1 = ($4_1 | 0) == (1 | 0);
        if ($7_1) {
         break label$28
        }
        if ($3_1) {
         continue label$11
        }
       }
       break label$11;
      };
      if ($7_1) {
       break label$7
      }
      $3_1 = $798($1_1 | 0) | 0;
      if ($3_1) {
       continue label$8
      }
      break label$8;
     };
     if (!($5_1 & 1 | 0)) {
      break label$7
     }
     $687($0_1 | 0);
    }
    label$29 : {
     $10_1 = $2_1 + 64 | 0;
     if ($10_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $10_1;
    }
    return $6_1 | 0;
   }
   $859(54425 | 0, 54311 | 0, 546 | 0);
   abort();
  }
  $859(54445 | 0, 54311 | 0, 559 | 0);
  abort();
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 80 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 76 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $766($1_1 | 0, 4 | 0) | 0;
  $3_1 = $772($1_1 | 0) | 0;
  $4_1 = $782($1_1 | 0) | 0;
  $5_1 = $782($1_1 | 0) | 0;
  $6_1 = $772($1_1 | 0) | 0;
  $7_1 = $782($1_1 | 0) | 0;
  $8_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      label$7 : {
       if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($2_1 + 68 | 0) >> 2] = $7_1;
       HEAP32[($2_1 + 64 | 0) >> 2] = $0_1;
       $827(54540 | 0, $2_1 + 64 | 0 | 0);
      }
      $688($0_1 | 0);
      break label$4;
     }
     $7_1 = $689($0_1 | 0, $3_1 | 0) | 0;
     HEAP8[($0_1 + 48 | 0) >> 0] = $3_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
     HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      if (!$7_1) {
       break label$8
      }
      $7_1 = $6_1 << 24 | 0 | $5_1 | 0;
      label$9 : {
       label$10 : {
        if (($3_1 & 254 | 0 | 0) != (8 | 0)) {
         break label$10
        }
        $5_1 = $764($1_1 | 0) | 0;
        if (($5_1 | 0) == (-1 | 0)) {
         break label$5
        }
        HEAP8[($0_1 + 49 | 0) >> 0] = $5_1;
        $1_1 = $4_1 + -1 | 0;
        HEAP32[($0_1 + 44 | 0) >> 2] = $1_1;
        label$11 : {
         if (($3_1 | 0) != (8 | 0)) {
          break label$11
         }
         HEAP8[($0_1 + 50 | 0) >> 0] = ($5_1 & 240 | 0) >>> 4 | 0;
         if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$9
         }
         if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$9
         }
         $8_1 = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
         HEAP32[($2_1 + 24 | 0) >> 2] = $5_1 & 1 | 0 ? 54895 : 54902;
         HEAP32[($2_1 + 20 | 0) >> 2] = $5_1 & 2 | 0 ? 16 : 8;
         HEAP32[($2_1 + 16 | 0) >> 2] = HEAPU16[((($5_1 >>> 1 | 0) & 6 | 0) + 54806 | 0) >> 1] | 0;
         HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
         HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
         HEAP32[$2_1 >> 2] = $0_1;
         HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(($8_1 << 2 | 0) + 54592 | 0) >> 2] | 0;
         $827(54814 | 0, $2_1 | 0);
         break label$9;
        }
        HEAP8[($0_1 + 51 | 0) >> 0] = $5_1 & 15 | 0;
        if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$9
        }
        if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$9
        }
        HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[(((HEAPU8[($0_1 + 51 | 0) >> 0] | 0) << 2 | 0) + 55008 | 0) >> 2] | 0;
        HEAP32[($2_1 + 40 | 0) >> 2] = $7_1;
        HEAP32[($2_1 + 36 | 0) >> 2] = $1_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $0_1;
        HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[((($5_1 >>> 2 | 0) & 60 | 0) + 54912 | 0) >> 2] | 0;
        $827(55188 | 0, $2_1 + 32 | 0 | 0);
        break label$9;
       }
       HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
       HEAP8[($0_1 + 49 | 0) >> 0] = 0;
      }
      $8_1 = 1;
      if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == (2 | 0)) {
       break label$3
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      HEAP32[($0_1 + 40 | 0) >> 2] = $7_1;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 2;
     break label$4;
    }
    $769($1_1 | 0, $2_1 + 72 | 0 | 0);
    break label$3;
   }
   $8_1 = 1;
  }
  label$12 : {
   $10_1 = $2_1 + 80 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $8_1 | 0;
 }
 
 function $683($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($3_1 >>> 0 < 2 >>> 0) {
       break label$6
      }
      label$7 : {
       switch ($772($1_1 | 0) | 0 | 0) {
       case 1:
        break label$5;
       case 0:
        break label$7;
       default:
        break label$6;
       };
      }
      if (!($580($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$6
      }
      $254($0_1 + 76 | 0 | 0, $5_1 + 8 | 0 | 0);
     }
     $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
     $0_1 = 0;
     break label$4;
    }
    $3_1 = $258($5_1 + 20 | 0 | 0, $0_1 + 76 | 0 | 0, $3_1 + -1 | 0 | 0) | 0;
    if ($3_1 >>> 0 >= 8 >>> 0) {
     break label$3
    }
    HEAP32[(($5_1 + 8 | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($5_1 + 14 | 0) >> 0] = 0;
    HEAP8[($5_1 + 13 | 0) >> 0] = $3_1;
    $0_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, 55336 | 0, $5_1 + 8 | 0 | 0) | 0;
   }
   label$8 : {
    $7_1 = $5_1 + 32 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return $0_1 | 0;
  }
  $859(55307 | 0, 54311 | 0, 399 | 0);
  abort();
 }
 
 function $684($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $5_1 = global$0 - 32 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[(($5_1 + 8 | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 12 | 0) >> 0] = 0;
  $263($5_1 + 8 | 0 | 0, $3_1 | 0);
  $4_1 = $753(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, 20908 | 0, $5_1 + 8 | 0 | 0) | 0;
  label$3 : {
   $7_1 = $5_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $685($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $87_1 = 0, $90_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  $5_1 = $772($1_1 | 0) | 0;
  $6_1 = $782($1_1 | 0) | 0;
  $7_1 = 0;
  label$3 : {
   if ($2_1 >>> 0 < 4 >>> 0) {
    break label$3
   }
   $2_1 = $2_1 + -4 | 0;
   label$4 : {
    label$5 : {
     switch ($5_1 | 0) {
     case 0:
      label$7 : {
       if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$7
       }
       if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$7
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
       HEAP32[$4_1 >> 2] = $0_1;
       $827(55344 | 0, $4_1 | 0);
      }
      $7_1 = $690($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
      break label$3;
     case 1:
      break label$5;
     default:
      break label$4;
     };
    }
    $5_1 = ($6_1 << 8 | 0) >> 8 | 0;
    $7_1 = 0;
    label$8 : {
     if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
     $827(55382 | 0, $4_1 + 16 | 0 | 0);
    }
    HEAP8[($3_1 + 7 | 0) >> 0] = 1;
    HEAP32[$3_1 >> 2] = $253((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $5_1 | 0 | 0, 100 | 0) | 0;
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$3
    }
    label$9 : {
     if ($2_1 >>> 0 <= $5_1 >>> 0) {
      break label$9
     }
     $6_1 = $0_1 + 60 | 0;
     label$10 : while (1) {
      $7_1 = $774($1_1 | 0, $5_1 | 0) | 0;
      $2_1 = $2_1 - (HEAP32[($0_1 + 52 | 0) >> 2] | 0) | 0;
      if ($2_1 >>> 0 < $7_1 >>> 0) {
       break label$4
      }
      i64toi32_i32$2 = $1_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $87_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($4_1 + 32 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $87_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $90_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[($4_1 + 32 | 0) >> 2] = $90_1;
      HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      if (($766($1_1 | 0, $7_1 | 0) | 0 | 0) != ($7_1 | 0)) {
       break label$4
      }
      $741(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $6_1 | 0);
      $755(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0, $1_1 | 0) | 0;
      $2_1 = $2_1 - $7_1 | 0;
      $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if ($2_1 >>> 0 > $5_1 >>> 0) {
       continue label$10
      }
      break label$10;
     };
    }
    $7_1 = $751(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 14996 | 0, $3_1 | 0) | 0;
    break label$3;
   }
   $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
   $7_1 = 0;
  }
  label$11 : {
   $9_1 = $4_1 + 48 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $7_1 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = $782($1_1 | 0) | 0;
  $4_1 = $764($1_1 | 0) | 0;
  $766($1_1 | 0, 1 | 0) | 0;
  $5_1 = $778($1_1 | 0) | 0;
  $6_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      if (($3_1 | 0) != (4607062 | 0)) {
       break label$5
      }
      label$7 : {
       if (($4_1 | 0) == (1 | 0)) {
        break label$7
       }
       if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$5
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
       HEAP32[$2_1 >> 2] = $0_1;
       $827(55418 | 0, $2_1 | 0);
       break label$5;
      }
      if ($5_1 >>> 0 < 9 >>> 0) {
       break label$5
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 2;
      HEAP32[($0_1 + 44 | 0) >> 2] = $5_1 + -9 | 0;
      break label$4;
     }
     $769($1_1 | 0, $2_1 + 8 | 0 | 0);
     break label$3;
    }
    $688($0_1 | 0);
   }
   $6_1 = 1;
  }
  label$8 : {
   $8_1 = $2_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $6_1 | 0;
 }
 
 function $687($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$4 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $4_1 = 0, $7$hi = 0, $15_1 = 0, $7_1 = 0, $16_1 = 0, $17_1 = 0, $6_1 = 0, $5_1 = 0, $47_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62392 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62392 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1;
   $827(55467 | 0, $1_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$4
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 433 | 0);
  }
  label$6 : {
   $2_1 = $689($0_1 | 0, 9 | 0) | 0;
   if (!$2_1) {
    break label$6
   }
   HEAP16[($1_1 + 24 | 0) >> 1] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 127;
   $3_1 = 255;
   label$7 : {
    $4_1 = (HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + -2 | 0;
    if (($4_1 & 255 | 0) >>> 0 > 5 >>> 0) {
     break label$7
    }
    $3_1 = 255;
    if (!((45 >>> ($4_1 & 255 | 0) | 0) & 1 | 0)) {
     break label$7
    }
    $47_1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 255;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $15_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $15_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 513;
    i64toi32_i32$1 = 16843009;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $16_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $16_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    HEAP8[($47_1 + 20 | 0) >> 0] = $16_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = 33409;
    i64toi32_i32$2 = -2122219135;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $17_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $17_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $17_1;
   }
   HEAP8[($1_1 + 23 | 0) >> 0] = 1;
   HEAP8[($1_1 + 20 | 0) >> 0] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $253(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, 100 | 0) | 0;
   label$8 : {
    $3_1 = $749(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 14996 | 0, $1_1 + 16 | 0 | 0) | 0;
    if (!$3_1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[($2_1 + 8 | 0) >> 2] | 0]($2_1, $3_1, HEAPU8[($0_1 + 51 | 0) >> 0] | 0) | 0;
   }
   $3_1 = $749(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, 14996 | 0, $1_1 + 16 | 0 | 0) | 0;
   if (!$3_1) {
    break label$6
   }
   FUNCTION_TABLE[HEAP32[($2_1 + 8 | 0) >> 2] | 0]($2_1, $3_1, HEAPU8[($0_1 + 51 | 0) >> 0] | 0) | 0;
  }
  label$9 : {
   $6_1 = $1_1 + 32 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $688($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if (!($834(62392 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(55254 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 4;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $690($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $766($1_1 | 0, 4 | 0) | 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = (($764($1_1 | 0) | 0) & 3 | 0) + 1 | 0;
  label$1 : {
   $3_1 = $764($1_1 | 0) | 0;
   if (($3_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (!($698($0_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $3_1 & 31 | 0 | 0) | 0)) {
    break label$1
   }
   $3_1 = $764($1_1 | 0) | 0;
   if (($3_1 | 0) == (-1 | 0)) {
    break label$1
   }
   if (!($698($0_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $3_1 & 31 | 0 | 0) | 0)) {
    break label$1
   }
   $741(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $0_1 + 68 | 0 | 0);
   HEAP8[($2_1 + 7 | 0) >> 0] = 0;
   return $751(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, 14996 | 0, $2_1 | 0) | 0 | 0;
  }
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  return 0 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(54471 | 0, 54311 | 0, 591 | 0);
   abort();
  }
  $822($0_1 | 0, 0 | 0, 4 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $692($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (!$0_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $3_1 = $813(96 | 0) | 0;
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      if (!($835(62392 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$2_1 >> 2] = 96;
      $827(54483 | 0, $2_1 | 0);
      break label$5;
     }
     $845($3_1 | 0, 96 | 0, $3_1 | 0, 54296 | 0);
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = 0;
     HEAP32[($3_1 + 88 | 0) >> 2] = $1_1;
     label$7 : {
      label$8 : {
       if (!$1_1) {
        break label$8
       }
       $4_1 = HEAPU16[(0 + 20904 | 0) >> 1] | 0;
       $5_1 = HEAPU16[(0 + 20892 | 0) >> 1] | 0;
       $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, $4_1 + $5_1 | 0) | 0;
       HEAP32[($3_1 + 56 | 0) >> 2] = $1_1;
       label$9 : {
        if ($1_1) {
         break label$9
        }
        $693();
        break label$7;
       }
       HEAP16[($3_1 + 74 | 0) >> 1] = 1;
       HEAP16[($3_1 + 72 | 0) >> 1] = $5_1;
       HEAP16[($3_1 + 66 | 0) >> 1] = 1;
       HEAP16[($3_1 + 64 | 0) >> 1] = $4_1;
       HEAP32[($3_1 + 60 | 0) >> 2] = $1_1;
       HEAP32[($3_1 + 68 | 0) >> 2] = $1_1 + $4_1 | 0;
       $823($1_1 | 0, HEAP32[(0 + 20900 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
       $823(HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(0 + 20888 | 0) >> 2] | 0 | 0, HEAPU16[($3_1 + 72 | 0) >> 1] | 0 | 0) | 0;
      }
      HEAP32[($3_1 + 32 | 0) >> 2] = 20832;
      HEAP32[($3_1 + 28 | 0) >> 2] = 20868;
      HEAP32[($3_1 + 24 | 0) >> 2] = 20844;
      HEAP32[($3_1 + 20 | 0) >> 2] = $0_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = 0;
      $1_1 = $736($0_1 | 0) | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
      label$10 : {
       if (!$1_1) {
        break label$10
       }
       $0_1 = $736($0_1 | 0) | 0;
       HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
       label$11 : {
        if (!$0_1) {
         break label$11
        }
        $694($3_1 | 0);
        break label$5;
       }
       $739(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
      }
      $0_1 = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$7
      }
      FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0]($0_1, HEAP32[($3_1 + 56 | 0) >> 2] | 0);
     }
     $815($3_1 | 0);
     $3_1 = 0;
    }
    label$12 : {
     $7_1 = $2_1 + 16 | 0;
     if ($7_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $7_1;
    }
    return $3_1 | 0;
   }
   $859(54471 | 0, 54311 | 0, 603 | 0);
   abort();
  }
  $859(54475 | 0, 54311 | 0, 604 | 0);
  abort();
 }
 
 function $693() {
  $862(54311 | 0, 618 | 0, 4 | 0) | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 692 | 0);
  }
  $738(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $738(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 3;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 658 | 0);
  }
  $739(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
  $739(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  label$3 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 56 | 0) >> 2] | 0);
  }
  $845($0_1 | 0, 96 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $696($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 672 | 0);
  }
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   }
   label$5 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   return;
  }
  $859(54520 | 0, 54311 | 0, 673 | 0);
  abort();
 }
 
 function $697($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (54296 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 96 | 0, $0_1 | 0, 54296 | 0, 54311 | 0, 681 | 0);
  }
  label$3 : {
   if ($1_1) {
    break label$3
   }
   $859(54520 | 0, 54311 | 0, 682 | 0);
   abort();
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  HEAP8[($1_1 + 4 | 0) >> 0] = $2_1;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $698($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $31_1 = 0, $34_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $6_1 = $0_1 + 60 | 0;
    $7_1 = 0;
    $8_1 = 0;
    label$5 : while (1) {
     $0_1 = $777($2_1 | 0) | 0;
     if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $31_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $34_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[$5_1 >> 2] = $34_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     if (($766($2_1 | 0, $0_1 | 0) | 0 | 0) != ($0_1 | 0)) {
      break label$3
     }
     $741($3_1 | 0, $6_1 | 0);
     if (!($755($3_1 | 0, $1_1 | 0, $5_1 | 0, $2_1 | 0) | 0)) {
      break label$3
     }
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) != ($4_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $7_1 = 1;
  }
  label$6 : {
   $10_1 = $5_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  return $7_1 | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $772($0_1 | 0) | 0;
  $2_1 = 0;
  $3_1 = $772($0_1 | 0) | 0;
  $4_1 = $772($0_1 | 0) | 0;
  label$1 : {
   if (($1_1 | 0) != (70 | 0)) {
    break label$1
   }
   if (($3_1 | 0) != (76 | 0)) {
    break label$1
   }
   if (($4_1 | 0) != (86 | 0)) {
    break label$1
   }
   if (($772($0_1 | 0) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   if (($772($0_1 | 0) | 0) >>> 0 > 15 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    $2_1 = $813(664 | 0) | 0;
    if ($2_1) {
     break label$4
    }
    $2_1 = 0;
    if (!($835(62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[$1_1 >> 2] = 664;
    $827(55548 | 0, $1_1 | 0);
    break label$3;
   }
   $845($2_1 | 0, 664 | 0, $2_1 | 0, 55487 | 0);
   HEAP32[($2_1 + 60 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $2_1;
   $691($1_1 + 8 | 0 | 0);
   $0_1 = $692($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   label$5 : {
    if (!$0_1) {
     break label$5
    }
    $697($0_1 | 0, $2_1 + 28 | 0 | 0, 8 | 0, 203 | 0);
    $697(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 8 | 0 | 0, 9 | 0, 203 | 0);
    $697(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, $2_1 + 48 | 0 | 0, 18 | 0, 203 | 0);
    break label$3;
   }
   $815($2_1 | 0);
   $2_1 = 0;
  }
  label$6 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    if ((HEAP32[$3_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$1
    }
   }
   $846($3_1 | 0, 664 | 0, $3_1 | 0, 55487 | 0, 55603 | 0, 339 | 0);
  }
  label$3 : {
   if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (18 | 0)) {
    break label$3
   }
   $705(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
  $735($1_1 | 0);
  HEAP8[($0_1 + 17 | 0) >> 0] = $2_1;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  return 0 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 664 | 0, $0_1 | 0, 55487 | 0, 55603 | 0, 388 | 0);
  }
  $696(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 8 | 0 | 0);
  $696(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $0_1 + 28 | 0 | 0);
  $695(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $845($0_1 | 0, 664 | 0, $0_1 | 0, 0 | 0);
  $815($0_1 | 0);
 }
 
 function $703($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $4_1 = 0, $10$hi = 0, $10_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $43_1 = 0, $45$hi = 0, $85$hi = 0;
  label$1 : {
   $4_1 = global$0 - 32 | 0;
   $8_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == (55487 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 664 | 0, $0_1 | 0, 55487 | 0, 55603 | 0, 447 | 0);
  }
  HEAP8[($0_1 + 84 | 0) >> 0] = 0;
  HEAP8[($0_1 + 76 | 0) >> 0] = 0;
  HEAP8[($0_1 + 68 | 0) >> 0] = 0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 0;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$5 : while (1) {
   label$6 : {
    if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$6
    }
    if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$6
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = 16384;
    i64toi32_i32$0 = $10$hi;
    HEAP32[($4_1 + 20 | 0) >> 2] = $10_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $0_1;
    $827(55934 | 0, $4_1 + 16 | 0 | 0);
   }
   label$7 : {
    $43_1 = $1_1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $45$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $45$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$4 = i64toi32_i32$2 + $10_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + $10$hi | 0;
    if (i64toi32_i32$4 >>> 0 < $10_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = $50($43_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 16384 | 0, $4_1 + 28 | 0 | 0) | 0;
    if (!$5_1) {
     break label$7
    }
    if (HEAP32[($4_1 + 28 | 0) >> 2] | 0) {
     break label$7
    }
    $6_1 = $756($5_1 | 0) | 0;
    label$8 : {
     if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$8
     }
     if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$8
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
     i64toi32_i32$5 = $10$hi;
     HEAP32[($4_1 + 4 | 0) >> 2] = $10_1;
     HEAP32[$4_1 >> 2] = $0_1;
     $827(55970 | 0, $4_1 | 0);
    }
    $797($2_1 | 0, $5_1 | 0);
    if (($681(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0) | 0 | 0) != ($6_1 | 0)) {
     break label$7
    }
    label$9 : {
     if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
      break label$9
     }
     if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
      break label$7
     }
    }
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = 0;
    $85$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$2 = $85$hi;
    i64toi32_i32$0 = $10_1 + $6_1 | 0;
    i64toi32_i32$4 = $10$hi + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < $6_1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$1 = 0;
    if ($10$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($10$hi | 0) == (i64toi32_i32$1 | 0) & $10_1 >>> 0 < 1048576 >>> 0 | 0) | 0) {
     continue label$5
    }
   }
   break label$5;
  };
  $694(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  label$10 : {
   label$11 : {
    if (HEAPU8[($0_1 + 24 | 0) >> 0] | 0) {
     break label$11
    }
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$11
    }
    $6_1 = 0;
    break label$10;
   }
   $6_1 = 0;
   $5_1 = $813(40 | 0) | 0;
   if (!$5_1) {
    break label$10
   }
   $214($5_1 | 0, 12 | 0);
   label$12 : {
    label$13 : {
     if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
      break label$13
     }
     $2_1 = $813(328 | 0) | 0;
     if (!$2_1) {
      break label$12
     }
     $218($2_1 | 0);
     HEAP32[($2_1 + 4 | 0) >> 2] = 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 12 | 0) >> 0] | 0;
     $3_1 = 0;
     label$14 : {
      $7_1 = ((HEAPU8[($0_1 + 25 | 0) >> 0] | 0) & 15 | 0) + -2 | 0;
      if ($7_1 >>> 0 > 5 >>> 0) {
       break label$14
      }
      $3_1 = HEAP32[(($7_1 << 2 | 0) + 56020 | 0) >> 2] | 0;
     }
     HEAP32[($2_1 + 28 | 0) >> 2] = 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     label$15 : {
      if (!(HEAPU8[($0_1 + 76 | 0) >> 0] | 0)) {
       break label$15
      }
      HEAP16[($2_1 + 28 | 0) >> 1] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
     }
     label$16 : {
      if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
       break label$16
      }
      HEAP16[($2_1 + 30 | 0) >> 1] = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     }
     HEAP32[$2_1 >> 2] = 0;
     $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($3_1 ? $3_1 : $5_1) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    }
    label$17 : {
     if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
      break label$17
     }
     $2_1 = $813(328 | 0) | 0;
     if (!$2_1) {
      break label$12
     }
     $218($2_1 | 0);
     $3_1 = 1;
     HEAP32[($2_1 + 4 | 0) >> 2] = 1;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU8[($0_1 + 32 | 0) >> 0] | 0;
     $6_1 = $0_1 + 45 | 0;
     HEAP8[($2_1 + 24 | 0) >> 0] = (HEAPU8[$6_1 >> 0] | 0) & 1 | 0 ? 2 : 1;
     HEAP8[($2_1 + 25 | 0) >> 0] = (HEAPU8[$6_1 >> 0] | 0) & 2 | 0 ? 16 : 8;
     HEAP32[($2_1 + 28 | 0) >> 2] = HEAPU16[((((HEAPU8[$6_1 >> 0] | 0) >>> 1 | 0) & 6 | 0) + 56010 | 0) >> 1] | 0;
     label$18 : {
      label$19 : {
       label$20 : {
        label$21 : {
         $6_1 = (HEAPU8[$6_1 >> 0] | 0) >>> 4 | 0;
         switch ($6_1 + -10 | 0 | 0) {
         case 4:
          break label$18;
         case 1:
         case 2:
         case 3:
          break label$19;
         case 0:
          break label$21;
         default:
          break label$20;
         };
        }
        $3_1 = 15;
        break label$18;
       }
       if (($6_1 | 0) == (2 | 0)) {
        break label$18
       }
      }
      $3_1 = 0;
     }
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($6_1 ? $6_1 : $5_1) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    }
    label$22 : {
     if (!(HEAPU8[($0_1 + 68 | 0) >> 0] | 0)) {
      break label$22
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     $6_1 = $5_1;
     break label$10;
    }
    HEAP32[($5_1 + 20 | 0) >> 2] = $704($1_1 | 0) | 0;
    $6_1 = $5_1;
    break label$10;
   }
   $217($0_1 | 0, $5_1 | 0);
  }
  label$23 : {
   $9_1 = $4_1 + 32 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $6_1 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $7$hi = 0, $8$hi = 0, $8_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 48 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $2_1 = 0;
  label$3 : {
   if ($60($0_1 | 0, $1_1 + 40 | 0 | 0, $1_1 + 32 | 0 | 0) | 0) {
    break label$3
   }
   $22_1 = $0_1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -4;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = $50($22_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 4 | 0, $1_1 + 28 | 0 | 0) | 0;
   if (!$3_1) {
    break label$3
   }
   $762($1_1 + 8 | 0 | 0, $3_1 | 0);
   $4_1 = $778($1_1 + 8 | 0 | 0) | 0;
   $735($3_1 | 0);
   $2_1 = 0;
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $8_1 = $4_1 + 4 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$3 = $8_1;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $18_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0) {
      $19_1 = 0
     } else {
      $19_1 = 1
     }
     $20_1 = $19_1;
    } else {
     $20_1 = 0
    }
    $18_1 = $20_1;
   }
   if ($18_1) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$5 = $8_1;
   i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$4 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
   $0_1 = $50($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $4_1 | 0, $1_1 + 28 | 0 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   $762($1_1 + 8 | 0 | 0, $0_1 | 0);
   $766($1_1 + 8 | 0 | 0, 4 | 0) | 0;
   $3_1 = $782($1_1 + 8 | 0 | 0) | 0;
   $4_1 = $772($1_1 + 8 | 0 | 0) | 0;
   $735($0_1 | 0);
   $2_1 = 0;
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$3
   }
   $2_1 = $4_1 << 24 | 0 | $3_1 | 0;
  }
  label$4 : {
   $6_1 = $1_1 + 48 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $2_1 | 0;
 }
 
 function $705($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $8_1 = 0, $11_1 = 0.0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = global$0 - 144 | 0;
   $9_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  $762($2_1 + 128 | 0 | 0, $1_1 | 0);
  label$3 : {
   $3_1 = $0_1 + 376 | 0;
   if (!($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0)) {
    break label$3
   }
   $4_1 = $0_1 + 96 | 0;
   $5_1 = $0_1 + 100 | 0;
   $1_1 = $0_1 + 232 | 0;
   $6_1 = $0_1 + 388 | 0;
   $7_1 = $0_1 + 384 | 0;
   label$4 : while (1) {
    label$5 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) == (2 | 0)) {
      break label$5
     }
     if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 116 | 0) >> 2] = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
     HEAP32[($2_1 + 112 | 0) >> 2] = $0_1;
     $827(55684 | 0, $2_1 + 112 | 0 | 0);
     break label$3;
    }
    label$6 : {
     if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$6
     }
     if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     HEAP32[($2_1 + 96 | 0) >> 2] = $6_1;
     $827(55718 | 0, $2_1 + 96 | 0 | 0);
    }
    if (!($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0)) {
     break label$3
    }
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        $8_1 = HEAP32[$3_1 >> 2] | 0;
        switch ($8_1 + -8 | 0 | 0) {
        case 1:
         break label$7;
        case 2:
         break label$8;
        case 0:
         break label$9;
        default:
         break label$10;
        };
       }
       if (($8_1 | 0) != (3 | 0)) {
        break label$7
       }
      }
      if (!($707($2_1 + 128 | 0 | 0, 2 | 0, $4_1 | 0) | 0)) {
       break label$3
      }
      label$11 : while (1) {
       label$12 : {
        if (!(HEAP32[$4_1 >> 2] | 0)) {
         break label$12
        }
        if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$12
        }
        if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$12
        }
        HEAP32[($2_1 + 68 | 0) >> 2] = $5_1;
        HEAP32[($2_1 + 64 | 0) >> 2] = $6_1;
        $827(55741 | 0, $2_1 + 64 | 0 | 0);
       }
       if (!($706($2_1 + 128 | 0 | 0, $1_1 | 0) | 0)) {
        break label$7
       }
       $8_1 = HEAP32[$1_1 >> 2] | 0;
       if (($8_1 | 0) == (9 | 0)) {
        break label$7
       }
       label$13 : {
        if ($708($8_1 | 0) | 0) {
         break label$13
        }
        if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
        HEAP32[($2_1 + 48 | 0) >> 2] = $0_1;
        $827(55756 | 0, $2_1 + 48 | 0 | 0);
        break label$3;
       }
       label$14 : {
        if ($824($6_1 | 0, 55730 | 0, 11 | 0) | 0) {
         break label$14
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        label$15 : {
         if ($824($5_1 | 0, 55788 | 0, 9 | 0) | 0) {
          break label$15
         }
         HEAP8[($0_1 + 68 | 0) >> 0] = 1;
         label$16 : {
          label$17 : {
           $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3] * 1.0e3;
           if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
            break label$17
           }
           $8_1 = ~~$11_1 >>> 0;
           break label$16;
          }
          $8_1 = 0;
         }
         HEAP32[($0_1 + 72 | 0) >> 2] = $8_1;
         if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
         $827(55810 | 0, $2_1 | 0);
         break label$14;
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        label$18 : {
         if ($824($5_1 | 0, 55797 | 0, 6 | 0) | 0) {
          break label$18
         }
         HEAP8[($0_1 + 76 | 0) >> 0] = 1;
         label$19 : {
          label$20 : {
           $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3];
           if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
            break label$20
           }
           $8_1 = ~~$11_1 >>> 0;
           break label$19;
          }
          $8_1 = 0;
         }
         HEAP32[($0_1 + 80 | 0) >> 2] = $8_1;
         if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$14
         }
         if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$14
         }
         HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
         $827(55822 | 0, $2_1 + 16 | 0 | 0);
         break label$14;
        }
        if (HEAP32[$1_1 >> 2] | 0) {
         break label$14
        }
        if ($824($5_1 | 0, 55803 | 0, 7 | 0) | 0) {
         break label$14
        }
        HEAP8[($0_1 + 84 | 0) >> 0] = 1;
        label$21 : {
         label$22 : {
          $11_1 = +HEAPF64[($0_1 + 240 | 0) >> 3];
          if (!($11_1 < 4294967296.0 & $11_1 >= 0.0 | 0)) {
           break label$22
          }
          $8_1 = ~~$11_1 >>> 0;
          break label$21;
         }
         $8_1 = 0;
        }
        HEAP32[($0_1 + 88 | 0) >> 2] = $8_1;
        if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$14
        }
        if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$14
        }
        HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
        $827(55831 | 0, $2_1 + 32 | 0 | 0);
       }
       if ($707($2_1 + 128 | 0 | 0, 2 | 0, $4_1 | 0) | 0) {
        continue label$11
       }
       break label$3;
      };
     }
     $8_1 = 0;
     if (!(HEAP32[$7_1 >> 2] | 0)) {
      break label$7
     }
     label$23 : while (1) {
      if (!($706($2_1 + 128 | 0 | 0, $1_1 | 0) | 0)) {
       break label$7
      }
      label$24 : {
       if (!($708(HEAP32[$1_1 >> 2] | 0 | 0) | 0)) {
        break label$24
       }
       $8_1 = $8_1 + 1 | 0;
       if ($8_1 >>> 0 >= (HEAP32[$7_1 >> 2] | 0) >>> 0) {
        break label$7
       }
       continue label$23;
      }
      break label$23;
     };
     if (!($834(62408 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = $0_1;
     $827(55841 | 0, $2_1 + 80 | 0 | 0);
     break label$3;
    }
    if ($706($2_1 + 128 | 0 | 0, $3_1 | 0) | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$25 : {
   $10_1 = $2_1 + 144 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $30_1 = 0, $51_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $3_1 = 0;
  label$3 : {
   $4_1 = $764($0_1 | 0) | 0;
   if (($4_1 | 0) == (-1 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[$2_1 >> 2] = $4_1;
    $827(55877 | 0, $2_1 | 0);
   }
   HEAP32[$1_1 >> 2] = $4_1;
   label$5 : {
    label$6 : {
     switch ($4_1 | 0) {
     case 0:
      i64toi32_i32$0 = $780($0_1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $30_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $30_1;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      break label$5;
     case 1:
      HEAP8[($1_1 + 8 | 0) >> 0] = ($764($0_1 | 0) | 0 | 0) != (0 | 0);
      break label$5;
     case 2:
     case 12:
      if ($707($0_1 | 0, $4_1 | 0, $1_1 + 8 | 0 | 0) | 0) {
       break label$5
      }
      break label$3;
     case 7:
      HEAP16[($1_1 + 8 | 0) >> 1] = $777($0_1 | 0) | 0;
      break label$5;
     case 8:
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     case 10:
      HEAP32[($1_1 + 8 | 0) >> 2] = $778($0_1 | 0) | 0;
      break label$5;
     case 3:
     case 4:
     case 5:
     case 6:
     case 9:
      break label$5;
     case 11:
      break label$6;
     default:
      break label$3;
     };
    }
    i64toi32_i32$1 = $780($0_1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $51_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $51_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 16 | 0) >> 2] = (($777($0_1 | 0) | 0) << 16 | 0) >> 16 | 0;
   }
   $3_1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0);
  }
  label$13 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (($1_1 | 0) != (2 | 0)) {
     break label$4
    }
    $1_1 = $777($0_1 | 0) | 0;
    break label$3;
   }
   $1_1 = $778($0_1 | 0) | 0;
  }
  $4_1 = 0;
  label$5 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$5
   }
   HEAP32[$2_1 >> 2] = $1_1;
   label$6 : {
    label$7 : {
     if ($1_1 >>> 0 < 128 >>> 0) {
      break label$7
     }
     $4_1 = 0;
     label$8 : {
      if ((HEAP8[(0 + 62408 | 0) >> 0] | 0 | 0) > (2 | 0)) {
       break label$8
      }
      if (!($828(2 | 0, 62408 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$8
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = 128;
      HEAP32[$3_1 >> 2] = $1_1;
      $827(55907 | 0, $3_1 | 0);
     }
     HEAP8[($2_1 + 131 | 0) >> 0] = 0;
     if (($768($0_1 | 0, $2_1 + 4 | 0 | 0, 127 | 0) | 0 | 0) != (127 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + -127 | 0;
     if (($766($0_1 | 0, $1_1 | 0) | 0 | 0) == ($1_1 | 0)) {
      break label$6
     }
     break label$5;
    }
    $4_1 = 0;
    $2_1 = $2_1 + 4 | 0;
    HEAP8[($2_1 + $1_1 | 0) >> 0] = 0;
    if (($768($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$5
    }
   }
   $4_1 = 1;
  }
  label$9 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 > 12 >>> 0) {
    break label$1
   }
   return (6375 >>> ($0_1 & 8191 | 0) | 0) & 1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return !(HEAPU8[$0_1 >> 0] | 0) | 0;
 }
 
 function $710($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = 2;
  label$1 : {
   $5_1 = $2_1 << 2 | 0;
   $2_1 = $5_1 + 8 | 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) >= ((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0 | 0)) {
    break label$1
   }
   $6_1 = $0_1 + $2_1 | 0;
   $4_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP16[$3_1 >> 1] = ($4_1 << 24 | 0 | (($4_1 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0;
   $0_1 = $5_1 + $0_1 | 0;
   HEAP16[($3_1 + 2 | 0) >> 1] = ((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0;
   $4_1 = 0;
  }
  return $4_1 | 0;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  return (((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -9 | 0 | 0) / (4 | 0) | 0) & 255 | 0 | 0;
 }
 
 function $712($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 10 | 0;
  $3_1 = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  return $2_1 >>> 0 <= $3_1 >>> 0 & (((HEAPU8[$0_1 >> 0] | 0 | 0) == (2 | 0) & ($3_1 + 1 | 0 | 0) < ($1_1 | 0) | 0) & ($2_1 | 0) < ($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) | 0 | 0;
 }
 
 function $714($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $4_1 = 0;
  label$3 : {
   if (($1_1 | 0) < (13 | 0)) {
    break label$3
   }
   label$4 : {
    $5_1 = $1_1 + -12 | 0;
    $1_1 = ((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0;
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    $4_1 = 0;
    if (!($834(62424 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$3_1 >> 2] = $1_1;
    $827(56044 | 0, $3_1 | 0);
    break label$3;
   }
   $4_1 = $719($0_1 + 12 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  label$5 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 12 | 0;
   if (($3_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $4_1 = (((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = $2_1 + 1 | 0;
    $5_1 = $3_1 + $0_1 | 0;
    $3_1 = ($3_1 + (((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($5_1 + 4 | 0) >> 0] | 0) | 0) | 0) + 5 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $716($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $1_1 = $717($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   return 2 | 0;
  }
  $0_1 = $0_1 + $1_1 | 0;
  HEAP8[$3_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
  HEAP16[($3_1 + 2 | 0) >> 1] = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 7936 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  return 0 | 0;
 }
 
 function $717($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = (((HEAPU8[($0_1 + 10 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) | 0) + 12 | 0;
  label$1 : {
   if (($2_1 | 0) >= (1 | 0)) {
    break label$1
   }
   return $3_1 | 0;
  }
  $4_1 = 0;
  label$2 : while (1) {
   label$3 : {
    if (($3_1 | 0) < ($1_1 | 0)) {
     break label$3
    }
    return -1 | 0;
   }
   $5_1 = -1;
   label$4 : {
    if (($3_1 | 0) >= ((((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0) + -1 | 0 | 0)) {
     break label$4
    }
    $5_1 = $3_1 + $0_1 | 0;
    $3_1 = ($3_1 + (((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($5_1 + 4 | 0) >> 0] | 0) | 0) | 0) + 5 | 0;
    $5_1 = $3_1;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
   }
   break label$2;
  };
  return $5_1 | 0;
 }
 
 function $718($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0;
  label$1 : {
   $2_1 = $717($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) != (-1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $4_1 = 0;
  label$2 : {
   $5_1 = $2_1 + 5 | 0;
   $1_1 = $1_1 - $5_1 | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$2
   }
   $21_1 = $0_1 + $5_1 | 0;
   $0_1 = $2_1 + $0_1 | 0;
   $0_1 = ((HEAPU8[($0_1 + 3 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 4 | 0) >> 0] | 0) | 0;
   $4_1 = $719($21_1 | 0, (($0_1 | 0) > ($1_1 | 0) ? $1_1 : $0_1) | 0, $3_1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $719($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   label$2 : {
    label$3 : while (1) {
     if (($4_1 | 0) == ($2_1 | 0)) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     $3_1 = ($3_1 + (HEAPU8[(($3_1 + $0_1 | 0) + 1 | 0) >> 0] | 0) | 0) + 2 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $3_1 = $0_1 + $3_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP8[$1_1 >> 0] = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[($1_1 + 1 | 0) >> 0] = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) >>> 7 | 0;
  HEAP8[($1_1 + 2 | 0) >> 0] = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) >>> 6 | 0) & 1 | 0;
  $2_1 = ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 8 | 0) & 3840 | 0 | (HEAPU8[($0_1 + 2 | 0) >> 0] | 0) | 0;
  HEAP16[($1_1 + 4 | 0) >> 1] = $2_1;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0 | ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP16[($1_1 + 6 | 0) >> 1] = ($3_1 << 24 | 0 | (($3_1 << 8 | 0) & 16711680 | 0) | 0) >>> 16 | 0;
  HEAP8[($1_1 + 8 | 0) >> 0] = ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) >>> 1 | 0) & 31 | 0;
  HEAP8[($1_1 + 9 | 0) >> 0] = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 1 | 0;
  HEAP8[($1_1 + 10 | 0) >> 0] = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
  HEAP8[($1_1 + 11 | 0) >> 0] = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
  $4_1 = ($2_1 + $0_1 | 0) + -3 | 0;
  $0_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
 }
 
 function $721($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $10_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = 1;
  label$1 : {
   label$2 : {
    if ($4_1) {
     break label$2
    }
    $6_1 = 1;
    break label$1;
   }
   $7_1 = 0;
   $8_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $9_1 = HEAPU8[($3_1 + $7_1 | 0) >> 0] | 0;
     $10_1 = HEAPU8[($1_1 + $7_1 | 0) >> 0] | 0;
     $11_1 = HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0;
     if ((($9_1 | $10_1 | 0) & 255 | 0 | 0) == (($11_1 | $10_1 | 0) & 255 | 0 | 0)) {
      break label$4
     }
     $6_1 = 0;
     break label$1;
    }
    $6_1 = 1;
    $10_1 = HEAPU8[($2_1 + $7_1 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      if (!($8_1 & 1 | 0)) {
       break label$6
      }
      $8_1 = 1;
      break label$5;
     }
     $12_1 = $10_1 & 255 | 0;
     $8_1 = ($12_1 | 0) != (255 | 0);
     $5_1 = $5_1 & ($12_1 | 0) == (255 | 0) | 0;
    }
    $5_1 = $5_1 | ((($11_1 ^ $9_1 | 0) & ($10_1 ^ -1 | 0) | 0) & 255 | 0 | 0) != (0 | 0) | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($4_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $5_1 & $6_1 | 0 | 0;
 }
 
 function $722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $813($1_1 | 0) | 0 | 0;
 }
 
 function $723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $815($1_1 | 0);
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $8_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 79 | 0);
  }
  label$5 : {
   label$6 : {
    $1_1 = ($1_1 + 3 | 0) & -4 | 0;
    if ($1_1 >>> 0 > 262123 >>> 0) {
     break label$6
    }
    $1_1 = $1_1 + 16 | 0;
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       if (!$0_1) {
        break label$9
       }
       if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
        break label$8
       }
      }
      $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 89 | 0);
     }
     label$10 : {
      label$11 : {
       label$12 : {
        $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if ($3_1 >>> 0 < $1_1 >>> 0) {
         break label$12
        }
        $3_1 = $3_1 - $1_1 | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
        $3_1 = ($0_1 + $3_1 | 0) + 40 | 0;
        label$13 : {
         $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break label$13
         }
         HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
        }
        $5_1 = $0_1 + 20 | 0;
        label$14 : {
         if (HEAP32[($0_1 + 24 | 0) >> 2] | 0) {
          break label$14
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        HEAP32[$3_1 >> 2] = $4_1;
        HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
        HEAP16[($3_1 + 12 | 0) >> 1] = $1_1 >>> 2 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = 0;
        $0_1 = (($3_1 - $0_1 | 0) >>> 2 | 0) & 16383 | 0;
        break label$11;
       }
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if ($3_1 >>> 0 < $1_1 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = $3_1 - $1_1 | 0;
       $6_1 = $0_1 + 24 | 0;
       $5_1 = HEAP32[$6_1 >> 2] | 0;
       $7_1 = $0_1 + 20 | 0;
       $4_1 = $0_1 + ((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $3_1 | 0) | 0;
       $3_1 = $4_1 + 40 | 0;
       HEAP32[($5_1 ? $5_1 : $7_1) >> 2] = $3_1;
       HEAP32[($4_1 + 44 | 0) >> 2] = $5_1;
       HEAP32[$3_1 >> 2] = 0;
       HEAP32[($4_1 + 48 | 0) >> 2] = $7_1;
       HEAP32[$6_1 >> 2] = $3_1;
       HEAP16[($4_1 + 52 | 0) >> 1] = $1_1 >>> 2 | 0;
       $0_1 = ($3_1 - $0_1 | 0) >>> 2 | 0;
      }
      HEAP16[($3_1 + 14 | 0) >> 1] = $0_1;
      $0_1 = $3_1 + 16 | 0;
      break label$5;
     }
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$7
     }
     break label$7;
    };
    $0_1 = 0;
    break label$5;
   }
   $0_1 = 0;
   if (!($834(62440 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = 262124;
   HEAP32[$2_1 >> 2] = $1_1;
   $827(56179 | 0, $2_1 | 0);
  }
  label$15 : {
   $9_1 = $2_1 + 16 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $0_1 | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 132 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 134 | 0);
   }
   label$6 : {
    if (!($726($0_1 | 0, $1_1 | 0) | 0)) {
     break label$6
    }
    return 1 | 0;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
  return 0 | 0;
 }
 
 function $726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (($0_1 + 40 | 0) >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $1_1 = 1;
    if ((($0_1 + (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0) + 24 | 0) >>> 0 >= $0_1 >>> 0) {
     break label$1
    }
   }
   $1_1 = 0;
  }
  return $1_1 | 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, $9_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 147 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if (!($725($0_1 | 0, $1_1 | 0) | 0)) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           if (!($726($0_1 | 0, $1_1 | 0) | 0)) {
            break label$11
           }
           $2_1 = $1_1 + -16 | 0;
           $3_1 = $1_1 + -2 | 0;
           if (((($2_1 - $0_1 | 0) >>> 2 | 0) & 16383 | 0 | 0) != (HEAPU16[$3_1 >> 1] | 0 | 0)) {
            break label$8
           }
           label$12 : {
            label$13 : {
             $4_1 = $1_1 + -12 | 0;
             $5_1 = HEAP32[$4_1 >> 2] | 0;
             if (!$5_1) {
              break label$13
             }
             if ($726($0_1 | 0, $5_1 | 0) | 0) {
              break label$12
             }
             $859(56298 | 0, 56106 | 0, 161 | 0);
             abort();
            }
            if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$7
            }
           }
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                $6_1 = HEAP32[$2_1 >> 2] | 0;
                if (!$6_1) {
                 break label$18
                }
                if ($726($0_1 | 0, $6_1 | 0) | 0) {
                 break label$17
                }
                $859(56449 | 0, 56106 | 0, 163 | 0);
                abort();
               }
               label$19 : {
                $7_1 = $0_1 + 24 | 0;
                if ((HEAP32[$7_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                 break label$19
                }
                HEAP16[$3_1 >> 1] = 0;
                $3_1 = $0_1 + 20 | 0;
                $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
                break label$16;
               }
               $859(56531 | 0, 56106 | 0, 164 | 0);
               abort();
              }
              $7_1 = $0_1 + 24 | 0;
              $9_1 = HEAP32[$7_1 >> 2] | 0;
              HEAP16[$3_1 >> 1] = 0;
              $3_1 = $0_1 + 20 | 0;
              $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
              if (($9_1 | 0) != ($2_1 | 0)) {
               break label$15
              }
             }
             label$20 : {
              if (!$5_1) {
               break label$20
              }
              $2_1 = (($0_1 + $8_1 | 0) - ($5_1 + ((HEAPU16[($5_1 + 12 | 0) >> 1] | 0) << 2 | 0) | 0) | 0) + 40 | 0;
              if ($2_1 >>> 0 < (((HEAPU16[($1_1 + -4 | 0) >> 1] | 0) << 2 | 0) + (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) >>> 0) {
               break label$6
              }
              HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
              break label$14;
             }
             HEAP32[($0_1 + 16 | 0) >> 2] = $8_1;
             HEAP32[($0_1 + 12 | 0) >> 2] = 0;
             break label$14;
            }
            if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$14
            }
            $2_1 = ($6_1 - $0_1 | 0) + -40 | 0;
            if ($2_1 >>> 0 < (((HEAPU16[($1_1 + -4 | 0) >> 1] | 0) << 2 | 0) + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >>> 0) {
             break label$5
            }
            HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
           }
           if (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >>> 0 > $8_1 >>> 0) {
            break label$4
           }
           if ((HEAP32[($1_1 + -8 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
            break label$3
           }
           label$21 : {
            label$22 : {
             if (!$6_1) {
              break label$22
             }
             HEAP32[($6_1 + 4 | 0) >> 2] = $5_1;
             $5_1 = HEAP32[$4_1 >> 2] | 0;
             break label$21;
            }
            HEAP32[$7_1 >> 2] = $5_1;
           }
           HEAP32[($5_1 ? $5_1 : $3_1) >> 2] = $6_1;
           return;
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($0_1) {
           continue label$10
          }
          break label$10;
         };
         $859(56821 | 0, 56106 | 0, 201 | 0);
         abort();
        }
        $859(56228 | 0, 56106 | 0, 149 | 0);
        abort();
       }
       $859(56258 | 0, 56106 | 0, 159 | 0);
       abort();
      }
      $859(56380 | 0, 56106 | 0, 162 | 0);
      abort();
     }
     $859(56599 | 0, 56106 | 0, 171 | 0);
     abort();
    }
    $859(56657 | 0, 56106 | 0, 181 | 0);
    abort();
   }
   $859(56715 | 0, 56106 | 0, 188 | 0);
   abort();
  }
  $859(56766 | 0, 56106 | 0, 195 | 0);
  abort();
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   $3_1 = ($1_1 + 3 | 0) & -4 | 0;
   $4_1 = $3_1 + 40 | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, $4_1) | 0;
   label$4 : {
    if ((HEAP8[(0 + 62440 | 0) >> 0] | 0 | 0) > (2 | 0)) {
     break label$4
    }
    if (!($828(2 | 0, 62440 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 20 | 0) >> 2] = 16;
    HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
    $827(56829 | 0, $2_1 + 16 | 0 | 0);
   }
   label$5 : {
    label$6 : {
     if ($1_1) {
      break label$6
     }
     $1_1 = 0;
     if (!($835(62440 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = $4_1;
     $827(56880 | 0, $2_1 | 0);
     break label$5;
    }
    $845($1_1 | 0, 40 | 0, $1_1 + 36 | 0 | 0, 56096 | 0);
    HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 4 | 0) >> 2] = 210;
    HEAP32[$1_1 >> 2] = 211;
   }
   label$7 : {
    $6_1 = $2_1 + 32 | 0;
    if ($6_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $6_1;
   }
   return $1_1 | 0;
  }
  $859(56823 | 0, 56106 | 0, 221 | 0);
  abort();
 }
 
 function $729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $727($0_1 | 0, $1_1 | 0);
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $724($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 249 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) == (56096 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 56096 | 0, 56106 | 0, 251 | 0);
   }
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $845($0_1 | 0, 40 | 0, $0_1 + 36 | 0 | 0, 0 | 0);
   FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
   $0_1 = $1_1;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, 72) | 0;
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + 68 | 0;
  $845($2_1 | 0, 72 | 0, $3_1 | 0, 56928 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = $809($0_1 | 0, Math_imul($1_1, 3) >>> 2 | 0 | 0, 60 | 0) | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   $1_1 = $728($0_1 | 0, Math_imul($1_1 >>> 2 | 0, 60) | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    $822($2_1 + 12 | 0 | 0, 0 | 0, 56 | 0) | 0;
    return $2_1 | 0;
   }
   $812(HEAP32[$2_1 >> 2] | 0 | 0);
  }
  $845($2_1 | 0, 72 | 0, $3_1 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0]($0_1, $2_1);
  return 0 | 0;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 175 | 0);
  }
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $731(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $812(HEAP32[$0_1 >> 2] | 0 | 0);
  $845($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$4
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 238 | 0);
    }
    $1_1 = (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) + 1 | 0;
    HEAP16[($0_1 + 4 | 0) >> 1] = $1_1;
    if (($1_1 & 65535 | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
    return;
   }
   $859(57033 | 0, 56959 | 0, 235 | 0);
   abort();
  }
  $859(57038 | 0, 56959 | 0, 239 | 0);
  abort();
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (!$0_1) {
           break label$8
          }
          label$9 : {
           label$10 : {
            $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
            if (!$1_1) {
             break label$10
            }
            if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
             break label$9
            }
           }
           $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 253 | 0);
          }
          $2_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
          if (!$2_1) {
           break label$7
          }
          $2_1 = $2_1 + -1 | 0;
          HEAP16[($0_1 + 4 | 0) >> 1] = $2_1;
          label$11 : {
           if ($2_1 & 65535 | 0) {
            break label$11
           }
           $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$6
           }
           label$12 : {
            $2_1 = HEAP32[$2_1 >> 2] | 0;
            if (!$2_1) {
             break label$12
            }
            $3_1 = $0_1 + 24 | 0;
            $4_1 = 0;
            label$13 : {
             if (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) {
              break label$13
             }
             $4_1 = Math_imul(HEAPU16[($0_1 + 8 | 0) >> 1] | 0, 12);
            }
            FUNCTION_TABLE[$2_1]($0_1, $3_1 + $4_1 | 0);
            if (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) {
             break label$5
            }
           }
           label$14 : {
            label$15 : {
             switch (HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | 0) {
             case 1:
              $735(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
              break label$14;
             default:
              $859(57099 | 0, 56959 | 0, 276 | 0);
              abort();
             case 0:
              break label$15;
             };
            }
            $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
            if (!$4_1) {
             break label$14
            }
            $3_1 = $0_1 + 24 | 0;
            $5_1 = $3_1 + ($4_1 << 3 | 0) | 0;
            $2_1 = 0;
            label$18 : while (1) {
             HEAP32[($3_1 + ($2_1 << 3 | 0) | 0) >> 2] = 0;
             $2_1 = $2_1 + 1 | 0;
             if ($2_1 >>> 0 < $4_1 >>> 0) {
              continue label$18
             }
             break label$18;
            };
            if (!$4_1) {
             break label$14
            }
            $2_1 = 0;
            label$19 : while (1) {
             $3_1 = HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
             if (!$3_1) {
              break label$4
             }
             label$20 : {
              if (($3_1 | 0) == ($0_1 | 0)) {
               break label$20
              }
              $735($3_1 | 0);
              $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
             }
             $2_1 = $2_1 + 1 | 0;
             if ($2_1 >>> 0 < ($4_1 & 65535 | 0) >>> 0) {
              continue label$19
             }
             break label$19;
            };
           }
           if (HEAPU16[($0_1 + 4 | 0) >> 1] | 0) {
            break label$3
           }
           $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$2
           }
           HEAP32[($1_1 + 12 | 0) >> 2] = $2_1 + -1 | 0;
           $2_1 = $1_1 + 20 | 0;
           HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
           HEAP32[($0_1 + 20 | 0) >> 2] = 0;
           HEAP8[($0_1 + 6 | 0) >> 0] = 191;
           if (HEAP32[$0_1 >> 2] | 0) {
            break label$1
           }
           label$21 : {
            switch ((HEAPU8[($0_1 + 7 | 0) >> 0] | 0) + -160 | 0 | 0) {
            case 0:
             HEAP8[($0_1 + 7 | 0) >> 0] = 0;
             $2_1 = $1_1 + 36 | 0;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
             $808(HEAP32[$1_1 >> 2] | 0 | 0, $0_1 | 0);
             return;
            case 1:
             HEAP8[($0_1 + 7 | 0) >> 0] = 0;
             $2_1 = $1_1 + 40 | 0;
             HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
             $727(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0);
             return;
            default:
             $859(57099 | 0, 56959 | 0, 316 | 0);
             abort();
            case 2:
             break label$21;
            };
           }
           HEAP8[($0_1 + 7 | 0) >> 0] = 0;
           $2_1 = $1_1 + 44 | 0;
           HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
           $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
           FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
          }
          return;
         }
         $859(57033 | 0, 56959 | 0, 249 | 0);
         abort();
        }
        $859(57056 | 0, 56959 | 0, 256 | 0);
        abort();
       }
       $859(57072 | 0, 56959 | 0, 263 | 0);
       abort();
      }
      $859(57082 | 0, 56959 | 0, 268 | 0);
      abort();
     }
     $859(57101 | 0, 56959 | 0, 290 | 0);
     abort();
    }
    $859(57082 | 0, 56959 | 0, 297 | 0);
    abort();
   }
   $859(57111 | 0, 56959 | 0, 298 | 0);
   abort();
  }
  $859(57138 | 0, 56959 | 0, 303 | 0);
  abort();
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 332 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, 216) | 0;
   if ($1_1) {
    break label$3
   }
   return 0 | 0;
  }
  $845($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56911 | 0);
  HEAP32[$1_1 >> 2] = $0_1;
  $737($1_1 | 0);
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP16[($1_1 + 6 | 0) >> 1] = 0;
  return $1_1 | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  HEAP16[($0_1 + 4 | 0) >> 1] = 16;
  HEAP32[($0_1 + 16 | 0) >> 2] = $0_1 + 152 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $0_1 + 24 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 351 | 0);
  }
  label$3 : {
   $1_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
   if (!$1_1) {
    break label$3
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$4 : while (1) {
    label$5 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$3_1) {
      break label$5
     }
     $735($3_1 | 0);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 372 | 0);
  }
  label$3 : {
   label$4 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$3
    }
   }
   $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 374 | 0);
  }
  $738($0_1 | 0);
  $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$5 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($0_1 + 24 | 0 | 0)) {
    break label$5
   }
   FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $2_1);
  }
  $845($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 437 | 0);
  }
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $40_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 445 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    label$5 : {
     label$6 : {
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
      $3_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       break label$6
      }
      if (!($742($0_1 | 0) | 0)) {
       break label$5
      }
      $3_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
     }
     $2_1 = $2_1 & 65535 | 0;
     if ($2_1 >>> 0 >= ($3_1 & 65535 | 0) >>> 0) {
      break label$3
     }
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $40_1 = i64toi32_i32$0;
     i64toi32_i32$0 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $40_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
     HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = 0;
     $1_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
     HEAP16[($0_1 + 6 | 0) >> 1] = $2_1 + 1 | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    }
    return;
   }
   $859(57176 | 0, 56959 | 0, 446 | 0);
   abort();
  }
  $859(57180 | 0, 56959 | 0, 453 | 0);
  abort();
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $1_1 = global$0 - 32 | 0;
   $7_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 405 | 0);
  }
  label$5 : {
   label$6 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$2_1) {
     break label$6
    }
    if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$5
    }
   }
   $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 407 | 0);
  }
  $3_1 = HEAP16[($0_1 + 4 | 0) >> 1] | 0;
  $4_1 = $3_1 & 65535 | 0;
  $5_1 = $4_1 << 1 | 0;
  label$7 : {
   label$8 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$8
    }
    $2_1 = 0;
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$1_1 >> 2] = $0_1;
    $827(58686 | 0, $1_1 | 0);
    break label$7;
   }
   label$9 : {
    $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $6_1 = Math_imul($4_1, 24);
    $3_1 = FUNCTION_TABLE[HEAP32[$3_1 >> 2] | 0]($3_1, $6_1) | 0;
    if ($3_1) {
     break label$9
    }
    $2_1 = 0;
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$7
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
    $827(58746 | 0, $1_1 + 16 | 0 | 0);
    break label$7;
   }
   $823($3_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 << 3 | 0 | 0) | 0;
   $6_1 = $3_1 + ($4_1 << 4 | 0) | 0;
   $823($6_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $4_1 << 2 | 0 | 0) | 0;
   label$10 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($0_1 + 24 | 0 | 0)) {
     break label$10
    }
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $4_1);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
   HEAP16[($0_1 + 4 | 0) >> 1] = $5_1;
   $2_1 = 1;
  }
  label$11 : {
   $8_1 = $1_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 467 | 0);
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  label$5 : {
   if ($2_1 >>> 0 < 65536 >>> 0) {
    break label$5
   }
   label$6 : while (1) {
    HEAP32[($3_1 + 12 | 0) >> 2] = 131068;
    $741($0_1 | 0, $3_1 + 8 | 0 | 0);
    $1_1 = $1_1 + 65532 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    $2_1 = $2_1 + -65532 | 0;
    if ($2_1 >>> 0 >= 65536 >>> 0) {
     continue label$6
    }
    break label$6;
   };
  }
  HEAP16[($3_1 + 14 | 0) >> 1] = 1;
  HEAP16[($3_1 + 12 | 0) >> 1] = $2_1;
  $741($0_1 | 0, $3_1 + 8 | 0 | 0);
  label$7 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $100_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 498 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!$1_1) {
       break label$6
      }
      label$7 : {
       label$8 : {
        $2_1 = HEAP32[$0_1 >> 2] | 0;
        if (!$2_1) {
         break label$8
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$7
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 500 | 0);
      }
      label$9 : {
       label$10 : {
        $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$10
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$9
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 501 | 0);
      }
      $3_1 = $1_1;
      label$11 : {
       if (!(HEAPU8[($3_1 + 6 | 0) >> 0] | 0)) {
        break label$11
       }
       $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      }
      label$12 : {
       label$13 : {
        $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$13
        }
        if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
         break label$12
        }
       }
       $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 503 | 0);
      }
      $2_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
      $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
      if ($2_1 >>> 0 > $4_1 >>> 0) {
       break label$5
      }
      $5_1 = $3_1 + 24 | 0;
      $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
      $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0;
      $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $9_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
      label$14 : {
       label$15 : while (1) {
        if (!$9_1) {
         break label$14
        }
        label$16 : {
         if ($2_1 >>> 0 >= $4_1 >>> 0) {
          break label$16
         }
         $3_1 = (HEAPU16[($1_1 + 4 | 0) >> 1] | 0) + 1 | 0;
         HEAP16[($1_1 + 4 | 0) >> 1] = $3_1;
         if (($3_1 & 65535 | 0 | 0) != ($3_1 | 0)) {
          break label$4
         }
         HEAP32[$7_1 >> 2] = $1_1;
         $3_1 = HEAPU16[($5_1 + 4 | 0) >> 1] | 0;
         i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
         $100_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $6_1;
         HEAP32[i64toi32_i32$0 >> 2] = $100_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         $6_1 = i64toi32_i32$0 + 8 | 0;
         $5_1 = $5_1 + 8 | 0;
         $7_1 = $7_1 + 4 | 0;
         $8_1 = $8_1 + $3_1 | 0;
         continue label$15;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
        HEAP16[($0_1 + 6 | 0) >> 1] = $2_1;
        if (!($742($0_1 | 0) | 0)) {
         break label$14
        }
        $3_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         break label$3
        }
        $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0;
        $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0;
        $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
        if ($3_1 >>> 0 < $4_1 >>> 0) {
         continue label$15
        }
        break label$15;
       };
       $859(57180 | 0, 56959 | 0, 547 | 0);
       abort();
      }
      HEAP16[($0_1 + 6 | 0) >> 1] = $2_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
      return;
     }
     $859(57033 | 0, 56959 | 0, 499 | 0);
     abort();
    }
    $859(57202 | 0, 56959 | 0, 516 | 0);
    abort();
   }
   $859(57038 | 0, 56959 | 0, 526 | 0);
   abort();
  }
  $859(57225 | 0, 56959 | 0, 546 | 0);
  abort();
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 562 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if (($2_1 | 0) != (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          $3_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
          if (($3_1 | 0) != (HEAPU16[($0_1 + 6 | 0) >> 1] | 0 | 0)) {
           break label$9
          }
          $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
          if ($4_1 >>> 0 > $3_1 >>> 0) {
           break label$8
          }
          if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < $3_1 >>> 0) {
           break label$7
          }
          label$11 : {
           $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           $6_1 = $4_1 - (($5_1 | 0) > (0 | 0)) | 0;
           if (!$6_1) {
            break label$11
           }
           if ($6_1 >>> 0 > $3_1 >>> 0) {
            break label$6
           }
           $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
           $5_1 = 0;
           $4_1 = 0;
           label$12 : while (1) {
            label$13 : {
             $7_1 = HEAP32[$3_1 >> 2] | 0;
             if (!$7_1) {
              break label$13
             }
             $735($7_1 | 0);
            }
            $3_1 = $3_1 + 4 | 0;
            $5_1 = $5_1 + (HEAPU16[($2_1 + 4 | 0) >> 1] | 0) | 0;
            $2_1 = $2_1 + 8 | 0;
            $4_1 = $4_1 + 1 | 0;
            if (($4_1 | 0) != ($6_1 | 0)) {
             continue label$12
            }
            break label$12;
           };
           $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $5_1 >>> 0) {
            break label$5
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $5_1 | 0;
           label$14 : {
            $4_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
            if ($6_1 >>> 0 >= $4_1 >>> 0) {
             break label$14
            }
            $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
            $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
            $5_1 = 0;
            $7_1 = $6_1 << 3 | 0;
            $8_1 = $6_1 << 2 | 0;
            label$15 : while (1) {
             i64toi32_i32$2 = $2_1 + $7_1 | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             HEAP32[$2_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
             HEAP32[$3_1 >> 2] = HEAP32[($3_1 + $8_1 | 0) >> 2] | 0;
             $3_1 = $3_1 + 4 | 0;
             $2_1 = $2_1 + 8 | 0;
             $5_1 = $5_1 + 1 | 0;
             if (($5_1 + $6_1 | 0) >>> 0 < $4_1 >>> 0) {
              continue label$15
             }
             break label$15;
            };
           }
           $3_1 = $4_1 - $6_1 | 0;
           HEAP16[($0_1 + 6 | 0) >> 1] = $3_1;
           $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          label$16 : {
           if (($5_1 | 0) < (1 | 0)) {
            break label$16
           }
           $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           $4_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
           if (($5_1 | 0) > ($4_1 | 0)) {
            break label$4
           }
           $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           $4_1 = $4_1 - $5_1 | 0;
           if ($6_1 >>> 0 < $4_1 >>> 0) {
            break label$3
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $6_1 - $4_1 | 0;
           $4_1 = HEAP32[$1_1 >> 2] | 0;
           HEAP16[($2_1 + 4 | 0) >> 1] = $5_1;
           HEAP32[$2_1 >> 2] = $4_1;
          }
          HEAP16[($1_1 + 8 | 0) >> 1] = 0;
          HEAP16[($1_1 + 10 | 0) >> 1] = $3_1;
          i64toi32_i32$1 = 0;
          HEAP32[$1_1 >> 2] = 0;
          HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          return;
         }
         $859(57247 | 0, 56959 | 0, 563 | 0);
         abort();
        }
        $859(57271 | 0, 56959 | 0, 564 | 0);
        abort();
       }
       $859(57299 | 0, 56959 | 0, 565 | 0);
       abort();
      }
      $859(57328 | 0, 56959 | 0, 566 | 0);
      abort();
     }
     $859(57353 | 0, 56959 | 0, 579 | 0);
     abort();
    }
    $859(57376 | 0, 56959 | 0, 589 | 0);
    abort();
   }
   $859(57397 | 0, 56959 | 0, 604 | 0);
   abort();
  }
  $859(57428 | 0, 56959 | 0, 605 | 0);
  abort();
 }
 
 function $746($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   $5_1 = $3_1 ? $3_1 : 58788;
   $3_1 = $747($0_1 | 0, (Math_imul($1_1, 12) + (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0) + 24 | 0 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   $748($0_1 | 0, $3_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $747($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 60 >>> 0) {
      break label$3
     }
     label$4 : {
      $2_1 = $804(HEAP32[$0_1 >> 2] | 0 | 0, 60 | 0) | 0;
      if (!$2_1) {
       break label$4
      }
      $0_1 = $0_1 + 24 | 0;
      $1_1 = 160;
      break label$2;
     }
     $2_1 = $0_1 + 48 | 0;
     HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
    }
    label$5 : {
     $2_1 = $724(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
     if (!$2_1) {
      break label$5
     }
     $0_1 = $0_1 + 28 | 0;
     $1_1 = 161;
     break label$2;
    }
    $2_1 = $0_1 + 52 | 0;
    HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + 1 | 0;
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2] | 0]($2_1, $1_1) | 0;
    if (!$2_1) {
     break label$1
    }
    $0_1 = $0_1 + 32 | 0;
    $1_1 = 162;
   }
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
   HEAP8[($2_1 + 7 | 0) >> 0] = $1_1;
   return $2_1 | 0;
  }
  $859(57099 | 0, 56959 | 0, 651 | 0);
  abort();
 }
 
 function $748($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = $4_1;
  HEAP8[($1_1 + 6 | 0) >> 0] = $3_1;
  HEAP16[($1_1 + 4 | 0) >> 1] = 1;
  HEAP32[($1_1 + 20 | 0) >> 2] = $0_1;
  $6_1 = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  $0_1 = $0_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     HEAP16[($1_1 + 8 | 0) >> 1] = $2_1;
     $0_1 = $1_1 + 24 | 0;
     break label$2;
    }
    $0_1 = $1_1 + 24 | 0;
    if ($3_1 & 255 | 0) {
     break label$1
    }
    $2_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   }
   $6_1 = Math_imul($2_1 & 65535 | 0, 12);
  }
  $1_1 = $0_1 + $6_1 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          switch ($0_1 + -4 | 0 | 0) {
          case 4:
           break label$10;
          case 0:
           break label$11;
          case 1:
          case 2:
          case 3:
           break label$8;
          default:
           break label$9;
          };
         }
         if (!$5_1) {
          break label$6
         }
         HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
         return;
        }
        if (!$5_1) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        return;
       }
       if (!$0_1) {
        break label$7
       }
      }
      if (!$5_1) {
       break label$4
      }
      $823($1_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
     }
     return;
    }
    $859(58796 | 0, 56959 | 0, 678 | 0);
    abort();
   }
   $859(58796 | 0, 56959 | 0, 681 | 0);
   abort();
  }
  $859(58796 | 0, 56959 | 0, 685 | 0);
  abort();
 }
 
 function $749($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 856 | 0);
  }
  label$3 : {
   $0_1 = $746($0_1 | 0, 0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$3
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $750($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $30_1 = 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     $6_1 = $5_1;
     label$4 : {
      $7_1 = HEAP32[$3_1 >> 2] | 0;
      if (!$7_1) {
       break label$4
      }
      $8_1 = (HEAPU16[($7_1 + 4 | 0) >> 1] | 0) + 1 | 0;
      HEAP16[($7_1 + 4 | 0) >> 1] = $8_1;
      $6_1 = $7_1;
      if (($8_1 & 65535 | 0 | 0) != ($8_1 | 0)) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = $6_1;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $30_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $30_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $2_1 = $2_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 8 | 0;
     $0_1 = i64toi32_i32$0 + 8 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue label$3
     }
     break label$3;
    };
   }
   return;
  }
  $859(57038 | 0, 56959 | 0, 762 | 0);
  abort();
 }
 
 function $751($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 911 | 0);
  }
  label$3 : {
   label$4 : {
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    if ((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$3
    }
   }
   $846($3_1 | 0, 72 | 0, $3_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 913 | 0);
  }
  label$5 : {
   $4_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
   $3_1 = $746($3_1 | 0, $4_1 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (!$3_1) {
    break label$5
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = $3_1 + 24 | 0;
   $752($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 + ((HEAPU16[($3_1 + 8 | 0) >> 1] | 0) << 3 | 0) | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $4_1 | 0, $3_1 | 0);
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 0;
  return $3_1 | 0;
 }
 
 function $752($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $18_1 = 0;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   label$2 : while (1) {
    $6_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $6_1 ? $6_1 : $5_1;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $18_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $1_1 + 8 | 0;
    $0_1 = i64toi32_i32$0 + 8 | 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $753($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 936 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) != (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
               break label$14
              }
              $6_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
              if (($6_1 | 0) != (HEAPU16[($0_1 + 6 | 0) >> 1] | 0 | 0)) {
               break label$13
              }
              $7_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
              if ($7_1 >>> 0 > $6_1 >>> 0) {
               break label$12
              }
              if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
               break label$11
              }
              if ((HEAPU16[($2_1 + 10 | 0) >> 1] | 0 | 0) != ($6_1 | 0)) {
               break label$10
              }
              $5_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
              if ($5_1 >>> 0 > $6_1 >>> 0) {
               break label$9
              }
              if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < $6_1 >>> 0) {
               break label$8
              }
              if ($7_1 >>> 0 > $5_1 >>> 0) {
               break label$7
              }
              if (($754($1_1 | 0) | 0) >>> 0 > ($754($2_1 | 0) | 0) >>> 0) {
               break label$6
              }
              label$15 : {
               label$16 : {
                $6_1 = HEAP32[$0_1 >> 2] | 0;
                if (!$6_1) {
                 break label$16
                }
                if ((HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
                 break label$15
                }
               }
               $846($6_1 | 0, 72 | 0, $6_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 948 | 0);
               $5_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               $7_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
              }
              $7_1 = ($7_1 & 65535 | 0) - ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0)) | 0;
              $5_1 = $5_1 & 65535 | 0;
              if ($7_1 >>> 0 > $5_1 >>> 0) {
               break label$5
              }
              label$17 : {
               $5_1 = $5_1 - $7_1 | 0;
               $6_1 = $746($6_1 | 0, $5_1 | 0, 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
               if (!$6_1) {
                break label$17
               }
               HEAP32[($6_1 + 12 | 0) >> 2] = ($754($2_1 | 0) | 0) - ($754($1_1 | 0) | 0) | 0;
               if (!$5_1) {
                break label$17
               }
               $3_1 = $6_1 + 24 | 0;
               $4_1 = $7_1 << 3 | 0;
               $750($3_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0 | 0, $3_1 + ((HEAPU16[($6_1 + 8 | 0) >> 1] | 0) << 3 | 0) | 0 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0 | 0, $5_1 | 0, $6_1 | 0);
               label$18 : {
                $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                if (($1_1 | 0) < (1 | 0)) {
                 break label$18
                }
                $0_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
                if (($1_1 | 0) > (HEAPU16[($0_1 + 4 | 0) >> 1] | 0 | 0)) {
                 break label$4
                }
                HEAP16[($6_1 + 28 | 0) >> 1] = $1_1;
                HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) - $1_1 | 0) | 0;
               }
               $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
               if (($0_1 | 0) < (1 | 0)) {
                break label$17
               }
               $1_1 = (($5_1 << 3 | 0) + $3_1 | 0) + -4 | 0;
               $2_1 = HEAPU16[$1_1 >> 1] | 0;
               if (($0_1 | 0) > ($2_1 | 0)) {
                break label$3
               }
               HEAP16[$1_1 >> 1] = $2_1 - $0_1 | 0;
              }
              return $6_1 | 0;
             }
             $859(57486 | 0, 56959 | 0, 937 | 0);
             abort();
            }
            $859(57509 | 0, 56959 | 0, 938 | 0);
            abort();
           }
           $859(57536 | 0, 56959 | 0, 939 | 0);
           abort();
          }
          $859(57563 | 0, 56959 | 0, 940 | 0);
          abort();
         }
         $859(57585 | 0, 56959 | 0, 941 | 0);
         abort();
        }
        $859(57611 | 0, 56959 | 0, 942 | 0);
        abort();
       }
       $859(57328 | 0, 56959 | 0, 943 | 0);
       abort();
      }
      $859(57636 | 0, 56959 | 0, 944 | 0);
      abort();
     }
     $859(57660 | 0, 56959 | 0, 945 | 0);
     abort();
    }
    $859(57710 | 0, 56959 | 0, 956 | 0);
    abort();
   }
   $859(57731 | 0, 56959 | 0, 969 | 0);
   abort();
  }
  $859(57769 | 0, 56959 | 0, 975 | 0);
  abort();
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = 0;
   $2_1 = 0;
   label$2 : while (1) {
    $1_1 = $1_1 + (HEAPU16[(($4_1 + ($2_1 << 3 | 0) | 0) + 4 | 0) >> 1] | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $1_1 - (($2_1 | 0) > (0 | 0) ? $2_1 : 0) | 0 | 0;
 }
 
 function $755($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $4_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 994 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) == (56911 | 0)) {
     break label$3
    }
   }
   $846($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56911 | 0, 56959 | 0, 995 | 0);
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($4_1 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
                break label$17
               }
               $5_1 = HEAPU16[($2_1 + 10 | 0) >> 1] | 0;
               if (($5_1 | 0) != (HEAPU16[($1_1 + 6 | 0) >> 1] | 0 | 0)) {
                break label$16
               }
               $6_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               if ($6_1 >>> 0 > $5_1 >>> 0) {
                break label$15
               }
               if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
                break label$14
               }
               if ((HEAPU16[($3_1 + 10 | 0) >> 1] | 0 | 0) != ($5_1 | 0)) {
                break label$13
               }
               $4_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
               if ($4_1 >>> 0 > $5_1 >>> 0) {
                break label$12
               }
               if ((HEAPU16[($1_1 + 4 | 0) >> 1] | 0) >>> 0 < $5_1 >>> 0) {
                break label$11
               }
               if ((HEAPU16[($0_1 + 4 | 0) >> 1] | 0) >>> 0 < (HEAPU16[($0_1 + 6 | 0) >> 1] | 0) >>> 0) {
                break label$10
               }
               if ($6_1 >>> 0 > $4_1 >>> 0) {
                break label$9
               }
               if (($754($2_1 | 0) | 0) >>> 0 > ($754($3_1 | 0) | 0) >>> 0) {
                break label$8
               }
               label$18 : {
                label$19 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if (!$5_1) {
                  break label$19
                 }
                 if ((HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
                  break label$18
                 }
                }
                $846($5_1 | 0, 72 | 0, $5_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1008 | 0);
                $4_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
                $6_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
               }
               $7_1 = ($6_1 & 65535 | 0) - ((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0)) | 0;
               $5_1 = $4_1 & 65535 | 0;
               if ($7_1 >>> 0 > $5_1 >>> 0) {
                break label$7
               }
               $4_1 = $5_1 - $7_1 | 0;
               $5_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
               label$20 : {
                label$21 : while (1) {
                 $8_1 = HEAPU16[($0_1 + 6 | 0) >> 1] | 0;
                 $9_1 = $4_1 + $8_1 | 0;
                 $6_1 = $5_1 & 65535 | 0;
                 if ($9_1 >>> 0 < $6_1 >>> 0) {
                  break label$20
                 }
                 label$22 : {
                  if ($742($0_1 | 0) | 0) {
                   break label$22
                  }
                  return 0 | 0;
                 }
                 $5_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
                 if ($5_1 >>> 0 > $6_1 >>> 0) {
                  continue label$21
                 }
                 break label$21;
                };
                $859(57949 | 0, 56959 | 0, 1024 | 0);
                abort();
               }
               HEAP32[($0_1 + 8 | 0) >> 2] = (($754($3_1 | 0) | 0) - ($754($2_1 | 0) | 0) | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
               label$23 : {
                if ($4_1) {
                 break label$23
                }
                return 1 | 0;
               }
               HEAP16[($0_1 + 6 | 0) >> 1] = $9_1;
               $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               $5_1 = $6_1 + ($8_1 << 3 | 0) | 0;
               $9_1 = $7_1 << 3 | 0;
               $750($5_1 | 0, (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $9_1 | 0 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0 | 0, (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0 | 0, $4_1 | 0, 0 | 0);
               label$24 : {
                $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                if (($0_1 | 0) < (1 | 0)) {
                 break label$24
                }
                $9_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
                if (($0_1 | 0) > (HEAPU16[($9_1 + 4 | 0) >> 1] | 0 | 0)) {
                 break label$6
                }
                HEAP16[(($6_1 + ($8_1 << 3 | 0) | 0) + 4 | 0) >> 1] = $0_1;
                HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ((HEAPU16[($9_1 + 4 | 0) >> 1] | 0) - $0_1 | 0) | 0;
               }
               label$25 : {
                $0_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                if (($0_1 | 0) < (1 | 0)) {
                 break label$25
                }
                $5_1 = ($4_1 << 3 | 0) + $5_1 | 0;
                $6_1 = HEAPU16[($5_1 + -4 | 0) >> 1] | 0;
                if (($0_1 | 0) > ($6_1 | 0)) {
                 break label$5
                }
                HEAP16[(($5_1 + -8 | 0) + 4 | 0) >> 1] = $6_1 - $0_1 | 0;
               }
               return 1 | 0;
              }
              $859(57801 | 0, 56959 | 0, 996 | 0);
              abort();
             }
             $859(57824 | 0, 56959 | 0, 997 | 0);
             abort();
            }
            $859(57536 | 0, 56959 | 0, 998 | 0);
            abort();
           }
           $859(57851 | 0, 56959 | 0, 999 | 0);
           abort();
          }
          $859(57873 | 0, 56959 | 0, 1e3 | 0);
          abort();
         }
         $859(57611 | 0, 56959 | 0, 1001 | 0);
         abort();
        }
        $859(57899 | 0, 56959 | 0, 1002 | 0);
        abort();
       }
       $859(57924 | 0, 56959 | 0, 1003 | 0);
       abort();
      }
      $859(57636 | 0, 56959 | 0, 1004 | 0);
      abort();
     }
     $859(57660 | 0, 56959 | 0, 1005 | 0);
     abort();
    }
    $859(57710 | 0, 56959 | 0, 1016 | 0);
    abort();
   }
   $859(57968 | 0, 56959 | 0, 1036 | 0);
   abort();
  }
  $859(57769 | 0, 56959 | 0, 1042 | 0);
  abort();
 }
 
 function $756($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$2
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1222 | 0);
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
     break label$4
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   label$5 : {
    label$6 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$6
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$5
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1224 | 0);
   }
   return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
  }
  $859(57033 | 0, 56959 | 0, 1221 | 0);
  abort();
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1250 | 0);
    }
    label$5 : {
     if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$1
     }
    }
    label$6 : {
     label$7 : {
      $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$7
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$6
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1253 | 0);
    }
    return ((HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0 > $1_1 >>> 0 ? ($0_1 + ($1_1 << 3 | 0) | 0) + 24 | 0 : 0) | 0;
   }
   $859(57033 | 0, 56959 | 0, 1249 | 0);
   abort();
  }
  $859(58006 | 0, 56959 | 0, 1252 | 0);
  abort();
 }
 
 function $758($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$4
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1266 | 0);
    }
    label$5 : {
     if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
      break label$5
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$1
     }
    }
    label$6 : {
     label$7 : {
      $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$7
      }
      if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$6
      }
     }
     $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1269 | 0);
    }
    return HEAPU16[($0_1 + 8 | 0) >> 1] | 0 | 0;
   }
   $859(57033 | 0, 56959 | 0, 1265 | 0);
   abort();
  }
  $859(58006 | 0, 56959 | 0, 1268 | 0);
  abort();
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$3
     }
     if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$2
     }
    }
    $846($1_1 | 0, 72 | 0, $1_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1278 | 0);
   }
   label$4 : {
    if (HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) {
     break label$4
    }
    return 0 | 0;
   }
   $2_1 = $0_1 + 24 | 0;
   $1_1 = 0;
   label$5 : {
    if (HEAPU8[($0_1 + 6 | 0) >> 0] | 0) {
     break label$5
    }
    $1_1 = Math_imul(HEAPU16[($0_1 + 8 | 0) >> 1] | 0, 12);
   }
   return $2_1 + $1_1 | 0 | 0;
  }
  $859(57033 | 0, 56959 | 0, 1277 | 0);
  abort();
 }
 
 function $760($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $859(58013 | 0, 56959 | 0, 1335 | 0);
   abort();
  }
  HEAP16[($0_1 + 10 | 0) >> 1] = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP16[($0_1 + 8 | 0) >> 1] = 0;
  $761($0_1 | 0) | 0;
 }
 
 function $761($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) >= (1 | 0)) {
      break label$3
     }
     $2_1 = 0;
     label$4 : {
      if ($1_1) {
       break label$4
      }
      $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$2
      }
      $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
      $3_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
      if ($1_1 >>> 0 > $3_1 >>> 0) {
       break label$1
      }
      label$5 : {
       label$6 : {
        if ($1_1 >>> 0 >= $3_1 >>> 0) {
         break label$6
        }
        $2_1 = $2_1 + ($1_1 << 3 | 0) | 0;
        label$7 : while (1) {
         $1_1 = $1_1 + 1 | 0;
         $4_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
         if ($4_1) {
          break label$5
         }
         $2_1 = $2_1 + 8 | 0;
         if (($1_1 | 0) != ($3_1 | 0)) {
          continue label$7
         }
         break label$7;
        };
        HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = -1;
       return 0 | 0;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
      HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $2_1 = $4_1;
     }
     return $2_1 | 0;
    }
    $859(58802 | 0, 56959 | 0, 1293 | 0);
    abort();
   }
   $859(58039 | 0, 56959 | 0, 1297 | 0);
   abort();
  }
  $859(57299 | 0, 56959 | 0, 1298 | 0);
  abort();
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!$1_1) {
      break label$2
     }
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
       if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
        break label$4
       }
      }
      $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1352 | 0);
     }
     label$6 : {
      if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
       break label$6
      }
      $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$1
      }
     }
     label$7 : {
      label$8 : {
       $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$8
       }
       if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
        break label$7
       }
      }
      $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1355 | 0);
     }
     $760($0_1 | 0, $1_1 + 24 | 0 | 0, HEAPU16[($1_1 + 8 | 0) >> 1] | 0 | 0);
     return;
    }
    $859(58013 | 0, 56959 | 0, 1350 | 0);
    abort();
   }
   $859(57033 | 0, 56959 | 0, 1351 | 0);
   abort();
  }
  $859(57033 | 0, 56959 | 0, 1354 | 0);
  abort();
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[$1_1 >> 2] | 0;
      if (!$2_1) {
       break label$4
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$3
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 1365 | 0);
    }
    $760($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAPU16[($1_1 + 6 | 0) >> 1] | 0 | 0);
    return;
   }
   $859(58013 | 0, 56959 | 0, 1363 | 0);
   abort();
  }
  $859(58020 | 0, 56959 | 0, 1364 | 0);
  abort();
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     if (($1_1 | 0) > (0 | 0)) {
      break label$2
     }
     label$4 : {
      if ($761($0_1 | 0) | 0) {
       break label$4
      }
      return -1 | 0;
     }
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) > (0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $859(58024 | 0, 56959 | 0, 1380 | 0);
    abort();
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$2_1 >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -1 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
   return $3_1 | 0;
  }
  $859(58013 | 0, 56959 | 0, 1375 | 0);
  abort();
 }
 
 function $765($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$0_1) {
      break label$3
     }
     if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
      break label$2
     }
     if ((HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0 > (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
      break label$1
     }
     return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 31 | 0 | 0;
    }
    $859(58013 | 0, 56959 | 0, 1392 | 0);
    abort();
   }
   $859(58039 | 0, 56959 | 0, 1393 | 0);
   abort();
  }
  $859(57299 | 0, 56959 | 0, 1394 | 0);
  abort();
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 & 2147483647 | 0;
  $1_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) > ($3_1 | 0)) {
      break label$3
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 - $1_1 | 0;
     HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
     $1_1 = 0;
     break label$1;
    }
    if (($3_1 | 0) < (0 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    $1_1 = $1_1 - $3_1 | 0;
    if ($761($0_1 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 - $1_1 | 0 | 0;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $8$hi = 0, $66_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if (!$0_1) {
           break label$10
          }
          if (!$1_1) {
           break label$9
          }
          if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
           break label$8
          }
          $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
          $4_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
          if ($3_1 >>> 0 > $4_1 >>> 0) {
           break label$7
          }
          label$11 : {
           label$12 : {
            if (($3_1 | 0) != ($4_1 | 0)) {
             break label$12
            }
            $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if (($5_1 | 0) == (-1 | 0)) {
             break label$12
            }
            $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if (($0_1 | 0) == (-1 | 0)) {
             break label$6
            }
            if (($0_1 | 0) < ($5_1 | 0)) {
             break label$5
            }
            $0_1 = $0_1 - $5_1 | 0;
            break label$11;
           }
           label$13 : {
            if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
             break label$13
            }
            if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
             break label$4
            }
            if (($3_1 | 0) != ($4_1 | 0)) {
             break label$4
            }
           }
           i64toi32_i32$2 = $0_1 + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $8_1 = i64toi32_i32$0;
           $8$hi = i64toi32_i32$1;
           i64toi32_i32$0 = $2_1 + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $8_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           $66_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[$2_1 >> 2] = $66_1;
           HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = 0;
           $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           label$14 : {
            i64toi32_i32$0 = $8$hi;
            if (($8_1 & 65535 | 0 | 0) == ($4_1 | 0)) {
             break label$14
            }
            label$15 : while (1) {
             HEAP32[($2_1 + 4 | 0) >> 2] = 0;
             $3_1 = $0_1 + $3_1 | 0;
             $761($2_1 | 0) | 0;
             $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
             if ((HEAPU16[($2_1 + 8 | 0) >> 1] | 0 | 0) != (HEAPU16[($1_1 + 8 | 0) >> 1] | 0 | 0)) {
              continue label$15
             }
             break label$15;
            };
           }
           $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($0_1 | 0) < ($1_1 | 0)) {
            break label$3
           }
           $0_1 = ($0_1 + $3_1 | 0) - $1_1 | 0;
          }
          label$16 : {
           $7_1 = $2_1 + 16 | 0;
           if ($7_1 >>> 0 < global$2 >>> 0) {
            fimport$11()
           }
           global$0 = $7_1;
          }
          return $0_1 | 0;
         }
         $859(58051 | 0, 56959 | 0, 1432 | 0);
         abort();
        }
        $859(58056 | 0, 56959 | 0, 1433 | 0);
        abort();
       }
       $859(58059 | 0, 56959 | 0, 1434 | 0);
       abort();
      }
      $859(58078 | 0, 56959 | 0, 1435 | 0);
      abort();
     }
     $859(58097 | 0, 56959 | 0, 1438 | 0);
     abort();
    }
    $859(58119 | 0, 56959 | 0, 1439 | 0);
    abort();
   }
   $859(58142 | 0, 56959 | 0, 1442 | 0);
   abort();
  }
  $859(58236 | 0, 56959 | 0, 1448 | 0);
  abort();
 }
 
 function $768($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if (($2_1 | 0) < (0 | 0)) {
     break label$1
    }
    $3_1 = $2_1;
    label$3 : {
     label$4 : while (1) {
      $4_1 = HEAP32[$0_1 >> 2] | 0;
      label$5 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > ($5_1 | 0)) {
        break label$5
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 - $3_1 | 0;
       HEAP32[$0_1 >> 2] = $4_1 + $3_1 | 0;
       $823($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
       $3_1 = 0;
       break label$3;
      }
      if (($5_1 | 0) < (0 | 0)) {
       break label$3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = 0;
      HEAP32[$0_1 >> 2] = $4_1 + $5_1 | 0;
      $823($1_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
      $1_1 = $1_1 + $5_1 | 0;
      $3_1 = $3_1 - $5_1 | 0;
      if ($761($0_1 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    return $2_1 - $3_1 | 0 | 0;
   }
   $859(58013 | 0, 56959 | 0, 1458 | 0);
   abort();
  }
  $859(58258 | 0, 56959 | 0, 1459 | 0);
  abort();
 }
 
 function $769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 > (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) >>> 0) {
       break label$4
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP16[($0_1 + 8 | 0) >> 1] = $2_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
      label$5 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$5
       }
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$3
       }
       $2_1 = ($2_1 & 65535 | 0) + -1 | 0;
       if ($2_1 >>> 0 >= (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
        break label$2
       }
       $2_1 = $3_1 + ($2_1 << 3 | 0) | 0;
       $3_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
       if (($1_1 | 0) > ($3_1 | 0)) {
        break label$1
       }
       HEAP32[$0_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + ($3_1 - $1_1 | 0) | 0;
      }
      return;
     }
     $859(58272 | 0, 56959 | 0, 1543 | 0);
     abort();
    }
    $859(58039 | 0, 56959 | 0, 1547 | 0);
    abort();
   }
   $859(58306 | 0, 56959 | 0, 1548 | 0);
   abort();
  }
  $859(58352 | 0, 56959 | 0, 1549 | 0);
  abort();
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
    if ($1_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   $3_1 = $1_1 >>> 0 > 1 >>> 0 ? $1_1 : 1;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = 0;
   $2_1 = 0;
   label$3 : while (1) {
    $2_1 = $2_1 + (HEAPU16[(($4_1 + ($1_1 << 3 | 0) | 0) + 4 | 0) >> 1] | 0) | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $2_1 - ($754($0_1 | 0) | 0) | 0 | 0;
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $24_1 = 0, $27_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if (($1_1 | 0) <= (-1 | 0)) {
     break label$3
    }
    label$5 : {
     if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > ($1_1 | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $24_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $27_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $27_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $1_1 = $766($2_1 | 0, $1_1 | 0) | 0;
    }
    label$6 : {
     $4_1 = $2_1 + 16 | 0;
     if ($4_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $4_1;
    }
    return $1_1 | 0;
   }
   $859(58013 | 0, 56959 | 0, 1593 | 0);
   abort();
  }
  $859(58404 | 0, 56959 | 0, 1596 | 0);
  abort();
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) >= (1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($761($0_1 | 0) | 0) {
       break label$4
      }
      $2_1 = 255;
      break label$2;
     }
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($1_1 | 0) <= (0 | 0)) {
      break label$1
     }
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -1 | 0;
    HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
   }
   return $2_1 & 255 | 0 | 0;
  }
  $859(58441 | 0, 56959 | 0, 1628 | 0);
  abort();
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $5_1 = 0;
    $6_1 = $2_1;
    break label$1;
   }
   $5_1 = 0;
   label$3 : while (1) {
    label$4 : {
     if (($3_1 | 0) >= (1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : while (1) {
       HEAP32[$0_1 >> 2] = $2_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
       if (!($761($0_1 | 0) | 0)) {
        break label$5
       }
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > (0 | 0)) {
        break label$4
       }
       continue label$6;
      };
     }
     return -1 | 0;
    }
    $3_1 = $3_1 + -1 | 0;
    $5_1 = (HEAPU8[$2_1 >> 0] | 0) << $4_1 | 0 | $5_1 | 0;
    $4_1 = $4_1 + 8 | 0;
    $6_1 = $2_1 + 1 | 0;
    $2_1 = $6_1;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[$0_1 >> 2] = $6_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  return $5_1 | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $5_1 = $2_1;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     if (($3_1 | 0) >= (1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : while (1) {
       HEAP32[$0_1 >> 2] = $2_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
       if (!($761($0_1 | 0) | 0)) {
        break label$5
       }
       $2_1 = HEAP32[$0_1 >> 2] | 0;
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($3_1 | 0) > (0 | 0)) {
        break label$4
       }
       continue label$6;
      };
     }
     return -1 | 0;
    }
    $3_1 = $3_1 + -1 | 0;
    $4_1 = $4_1 << 8 | 0 | (HEAPU8[$2_1 >> 0] | 0) | 0;
    $5_1 = $2_1 + 1 | 0;
    $2_1 = $5_1;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  return $4_1 | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) < (2 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -2 | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 2 | 0;
    break label$1;
   }
   $3_1 = $773($0_1 | 0, 2 | 0) | 0;
  }
  return $3_1 & 65535 | 0 | 0;
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (4 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -4 | 0;
   HEAP32[$0_1 >> 2] = $4_1 + 4 | 0;
   return $3_1 | 0;
  }
  return $773($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) < (2 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $4_1 = HEAPU8[$2_1 >> 0] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -2 | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 2 | 0;
    $0_1 = $3_1 | ($4_1 << 8 | 0) | 0;
    break label$1;
   }
   $0_1 = $774($0_1 | 0, 2 | 0) | 0;
  }
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (4 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -4 | 0;
   HEAP32[$0_1 >> 2] = $4_1 + 4 | 0;
   return $3_1 << 24 | 0 | (($3_1 << 8 | 0) & 16711680 | 0) | 0 | (($3_1 >>> 8 | 0) & 65280 | 0 | ($3_1 >>> 24 | 0) | 0) | 0 | 0;
  }
  return $774($0_1 | 0, 4 | 0) | 0 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $1_1 = 0, $7$hi = 0, $9$hi = 0;
  $1_1 = $776($0_1 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $776($0_1 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $9_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $9_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $4$hi = 0, $7$hi = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $778($0_1 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $778($0_1 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (3 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[$2_1 >> 0] | 0 | ((HEAPU8[($2_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   $4_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -3 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 3 | 0;
   return $3_1 | ($4_1 << 16 | 0) | 0 | 0;
  }
  return $773($0_1 | 0, 3 | 0) | 0 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1_1 | 0) < (3 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
   $4_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
   $5_1 = HEAPU8[$2_1 >> 0] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + -3 | 0;
   HEAP32[$0_1 >> 2] = $2_1 + 3 | 0;
   return $3_1 | ($4_1 << 8 | 0 | ($5_1 << 16 | 0) | 0) | 0 | 0;
  }
  return $774($0_1 | 0, 3 | 0) | 0 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = -1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = $765(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return (((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) / (-8 | 0) | 0) + ($754(HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  return (($754(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 3 | 0) + ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0 | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     break label$2
    }
    if (($788($0_1 | 0) | 0 | 0) == (-1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   $1_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> $2_1 | 0) & 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[$0_1 >> 2] | 0;
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) < (4 | 0)) {
       break label$4
      }
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      $4_1 = HEAPU8[$5_1 >> 0] | 0 | ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = 31;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 << 24 | 0 | (($4_1 << 8 | 0) & 16711680 | 0) | 0 | (($4_1 >>> 8 | 0) & 65280 | 0 | ($4_1 >>> 24 | 0) | 0) | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + -4 | 0;
      HEAP32[$1_1 >> 2] = $5_1 + 4 | 0;
      break label$3;
     }
     $4_1 = -1;
     $2_1 = $764($1_1 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$2
     }
     label$5 : {
      $4_1 = $764($1_1 | 0) | 0;
      if (($4_1 | 0) != (-1 | 0)) {
       break label$5
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 7;
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
      break label$3;
     }
     $4_1 = $4_1 | ($2_1 << 8 | 0) | 0;
     label$6 : {
      $2_1 = $764($1_1 | 0) | 0;
      if (($2_1 | 0) != (-1 | 0)) {
       break label$6
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 15;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      break label$3;
     }
     $4_1 = $2_1 | ($4_1 << 8 | 0) | 0;
     label$7 : {
      $1_1 = $764($1_1 | 0) | 0;
      if (($1_1 | 0) != (-1 | 0)) {
       break label$7
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = 23;
      HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
      break label$3;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 31;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($4_1 << 8 | 0) | 0;
    }
    $4_1 = 0;
   }
   return $4_1 | 0;
  }
  $859(58818 | 0, 56959 | 0, 1873 | 0);
  abort();
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $787($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (($1_1 | 0) != (-1 | 0)) | 0;
  return $1_1 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 >= 32 >>> 0) {
      break label$3
     }
     if (!$1_1) {
      break label$2
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $3_1 = $1_1 + -1 | 0;
     if (($2_1 | 0) >= ($3_1 | 0)) {
      break label$1
     }
     $1_1 = $789($0_1 | 0) | 0;
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      label$5 : while (1) {
       $1_1 = $789($0_1 | 0) | 0 | ($1_1 << 1 | 0) | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue label$5
       }
       break label$5;
      };
     }
     return $1_1 | 0;
    }
    $859(58451 | 0, 56959 | 0, 1971 | 0);
    abort();
   }
   $859(58461 | 0, 56959 | 0, 1972 | 0);
   abort();
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $1_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> ($2_1 - $3_1 | 0) | 0) & (-1 >>> (32 - $1_1 | 0) | 0) | 0 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $5_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $2_1 = 0;
  $3_1 = 0;
  label$3 : while (1) {
   label$4 : {
    $4_1 = $789($0_1 | 0) | 0;
    $4_1 = ($4_1 | 0) == (1 | 0) ? 2 : ($4_1 | 0) == (-1 | 0);
    if (!$4_1) {
     break label$4
    }
    label$5 : {
     if (($4_1 | 0) != (2 | 0)) {
      break label$5
     }
     if (!$3_1) {
      break label$5
     }
     label$6 : {
      if ($3_1 >>> 0 < 31 >>> 0) {
       break label$6
      }
      $2_1 = 0;
      if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$5
      }
      HEAP32[$1_1 >> 2] = $3_1;
      $827(58469 | 0, $1_1 | 0);
      break label$5;
     }
     $2_1 = ($790($0_1 | 0, $3_1 | 0) | 0 | (1 << $3_1 | 0) | 0) + -1 | 0;
    }
    label$7 : {
     $6_1 = $1_1 + 16 | 0;
     if ($6_1 >>> 0 < global$2 >>> 0) {
      fimport$11()
     }
     global$0 = $6_1;
    }
    return $2_1 | 0;
   }
   $3_1 = $3_1 + 1 | 0;
   continue label$3;
  };
 }
 
 function $792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $1_1 >>> 0 < 31 >>> 0 ? $1_1 : 31;
    $790($0_1 | 0, $2_1 | 0) | 0;
    if ((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$1
    }
    $1_1 = $1_1 - $2_1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $20_1 = 0, $27_1 = 0, $30_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[(($2_1 + 16 | 0) + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $20_1;
  HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $27_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[$2_1 >> 2] = $30_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2_1 + 16 | 0) >> 2] = $2_1;
  $792($2_1 + 16 | 0 | 0, $1_1 | 0);
  $0_1 = $784($2_1 + 16 | 0 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 32 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $0_1 ^ 1 | 0 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 72 | 0, $0_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2054 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0]($1_1, 24) | 0;
   if (!$1_1) {
    break label$3
   }
   $845($1_1 | 0, 24 | 0, $1_1 + 20 | 0 | 0, 56945 | 0);
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  }
  return $1_1 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2075 | 0);
  }
  $796($0_1 | 0);
  $1_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  $845($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 0 | 0);
  FUNCTION_TABLE[HEAP32[($1_1 + 4 | 0) >> 2] | 0]($1_1, $0_1);
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $4_1 = 0, $61_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $4_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2144 | 0);
  }
  label$5 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$5
   }
   label$6 : while (1) {
    label$7 : {
     label$8 : {
      if (($2_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$7;
     }
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    }
    HEAP32[$2_1 >> 2] = 0;
    label$9 : {
     label$10 : {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$10
      }
      if ((HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$9
      }
     }
     $846($3_1 | 0, 72 | 0, $3_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2148 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    $735($2_1 | 0);
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  label$11 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
    break label$11
   }
   if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$11
   }
   i64toi32_i32$0 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $61_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $61_1;
   HEAP32[($1_1 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[$1_1 >> 2] = $0_1;
   $827(58561 | 0, $1_1 | 0);
  }
  label$12 : {
   $5_1 = $1_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2087 | 0);
  }
  label$3 : {
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    if (HEAP32[$1_1 >> 2] | 0) {
     break label$3
    }
    label$5 : {
     label$6 : {
      $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$6
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
       break label$5
      }
     }
     $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2090 | 0);
    }
    HEAP32[$1_1 >> 2] = 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 ? $2_1 : $0_1) >> 2] = $1_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    return;
   }
   $859(57033 | 0, 56959 | 0, 2088 | 0);
   abort();
  }
  $859(58525 | 0, 56959 | 0, 2089 | 0);
  abort();
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (56945 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 24 | 0, $0_1 + 20 | 0 | 0, 56945 | 0, 56959 | 0, 2127 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$5
     }
     $3_1 = $1_1;
     if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0 | 0) == (56928 | 0)) {
      break label$4
     }
    }
    $846($2_1 | 0, 72 | 0, $2_1 + 68 | 0 | 0, 56928 | 0, 56959 | 0, 2130 | 0);
    $3_1 = HEAP32[$0_1 >> 2] | 0;
   }
   label$6 : {
    label$7 : {
     if (($3_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     break label$6;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   }
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, $9_1 = 0, $10_1 = 0, $118_1 = 0;
  label$1 : {
   $3_1 = global$0 - 208 | 0;
   $11_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $5_1 = $770($0_1 | 0) | 0;
   $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $7_1 = $6_1 + -1 | 0;
   $8_1 = HEAP32[$0_1 >> 2] | 0;
   $9_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $10_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
   label$4 : {
    if (!$6_1) {
     break label$4
    }
    $4_1 = $8_1 - (HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($7_1 << 3 | 0) | 0) >> 2] | 0) | 0;
   }
   HEAP32[($3_1 + 92 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 88 | 0) >> 2] = $8_1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $7_1;
   HEAP32[($3_1 + 80 | 0) >> 2] = $9_1;
   HEAP32[($3_1 + 76 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 72 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 68 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 64 | 0) >> 2] = $1_1;
   $827(58836 | 0, $3_1 + 64 | 0 | 0);
  }
  label$5 : {
   if (!(HEAPU16[($0_1 + 10 | 0) >> 1] | 0)) {
    break label$5
   }
   $5_1 = $3_1 + 48 | 0;
   $4_1 = 0;
   label$6 : while (1) {
    label$7 : {
     if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$7
     }
     $7_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($4_1 << 3 | 0) | 0;
     $8_1 = HEAP32[$7_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = HEAPU16[($7_1 + 4 | 0) >> 1] | 0;
     HEAP32[($3_1 + 44 | 0) >> 2] = $8_1;
     HEAP32[($3_1 + 40 | 0) >> 2] = $4_1;
     HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
     $827(58887 | 0, $3_1 + 32 | 0 | 0);
    }
    $4_1 = $4_1 + 1 | 0;
    if ($4_1 >>> 0 < (HEAPU16[($0_1 + 10 | 0) >> 1] | 0) >>> 0) {
     continue label$6
    }
    break label$6;
   };
  }
  label$8 : {
   if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$8
   }
   $5_1 = 0;
   label$9 : while (1) {
    $7_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
    $4_1 = 0;
    label$10 : {
     label$11 : {
      label$12 : while (1) {
       $8_1 = $764($0_1 | 0) | 0;
       if (($8_1 | 0) == (-1 | 0)) {
        break label$11
       }
       HEAP8[(($3_1 + 192 | 0) + $4_1 | 0) >> 0] = $8_1;
       $118_1 = $7_1 & 65535 | 0;
       $7_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
       HEAP8[(($3_1 + 176 | 0) + $4_1 | 0) >> 0] = ($118_1 | 0) == ($7_1 | 0) ? 32 : 124;
       $8_1 = 16;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (16 | 0)) {
        continue label$12
       }
       break label$10;
      };
     }
     $8_1 = $4_1;
     if (!$4_1) {
      break label$8
     }
    }
    $7_1 = 0;
    $4_1 = 0;
    label$13 : while (1) {
     HEAP32[($3_1 + 16 | 0) >> 2] = HEAP8[(($3_1 + 176 | 0) + $7_1 | 0) >> 0] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = HEAPU8[(($3_1 + 192 | 0) + $7_1 | 0) >> 0] | 0;
     $4_1 = ($820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 80 - $4_1 | 0 | 0, 58909 | 0, $3_1 + 16 | 0 | 0) | 0) + $4_1 | 0;
     label$14 : {
      if (($7_1 | 0) != (7 | 0)) {
       break label$14
      }
      if ($4_1 >>> 0 > 79 >>> 0) {
       break label$14
      }
      $4_1 = ($820(($3_1 + 96 | 0) + $4_1 | 0 | 0, 80 - $4_1 | 0 | 0, 58916 | 0, 0 | 0) | 0) + $4_1 | 0;
     }
     label$15 : {
      if ($4_1 >>> 0 > 79 >>> 0) {
       break label$15
      }
      $7_1 = $7_1 + 1 | 0;
      if ($7_1 >>> 0 < $8_1 >>> 0) {
       continue label$13
      }
     }
     break label$13;
    };
    label$16 : {
     if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$16
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $3_1 + 96 | 0;
     $827(58919 | 0, $3_1 | 0);
    }
    if ($5_1 >>> 0 > 239 >>> 0) {
     break label$8
    }
    $5_1 = $5_1 + 16 | 0;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$17 : {
   $12_1 = $3_1 + 208 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $7_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = global$0 - 48 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   label$4 : {
    if (!($834(62456 | 0, 0 | 0, 0 | 0) | 0)) {
     break label$4
    }
    $3_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
    $4_1 = HEAPU16[($0_1 + 4 | 0) >> 1] | 0;
    $5_1 = $756($0_1 | 0) | 0;
    HEAP32[($2_1 + 20 | 0) >> 2] = $758($0_1 | 0) | 0;
    HEAP32[($2_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 8 | 0) >> 2] = ($3_1 | 0) == (1 | 0) ? 58652 : 58658;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    HEAP32[$2_1 >> 2] = $1_1;
    $827(58605 | 0, $2_1 | 0);
   }
   $762($2_1 + 32 | 0 | 0, $0_1 | 0);
   $799($2_1 + 32 | 0 | 0, 58659 | 0, $1_1 | 0);
   label$5 : {
    $7_1 = $2_1 + 48 | 0;
    if ($7_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $7_1;
   }
   return;
  }
  $859(57033 | 0, 56959 | 0, 2218 | 0);
  abort();
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $16_1 = 0, $19_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[$2_1 >> 2] = $19_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $799($2_1 | 0, 58667 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $802($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 1;
  HEAP16[($0_1 + 4 | 0) >> 1] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, $19_1 = 0, $22_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$2 = $0_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $22_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    $0_1 = 0;
    label$5 : while (1) {
     $4_1 = HEAP8[($1_1 + $0_1 | 0) >> 0] | 0;
     label$6 : {
      label$7 : {
       $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) < (1 | 0)) {
        break label$7
       }
       HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       HEAP32[$3_1 >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break label$6;
      }
      $5_1 = $764($3_1 | 0) | 0;
      if (($5_1 | 0) != (-1 | 0)) {
       break label$6
      }
      $0_1 = 0 - $4_1 | 0;
      break label$3;
     }
     label$8 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$8
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      continue label$5;
     }
     break label$5;
    };
    $0_1 = $5_1 - $4_1 | 0;
    break label$3;
   }
   $0_1 = 0;
  }
  label$9 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $7_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$3
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 93 | 0);
  }
  label$5 : {
   label$6 : {
    if ((HEAPU16[($0_1 + 12 | 0) >> 1] | 0) >>> 0 < $1_1 >>> 0) {
     break label$6
    }
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if (!(HEAPU16[($0_1 + 10 | 0) >> 1] | 0)) {
        break label$9
       }
       $1_1 = (HEAPU16[($0_1 + 14 | 0) >> 1] | 0) >>> 5 | 0;
       $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
       label$10 : while (1) {
        label$11 : {
         $4_1 = $3_1 & 65535 | 0;
         if ($4_1 >>> 0 >= $1_1 >>> 0) {
          break label$11
         }
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         $3_1 = $4_1;
         label$12 : while (1) {
          label$13 : {
           $6_1 = HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
           if (($6_1 | 0) == (-1 | 0)) {
            break label$13
           }
           HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
           $1_1 = $805($6_1 | 0) | 0;
           $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << $1_1 | 0) | 0;
           $5_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
           if (!$5_1) {
            break label$7
           }
           HEAP16[($0_1 + 10 | 0) >> 1] = $5_1 + -1 | 0;
           $3_1 = ($0_1 + Math_imul($1_1 + ($3_1 << 5 | 0) | 0, HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) + 32 | 0;
           break label$5;
          }
          $3_1 = $3_1 + 1 | 0;
          if ($3_1 >>> 0 < $1_1 >>> 0) {
           continue label$12
          }
          break label$12;
         };
        }
        if (!$4_1) {
         break label$9
        }
        $3_1 = 0;
        HEAP16[($0_1 + 8 | 0) >> 1] = 0;
        continue label$10;
       };
      }
      label$14 : {
       if ((HEAP8[(0 + 62472 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$14
       }
       if (!($828(2 | 0, 62472 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
       $827(59094 | 0, $2_1 + 16 | 0 | 0);
      }
      $3_1 = 0;
      $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if ($0_1) {
       continue label$8
      }
      break label$5;
     };
    }
    $859(59075 | 0, 58945 | 0, 109 | 0);
    abort();
   }
   $3_1 = 0;
   if (!($835(62472 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $0_1;
   $827(59017 | 0, $2_1 | 0);
  }
  label$15 : {
   $8_1 = $2_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $3_1 | 0;
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($0_1 >>> $1_1 | 0) & 1 | 0)) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (32 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $859(59121 | 0, 58945 | 0, 82 | 0);
   abort();
  }
  return $1_1 | 0;
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 142 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 144 | 0);
   }
   label$6 : {
    if (!($807($0_1 | 0, $1_1 | 0) | 0)) {
     break label$6
    }
    return 1 | 0;
   }
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
  return 0 | 0;
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($0_1 + 32 | 0) >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $2_1 = 1;
    if (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) - (HEAPU16[($0_1 + 12 | 0) >> 1] | 0) | 0) >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $26_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 214 | 0);
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!($806($0_1 | 0, $1_1 | 0) | 0)) {
        break label$6
       }
       label$8 : while (1) {
        label$9 : {
         if (!($807($0_1 | 0, $1_1 | 0) | 0)) {
          break label$9
         }
         $1_1 = ($1_1 - $0_1 | 0) + -32 | 0;
         $26_1 = $1_1;
         $2_1 = HEAPU16[($0_1 + 12 | 0) >> 1] | 0;
         $1_1 = ($1_1 >>> 0) / ($2_1 >>> 0) | 0;
         if ($26_1 - Math_imul($1_1, $2_1) | 0) {
          break label$5
         }
         $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + (($1_1 >>> 3 | 0) & 536870908 | 0) | 0;
         $3_1 = HEAP32[$2_1 >> 2] | 0;
         $1_1 = 1 << ($1_1 & 31 | 0) | 0;
         if (!($3_1 & $1_1 | 0)) {
          break label$4
         }
         HEAP32[$2_1 >> 2] = $3_1 & ($1_1 ^ -1 | 0) | 0;
         $1_1 = HEAPU16[($0_1 + 10 | 0) >> 1] | 0;
         if ($1_1 >>> 0 >= (HEAPU16[($0_1 + 14 | 0) >> 1] | 0) >>> 0) {
          break label$3
         }
         HEAP16[($0_1 + 10 | 0) >> 1] = $1_1 + 1 | 0;
         return;
        }
        $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if ($0_1) {
         continue label$8
        }
        break label$8;
       };
       $859(59121 | 0, 58945 | 0, 233 | 0);
       abort();
      }
      $859(59123 | 0, 58945 | 0, 215 | 0);
      abort();
     }
     $859(59127 | 0, 58945 | 0, 216 | 0);
     abort();
    }
    $859(59155 | 0, 58945 | 0, 222 | 0);
    abort();
   }
   $859(59187 | 0, 58945 | 0, 227 | 0);
   abort();
  }
  $859(59219 | 0, 58945 | 0, 229 | 0);
  abort();
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $8_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (!$1_1) {
        break label$7
       }
       if (!$2_1) {
        break label$6
       }
       if (!$0_1) {
        break label$5
       }
       if ($1_1 >>> 0 >= 65536 >>> 0) {
        break label$4
       }
       if ($2_1 >>> 0 >= 65536 >>> 0) {
        break label$3
       }
       $1_1 = $1_1 + 31 | 0;
       $4_1 = $1_1 & -32 | 0;
       $5_1 = Math_imul($4_1, $2_1);
       $6_1 = ($1_1 >>> 3 | 0) & 536870908 | 0;
       $7_1 = ($5_1 + $6_1 | 0) + 32 | 0;
       $1_1 = FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0]($0_1, $7_1) | 0;
       label$8 : {
        if ((HEAP8[(0 + 62472 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$8
        }
        if (!($828(2 | 0, 62472 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$8
        }
        HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
        HEAP32[($3_1 + 20 | 0) >> 2] = 32;
        HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
        $827(59298 | 0, $3_1 + 16 | 0 | 0);
       }
       label$9 : {
        label$10 : {
         if ($1_1) {
          break label$10
         }
         $1_1 = 0;
         if (!($835(62472 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$3_1 >> 2] = $7_1;
         $827(59348 | 0, $3_1 | 0);
         break label$9;
        }
        $845($1_1 | 0, 32 | 0, $1_1 + 28 | 0 | 0, 58936 | 0);
        HEAP32[($1_1 + 24 | 0) >> 2] = $0_1;
        HEAP32[($1_1 + 4 | 0) >> 2] = 212;
        HEAP32[$1_1 >> 2] = 213;
        HEAP32[($1_1 + 20 | 0) >> 2] = 0;
        $0_1 = ($1_1 + $5_1 | 0) + 32 | 0;
        HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
        HEAP16[($1_1 + 14 | 0) >> 1] = $4_1;
        HEAP16[($1_1 + 12 | 0) >> 1] = $2_1;
        HEAP16[($1_1 + 10 | 0) >> 1] = $4_1;
        HEAP16[($1_1 + 8 | 0) >> 1] = 0;
        $822($0_1 | 0, 0 | 0, $6_1 | 0) | 0;
       }
       label$11 : {
        $9_1 = $3_1 + 32 | 0;
        if ($9_1 >>> 0 < global$2 >>> 0) {
         fimport$11()
        }
        global$0 = $9_1;
       }
       return $1_1 | 0;
      }
      $859(59248 | 0, 58945 | 0, 255 | 0);
      abort();
     }
     $859(59254 | 0, 58945 | 0, 256 | 0);
     abort();
    }
    $859(59264 | 0, 58945 | 0, 257 | 0);
    abort();
   }
   $859(59270 | 0, 58945 | 0, 258 | 0);
   abort();
  }
  $859(59282 | 0, 58945 | 0, 259 | 0);
  abort();
 }
 
 function $810($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $808($0_1 | 0, $1_1 | 0);
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $804($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
     break label$1
    }
   }
   $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 292 | 0);
  }
  label$3 : while (1) {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) == (58936 | 0)) {
      break label$4
     }
    }
    $846($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 58936 | 0, 58945 | 0, 295 | 0);
   }
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   $845($0_1 | 0, 32 | 0, $0_1 + 28 | 0 | 0, 0 | 0);
   FUNCTION_TABLE[HEAP32[($2_1 + 4 | 0) >> 2] | 0]($2_1, $0_1);
   $0_1 = $1_1;
   if ($0_1) {
    continue label$3
   }
   break label$3;
  };
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP32[(0 + 63456 | 0) >> 2] | 0 | 0) != ($867() | 0 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 59429;
   $860(59378 | 0, $1_1 | 0);
   $814();
   abort();
  }
  $0_1 = $963($0_1 | 0) | 0;
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $0_1 | 0;
 }
 
 function $814() {
  $860(59548 | 0, 0 | 0);
  fimport$1();
  abort();
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $2_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $2_1;
  }
  label$3 : {
   if ((HEAP32[(0 + 63456 | 0) >> 2] | 0 | 0) != ($867() | 0 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = 59441;
   $860(59378 | 0, $1_1 | 0);
   $814();
   abort();
  }
  $964($0_1 | 0);
  label$4 : {
   $3_1 = $1_1 + 16 | 0;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
 }
 
 function $816() {
  var $0_1 = 0;
  label$1 : {
   label$2 : {
    if (!($867() | 0)) {
     break label$2
    }
    label$3 : {
     $0_1 = HEAP32[(0 + 63460 | 0) >> 2] | 0;
     if ($0_1) {
      break label$3
     }
     if ($817(63464 | 0) | 0) {
      break label$1
     }
     $0_1 = HEAP32[(0 + 63460 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 63460 | 0) >> 2] = $0_1 + 1 | 0;
    return 0 | 0;
   }
   $814();
   abort();
  }
  return $818(616 | 0, 6 | 0) | 0 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return $966($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $862(59451 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $913(HEAP32[(0 + 61164 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $820($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  label$3 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $821($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $974($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $823($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $973($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $869($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $825() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 63460 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[(0 + 63460 | 0) >> 2] = $0_1;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $969(63464 | 0) | 0;
  }
 }
 
 function $826($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $4_1 = HEAP32[(0 + 62504 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$4
    }
    $4_1 = $848($4_1 | 0, $3_1 + 8 | 0 | 0) | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = $3_1 + 8 | 0 | $0_1 | 0;
    HEAP16[($4_1 + 4 | 0) >> 1] = $821($4_1 + 6 | 0 | 0, 246 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $852($3_1 + 8 | 0 | 0);
    break label$3;
   }
   label$5 : {
    if (($0_1 + -1 | 0) >>> 0 > 2 >>> 0) {
     break label$5
    }
    label$6 : {
     $4_1 = $963(($980($1_1 | 0) | 0) + 2 | 0 | 0) | 0;
     if (!$4_1) {
      break label$6
     }
     $876($4_1 | 0, $1_1 | 0) | 0;
     $7_1 = $4_1 + ($980($4_1 | 0) | 0) | 0;
     $8_1 = 10;
     HEAP8[$7_1 >> 0] = $8_1;
     HEAP8[($7_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
     $819($4_1 | 0, $2_1 | 0) | 0;
     $964($4_1 | 0);
     break label$3;
    }
    $819($1_1 | 0, $2_1 | 0) | 0;
    break label$3;
   }
   $819($1_1 | 0, $2_1 | 0) | 0;
  }
  label$7 : {
   $6_1 = $3_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $827($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $826(1 | 0, $0_1 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $828($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 64 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $5_1 = 0;
  label$3 : {
   if (!($829($1_1 | 0, $0_1 | 0) | 0)) {
    break label$3
   }
   $854($4_1 + 48 | 0 | 0, 16 | 0);
   label$4 : {
    label$5 : {
     if (!$2_1) {
      break label$5
     }
     HEAP32[($4_1 + 44 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 40 | 0) >> 2] = 0;
     label$6 : {
      if (($923($4_1 + 40 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($4_1 + 40 | 0) >> 2] = 0;
     }
     $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $830($0_1 | 0) | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
     $5_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     HEAP32[($4_1 + 28 | 0) >> 2] = $5_1 ? $5_1 : 59565;
     HEAP32[($4_1 + 20 | 0) >> 2] = $4_1 + 48 | 0;
     $831(0 | 0, $0_1 | 0, $1_1 | 0, $4_1 | 0, $4_1 + 16 | 0 | 0);
     $1_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$4
     }
     $964($1_1 | 0);
     break label$4;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = $830($0_1 | 0) | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 48 | 0;
    $832(0 | 0, $1_1 | 0, 59579 | 0, $4_1 | 0);
   }
   $5_1 = 1;
  }
  label$7 : {
   $7_1 = $4_1 + 64 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $5_1 | 0;
 }
 
 function $829($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($2_1) {
     break label$2
    }
    $2_1 = 0;
    if ($833($0_1 | 0) | 0) {
     break label$1
    }
    $2_1 = HEAPU8[$0_1 >> 0] | 0;
   }
   $2_1 = (($2_1 << 24 | 0) >> 24 | 0 | 0) <= ($1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $830($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 >>> 0 < 6 >>> 0 ? ($0_1 << 2 | 0) + 59808 | 0 : 59808) | 0;
 }
 
 function $831($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $7_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $6_1 = HEAP8[$2_1 >> 0] | 0;
  $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $6_1 = $4_1 ? 0 - $6_1 | 0 : $6_1;
  label$3 : {
   if (!$4_1) {
    break label$3
   }
   FUNCTION_TABLE[$4_1](2, $1_1, $2_1, 59566, HEAP32[($5_1 + 12 | 0) >> 2] | 0);
  }
  label$4 : {
   if (($6_1 | 0) > ($1_1 | 0)) {
    break label$4
   }
   $826(2 | 0, 59566 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
  }
  label$5 : {
   $8_1 = $5_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
 }
 
 function $832($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $7_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $5_1 = $0_1 & 15 | 0;
  $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $6_1 = 1;
  label$3 : {
   if ($0_1 & 16 | 0) {
    break label$3
   }
   $0_1 = HEAP8[$1_1 >> 0] | 0;
   $6_1 = ($5_1 | 0) >= (($3_1 ? 0 - $0_1 | 0 : $0_1) | 0);
  }
  label$4 : {
   if (!$3_1) {
    break label$4
   }
   FUNCTION_TABLE[$3_1](0, $5_1, $1_1, $2_1, HEAP32[($4_1 + 12 | 0) >> 2] | 0);
  }
  label$5 : {
   if (!$6_1) {
    break label$5
   }
   $826(0 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  }
  label$6 : {
   $8_1 = $4_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0;
  $857();
  $1_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $2_1 = $837(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
    if (!$2_1) {
     break label$2
    }
    if (($2_1 | 0) == ($0_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $4_1 = $2_1;
    label$3 : {
     label$4 : while (1) {
      if ($838($3_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
       break label$3
      }
      label$5 : {
       $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$5
       }
       if (($4_1 | 0) != ($0_1 | 0)) {
        continue label$4
       }
      }
      break label$4;
     };
     if (($4_1 | 0) == ($0_1 | 0)) {
      break label$1
     }
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
    break label$1;
   }
   $1_1 = $841(240 | 0, 3 | 0) | 0;
  }
  $858();
  return $1_1 | 0;
 }
 
 function $834($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 3 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(3 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 3 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(3 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(3 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $835($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 4 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(4 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 4 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(4 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(4 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $836($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = global$0 - 64 | 0;
   $5_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $4_1 = 0;
  label$3 : {
   if (!($829($0_1 | 0, 5 | 0) | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     HEAP32[($3_1 + 48 | 0) >> 2] = $2_1;
     HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     label$6 : {
      if (($923($3_1 + 44 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) > (-1 | 0)) {
       break label$6
      }
      HEAP32[($3_1 + 44 | 0) >> 2] = 0;
     }
     $854($3_1 + 48 | 0 | 0, 16 | 0);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = $830(5 | 0) | 0;
     HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $4_1 ? $4_1 : 59565;
     HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 48 | 0;
     $831(0 | 0, 5 | 0, $0_1 | 0, $3_1 | 0, $3_1 + 16 | 0 | 0);
     $0_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $964($0_1 | 0);
     break label$4;
    }
    $854($3_1 + 48 | 0 | 0, 16 | 0);
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = $830(5 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $3_1 + 48 | 0;
    $832(5 | 0, $0_1 | 0, 59579 | 0, $3_1 | 0);
   }
   $4_1 = 1;
  }
  label$7 : {
   $6_1 = $3_1 + 64 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $2_1 = 0;
    $4_1 = $3_1;
    label$3 : {
     $5_1 = $838($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     if (($5_1 | 0) > (-1 | 0)) {
      break label$3
     }
     $4_1 = $3_1;
     label$4 : while (1) {
      $2_1 = $4_1;
      $4_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$2
      }
      $5_1 = $838($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      if (($5_1 | 0) <= (-1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$5_1) {
     break label$1
    }
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   HEAP8[($1_1 + 2 | 0) >> 0] = 0;
   $4_1 = HEAPU8[(0 + 62500 | 0) >> 0] | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   HEAP8[($1_1 + 1 | 0) >> 0] = $4_1;
   HEAP8[$1_1 >> 0] = $4_1;
   label$5 : {
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
     break label$5;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
    HEAP32[(0 + 62488 | 0) >> 2] = $1_1;
   }
   $4_1 = $1_1;
  }
  return $4_1 | 0;
 }
 
 function $838($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $2_1 = 0;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (($3_1 | 0) == (42 | 0)) {
     break label$1
    }
    $4_1 = HEAP8[$1_1 >> 0] | 0;
    if (($4_1 | 0) == (42 | 0)) {
     break label$1
    }
    $2_1 = (($3_1 << 24 | 0) >> 24 | 0) - $4_1 | 0;
    if ($2_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    $2_1 = 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $840($0_1 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   return $841(951 | 0, $1_1 | 0) | 0 | 0;
  }
  HEAP32[(0 + 62500 | 0) >> 2] = $0_1;
  $857();
  label$2 : {
   $1_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[$1_1 >> 0] = $2_1 >>> 0 > $0_1 >>> 0 ? $0_1 : $2_1;
    $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $858();
  return 0 | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 < 6 >>> 0) {
    break label$1
   }
   $1_1 = $841(220 | 0, 2 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $862(59590 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $842() {
  $853();
  return $855() | 0 | 0;
 }
 
 function $843() {
  var $1_1 = 0, $0_1 = 0;
  label$1 : {
   $0_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    HEAP32[(0 + 62488 | 0) >> 2] = $1_1;
    label$3 : {
     if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
      break label$3
     }
     $815($0_1 | 0);
     $1_1 = HEAP32[(0 + 62488 | 0) >> 2] | 0;
    }
    $0_1 = $1_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   $1_1 = HEAP32[(0 + 62492 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : while (1) {
    HEAP32[(0 + 62492 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$6
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      $815($0_1 | 0);
      continue label$7;
     };
    }
    $815($1_1 | 0);
    $1_1 = HEAP32[(0 + 62492 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$5
    }
    break label$5;
   };
  }
  label$8 : {
   label$9 : while (1) {
    $1_1 = HEAP32[(0 + 62496 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$8
    }
    HEAP32[(0 + 62496 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    label$10 : {
     label$11 : while (1) {
      $0_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$10
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
      $815($0_1 | 0);
      continue label$11;
     };
    }
    $815($1_1 | 0);
    continue label$9;
   };
  }
  $844();
  $856();
 }
 
 function $844() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $0_1 = 0;
  label$1 : {
   $1_1 = HEAP32[(0 + 62508 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = $0_1 << 4 | 0;
     $3_1 = $2_1 + 62528 | 0;
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     $815($4_1 | 0);
     HEAP8[($2_1 + 62516 | 0) >> 0] = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[($2_1 + 62520 | 0) >> 2] = 0;
     $1_1 = HEAP32[(0 + 62508 | 0) >> 2] | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    if ($0_1 >>> 0 < $1_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 62508 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 62512 | 0) >> 2] = 0;
 }
 
 function $845($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    HEAP32[($0_1 + $4_1 | 0) >> 2] = -559038737;
    $4_1 = $4_1 + 4 | 0;
    if (($4_1 | 3 | 0) >>> 0 < $1_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$2_1 >> 2] = $3_1 ? $3_1 : 59677;
 }
 
 function $846($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $6_1 = global$0 - 48 | 0;
   $7_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if (!$0_1) {
      break label$5
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
      break label$4
     }
     label$6 : {
      $8_1 = $6_1 + 48 | 0;
      if ($8_1 >>> 0 < global$2 >>> 0) {
       fimport$11()
      }
      global$0 = $8_1;
     }
     return;
    }
    HEAP32[$6_1 >> 2] = $3_1;
    HEAP8[(0 + 62772 | 0) >> 0] = 0;
    $820(62772 | 0, 128 | 0, 59685 | 0, $6_1 | 0) | 0;
    break label$3;
   }
   HEAP8[(0 + 62772 | 0) >> 0] = 0;
   label$8 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (($2_1 | 0) != (59677 | 0)) {
     break label$8
    }
    HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
    $820(62772 | 0, 128 | 0, 59713 | 0, $6_1 + 16 | 0 | 0) | 0;
    break label$3;
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
   $820(62772 | 0, 128 | 0, 59745 | 0, $6_1 + 32 | 0 | 0) | 0;
  }
  $859(62772 | 0, $4_1 | 0, $5_1 | 0);
  abort();
 }
 
 function $847($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $5$hi = 0, $5_1 = 0, $6_1 = 0, $6$hi = 0, $21_1 = 0, $4_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $8_1 = 0, $8$hi = 0, $35_1 = 0, $35$hi = 0, $7$hi = 0;
  i64toi32_i32$0 = $0$hi;
  $8_1 = $0_1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $5_1 = $21_1;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $6_1 = i64toi32_i32$4;
  $6$hi = i64toi32_i32$5;
  label$1 : {
   $3_1 = $2_1 + -1 | 0;
   if (($3_1 | 0) < (0 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
   $3_1 = $2_1 + -2 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  label$2 : {
   label$3 : while (1) {
    $4_1 = 59787;
    $2_1 = $3_1;
    if (($2_1 | 0) < (0 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_sdiv($5_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $35_1 = i64toi32_i32$1;
    $35$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = $35$hi;
    i64toi32_i32$3 = $35_1;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
    i64toi32_i32$4 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    HEAP8[($1_1 + $2_1 | 0) >> 0] = i64toi32_i32$2 + 48 | 0;
    $3_1 = $2_1 + -1 | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    $5_1 = $6_1;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 18;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
   if (($2_1 | 0) < (1 | 0)) {
    break label$2
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$4
    }
    if (!$3_1) {
     break label$2
    }
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 45;
    $3_1 = $2_1 + -2 | 0;
   }
   $4_1 = ($1_1 + $3_1 | 0) + 1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAPU8[($0_1 + 9 | 0) >> 0] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  $0_1 = $850($0_1 | 0, $849($0_1 + 12 | 0 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  $851($0_1 | 0, 0 | 0);
  return $0_1 + 4 | 0 | 0;
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $1_1 | 0;
 }
 
 function $850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 + Math_imul(HEAP32[$0_1 >> 2] | 0, ($1_1 >>> 0) % ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) | 0) | 0) + 24 | 0 | 0;
 }
 
 function $851($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  $851(HEAP32[$0_1 >> 2] | 0 | 0, 2 | 0);
 }
 
 function $853() {
  fimport$2(63492 | 0, 0 | 0) | 0;
 }
 
 function $854($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $6_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  fimport$2($2_1 + 24 | 0 | 0, 0 | 0) | 0;
  $3_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  $4_1 = HEAP32[(0 + 63496 | 0) >> 2] | 0;
  $5_1 = $3_1 - $4_1 | 0;
  label$3 : {
   label$4 : {
    if (($3_1 | 0) < ($4_1 | 0)) {
     break label$4
    }
    $3_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    break label$3;
   }
   $3_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
   $5_1 = $5_1 + 1e6 | 0;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = ($5_1 | 0) / (1e3 | 0) | 0;
  $5_1 = $3_1 - (HEAP32[(0 + 63492 | 0) >> 2] | 0) | 0;
  HEAP32[$2_1 >> 2] = ($5_1 | 0) / (3600 | 0) | 0;
  $3_1 = ($5_1 | 0) / (60 | 0) | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = ($3_1 | 0) % (60 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $5_1 - Math_imul($3_1, 60) | 0;
  $820($0_1 | 0, $1_1 | 0, 59832 | 0, $2_1 | 0) | 0;
  label$5 : {
   $7_1 = $2_1 + 32 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $855() {
  return 0 | 0;
 }
 
 function $856() {
  
 }
 
 function $857() {
  $967(63500 | 0) | 0;
 }
 
 function $858() {
  $968(63500 | 0) | 0;
 }
 
 function $859($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = $0_1;
  $860(59852 | 0, $3_1 | 0);
  $814();
  abort();
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $826(3 | 0, $0_1 | 0, $1_1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $861($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   label$4 : {
    if ($2_1) {
     break label$4
    }
    $2_1 = 59885;
    if ($3_1 >>> 0 > 10 >>> 0) {
     break label$4
    }
    $2_1 = HEAP32[(($3_1 << 2 | 0) + 59888 | 0) >> 2] | 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$4_1 >> 2] = $2_1;
   $860(60140 | 0, $4_1 | 0);
  }
  label$5 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $862($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $861($0_1 | 0, $1_1 | 0, 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $6_1 = global$0 - 16 | 0;
   $7_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  label$3 : {
   label$4 : {
    if ($864($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 12 | 0 | 0) | 0) {
     break label$4
    }
    $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    $0_1 = $3_1 + 1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
    label$5 : {
     $2_1 = HEAP32[$5_1 >> 2] | 0;
     if ($2_1 >>> 0 < $0_1 >>> 0) {
      break label$5
     }
     HEAP32[$5_1 >> 2] = $2_1 - $0_1 | 0;
     $5_1 = 0;
     break label$3;
    }
    $0_1 = $3_1 - $2_1 | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
    $2_1 = (($0_1 >>> 3 | 0) + (HEAP32[$4_1 >> 2] | 0) | 0) + 1 | 0;
    if ($2_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$5_1 >> 2] = ($0_1 ^ -1 | 0) & 7 | 0;
    $5_1 = 0;
    break label$3;
   }
   $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
   $5_1 = -1;
  }
  label$6 : {
   $8_1 = $6_1 + 16 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $5_1 | 0;
 }
 
 function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($3_1 | 0) < (8 | 0)) {
      break label$3
     }
     $3_1 = -1;
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$2
     }
     $827(60389 | 0, 0 | 0);
     return -1 | 0;
    }
    HEAP32[$6_1 >> 2] = 0;
    $7_1 = 0;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        if (($3_1 | 0) < (0 | 0)) {
         break label$7
        }
        $8_1 = $0_1 + $2_1 | 0;
        label$8 : while (1) {
         if (((HEAPU8[$8_1 >> 0] | 0) >>> $3_1 | 0) & 1 | 0) {
          break label$5
         }
         $7_1 = $7_1 + 1 | 0;
         HEAP32[$6_1 >> 2] = $7_1;
         $9_1 = ($3_1 | 0) > (0 | 0);
         $3_1 = $3_1 + -1 | 0;
         if ($9_1) {
          continue label$8
         }
         break label$8;
        };
       }
       $3_1 = 7;
       $2_1 = $2_1 + 1 | 0;
       if ($2_1 >>> 0 < $1_1 >>> 0) {
        continue label$6
       }
       break label$4;
      };
     }
     if ($7_1 >>> 0 <= ((($1_1 << 2 | 0) & 2147483644 | 0) + -1 | 0) >>> 0) {
      break label$1
     }
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     $827(60416 | 0, 0 | 0);
    }
    $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $3_1;
  return 0 | 0;
 }
 
 function $865($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$1_1 >> 2] = $0_1 ? $0_1 + -1 | 0 : 0;
 }
 
 function $866($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $14_1 = 0, $14$hi = 0, i64toi32_i32$4 = 0, $9_1 = 0, i64toi32_i32$3 = 0, $23_1 = 0, $13_1 = 0, $12_1 = 0, $10_1 = 0, $167$hi = 0, $172$hi = 0;
  label$1 : {
   $6_1 = global$0 - 96 | 0;
   $12_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
    break label$3
   }
   if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
    break label$3
   }
   $7_1 = HEAPU8[($0_1 + $2_1 | 0) >> 0] | 0;
   $8_1 = 0;
   label$4 : {
    $9_1 = $2_1 + 1 | 0;
    if ($9_1 >>> 0 >= $1_1 >>> 0) {
     break label$4
    }
    $8_1 = HEAPU8[($0_1 + $9_1 | 0) >> 0] | 0;
   }
   HEAP32[($6_1 + 76 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
   HEAP32[($6_1 + 68 | 0) >> 2] = $8_1;
   HEAP32[($6_1 + 64 | 0) >> 2] = $7_1;
   $827(60167 | 0, $6_1 + 64 | 0 | 0);
  }
  label$5 : {
   label$6 : {
    if ($864($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $6_1 + 92 | 0 | 0, $6_1 + 88 | 0 | 0, $6_1 + 84 | 0 | 0) | 0) {
     break label$6
    }
    label$7 : {
     $2_1 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
     if ($2_1 >>> 0 < 65 >>> 0) {
      break label$7
     }
     if (!($835(62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $827(60192 | 0, 0 | 0);
     break label$6;
    }
    label$8 : {
     label$9 : {
      $3_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$9
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($6_1 + 88 | 0) >> 2] = $3_1;
      break label$8;
     }
     $3_1 = 7;
     HEAP32[($6_1 + 88 | 0) >> 2] = 7;
     $8_1 = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6_1 + 92 | 0) >> 2] = $8_1;
     if ($8_1 >>> 0 >= $1_1 >>> 0) {
      break label$6
     }
    }
    label$10 : {
     label$11 : {
      label$12 : {
       if ($2_1) {
        break label$12
       }
       $2_1 = 0;
       if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$11
       }
       $2_1 = 0;
       if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$11
       }
       $2_1 = 0;
       $827(60231 | 0, 0 | 0);
       break label$11;
      }
      label$13 : {
       label$14 : {
        if ($2_1 >>> 0 > 8 >>> 0) {
         break label$14
        }
        if (($2_1 | 0) > ($3_1 + 1 | 0 | 0)) {
         break label$14
        }
        $7_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
        $8_1 = $3_1 - $2_1 | 0;
        $3_1 = ((HEAPU8[($0_1 + $7_1 | 0) >> 0] | 0) >>> ($8_1 + 1 | 0) | 0) & (HEAPU8[($2_1 + 60252 | 0) >> 0] | 0) | 0;
        label$15 : {
         if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
          break label$15
         }
         if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
          break label$15
         }
         HEAP32[($6_1 + 52 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 48 | 0) >> 2] = $2_1;
         $827(60261 | 0, $6_1 + 48 | 0 | 0);
        }
        i64toi32_i32$0 = 0;
        $14_1 = $3_1;
        $14$hi = i64toi32_i32$0;
        HEAP32[($6_1 + 88 | 0) >> 2] = $8_1;
        if (($8_1 | 0) != (-1 | 0)) {
         break label$13
        }
        $8_1 = 7;
        HEAP32[($6_1 + 88 | 0) >> 2] = 7;
        $3_1 = $7_1 + 1 | 0;
        HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
        if ($3_1 >>> 0 < $1_1 >>> 0) {
         break label$13
        }
        break label$6;
       }
       $7_1 = 0;
       label$16 : {
        if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
         break label$16
        }
        if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
         break label$16
        }
        HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
        HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
        HEAP32[($6_1 + 40 | 0) >> 2] = $3_1;
        $827(60302 | 0, $6_1 + 32 | 0 | 0);
       }
       $10_1 = $2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1;
       i64toi32_i32$0 = 0;
       $14_1 = 0;
       $14$hi = i64toi32_i32$0;
       $11_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
       label$17 : while (1) {
        $9_1 = HEAPU8[($0_1 + $11_1 | 0) >> 0] | 0;
        label$18 : {
         label$19 : {
          if (!$3_1) {
           break label$19
          }
          $8_1 = $3_1 + -1 | 0;
          break label$18;
         }
         $8_1 = 7;
         $11_1 = $11_1 + 1 | 0;
         if ($11_1 >>> 0 >= $1_1 >>> 0) {
          break label$10
         }
        }
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$2 = $14_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $23_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $167$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $167$hi;
        i64toi32_i32$0 = $23_1;
        i64toi32_i32$2 = $172$hi;
        i64toi32_i32$3 = ($9_1 >>> $3_1 | 0) & 1 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
        $14_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$2;
        $3_1 = $8_1;
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         continue label$17
        }
        break label$17;
       };
       HEAP32[($6_1 + 88 | 0) >> 2] = $8_1;
       HEAP32[($6_1 + 92 | 0) >> 2] = $11_1;
       if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
        break label$13
       }
       if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
        break label$13
       }
       i64toi32_i32$2 = $14$hi;
       HEAP32[($6_1 + 20 | 0) >> 2] = $14_1;
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       $827(60335 | 0, $6_1 + 16 | 0 | 0);
      }
      $3_1 = 1;
      label$20 : while (1) {
       $0_1 = $3_1;
       $3_1 = $3_1 << 1 | 0;
       $1_1 = $2_1;
       $2_1 = $2_1 + -1 | 0;
       if ($1_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[($6_1 + 84 | 0) >> 2] = -1;
      i64toi32_i32$2 = $14$hi;
      $2_1 = ($14_1 + $0_1 | 0) + -1 | 0;
      $3_1 = $8_1;
     }
     label$21 : {
      if (!$4_1) {
       break label$21
      }
      HEAP32[$4_1 >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     }
     label$22 : {
      if (!$5_1) {
       break label$22
      }
      HEAP32[$5_1 >> 2] = $3_1;
     }
     if ((HEAP8[(0 + 62900 | 0) >> 0] | 0 | 0) > (2 | 0)) {
      break label$5
     }
     if (!($828(2 | 0, 62900 | 0, 0 | 0, 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[$6_1 >> 2] = $2_1;
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
     $827(60366 | 0, $6_1 | 0);
     break label$5;
    }
    HEAP32[($6_1 + 88 | 0) >> 2] = 7;
    HEAP32[($6_1 + 92 | 0) >> 2] = $11_1;
   }
   $865($1_1 | 0, $4_1 | 0, $5_1 | 0);
   $2_1 = -1;
  }
  label$23 : {
   $13_1 = $6_1 + 96 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $2_1 | 0;
 }
 
 function $867() {
  return 62916 | 0;
 }
 
 function $868() {
  return 63592 | 0;
 }
 
 function $869($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $871($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $872($0_1) {
  $0_1 = $0_1 | 0;
  return ($871($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($4_1) {
      break label$3
     }
     $2_1 = $3_1;
     break label$1;
    }
    label$4 : {
     $3_1 = $3_1 & 255 | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$4
     }
     if (($872($3_1 | 0) | 0 | 0) == ($872(HEAPU8[$1_1 >> 0] | 0 | 0) | 0 | 0)) {
      break label$4
     }
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     break label$1;
    }
    $1_1 = $1_1 + 1 | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $0_1 = $0_1 + 1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($872($2_1 & 255 | 0 | 0) | 0) - ($872(HEAPU8[$1_1 >> 0] | 0 | 0) | 0) | 0 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($980($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $875($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $874($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $878($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 ^ $0_1 | 0) & 3 | 0) {
      break label$3
     }
     $3_1 = ($2_1 | 0) != (0 | 0);
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      if (!($1_1 & 3 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       if (!$3_1) {
        break label$1
       }
       $0_1 = $0_1 + 1 | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       if (!$2_1) {
        break label$4
       }
       if ($1_1 & 3 | 0) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     label$6 : while (1) {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$3
      }
      HEAP32[$0_1 >> 2] = $3_1;
      $0_1 = $0_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$2
    }
    label$7 : while (1) {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $3_1;
     if (!$3_1) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $2_1 = 0;
  }
  $974($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $879($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $878($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $880($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $881($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $880($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $978($0_1 | 0) | 0;
  i64toi32_i32$0 = $880($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $979($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $883($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $978($0_1 | 0) | 0;
  }
  $882($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $924() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $925();
  }
  $3_1 = $884($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $964($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $964($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $979($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $885($0_1 | 0) | 0 | 0;
    }
    $1_1 = $978($0_1 | 0) | 0;
    $2_1 = $885($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $979($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 63296 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $884(HEAP32[(0 + 63296 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($924() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $978($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $885($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $979($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $925();
  }
  return $2_1 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $886($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $913(HEAP32[(0 + 61160 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $887($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $894($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  label$3 : {
   $6_1 = $4_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $3_1 | 0;
 }
 
 function $888($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $889($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $888($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $978($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $888($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $979($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($868() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $891($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $7_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!($948(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$6
      }
      $2_1 = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = -1;
      break label$5;
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$4
     }
     $2_1 = $4_1;
    }
    HEAP32[$0_1 >> 2] = ($2_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$3;
   }
   label$7 : {
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > $6_1 >>> 0) {
     break label$7
    }
    $2_1 = $4_1;
    break label$3;
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  }
  label$8 : {
   $8_1 = $3_1 + 32 | 0;
   if ($8_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  return $2_1 | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($875(60461 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$6
      }
      HEAP32[($868() | 0) >> 2] = 28;
      break label$5;
     }
     $3_1 = $963(1176 | 0) | 0;
     if ($3_1) {
      break label$4
     }
    }
    $3_1 = 0;
    break label$3;
   }
   $974($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$7 : {
    if ($875($1_1 | 0, 43 | 0) | 0) {
     break label$7
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$8 : {
    label$9 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$9
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$8;
    }
    label$10 : {
     $1_1 = fimport$4($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$10
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$4($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$11 : {
    if ($1_1 & 8 | 0) {
     break label$11
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$5($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$11
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 214;
   HEAP32[($3_1 + 36 | 0) >> 2] = 215;
   HEAP32[($3_1 + 32 | 0) >> 2] = 216;
   HEAP32[($3_1 + 12 | 0) >> 2] = 217;
   label$12 : {
    if (HEAP32[(0 + 63532 | 0) >> 2] | 0) {
     break label$12
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $920($3_1 | 0) | 0;
  }
  label$13 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     if ($875(60465 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$5
     }
     HEAP32[($868() | 0) >> 2] = 28;
     break label$4;
    }
    $3_1 = $927($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $890(fimport$3($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$3
    }
    $4_1 = $892($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$3
    }
    fimport$7($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  label$6 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  return $4_1 | 0;
 }
 
 function $894($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $6_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  $973($4_1 + 8 | 0 | 0, 60472 | 0, 144 | 0) | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$5
     }
     if ($1_1) {
      break label$4
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $913($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$3;
   }
   HEAP32[($868() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  label$6 : {
   $7_1 = $4_1 + 160 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $0_1 | 0;
 }
 
 function $895($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $973($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $896($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $978($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $973($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($898($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $979($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $979($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $897($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $4_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    if ($948($1009(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = -1;
   HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  label$5 : {
   $5_1 = $3_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $900($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($901() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($868() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($868() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $901() {
  return $867() | 0 | 0;
 }
 
 function $902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $900($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $903($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$903(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $904($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = global$0 - 208 | 0;
   $8_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $8_1;
  }
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $974($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (($905(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$4
    }
    $1_1 = -1;
    break label$3;
   }
   label$5 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$5
    }
    $2_1 = $978($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$6 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$6
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$7 : {
    label$8 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$8
     }
     $1_1 = $905($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$7;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $905($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$7
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$3
   }
   $979($0_1 | 0);
  }
  label$9 : {
   $9_1 = $5_1 + 208 | 0;
   if ($9_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  return $1_1 | 0;
 }
 
 function $905($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $14_1 = 0, $13_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $24_1 = 0, $24$hi = 0, $10_1 = 0, $21_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $23_1 = 0, $22_1 = 0, $8_1 = 0, $282_1 = 0;
  label$1 : {
   $7_1 = global$0 - 80 | 0;
   $22_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $22_1;
  }
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     label$6 : {
      if (($11_1 | 0) < (0 | 0)) {
       break label$6
      }
      label$7 : {
       if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
        break label$7
       }
       HEAP32[($868() | 0) >> 2] = 61;
       $11_1 = -1;
       break label$6;
      }
      $11_1 = $1_1 + $11_1 | 0;
     }
     $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
     $1_1 = $12_1;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$11
         }
         label$12 : while (1) {
          label$13 : {
           label$14 : {
            label$15 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$15
             }
             $13_1 = $1_1;
             break label$14;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$13
            }
            $13_1 = $1_1;
            label$16 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$14
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$16
             }
             break label$16;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$17 : {
            if (!$0_1) {
             break label$17
            }
            $906($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$5
           }
           $16_1 = -1;
           $13_1 = 1;
           $14_1 = $899(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$18 : {
            if (!$14_1) {
             break label$18
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$18
            }
            $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
            $10_1 = 1;
            $13_1 = 3;
           }
           $1_1 = $1_1 + $13_1 | 0;
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $13_1 = 0;
           label$19 : {
            label$20 : {
             $17_1 = HEAP8[$1_1 >> 0] | 0;
             $15_1 = $17_1 + -32 | 0;
             if ($15_1 >>> 0 <= 31 >>> 0) {
              break label$20
             }
             $14_1 = $1_1;
             break label$19;
            }
            $14_1 = $1_1;
            $15_1 = 1 << $15_1 | 0;
            if (!($15_1 & 75913 | 0)) {
             break label$19
            }
            label$21 : while (1) {
             $14_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $15_1 | $13_1 | 0;
             $17_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $15_1 = $17_1 + -32 | 0;
             if ($15_1 >>> 0 > 31 >>> 0) {
              break label$19
             }
             $1_1 = $14_1;
             $15_1 = 1 << $15_1 | 0;
             if ($15_1 & 75913 | 0) {
              continue label$21
             }
             break label$21;
            };
           }
           label$22 : {
            label$23 : {
             if (($17_1 | 0) != (42 | 0)) {
              break label$23
             }
             label$24 : {
              label$25 : {
               if (!($899(HEAP8[($14_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$25
               }
               $14_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($14_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$25
               }
               HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $14_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($14_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$24;
              }
              if ($10_1) {
               break label$4
              }
              $10_1 = 0;
              $18_1 = 0;
              label$26 : {
               if (!$0_1) {
                break label$26
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$22
             }
             $18_1 = 0 - $18_1 | 0;
             $13_1 = $13_1 | 8192 | 0;
             break label$22;
            }
            $18_1 = $907($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$4
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$27 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$27
            }
            label$28 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$28
             }
             label$29 : {
              if (!($899(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$29
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$29
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$27;
             }
             if ($10_1) {
              break label$4
             }
             label$30 : {
              label$31 : {
               if ($0_1) {
                break label$31
               }
               $19_1 = 0;
               break label$30;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$27;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $907($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $14_1 = 0;
           label$32 : while (1) {
            $15_1 = $14_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$3
            }
            $17_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $17_1;
            $14_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $17_1;
            $14_1 = HEAPU8[(($14_1 + Math_imul($15_1, 58) | 0) + 60575 | 0) >> 0] | 0;
            if (($14_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$32
            }
            break label$32;
           };
           if (!$14_1) {
            break label$3
           }
           label$33 : {
            label$34 : {
             label$35 : {
              label$36 : {
               if (($14_1 | 0) != (19 | 0)) {
                break label$36
               }
               $20_1 = -1;
               if (($16_1 | 0) <= (-1 | 0)) {
                break label$35
               }
               break label$3;
              }
              if (($16_1 | 0) < (0 | 0)) {
               break label$34
              }
              HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $14_1;
              i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $282_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $7_1;
              HEAP32[($7_1 + 64 | 0) >> 2] = $282_1;
              HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
             }
             $1_1 = 0;
             if (!$0_1) {
              continue label$5
             }
             break label$33;
            }
            if (!$0_1) {
             break label$8
            }
            $908($7_1 + 64 | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
            $17_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $21_1 = $13_1 & -65537 | 0;
           $13_1 = $13_1 & 8192 | 0 ? $21_1 : $13_1;
           $20_1 = 0;
           $16_1 = 60616;
           $14_1 = $9_1;
           label$37 : {
            label$38 : {
             label$39 : {
              label$40 : {
               label$41 : {
                label$42 : {
                 label$43 : {
                  label$44 : {
                   label$45 : {
                    label$46 : {
                     label$47 : {
                      label$48 : {
                       label$49 : {
                        label$50 : {
                         label$51 : {
                          label$52 : {
                           $1_1 = HEAP8[($17_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $15_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$37;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$38;
                           case 27:
                            break label$43;
                           case 12:
                           case 17:
                            break label$46;
                           case 23:
                            break label$47;
                           case 0:
                           case 32:
                            break label$48;
                           case 24:
                            break label$49;
                           case 22:
                            break label$50;
                           case 29:
                            break label$51;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$9;
                           default:
                            break label$52;
                           };
                          }
                          $14_1 = $9_1;
                          label$53 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$38;
                           case 2:
                            break label$41;
                           case 1:
                           case 3:
                            break label$9;
                           default:
                            break label$53;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$42
                          }
                          break label$10;
                         }
                         $20_1 = 0;
                         $16_1 = 60616;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $24_1 = i64toi32_i32$1;
                         $24$hi = i64toi32_i32$0;
                         break label$45;
                        }
                        $1_1 = 0;
                        label$54 : {
                         switch ($15_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$5;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$5;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$5;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$5;
                         case 7:
                          break label$54;
                         default:
                          continue label$5;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$5;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 60616;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $909(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$44
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$44
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 60616 | 0;
                      $20_1 = 2;
                      break label$44;
                     }
                     $20_1 = 0;
                     $16_1 = 60616;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $910(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$44
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$44;
                    }
                    label$61 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $24_1 = i64toi32_i32$1;
                     $24$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $32_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $33_1 = 0
                       } else {
                        $33_1 = 1
                       }
                       $34_1 = $33_1;
                      } else {
                       $34_1 = 0
                      }
                      $32_1 = $34_1;
                     }
                     if ($32_1) {
                      break label$61
                     }
                     i64toi32_i32$2 = $24$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $24$hi;
                     i64toi32_i32$1 = $24_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $24_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $24$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $24_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 60616;
                     break label$45;
                    }
                    label$62 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$62
                     }
                     $20_1 = 1;
                     $16_1 = 60617;
                     break label$45;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 60618 : 60616;
                   }
                   i64toi32_i32$5 = $24$hi;
                   $12_1 = $911($24_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $24_1 = i64toi32_i32$5;
                  $24$hi = i64toi32_i32$3;
                  label$63 : {
                   if ($19_1) {
                    break label$63
                   }
                   i64toi32_i32$3 = $24$hi;
                   if (!!($24_1 | i64toi32_i32$3 | 0)) {
                    break label$63
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$10;
                  }
                  i64toi32_i32$3 = $24$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($24_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$10;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 60626;
                 $1_1 = $870($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $14_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$9;
                }
                label$64 : {
                 if (!$19_1) {
                  break label$64
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$40;
                }
                $1_1 = 0;
                $912($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$39;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$65 : {
               label$66 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$65
                }
                label$67 : {
                 $15_1 = $902($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$67
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$67
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$66
                 }
                 break label$65;
                }
                break label$66;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$3
               }
              }
              $912($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$68 : {
               if ($1_1) {
                break label$68
               }
               $1_1 = 0;
               break label$39;
              }
              $15_1 = 0;
              $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$69 : while (1) {
               $12_1 = HEAP32[$14_1 >> 2] | 0;
               if (!$12_1) {
                break label$39
               }
               $12_1 = $902($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $15_1 = $12_1 + $15_1 | 0;
               if (($15_1 | 0) > ($1_1 | 0)) {
                break label$39
               }
               $906($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $14_1 = $14_1 + 4 | 0;
               if ($15_1 >>> 0 < $1_1 >>> 0) {
                continue label$69
               }
               break label$69;
              };
             }
             $912($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$5;
            }
            $1_1 = FUNCTION_TABLE[$5_1]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$5;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $14_1 = $9_1;
           $13_1 = $21_1;
           break label$9;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$12;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$3
        }
        if (!$10_1) {
         break label$8
        }
        $1_1 = 1;
        label$70 : {
         label$71 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$70
          }
          $908($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$71
          }
          break label$3;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 > 9 >>> 0) {
         break label$3
        }
        $20_1 = -1;
        if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
         break label$3
        }
        label$72 : {
         label$73 : while (1) {
          $13_1 = $1_1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) == (10 | 0)) {
           break label$72
          }
          if (!(HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0)) {
           continue label$73
          }
          break label$73;
         };
        }
        $20_1 = $13_1 >>> 0 < 9 >>> 0 ? -1 : 1;
        break label$3;
       }
       $14_1 = $9_1;
      }
      $15_1 = $14_1 - $12_1 | 0;
      $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
      $14_1 = $20_1 + $17_1 | 0;
      $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
      $912($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
      $906($0_1 | 0, $16_1 | 0, $20_1 | 0);
      $912($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
      $912($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
      $906($0_1 | 0, $12_1 | 0, $15_1 | 0);
      $912($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
      continue label$5;
     }
     break label$5;
    };
    $20_1 = 0;
    break label$3;
   }
   $20_1 = -1;
  }
  label$74 : {
   $23_1 = $7_1 + 80 | 0;
   if ($23_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  return $20_1 | 0;
 }
 
 function $906($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $976($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $907($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($899(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($899(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0, $83_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $83_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $83_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1]($0_1, $2_1);
  }
 }
 
 function $909($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 61104 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $910($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $911($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = global$0 - 256 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  label$3 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$3
   }
   if ($4_1 & 73728 | 0) {
    break label$3
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $974($5_1 | 0, $1_1 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$4 : {
    if ($3_1) {
     break label$4
    }
    label$5 : while (1) {
     $906($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$5
     }
     break label$5;
    };
   }
   $906($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  label$6 : {
   $7_1 = $5_1 + 256 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $913($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $904($0_1 | 0, $1_1 | 0, $2_1 | 0, 219 | 0, 220 | 0) | 0 | 0;
 }
 
 function $914($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $17_1 = 0, $16_1 = 0, $22_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $20_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $21_1 = 0, $15_1 = 0, $11_1 = 0, $12_1 = 0, $18_1 = 0, $27_1 = 0.0, $7_1 = 0, $25_1 = 0, $19_1 = 0, $25$hi = 0, $8_1 = 0, $14_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $26$hi = 0, $48_1 = 0, $24_1 = 0, $23_1 = 0, $26_1 = 0, $166_1 = 0, $168$hi = 0, $170$hi = 0, $172_1 = 0, $172$hi = 0, $174$hi = 0, $178_1 = 0, $178$hi = 0, $821_1 = 0;
  label$1 : {
   $6_1 = global$0 - 560 | 0;
   $23_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $23_1;
  }
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $916(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $25_1 = i64toi32_i32$0;
    $25$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$4
    }
    $7_1 = 1;
    $8_1 = 61120;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $916(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $25_1 = i64toi32_i32$2;
    $25$hi = i64toi32_i32$1;
    break label$3;
   }
   label$5 : {
    if (!($4_1 & 2048 | 0)) {
     break label$5
    }
    $7_1 = 1;
    $8_1 = 61123;
    break label$3;
   }
   $7_1 = $4_1 & 1 | 0;
   $8_1 = $7_1 ? 61126 : 61121;
  }
  label$6 : {
   label$7 : {
    i64toi32_i32$1 = $25$hi;
    i64toi32_i32$3 = $25_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$7
    }
    $9_1 = $7_1 + 3 | 0;
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 & -65537 | 0 | 0);
    $906($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $10_1 = ($5_1 >>> 5 | 0) & 1 | 0;
    $906($0_1 | 0, ($1_1 != $1_1 ? ($10_1 ? 61147 : 61151) : $10_1 ? 61139 : 61143) | 0, 3 | 0);
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $11_1 = $6_1 + 16 | 0;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       $1_1 = +$903(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$11
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $12_1 = $5_1 | 32 | 0;
       if (($12_1 | 0) != (97 | 0)) {
        break label$10
       }
       break label$8;
      }
      $12_1 = $5_1 | 32 | 0;
      if (($12_1 | 0) == (97 | 0)) {
       break label$8
      }
      $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $14_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$9;
     }
     $14_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $14_1;
     $13_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $15_1 = ($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $16_1 = $15_1;
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$14
       }
       $10_1 = ~~$1_1 >>> 0;
       break label$13;
      }
      $10_1 = 0;
     }
     HEAP32[$16_1 >> 2] = $10_1;
     $16_1 = $16_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$12
     }
     break label$12;
    };
    label$15 : {
     label$16 : {
      if (($14_1 | 0) >= (1 | 0)) {
       break label$16
      }
      $3_1 = $14_1;
      $10_1 = $16_1;
      $17_1 = $15_1;
      break label$15;
     }
     $17_1 = $15_1;
     $3_1 = $14_1;
     label$17 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$18 : {
       $10_1 = $16_1 + -4 | 0;
       if ($10_1 >>> 0 < $17_1 >>> 0) {
        break label$18
       }
       i64toi32_i32$1 = 0;
       $26_1 = $3_1;
       $26$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $25_1 = 0;
       $25$hi = i64toi32_i32$1;
       label$19 : while (1) {
        $166_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $168$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $26$hi;
        i64toi32_i32$2 = $168$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$3 = $26_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $170$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$2 = $25_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $172_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $172$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $170$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $172$hi;
        i64toi32_i32$3 = $172_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $25_1 = i64toi32_i32$4;
        $25$hi = i64toi32_i32$5;
        $174$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $25_1 = i64toi32_i32$1;
        $25$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $178_1 = i64toi32_i32$1;
        $178$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $174$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $178$hi;
        i64toi32_i32$3 = $178_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$166_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $17_1 >>> 0) {
         continue label$19
        }
        break label$19;
       };
       i64toi32_i32$4 = $25$hi;
       $10_1 = $25_1;
       if (!$10_1) {
        break label$18
       }
       $17_1 = $17_1 + -4 | 0;
       HEAP32[$17_1 >> 2] = $10_1;
      }
      label$20 : {
       label$21 : while (1) {
        $10_1 = $16_1;
        if ($10_1 >>> 0 <= $17_1 >>> 0) {
         break label$20
        }
        $16_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$16_1 >> 2] | 0)) {
         continue label$21
        }
        break label$21;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $16_1 = $10_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    label$22 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$22
     }
     $18_1 = (($13_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $19_1 = ($12_1 | 0) == (102 | 0);
     label$23 : while (1) {
      $9_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$24 : {
       label$25 : {
        if ($17_1 >>> 0 < $10_1 >>> 0) {
         break label$25
        }
        $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
        break label$24;
       }
       $20_1 = 1e9 >>> $9_1 | 0;
       $21_1 = (-1 << $9_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $16_1 = $17_1;
       label$26 : while (1) {
        $22_1 = HEAP32[$16_1 >> 2] | 0;
        HEAP32[$16_1 >> 2] = ($22_1 >>> $9_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($22_1 & $21_1 | 0, $20_1);
        $16_1 = $16_1 + 4 | 0;
        if ($16_1 >>> 0 < $10_1 >>> 0) {
         continue label$26
        }
        break label$26;
       };
       $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
       if (!$3_1) {
        break label$24
       }
       HEAP32[$10_1 >> 2] = $3_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $9_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $16_1 = $19_1 ? $15_1 : $17_1;
      $10_1 = (($10_1 - $16_1 | 0) >> 2 | 0 | 0) > ($18_1 | 0) ? $16_1 + ($18_1 << 2 | 0) | 0 : $10_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$23
      }
      break label$23;
     };
    }
    $16_1 = 0;
    label$27 : {
     if ($17_1 >>> 0 >= $10_1 >>> 0) {
      break label$27
     }
     $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $22_1 = HEAP32[$17_1 >> 2] | 0;
     if ($22_1 >>> 0 < 10 >>> 0) {
      break label$27
     }
     label$28 : while (1) {
      $16_1 = $16_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($22_1 >>> 0 >= $3_1 >>> 0) {
       continue label$28
      }
      break label$28;
     };
    }
    label$29 : {
     $3_1 = ($13_1 - (($12_1 | 0) == (102 | 0) ? 0 : $16_1) | 0) - (($13_1 | 0) != (0 | 0) & ($12_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($10_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$29
     }
     $22_1 = $3_1 + 9216 | 0;
     $20_1 = ($22_1 | 0) / (9 | 0) | 0;
     $9_1 = (($20_1 << 2 | 0) + (($14_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$30 : {
      $22_1 = $22_1 - Math_imul($20_1, 9) | 0;
      if (($22_1 | 0) > (7 | 0)) {
       break label$30
      }
      label$31 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $22_1 = $22_1 + 1 | 0;
       if (($22_1 | 0) != (8 | 0)) {
        continue label$31
       }
       break label$31;
      };
     }
     $20_1 = HEAP32[$9_1 >> 2] | 0;
     $21_1 = ($20_1 >>> 0) / ($3_1 >>> 0) | 0;
     $22_1 = $20_1 - Math_imul($21_1, $3_1) | 0;
     label$32 : {
      label$33 : {
       $18_1 = $9_1 + 4 | 0;
       if (($18_1 | 0) != ($10_1 | 0)) {
        break label$33
       }
       if (!$22_1) {
        break label$32
       }
      }
      $19_1 = $3_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $19_1 >>> 0 ? .5 : ($18_1 | 0) == ($10_1 | 0) ? (($22_1 | 0) == ($19_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $21_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$34 : {
       if (!$7_1) {
        break label$34
       }
       if ((HEAPU8[$8_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $22_1 = $20_1 - $22_1 | 0;
      HEAP32[$9_1 >> 2] = $22_1;
      if ($1_1 + $27_1 == $1_1) {
       break label$32
      }
      $16_1 = $22_1 + $3_1 | 0;
      HEAP32[$9_1 >> 2] = $16_1;
      label$35 : {
       if ($16_1 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$9_1 >> 2] = 0;
        label$37 : {
         $9_1 = $9_1 + -4 | 0;
         if ($9_1 >>> 0 >= $17_1 >>> 0) {
          break label$37
         }
         $17_1 = $17_1 + -4 | 0;
         HEAP32[$17_1 >> 2] = 0;
        }
        $16_1 = (HEAP32[$9_1 >> 2] | 0) + 1 | 0;
        HEAP32[$9_1 >> 2] = $16_1;
        if ($16_1 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $16_1 = Math_imul(($15_1 - $17_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $22_1 = HEAP32[$17_1 >> 2] | 0;
      if ($22_1 >>> 0 < 10 >>> 0) {
       break label$32
      }
      label$38 : while (1) {
       $16_1 = $16_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($22_1 >>> 0 >= $3_1 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $3_1 = $9_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $10_1;
    }
    label$39 : {
     label$40 : while (1) {
      label$41 : {
       $3_1 = $10_1;
       if ($10_1 >>> 0 > $17_1 >>> 0) {
        break label$41
       }
       $19_1 = 0;
       break label$39;
      }
      $10_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
     $19_1 = 1;
    }
    label$42 : {
     label$43 : {
      if (($12_1 | 0) == (103 | 0)) {
       break label$43
      }
      $21_1 = $4_1 & 8 | 0;
      break label$42;
     }
     $10_1 = $13_1 ? $13_1 : 1;
     $22_1 = ($10_1 | 0) > ($16_1 | 0) & ($16_1 | 0) > (-5 | 0) | 0;
     $13_1 = ($22_1 ? $16_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($22_1 ? -1 : -2) + $5_1 | 0;
     $21_1 = $4_1 & 8 | 0;
     if ($21_1) {
      break label$42
     }
     $10_1 = 9;
     label$44 : {
      if (!$19_1) {
       break label$44
      }
      $10_1 = 9;
      $9_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$44
      }
      $22_1 = 10;
      $10_1 = 0;
      if (($9_1 >>> 0) % (10 >>> 0) | 0) {
       break label$44
      }
      label$45 : while (1) {
       $10_1 = $10_1 + 1 | 0;
       $22_1 = Math_imul($22_1, 10);
       if (!(($9_1 >>> 0) % ($22_1 >>> 0) | 0)) {
        continue label$45
       }
       break label$45;
      };
     }
     $22_1 = Math_imul(($3_1 - $15_1 | 0) >> 2 | 0, 9) + -9 | 0;
     label$46 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$46
      }
      $21_1 = 0;
      $10_1 = $22_1 - $10_1 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
      break label$42;
     }
     $21_1 = 0;
     $10_1 = ($22_1 + $16_1 | 0) - $10_1 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $13_1 = ($13_1 | 0) < ($10_1 | 0) ? $13_1 : $10_1;
    }
    $12_1 = $13_1 | $21_1 | 0;
    $22_1 = ($12_1 | 0) != (0 | 0);
    label$47 : {
     label$48 : {
      $20_1 = $5_1 & -33 | 0;
      if (($20_1 | 0) != (70 | 0)) {
       break label$48
      }
      $10_1 = ($16_1 | 0) > (0 | 0) ? $16_1 : 0;
      break label$47;
     }
     label$49 : {
      $10_1 = $16_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10_1 = $911(($16_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$4 | 0, $11_1 | 0) | 0;
      if (($11_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break label$49
      }
      label$50 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($11_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label$50
       }
       break label$50;
      };
     }
     $18_1 = $10_1 + -2 | 0;
     HEAP8[$18_1 >> 0] = $5_1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($16_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $11_1 - $18_1 | 0;
    }
    $9_1 = ((($7_1 + $13_1 | 0) + $22_1 | 0) + $10_1 | 0) + 1 | 0;
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
    $906($0_1 | 0, $8_1 | 0, $7_1 | 0);
    $912($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$51 : {
     label$52 : {
      label$53 : {
       label$54 : {
        if (($20_1 | 0) != (70 | 0)) {
         break label$54
        }
        $20_1 = $6_1 + 16 | 0 | 8 | 0;
        $16_1 = $6_1 + 16 | 0 | 9 | 0;
        $22_1 = $17_1 >>> 0 > $15_1 >>> 0 ? $15_1 : $17_1;
        $17_1 = $22_1;
        label$55 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10_1 = $911(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $16_1 | 0) | 0;
         label$56 : {
          label$57 : {
           if (($17_1 | 0) == ($22_1 | 0)) {
            break label$57
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$56
           }
           label$58 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$58
            }
            break label$56;
           };
          }
          if (($10_1 | 0) != ($16_1 | 0)) {
           break label$56
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $20_1;
         }
         $906($0_1 | 0, $10_1 | 0, $16_1 - $10_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $15_1 >>> 0) {
          continue label$55
         }
         break label$55;
        };
        label$59 : {
         if (!$12_1) {
          break label$59
         }
         $906($0_1 | 0, 61155 | 0, 1 | 0);
        }
        if ($17_1 >>> 0 >= $3_1 >>> 0) {
         break label$53
        }
        if (($13_1 | 0) < (1 | 0)) {
         break label$53
        }
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $911(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $16_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$61
          }
          label$62 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$62
           }
           break label$62;
          };
         }
         $906($0_1 | 0, $10_1 | 0, (($13_1 | 0) < (9 | 0) ? $13_1 : 9) | 0);
         $10_1 = $13_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $3_1 >>> 0) {
          break label$52
         }
         $22_1 = ($13_1 | 0) > (9 | 0);
         $13_1 = $10_1;
         if ($22_1) {
          continue label$60
         }
         break label$52;
        };
       }
       label$63 : {
        if (($13_1 | 0) < (0 | 0)) {
         break label$63
        }
        $20_1 = $19_1 ? $3_1 : $17_1 + 4 | 0;
        $15_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $17_1;
        label$64 : while (1) {
         label$65 : {
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$4 = HEAP32[$16_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10_1 = $911(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($10_1 | 0) != ($3_1 | 0)) {
           break label$65
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $10_1 = $15_1;
         }
         label$66 : {
          label$67 : {
           if (($16_1 | 0) == ($17_1 | 0)) {
            break label$67
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$66
           }
           label$68 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$68
            }
            break label$66;
           };
          }
          $906($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          label$69 : {
           if ($21_1) {
            break label$69
           }
           if (($13_1 | 0) < (1 | 0)) {
            break label$66
           }
          }
          $906($0_1 | 0, 61155 | 0, 1 | 0);
         }
         $22_1 = $3_1 - $10_1 | 0;
         $906($0_1 | 0, $10_1 | 0, (($13_1 | 0) > ($22_1 | 0) ? $22_1 : $13_1) | 0);
         $13_1 = $13_1 - $22_1 | 0;
         $16_1 = $16_1 + 4 | 0;
         if ($16_1 >>> 0 >= $20_1 >>> 0) {
          break label$63
         }
         if (($13_1 | 0) > (-1 | 0)) {
          continue label$64
         }
         break label$64;
        };
       }
       $912($0_1 | 0, 48 | 0, $13_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $906($0_1 | 0, $18_1 | 0, $11_1 - $18_1 | 0 | 0);
       break label$51;
      }
      $10_1 = $13_1;
     }
     $912($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$6;
   }
   $16_1 = $5_1 & 32 | 0;
   $13_1 = $16_1 ? $8_1 + 9 | 0 : $8_1;
   label$70 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$70
    }
    $10_1 = 12 - $3_1 | 0;
    if (!$10_1) {
     break label$70
    }
    $27_1 = 8.0;
    label$71 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$71
     }
     break label$71;
    };
    label$72 : {
     if ((HEAPU8[$13_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$72
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break label$70;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   label$73 : {
    $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $821_1 = $10_1;
    $10_1 = $10_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10_1 = $911(($821_1 + $10_1 | 0) ^ $10_1 | 0 | 0, i64toi32_i32$0 | 0, $11_1 | 0) | 0;
    if (($10_1 | 0) != ($11_1 | 0)) {
     break label$73
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $10_1 = $6_1 + 15 | 0;
   }
   $21_1 = $7_1 | 2 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $20_1 = $10_1 + -2 | 0;
   HEAP8[$20_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $22_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$74 : while (1) {
    $10_1 = $17_1;
    label$75 : {
     label$76 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$76
      }
      $17_1 = ~~$1_1;
      break label$75;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$10_1 >> 0] = HEAPU8[($17_1 + 61104 | 0) >> 0] | 0 | $16_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$77 : {
     $17_1 = $10_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$77
     }
     label$78 : {
      if ($22_1) {
       break label$78
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$78
      }
      if ($1_1 == 0.0) {
       break label$77
      }
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $17_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$74
    }
    break label$74;
   };
   label$79 : {
    label$80 : {
     if (!$3_1) {
      break label$80
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$80
     }
     $10_1 = (($3_1 + $11_1 | 0) - $20_1 | 0) + 2 | 0;
     break label$79;
    }
    $10_1 = (($11_1 - ($6_1 + 16 | 0) | 0) - $20_1 | 0) + $17_1 | 0;
   }
   $9_1 = $10_1 + $21_1 | 0;
   $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 | 0);
   $906($0_1 | 0, $13_1 | 0, $21_1 | 0);
   $912($0_1 | 0, 48 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $906($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $16_1 = $11_1 - $20_1 | 0;
   $912($0_1 | 0, 48 | 0, $10_1 - ($17_1 + $16_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $906($0_1 | 0, $20_1 | 0, $16_1 | 0);
   $912($0_1 | 0, 32 | 0, $2_1 | 0, $9_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  label$81 : {
   $24_1 = $6_1 + 560 | 0;
   if ($24_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $24_1;
  }
  return (($9_1 | 0) < ($2_1 | 0) ? $2_1 : $9_1) | 0;
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$962($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $916($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $917($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $904($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$7($918(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $924() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $925();
  return $0_1 | 0;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $922($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $923($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  label$1 : {
   $3_1 = global$0 - 16 | 0;
   $6_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$3 : {
   $2_1 = $894(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$3
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $963($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$3
   }
   $4_1 = $894($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  label$4 : {
   $7_1 = $3_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
  return $4_1 | 0;
 }
 
 function $924() {
  $946(64640 | 0);
  return 64648 | 0;
 }
 
 function $925() {
  $947(64640 | 0);
 }
 
 function $926($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $3_1 = global$0 - 32 | 0;
   $10_1 = $3_1;
   if ($3_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if ($948(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$6
      }
      label$7 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$5
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$4
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($948(fimport$8(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($6_1 | 0) != (-1 | 0)) {
      break label$4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$3;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$3
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  label$8 : {
   $11_1 = $3_1 + 32 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
  return $4_1 | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($875($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $875($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $875($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$945($0_1 | 0, 0 | 0));
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $2_1 = -1;
  label$3 : {
   if ($898($0_1 | 0) | 0) {
    break label$3
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$3
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  label$4 : {
   $4_1 = $1_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $930($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12_1 = 0
     } else {
      $12_1 = 1
     }
     $13_1 = $12_1;
    } else {
     $13_1 = 0
    }
    $11_1 = $13_1;
   }
   if ($11_1) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $1_1 | 0;
   return;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
 }
 
 function $931($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $4$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $10$hi = 0, $27_1 = 0, $27$hi = 0, $35_1 = 0, $35$hi = 0, $47_1 = 0, $49_1 = 0, $49$hi = 0, $56_1 = 0, $56$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $22_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $23_1 = 0
       } else {
        $23_1 = 1
       }
       $24_1 = $23_1;
      } else {
       $24_1 = 0
      }
      $22_1 = $24_1;
     }
     if ($22_1) {
      break label$2
     }
    }
    $1_1 = $929($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = $2_1 - $3_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
    $35_1 = i64toi32_i32$0;
    $35$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$0 = $35$hi;
    i64toi32_i32$2 = $35_1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $28_1 = $26_1;
     } else {
      $28_1 = 0
     }
     $25_1 = $28_1;
    }
    if ($25_1) {
     break label$5
    }
    i64toi32_i32$3 = $4$hi;
    HEAP32[($0_1 + 104 | 0) >> 2] = $3_1 + $4_1 | 0;
    break label$4;
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($2_1) {
     break label$7
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    break label$6;
   }
   $47_1 = $0_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$3;
   $49$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$3 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $56_1 = i64toi32_i32$3;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $49$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$3 = $56$hi;
   i64toi32_i32$0 = $56_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = $47_1;
   HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$8 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$8
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $11$hi = 0, i64toi32_i32$1 = 0, $11_1 = 0, $12$hi = 0, $13$hi = 0, $12_1 = 0, $7_1 = 0, $13_1 = 0, $4_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $8_1 = 0, $34_1 = 0, $35_1 = 0, $10_1 = 0, $9_1 = 0, $191_1 = 0, $191$hi = 0, $248_1 = 0, $248$hi = 0, $330$hi = 0, $333_1 = 0, $333$hi = 0, $412$hi = 0;
  label$1 : {
   $4_1 = global$0 - 16 | 0;
   $9_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$12
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$11;
           }
           $5_1 = $931($0_1 | 0) | 0;
          }
          if ($932($5_1 | 0) | 0) {
           continue label$10
          }
          break label$10;
         };
         $6_1 = 0;
         label$13 : {
          label$14 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$14;
           default:
            break label$13;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$15 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$15
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$13;
          }
          $5_1 = $931($0_1 | 0) | 0;
         }
         label$16 : {
          label$17 : {
           if ($1_1 & -17 | 0) {
            break label$17
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$17
           }
           label$18 : {
            label$19 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$19
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$18;
            }
            $5_1 = $931($0_1 | 0) | 0;
           }
           label$20 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$20
            }
            label$21 : {
             label$22 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$22
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$21;
             }
             $5_1 = $931($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$7
            }
            label$23 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$23
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$3
             }
             break label$4;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$4
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$3;
           }
           if ($1_1) {
            break label$16
           }
           $1_1 = 8;
           break label$7;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
           break label$16
          }
          label$24 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$24
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $930($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($868() | 0) >> 2] = 28;
          break label$3;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$7
         }
         i64toi32_i32$0 = 0;
         $11_1 = 0;
         $11$hi = i64toi32_i32$0;
         label$25 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$25
          }
          $1_1 = 0;
          label$26 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$27 : {
            label$28 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$28
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$27;
            }
            $5_1 = $931($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$29 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$29
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$26
            }
           }
           break label$26;
          };
          i64toi32_i32$0 = 0;
          $11_1 = $1_1;
          $11$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$8
         }
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $12_1 = i64toi32_i32$1;
         $12$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $13_1 = $2_1;
         $13$hi = i64toi32_i32$0;
         label$30 : while (1) {
          label$31 : {
           label$32 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$32
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$31;
           }
           $5_1 = $931($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$2 = $12_1;
          i64toi32_i32$1 = $13$hi;
          i64toi32_i32$3 = $13_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $11_1 = i64toi32_i32$4;
          $11$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$8
          }
          i64toi32_i32$5 = $11$hi;
          i64toi32_i32$0 = $11_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$8
          }
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $12_1 = i64toi32_i32$5;
          $12$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $13_1 = $2_1;
          $13$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $191_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $191$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $12$hi;
          i64toi32_i32$0 = $12_1;
          i64toi32_i32$3 = $191$hi;
          i64toi32_i32$2 = $191_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$30
          }
          break label$30;
         };
         $1_1 = 10;
         break label$6;
        }
        HEAP32[($868() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$3;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$6
       }
       break label$5;
      }
      label$33 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$33
       }
       i64toi32_i32$0 = 0;
       $11_1 = 0;
       $11$hi = i64toi32_i32$0;
       label$34 : {
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$34
        }
        $7_1 = 0;
        label$35 : while (1) {
         $7_1 = $2_1 + Math_imul($7_1, $1_1) | 0;
         label$36 : {
          label$37 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$37
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$36;
          }
          $5_1 = $931($0_1 | 0) | 0;
         }
         $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
         label$38 : {
          if ($7_1 >>> 0 > 119304646 >>> 0) {
           break label$38
          }
          if ($1_1 >>> 0 > $2_1 >>> 0) {
           continue label$35
          }
         }
         break label$35;
        };
        i64toi32_i32$0 = 0;
        $11_1 = $7_1;
        $11$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$6
       }
       i64toi32_i32$0 = 0;
       $12_1 = $1_1;
       $12$hi = i64toi32_i32$0;
       label$39 : while (1) {
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = $12$hi;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $13_1 = i64toi32_i32$5;
        $13$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $14_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $14$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $248_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $248$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$5 = $13_1;
        i64toi32_i32$0 = $248$hi;
        i64toi32_i32$3 = $248_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$6
        }
        label$40 : {
         label$41 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$41
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$40;
         }
         $5_1 = $931($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $14$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$0 = $14_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $11_1 = i64toi32_i32$1;
        $11$hi = i64toi32_i32$4;
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break label$6
        }
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$4 = $11$hi;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$0 = 0;
        $960($4_1 | 0, $12_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$6
        }
        continue label$39;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 61425 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $11_1 = 0;
      $11$hi = i64toi32_i32$3;
      label$42 : {
       $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$42
       }
       $7_1 = 0;
       label$43 : while (1) {
        $7_1 = $2_1 | ($7_1 << $8_1 | 0) | 0;
        label$44 : {
         label$45 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$45
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$44;
         }
         $5_1 = $931($0_1 | 0) | 0;
        }
        $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
        label$46 : {
         if ($7_1 >>> 0 > 134217727 >>> 0) {
          break label$46
         }
         if ($1_1 >>> 0 > $2_1 >>> 0) {
          continue label$43
         }
        }
        break label$43;
       };
       i64toi32_i32$3 = 0;
       $11_1 = $7_1;
       $11$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = 0;
      $12_1 = $8_1;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $34_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $34_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $13_1 = $34_1;
      $13$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$0 = $11_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$6
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$6
      }
      label$47 : while (1) {
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $35_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $35_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $330$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $333_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $333$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $330$hi;
       i64toi32_i32$5 = $35_1;
       i64toi32_i32$3 = $333$hi;
       i64toi32_i32$4 = $333_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $11_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $11$hi = i64toi32_i32$3;
       label$48 : {
        label$49 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$49
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$48;
        }
        $5_1 = $931($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$4 = $13_1;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$6
       }
       $2_1 = HEAPU8[($5_1 + 61169 | 0) >> 0] | 0;
       if ($1_1 >>> 0 > $2_1 >>> 0) {
        continue label$47
       }
       break label$47;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
      break label$5
     }
     label$50 : while (1) {
      label$51 : {
       label$52 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$52
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$51;
       }
       $5_1 = $931($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 61169 | 0) >> 0] | 0) >>> 0) {
       continue label$50
      }
      break label$50;
     };
     HEAP32[($868() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $11_1 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$0;
    }
    label$53 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$53
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$54 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$54
     }
     label$55 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$55
      }
      if ($6_1) {
       break label$55
      }
      HEAP32[($868() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$3;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($11$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($11$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$54
     }
     HEAP32[($868() | 0) >> 2] = 68;
     break label$3;
    }
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $412$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $930($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  label$56 : {
   $10_1 = $4_1 + 16 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $934($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = global$0 - 144 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 8 | 0) >> 2] = ($0_1 | 0) < (0 | 0) ? -1 : $0_1 + 2147483647 | 0;
  i64toi32_i32$0 = 0;
  $930($4_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $933($4_1 | 0, $2_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$3 : {
   if (!$1_1) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $0_1 + (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 120 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) | 0;
  }
  label$4 : {
   $6_1 = $4_1 + 144 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $934($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1;
   $0_1 = $1_1 + 1 | 0;
   if ($932(HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5_1 = HEAP8[$1_1 >> 0] | 0;
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3_1 = 1;
   }
   $5_1 = HEAP8[$0_1 >> 0] | 0;
   $1_1 = $0_1;
   $4_1 = $3_1;
  }
  label$5 : {
   if (!($899($5_1 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2_1 = (Math_imul($2_1, 10) - (HEAP8[$1_1 >> 0] | 0) | 0) + 48 | 0;
    $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($899($0_1 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4_1 ? $2_1 : 0 - $2_1 | 0) | 0;
 }
 
 function $937($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $938($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $22_1 = 0, $6_1 = 0, $5_1 = 0, $76_1 = 0, $77_1 = 0, $77$hi = 0, $78_1 = 0, $78$hi = 0, $82$hi = 0, $86_1 = 0, $89_1 = 0;
  label$1 : {
   $4_1 = global$0 - 80 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$4
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $959($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$5 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$5
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$3;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $959($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$3;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$3
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $959($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$6 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$6
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$3;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $959($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $76_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $77_1 = $1_1;
  $77$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $78_1 = $2_1;
  $78$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $22_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $22_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $82$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $77$hi;
  i64toi32_i32$2 = $78$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $82$hi;
  $959($76_1 | 0, $77_1 | 0, i64toi32_i32$1 | 0, $78_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $86_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $89_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  label$7 : {
   $6_1 = i64toi32_i32$2 + 80 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $939($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $940($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $13$hi = 0, $12_1 = 0, $12$hi = 0, $6_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0;
  label$1 : {
   $4_1 = global$0 - 48 | 0;
   $10_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = 0;
  $12_1 = 0;
  $12$hi = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$4
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 61516 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 61504 | 0) >> 2] | 0;
    label$5 : while (1) {
     label$6 : {
      label$7 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$6;
      }
      $2_1 = $931($1_1 | 0) | 0;
     }
     if ($932($2_1 | 0) | 0) {
      continue label$5
     }
     break label$5;
    };
    $8_1 = 1;
    label$8 : {
     label$9 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$9;
      default:
       break label$8;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$10 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$10
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $931($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 61434 | 0) >> 0] | 0 | 0)) {
         break label$13
        }
        label$15 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$15
         }
         label$16 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$16
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$15;
         }
         $2_1 = $931($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$14
        }
        break label$12;
       };
      }
      label$17 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$17
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$12
       }
       if (!$3_1) {
        break label$11
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$11
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$12
       }
      }
      label$18 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$18
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$12
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$12
      }
      label$19 : while (1) {
       label$20 : {
        if (!$1_1) {
         break label$20
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$19
       }
       break label$19;
      };
     }
     $955($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$0;
     break label$3;
    }
    label$21 : {
     label$22 : {
      label$23 : {
       if ($9_1) {
        break label$23
       }
       $9_1 = 0;
       label$24 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 61443 | 0) >> 0] | 0 | 0)) {
         break label$23
        }
        label$25 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$25
         }
         label$26 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$26
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$25;
         }
         $2_1 = $931($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$24
        }
        break label$22;
       };
      }
      label$27 : {
       switch ($9_1 | 0) {
       case 0:
        label$29 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$29
         }
         label$30 : {
          label$31 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$31
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$30;
          }
          $9_1 = $931($1_1 | 0) | 0;
         }
         label$32 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$32
          }
          $941($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
          $13_1 = i64toi32_i32$0;
          $13$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          $12_1 = i64toi32_i32$1;
          $12$hi = i64toi32_i32$0;
          break label$3;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$29
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $942($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
        $13_1 = i64toi32_i32$0;
        $13$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
        $12_1 = i64toi32_i32$1;
        $12$hi = i64toi32_i32$0;
        break label$3;
       case 3:
        break label$22;
       default:
        break label$27;
       };
      }
      label$33 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($868() | 0) >> 2] = 28;
      break label$21;
     }
     label$34 : {
      label$35 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$35
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$34;
      }
      $2_1 = $931($1_1 | 0) | 0;
     }
     label$36 : {
      label$37 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$37
       }
       $9_1 = 1;
       break label$36;
      }
      i64toi32_i32$0 = 2147450880;
      $13_1 = 0;
      $13$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$3
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$3;
     }
     label$38 : while (1) {
      label$39 : {
       label$40 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$40
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$39;
       }
       $2_1 = $931($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$41 : {
       label$42 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$42
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$42
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$42
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$41
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$38;
      }
      break label$38;
     };
     i64toi32_i32$0 = 2147450880;
     $13_1 = 0;
     $13$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$3
     }
     label$43 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$43
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$44 : {
      if (!$3_1) {
       break label$44
      }
      if (!$9_1) {
       break label$3
      }
      label$45 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$46 : {
        if (!$2_1) {
         break label$46
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$45
       }
       break label$3;
      };
     }
     HEAP32[($868() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $12_1 = 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $13_1 = 0;
   $13$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$47 : {
   $11_1 = $4_1 + 48 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $18$hi = 0, $21$hi = 0, $18_1 = 0, $21_1 = 0, $17$hi = 0, $19$hi = 0, $16$hi = 0, $17_1 = 0, $19_1 = 0, $20$hi = 0, $16_1 = 0, $10_1 = 0, $20_1 = 0, $8_1 = 0, $9_1 = 0, $22$hi = 0, $22_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $15_1 = 0, $14_1 = 0, $139_1 = 0, $139$hi = 0, $143_1 = 0, $143$hi = 0, $148_1 = 0, $148$hi = 0, $152_1 = 0, $152$hi = 0, $170_1 = 0, $170$hi = 0, $174_1 = 0, $174$hi = 0, $264$hi = 0, $271_1 = 0, $271$hi = 0, $280_1 = 0, $280$hi = 0, $284_1 = 0, $284$hi = 0, $288_1 = 0, $288$hi = 0, $292_1 = 0, $292$hi = 0, $302_1 = 0, $302$hi = 0, $319_1 = 0, $319$hi = 0, $323_1 = 0, $323$hi = 0, $328_1 = 0, $328$hi = 0, $330_1 = 0, $330$hi = 0, $348$hi = 0, $356_1 = 0, $357_1 = 0, $360$hi = 0, $384_1 = 0, $384$hi = 0, $388_1 = 0, $388$hi = 0, $422_1 = 0, $422$hi = 0, $426_1 = 0, $426$hi = 0, $430_1 = 0, $430$hi = 0, $434_1 = 0, $434$hi = 0, $441_1 = 0, $441$hi = 0, $444_1 = 0, $444$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $498_1 = 0, $498$hi = 0, $502_1 = 0, $502$hi = 0, $506_1 = 0, $506$hi = 0, $510_1 = 0, $510$hi = 0;
  label$1 : {
   $6_1 = global$0 - 432 | 0;
   $14_1 = $6_1;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $14_1;
  }
  label$3 : {
   label$4 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$4
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$3;
   }
   $7_1 = $931($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : while (1) {
      label$9 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$9
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$5
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$6;
      }
      label$10 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$10
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$8;
      }
      $9_1 = 1;
      $7_1 = $931($1_1 | 0) | 0;
      continue label$8;
     };
    }
    $7_1 = $931($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $16_1 = 0;
   $16$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$5
   }
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$13
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$12;
     }
     $7_1 = $931($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$4;
    $16$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$11
    }
    break label$11;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $21_1 = 0;
  $21$hi = i64toi32_i32$5;
  label$14 : {
   label$15 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$16 : {
     label$17 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$17
      }
      label$18 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$18
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$14
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$17
      }
      if ($8_1) {
       break label$14
      }
      $8_1 = 1;
      i64toi32_i32$5 = $21$hi;
      $16_1 = $21_1;
      $16$hi = i64toi32_i32$5;
      break label$16;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$19 : {
      label$20 : {
       i64toi32_i32$5 = $21$hi;
       i64toi32_i32$0 = $21_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$20
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$19;
      }
      label$21 : {
       i64toi32_i32$0 = $21$hi;
       i64toi32_i32$3 = $21_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break label$21
       }
       $956($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $959($6_1 + 32 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $139_1 = i64toi32_i32$5;
       $139$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $143_1 = i64toi32_i32$2;
       $143$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $20$hi;
       i64toi32_i32$2 = $17$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$3 = $143$hi;
       $959($6_1 + 16 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $139_1 | 0, i64toi32_i32$0 | 0, $143_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $19$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $148_1 = i64toi32_i32$3;
       $148$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $152_1 = i64toi32_i32$0;
       $152$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$2 = $148$hi;
       i64toi32_i32$5 = $152$hi;
       $949($6_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $148_1 | 0, i64toi32_i32$2 | 0, $152_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$5;
       $19$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$2;
       $18$hi = i64toi32_i32$5;
       break label$19;
      }
      if ($11_1) {
       break label$19
      }
      if (!$7_1) {
       break label$19
      }
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $959($6_1 + 80 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $170_1 = i64toi32_i32$3;
      $170$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174_1 = i64toi32_i32$0;
      $174$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$2 = $170$hi;
      i64toi32_i32$5 = $174$hi;
      $949($6_1 + 64 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, $170_1 | 0, i64toi32_i32$2 | 0, $174_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$22 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$22
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$15;
    }
    $7_1 = $931($1_1 | 0) | 0;
    continue label$15;
   };
  }
  label$23 : {
   label$24 : {
    label$25 : {
     label$26 : {
      if ($9_1) {
       break label$26
      }
      label$27 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$27
       }
       if ($5_1) {
        break label$24
       }
       break label$25;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$25
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$24;
     }
     label$28 : {
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$5 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $115_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $116_1 = 0
        } else {
         $116_1 = 1
        }
        $117_1 = $116_1;
       } else {
        $117_1 = 0
       }
       $115_1 = $117_1;
      }
      if ($115_1) {
       break label$28
      }
      i64toi32_i32$5 = $21$hi;
      $17_1 = $21_1;
      $17$hi = i64toi32_i32$5;
      label$29 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$3 = $17_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $17_1 = i64toi32_i32$2;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$29
       }
       break label$29;
      };
     }
     label$30 : {
      label$31 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$31
       }
       i64toi32_i32$5 = $943($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$30
       }
       label$32 : {
        if (!$5_1) {
         break label$32
        }
        i64toi32_i32$0 = 0;
        $17_1 = 0;
        $17$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$30;
       }
       i64toi32_i32$0 = 0;
       $18_1 = 0;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $930($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $21_1 = 0;
       $21$hi = i64toi32_i32$0;
       break label$23;
      }
      i64toi32_i32$0 = 0;
      $17_1 = 0;
      $17$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$30
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$33 : {
      if ($10_1) {
       break label$33
      }
      $954($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$0;
      break label$23;
     }
     label$34 : {
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $16_1 : $21_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $118_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $118_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $264$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$5 = $264$hi;
      i64toi32_i32$3 = $118_1;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$0 = $17_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$5 = 0 - $3_1 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
      $271_1 = i64toi32_i32$5;
      $271$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $271$hi;
      i64toi32_i32$0 = $271_1;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$34
      }
      HEAP32[($868() | 0) >> 2] = 68;
      $956($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $280_1 = i64toi32_i32$2;
      $280$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $284_1 = i64toi32_i32$1;
      $284$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $280$hi;
      i64toi32_i32$1 = $284$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $959($6_1 + 144 | 0 | 0, $280_1 | 0, i64toi32_i32$2 | 0, $284_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $288_1 = i64toi32_i32$5;
      $288$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $292_1 = i64toi32_i32$0;
      $292$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $288$hi;
      i64toi32_i32$0 = $292$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $959($6_1 + 128 | 0 | 0, $288_1 | 0, i64toi32_i32$5 | 0, $292_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$2;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$2;
      break label$23;
     }
     label$35 : {
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $302_1 = i64toi32_i32$1;
      $302$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21_1;
      i64toi32_i32$1 = $302$hi;
      i64toi32_i32$5 = $302_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $122_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $123_1 = 0
        } else {
         $123_1 = 1
        }
        $124_1 = $123_1;
       } else {
        $124_1 = 0
       }
       $122_1 = $124_1;
      }
      if ($122_1) {
       break label$35
      }
      label$36 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $949($6_1 + 416 | 0 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $952($18_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $319_1 = i64toi32_i32$0;
        $319$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $319$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $18_1 : $319_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $323_1 = i64toi32_i32$1;
        $323$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $328_1 = i64toi32_i32$5;
        $328$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $328$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $19_1 : $328_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $330_1 = i64toi32_i32$2;
        $330$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $323$hi;
        i64toi32_i32$1 = $330$hi;
        $949($6_1 + 400 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $323_1 | 0, i64toi32_i32$0 | 0, $330_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$2 = $21_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $21_1 = i64toi32_i32$5;
        $21$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$4;
        $19$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      label$38 : {
       label$39 : {
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $348$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $21$hi;
        i64toi32_i32$1 = $21_1;
        i64toi32_i32$2 = $348$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $356_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $357_1 = $2_1;
        i64toi32_i32$4 = $2_1;
        i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
        $360$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $360$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $125_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $126_1 = 0
          } else {
           $126_1 = 1
          }
          $127_1 = $126_1;
         } else {
          $127_1 = 0
         }
         $125_1 = $127_1;
        }
        $7_1 = $125_1 ? $356_1 : $357_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$39
        }
        $956($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$5;
        $16$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $17_1 = 0;
        $17$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $22_1 = 0;
        $22$hi = i64toi32_i32$5;
        break label$38;
       }
       $954($6_1 + 352 | 0 | 0, +(+$971(+(1.0), 144 - $7_1 | 0 | 0)));
       $956($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $384_1 = i64toi32_i32$5;
       $384$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $388_1 = i64toi32_i32$0;
       $388$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$5;
       $20$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$0;
       $16$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $384$hi;
       i64toi32_i32$0 = $388$hi;
       i64toi32_i32$3 = $20$hi;
       i64toi32_i32$4 = $16$hi;
       $937($6_1 + 368 | 0 | 0, $384_1 | 0, i64toi32_i32$5 | 0, $388_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $22_1 = i64toi32_i32$4;
       $22$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$3;
       $17$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($951($18_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $957($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $422_1 = i64toi32_i32$5;
      $422$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $426_1 = i64toi32_i32$0;
      $426$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $422$hi;
      i64toi32_i32$4 = $426$hi;
      $959($6_1 + 304 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $422_1 | 0, i64toi32_i32$3 | 0, $426_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $430_1 = i64toi32_i32$4;
      $430$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $434_1 = i64toi32_i32$3;
      $434$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $430$hi;
      i64toi32_i32$3 = $434$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$5 = $22$hi;
      $949($6_1 + 272 | 0 | 0, $430_1 | 0, i64toi32_i32$4 | 0, $434_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $18_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $441_1 = i64toi32_i32$4;
      $441$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $19_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $444_1 = i64toi32_i32$5;
      $444$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $441$hi;
      i64toi32_i32$5 = $444$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $16$hi;
      $959($6_1 + 288 | 0 | 0, $441_1 | 0, i64toi32_i32$1 | 0, $444_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $456_1 = i64toi32_i32$3;
      $456$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $460_1 = i64toi32_i32$0;
      $460$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $450$hi;
      i64toi32_i32$0 = $454$hi;
      i64toi32_i32$5 = $456$hi;
      i64toi32_i32$1 = $460$hi;
      $949($6_1 + 256 | 0 | 0, $450_1 | 0, i64toi32_i32$3 | 0, $454_1 | 0, i64toi32_i32$0 | 0, $456_1 | 0, i64toi32_i32$5 | 0, $460_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $464_1 = i64toi32_i32$1;
      $464$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$3 = $22$hi;
      $961($6_1 + 240 | 0 | 0, $464_1 | 0, i64toi32_i32$1 | 0, $468_1 | 0, i64toi32_i32$5 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
      label$40 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $19_1 = i64toi32_i32$0;
       $19$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($951($18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$40
       }
       HEAP32[($868() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      $938($6_1 + 224 | 0 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$5;
      break label$23;
     }
     HEAP32[($868() | 0) >> 2] = 68;
     $956($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $498_1 = i64toi32_i32$5;
     $498$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $502_1 = i64toi32_i32$1;
     $502$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $498$hi;
     i64toi32_i32$1 = $502$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $959($6_1 + 192 | 0 | 0, $498_1 | 0, i64toi32_i32$5 | 0, $502_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $506_1 = i64toi32_i32$3;
     $506$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $510_1 = i64toi32_i32$0;
     $510$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $506$hi;
     i64toi32_i32$0 = $510$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $959($6_1 + 176 | 0 | 0, $506_1 | 0, i64toi32_i32$3 | 0, $510_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$5;
     break label$23;
    }
    i64toi32_i32$5 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $954($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $18$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $21$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$41 : {
   $15_1 = $6_1 + 432 | 0;
   if ($15_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $15_1;
  }
 }
 
 function $942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $21$hi = 0, $12_1 = 0, $21_1 = 0, $22$hi = 0, i64toi32_i32$0 = 0, $11_1 = 0, $22_1 = 0, $8_1 = 0, $15_1 = 0, $14_1 = 0, $24$hi = 0, $23$hi = 0, $16_1 = 0, $24_1 = 0, $23_1 = 0, $13_1 = 0, $17_1 = 0, $25$hi = 0, $26$hi = 0, $27_1 = 0.0, $25_1 = 0, $26_1 = 0, $9_1 = 0, $165_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $18_1 = 0, $20_1 = 0, $19_1 = 0, $10_1 = 0, $133_1 = 0, $238_1 = 0, $238$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $258_1 = 0, $258$hi = 0, $267_1 = 0, $267$hi = 0, $271_1 = 0, $271$hi = 0, $275_1 = 0, $275$hi = 0, $279_1 = 0, $279$hi = 0, $289_1 = 0, $289$hi = 0, $298_1 = 0, $298$hi = 0, $302_1 = 0, $302$hi = 0, $306_1 = 0, $306$hi = 0, $310_1 = 0, $310$hi = 0, $359_1 = 0, $359$hi = 0, $363_1 = 0, $363$hi = 0, $365_1 = 0, $365$hi = 0, $369_1 = 0, $369$hi = 0, $388_1 = 0, $388$hi = 0, $392_1 = 0, $392$hi = 0, $394_1 = 0, $394$hi = 0, $398_1 = 0, $398$hi = 0, $409_1 = 0, $409$hi = 0, $413_1 = 0, $413$hi = 0, $415_1 = 0, $415$hi = 0, $419_1 = 0, $419$hi = 0, $447_1 = 0, $447$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $457_1 = 0, $457$hi = 0, $467_1 = 0, $467$hi = 0, $471_1 = 0, $471$hi = 0, $473_1 = 0, $473$hi = 0, $477_1 = 0, $477$hi = 0, $506_1 = 0, $584$hi = 0, $586$hi = 0, $594_1 = 0, $594$hi = 0, $735_1 = 0, $735$hi = 0, $739_1 = 0, $739$hi = 0, $741_1 = 0, $741$hi = 0, $745_1 = 0, $745$hi = 0, $764_1 = 0, $764$hi = 0, $768_1 = 0, $768$hi = 0, $810_1 = 0, $872_1 = 0, $872$hi = 0, $876_1 = 0, $876$hi = 0, $893_1 = 0, $893$hi = 0, $897_1 = 0, $897$hi = 0, $913_1 = 0, $913$hi = 0, $917_1 = 0, $917$hi = 0, $954_1 = 0, $954$hi = 0, $958_1 = 0, $958$hi = 0, $977_1 = 0, $977$hi = 0, $981_1 = 0, $981$hi = 0, $1004_1 = 0, $1004$hi = 0, $1008_1 = 0, $1008$hi = 0, $1024 = 0, $1024$hi = 0, $1028 = 0, $1028$hi = 0, $1042 = 0, $1042$hi = 0, $1044 = 0, $1044$hi = 0, $1064 = 0, $1064$hi = 0, $1068 = 0, $1068$hi = 0, $1096$hi = 0, $175_1 = 0, $1103$hi = 0, $176_1 = 0;
  label$1 : {
   $7_1 = global$0 - 8960 | 0;
   $19_1 = $7_1;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $19_1;
  }
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $21_1 = 0;
  $21$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$3
       }
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
       $2_1 = HEAPU8[$12_1 >> 0] | 0;
       continue label$6;
      }
      $11_1 = 1;
      $2_1 = $931($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $2_1 = $931($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $21_1 = 0;
   $21$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($12_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $12_1 + 1 | 0;
      $2_1 = HEAPU8[$12_1 >> 0] | 0;
      break label$10;
     }
     $2_1 = $931($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $13_1 = 0;
  HEAP32[($7_1 + 768 | 0) >> 2] = 0;
  $14_1 = $2_1 + -48 | 0;
  label$12 : {
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        label$18 : {
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          break label$18
         }
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         if ($14_1 >>> 0 <= 9 >>> 0) {
          break label$18
         }
         $12_1 = 0;
         $16_1 = 0;
         break label$17;
        }
        i64toi32_i32$5 = 0;
        $22_1 = 0;
        $22$hi = i64toi32_i32$5;
        $16_1 = 0;
        $12_1 = 0;
        $13_1 = 0;
        label$19 : while (1) {
         label$20 : {
          label$21 : {
           if (!($15_1 & 1 | 0)) {
            break label$21
           }
           label$22 : {
            if ($8_1) {
             break label$22
            }
            i64toi32_i32$5 = $22$hi;
            $21_1 = $22_1;
            $21$hi = i64toi32_i32$5;
            $8_1 = 1;
            break label$20;
           }
           $11_1 = ($11_1 | 0) != (0 | 0);
           break label$16;
          }
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$0 = $22_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $22_1 = i64toi32_i32$1;
          $22$hi = i64toi32_i32$4;
          label$23 : {
           if (($12_1 | 0) > (2044 | 0)) {
            break label$23
           }
           $15_1 = ($2_1 | 0) != (48 | 0);
           i64toi32_i32$4 = $22$hi;
           $17_1 = $22_1;
           $11_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
           label$24 : {
            if (!$16_1) {
             break label$24
            }
            $14_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $13_1 = $15_1 ? $17_1 : $13_1;
           HEAP32[$11_1 >> 2] = $14_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $133_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $133_1;
           $12_1 = $12_1 + $2_1 | 0;
           break label$20;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break label$20
          }
          HEAP32[($7_1 + 8944 | 0) >> 2] = HEAP32[($7_1 + 8944 | 0) >> 2] | 0 | 1 | 0;
         }
         label$25 : {
          label$26 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$26
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break label$25;
          }
          $2_1 = $931($1_1 | 0) | 0;
         }
         $14_1 = $2_1 + -48 | 0;
         $15_1 = ($2_1 | 0) == (46 | 0);
         if ($15_1) {
          continue label$19
         }
         if ($14_1 >>> 0 < 10 >>> 0) {
          continue label$19
         }
         break label$19;
        };
       }
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $21$hi;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $21_1 : $22_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $21_1 = i64toi32_i32$3;
       $21$hi = i64toi32_i32$5;
       label$27 : {
        if (!$11_1) {
         break label$27
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break label$27
        }
        label$28 : {
         i64toi32_i32$5 = $943($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $23_1 = i64toi32_i32$5;
         $23$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$28
         }
         if (!$6_1) {
          break label$14
         }
         i64toi32_i32$2 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$2;
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$28
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$2 = $21$hi;
        i64toi32_i32$2 = $23$hi;
        i64toi32_i32$4 = $23_1;
        i64toi32_i32$3 = $21$hi;
        i64toi32_i32$5 = $21_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $21_1 = i64toi32_i32$0;
        $21$hi = i64toi32_i32$1;
        break label$13;
       }
       $11_1 = ($11_1 | 0) != (0 | 0);
       if (($2_1 | 0) < (0 | 0)) {
        break label$15
       }
      }
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$15
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if ($11_1) {
      break label$13
     }
     HEAP32[($868() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $22_1 = 0;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $930($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $21_1 = 0;
    $21$hi = i64toi32_i32$1;
    break label$12;
   }
   label$29 : {
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    if ($1_1) {
     break label$29
    }
    $954($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$30 : {
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$2 = $22_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $165_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $166_1 = 0
      } else {
       $166_1 = 1
      }
      $167_1 = $166_1;
     } else {
      $167_1 = 0
     }
     $165_1 = $167_1;
    }
    if ($165_1) {
     break label$30
    }
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21_1;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$4 = $22_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$30
     }
    }
    $956($7_1 + 48 | 0 | 0, $5_1 | 0);
    $957($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $238_1 = i64toi32_i32$5;
    $238$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$2;
    $242$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$5;
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$2;
    $248$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $238$hi;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$1 = $248$hi;
    $959($7_1 + 16 | 0 | 0, $238_1 | 0, i64toi32_i32$5 | 0, $242_1 | 0, i64toi32_i32$2 | 0, $244_1 | 0, i64toi32_i32$4 | 0, $248_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   label$32 : {
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$4 = ($4_1 | 0) / (-2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
    $258_1 = i64toi32_i32$4;
    $258$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$4 = $258$hi;
    i64toi32_i32$5 = $258_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$32
    }
    HEAP32[($868() | 0) >> 2] = 68;
    $956($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $267_1 = i64toi32_i32$2;
    $267$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $271_1 = i64toi32_i32$1;
    $271$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $267$hi;
    i64toi32_i32$1 = $271$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $959($7_1 + 80 | 0 | 0, $267_1 | 0, i64toi32_i32$2 | 0, $271_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 84 | 0) >> 2] | 0;
    $275_1 = i64toi32_i32$4;
    $275$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $279_1 = i64toi32_i32$5;
    $279$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $275$hi;
    i64toi32_i32$5 = $279$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $959($7_1 + 64 | 0 | 0, $275_1 | 0, i64toi32_i32$4 | 0, $279_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$2;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$2;
    break label$12;
   }
   label$33 : {
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $289_1 = i64toi32_i32$1;
    $289$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $21$hi;
    i64toi32_i32$5 = $21_1;
    i64toi32_i32$1 = $289$hi;
    i64toi32_i32$4 = $289_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$33
    }
    HEAP32[($868() | 0) >> 2] = 68;
    $956($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $298_1 = i64toi32_i32$5;
    $298$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $302_1 = i64toi32_i32$2;
    $302$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $298$hi;
    i64toi32_i32$2 = $302$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $959($7_1 + 128 | 0 | 0, $298_1 | 0, i64toi32_i32$5 | 0, $302_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $306_1 = i64toi32_i32$1;
    $306$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $310_1 = i64toi32_i32$4;
    $310$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $306$hi;
    i64toi32_i32$4 = $310$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $959($7_1 + 112 | 0 | 0, $306_1 | 0, i64toi32_i32$1 | 0, $310_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$2;
    $22$hi = i64toi32_i32$5;
    break label$12;
   }
   label$34 : {
    if (!$16_1) {
     break label$34
    }
    label$35 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$35
     }
     $2_1 = ($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$36 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $12_1 = $12_1 + 1 | 0;
   }
   i64toi32_i32$5 = $21$hi;
   $8_1 = $21_1;
   label$37 : {
    if (($13_1 | 0) > (8 | 0)) {
     break label$37
    }
    if (($13_1 | 0) > ($8_1 | 0)) {
     break label$37
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$38
     }
     $956($7_1 + 192 | 0 | 0, $5_1 | 0);
     $957($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $359_1 = i64toi32_i32$5;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$2;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $365_1 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $369_1 = i64toi32_i32$2;
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$1 = $369$hi;
     $959($7_1 + 160 | 0 | 0, $359_1 | 0, i64toi32_i32$5 | 0, $363_1 | 0, i64toi32_i32$2 | 0, $365_1 | 0, i64toi32_i32$4 | 0, $369_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    label$39 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$39
     }
     $956($7_1 + 272 | 0 | 0, $5_1 | 0);
     $957($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 768 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $388_1 = i64toi32_i32$1;
     $388$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $392_1 = i64toi32_i32$4;
     $392$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $394_1 = i64toi32_i32$1;
     $394$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $398_1 = i64toi32_i32$4;
     $398$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $388$hi;
     i64toi32_i32$4 = $392$hi;
     i64toi32_i32$2 = $394$hi;
     i64toi32_i32$5 = $398$hi;
     $959($7_1 + 240 | 0 | 0, $388_1 | 0, i64toi32_i32$1 | 0, $392_1 | 0, i64toi32_i32$4 | 0, $394_1 | 0, i64toi32_i32$2 | 0, $398_1 | 0, i64toi32_i32$5 | 0);
     $956($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 61472 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $409_1 = i64toi32_i32$5;
     $409$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $413_1 = i64toi32_i32$2;
     $413$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $415_1 = i64toi32_i32$5;
     $415$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $419_1 = i64toi32_i32$2;
     $419$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $409$hi;
     i64toi32_i32$2 = $413$hi;
     i64toi32_i32$4 = $415$hi;
     i64toi32_i32$1 = $419$hi;
     $953($7_1 + 208 | 0 | 0, $409_1 | 0, i64toi32_i32$5 | 0, $413_1 | 0, i64toi32_i32$2 | 0, $415_1 | 0, i64toi32_i32$4 | 0, $419_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     break label$12;
    }
    $1_1 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
    label$40 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$37
     }
    }
    $956($7_1 + 352 | 0 | 0, $5_1 | 0);
    $957($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $447_1 = i64toi32_i32$1;
    $447$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $451_1 = i64toi32_i32$4;
    $451$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $453_1 = i64toi32_i32$1;
    $453$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $457_1 = i64toi32_i32$4;
    $457$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $447$hi;
    i64toi32_i32$4 = $451$hi;
    i64toi32_i32$2 = $453$hi;
    i64toi32_i32$5 = $457$hi;
    $959($7_1 + 320 | 0 | 0, $447_1 | 0, i64toi32_i32$1 | 0, $451_1 | 0, i64toi32_i32$4 | 0, $453_1 | 0, i64toi32_i32$2 | 0, $457_1 | 0, i64toi32_i32$5 | 0);
    $956($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 61432 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $467_1 = i64toi32_i32$5;
    $467$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$2;
    $471$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $473_1 = i64toi32_i32$5;
    $473$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $477_1 = i64toi32_i32$2;
    $477$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $467$hi;
    i64toi32_i32$2 = $471$hi;
    i64toi32_i32$4 = $473$hi;
    i64toi32_i32$1 = $477$hi;
    $959($7_1 + 288 | 0 | 0, $467_1 | 0, i64toi32_i32$5 | 0, $471_1 | 0, i64toi32_i32$2 | 0, $473_1 | 0, i64toi32_i32$4 | 0, $477_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    break label$12;
   }
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $2_1 = 0;
     break label$41;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($12_1) {
       break label$44
      }
      $2_1 = 0;
      $12_1 = 0;
      break label$43;
     }
     $15_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 61472 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($15_1 | 0) | 0;
     $11_1 = 0;
     $1_1 = 0;
     $2_1 = 0;
     label$45 : while (1) {
      $14_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
      $506_1 = $14_1;
      $14_1 = HEAP32[$14_1 >> 2] | 0;
      $13_1 = ($14_1 >>> 0) / ($15_1 >>> 0) | 0;
      $11_1 = $13_1 + $11_1 | 0;
      HEAP32[$506_1 >> 2] = $11_1;
      $11_1 = ($1_1 | 0) == ($2_1 | 0) & !$11_1 | 0;
      $2_1 = $11_1 ? ($2_1 + 1 | 0) & 2047 | 0 : $2_1;
      $8_1 = $11_1 ? $8_1 + -9 | 0 : $8_1;
      $11_1 = Math_imul($17_1, $14_1 - Math_imul($13_1, $15_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($12_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$11_1) {
      break label$43
     }
     HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $11_1;
     $12_1 = $12_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $13_1 = ($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$13_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $14_1 = $12_1 + 2047 | 0;
      $11_1 = 0;
      $15_1 = $12_1;
      label$50 : while (1) {
       $12_1 = $15_1;
       label$51 : {
        label$52 : {
         $1_1 = $14_1 & 2047 | 0;
         $15_1 = ($7_1 + 768 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $15_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $174_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $174_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $584$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $586$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $584$hi;
         i64toi32_i32$4 = $174_1;
         i64toi32_i32$2 = $586$hi;
         i64toi32_i32$5 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $21_1 = i64toi32_i32$3;
         $21$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $11_1 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($21_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $22_1 = i64toi32_i32$0;
        $22$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $594_1 = i64toi32_i32$0;
        $594$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$5 = $21_1;
        i64toi32_i32$0 = $594$hi;
        i64toi32_i32$4 = $594_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $21_1 = i64toi32_i32$2;
        $21$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $22$hi;
        $11_1 = $22_1;
       }
       i64toi32_i32$3 = $21$hi;
       $14_1 = $21_1;
       HEAP32[$15_1 >> 2] = $21_1;
       $15_1 = ($1_1 | 0) != (($12_1 + -1 | 0) & 2047 | 0 | 0) ? $12_1 : ($1_1 | 0) == ($2_1 | 0) ? $12_1 : $21_1 ? $12_1 : $1_1;
       $14_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($2_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$11_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $2_1 = ($2_1 + -1 | 0) & 2047 | 0;
      if (($2_1 | 0) != ($15_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 768 | 0) + ((($15_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $12_1 = ($15_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6_1 = ($12_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 768 | 0) + ((($12_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $14_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $15_1 = $2_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $2_1 = ($1_1 + $15_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($12_1 | 0)) {
            break label$60
           }
           $2_1 = HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $11_1 = HEAP32[(($1_1 << 2 | 0) + 61456 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $11_1 >>> 0) {
            break label$60
           }
           if ($2_1 >>> 0 > $11_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $2_1 = ($1_1 + $15_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($12_1 | 0)) {
            break label$63
           }
           $12_1 = ($12_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($12_1 << 2 | 0) + ($7_1 + 768 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$3 = $22$hi;
          i64toi32_i32$3 = $21$hi;
          i64toi32_i32$5 = $22$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $959($7_1 + 752 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $957($7_1 + 736 | 0 | 0, HEAP32[(($7_1 + 768 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $735_1 = i64toi32_i32$4;
          $735$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $739_1 = i64toi32_i32$1;
          $739$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $741_1 = i64toi32_i32$4;
          $741$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $745_1 = i64toi32_i32$1;
          $745$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $735$hi;
          i64toi32_i32$1 = $739$hi;
          i64toi32_i32$5 = $741$hi;
          i64toi32_i32$3 = $745$hi;
          $949($7_1 + 720 | 0 | 0, $735_1 | 0, i64toi32_i32$4 | 0, $739_1 | 0, i64toi32_i32$1 | 0, $741_1 | 0, i64toi32_i32$5 | 0, $745_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $22_1 = i64toi32_i32$3;
          $22$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $956($7_1 + 704 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$3 = $22$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $764_1 = i64toi32_i32$3;
         $764$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $768_1 = i64toi32_i32$5;
         $768$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $21$hi;
         i64toi32_i32$5 = $22$hi;
         i64toi32_i32$1 = $764$hi;
         i64toi32_i32$4 = $768$hi;
         $959($7_1 + 688 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $764_1 | 0, i64toi32_i32$1 | 0, $768_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 688 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $22_1 = i64toi32_i32$4;
         $22$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
         $23_1 = i64toi32_i32$1;
         $23$hi = i64toi32_i32$4;
         $11_1 = $16_1 + 113 | 0;
         $1_1 = $11_1 - $4_1 | 0;
         $14_1 = ($1_1 | 0) < ($3_1 | 0);
         $2_1 = $14_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($2_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $25_1 = 0;
         $25$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $26_1 = 0;
         $26$hi = i64toi32_i32$4;
         break label$54;
        }
        $16_1 = $14_1 + $16_1 | 0;
        $2_1 = $12_1;
        if (($15_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $13_1 = 1e9 >>> $14_1 | 0;
       $17_1 = (-1 << $14_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $2_1 = $15_1;
       label$64 : while (1) {
        $11_1 = ($7_1 + 768 | 0) + ($15_1 << 2 | 0) | 0;
        $810_1 = $11_1;
        $11_1 = HEAP32[$11_1 >> 2] | 0;
        $1_1 = ($11_1 >>> $14_1 | 0) + $1_1 | 0;
        HEAP32[$810_1 >> 2] = $1_1;
        $1_1 = ($15_1 | 0) == ($2_1 | 0) & !$1_1 | 0;
        $2_1 = $1_1 ? ($2_1 + 1 | 0) & 2047 | 0 : $2_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($11_1 & $17_1 | 0, $13_1);
        $15_1 = ($15_1 + 1 | 0) & 2047 | 0;
        if (($15_1 | 0) != ($12_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 768 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $1_1;
        $12_1 = $6_1;
        continue label$55;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $2_1 = $6_1;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $954($7_1 + 640 | 0 | 0, +(+$971(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $872_1 = i64toi32_i32$4;
    $872$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $876_1 = i64toi32_i32$1;
    $876$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $872$hi;
    i64toi32_i32$1 = $876$hi;
    i64toi32_i32$5 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    $937($7_1 + 672 | 0 | 0, $872_1 | 0, i64toi32_i32$4 | 0, $876_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $26_1 = i64toi32_i32$3;
    $26$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $25_1 = i64toi32_i32$5;
    $25$hi = i64toi32_i32$3;
    $954($7_1 + 624 | 0 | 0, +(+$971(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $893_1 = i64toi32_i32$3;
    $893$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $897_1 = i64toi32_i32$5;
    $897$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = $893$hi;
    i64toi32_i32$4 = $897$hi;
    $970($7_1 + 656 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $893_1 | 0, i64toi32_i32$1 | 0, $897_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 668 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $24$hi;
    $961($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$3 = $26$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $913_1 = i64toi32_i32$3;
    $913$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $917_1 = i64toi32_i32$5;
    $917$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $25$hi;
    i64toi32_i32$5 = $26$hi;
    i64toi32_i32$1 = $913$hi;
    i64toi32_i32$4 = $917$hi;
    $949($7_1 + 592 | 0 | 0, $25_1 | 0, i64toi32_i32$3 | 0, $26_1 | 0, i64toi32_i32$5 | 0, $913_1 | 0, i64toi32_i32$1 | 0, $917_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 592 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$1;
    $23$hi = i64toi32_i32$4;
   }
   label$66 : {
    $8_1 = ($15_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($12_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 768 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($15_1 + 5 | 0) & 2047 | 0 | 0) == ($12_1 | 0)) {
        break label$67
       }
      }
      $954($7_1 + 480 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $954_1 = i64toi32_i32$4;
      $954$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $958_1 = i64toi32_i32$1;
      $958$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $954$hi;
      i64toi32_i32$3 = $958$hi;
      $949($7_1 + 464 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, $954_1 | 0, i64toi32_i32$5 | 0, $958_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 464 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $954($7_1 + 576 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $24$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $977_1 = i64toi32_i32$3;
      $977$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $981_1 = i64toi32_i32$5;
      $981$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$1 = $977$hi;
      i64toi32_i32$4 = $981$hi;
      $949($7_1 + 560 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $977_1 | 0, i64toi32_i32$1 | 0, $981_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 560 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$4;
      $24$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      break label$67;
     }
     $27_1 = +($5_1 | 0);
     label$71 : {
      if ((($15_1 + 5 | 0) & 2047 | 0 | 0) != ($12_1 | 0)) {
       break label$71
      }
      $954($7_1 + 512 | 0 | 0, +($27_1 * .5));
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $1004_1 = i64toi32_i32$4;
      $1004$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1008_1 = i64toi32_i32$1;
      $1008$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $24$hi;
      i64toi32_i32$5 = $1004$hi;
      i64toi32_i32$3 = $1008$hi;
      $949($7_1 + 496 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, $1004_1 | 0, i64toi32_i32$5 | 0, $1008_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $24_1 = i64toi32_i32$3;
      $24$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$3;
      break label$67;
     }
     $954($7_1 + 544 | 0 | 0, +($27_1 * .75));
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $1024 = i64toi32_i32$3;
     $1024$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1028 = i64toi32_i32$5;
     $1028$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$1 = $1024$hi;
     i64toi32_i32$4 = $1028$hi;
     $949($7_1 + 528 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $1024 | 0, i64toi32_i32$1 | 0, $1028 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$4;
     $24$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
    }
    if (($2_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $970($7_1 + 448 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $1042 = i64toi32_i32$3;
    $1042$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 460 | 0) >> 2] | 0;
    $1044 = i64toi32_i32$5;
    $1044$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1042$hi;
    i64toi32_i32$5 = $1044$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($951($1042 | 0, i64toi32_i32$3 | 0, $1044 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $949($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 440 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$5;
    $21$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $24$hi;
   i64toi32_i32$3 = $23$hi;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$4 = $24$hi;
   $949($7_1 + 416 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $24_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $1064 = i64toi32_i32$4;
   $1064$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1068 = i64toi32_i32$1;
   $1068$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$4 = $26$hi;
   i64toi32_i32$4 = $1064$hi;
   i64toi32_i32$1 = $1068$hi;
   i64toi32_i32$5 = $25$hi;
   i64toi32_i32$3 = $26$hi;
   $961($7_1 + 400 | 0 | 0, $1064 | 0, i64toi32_i32$4 | 0, $1068 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$5 | 0, $26_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 400 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$3;
   $22$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
   $23_1 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$3;
   label$72 : {
    if (($11_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $959($7_1 + 384 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    $11_1 = $951($21_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $22$hi;
    $27_1 = +$939(+(+$962($23_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0)));
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1096$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    $12_1 = $27_1 >= 1038459371706965525706099.0e10;
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$3 = $1096$hi;
    $175_1 = i64toi32_i32$5;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$4 = $12_1 ? $175_1 : $22_1;
    i64toi32_i32$1 = $12_1 ? i64toi32_i32$3 : i64toi32_i32$5;
    $22_1 = i64toi32_i32$4;
    $22$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1103$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$4 = $1103$hi;
    $176_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $176_1 : $23_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$0;
    $16_1 = $16_1 + i64toi32_i32$5 | 0;
    label$73 : {
     if (($11_1 | 0) != (0 | 0) & ($14_1 & (i64toi32_i32$5 ^ 1 | 0 | ($2_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$72
     }
    }
    HEAP32[($868() | 0) >> 2] = 68;
   }
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $22$hi;
   $938($7_1 + 368 | 0 | 0, $23_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$3 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$3;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $22_1 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $22$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $21$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$74 : {
   $20_1 = $7_1 + 8960 | 0;
   if ($20_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $20_1;
  }
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $931($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $931($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $931($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $931($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $931($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $944($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $42_1 = 0, $42$hi = 0, $48_1 = 0, $48$hi = 0;
  label$1 : {
   $4_1 = global$0 - 160 | 0;
   $5_1 = $4_1;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  $974($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $930($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $940($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $38_1 = $2_1;
   $39_1 = $1_1;
   $40_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $48_1 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$2 = $42_1;
   i64toi32_i32$0 = $48$hi;
   i64toi32_i32$3 = $48_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$38_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $39_1 : $40_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$4 : {
   $6_1 = $4_1 + 160 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $17_1 = 0, $17$hi = 0, $19_1 = 0, $19$hi = 0, $5_1 = 0.0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  $944($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$1 = $19$hi;
  $5_1 = +$962($17_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return +$5_1;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $948($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($868() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $949($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $11$hi = 0, $11_1 = 0, $12$hi = 0, $13$hi = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$6 = 0, $14$hi = 0, $8_1 = 0, $125_1 = 0, $126_1 = 0, $128_1 = 0, $129_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $14_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $10_1 = 0, $9_1 = 0, $27_1 = 0, $33_1 = 0, $34$hi = 0, $38_1 = 0, $45_1 = 0, $49_1 = 0, $50$hi = 0, $54_1 = 0, $59_1 = 0, $61_1 = 0, $69_1 = 0, $71_1 = 0, $79_1 = 0, $79$hi = 0, $85_1 = 0, $85$hi = 0, $89_1 = 0, $89$hi = 0, $99_1 = 0, $99$hi = 0, $127_1 = 0, $130_1 = 0, $157_1 = 0, $158_1 = 0, $158$hi = 0, $159_1 = 0, $159$hi = 0, $166$hi = 0, $169$hi = 0, $189_1 = 0, $190_1 = 0, $190$hi = 0, $191_1 = 0, $191$hi = 0, $198$hi = 0, $201$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $220_1 = 0, $220$hi = 0, $222$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $250$hi = 0, $254_1 = 0, $254$hi = 0, $256_1 = 0, $257$hi = 0, $275$hi = 0, $278_1 = 0, $279$hi = 0, $288_1 = 0, $289_1 = 0, $289$hi = 0, $290_1 = 0, $290$hi = 0, $297$hi = 0, $300$hi = 0, $315_1 = 0, $315$hi = 0, $321_1 = 0, $322$hi = 0, $328_1 = 0, $328$hi = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $333_1 = 0, $333$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $368_1 = 0, $369$hi = 0, $376$hi = 0, $378_1 = 0, $378$hi = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $384_1 = 0, $384$hi = 0, $386$hi = 0, $394$hi = 0, $398_1 = 0, $399$hi = 0, $400_1 = 0, $400$hi = 0, $148_1 = 0, $411_1 = 0, $412$hi = 0;
  label$1 : {
   $5_1 = global$0 - 112 | 0;
   $9_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $9_1;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $11_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$1;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12_1 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $27_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $13_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $33_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $34$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$5 = $34$hi;
     i64toi32_i32$3 = $33_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $12_1 = i64toi32_i32$5;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $38_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $27_1 : $38_1) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $45_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $49_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $50$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$3 = $50$hi;
     i64toi32_i32$5 = $49_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $12_1 = i64toi32_i32$3;
     $12$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $54_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $45_1 : $54_1) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$5 = $1$hi;
     $59_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $61_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $59_1 : $61_1) {
      break label$6
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $69_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $71_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $69_1 : $71_1) {
      break label$7
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $79_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $79$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $85_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $85$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $89_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $89$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $85$hi;
     i64toi32_i32$2 = $85_1;
     i64toi32_i32$5 = $89$hi;
     i64toi32_i32$4 = $89_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $99_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $99$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $99$hi;
    i64toi32_i32$0 = $99_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$3
    }
    label$9 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$3;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $127_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $13$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$1 = $13_1;
   $130_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $13_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $127_1 : $130_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $11_1 = i64toi32_i32$5;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $125_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $125_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $125_1 & 32767 | 0;
   label$10 : {
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $126_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $126_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $126_1 & 32767 | 0;
    if ($6_1) {
     break label$10
    }
    $157_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $11$hi;
    $158_1 = $11_1;
    $158$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $159_1 = $12_1;
    $159$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $12$hi;
    $6_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $11_1 : $12_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $128_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $128_1 = i64toi32_i32$5
    }
    $166$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $169$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $166$hi;
    i64toi32_i32$1 = $128_1;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $158$hi;
    i64toi32_i32$1 = $159$hi;
    $950($157_1 | 0, $158_1 | 0, i64toi32_i32$3 | 0, $159_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$3;
    $11$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $1$hi = i64toi32_i32$5;
   label$11 : {
    if ($8_1) {
     break label$11
    }
    $189_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $190_1 = $3_1;
    $190$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $191_1 = $1_1;
    $191$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $1_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $129_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $129_1 = i64toi32_i32$5
    }
    $198$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $201$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $198$hi;
    i64toi32_i32$1 = $129_1;
    i64toi32_i32$0 = $201$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $190$hi;
    i64toi32_i32$1 = $191$hi;
    $950($189_1 | 0, $190_1 | 0, i64toi32_i32$4 | 0, $191_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $131_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $131_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $214_1 = $131_1;
   $214$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $132_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $132_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $214$hi;
   i64toi32_i32$4 = $214_1;
   i64toi32_i32$1 = $216$hi;
   i64toi32_i32$5 = $132_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $133_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $133_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $220_1 = $133_1;
   $220$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $134_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $134_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $222$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $220$hi;
   i64toi32_i32$3 = $220_1;
   i64toi32_i32$4 = $222$hi;
   i64toi32_i32$5 = $134_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $135_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $135_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $135_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $12$hi = i64toi32_i32$1;
   label$12 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$12
    }
    label$13 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$13
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$12;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $950($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $958($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $250_1 = i64toi32_i32$4;
    $250$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $254_1 = i64toi32_i32$1;
    $254$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $250$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = $254$hi;
    i64toi32_i32$5 = $254_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $256_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $257$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = $257$hi;
    i64toi32_i32$3 = $256_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $14_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $136_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $136_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $136_1;
   $2$hi = i64toi32_i32$4;
   label$14 : {
    label$15 : {
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $137_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $138_1 = 0
       } else {
        $138_1 = 1
       }
       $139_1 = $138_1;
      } else {
       $139_1 = 0
      }
      $137_1 = $139_1;
     }
     if ($137_1) {
      break label$15
     }
     label$16 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $275$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $278_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $275$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$1 = $278_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $3_1 = i64toi32_i32$3;
      $3$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$16
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$3;
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $288_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $289_1 = $1_1;
     $289$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $290_1 = $3_1;
     $290$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     $7_1 = !($3_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $3_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $140_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $140_1 = i64toi32_i32$4
     }
     $297$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $300$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $297$hi;
     i64toi32_i32$2 = $140_1;
     i64toi32_i32$1 = $300$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $289$hi;
     i64toi32_i32$2 = $290$hi;
     $950($288_1 | 0, $289_1 | 0, i64toi32_i32$3 | 0, $290_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$14;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$4 = $14_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $315_1 = i64toi32_i32$1;
    $315$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $315$hi;
    i64toi32_i32$4 = $315_1;
    i64toi32_i32$1 = $322$hi;
    i64toi32_i32$2 = $321_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $141_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $141_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $328_1 = $141_1;
    $328$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $142_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $142_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $330$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $328$hi;
    i64toi32_i32$5 = $328_1;
    i64toi32_i32$4 = $330$hi;
    i64toi32_i32$2 = $142_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $331_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $331$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $333_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $333$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $331$hi;
    i64toi32_i32$4 = $331_1;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$2 = $333_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $143_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $143_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $3_1 = $143_1;
    $3$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $13$hi;
   i64toi32_i32$3 = $13_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$17 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$3;
   }
   $7_1 = 0;
   label$18 : {
    label$19 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$19
     }
     $7_1 = $6_1;
     break label$18;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $3$hi;
    $950($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $958($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $3_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $362_1 = i64toi32_i32$4;
    $362$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $366_1 = i64toi32_i32$3;
    $366$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $362$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = $366$hi;
    i64toi32_i32$2 = $366_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $368_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $369$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = $369$hi;
    i64toi32_i32$5 = $368_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $144_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $144_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $144_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $376$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $376$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $378_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $145_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $381$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$2 = $378_1;
   i64toi32_i32$4 = $381$hi;
   i64toi32_i32$5 = $145_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $382_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $382$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $146_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $146_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $384_1 = $146_1;
   $384$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $147_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $147_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $386$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $384$hi;
   i64toi32_i32$2 = $384_1;
   i64toi32_i32$4 = $386$hi;
   i64toi32_i32$5 = $147_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   i64toi32_i32$4 = 0;
   $394$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $394$hi;
   i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = $4_1;
   $398_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $399$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $382$hi;
   i64toi32_i32$5 = $382_1;
   i64toi32_i32$0 = $399$hi;
   i64toi32_i32$3 = $398_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $400_1 = i64toi32_i32$2;
   $400$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = ($6_1 | 0) == (4 | 0);
   $148_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ? $148_1 : 0;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   $411_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $412$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $400$hi;
   i64toi32_i32$5 = $400_1;
   i64toi32_i32$2 = $412$hi;
   i64toi32_i32$0 = $411_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
  label$20 : {
   $10_1 = $5_1 + 112 | 0;
   if ($10_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
 }
 
 function $950($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $951($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $952($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $953($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $20$hi = 0, $16$hi = 0, $18$hi = 0, $20_1 = 0, $21$hi = 0, $5_1 = 0, $16_1 = 0, i64toi32_i32$6 = 0, $22$hi = 0, $19$hi = 0, $18_1 = 0, $14$hi = 0, $21_1 = 0, $22_1 = 0, $14_1 = 0, $19_1 = 0, $15$hi = 0, $23$hi = 0, $15_1 = 0, $23_1 = 0, $13$hi = 0, $13_1 = 0, $8_1 = 0, $6_1 = 0, $17_1 = 0, $17$hi = 0, $7_1 = 0, $24$hi = 0, $9_1 = 0, $472_1 = 0, $473_1 = 0, $474_1 = 0, $476_1 = 0, $477_1 = 0, $478_1 = 0, $482_1 = 0, $483_1 = 0, $485_1 = 0, $486_1 = 0, $487_1 = 0, $488_1 = 0, $489_1 = 0, $491_1 = 0, $492_1 = 0, $493_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $506_1 = 0, $508_1 = 0, $509_1 = 0, $510_1 = 0, $512_1 = 0, $514_1 = 0, $515_1 = 0, $519_1 = 0, $520_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $525_1 = 0, $528_1 = 0, $529_1 = 0, $530_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $24_1 = 0, $534_1 = 0, $535_1 = 0, $537_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $544_1 = 0, $545_1 = 0, $546_1 = 0, $547_1 = 0, $549_1 = 0, $550_1 = 0, $551_1 = 0, $553_1 = 0, $554_1 = 0, $555_1 = 0, $556_1 = 0, $557_1 = 0, $559_1 = 0, $562_1 = 0, $563_1 = 0, $564_1 = 0, $565_1 = 0, $566_1 = 0, $567_1 = 0, $569_1 = 0, $570_1 = 0, $571_1 = 0, $572_1 = 0, $574_1 = 0, $575_1 = 0, $576_1 = 0, $577_1 = 0, $579_1 = 0, $11_1 = 0, $12_1 = 0, $10_1 = 0, $55_1 = 0, $59_1 = 0, $66_1 = 0, $70_1 = 0, $79_1 = 0, $79$hi = 0, $84_1 = 0, $84$hi = 0, $92_1 = 0, $92$hi = 0, $108_1 = 0, $109_1 = 0, $109$hi = 0, $110_1 = 0, $110$hi = 0, $117$hi = 0, $120$hi = 0, $135_1 = 0, $136_1 = 0, $136$hi = 0, $137_1 = 0, $137$hi = 0, $144$hi = 0, $147$hi = 0, $162_1 = 0, $164_1 = 0, $164$hi = 0, $168$hi = 0, $179_1 = 0, $179$hi = 0, $180$hi = 0, $183_1 = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $201_1 = 0, $201$hi = 0, $202$hi = 0, $204_1 = 0, $207_1 = 0, $207$hi = 0, $212$hi = 0, $222_1 = 0, $222$hi = 0, $223$hi = 0, $225_1 = 0, $228_1 = 0, $228$hi = 0, $233$hi = 0, $243_1 = 0, $243$hi = 0, $244$hi = 0, $246_1 = 0, $249_1 = 0, $249$hi = 0, $254$hi = 0, $263_1 = 0, $263$hi = 0, $264$hi = 0, $272_1 = 0, $272$hi = 0, $276$hi = 0, $281_1 = 0, $281$hi = 0, $286_1 = 0, $286$hi = 0, $293_1 = 0, $293$hi = 0, $300_1 = 0, $300$hi = 0, $305_1 = 0, $305$hi = 0, $307_1 = 0, $307$hi = 0, $310_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $316_1 = 0, $316$hi = 0, $317$hi = 0, $318_1 = 0, $318$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $326_1 = 0, $326$hi = 0, $327_1 = 0, $327$hi = 0, $332_1 = 0, $332$hi = 0, $339_1 = 0, $339$hi = 0, $340$hi = 0, $342_1 = 0, $343_1 = 0, $343$hi = 0, $345_1 = 0, $345$hi = 0, $348_1 = 0, $350$hi = 0, $351_1 = 0, $351$hi = 0, $354_1 = 0, $354$hi = 0, $355$hi = 0, $356$hi = 0, $360_1 = 0, $361$hi = 0, $362$hi = 0, $364_1 = 0, $365$hi = 0, $366$hi = 0, $373_1 = 0, $373$hi = 0, $377_1 = 0, $377$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $385$hi = 0, $390_1 = 0, $390$hi = 0, $392_1 = 0, $392$hi = 0, $395_1 = 0, $397$hi = 0, $398_1 = 0, $398$hi = 0, $401_1 = 0, $401$hi = 0, $402$hi = 0, $403_1 = 0, $403$hi = 0, $404_1 = 0, $404$hi = 0, $417_1 = 0, $417$hi = 0, $424_1 = 0, $424$hi = 0, $425$hi = 0, $427_1 = 0, $428_1 = 0, $428$hi = 0, $430_1 = 0, $430$hi = 0, $433_1 = 0, $435$hi = 0, $436_1 = 0, $436$hi = 0, $439_1 = 0, $439$hi = 0, $440$hi = 0, $441$hi = 0, $445_1 = 0, $446$hi = 0, $447_1 = 0, $447$hi = 0, $452_1 = 0, $453$hi = 0, $458_1 = 0, $458$hi = 0, $460_1 = 0, $460$hi = 0, $462$hi = 0, $467_1 = 0, $467$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $480_1 = 0, $480$hi = 0, $481_1 = 0, $481$hi = 0, $484_1 = 0, $484$hi = 0, $490_1 = 0, $490$hi = 0, $494_1 = 0, $495$hi = 0, $496$hi = 0, $499_1 = 0, $499$hi = 0, $500_1 = 0, $500$hi = 0, $507_1 = 0, $507$hi = 0, $511_1 = 0, $513_1 = 0, $513$hi = 0, $515$hi = 0, $516_1 = 0, $516$hi = 0, $517_1 = 0, $517$hi = 0, $518_1 = 0, $518$hi = 0, $520$hi = 0, $524_1 = 0, $525$hi = 0, $526_1 = 0, $526$hi = 0, $527_1 = 0, $527$hi = 0, $536_1 = 0, $536$hi = 0, $541_1 = 0, $541$hi = 0, $542_1 = 0, $542$hi = 0, $543_1 = 0, $543$hi = 0, $548_1 = 0, $548$hi = 0, $552_1 = 0, $553$hi = 0, $554$hi = 0, $558_1 = 0, $559$hi = 0, $560_1 = 0, $560$hi = 0, $561_1 = 0, $561$hi = 0, $568_1 = 0, $568$hi = 0, $573_1 = 0, $573$hi = 0, $578_1 = 0, $578$hi = 0, $581_1 = 0, $581$hi = 0, $584_1 = 0, $585$hi = 0, $588_1 = 0, $589$hi = 0, $590$hi = 0, $593_1 = 0, $594$hi = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $601_1 = 0, $602$hi = 0, $603_1 = 0, $603$hi = 0, $604_1 = 0, $604$hi = 0, $605_1 = 0, $605$hi = 0, $612_1 = 0, $612$hi = 0, $615_1 = 0, $615$hi = 0, $618_1 = 0, $620$hi = 0, $621_1 = 0, $621$hi = 0, $625_1 = 0, $626_1 = 0, $626$hi = 0, $627_1 = 0, $627$hi = 0, $629$hi = 0, $630$hi = 0, $632_1 = 0, $633$hi = 0, $634$hi = 0, $638_1 = 0, $639$hi = 0, $644$hi = 0, $653_1 = 0, $654$hi = 0, $655_1 = 0, $655$hi = 0, $658_1 = 0, $658$hi = 0, $664_1 = 0, $664$hi = 0, $665_1 = 0, $665$hi = 0, $669_1 = 0, $669$hi = 0, $674_1 = 0, $675$hi = 0, $676_1 = 0, $676$hi = 0, $678$hi = 0, $580_1 = 0, $680_1 = 0, $680$hi = 0, $683_1 = 0, $683$hi = 0, $684_1 = 0, $684$hi = 0, $685$hi = 0, $688_1 = 0, $688$hi = 0, $689_1 = 0, $689$hi = 0, $691_1 = 0, $691$hi = 0, $694_1 = 0, $696$hi = 0, $697_1 = 0, $697$hi = 0, $698_1 = 0, $698$hi = 0, $699_1 = 0, $699$hi = 0, $701$hi = 0, $702_1 = 0, $702$hi = 0, $703_1 = 0, $703$hi = 0, $705$hi = 0, $706_1 = 0, $706$hi = 0, $707$hi = 0, $710_1 = 0, $710$hi = 0, $711$hi = 0, $714_1 = 0, $714$hi = 0, $716$hi = 0, $717$hi = 0, $727_1 = 0, $727$hi = 0, $729_1 = 0, $729$hi = 0, $731$hi = 0, $741_1 = 0, $742$hi = 0, $743_1 = 0, $743$hi = 0, $746_1 = 0, $746$hi = 0, $747_1 = 0, $747$hi = 0, $752_1 = 0, $752$hi = 0, $753_1 = 0, $753$hi = 0, $755$hi = 0, $761_1 = 0, $761$hi = 0, $766_1 = 0, $767$hi = 0, $768_1 = 0, $768$hi = 0, $771_1 = 0, $771$hi = 0, $775$hi = 0, $582_1 = 0, $777_1 = 0, $777$hi = 0, $778$hi = 0, $781_1 = 0, $781$hi = 0, $782_1 = 0, $782$hi = 0, $783_1 = 0, $783$hi = 0, $785_1 = 0, $785$hi = 0, $788_1 = 0, $790$hi = 0, $791_1 = 0, $791$hi = 0, $792_1 = 0, $792$hi = 0, $793_1 = 0, $793$hi = 0, $795$hi = 0, $796_1 = 0, $796$hi = 0, $797_1 = 0, $797$hi = 0, $799$hi = 0, $800_1 = 0, $800$hi = 0, $801$hi = 0, $804_1 = 0, $804$hi = 0, $805$hi = 0, $808_1 = 0, $808$hi = 0, $810$hi = 0, $811$hi = 0, $827_1 = 0, $827$hi = 0, $828_1 = 0, $828$hi = 0, $830$hi = 0, $832_1 = 0, $834_1 = 0, $834$hi = 0, $836$hi = 0, $840_1 = 0, $844_1 = 0, $845$hi = 0, $849_1 = 0, $850$hi = 0, $860$hi = 0, $862_1 = 0, $862$hi = 0, $863_1 = 0, $863$hi = 0, $864_1 = 0, $864$hi = 0, $866$hi = 0, $868_1 = 0, $870_1 = 0, $870$hi = 0, $872$hi = 0, $876_1 = 0, $880_1 = 0, $881$hi = 0, $885_1 = 0, $886$hi = 0, $887$hi = 0, $907_1 = 0;
  label$1 : {
   $5_1 = global$0 - 192 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $472_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $472_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $472_1 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $473_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $473_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $473_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$6
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$5
      }
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      $55_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $16$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $16_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $59_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $16_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $55_1 : $59_1) {
       break label$7
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $15_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $15$hi = i64toi32_i32$0;
      break label$4;
     }
     label$8 : {
      i64toi32_i32$0 = $3$hi;
      $66_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $70_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $66_1 : $70_1) {
       break label$8
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$4;
     }
     label$9 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $79_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $79$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $79$hi;
      i64toi32_i32$2 = $79_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$9
      }
      label$10 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $84_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $84$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $84$hi;
       i64toi32_i32$0 = $84_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$10
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $15_1 = 0;
       $15$hi = i64toi32_i32$2;
       break label$4;
      }
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$4;
     }
     label$11 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $92_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $92$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $92$hi;
      i64toi32_i32$0 = $92_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$11
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$3
     }
     label$12 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$12
      }
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $15_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$4;
     }
     $8_1 = 0;
     label$13 : {
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      $108_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $109_1 = $1_1;
      $109$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $14$hi;
      $110_1 = $14_1;
      $110$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $14$hi;
      $8_1 = !($14_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $14_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $474_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $474_1 = i64toi32_i32$1
      }
      $117$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $120$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $117$hi;
      i64toi32_i32$0 = $474_1;
      i64toi32_i32$3 = $120$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $109$hi;
      i64toi32_i32$0 = $110$hi;
      $950($108_1 | 0, $109_1 | 0, i64toi32_i32$5 | 0, $110_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     $135_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $136_1 = $3_1;
     $136$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     $137_1 = $13_1;
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $13$hi;
     $9_1 = !($13_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $13_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$4
     }
     $144$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $147$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $144$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$1 = $147$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $136$hi;
     i64toi32_i32$5 = $137$hi;
     $950($135_1 | 0, $136_1 | 0, i64toi32_i32$2 | 0, $137_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $162_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $477_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $477_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $164_1 = $477_1;
    $164$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $17_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $17$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $478_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $478_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $168$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $164$hi;
    i64toi32_i32$3 = $164_1;
    i64toi32_i32$2 = $168$hi;
    i64toi32_i32$4 = $478_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $960($162_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $179_1 = i64toi32_i32$4;
    $179$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $179$hi;
    i64toi32_i32$0 = $179_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $180$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $183_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $482_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $482_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $186_1 = $482_1;
    $186$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $483_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $483_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $191$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $186$hi;
    i64toi32_i32$5 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$1 = $483_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $960($183_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $201_1 = i64toi32_i32$1;
    $201$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $201$hi;
    i64toi32_i32$2 = $201_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $202$hi;
    i64toi32_i32$2 = 0;
    $960($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $204_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $485_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $485_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $207_1 = $485_1;
    $207$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $486_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $212$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $207$hi;
    i64toi32_i32$5 = $207_1;
    i64toi32_i32$0 = $212$hi;
    i64toi32_i32$3 = $486_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $960($204_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $222_1 = i64toi32_i32$3;
    $222$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $222$hi;
    i64toi32_i32$0 = $222_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $223$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $223$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $225_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $487_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $487_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $228_1 = $487_1;
    $228$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $488_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $488_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $233$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$5 = $228_1;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$4 = $488_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $960($225_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $243_1 = i64toi32_i32$4;
    $243$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $243$hi;
    i64toi32_i32$2 = $243_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $244$hi;
    i64toi32_i32$2 = 0;
    $960($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $246_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $489_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $489_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $249_1 = $489_1;
    $249$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $491_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $491_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $254$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $249$hi;
    i64toi32_i32$5 = $249_1;
    i64toi32_i32$0 = $254$hi;
    i64toi32_i32$1 = $491_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $960($246_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $263_1 = i64toi32_i32$1;
    $263$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $263$hi;
    i64toi32_i32$0 = $263_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $264$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$0 = 0;
    $960($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$14 : {
     label$15 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $492_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $492_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $272_1 = $492_1;
      $272$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $493_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $493_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $276$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $272$hi;
      i64toi32_i32$5 = $272_1;
      i64toi32_i32$2 = $276$hi;
      i64toi32_i32$3 = $493_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $281_1 = $4_1;
      $281$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $495_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $18_1 = $495_1;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $281$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($281_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$2;
      $286_1 = i64toi32_i32$4;
      $286$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$0 = $16_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $496_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $496_1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $293_1 = i64toi32_i32$2;
      $293$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$4 = $286_1;
      i64toi32_i32$2 = $293$hi;
      i64toi32_i32$3 = $293_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $21_1 = $497_1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $300_1 = i64toi32_i32$0;
      $300$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $21_1;
      i64toi32_i32$0 = $300$hi;
      i64toi32_i32$3 = $300_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$3 = $21_1;
      i64toi32_i32$4 = 0;
      $305_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $498_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       $498_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
      }
      $307_1 = $498_1;
      $307$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$1 = $19_1;
      $310_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $310_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $501_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      }
      $312$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $307$hi;
      i64toi32_i32$4 = $307_1;
      i64toi32_i32$1 = $312$hi;
      i64toi32_i32$3 = $501_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $313_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $316_1 = i64toi32_i32$4;
      $316$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $313$hi;
      i64toi32_i32$5 = $313_1;
      i64toi32_i32$4 = $316$hi;
      i64toi32_i32$3 = $316_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $317$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $305$hi;
      i64toi32_i32$1 = $305_1;
      i64toi32_i32$5 = $317$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $318_1 = i64toi32_i32$4;
      $318$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $319_1 = $20_1;
      $319$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $320_1 = $4_1;
      $320$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 17;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $502_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $502_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$0 = $502_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $320$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      $326_1 = i64toi32_i32$0;
      $326$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $16$hi;
      $327_1 = $16_1;
      $327$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 15;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $503_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $503_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      i64toi32_i32$2 = $503_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -32768;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $21_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $327$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = __wasm_i64_mul($327_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$2;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $326$hi;
      i64toi32_i32$0 = $326_1;
      i64toi32_i32$2 = $332$hi;
      i64toi32_i32$3 = $332_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $504_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $22_1 = $504_1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $339_1 = i64toi32_i32$1;
      $339$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$4 = $22_1;
      i64toi32_i32$1 = $339$hi;
      i64toi32_i32$3 = $339_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $340$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $340$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $342_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $343_1 = $342_1;
      $343$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $505_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $505_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $345_1 = $505_1;
      $345$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$4 = $19_1;
      $348_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $348_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $506_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $506_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $350$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $345$hi;
      i64toi32_i32$0 = $345_1;
      i64toi32_i32$4 = $350$hi;
      i64toi32_i32$3 = $506_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $351_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $351$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $354_1 = i64toi32_i32$0;
      $354$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $351$hi;
      i64toi32_i32$5 = $351_1;
      i64toi32_i32$0 = $354$hi;
      i64toi32_i32$3 = $354_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $343$hi;
      i64toi32_i32$4 = $343_1;
      i64toi32_i32$5 = $355$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $356$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $319$hi;
      i64toi32_i32$2 = $319_1;
      i64toi32_i32$4 = $356$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$3 = $20_1;
      $360_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $361$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $318$hi;
      i64toi32_i32$3 = $318_1;
      i64toi32_i32$0 = $361$hi;
      i64toi32_i32$2 = $360_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $362$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 0;
      $364_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = 0;
      $365$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $362$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $365$hi;
      i64toi32_i32$3 = $364_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $366$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $366$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      $373_1 = i64toi32_i32$4;
      $373$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$1;
      $377_1 = i64toi32_i32$4;
      $377$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $378_1 = $4_1;
      $378$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $508_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $22_1 = $508_1;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $378$hi;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$0 = __wasm_i64_mul($378_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $382_1 = i64toi32_i32$0;
      $382$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $377$hi;
      i64toi32_i32$1 = $377_1;
      i64toi32_i32$0 = $382$hi;
      i64toi32_i32$3 = $382_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $509_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $509_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $385$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $373$hi;
      i64toi32_i32$5 = $373_1;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$3 = $509_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$1 = 0;
      $390_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      $390$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $510_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $510_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $392_1 = $510_1;
      $392$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $395_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $395_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $512_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      }
      $397$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $392$hi;
      i64toi32_i32$1 = $392_1;
      i64toi32_i32$5 = $397$hi;
      i64toi32_i32$3 = $512_1;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $398_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $398$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $401_1 = i64toi32_i32$1;
      $401$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $398$hi;
      i64toi32_i32$2 = $398_1;
      i64toi32_i32$1 = $401$hi;
      i64toi32_i32$3 = $401_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $402$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $390$hi;
      i64toi32_i32$5 = $390_1;
      i64toi32_i32$2 = $402$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $403_1 = i64toi32_i32$1;
      $403$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      $404_1 = $18_1;
      $404$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $514_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $514_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $20_1 = $514_1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $21_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$1;
      $417$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $417$hi;
      i64toi32_i32$3 = $417_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $515_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $515_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $22_1 = $515_1;
      $22$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$2 = $22_1;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $424_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $425$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $425$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $427_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $428_1 = $427_1;
      $428$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $519_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $519_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $430_1 = $519_1;
      $430$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$2 = $19_1;
      $433_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $433_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $520_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $520_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $435$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $430$hi;
      i64toi32_i32$0 = $430_1;
      i64toi32_i32$2 = $435$hi;
      i64toi32_i32$3 = $520_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      $436_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $436$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $439_1 = i64toi32_i32$0;
      $439$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $436$hi;
      i64toi32_i32$5 = $436_1;
      i64toi32_i32$0 = $439$hi;
      i64toi32_i32$3 = $439_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $440$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $428$hi;
      i64toi32_i32$2 = $428_1;
      i64toi32_i32$5 = $440$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $441$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $404$hi;
      i64toi32_i32$1 = $404_1;
      i64toi32_i32$2 = $441$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $445_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $446$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $403$hi;
      i64toi32_i32$3 = $403_1;
      i64toi32_i32$0 = $446$hi;
      i64toi32_i32$1 = $445_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $447_1 = i64toi32_i32$2;
      $447$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -2;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      $452_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $453$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $447_1;
      i64toi32_i32$2 = $453$hi;
      i64toi32_i32$4 = $452_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $20_1 = i64toi32_i32$2;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $2_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $2$hi = i64toi32_i32$5;
      $458_1 = $2_1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 62;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $521_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $521_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $460_1 = $521_1;
      $460$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$5 = $14_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 2;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
       $522_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
       $522_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      }
      $462$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $460$hi;
      i64toi32_i32$0 = $460_1;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$4 = $522_1;
      i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $458$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($458_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $467_1 = i64toi32_i32$3;
      $467$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 30;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $523_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $523_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      i64toi32_i32$0 = $523_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $16_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16$hi = i64toi32_i32$5;
      $471_1 = $16_1;
      $471$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $525_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       $525_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20_1 = $525_1;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $471$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = __wasm_i64_mul($471_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $475_1 = i64toi32_i32$3;
      $475$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $467$hi;
      i64toi32_i32$5 = $467_1;
      i64toi32_i32$3 = $475$hi;
      i64toi32_i32$4 = $475_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $18_1;
      $479_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $480_1 = $479_1;
      $480$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      $481_1 = i64toi32_i32$1;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $528_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $528_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $18_1 = $528_1;
      $18$hi = i64toi32_i32$2;
      $484_1 = $18_1;
      $484$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 30;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $529_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $529_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      i64toi32_i32$2 = $529_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -262145;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 262144;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $484$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($484_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $490_1 = i64toi32_i32$4;
      $490$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$0 = $481_1;
      i64toi32_i32$4 = $490$hi;
      i64toi32_i32$5 = $490_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $494_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $495$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $480$hi;
      i64toi32_i32$5 = $480_1;
      i64toi32_i32$1 = $495$hi;
      i64toi32_i32$0 = $494_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $496$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $499_1 = i64toi32_i32$5;
      $499$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $496$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $499$hi;
      i64toi32_i32$0 = $499_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $500_1 = i64toi32_i32$1;
      $500$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $23_1 = i64toi32_i32$2;
      $23$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $507_1 = i64toi32_i32$2;
      $507$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$3 = $23_1;
      i64toi32_i32$2 = $507$hi;
      i64toi32_i32$0 = $507_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$0 = $23_1;
      $511_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $511_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $530_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $530_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $513_1 = $530_1;
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $531_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $515$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $513$hi;
      i64toi32_i32$1 = $513_1;
      i64toi32_i32$4 = $515$hi;
      i64toi32_i32$3 = $531_1;
      i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
      $516_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $516$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$0 = $500_1;
      i64toi32_i32$1 = $516$hi;
      i64toi32_i32$3 = $516_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $517_1 = i64toi32_i32$2;
      $517$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $22$hi;
      $518_1 = $22_1;
      $518$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $532_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $532_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $518$hi;
      i64toi32_i32$5 = $518_1;
      i64toi32_i32$4 = $520$hi;
      i64toi32_i32$3 = $532_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $524_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $525$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $517$hi;
      i64toi32_i32$3 = $517_1;
      i64toi32_i32$2 = $525$hi;
      i64toi32_i32$5 = $524_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $526_1 = i64toi32_i32$4;
      $526$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $527_1 = $21_1;
      $527$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $23_1 = i64toi32_i32$3;
      $23$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $19_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $536_1 = i64toi32_i32$0;
      $536$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$1 = $23_1;
      i64toi32_i32$0 = $536$hi;
      i64toi32_i32$5 = $536_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $22_1 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $23$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $23$hi;
      i64toi32_i32$5 = $23_1;
      i64toi32_i32$3 = 0;
      $541_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $541$hi = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$4;
      $542_1 = i64toi32_i32$2;
      $542$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $2$hi;
      $543_1 = $2_1;
      $543$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 2;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $533_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
       $533_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      i64toi32_i32$3 = $533_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = -4;
      i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $23_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $23$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $543$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($543_1 | 0, i64toi32_i32$5 | 0, $23_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $548_1 = i64toi32_i32$3;
      $548$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $542$hi;
      i64toi32_i32$4 = $542_1;
      i64toi32_i32$3 = $548$hi;
      i64toi32_i32$1 = $548_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $24_1 = i64toi32_i32$0;
      $24$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$1 = $22_1;
      $552_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $553$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$1 = $541_1;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$4 = $552_1;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $554$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $527$hi;
      i64toi32_i32$5 = $527_1;
      i64toi32_i32$1 = $554$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $22_1 = i64toi32_i32$2;
      $22$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$4 = $21_1;
      $558_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $559$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $526$hi;
      i64toi32_i32$4 = $526_1;
      i64toi32_i32$3 = $559$hi;
      i64toi32_i32$5 = $558_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $560_1 = i64toi32_i32$1;
      $560$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $22$hi;
      $561_1 = $22_1;
      $561$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$2 = $20$hi;
      i64toi32_i32$2 = $23$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = __wasm_i64_mul($23_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$4;
      $21$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$4 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $568_1 = i64toi32_i32$4;
      $568$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$0 = $21_1;
      i64toi32_i32$4 = $568$hi;
      i64toi32_i32$5 = $568_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $20_1 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $573_1 = i64toi32_i32$0;
      $573$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = $573$hi;
      i64toi32_i32$5 = $573_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $578_1 = i64toi32_i32$2;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $578_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$0;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $534_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       $534_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $581_1 = $534_1;
      $581$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$4 = $20_1;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $584_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $585$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $20_1;
      $588_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $589$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $585$hi;
      i64toi32_i32$3 = $584_1;
      i64toi32_i32$4 = $589$hi;
      i64toi32_i32$1 = $588_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $590$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $593_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $594$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $590$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$0 = $594$hi;
      i64toi32_i32$3 = $593_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $535_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $535_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $581$hi;
      i64toi32_i32$2 = $581_1;
      i64toi32_i32$5 = $596$hi;
      i64toi32_i32$3 = $535_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $597_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $597$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $561$hi;
      i64toi32_i32$1 = $561_1;
      i64toi32_i32$2 = $597$hi;
      i64toi32_i32$3 = $597_1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $20_1 = i64toi32_i32$0;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $601_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$5 = 0;
      $602$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $560$hi;
      i64toi32_i32$3 = $560_1;
      i64toi32_i32$4 = $602$hi;
      i64toi32_i32$1 = $601_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $603_1 = i64toi32_i32$2;
      $603$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      $604_1 = $20_1;
      $604$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $24$hi;
      $605_1 = $24_1;
      $605$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $23$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $23$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $23_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $612_1 = i64toi32_i32$3;
      $612$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$3 = $612$hi;
      i64toi32_i32$1 = $612_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $537_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
       $537_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $615_1 = $537_1;
      $615$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      $618_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = $618_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
       $538_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      }
      $620$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $615$hi;
      i64toi32_i32$2 = $615_1;
      i64toi32_i32$1 = $620$hi;
      i64toi32_i32$0 = $538_1;
      i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $621_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $621$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $605$hi;
      i64toi32_i32$5 = $605_1;
      i64toi32_i32$2 = $621$hi;
      i64toi32_i32$0 = $621_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = $24$hi;
      i64toi32_i32$0 = $24_1;
      $625_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $626_1 = $625_1;
      $626$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $627_1 = i64toi32_i32$3;
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $539_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $539_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      $629$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $627$hi;
      i64toi32_i32$1 = $627_1;
      i64toi32_i32$0 = $629$hi;
      i64toi32_i32$5 = $539_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $630$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $630$hi;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$5 = $4_1;
      $632_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $633$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $626$hi;
      i64toi32_i32$5 = $626_1;
      i64toi32_i32$3 = $633$hi;
      i64toi32_i32$1 = $632_1;
      i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $634$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $604$hi;
      i64toi32_i32$4 = $604_1;
      i64toi32_i32$5 = $634$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$1 = $20_1;
      $638_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $639$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $603$hi;
      i64toi32_i32$1 = $603_1;
      i64toi32_i32$0 = $639$hi;
      i64toi32_i32$4 = $638_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$1 = 131071;
      i64toi32_i32$4 = -1;
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
       break label$15
      }
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 49;
      i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
       $540_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $540_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
      }
      $644$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      $16_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$3;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      $653_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = 0;
      $654$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $644$hi;
      i64toi32_i32$1 = $540_1;
      i64toi32_i32$2 = $654$hi;
      i64toi32_i32$3 = $653_1;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
      $655_1 = i64toi32_i32$0;
      $655$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$3 = $20_1;
      i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
      i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$0;
      $658_1 = i64toi32_i32$2;
      $658$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $544_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       $544_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $20_1 = $544_1;
      $20$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      $664_1 = i64toi32_i32$5;
      $664$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      $665_1 = $1_1;
      $665$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $545_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
       $545_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
      }
      $18_1 = $545_1;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $665$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($665_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $669_1 = i64toi32_i32$0;
      $669$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $664$hi;
      i64toi32_i32$4 = $664_1;
      i64toi32_i32$0 = $669$hi;
      i64toi32_i32$3 = $669_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $14_1 = i64toi32_i32$1;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       $546_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $546_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      }
      $22_1 = $546_1;
      $22$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $658$hi;
      i64toi32_i32$2 = $658_1;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$3 = $22_1;
      $674_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $675$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $655$hi;
      i64toi32_i32$3 = $655_1;
      i64toi32_i32$4 = $675$hi;
      i64toi32_i32$5 = $674_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $676_1 = i64toi32_i32$0;
      $676$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $678$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $678$hi;
      $580_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$2 = __wasm_i64_mul($580_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $680_1 = i64toi32_i32$2;
      $680$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $683_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $683$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $683$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $683_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $684_1 = i64toi32_i32$1;
      $684$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $680$hi;
      i64toi32_i32$3 = $680_1;
      i64toi32_i32$1 = $684$hi;
      i64toi32_i32$5 = $684_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $685$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $688_1 = i64toi32_i32$3;
      $688$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $685$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $688$hi;
      i64toi32_i32$5 = $688_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $689_1 = i64toi32_i32$1;
      $689$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $547_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $547_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $691_1 = $547_1;
      $691$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$5 = $21_1;
      $694_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = $694_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       $549_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      }
      $696$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $691$hi;
      i64toi32_i32$4 = $691_1;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = $549_1;
      i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
      $697_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
      $697$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $689$hi;
      i64toi32_i32$2 = $689_1;
      i64toi32_i32$4 = $697$hi;
      i64toi32_i32$0 = $697_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $698_1 = i64toi32_i32$3;
      $698$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $699_1 = $4_1;
      $699$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $550_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $550_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $701$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $699$hi;
      i64toi32_i32$5 = $701$hi;
      i64toi32_i32$5 = __wasm_i64_mul($699_1 | 0, i64toi32_i32$2 | 0, $550_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $702_1 = i64toi32_i32$5;
      $702$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $3$hi;
      $703_1 = $3_1;
      $703$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $551_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $551_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $705$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $703$hi;
      i64toi32_i32$1 = $705$hi;
      i64toi32_i32$1 = __wasm_i64_mul($703_1 | 0, i64toi32_i32$5 | 0, $551_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $706_1 = i64toi32_i32$1;
      $706$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $702$hi;
      i64toi32_i32$2 = $702_1;
      i64toi32_i32$1 = $706$hi;
      i64toi32_i32$0 = $706_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $707$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $710_1 = i64toi32_i32$2;
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $707$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$0 = $710_1;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $711$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $714_1 = i64toi32_i32$5;
      $714$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $711$hi;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$5 = $714$hi;
      i64toi32_i32$0 = $714_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $553_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
       $553_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $716$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $698$hi;
      i64toi32_i32$1 = $698_1;
      i64toi32_i32$4 = $716$hi;
      i64toi32_i32$0 = $553_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $717$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $676$hi;
      i64toi32_i32$3 = $676_1;
      i64toi32_i32$1 = $717$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$0 = $22_1;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$1;
      $1$hi = i64toi32_i32$4;
      $6_1 = $6_1 + -1 | 0;
      break label$14;
     }
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $554_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $554_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
     }
     $18_1 = $554_1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      $555_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
      $555_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
     }
     $727_1 = $555_1;
     $727$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $556_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      $556_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $729_1 = $556_1;
     $729$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
      $557_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $557_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     }
     $731$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $729$hi;
     i64toi32_i32$4 = $729_1;
     i64toi32_i32$5 = $731$hi;
     i64toi32_i32$0 = $557_1;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $1_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     $741_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = 0;
     $742$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $727$hi;
     i64toi32_i32$0 = $727_1;
     i64toi32_i32$2 = $742$hi;
     i64toi32_i32$5 = $741_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
     $743_1 = i64toi32_i32$3;
     $743$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$5 = $20_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$3;
     $746_1 = i64toi32_i32$2;
     $746$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     $747_1 = $1_1;
     $747$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $559_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $559_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $20_1 = $559_1;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $747$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($747_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     $752_1 = i64toi32_i32$1;
     $752$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     $753_1 = $18_1;
     $753$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $562_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
      $562_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $755$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $753$hi;
     i64toi32_i32$4 = $753_1;
     i64toi32_i32$3 = $755$hi;
     i64toi32_i32$5 = $562_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $22_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $22$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $14_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $761_1 = i64toi32_i32$1;
     $761$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $752$hi;
     i64toi32_i32$3 = $752_1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $563_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $563_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $23_1 = $563_1;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $746$hi;
     i64toi32_i32$2 = $746_1;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$5 = $23_1;
     $766_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $767$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $743$hi;
     i64toi32_i32$5 = $743_1;
     i64toi32_i32$3 = $767$hi;
     i64toi32_i32$4 = $766_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     $768_1 = i64toi32_i32$1;
     $768$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $771_1 = i64toi32_i32$5;
     $771$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $564_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $564_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
     }
     $14_1 = $564_1;
     $14$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $775$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $775$hi;
     $582_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($582_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $777_1 = i64toi32_i32$0;
     $777$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $771$hi;
     i64toi32_i32$5 = $771_1;
     i64toi32_i32$0 = $777$hi;
     i64toi32_i32$4 = $777_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $778$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $781_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $781$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$2 = $781$hi;
     i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $781_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $782_1 = i64toi32_i32$2;
     $782$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $778$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$2 = $782$hi;
     i64toi32_i32$4 = $782_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $783_1 = i64toi32_i32$0;
     $783$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $565_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $565_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
     }
     $785_1 = $565_1;
     $785$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $788_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $788_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $566_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $566_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $790$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $785$hi;
     i64toi32_i32$3 = $785_1;
     i64toi32_i32$4 = $790$hi;
     i64toi32_i32$5 = $566_1;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $791_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $791$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $783$hi;
     i64toi32_i32$1 = $783_1;
     i64toi32_i32$3 = $791$hi;
     i64toi32_i32$5 = $791_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $792_1 = i64toi32_i32$2;
     $792$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $793_1 = $4_1;
     $793$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$4 = $17_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $567_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $567_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $795$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$4 = $795$hi;
     i64toi32_i32$4 = __wasm_i64_mul($793_1 | 0, i64toi32_i32$1 | 0, $567_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $796_1 = i64toi32_i32$4;
     $796$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $797_1 = $3_1;
     $797$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $569_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $569_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $799$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $797$hi;
     i64toi32_i32$0 = $799$hi;
     i64toi32_i32$0 = __wasm_i64_mul($797_1 | 0, i64toi32_i32$4 | 0, $569_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $800_1 = i64toi32_i32$0;
     $800$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $796$hi;
     i64toi32_i32$1 = $796_1;
     i64toi32_i32$0 = $800$hi;
     i64toi32_i32$5 = $800_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $801$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $804_1 = i64toi32_i32$1;
     $804$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $801$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $804$hi;
     i64toi32_i32$5 = $804_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $805$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $808_1 = i64toi32_i32$4;
     $808$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $805$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$4 = $808$hi;
     i64toi32_i32$5 = $808_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $570_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $570_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $810$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $792$hi;
     i64toi32_i32$0 = $792_1;
     i64toi32_i32$3 = $810$hi;
     i64toi32_i32$5 = $570_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $811$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $768$hi;
     i64toi32_i32$2 = $768_1;
     i64toi32_i32$0 = $811$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$5 = $23_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $14$hi;
     $2_1 = $14_1;
     $2$hi = i64toi32_i32$3;
    }
    label$16 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $15_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$17 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$17
     }
     label$18 : {
      if ($7_1) {
       break label$18
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 65535;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
      $827_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
      $827$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      $828_1 = $4_1;
      $828$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
       $571_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $571_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      }
      $830$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $830$hi;
      i64toi32_i32$4 = $571_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $832_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$5 = $16_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       $572_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $572_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      }
      $834_1 = $572_1;
      $834$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $574_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $574_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $836$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $834$hi;
      i64toi32_i32$3 = $834_1;
      i64toi32_i32$4 = $836$hi;
      i64toi32_i32$1 = $574_1;
      i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      $840_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$3 = $17_1;
      $844_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $832_1 : $840_1;
      i64toi32_i32$1 = 0;
      $845$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $828$hi;
      i64toi32_i32$3 = $828_1;
      i64toi32_i32$5 = $845$hi;
      i64toi32_i32$4 = $844_1;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $4_1;
      $849_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $850$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $827$hi;
      i64toi32_i32$4 = $827_1;
      i64toi32_i32$0 = $850$hi;
      i64toi32_i32$3 = $849_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $3_1 = i64toi32_i32$5;
      $3$hi = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$4 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$4 | 0)) {
       break label$18
      }
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $15$hi = i64toi32_i32$1;
      break label$4;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$4;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $575_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $575_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $860$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$4 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $862_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $862$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $860$hi;
    i64toi32_i32$2 = $575_1;
    i64toi32_i32$1 = $862$hi;
    i64toi32_i32$3 = $862_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $863_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $863$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $864_1 = $4_1;
    $864$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
     $576_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $576_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    }
    $866$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $866$hi;
    i64toi32_i32$1 = $576_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $868_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$3 = $16_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $577_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $577_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $870_1 = $577_1;
    $870$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $579_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $579_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $872$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $870$hi;
    i64toi32_i32$2 = $870_1;
    i64toi32_i32$1 = $872$hi;
    i64toi32_i32$4 = $579_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$4 = $17_1;
    $876_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = $17_1;
    $880_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $868_1 : $876_1;
    i64toi32_i32$4 = 0;
    $881$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $864$hi;
    i64toi32_i32$2 = $864_1;
    i64toi32_i32$3 = $881$hi;
    i64toi32_i32$1 = $880_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $885_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $886$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $863$hi;
    i64toi32_i32$1 = $863_1;
    i64toi32_i32$5 = $886$hi;
    i64toi32_i32$2 = $885_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $887$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $887$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $15_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $15$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $0_1;
   HEAP32[i64toi32_i32$4 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $15_1;
   HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
   label$19 : {
    $11_1 = $5_1 + 192 | 0;
    if ($11_1 >>> 0 < global$2 >>> 0) {
     fimport$11()
    }
    global$0 = $11_1;
   }
   return;
  }
  i64toi32_i32$4 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$4 >> 2] = 0;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = 2147450880;
  i64toi32_i32$0 = i64toi32_i32$5 ? $15_1 : 0;
  i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$4;
  $907_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $907_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  label$21 : {
   $12_1 = $5_1 + 192 | 0;
   if ($12_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $2_1 = 0, $6_1 = 0, $6$hi = 0, $8_1 = 0, $8$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $33_1 = 0, $5_1 = 0, $4_1 = 0, $38_1 = 0, $39_1 = 0, $39$hi = 0, $43_1 = 0, $56_1 = 0, $56$hi = 0, $60$hi = 0, $69_1 = 0, $69$hi = 0, $70_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $6_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $28_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $8_1 = $28_1;
    $8$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $29_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $29_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$5 : {
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $30_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $30_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $8_1 = $30_1;
    $8$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $31_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $31_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $7_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $7$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $7$hi;
    if (!!($7_1 | i64toi32_i32$3 | 0)) {
     break label$6
    }
    i64toi32_i32$3 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    break label$3;
   }
   $38_1 = $2_1;
   i64toi32_i32$3 = $7$hi;
   $39_1 = $7_1;
   $39$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   $43_1 = Math_clz32($6_1) + 32 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $32_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $32_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $43_1 : Math_clz32($32_1);
   i64toi32_i32$3 = $39$hi;
   i64toi32_i32$4 = 0;
   $950($38_1 | 0, $39_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $56_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $56$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $33_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $33_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $60$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $56$hi;
   i64toi32_i32$4 = $56_1;
   i64toi32_i32$3 = $60$hi;
   i64toi32_i32$0 = $33_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$3;
   $8$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $69_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $69$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$4 = $7_1;
  i64toi32_i32$5 = $69$hi;
  i64toi32_i32$0 = $69_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $70_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $70_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$7 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $6_1 = 0, $5_1 = 0, $36_1 = 0, $44_1 = 0, $44$hi = 0, $48$hi = 0, $54_1 = 0, $55_1 = 0, $55$hi = 0, $59$hi = 0, $60_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $5_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  label$3 : {
   label$4 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $26_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $26_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$5;
    break label$3;
   }
   label$5 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$5
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $27_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $27_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$1;
    break label$3;
   }
   label$6 : {
    if ($4_1) {
     break label$6
    }
    i64toi32_i32$1 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $950($2_1 | 0, $36_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $44_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $44$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $28_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $28_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $48$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $44$hi;
   i64toi32_i32$5 = $44_1;
   i64toi32_i32$1 = $48$hi;
   i64toi32_i32$3 = $28_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $54_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $7$hi;
  $55_1 = $7_1;
  $55$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $29_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $59$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $55$hi;
  i64toi32_i32$5 = $55_1;
  i64toi32_i32$0 = $59$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $60_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $54_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $60_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$7 : {
   $6_1 = $2_1 + 16 | 0;
   if ($6_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $4_1 = 0, $25_1 = 0, $33_1 = 0, $33$hi = 0, $37$hi = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $25_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $950($2_1 | 0, $25_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $33_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $33$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $23_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $23_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $37$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $33$hi;
   i64toi32_i32$1 = $33_1;
   i64toi32_i32$0 = $37$hi;
   i64toi32_i32$3 = $23_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $38_1 = i64toi32_i32$4;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $24_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $24_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$2 = $42$hi;
   i64toi32_i32$3 = $24_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  label$5 : {
   $5_1 = $2_1 + 16 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
 }
 
 function $957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $19_1 = 0, $4_1 = 0, $3_1 = 0, $17_1 = 0, $26_1 = 0, $26$hi = 0, $30$hi = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  label$3 : {
   label$4 : {
    if ($1_1) {
     break label$4
    }
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 0;
   $17_1 = $1_1;
   $1_1 = Math_clz32($1_1) ^ 31 | 0;
   i64toi32_i32$1 = 0;
   $950($2_1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - $1_1 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $1_1 + 16383 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $19_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $19_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26_1;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $19_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  label$5 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
 }
 
 function $958($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $959($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $16$hi = 0, $16_1 = 0, $14$hi = 0, $13$hi = 0, $12$hi = 0, $17$hi = 0, $14_1 = 0, $6_1 = 0, $17_1 = 0, $13_1 = 0, $12_1 = 0, $20$hi = 0, $8_1 = 0, $20_1 = 0, $15$hi = 0, $18$hi = 0, $19$hi = 0, $7_1 = 0, $15_1 = 0, $18_1 = 0, $19_1 = 0, $21$hi = 0, $24$hi = 0, $21_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $25$hi = 0, $26$hi = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $234_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $243_1 = 0, $244_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $252_1 = 0, $254_1 = 0, $255_1 = 0, $257_1 = 0, $22_1 = 0, $258_1 = 0, $260_1 = 0, $23_1 = 0, $24_1 = 0, $262_1 = 0, $26_1 = 0, $263_1 = 0, $264_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $269_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $276_1 = 0, $277_1 = 0, $278_1 = 0, $279_1 = 0, $280_1 = 0, $11_1 = 0, $10_1 = 0, $35_1 = 0, $35$hi = 0, $37$hi = 0, $40_1 = 0, $40$hi = 0, $42$hi = 0, $45_1 = 0, $45$hi = 0, $49$hi = 0, $76_1 = 0, $80_1 = 0, $87_1 = 0, $91_1 = 0, $100_1 = 0, $100$hi = 0, $112_1 = 0, $112$hi = 0, $134_1 = 0, $135_1 = 0, $135$hi = 0, $136_1 = 0, $136$hi = 0, $143$hi = 0, $146$hi = 0, $156_1 = 0, $156$hi = 0, $161$hi = 0, $168_1 = 0, $169_1 = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $192_1 = 0, $192$hi = 0, $197$hi = 0, $200_1 = 0, $200$hi = 0, $202$hi = 0, $213_1 = 0, $213$hi = 0, $221_1 = 0, $221$hi = 0, $228_1 = 0, $228$hi = 0, $233_1 = 0, $233$hi = 0, $242_1 = 0, $242$hi = 0, $249_1 = 0, $249$hi = 0, $251_1 = 0, $251$hi = 0, $253_1 = 0, $253$hi = 0, $256_1 = 0, $258$hi = 0, $259_1 = 0, $259$hi = 0, $261_1 = 0, $261$hi = 0, $270_1 = 0, $270$hi = 0, $275_1 = 0, $275$hi = 0, $283_1 = 0, $283$hi = 0, $286$hi = 0, $25_1 = 0, $302_1 = 0, $302$hi = 0, $306_1 = 0, $307_1 = 0, $307$hi = 0, $311_1 = 0, $311$hi = 0, $315_1 = 0, $316$hi = 0, $317_1 = 0, $317$hi = 0, $318_1 = 0, $318$hi = 0, $321_1 = 0, $322$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $331_1 = 0, $332$hi = 0, $333$hi = 0, $336_1 = 0, $336$hi = 0, $337_1 = 0, $337$hi = 0, $344_1 = 0, $344$hi = 0, $350_1 = 0, $350$hi = 0, $352$hi = 0, $353_1 = 0, $353$hi = 0, $354_1 = 0, $354$hi = 0, $355_1 = 0, $355$hi = 0, $357$hi = 0, $361_1 = 0, $362$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $366_1 = 0, $366$hi = 0, $369_1 = 0, $370$hi = 0, $373_1 = 0, $374$hi = 0, $375$hi = 0, $378_1 = 0, $379$hi = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $386_1 = 0, $387$hi = 0, $388_1 = 0, $388$hi = 0, $389_1 = 0, $389$hi = 0, $392_1 = 0, $393$hi = 0, $396_1 = 0, $397$hi = 0, $398$hi = 0, $402_1 = 0, $403$hi = 0, $413_1 = 0, $413$hi = 0, $415$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $426$hi = 0, $460_1 = 0, $460$hi = 0, $462_1 = 0, $462$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $472$hi = 0, $477_1 = 0, $477$hi = 0, $481_1 = 0, $481$hi = 0, $490$hi = 0, $492_1 = 0, $492$hi = 0, $498_1 = 0, $504_1 = 0, $504$hi = 0, $509_1 = 0, $510$hi = 0, $514_1 = 0, $514$hi = 0, $518_1 = 0, $518$hi = 0, $521_1 = 0, $521$hi = 0, $525_1 = 0, $526$hi = 0;
  label$1 : {
   $5_1 = global$0 - 96 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $35_1 = $230_1;
  $35$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $37$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $35$hi;
  i64toi32_i32$1 = $35_1;
  i64toi32_i32$0 = $37$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $12_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $40_1 = $232_1;
  $40$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $234_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $234_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $42$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$1 = $40_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $234_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $13_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $235_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $45_1 = $235_1;
  $45$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $14_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $236_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $236_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $49$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $45$hi;
  i64toi32_i32$2 = $45_1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$3 = $236_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $16_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $237_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $18_1 = $237_1;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = $14_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $238_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $19_1 = $238_1;
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $239_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $239_1 & 32767 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $240_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $240_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $240_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$5
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$4
     }
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     $76_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $20_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $80_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $20_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $76_1 : $80_1) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$7 : {
     i64toi32_i32$2 = $3$hi;
     $87_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $91_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $87_1 : $91_1) {
      break label$7
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$8 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $100_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $100$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$1 = $100_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$8
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $16_1 = 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$3;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $112_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $112$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $112$hi;
     i64toi32_i32$2 = $112_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$11 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$11
      }
      i64toi32_i32$0 = 2147450880;
      $16_1 = 0;
      $16$hi = i64toi32_i32$0;
      break label$3;
     }
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$3 = $16_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $16_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $16$hi = i64toi32_i32$2;
     break label$3;
    }
    label$12 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$1 = $20_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$12
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    label$13 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    $8_1 = 0;
    label$14 : {
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$14
     }
     $134_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $135_1 = $1_1;
     $135$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     $136_1 = $17_1;
     $136$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $17$hi;
     $8_1 = !($17_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $17_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $241_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $241_1 = i64toi32_i32$0
     }
     $143$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $146$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $143$hi;
     i64toi32_i32$3 = $241_1;
     i64toi32_i32$1 = $146$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $135$hi;
     i64toi32_i32$3 = $136$hi;
     $950($134_1 | 0, $135_1 | 0, i64toi32_i32$5 | 0, $136_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $243_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $243_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $156_1 = $243_1;
     $156$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $244_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $244_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $161$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $156$hi;
     i64toi32_i32$4 = $156_1;
     i64toi32_i32$5 = $161$hi;
     i64toi32_i32$0 = $244_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $245_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $18_1 = $245_1;
     $18$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$4
    }
    $168_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $169_1 = $3_1;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    $170_1 = $14_1;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    $9_1 = !($14_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $14_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $246_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $246_1 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $180$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $177$hi;
    i64toi32_i32$3 = $246_1;
    i64toi32_i32$0 = $180$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $169$hi;
    i64toi32_i32$3 = $170$hi;
    $950($168_1 | 0, $169_1 | 0, i64toi32_i32$2 | 0, $170_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $247_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $247_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $192_1 = $247_1;
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $197$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $192_1;
    i64toi32_i32$2 = $197$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $15_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $250_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $250_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $200_1 = $250_1;
    $200$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $252_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $252_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $202$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $200$hi;
    i64toi32_i32$1 = $200_1;
    i64toi32_i32$2 = $202$hi;
    i64toi32_i32$5 = $252_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $254_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $254_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $19_1 = $254_1;
    $19$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$2 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$2;
   $213_1 = i64toi32_i32$1;
   $213$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $255_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $255_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $255_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $221_1 = i64toi32_i32$1;
   $221$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$3 = $213_1;
   i64toi32_i32$1 = $221$hi;
   i64toi32_i32$5 = $221_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $12_1 = i64toi32_i32$0;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $257_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $257_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $14_1 = $257_1;
   $14$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $228_1 = i64toi32_i32$2;
   $228$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $14_1;
   i64toi32_i32$2 = $228$hi;
   i64toi32_i32$5 = $228_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$5 = $14_1;
   i64toi32_i32$3 = 0;
   $233_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $233$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$0;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$5 = $17_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $14_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $242_1 = i64toi32_i32$5;
   $242$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$5 = $242$hi;
   i64toi32_i32$4 = $242_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $20_1 = i64toi32_i32$2;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$0 = $15_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $17_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $17$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $17$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $249_1 = i64toi32_i32$0;
   $249$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $249$hi;
   i64toi32_i32$4 = $249_1;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $15_1 = i64toi32_i32$5;
   $15$hi = i64toi32_i32$2;
   $251_1 = i64toi32_i32$5;
   $251$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$3 = $12_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $258_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $258_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $253_1 = $258_1;
   $253$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$4 = $21_1;
   $256_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $256_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $260_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $260_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $258$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $253$hi;
   i64toi32_i32$2 = $253_1;
   i64toi32_i32$4 = $258$hi;
   i64toi32_i32$3 = $260_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $259_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $259$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $251$hi;
   i64toi32_i32$1 = $251_1;
   i64toi32_i32$2 = $259$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $21_1 = i64toi32_i32$0;
   $21$hi = i64toi32_i32$5;
   $261_1 = i64toi32_i32$0;
   $261$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $23_1 = i64toi32_i32$1;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $18$hi;
   i64toi32_i32$4 = $18_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $270_1 = i64toi32_i32$4;
   $270$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $23$hi;
   i64toi32_i32$5 = $23_1;
   i64toi32_i32$4 = $270$hi;
   i64toi32_i32$3 = $270_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $275_1 = i64toi32_i32$5;
   $275$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $275$hi;
   i64toi32_i32$3 = $275_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $24_1 = i64toi32_i32$4;
   $24$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$0 = $19_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $283_1 = i64toi32_i32$2;
   $283$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $24$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $283$hi;
   i64toi32_i32$3 = $283_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $262_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $262_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $286$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $261$hi;
   i64toi32_i32$4 = $261_1;
   i64toi32_i32$0 = $286$hi;
   i64toi32_i32$3 = $262_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $25_1 = i64toi32_i32$2;
   $25$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $233$hi;
   i64toi32_i32$1 = $233_1;
   i64toi32_i32$4 = $25$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$15 : {
    label$16 : {
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $26_1 = i64toi32_i32$1;
     $26$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $302_1 = i64toi32_i32$1;
     $302$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $26$hi;
     i64toi32_i32$5 = $26_1;
     i64toi32_i32$1 = $302$hi;
     i64toi32_i32$3 = $302_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $26$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$3 = $26_1;
     $306_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $307_1 = $306_1;
     $307$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$5 = $311_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $315_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $307$hi;
     i64toi32_i32$5 = $307_1;
     i64toi32_i32$4 = $316$hi;
     i64toi32_i32$3 = $315_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $317_1 = i64toi32_i32$0;
     $317$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $318_1 = $3_1;
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = $20_1;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = $22_1;
     $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $322$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$5 = $20_1;
     $325_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $326$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $322$hi;
     i64toi32_i32$5 = $321_1;
     i64toi32_i32$2 = $326$hi;
     i64toi32_i32$1 = $325_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $327$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $318$hi;
     i64toi32_i32$3 = $318_1;
     i64toi32_i32$5 = $327$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $331_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $332$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $317$hi;
     i64toi32_i32$1 = $317_1;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $333$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $336_1 = i64toi32_i32$1;
     $336$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $333$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $336$hi;
     i64toi32_i32$3 = $336_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $337_1 = i64toi32_i32$4;
     $337$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $344_1 = i64toi32_i32$0;
     $344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $344$hi;
     i64toi32_i32$3 = $344_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $263_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $263_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $350_1 = $263_1;
     $350$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $264_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $264_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $352$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $350$hi;
     i64toi32_i32$4 = $350_1;
     i64toi32_i32$5 = $352$hi;
     i64toi32_i32$2 = $264_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $353_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $353$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $337$hi;
     i64toi32_i32$3 = $337_1;
     i64toi32_i32$4 = $353$hi;
     i64toi32_i32$2 = $353_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $354_1 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $355_1 = $2_1;
     $355$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $265_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $357$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $355$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $265_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $361_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $362$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $354$hi;
     i64toi32_i32$2 = $354_1;
     i64toi32_i32$0 = $362$hi;
     i64toi32_i32$1 = $361_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $363_1 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $364_1 = $1_1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$3 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $266_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $266_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $366_1 = $266_1;
     $366$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$1 = $23_1;
     $369_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $370$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$1 = $24_1;
     i64toi32_i32$3 = $18_1;
     $373_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $374$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $370$hi;
     i64toi32_i32$3 = $369_1;
     i64toi32_i32$4 = $374$hi;
     i64toi32_i32$2 = $373_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$2 = $24_1;
     $378_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $379$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $379$hi;
     i64toi32_i32$3 = $378_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $267_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $267_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $381$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $366$hi;
     i64toi32_i32$0 = $366_1;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $267_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $382_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $382$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$2 = $364_1;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$3 = $382_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $386_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $387$hi;
     i64toi32_i32$2 = $386_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $388_1 = i64toi32_i32$0;
     $388$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $389_1 = $3_1;
     $389$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15_1;
     $392_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $393$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$2 = $25_1;
     i64toi32_i32$3 = $21_1;
     $396_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $397$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $393$hi;
     i64toi32_i32$3 = $392_1;
     i64toi32_i32$1 = $397$hi;
     i64toi32_i32$5 = $396_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $398$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $389$hi;
     i64toi32_i32$2 = $389_1;
     i64toi32_i32$3 = $398$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $402_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $403$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $388$hi;
     i64toi32_i32$5 = $388_1;
     i64toi32_i32$4 = $403$hi;
     i64toi32_i32$2 = $402_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$16
     }
     $6_1 = $6_1 + 1 | 0;
     break label$15;
    }
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$1 = $13_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $268_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $268_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $269_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $269_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $413_1 = $269_1;
    $413$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $415$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $413$hi;
    i64toi32_i32$1 = $413_1;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $272_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $272_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $418_1 = $272_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $13_1 = $274_1;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $424_1 = $3_1;
    $424$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $276_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $276_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $426$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $424$hi;
    i64toi32_i32$1 = $424_1;
    i64toi32_i32$0 = $426$hi;
    i64toi32_i32$2 = $276_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$17 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$17
    }
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$5 = $16_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $16_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $16$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$3;
   }
   label$18 : {
    label$19 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$19
     }
     label$20 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break label$20
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      $950($5_1 + 48 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $950($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$5 = $4$hi;
      $958($5_1 + 16 | 0 | 0, $13_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$1 = $1$hi;
      $958($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
      $460_1 = i64toi32_i32$1;
      $460$hi = i64toi32_i32$5;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$0 = $460_1;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$2 = $462_1;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $463_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $463$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
      $465_1 = i64toi32_i32$5;
      $465$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $469_1 = i64toi32_i32$0;
      $469$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $465$hi;
      i64toi32_i32$1 = $465_1;
      i64toi32_i32$0 = $469$hi;
      i64toi32_i32$2 = $469_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      $471_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = 0;
      $472$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $463$hi;
      i64toi32_i32$2 = $463_1;
      i64toi32_i32$0 = $472$hi;
      i64toi32_i32$1 = $471_1;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
      $13_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $477_1 = i64toi32_i32$0;
      $477$hi = i64toi32_i32$2;
      i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $481_1 = i64toi32_i32$2;
      $481$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $477$hi;
      i64toi32_i32$5 = $477_1;
      i64toi32_i32$2 = $481$hi;
      i64toi32_i32$1 = $481_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
      $4$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $5_1 + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $5_1;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$2;
      break label$18;
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $277_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $277_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $490$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $492_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $492$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $490$hi;
    i64toi32_i32$5 = $277_1;
    i64toi32_i32$2 = $492$hi;
    i64toi32_i32$1 = $492_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $16$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $16_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$5;
   label$21 : {
    i64toi32_i32$5 = $13$hi;
    $498_1 = !($13_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $278_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $279_1 = 0
      } else {
       $279_1 = 1
      }
      $280_1 = $279_1;
     } else {
      $280_1 = 0
     }
     $278_1 = $280_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $498_1 : $278_1) {
     break label$21
    }
    i64toi32_i32$1 = $16$hi;
    $504_1 = $16_1;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $509_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $510$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $504$hi;
    i64toi32_i32$5 = $504_1;
    i64toi32_i32$3 = $510$hi;
    i64toi32_i32$0 = $509_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$4;
    break label$3;
   }
   label$22 : {
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $514_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $514$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$1 = $514$hi;
    i64toi32_i32$0 = $514_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$22
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$3;
   }
   i64toi32_i32$5 = $16$hi;
   $518_1 = $16_1;
   $518$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $521_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $521$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $521$hi;
   i64toi32_i32$4 = $521_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $525_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $526$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $518$hi;
   i64toi32_i32$4 = $518_1;
   i64toi32_i32$2 = $526$hi;
   i64toi32_i32$5 = $525_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $16$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$23 : {
   $11_1 = $5_1 + 96 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $960($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $961($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $20_1 = 0, $20$hi = 0, $23_1 = 0, $26_1 = 0;
  label$1 : {
   $5_1 = global$0 - 16 | 0;
   $6_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $6_1;
  }
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $20$hi;
  $949($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  label$3 : {
   $7_1 = $5_1 + 16 | 0;
   if ($7_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $7_1;
  }
 }
 
 function $962($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7$hi = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $44_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $51_1 = 0, $52_1 = 0, $5_1 = 0, $4_1 = 0, $18_1 = 0, $18$hi = 0, $20$hi = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $43_1 = 0, $45_1 = 0, $50_1 = 0, $50$hi = 0, $52$hi = 0, $80_1 = 0, $80$hi = 0, $84$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $89$hi = 0, $93_1 = 0, $93$hi = 0, $95_1 = 0, $96$hi = 0, $106$hi = 0, $117_1 = 0, $117$hi = 0;
  label$1 : {
   $2_1 = global$0 - 32 | 0;
   $4_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $20$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $23_1 = $44_1;
    $23$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $46_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $25$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $23_1;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$1 = $46_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $6$hi = i64toi32_i32$5;
    label$5 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$5
     }
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$0;
     $7$hi = i64toi32_i32$2;
     break label$3;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $39$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $39$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$4;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$4 = $0$hi;
    $43_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $45_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $43_1 : $45_1) {
     break label$6
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $47_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $50_1 = $47_1;
    $50$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $48_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $48_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $52$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $50$hi;
    i64toi32_i32$5 = $50_1;
    i64toi32_i32$2 = $52$hi;
    i64toi32_i32$4 = $48_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = 2146435072;
   $7_1 = 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = 0;
   $7_1 = 0;
   $7$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $49_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$3
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $6_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $6$hi;
   $950($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   $958($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $51_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $80_1 = $51_1;
   $80$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $52_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $52_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $84$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $80$hi;
   i64toi32_i32$4 = $80_1;
   i64toi32_i32$0 = $84$hi;
   i64toi32_i32$2 = $52_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$0;
   label$7 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $87_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $89_1 = i64toi32_i32$4;
    $89$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $93_1 = i64toi32_i32$5;
    $93$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $89$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = $93$hi;
    i64toi32_i32$2 = $93_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $95_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $96$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = $96$hi;
    i64toi32_i32$0 = $95_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $6_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$7
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$3;
    $7$hi = i64toi32_i32$1;
    break label$3;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $106$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $106$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  label$8 : {
   $5_1 = $2_1 + 32 | 0;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $5_1;
  }
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $117_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $117$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = $117$hi;
  i64toi32_i32$4 = $117_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $10_1 = 0, $13_1 = 0, $12_1 = 0, $88_1 = 0, $101_1 = 0, $112_1 = 0, $120_1 = 0, $128_1 = 0, $222_1 = 0, $233_1 = 0, $241_1 = 0, $249_1 = 0, $284_1 = 0, $362_1 = 0, $369_1 = 0, $462_1 = 0, $473_1 = 0, $481_1 = 0, $489_1 = 0, $1200 = 0, $1207 = 0, $1329 = 0, $1331 = 0, $1401 = 0, $1408 = 0, $1652 = 0, $1659 = 0;
  label$1 : {
   $1_1 = global$0 - 16 | 0;
   $12_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $12_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$14
              }
              label$15 : {
               $2_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$15
               }
               $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $5_1 = $3_1 << 3 | 0;
               $4_1 = HEAP32[($5_1 + 64700 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$16 : {
                label$17 : {
                 $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 64692 | 0;
                 if (($6_1 | 0) != ($5_1 | 0)) {
                  break label$17
                 }
                 HEAP32[(0 + 64652 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                 break label$16;
                }
                HEAP32[(0 + 64668 | 0) >> 2] | 0;
                HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
               }
               $6_1 = $3_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
               $4_1 = $4_1 + $6_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$3;
              }
              $7_1 = HEAP32[(0 + 64660 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$13
              }
              label$18 : {
               if (!$0_1) {
                break label$18
               }
               label$19 : {
                label$20 : {
                 $88_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $88_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $101_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $101_1 >>> $0_1 | 0;
                 $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $112_1 = $6_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $6_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $120_1 = $112_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $128_1 = $120_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $6_1 = ($128_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $5_1 = $6_1 << 3 | 0;
                 $4_1 = HEAP32[($5_1 + 64700 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 64692 | 0;
                 if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$20
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                 HEAP32[(0 + 64652 | 0) >> 2] = $2_1;
                 break label$19;
                }
                HEAP32[(0 + 64668 | 0) >> 2] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $5_1 = $4_1 + $3_1 | 0;
               $8_1 = $6_1 << 3 | 0;
               $6_1 = $8_1 - $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
               label$21 : {
                if (!$7_1) {
                 break label$21
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 64692 | 0;
                $4_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
                label$22 : {
                 label$23 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$23
                  }
                  HEAP32[(0 + 64652 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$22;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 64672 | 0) >> 2] = $5_1;
               HEAP32[(0 + 64660 | 0) >> 2] = $6_1;
               break label$3;
              }
              $9_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$13
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $222_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $222_1 >>> $0_1 | 0;
              $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $233_1 = $6_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $6_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $241_1 = $233_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $249_1 = $241_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $5_1 = HEAP32[(((($249_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 64956 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $6_1 = $5_1;
              label$24 : {
               label$25 : while (1) {
                label$26 : {
                 $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$26
                 }
                 $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$24
                 }
                }
                $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $284_1 = $6_1;
                $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $6_1 ? $284_1 : $4_1;
                $5_1 = $6_1 ? $0_1 : $5_1;
                $6_1 = $0_1;
                continue label$25;
               };
              }
              $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
              label$27 : {
               $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($5_1 | 0)) {
                break label$27
               }
               label$28 : {
                $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$28
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$4;
              }
              label$29 : {
               $6_1 = $5_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$29
               }
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$12
               }
               $6_1 = $5_1 + 16 | 0;
              }
              label$30 : while (1) {
               $11_1 = $6_1;
               $8_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               $6_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$30
               }
               break label$30;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$4;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$13
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$13
             }
             $11_1 = 0;
             label$31 : {
              $0_1 = $0_1 >>> 8 | 0;
              if (!$0_1) {
               break label$31
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$31
              }
              $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0_1 = $0_1 << $4_1 | 0;
              $362_1 = $0_1;
              $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6_1 = $362_1 << $0_1 | 0;
              $369_1 = $6_1;
              $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($369_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6_1 = 0 - $3_1 | 0;
             label$32 : {
              label$33 : {
               label$34 : {
                label$35 : {
                 $4_1 = HEAP32[(($11_1 << 2 | 0) + 64956 | 0) >> 2] | 0;
                 if ($4_1) {
                  break label$35
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$34;
                }
                $5_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $0_1 = 0;
                $8_1 = 0;
                label$36 : while (1) {
                 label$37 : {
                  $2_1 = ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $6_1 >>> 0) {
                   break label$37
                  }
                  $6_1 = $2_1;
                  $8_1 = $4_1;
                  if ($6_1) {
                   break label$37
                  }
                  $6_1 = 0;
                  $8_1 = $4_1;
                  $0_1 = $4_1;
                  break label$33;
                 }
                 $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                 $4_1 = HEAP32[(($4_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($4_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $5_1 = $5_1 << (($4_1 | 0) != (0 | 0)) | 0;
                 if ($4_1) {
                  continue label$36
                 }
                 break label$36;
                };
               }
               label$38 : {
                if ($0_1 | $8_1 | 0) {
                 break label$38
                }
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$13
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $462_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $4_1 = $462_1 >>> $0_1 | 0;
                $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                $473_1 = $5_1 | $0_1 | 0;
                $0_1 = $4_1 >>> $5_1 | 0;
                $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $481_1 = $473_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $489_1 = $481_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($489_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 64956 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$32
               }
              }
              label$39 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $2_1 >>> 0 < $6_1 >>> 0;
               label$40 : {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$40
                }
                $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $6_1 = $5_1 ? $2_1 : $6_1;
               $8_1 = $5_1 ? $0_1 : $8_1;
               $0_1 = $4_1;
               if ($0_1) {
                continue label$39
               }
               break label$39;
              };
             }
             if (!$8_1) {
              break label$13
             }
             if ($6_1 >>> 0 >= ((HEAP32[(0 + 64660 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$13
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$41 : {
              $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) == ($8_1 | 0)) {
               break label$41
              }
              label$42 : {
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                break label$42
               }
               HEAP32[($0_1 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              break label$5;
             }
             label$43 : {
              $4_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               break label$43
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$11
              }
              $4_1 = $8_1 + 16 | 0;
             }
             label$44 : while (1) {
              $2_1 = $4_1;
              $5_1 = $0_1;
              $4_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              $4_1 = $5_1 + 16 | 0;
              $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$44
              }
              break label$44;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$5;
            }
            label$45 : {
             $0_1 = HEAP32[(0 + 64660 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$45
             }
             $4_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
             label$46 : {
              label$47 : {
               $6_1 = $0_1 - $3_1 | 0;
               if ($6_1 >>> 0 < 16 >>> 0) {
                break label$47
               }
               HEAP32[(0 + 64660 | 0) >> 2] = $6_1;
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 64672 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$46;
              }
              HEAP32[(0 + 64672 | 0) >> 2] = 0;
              HEAP32[(0 + 64660 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$3;
            }
            label$48 : {
             $5_1 = HEAP32[(0 + 64664 | 0) >> 2] | 0;
             if ($5_1 >>> 0 <= $3_1 >>> 0) {
              break label$48
             }
             $4_1 = $5_1 - $3_1 | 0;
             HEAP32[(0 + 64664 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
             $6_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
             HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$3;
            }
            label$49 : {
             label$50 : {
              if (!(HEAP32[(0 + 65124 | 0) >> 2] | 0)) {
               break label$50
              }
              $4_1 = HEAP32[(0 + 65132 | 0) >> 2] | 0;
              break label$49;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 65136 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 65140 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 65128 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 65132 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 65124 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 65144 | 0) >> 2] = 0;
             HEAP32[(0 + 65096 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$3
            }
            $0_1 = 0;
            label$51 : {
             $4_1 = HEAP32[(0 + 65092 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$51
             }
             $6_1 = HEAP32[(0 + 65084 | 0) >> 2] | 0;
             $9_1 = $6_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $6_1 >>> 0) {
              break label$3
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$3
             }
            }
            if ((HEAPU8[(0 + 65096 | 0) >> 0] | 0) & 4 | 0) {
             break label$8
            }
            label$52 : {
             label$53 : {
              label$54 : {
               $4_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$54
               }
               $0_1 = 65100;
               label$55 : while (1) {
                label$56 : {
                 $6_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($6_1 >>> 0 > $4_1 >>> 0) {
                  break label$56
                 }
                 if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$53
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$55
                }
                break label$55;
               };
              }
              $5_1 = $965(0 | 0) | 0;
              if (($5_1 | 0) == (-1 | 0)) {
               break label$9
              }
              $2_1 = $8_1;
              label$57 : {
               $0_1 = HEAP32[(0 + 65128 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $5_1 | 0)) {
                break label$57
               }
               $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$9
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$9
              }
              label$58 : {
               $0_1 = HEAP32[(0 + 65092 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$58
               }
               $4_1 = HEAP32[(0 + 65084 | 0) >> 2] | 0;
               $6_1 = $4_1 + $2_1 | 0;
               if ($6_1 >>> 0 <= $4_1 >>> 0) {
                break label$9
               }
               if ($6_1 >>> 0 > $0_1 >>> 0) {
                break label$9
               }
              }
              $0_1 = $965($2_1 | 0) | 0;
              if (($0_1 | 0) != ($5_1 | 0)) {
               break label$52
              }
              break label$7;
             }
             $2_1 = ($2_1 - $5_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$9
             }
             $5_1 = $965($2_1 | 0) | 0;
             if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$10
             }
             $0_1 = $5_1;
            }
            label$59 : {
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$59
             }
             if (($0_1 | 0) == (-1 | 0)) {
              break label$59
             }
             label$60 : {
              $4_1 = HEAP32[(0 + 65132 | 0) >> 2] | 0;
              $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$60
              }
              $5_1 = $0_1;
              break label$7;
             }
             label$61 : {
              if (($965($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$61
              }
              $2_1 = $4_1 + $2_1 | 0;
              $5_1 = $0_1;
              break label$7;
             }
             $965(0 - $2_1 | 0 | 0) | 0;
             break label$9;
            }
            $5_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$7
            }
            break label$9;
           }
           $8_1 = 0;
           break label$4;
          }
          $5_1 = 0;
          break label$5;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$7
         }
        }
        HEAP32[(0 + 65096 | 0) >> 2] = HEAP32[(0 + 65096 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$6
       }
       $5_1 = $965($8_1 | 0) | 0;
       $0_1 = $965(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$6
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$6
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$6
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$6
       }
      }
      $0_1 = (HEAP32[(0 + 65084 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 65084 | 0) >> 2] = $0_1;
      label$62 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 65088 | 0) >> 2] | 0) >>> 0) {
        break label$62
       }
       HEAP32[(0 + 65088 | 0) >> 2] = $0_1;
      }
      label$63 : {
       label$64 : {
        label$65 : {
         label$66 : {
          $4_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$66
          }
          $0_1 = 65100;
          label$67 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$65
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$67
           }
           break label$64;
          };
         }
         label$68 : {
          label$69 : {
           $0_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$69
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$68
           }
          }
          HEAP32[(0 + 64668 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 65104 | 0) >> 2] = $2_1;
         HEAP32[(0 + 65100 | 0) >> 2] = $5_1;
         HEAP32[(0 + 64684 | 0) >> 2] = -1;
         HEAP32[(0 + 64688 | 0) >> 2] = HEAP32[(0 + 65124 | 0) >> 2] | 0;
         HEAP32[(0 + 65112 | 0) >> 2] = 0;
         label$70 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 64692 | 0;
          HEAP32[($4_1 + 64700 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 64704 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$70
          }
          break label$70;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 64664 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 64676 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
         break label$63;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$64
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$64
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$64
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
        break label$63;
       }
       label$71 : {
        $8_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$71
        }
        HEAP32[(0 + 64668 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 65100;
       label$72 : {
        label$73 : {
         label$74 : {
          label$75 : {
           label$76 : {
            label$77 : {
             label$78 : {
              label$79 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$78
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$79
               }
               break label$77;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$76
             }
            }
            $0_1 = 65100;
            label$80 : while (1) {
             label$81 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$81
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$75
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$80;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $11_1 | 0) - $3_1 | 0;
           $6_1 = $11_1 + $3_1 | 0;
           label$82 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$73;
           }
           label$83 : {
            if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$83
            }
            HEAP32[(0 + 64672 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 64660 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$73;
           }
           label$84 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$84
            }
            $7_1 = $4_1 & -8 | 0;
            label$85 : {
             label$86 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$86
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$87 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 64692 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$87
               }
              }
              label$88 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$88
               }
               HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$85;
              }
              label$89 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$89
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$85;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$90 : {
              label$91 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$91
               }
               label$92 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$92
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$90;
              }
              label$93 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$93
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$93
               }
               $2_1 = 0;
               break label$90;
              }
              label$94 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$94
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$94
               }
               break label$94;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$85
             }
             label$95 : {
              label$96 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 64956 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$96
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$95
               }
               HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$85;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$85
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$97 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$97
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$85
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$98 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$98
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 64692 | 0;
            label$99 : {
             label$100 : {
              $3_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$100
              }
              HEAP32[(0 + 64652 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$99;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$73;
           }
           $4_1 = 0;
           label$101 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$101
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$101
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1200 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1200 << $3_1 | 0;
            $1207 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1207 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 64956 | 0;
           label$102 : {
            label$103 : {
             $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$103
             }
             HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$102;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$104 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$74
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$104
             }
             break label$104;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$73;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 64664 | 0) >> 2] = $11_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 64676 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 64680 | 0) >> 2] = HEAP32[(0 + 65140 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 65108 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 65112 | 0) >> 2] | 0;
          $1329 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1329;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 65100 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 65104 | 0) >> 2] | 0;
          $1331 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1331;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 65108 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 65104 | 0) >> 2] = $2_1;
          HEAP32[(0 + 65100 | 0) >> 2] = $5_1;
          HEAP32[(0 + 65112 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$105 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$105
           }
           break label$105;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$63
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$106 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$106
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 64692 | 0;
           label$107 : {
            label$108 : {
             $5_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$108
             }
             HEAP32[(0 + 64652 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$107;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$63;
          }
          $0_1 = 0;
          label$109 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$109
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$109
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1401 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1401 << $6_1 | 0;
           $1408 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1408 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 64956 | 0;
          label$110 : {
           label$111 : {
            $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$111
            }
            HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$110;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$112 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$72
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$112
            }
            break label$112;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$63;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$3;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 64664 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$6
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 64664 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 64676 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 64676 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$3;
     }
     HEAP32[($868() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$3;
    }
    label$113 : {
     if (!$11_1) {
      break label$113
     }
     label$114 : {
      label$115 : {
       $4_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($4_1 << 2 | 0) + 64956 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$115
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$114
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       HEAP32[(0 + 64656 | 0) >> 2] = $7_1;
       break label$113;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$113
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
     label$116 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$116
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$113
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$117 : {
     label$118 : {
      if ($6_1 >>> 0 > 15 >>> 0) {
       break label$118
      }
      $0_1 = $6_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$117;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $5_1 = $8_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
     HEAP32[($5_1 + $6_1 | 0) >> 2] = $6_1;
     label$119 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$119
      }
      $4_1 = $6_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 64692 | 0;
      label$120 : {
       label$121 : {
        $6_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$121
        }
        HEAP32[(0 + 64652 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$120;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break label$117;
     }
     label$122 : {
      label$123 : {
       $4_1 = $6_1 >>> 8 | 0;
       if ($4_1) {
        break label$123
       }
       $0_1 = 0;
       break label$122;
      }
      $0_1 = 31;
      if ($6_1 >>> 0 > 16777215 >>> 0) {
       break label$122
      }
      $0_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4_1 = $4_1 << $0_1 | 0;
      $1652 = $4_1;
      $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1652 << $4_1 | 0;
      $1659 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1659 << $3_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = ($0_1 << 2 | 0) + 64956 | 0;
     label$124 : {
      label$125 : {
       label$126 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$126
        }
        HEAP32[(0 + 64656 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$4_1 >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
        break label$125;
       }
       $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$4_1 >> 2] | 0;
       label$127 : while (1) {
        $4_1 = $3_1;
        if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
         break label$124
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($4_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$127
        }
        break label$127;
       };
       HEAP32[$2_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$117;
     }
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$3;
   }
   label$128 : {
    if (!$10_1) {
     break label$128
    }
    label$129 : {
     label$130 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 64956 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$130
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$129
      }
      HEAP32[(0 + 64656 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$128;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$128
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$131 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$131
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$128
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$132 : {
    label$133 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$133
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$132;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $6_1 = $5_1 + $3_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
    label$134 : {
     if (!$7_1) {
      break label$134
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 64692 | 0;
     $0_1 = HEAP32[(0 + 64672 | 0) >> 2] | 0;
     label$135 : {
      label$136 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$136
       }
       HEAP32[(0 + 64652 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$135;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 64672 | 0) >> 2] = $6_1;
    HEAP32[(0 + 64660 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  label$137 : {
   $13_1 = $1_1 + 16 | 0;
   if ($13_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $13_1;
  }
  return $0_1 | 0;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 64668 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 64692 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 64956 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 64676 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 64676 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 64664 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 64664 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 64660 | 0) >> 2] = 0;
      HEAP32[(0 + 64672 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 64672 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 64660 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 64692 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 64668 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 64652 | 0) >> 2] = (HEAP32[(0 + 64652 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 64668 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 64668 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 64956 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 64656 | 0) >> 2] = (HEAP32[(0 + 64656 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 64672 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 64660 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 64692 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 64652 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 64652 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 64956 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 64656 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 64656 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 64684 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 64684 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 65108;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 64684 | 0) >> 2] = -1;
  }
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = $0() | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $2_1 + $3_1 | 0;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $2_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$9($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$1_1 >> 2] = $0_1;
   return $2_1 | 0;
  }
  HEAP32[($868() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $970($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $12$hi = 0, $12_1 = 0, $13$hi = 0, $8_1 = 0, $13_1 = 0, i64toi32_i32$6 = 0, $15$hi = 0, $6_1 = 0, $15_1 = 0, $9_1 = 0, $14$hi = 0, $64_1 = 0, $7_1 = 0, $66_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $14_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $11_1 = 0, $10_1 = 0, $60_1 = 0, $60$hi = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $67_1 = 0, $67$hi = 0, $68_1 = 0, $68$hi = 0, $75$hi = 0, $77_1 = 0, $77$hi = 0, $136$hi = 0, $139_1 = 0, $140$hi = 0, $180_1 = 0, $180$hi = 0, $185_1 = 0, $186$hi = 0, $224_1 = 0, $224$hi = 0, $226$hi = 0, $235_1 = 0, $236_1 = 0, $236$hi = 0, $238_1 = 0, $238$hi = 0, $244$hi = 0, $245_1 = 0, $245$hi = 0, $252_1 = 0, $252$hi = 0, $257$hi = 0;
  label$1 : {
   $5_1 = global$0 - 128 | 0;
   $10_1 = $5_1;
   if ($5_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $10_1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($951($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $972($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$5
     }
     if ($6_1) {
      break label$4
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $959($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $953($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$3;
   }
   label$6 : {
    i64toi32_i32$3 = $1$hi;
    $60_1 = $1_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $66_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $66_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $63$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $65_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $65$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $63$hi;
    i64toi32_i32$1 = $66_1;
    i64toi32_i32$3 = $65$hi;
    i64toi32_i32$0 = $65_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $12$hi = i64toi32_i32$3;
    $67_1 = $12_1;
    $67$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $68_1 = $3_1;
    $68$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $69_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $69_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $69_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $75$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $77_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $77$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $75$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = $77$hi;
    i64toi32_i32$0 = $77_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $13_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $13$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$2 = $67$hi;
    i64toi32_i32$3 = $68$hi;
    i64toi32_i32$0 = $13$hi;
    if (($951($60_1 | 0, i64toi32_i32$1 | 0, $67_1 | 0, i64toi32_i32$2 | 0, $68_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$6
    }
    label$7 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $13$hi;
     if (!($951($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$7
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$3;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $959($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   label$8 : {
    label$9 : {
     if (!$8_1) {
      break label$9
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$8;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $959($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $12_1 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $71_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $71_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $71_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$10 : {
    if ($9_1) {
     break label$10
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $959($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $72_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $72_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $72_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $12_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $14_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $136$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $139_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $140$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $136$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $140$hi;
   i64toi32_i32$1 = $139_1;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   $15_1 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = -1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
    $73_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
      $74_1 = 0
     } else {
      $74_1 = 1
     }
     $75_1 = $74_1;
    } else {
     $75_1 = 0
    }
    $73_1 = $75_1;
   }
   $6_1 = $73_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   label$11 : {
    if (($8_1 | 0) <= ($9_1 | 0)) {
     break label$11
    }
    label$12 : while (1) {
     label$13 : {
      label$14 : {
       if (!($6_1 & 1 | 0)) {
        break label$14
       }
       label$15 : {
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$2 = $13$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $15_1;
        i64toi32_i32$1 = $13$hi;
        i64toi32_i32$3 = $13_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$15
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $959($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$3;
       }
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$1 = $13_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $76_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $76_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $12_1 = $76_1;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$0 = $15_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $78_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $78_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $15_1 = $78_1;
       $15$hi = i64toi32_i32$1;
       break label$13;
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $79_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       $79_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $15_1 = $79_1;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $80_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $80_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $12_1 = $80_1;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      $13_1 = $4_1;
      $13$hi = i64toi32_i32$3;
     }
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     $180_1 = i64toi32_i32$4;
     $180$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $81_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $81_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $4_1 = $81_1;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $185_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $186$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $180$hi;
     i64toi32_i32$2 = $180_1;
     i64toi32_i32$3 = $186$hi;
     i64toi32_i32$1 = $185_1;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $82_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $83_1 = 0
       } else {
        $83_1 = 1
       }
       $84_1 = $83_1;
      } else {
       $84_1 = 0
      }
      $82_1 = $84_1;
     }
     $6_1 = $82_1;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$0;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($9_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
    $8_1 = $9_1;
   }
   label$16 : {
    if (!$6_1) {
     break label$16
    }
    i64toi32_i32$0 = $15$hi;
    $12_1 = $15_1;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    $4_1 = $13_1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$16
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $959($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $5_1 + 56 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$5;
    break label$3;
   }
   label$17 : {
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$17
    }
    label$18 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $85_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $85_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $85_1;
     $3$hi = i64toi32_i32$5;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $86_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $86_1;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $224_1 = $3_1;
     $224$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $87_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $87_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $226$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$0 = $224_1;
     i64toi32_i32$5 = $226$hi;
     i64toi32_i32$2 = $87_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$18
     }
     break label$18;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$19 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$19
    }
    $235_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $236_1 = $4_1;
    $236$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $238_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $238$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $88_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $88_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $244$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $238$hi;
    i64toi32_i32$5 = $238_1;
    i64toi32_i32$1 = $244$hi;
    i64toi32_i32$0 = $88_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $245_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $245$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $236$hi;
    i64toi32_i32$5 = $245$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1065811968;
    $959($235_1 | 0, $236_1 | 0, i64toi32_i32$1 | 0, $245_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $5_1 + 72 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    break label$3;
   }
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $252_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $252$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $8_1 | $6_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $89_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $89_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $257$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $252$hi;
   i64toi32_i32$2 = $252_1;
   i64toi32_i32$0 = $257$hi;
   i64toi32_i32$1 = $89_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$20 : {
   $11_1 = $5_1 + 128 | 0;
   if ($11_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $11_1;
  }
 }
 
 function $971($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $972($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $973($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$10($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $974($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $975($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $976($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($975($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $4_1 = $1_1;
    label$5 : while (1) {
     $3_1 = $4_1;
     if (!$3_1) {
      break label$4
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3_1 | 0;
    $0_1 = $0_1 + $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $6_1 = $3_1;
   }
   $973($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $977($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = global$0 - 16 | 0;
   $3_1 = $2_1;
   if ($2_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $917(HEAP32[(0 + 61160 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  label$3 : {
   $4_1 = $2_1 + 16 | 0;
   if ($4_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $4_1;
  }
  return $1_1 | 0;
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $979($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $981() {
  return global$0 | 0;
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  if ($1_1 >>> 0 < global$2 >>> 0) {
   fimport$11()
  }
  global$0 = $1_1;
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
   $3_1 = $1_1;
   if ($1_1 >>> 0 < global$2 >>> 0) {
    fimport$11()
   }
   global$0 = $3_1;
  }
  return $1_1 | 0;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  global$2 = $0_1;
 }
 
 function $985($0_1) {
  $0_1 = $0_1 | 0;
  return abort() | 0;
 }
 
 function $986($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1);
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $990($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1) | 0 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $992($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1);
 }
 
 function $993($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1) | 0 | 0;
 }
 
 function $995($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1) | 0 | 0;
 }
 
 function $996($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $4$hi) | 0 | 0;
 }
 
 function $997($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $3$hi;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $4$hi, $5_1) | 0 | 0;
 }
 
 function $998($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $2$hi;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, i64toi32_i32$0);
 }
 
 function $999($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1000($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0_1]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1) | 0 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $16_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = 0;
  $9_1 = $3_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $16_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $16_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $987($5_1 | 0, $6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1004($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  $8_1 = $2_1;
  $9_1 = $3_1;
  i64toi32_i32$0 = 0;
  $11_1 = $4_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $988($6_1 | 0, $7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $993($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$12($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1006($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $25_1 = 0, $26_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0, $15_1 = 0, $15$hi = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $25_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $15_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $17_1 = $5_1;
  $17$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$2 = $17_1;
  i64toi32_i32$1 = $20$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $21_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$2 = $21$hi;
  return $996($7_1 | 0, $8_1 | 0, $9_1 | 0, $15_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1007($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $26_1 = 0, $27_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $12$hi = 0, $15$hi = 0, $16_1 = 0, $16$hi = 0, $18_1 = 0, $18$hi = 0, $21$hi = 0, $22_1 = 0, $22$hi = 0;
  $8_1 = $0_1;
  $9_1 = $1_1;
  $10_1 = $2_1;
  i64toi32_i32$0 = 0;
  $12_1 = $3_1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = $15$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $16_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $18_1 = $5_1;
  $18$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $27_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $18$hi;
  i64toi32_i32$2 = $18_1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $22_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $22$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$2 = $22$hi;
  return $997($8_1 | 0, $9_1 | 0, $10_1 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0) | 0 | 0;
 }
 
 function $1008($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $10$hi = 0;
  $4_1 = $0_1;
  $5_1 = $1_1;
  i64toi32_i32$0 = 0;
  $7_1 = $2_1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $14_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$3 = $14_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $998($4_1 | 0, $5_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0);
 }
 
 function $1009($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$13($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_load_i64() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $1_1 = 0, $1$hi = 0, $4$hi = 0;
  i64toi32_i32$0 = 0;
  $1_1 = legalimport$wasm2js_scratch_load_i64() | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = getTempRet0() | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $8_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = legalfunc$wasm2js_scratch_load_i64() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = $14;
 FUNCTION_TABLE[2] = $15;
 FUNCTION_TABLE[3] = $16;
 FUNCTION_TABLE[4] = $28;
 FUNCTION_TABLE[5] = $29;
 FUNCTION_TABLE[6] = $30;
 FUNCTION_TABLE[7] = $31;
 FUNCTION_TABLE[8] = $32;
 FUNCTION_TABLE[9] = $37;
 FUNCTION_TABLE[10] = $26;
 FUNCTION_TABLE[11] = $27;
 FUNCTION_TABLE[12] = $33;
 FUNCTION_TABLE[13] = $34;
 FUNCTION_TABLE[14] = $36;
 FUNCTION_TABLE[15] = $64;
 FUNCTION_TABLE[16] = $56;
 FUNCTION_TABLE[17] = $66;
 FUNCTION_TABLE[18] = $80;
 FUNCTION_TABLE[19] = $81;
 FUNCTION_TABLE[20] = $82;
 FUNCTION_TABLE[21] = $77;
 FUNCTION_TABLE[22] = $84;
 FUNCTION_TABLE[23] = $85;
 FUNCTION_TABLE[24] = $86;
 FUNCTION_TABLE[25] = $87;
 FUNCTION_TABLE[26] = $241;
 FUNCTION_TABLE[27] = $88;
 FUNCTION_TABLE[28] = $89;
 FUNCTION_TABLE[29] = $90;
 FUNCTION_TABLE[30] = $92;
 FUNCTION_TABLE[31] = $97;
 FUNCTION_TABLE[32] = $98;
 FUNCTION_TABLE[33] = $99;
 FUNCTION_TABLE[34] = $101;
 FUNCTION_TABLE[35] = $102;
 FUNCTION_TABLE[36] = $105;
 FUNCTION_TABLE[37] = $106;
 FUNCTION_TABLE[38] = $103;
 FUNCTION_TABLE[39] = $104;
 FUNCTION_TABLE[40] = $107;
 FUNCTION_TABLE[41] = $108;
 FUNCTION_TABLE[42] = $217;
 FUNCTION_TABLE[43] = $110;
 FUNCTION_TABLE[44] = $111;
 FUNCTION_TABLE[45] = $112;
 FUNCTION_TABLE[46] = $113;
 FUNCTION_TABLE[47] = $116;
 FUNCTION_TABLE[48] = $117;
 FUNCTION_TABLE[49] = $118;
 FUNCTION_TABLE[50] = $119;
 FUNCTION_TABLE[51] = $122;
 FUNCTION_TABLE[52] = $124;
 FUNCTION_TABLE[53] = $125;
 FUNCTION_TABLE[54] = $123;
 FUNCTION_TABLE[55] = $129;
 FUNCTION_TABLE[56] = $131;
 FUNCTION_TABLE[57] = $133;
 FUNCTION_TABLE[58] = $134;
 FUNCTION_TABLE[59] = $132;
 FUNCTION_TABLE[60] = $137;
 FUNCTION_TABLE[61] = $138;
 FUNCTION_TABLE[62] = $139;
 FUNCTION_TABLE[63] = $140;
 FUNCTION_TABLE[64] = $143;
 FUNCTION_TABLE[65] = $144;
 FUNCTION_TABLE[66] = $145;
 FUNCTION_TABLE[67] = $147;
 FUNCTION_TABLE[68] = $146;
 FUNCTION_TABLE[69] = $154;
 FUNCTION_TABLE[70] = $155;
 FUNCTION_TABLE[71] = $164;
 FUNCTION_TABLE[72] = $161;
 FUNCTION_TABLE[73] = $162;
 FUNCTION_TABLE[74] = $165;
 FUNCTION_TABLE[75] = $166;
 FUNCTION_TABLE[76] = $175;
 FUNCTION_TABLE[77] = $177;
 FUNCTION_TABLE[78] = $178;
 FUNCTION_TABLE[79] = $176;
 FUNCTION_TABLE[80] = $184;
 FUNCTION_TABLE[81] = $192;
 FUNCTION_TABLE[82] = $193;
 FUNCTION_TABLE[83] = $194;
 FUNCTION_TABLE[84] = $195;
 FUNCTION_TABLE[85] = $285;
 FUNCTION_TABLE[86] = $286;
 FUNCTION_TABLE[87] = $287;
 FUNCTION_TABLE[88] = $288;
 FUNCTION_TABLE[89] = $289;
 FUNCTION_TABLE[90] = $290;
 FUNCTION_TABLE[91] = $304;
 FUNCTION_TABLE[92] = $305;
 FUNCTION_TABLE[93] = $313;
 FUNCTION_TABLE[94] = $314;
 FUNCTION_TABLE[95] = $315;
 FUNCTION_TABLE[96] = $316;
 FUNCTION_TABLE[97] = $321;
 FUNCTION_TABLE[98] = $325;
 FUNCTION_TABLE[99] = $326;
 FUNCTION_TABLE[100] = $327;
 FUNCTION_TABLE[101] = $369;
 FUNCTION_TABLE[102] = $375;
 FUNCTION_TABLE[103] = $370;
 FUNCTION_TABLE[104] = $371;
 FUNCTION_TABLE[105] = $372;
 FUNCTION_TABLE[106] = $373;
 FUNCTION_TABLE[107] = $374;
 FUNCTION_TABLE[108] = $376;
 FUNCTION_TABLE[109] = $379;
 FUNCTION_TABLE[110] = $380;
 FUNCTION_TABLE[111] = $381;
 FUNCTION_TABLE[112] = $403;
 FUNCTION_TABLE[113] = $404;
 FUNCTION_TABLE[114] = $414;
 FUNCTION_TABLE[115] = $415;
 FUNCTION_TABLE[116] = $416;
 FUNCTION_TABLE[117] = $417;
 FUNCTION_TABLE[118] = $418;
 FUNCTION_TABLE[119] = $419;
 FUNCTION_TABLE[120] = $420;
 FUNCTION_TABLE[121] = $412;
 FUNCTION_TABLE[122] = $413;
 FUNCTION_TABLE[123] = $421;
 FUNCTION_TABLE[124] = $422;
 FUNCTION_TABLE[125] = $423;
 FUNCTION_TABLE[126] = $460;
 FUNCTION_TABLE[127] = $483;
 FUNCTION_TABLE[128] = $488;
 FUNCTION_TABLE[129] = $481;
 FUNCTION_TABLE[130] = $482;
 FUNCTION_TABLE[131] = $484;
 FUNCTION_TABLE[132] = $485;
 FUNCTION_TABLE[133] = $489;
 FUNCTION_TABLE[134] = $490;
 FUNCTION_TABLE[135] = $491;
 FUNCTION_TABLE[136] = $493;
 FUNCTION_TABLE[137] = $498;
 FUNCTION_TABLE[138] = $512;
 FUNCTION_TABLE[139] = $518;
 FUNCTION_TABLE[140] = $509;
 FUNCTION_TABLE[141] = $511;
 FUNCTION_TABLE[142] = $513;
 FUNCTION_TABLE[143] = $514;
 FUNCTION_TABLE[144] = $520;
 FUNCTION_TABLE[145] = $521;
 FUNCTION_TABLE[146] = $522;
 FUNCTION_TABLE[147] = $526;
 FUNCTION_TABLE[148] = $529;
 FUNCTION_TABLE[149] = $532;
 FUNCTION_TABLE[150] = $558;
 FUNCTION_TABLE[151] = $557;
 FUNCTION_TABLE[152] = $559;
 FUNCTION_TABLE[153] = $560;
 FUNCTION_TABLE[154] = $547;
 FUNCTION_TABLE[155] = $550;
 FUNCTION_TABLE[156] = $552;
 FUNCTION_TABLE[157] = $553;
 FUNCTION_TABLE[158] = $549;
 FUNCTION_TABLE[159] = $555;
 FUNCTION_TABLE[160] = $561;
 FUNCTION_TABLE[161] = $562;
 FUNCTION_TABLE[162] = $563;
 FUNCTION_TABLE[163] = $569;
 FUNCTION_TABLE[164] = $573;
 FUNCTION_TABLE[165] = $571;
 FUNCTION_TABLE[166] = $576;
 FUNCTION_TABLE[167] = $564;
 FUNCTION_TABLE[168] = $566;
 FUNCTION_TABLE[169] = $567;
 FUNCTION_TABLE[170] = $568;
 FUNCTION_TABLE[171] = $591;
 FUNCTION_TABLE[172] = $592;
 FUNCTION_TABLE[173] = $593;
 FUNCTION_TABLE[174] = $594;
 FUNCTION_TABLE[175] = $597;
 FUNCTION_TABLE[176] = $599;
 FUNCTION_TABLE[177] = $600;
 FUNCTION_TABLE[178] = $598;
 FUNCTION_TABLE[179] = $603;
 FUNCTION_TABLE[180] = $604;
 FUNCTION_TABLE[181] = $605;
 FUNCTION_TABLE[182] = $606;
 FUNCTION_TABLE[183] = $607;
 FUNCTION_TABLE[184] = $625;
 FUNCTION_TABLE[185] = $626;
 FUNCTION_TABLE[186] = $627;
 FUNCTION_TABLE[187] = $628;
 FUNCTION_TABLE[188] = $648;
 FUNCTION_TABLE[189] = $649;
 FUNCTION_TABLE[190] = $650;
 FUNCTION_TABLE[191] = $651;
 FUNCTION_TABLE[192] = $657;
 FUNCTION_TABLE[193] = $658;
 FUNCTION_TABLE[194] = $659;
 FUNCTION_TABLE[195] = $660;
 FUNCTION_TABLE[196] = $674;
 FUNCTION_TABLE[197] = $675;
 FUNCTION_TABLE[198] = $676;
 FUNCTION_TABLE[199] = $672;
 FUNCTION_TABLE[200] = $673;
 FUNCTION_TABLE[201] = $677;
 FUNCTION_TABLE[202] = $678;
 FUNCTION_TABLE[203] = $701;
 FUNCTION_TABLE[204] = $699;
 FUNCTION_TABLE[205] = $700;
 FUNCTION_TABLE[206] = $702;
 FUNCTION_TABLE[207] = $703;
 FUNCTION_TABLE[208] = $722;
 FUNCTION_TABLE[209] = $723;
 FUNCTION_TABLE[210] = $729;
 FUNCTION_TABLE[211] = $730;
 FUNCTION_TABLE[212] = $810;
 FUNCTION_TABLE[213] = $811;
 FUNCTION_TABLE[214] = $897;
 FUNCTION_TABLE[215] = $926;
 FUNCTION_TABLE[216] = $891;
 FUNCTION_TABLE[217] = $919;
 FUNCTION_TABLE[218] = $895;
 FUNCTION_TABLE[219] = $914;
 FUNCTION_TABLE[220] = $915;
 FUNCTION_TABLE[221] = $921;
 FUNCTION_TABLE[222] = $922;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "malloc": $963, 
  "free": $964, 
  "mountDataFilepath": $637, 
  "unmountDataFilepath": $638, 
  "CanPlayFileJS": $639, 
  "ProbeFileEx": $644, 
  "CanPlayToString": $667, 
  "GetDecoderName": $670, 
  "GetDecoderTimesliceMaxCount": $671, 
  "__errno_location": $868, 
  "fflush": $884, 
  "stackSave": $981, 
  "stackRestore": $982, 
  "stackAlloc": $983, 
  "__set_stack_limit": $984, 
  "__growWasmMemory": $985, 
  "dynCall_vi": $986, 
  "dynCall_iiij": $1003, 
  "dynCall_iiiij": $1004, 
  "dynCall_iiii": $989, 
  "dynCall_ii": $990, 
  "dynCall_iiiii": $991, 
  "dynCall_vii": $992, 
  "dynCall_jiji": $1005, 
  "dynCall_iii": $994, 
  "dynCall_iiiiii": $995, 
  "dynCall_iiijj": $1006, 
  "dynCall_iiijji": $1007, 
  "dynCall_vij": $1008, 
  "dynCall_viiiii": $999, 
  "dynCall_iiiiiiii": $1000, 
  "dynCall_iiiiiii": $1001, 
  "dynCall_iidiiii": $1002
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 61528, "AAAAAAAAAAB/BgAAAAAAAAAAAAAAAAAAZAgAAAAAAAAAAAAAAAAAABwPAAAAAAAAAAAAAAAAAABmFAAAAAAAAAAAAAAAAAAAjxYAAAAAAAAAAAAAAAAAADQXAAAAAAAAAAAAAAAAAADAGAAAAAAAAAAAAAAAAAAA4hsAAAAAAAAAAAAAAAAAAB0fAAAAAAAAAAAAAAAAAACRHwAAAAAAAAAAAAAAAAAAYSAAAAAAAAAAAAAAAAAAANAgAAAAAAAAAAAAAAAAAADcIQAAAAAAAAAAAAAAAAAAeiMAAAAAAAAAAAAAAAAAAE8lAAAAAAAAAAAAAAAAAACgJwAAAAAAAAAAAAAAAAAAUSkAAAAAAAAAAAAAAAAAAKwqAAAAAAAAAAAAAAAAAADfLQAAAAAAAAAAAAAAAAAAyy4AAAAAAAAAAAAAAAAAAJsxAAAAAAAAAAAAAAAAAADRNgAAAAAAAAAAAAAAAAAAuDkAAAAAAAAAAAAAAAAAAIY6AAAAAAAAAAAAAAAAAACUQAAAAAAAAAAAAAAAAAAA1kYAAAAAAAAAAAAAAAAAALhHAAAAAAAAAAAAAAAAAADtTQAAAAAAAAAAAAAAAAAAJlQAAAAAAAAAAAAAAAAAABZYAAAAAAAAAAAAAAAAAAALWgAAAAAAAAAAAAAAAAAAIFsAAAAAAAAAAAAAAAAAAMdsAAAAAAAAAAAAAAAAAACyeQAAAAAAAAAAAAAAAAAA9YYAAAAAAAAAAAAAAAAAAByJAAAAAAAAAAAAAAAAAACqmgAAAAAAAAAAAAAAAAAAYaAAAAAAAAAAAAAAAAAAAKSiAAAAAAAAAAAAAAAAAABBpQAAAAAAAAAAAAAAAAAAuakAAAAAAAAAAAAAAAAAAFirAAAAAAAAAAAAAAAAAADOrgAAAAAAAAAAAAAAAAAAOLMAAAAAAAAAAAAAAAAAAAy0AAAAAAAAAAAAAAAAAAD0ugAAAAAAAAAAAAAAAAAAbL0AAAAAAAAAAAAAAAAAAN6+AAAAAAAAAAAAAAAAAADAwAAAAAAAAAAAAAAAAAAA1sEAAAAAAAAAAAAAAAAAAGPDAAAAAAAAAAAAAAAAAABPxwAAAAAAAAAAAAAAAAAAINIAAAAAAAAAAAAAAAAAAAjUAAAAAAAAAAAAAAAAAAAA1QAAAAAAAAAAAAAAAAAAKNkAAAAAAAAAAAAAAAAAAA7bAAAAAAAAAAAAAAAAAABI3gAAAAAAAAAAAAAAAAAAOOUAAAAAAAAAAAAAAAAAAOznAAAAAAAAAAAAAAAAAAAAAAAAAwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAN0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAANcAAADeAAAAePgAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALD2AAAAAAAABQAAAAAAAAAAAAAA2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1wAAANYAAACA/AAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAA//////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 223,
  'maximum': 223 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5308192,
    STACKTOP = STACK_BASE,
    STACK_MAX = 65312,
    DYNAMIC_BASE = 5308192,
    DYNAMICTOP_PTR = 65152;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');








// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;






// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;












function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = 'media_probe.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  51662: function($0) {FS.mkdir('/data'); var js_filepath = UTF8ToString($0); FS.mount(NODEFS, { root: js_filepath }, '/data');},  
 51771: function() {FS.unmount('/data'); FS.rmdir('/data');}
};

function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}



// STATICTOP = STATIC_BASE + 64288;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer["alloc"] ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },convertNodeCode:function(e) {
        var code = e.code;
        assert(code in ERRNO_CODES);
        return ERRNO_CODES[code];
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(28);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(28);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          oldNode.name = newName;
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
  
          return position;
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
  
          var ptr = _malloc(length);
  
          NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = __webpack_require__(20);
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'NODEFS': NODEFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _abort() {
      abort();
    }

  
  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  
  var _emscripten_get_now_is_monotonic=true;;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _emscripten_get_sbrk_ptr() {
      return 65152;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  var __readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray( __readAsmConstArgsArray));
      // Input buffer must be a pre-existing varargs buffer, so already aligned to 4 bytes.
      assert(buf % 4 == 0);
      __readAsmConstArgsArray.length = 0;
      var ch;
      buf >>= 2; // Align buf up front to index Int32Array (HEAP32)
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        __readAsmConstArgsArray.push(ch < 105 ? HEAPF64[++buf >> 1] : HEAP32[buf]);
        ++buf;
      }
      return __readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
if (ENVIRONMENT_IS_NODE) { var fs = __webpack_require__(5); var NODEJS_PATH = __webpack_require__(1); NODEFS.staticInit(); };
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmGlobalArg = {};
var asmLibraryArg = { "__handle_stack_overflow": ___handle_stack_overflow, "__sys_fcntl64": ___sys_fcntl64, "__sys_ioctl": ___sys_ioctl, "__sys_open": ___sys_open, "abort": _abort, "clock_gettime": _clock_gettime, "emscripten_asm_const_iii": _emscripten_asm_const_iii, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "gettimeofday": _gettimeofday, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _mountDataFilepath = Module["_mountDataFilepath"] = createExportWrapper("mountDataFilepath");

/** @type {function(...*):?} */
var _unmountDataFilepath = Module["_unmountDataFilepath"] = createExportWrapper("unmountDataFilepath");

/** @type {function(...*):?} */
var _CanPlayFileJS = Module["_CanPlayFileJS"] = createExportWrapper("CanPlayFileJS");

/** @type {function(...*):?} */
var _ProbeFileEx = Module["_ProbeFileEx"] = createExportWrapper("ProbeFileEx");

/** @type {function(...*):?} */
var _CanPlayToString = Module["_CanPlayToString"] = createExportWrapper("CanPlayToString");

/** @type {function(...*):?} */
var _GetDecoderName = Module["_GetDecoderName"] = createExportWrapper("GetDecoderName");

/** @type {function(...*):?} */
var _GetDecoderTimesliceMaxCount = Module["_GetDecoderTimesliceMaxCount"] = createExportWrapper("GetDecoderTimesliceMaxCount");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = createExportWrapper("__set_stack_limit");

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = createExportWrapper("__growWasmMemory");

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi");

/** @type {function(...*):?} */
var dynCall_iiij = Module["dynCall_iiij"] = createExportWrapper("dynCall_iiij");

/** @type {function(...*):?} */
var dynCall_iiiij = Module["dynCall_iiiij"] = createExportWrapper("dynCall_iiiij");

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii");

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii");

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii");

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii");

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = createExportWrapper("dynCall_iiiiii");

/** @type {function(...*):?} */
var dynCall_iiijj = Module["dynCall_iiijj"] = createExportWrapper("dynCall_iiijj");

/** @type {function(...*):?} */
var dynCall_iiijji = Module["dynCall_iiijji"] = createExportWrapper("dynCall_iiijji");

/** @type {function(...*):?} */
var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii");

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = createExportWrapper("dynCall_iiiiiiii");

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = createExportWrapper("dynCall_iiiiiii");

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii");





// === Auto-generated postamble setup entry stuff ===


if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["UTF8ToString"] = UTF8ToString;
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["stringToUTF8"] = stringToUTF8;
Module["lengthBytesUTF8"] = lengthBytesUTF8;
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addOnPostRun"] = addOnPostRun;
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "NODEFS")) Module["NODEFS"] = function() { abort("'NODEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      readyPromiseReject(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();






// {{MODULE_ADDITIONS}}





  return Module.ready
}
);
})();
if (true)
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
    
/* WEBPACK VAR INJECTION */}.call(exports, "/index.js", __webpack_require__(13), "/", __webpack_require__(10).Buffer))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(4));
	else if(typeof define === 'function' && define.amd)
		define(["isomorphic-path"], factory);
	else if(typeof exports === 'object')
		exports["bsCore"] = factory(require("isomorphic-path"));
	else
		root["bsCore"] = factory(root["isomorphic-path"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_25__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInstanceOfEnum = exports.getEnumKeyOfValue = exports.bscIsBsSize = exports.bscIsBsColor = exports.BsBlack = exports.TwitterFeedRestrictionType = exports.PlayerTagMatchingType = exports.DataFeedUsageType = exports.DataFeedType = exports.HtmlSiteType = exports.PlayFileTriggerType = exports.MediaListPlaybackType = exports.SystemVariableType = exports.NumberParameterType = exports.StringParameterType = exports.AccessType = exports.BlcChannels = exports.BlcTransitionMode = exports.BlcPlaybackMode = exports.BlcBlink = exports.BlcEffect = exports.BlcIndex = exports.BpAction = exports.CommandSequenceType = exports.CommandType = exports.CompareOperator = exports.TransitionType = exports.DistanceUnits = exports.RegionDirection = exports.IrTransmitterDestination = exports.IrReceiverEncodings = exports.IrReceiverSource = exports.ButtonDirection = exports.ButtonPanelNameArray = exports.ButtonPanelName = exports.BpIndex = exports.GpioType = exports.BpType = exports.EventIntrinsicAction = exports.EventType = exports.TextScrollingMethodType = exports.TextHAlignmentType = exports.RotationType = exports.VideoDisplayModeType = exports.MosaicMaxContentResolutionType = exports.AudioMixModeType = exports.AudioOutputType = exports.AudioConfiguration = exports.AudioOutputNameArray = exports.UsbConnectorNameArray = exports.AudioOutputName = exports.UsbConnectorName = exports.AudioMappingType = exports.AudioModeType = exports.AudioOutputSelectionType = exports.ImageOrientationType = exports.ColorSpaceType = exports.ImageModeType = exports.ViewModeType = exports.LanguageKeyType = exports.LanguageType = exports.UdpAddressType = exports.GraphicsZOrderType = exports.TouchCursorDisplayModeType = exports.DeviceWebPageDisplay = exports.MonitorOverscanType = exports.MonitorOrientationType = exports.VideoConnectorType = exports.VideoDecoderSize = exports.VideoDecoderName = exports.VideoDecoderMode = exports.VideoZoneLayerType = exports.ZoneLayerType = exports.ZoneType = exports.bscGetContentItemTypeForMediaType = exports.ContentItemType = exports.PlayableMediaTypes = exports.MediaType = void 0;
var assets_1 = __webpack_require__(4);
var isNil = __webpack_require__(0);
var MediaType = (function () {
    function MediaType() {
    }
    MediaType.Video = 'Video';
    MediaType.Audio = 'Audio';
    MediaType.Image = 'Image';
    MediaType.Text = 'Text';
    MediaType.Font = 'Font';
    MediaType.Css = 'Css';
    MediaType.Auxiliary = 'Auxiliary';
    MediaType.Other = 'Other';
    return MediaType;
}());
exports.MediaType = MediaType;
Object.freeze(MediaType);
var PlayableMediaTypeArray = [
    MediaType.Image, MediaType.Video, MediaType.Audio, MediaType.Text
];
exports.PlayableMediaTypes = new Set(PlayableMediaTypeArray);
var ContentItemType = (function () {
    function ContentItemType() {
    }
    ContentItemType.Video = 'Video';
    ContentItemType.Image = 'Image';
    ContentItemType.Audio = 'Audio';
    ContentItemType.Html = 'Html';
    ContentItemType.LiveVideo = 'LiveVideo';
    ContentItemType.DataFeed = 'DataFeed';
    ContentItemType.MrssFeed = 'MrssFeed';
    ContentItemType.TwitterFeed = 'TwitterFeed';
    ContentItemType.Text = 'Text';
    ContentItemType.UserVariable = 'UserVariable';
    ContentItemType.VideoStream = 'VideoStream';
    ContentItemType.AudioStream = 'AudioStream';
    ContentItemType.MjpegStream = 'MjpegStream';
    ContentItemType.Time = 'Time';
    ContentItemType.Date = 'Date';
    ContentItemType.EventHandler = 'EventHandler';
    ContentItemType.PlayFile = 'PlayFile';
    ContentItemType.MediaList = 'MediaList';
    ContentItemType.LocalPlaylist = 'LocalPlaylist';
    ContentItemType.LocalPlaylistItem = 'LocalPlaylistItem';
    ContentItemType.LiveText = 'LiveText';
    ContentItemType.SuperState = 'SuperState';
    ContentItemType.Invalid = 'Invalid';
    return ContentItemType;
}());
exports.ContentItemType = ContentItemType;
Object.freeze(ContentItemType);
function bscGetContentItemTypeForMediaType(type) {
    if (assets_1.bscIsMediaTypePlayable(type)) {
        return type;
    }
    return ContentItemType.Invalid;
}
exports.bscGetContentItemTypeForMediaType = bscGetContentItemTypeForMediaType;
var ZoneType = (function () {
    function ZoneType() {
    }
    ZoneType.VideoOrImages = 'VideoOrImages';
    ZoneType.VideoOnly = 'VideoOnly';
    ZoneType.Images = 'Images';
    ZoneType.AudioOnly = 'AudioOnly';
    ZoneType.EnhancedAudio = 'EnhancedAudio';
    ZoneType.Ticker = 'Ticker';
    ZoneType.Clock = 'Clock';
    ZoneType.BackgroundImage = 'BackgroundImage';
    ZoneType.Control = 'Control';
    return ZoneType;
}());
exports.ZoneType = ZoneType;
Object.freeze(ZoneType);
var ZoneLayerType = (function () {
    function ZoneLayerType() {
    }
    ZoneLayerType.Video = 'Video';
    ZoneLayerType.Audio = 'Audio';
    ZoneLayerType.Graphics = 'Graphics';
    ZoneLayerType.Invisible = 'Invisible';
    return ZoneLayerType;
}());
exports.ZoneLayerType = ZoneLayerType;
Object.freeze(ZoneLayerType);
var VideoZoneLayerType = (function () {
    function VideoZoneLayerType() {
    }
    VideoZoneLayerType.FourK = 'FourK';
    VideoZoneLayerType.HD = 'HD';
    return VideoZoneLayerType;
}());
exports.VideoZoneLayerType = VideoZoneLayerType;
Object.freeze(VideoZoneLayerType);
var VideoDecoderMode = (function () {
    function VideoDecoderMode() {
    }
    VideoDecoderMode.Regular = 'Regular';
    VideoDecoderMode.Mosaic = 'Mosaic';
    return VideoDecoderMode;
}());
exports.VideoDecoderMode = VideoDecoderMode;
Object.freeze(VideoDecoderMode);
var VideoDecoderName = (function () {
    function VideoDecoderName() {
    }
    VideoDecoderName.FourKFirstDecoder = '4K';
    VideoDecoderName.FourKSecondDecoder = '4K2';
    VideoDecoderName.HDDecoder = 'Hd';
    return VideoDecoderName;
}());
exports.VideoDecoderName = VideoDecoderName;
Object.freeze(VideoDecoderName);
var VideoDecoderSize = (function () {
    function VideoDecoderSize() {
    }
    VideoDecoderSize.FourK = 'FourK';
    VideoDecoderSize.HD = 'HD';
    return VideoDecoderSize;
}());
exports.VideoDecoderSize = VideoDecoderSize;
Object.freeze(VideoDecoderSize);
var VideoConnectorType = (function () {
    function VideoConnectorType() {
    }
    VideoConnectorType.Hdmi = 'HDMI';
    VideoConnectorType.Vga = 'VGA';
    VideoConnectorType.Component = 'Component';
    VideoConnectorType.None = 'None';
    return VideoConnectorType;
}());
exports.VideoConnectorType = VideoConnectorType;
Object.freeze(VideoConnectorType);
var MonitorOrientationType = (function () {
    function MonitorOrientationType() {
    }
    MonitorOrientationType.Landscape = 'Landscape';
    MonitorOrientationType.PortraitBottomLeft = 'PortraitBottomLeft';
    MonitorOrientationType.PortraitBottomRight = 'PortraitBottomRight';
    MonitorOrientationType.None = 'None';
    return MonitorOrientationType;
}());
exports.MonitorOrientationType = MonitorOrientationType;
Object.freeze(MonitorOrientationType);
var MonitorOverscanType = (function () {
    function MonitorOverscanType() {
    }
    MonitorOverscanType.NoOverscan = 'NoOverscan';
    MonitorOverscanType.OverscanActionSafeArea = 'OverscanActionSafeArea';
    MonitorOverscanType.OverscanTitleSafeArea = 'OverscanTitleSafeArea';
    return MonitorOverscanType;
}());
exports.MonitorOverscanType = MonitorOverscanType;
Object.freeze(MonitorOverscanType);
var DeviceWebPageDisplay = (function () {
    function DeviceWebPageDisplay() {
    }
    DeviceWebPageDisplay.None = 'None';
    DeviceWebPageDisplay.Standard = 'Standard';
    DeviceWebPageDisplay.Custom = 'Custom';
    return DeviceWebPageDisplay;
}());
exports.DeviceWebPageDisplay = DeviceWebPageDisplay;
Object.freeze(DeviceWebPageDisplay);
var TouchCursorDisplayModeType = (function () {
    function TouchCursorDisplayModeType() {
    }
    TouchCursorDisplayModeType.Disabled = 'Disabled';
    TouchCursorDisplayModeType.Auto = 'Auto';
    TouchCursorDisplayModeType.Display = 'Display';
    return TouchCursorDisplayModeType;
}());
exports.TouchCursorDisplayModeType = TouchCursorDisplayModeType;
Object.freeze(TouchCursorDisplayModeType);
var GraphicsZOrderType = (function () {
    function GraphicsZOrderType() {
    }
    GraphicsZOrderType.Back = 'Back';
    GraphicsZOrderType.Middle = 'Middle';
    GraphicsZOrderType.Front = 'Front';
    return GraphicsZOrderType;
}());
exports.GraphicsZOrderType = GraphicsZOrderType;
Object.freeze(GraphicsZOrderType);
var UdpAddressType = (function () {
    function UdpAddressType() {
    }
    UdpAddressType.IPAddress = 'IPAddress';
    UdpAddressType.LocalSubnet = 'LocalSubnet';
    UdpAddressType.Ethernet = 'Ethernet';
    UdpAddressType.Wireless = 'Wireless';
    return UdpAddressType;
}());
exports.UdpAddressType = UdpAddressType;
Object.freeze(UdpAddressType);
var LanguageType = (function () {
    function LanguageType() {
    }
    LanguageType.English = 'English';
    LanguageType.French = 'French';
    LanguageType.German = 'German';
    LanguageType.Spanish = 'Spanish';
    LanguageType.Italian = 'Italian';
    LanguageType.Dutch = 'Dutch';
    LanguageType.Swedish = 'Swedish';
    return LanguageType;
}());
exports.LanguageType = LanguageType;
Object.freeze(LanguageType);
var LanguageKeyType = (function () {
    function LanguageKeyType() {
    }
    LanguageKeyType.English = 'eng';
    LanguageKeyType.French = 'fre';
    LanguageKeyType.German = 'ger';
    LanguageKeyType.Spanish = 'spa';
    LanguageKeyType.Italian = 'ita';
    LanguageKeyType.Dutch = 'dut';
    LanguageKeyType.Swedish = 'swe';
    return LanguageKeyType;
}());
exports.LanguageKeyType = LanguageKeyType;
Object.freeze(LanguageKeyType);
var ViewModeType = (function () {
    function ViewModeType() {
    }
    ViewModeType.ScaleToFill = 'Scale to Fill';
    ViewModeType.Letterboxed = 'Letterboxed and Centered';
    ViewModeType.FillAndCenter = 'Fill Screen and Centered';
    return ViewModeType;
}());
exports.ViewModeType = ViewModeType;
Object.freeze(ViewModeType);
var ImageModeType = (function () {
    function ImageModeType() {
    }
    ImageModeType.CenterImage = 'Center Image';
    ImageModeType.ScaleToFit = 'Scale to Fit';
    ImageModeType.FillAndCrop = 'Scale to Fill and Crop';
    ImageModeType.ScaleToFill = 'Scale to Fill';
    return ImageModeType;
}());
exports.ImageModeType = ImageModeType;
Object.freeze(ImageModeType);
var ColorSpaceType = (function () {
    function ColorSpaceType() {
    }
    ColorSpaceType.Unknown = 'Unknown';
    ColorSpaceType.CMY = 'CMY';
    ColorSpaceType.CMYK = 'CMYK';
    ColorSpaceType.Gray = 'Gray';
    ColorSpaceType.HCL = 'HCL';
    ColorSpaceType.HCLp = 'HCLp';
    ColorSpaceType.HSB = 'HSB';
    ColorSpaceType.HSI = 'HSI';
    ColorSpaceType.HSL = 'HSL';
    ColorSpaceType.HSV = 'HSV';
    ColorSpaceType.HWB = 'HWB';
    ColorSpaceType.Lab = 'Lab';
    ColorSpaceType.LCH = 'LCH';
    ColorSpaceType.LCHab = 'LCHab';
    ColorSpaceType.LCHuv = 'LCHuv';
    ColorSpaceType.Log = 'Log';
    ColorSpaceType.LMS = 'LMS';
    ColorSpaceType.Luv = 'Luv';
    ColorSpaceType.OHTA = 'OHTA';
    ColorSpaceType.Rec601YCbCr = 'Rec601YCbCr';
    ColorSpaceType.Rec709YCbCr = 'Rec709YCbCr';
    ColorSpaceType.RGB = 'RGB';
    ColorSpaceType.scRGB = 'scRGB';
    ColorSpaceType.sRGB = 'sRGB';
    ColorSpaceType.Transparent = 'Transparent';
    ColorSpaceType.XyV = 'XyV';
    ColorSpaceType.XYZ = 'XYZ';
    ColorSpaceType.YCbCr = 'YCbCr';
    ColorSpaceType.YCC = 'YCC';
    ColorSpaceType.YDbDr = 'YDbDr';
    ColorSpaceType.YIQ = 'YIQ';
    ColorSpaceType.YPbPr = 'YPbPr';
    ColorSpaceType.YUV = 'YUV';
    ColorSpaceType.LinearGray = 'LinearGray';
    return ColorSpaceType;
}());
exports.ColorSpaceType = ColorSpaceType;
var ImageOrientationType = (function () {
    function ImageOrientationType() {
    }
    ImageOrientationType.Undefined = 'Undefined';
    ImageOrientationType.TopLeft = 'TopLeft';
    ImageOrientationType.TopRight = 'TopRight';
    ImageOrientationType.BottomRight = 'BottomRight';
    ImageOrientationType.BottomLeft = 'BottomLeft';
    ImageOrientationType.LeftTop = 'LeftTop';
    ImageOrientationType.RightTop = 'RightTop';
    ImageOrientationType.RightBottom = 'RightBottom';
    ImageOrientationType.LeftBottom = 'LeftBottom';
    return ImageOrientationType;
}());
exports.ImageOrientationType = ImageOrientationType;
var AudioOutputSelectionType = (function () {
    function AudioOutputSelectionType() {
    }
    AudioOutputSelectionType.Analog = 'Analog';
    AudioOutputSelectionType.Usb = 'Usb';
    AudioOutputSelectionType.DigitalPcm = 'DigitalPcm';
    AudioOutputSelectionType.DigitalAc3 = 'DigitalAc3';
    AudioOutputSelectionType.AnalogHdmiAc3 = 'AnalogHdmiAc3';
    return AudioOutputSelectionType;
}());
exports.AudioOutputSelectionType = AudioOutputSelectionType;
Object.freeze(AudioOutputSelectionType);
var AudioModeType = (function () {
    function AudioModeType() {
    }
    AudioModeType.Surround = 'Surround';
    AudioModeType.Stereo = 'Stereo';
    AudioModeType.NoAudio = 'NoAudio';
    AudioModeType.Left = 'Left';
    AudioModeType.Right = 'Right';
    return AudioModeType;
}());
exports.AudioModeType = AudioModeType;
Object.freeze(AudioModeType);
var AudioMappingType = (function () {
    function AudioMappingType() {
    }
    AudioMappingType.Audio1 = 'Audio1';
    AudioMappingType.Audio2 = 'Audio2';
    AudioMappingType.Audio3 = 'Audio3';
    AudioMappingType.AudioAll = 'AudioAll';
    return AudioMappingType;
}());
exports.AudioMappingType = AudioMappingType;
Object.freeze(AudioMappingType);
var UsbConnectorName = (function () {
    function UsbConnectorName() {
    }
    UsbConnectorName.UsbA = 'usbA';
    UsbConnectorName.UsbB = 'usbB';
    UsbConnectorName.UsbC = 'usbC';
    UsbConnectorName.UsbD = 'usbD';
    UsbConnectorName.UsbTypeA = 'usbTypeA';
    UsbConnectorName.UsbTypeC = 'usbTypeC';
    UsbConnectorName.Usb700_1 = 'usb700_1';
    UsbConnectorName.Usb700_2 = 'usb700_2';
    UsbConnectorName.Usb700_3 = 'usb700_3';
    UsbConnectorName.Usb700_4 = 'usb700_4';
    UsbConnectorName.Usb700_5 = 'usb700_5';
    UsbConnectorName.Usb700_6 = 'usb700_6';
    UsbConnectorName.Usb700_7 = 'usb700_7';
    UsbConnectorName.Usb_1 = 'usb_1';
    UsbConnectorName.Usb_2 = 'usb_2';
    UsbConnectorName.Usb_3 = 'usb_3';
    UsbConnectorName.Usb_4 = 'usb_4';
    UsbConnectorName.Usb_5 = 'usb_5';
    UsbConnectorName.Usb_6 = 'usb_6';
    return UsbConnectorName;
}());
exports.UsbConnectorName = UsbConnectorName;
Object.freeze(UsbConnectorName);
var AudioOutputName = (function (_super) {
    __extends(AudioOutputName, _super);
    function AudioOutputName() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AudioOutputName.Analog1 = 'analog1';
    AudioOutputName.Analog2 = 'analog2';
    AudioOutputName.Analog3 = 'analog3';
    AudioOutputName.Hdmi = 'hdmi';
    AudioOutputName.Spdif = 'spdif';
    return AudioOutputName;
}(UsbConnectorName));
exports.AudioOutputName = AudioOutputName;
Object.freeze(AudioOutputName);
exports.UsbConnectorNameArray = [
    'usbA', 'usbB', 'usbC', 'usbD',
    'usbTypeA', 'usbTypeC', 'usb700_1', 'usb700_2', 'usb700_3',
    'usb700_4', 'usb700_5', 'usb700_6', 'usb700_7',
    'usb_1', 'usb_2', 'usb_3', 'usb_4', 'usb_5', 'usb_6',
];
exports.AudioOutputNameArray = __spreadArrays([
    'analog1', 'analog2', 'analog3', 'hdmi', 'spdif'
], exports.UsbConnectorNameArray);
var AudioConfiguration = (function () {
    function AudioConfiguration() {
    }
    AudioConfiguration.MixedAudioPCMOnly = 'MixedAudioPCMOnly';
    AudioConfiguration.MixedAudioPCMCompressed = 'MixedAudioPCMCompressed';
    AudioConfiguration.FixedAudio = 'FixedAudio';
    return AudioConfiguration;
}());
exports.AudioConfiguration = AudioConfiguration;
Object.freeze(AudioConfiguration);
var AudioOutputType = (function () {
    function AudioOutputType() {
    }
    AudioOutputType.Pcm = 'Pcm';
    AudioOutputType.Passthrough = 'Passthrough';
    AudioOutputType.Multichannel = 'Multichannel';
    AudioOutputType.None = 'None';
    return AudioOutputType;
}());
exports.AudioOutputType = AudioOutputType;
Object.freeze(AudioOutputType);
var AudioMixModeType = (function () {
    function AudioMixModeType() {
    }
    AudioMixModeType.Stereo = 'Stereo';
    AudioMixModeType.Left = 'Left';
    AudioMixModeType.Right = 'Right';
    return AudioMixModeType;
}());
exports.AudioMixModeType = AudioMixModeType;
Object.freeze(AudioMixModeType);
var MosaicMaxContentResolutionType = (function () {
    function MosaicMaxContentResolutionType() {
    }
    MosaicMaxContentResolutionType.NotApplicable = 'NotApplicable';
    MosaicMaxContentResolutionType.QCIF = 'QCIF';
    MosaicMaxContentResolutionType.CIF = 'CIF';
    MosaicMaxContentResolutionType.SD = 'SD';
    MosaicMaxContentResolutionType.HD = 'HD';
    MosaicMaxContentResolutionType.FK = '4K';
    return MosaicMaxContentResolutionType;
}());
exports.MosaicMaxContentResolutionType = MosaicMaxContentResolutionType;
Object.freeze(MosaicMaxContentResolutionType);
var VideoDisplayModeType = (function () {
    function VideoDisplayModeType() {
    }
    VideoDisplayModeType.m2D = '2D';
    VideoDisplayModeType.m3DTOB = '3DTOB';
    VideoDisplayModeType.m3DSBS = '3DSBS';
    return VideoDisplayModeType;
}());
exports.VideoDisplayModeType = VideoDisplayModeType;
Object.freeze(VideoDisplayModeType);
var RotationType = (function () {
    function RotationType() {
    }
    RotationType.rot0 = '0';
    RotationType.rot90 = '90';
    RotationType.rot180 = '180';
    RotationType.rot270 = '270';
    return RotationType;
}());
exports.RotationType = RotationType;
Object.freeze(RotationType);
var TextHAlignmentType = (function () {
    function TextHAlignmentType() {
    }
    TextHAlignmentType.Left = 'Left';
    TextHAlignmentType.Center = 'Center';
    TextHAlignmentType.Right = 'Right';
    return TextHAlignmentType;
}());
exports.TextHAlignmentType = TextHAlignmentType;
Object.freeze(TextHAlignmentType);
var TextScrollingMethodType = (function () {
    function TextScrollingMethodType() {
    }
    TextScrollingMethodType.Animated = 'Animated';
    TextScrollingMethodType.StaticText = 'StaticText';
    TextScrollingMethodType.Scrolling = 'Scrolling';
    return TextScrollingMethodType;
}());
exports.TextScrollingMethodType = TextScrollingMethodType;
Object.freeze(TextScrollingMethodType);
var EventType = (function () {
    function EventType() {
    }
    EventType.MediaEnd = 'MediaEnd';
    EventType.Timer = 'Timer';
    EventType.MediaEndOrTimer = 'MediaEndOrTimer';
    EventType.MediaListEnd = 'MediaListEnd';
    EventType.Keyboard = 'Keyboard';
    EventType.Remote = 'Remote';
    EventType.Usb = 'Usb';
    EventType.Synchronize = 'Synchronize';
    EventType.ZoneMessage = 'ZoneMessage';
    EventType.InternalSynchronize = 'InternalSynchronize';
    EventType.Success = 'Success';
    EventType.Fail = 'Fail';
    EventType.Serial = 'Serial';
    EventType.TimeClock = 'TimeClock';
    EventType.Gps = 'Gps';
    EventType.AudioTimeCode = 'AudioTimeCode';
    EventType.VideoTimeCode = 'VideoTimeCode';
    EventType.RectangularTouch = 'RectangularTouch';
    EventType.Gpio = 'Gpio';
    EventType.Bp = 'Bp';
    EventType.PluginMessage = 'PluginMessage';
    EventType.Udp = 'Udp';
    EventType.InteractiveMenu = 'InteractiveMenu';
    EventType.WssEvent = 'WssEvent';
    EventType.Button = 'Button';
    EventType.Bmap = 'Bmap';
    EventType.BmapHex = 'BmapHex';
    return EventType;
}());
exports.EventType = EventType;
Object.freeze(EventType);
var EventIntrinsicAction = (function () {
    function EventIntrinsicAction() {
    }
    EventIntrinsicAction.None = 'None';
    EventIntrinsicAction.SequenceForward = 'SeqFwd';
    EventIntrinsicAction.SequenceBackward = 'SeqBack';
    EventIntrinsicAction.ReturnToPriorState = 'ReturnToPriorState';
    EventIntrinsicAction.StopPlayback = 'StopPlayback';
    EventIntrinsicAction.StopPlaybackAndClearScreen = 'StopPlaybackAndClearScreen';
    return EventIntrinsicAction;
}());
exports.EventIntrinsicAction = EventIntrinsicAction;
var BpType = (function () {
    function BpType() {
    }
    BpType.Bp200 = 'bp200';
    BpType.Bp900 = 'bp900';
    BpType.Gpio = 'gpio';
    return BpType;
}());
exports.BpType = BpType;
Object.freeze(BpType);
var GpioType = (function () {
    function GpioType() {
    }
    GpioType.Input = 'input';
    GpioType.Output = 'output';
    return GpioType;
}());
exports.GpioType = GpioType;
Object.freeze(GpioType);
var BpIndex = (function () {
    function BpIndex() {
    }
    BpIndex.A = 'a';
    BpIndex.B = 'b';
    BpIndex.C = 'c';
    BpIndex.D = 'd';
    return BpIndex;
}());
exports.BpIndex = BpIndex;
Object.freeze(BpIndex);
var ButtonPanelName = (function () {
    function ButtonPanelName() {
    }
    ButtonPanelName.Bp900a = 'bp900a';
    ButtonPanelName.Bp900b = 'bp900b';
    ButtonPanelName.Bp900c = 'bp900c';
    ButtonPanelName.Bp900d = 'bp900d';
    ButtonPanelName.Bp200a = 'bp200a';
    ButtonPanelName.Bp200b = 'bp200b';
    ButtonPanelName.Bp200c = 'bp200c';
    ButtonPanelName.Bp200d = 'bp200d';
    return ButtonPanelName;
}());
exports.ButtonPanelName = ButtonPanelName;
Object.freeze(ButtonPanelName);
exports.ButtonPanelNameArray = [
    'bp900a', 'bp900b', 'bp900c', 'bp900d', 'bp200a', 'bp200b', 'bp200c', 'bp200d',
];
var ButtonDirection = (function () {
    function ButtonDirection() {
    }
    ButtonDirection.Down = 'Down';
    ButtonDirection.Up = 'Up';
    return ButtonDirection;
}());
exports.ButtonDirection = ButtonDirection;
Object.freeze(ButtonDirection);
var IrReceiverSource = (function () {
    function IrReceiverSource() {
    }
    IrReceiverSource.IrIn = 'Ir-in';
    IrReceiverSource.GPIO = 'GPIO';
    IrReceiverSource.Iguana = 'Iguana';
    IrReceiverSource.None = 'None';
    return IrReceiverSource;
}());
exports.IrReceiverSource = IrReceiverSource;
Object.freeze(IrReceiverSource);
var IrReceiverEncodings = (function () {
    function IrReceiverEncodings() {
    }
    IrReceiverEncodings.NEC = 'NEC';
    IrReceiverEncodings.RC5 = 'RC5';
    return IrReceiverEncodings;
}());
exports.IrReceiverEncodings = IrReceiverEncodings;
Object.freeze(IrReceiverEncodings);
var IrTransmitterDestination = (function () {
    function IrTransmitterDestination() {
    }
    IrTransmitterDestination.IrOut = 'Ir-out';
    IrTransmitterDestination.Iguana = 'Iguana';
    IrTransmitterDestination.None = 'None';
    return IrTransmitterDestination;
}());
exports.IrTransmitterDestination = IrTransmitterDestination;
Object.freeze(IrTransmitterDestination);
var RegionDirection = (function () {
    function RegionDirection() {
    }
    RegionDirection.Enter = 'Enter';
    RegionDirection.Exit = 'Exit';
    return RegionDirection;
}());
exports.RegionDirection = RegionDirection;
Object.freeze(RegionDirection);
var DistanceUnits = (function () {
    function DistanceUnits() {
    }
    DistanceUnits.Miles = 'Miles';
    DistanceUnits.Kilometers = 'Kilometers';
    return DistanceUnits;
}());
exports.DistanceUnits = DistanceUnits;
Object.freeze(DistanceUnits);
var TransitionType = (function () {
    function TransitionType() {
    }
    TransitionType.None = 'None';
    TransitionType.NoEffect = 'No effect';
    TransitionType.WipeTop = 'Image wipe from top';
    TransitionType.WipeBottom = 'Image wipe from bottom';
    TransitionType.WipeLeft = 'Image wipe from left';
    TransitionType.WipeRight = 'Image wipe from right';
    TransitionType.ExplodeFromCenter = 'Explode from center';
    TransitionType.ExplodeTopLeft = 'Explode top left';
    TransitionType.ExplodeTopRight = 'Explode top right';
    TransitionType.ExplodeBottomLeft = 'Explode bottom left';
    TransitionType.ExplodeBottomRight = 'Explode bottom right';
    TransitionType.BlindsVertical = 'Venetian blinds - vertical';
    TransitionType.BlindsHorizontal = 'Venetian blinds - horizontal';
    TransitionType.CombVertical = 'Comb effect - vertical';
    TransitionType.CombHorizontal = 'Comb effect - horizontal';
    TransitionType.FadeToBackground = 'Fade to background color';
    TransitionType.Fade = 'Fade to new image';
    TransitionType.SlideFromTop = 'Slide from top';
    TransitionType.SlideFromBottom = 'Slide from bottom';
    TransitionType.SlideFromLeft = 'Slide from left';
    TransitionType.SlideFromRight = 'Slide from right';
    return TransitionType;
}());
exports.TransitionType = TransitionType;
Object.freeze(TransitionType);
var CompareOperator = (function () {
    function CompareOperator() {
    }
    CompareOperator.EQ = 'EQ';
    CompareOperator.NEQ = 'NEQ';
    CompareOperator.BTW = 'BTW';
    CompareOperator.GT = 'GT';
    CompareOperator.GTE = 'GTE';
    CompareOperator.LT = 'LT';
    CompareOperator.LTE = 'LTE';
    return CompareOperator;
}());
exports.CompareOperator = CompareOperator;
Object.freeze(CompareOperator);
var CommandType = (function () {
    function CommandType() {
    }
    CommandType.SendBpOutput = 'sendBpOutput';
    CommandType.SetAllAudioOutputs = 'setAllAudioOutputs';
    CommandType.SetAudioMode = 'setAudioMode';
    CommandType.ConfigureAudioResources = 'configureAudioResources';
    CommandType.SetConnectorVolume = 'setConnectorVolume';
    CommandType.IncrementConnectorVolume = 'incrementConnectorVolume';
    CommandType.DecrementConnectorVolume = 'decrementConnectorVolume';
    CommandType.MuteAudioOutputs = 'muteAudioOutputs';
    CommandType.UnmuteAudioOutputs = 'unmuteAudioOutputs';
    CommandType.SetZoneVolume = 'setZoneVolume';
    CommandType.IncrementZoneVolume = 'incrementZoneVolume';
    CommandType.DecrementZoneVolume = 'decrementZoneVolume';
    CommandType.SetZoneChannelVolume = 'setZoneChannelVolume';
    CommandType.IncrementZoneChannelVolume = 'incrementZoneChannelVolume';
    CommandType.DecrementZoneChannelVolume = 'decrementZoneChannelVolume';
    CommandType.SendZoneMessage = 'sendZoneMessage';
    CommandType.SendUdp = 'sendUdp';
    CommandType.SendUdpBytes = 'sendUdpBytes';
    CommandType.SendIRRemote = 'sendIRRemote';
    CommandType.SendProntoIRRemote = 'sendProntoIRRemote';
    CommandType.SerialSendString = 'serialSendString';
    CommandType.SerialSendByte = 'serialSendByte';
    CommandType.SerialSendBytes = 'serialSendBytes';
    CommandType.SendPluginMessage = 'sendPluginMessage';
    CommandType.Synchronize = 'synchronize';
    CommandType.InternalSynchronize = 'internalSynchronize';
    CommandType.GpioOn = 'gpioOn';
    CommandType.GpioOff = 'gpioOff';
    CommandType.GpioSetState = 'gpioSetState';
    CommandType.PauseVideo = 'pauseVideo';
    CommandType.ResumeVideo = 'resumeVideo';
    CommandType.EnablePowerSaveMode = 'enablePowerSaveMode';
    CommandType.DisablePowerSaveMode = 'disablePowerSaveMode';
    CommandType.CecDisplayOn = 'cecDisplayOn';
    CommandType.CecDisplayOff = 'cecDisplayOff';
    CommandType.CecSetSourceToBrightSign = 'cecSetSourceToBrightSign';
    CommandType.CecSendString = 'cecSendString';
    CommandType.CecPhilipsSetVolume = 'cecPhilipsSetVolume';
    CommandType.BeaconStart = 'beaconStart';
    CommandType.BeaconStop = 'beaconStop';
    CommandType.Pause = 'pause';
    CommandType.Resume = 'resume';
    CommandType.SetVariable = 'setVariable';
    CommandType.IncrementVariable = 'incrementVariable';
    CommandType.DecrementVariable = 'decrementVariable';
    CommandType.ResetVariable = 'resetVariable';
    CommandType.ResetVariables = 'resetVariables';
    CommandType.SwitchPresentation = 'switchPresentation';
    CommandType.UpdateDataFeed = 'updateDataFeed';
    CommandType.ResizeZone = 'resizeZone';
    CommandType.HideZone = 'hideZone';
    CommandType.ShowZone = 'showZone';
    CommandType.PauseZonePlayback = 'pauseZonePlayback';
    CommandType.ResumeZonePlayback = 'resumeZonePlayback';
    CommandType.Reboot = 'reboot';
    CommandType.SendBLC400Output = 'sendBLC400Output';
    CommandType.SendWss = 'sendWss';
    CommandType.LightOn = 'lightOn';
    CommandType.LightOff = 'lightOff';
    CommandType.SendBmap = 'sendBmap';
    CommandType.SendBmapHex = 'sendBmapHex';
    return CommandType;
}());
exports.CommandType = CommandType;
Object.freeze(CommandType);
var CommandSequenceType = (function () {
    function CommandSequenceType() {
    }
    CommandSequenceType.StateEntry = 'StateEntry';
    CommandSequenceType.StateExit = 'StateExit';
    CommandSequenceType.Event = 'Event';
    CommandSequenceType.Transition = 'Transition';
    CommandSequenceType.SequenceItemNext = 'ItemNext';
    CommandSequenceType.SequenceItemPrevious = 'ItemPrev';
    return CommandSequenceType;
}());
exports.CommandSequenceType = CommandSequenceType;
Object.freeze(CommandSequenceType);
var BpAction = (function () {
    function BpAction() {
    }
    BpAction.Off = 'Off';
    BpAction.On = 'On';
    BpAction.FastBlink = 'FastBlink';
    BpAction.MediumBlink = 'MediumBlink';
    BpAction.SlowBlink = 'SlowBlink';
    return BpAction;
}());
exports.BpAction = BpAction;
Object.freeze(BpAction);
var BlcIndex = (function () {
    function BlcIndex() {
    }
    BlcIndex.A = 'a';
    BlcIndex.B = 'b';
    BlcIndex.C = 'c';
    return BlcIndex;
}());
exports.BlcIndex = BlcIndex;
Object.freeze(BlcIndex);
var BlcEffect = (function () {
    function BlcEffect() {
    }
    BlcEffect.Intensity = 'Intensity';
    BlcEffect.Blink = 'Blink';
    BlcEffect.Breathe = 'Breathe';
    BlcEffect.Strobe = 'Strobe';
    BlcEffect.Marquee = 'Marquee';
    return BlcEffect;
}());
exports.BlcEffect = BlcEffect;
Object.freeze(BlcEffect);
var BlcBlink = (function () {
    function BlcBlink() {
    }
    BlcBlink.FastBlink = 'FastBlink';
    BlcBlink.MediumBlink = 'MediumBlink';
    BlcBlink.SlowBlink = 'SlowBlink';
    return BlcBlink;
}());
exports.BlcBlink = BlcBlink;
Object.freeze(BlcBlink);
var BlcPlaybackMode = (function () {
    function BlcPlaybackMode() {
    }
    BlcPlaybackMode.Loop = 'Loop';
    BlcPlaybackMode.BackAndForth = 'BackAndForth';
    BlcPlaybackMode.PlayOnce = 'PlayOnce';
    BlcPlaybackMode.Random = 'Random';
    return BlcPlaybackMode;
}());
exports.BlcPlaybackMode = BlcPlaybackMode;
Object.freeze(BlcPlaybackMode);
var BlcTransitionMode = (function () {
    function BlcTransitionMode() {
    }
    BlcTransitionMode.HardOnOff = 'HardOnOff';
    BlcTransitionMode.SmoothDelay = 'SmoothDelay';
    BlcTransitionMode.SmoothFullOverlap = 'SmoothFullOverlap';
    BlcTransitionMode.SmoothPartialOverlap = 'SmoothPartialOverlap';
    return BlcTransitionMode;
}());
exports.BlcTransitionMode = BlcTransitionMode;
Object.freeze(BlcTransitionMode);
var BlcChannels = (function () {
    function BlcChannels() {
    }
    BlcChannels.A = 'A';
    BlcChannels.B = 'B';
    BlcChannels.C = 'C';
    BlcChannels.D = 'D';
    return BlcChannels;
}());
exports.BlcChannels = BlcChannels;
Object.freeze(BlcChannels);
var AccessType = (function () {
    function AccessType() {
    }
    AccessType.Private = 'Private';
    AccessType.Shared = 'Shared';
    return AccessType;
}());
exports.AccessType = AccessType;
Object.freeze(AccessType);
var StringParameterType = (function () {
    function StringParameterType() {
    }
    StringParameterType.Text = 'Text';
    StringParameterType.UserVariable = 'UserVariable';
    StringParameterType.UserVariableName = 'UserVariableName';
    return StringParameterType;
}());
exports.StringParameterType = StringParameterType;
Object.freeze(StringParameterType);
var NumberParameterType = (function () {
    function NumberParameterType() {
    }
    NumberParameterType.Number = 'Number';
    NumberParameterType.UserVariable = 'UserVariable';
    NumberParameterType.UserVariableName = 'UserVariableName';
    return NumberParameterType;
}());
exports.NumberParameterType = NumberParameterType;
Object.freeze(NumberParameterType);
var SystemVariableType = (function () {
    function SystemVariableType() {
    }
    SystemVariableType.SerialNumber = 'SerialNumber';
    SystemVariableType.IPAddressWired = 'IPAddressWired';
    SystemVariableType.IPAddressWireless = 'IPAddressWireless';
    SystemVariableType.FirmwareVersion = 'FirmwareVersion';
    SystemVariableType.ScriptVersion = 'ScriptVersion';
    SystemVariableType.EdidMonitorSerialNumber = 'EdidMonitorSerialNumber';
    SystemVariableType.EdidYearOfManufacture = 'EdidYearOfManufacture';
    SystemVariableType.EdidMonitorName = 'EdidMonitorName';
    SystemVariableType.EdidManufacturer = 'EdidManufacturer';
    SystemVariableType.EdidUnspecifiedText = 'EdidUnspecifiedText';
    SystemVariableType.EdidSerialNumber = 'EdidSerialNumber';
    SystemVariableType.EdidManufacturerProductCode = 'EdidManufacturerProductCode';
    SystemVariableType.EdidWeekOfManufacture = 'EdidWeekOfManufacture';
    SystemVariableType.ActivePresentation = 'ActivePresentation';
    return SystemVariableType;
}());
exports.SystemVariableType = SystemVariableType;
var MediaListPlaybackType = (function () {
    function MediaListPlaybackType() {
    }
    MediaListPlaybackType.FromBeginning = 'FromBeginning';
    MediaListPlaybackType.NextInList = 'NextInList';
    MediaListPlaybackType.FromIndex = 'FromIndex';
    return MediaListPlaybackType;
}());
exports.MediaListPlaybackType = MediaListPlaybackType;
var PlayFileTriggerType = (function () {
    function PlayFileTriggerType() {
    }
    PlayFileTriggerType.ByEventData = 'ByEventData';
    PlayFileTriggerType.ByUserVariable = 'ByUserVariable';
    return PlayFileTriggerType;
}());
exports.PlayFileTriggerType = PlayFileTriggerType;
var HtmlSiteType = (function () {
    function HtmlSiteType() {
    }
    HtmlSiteType.Hosted = 'Hosted';
    HtmlSiteType.Remote = 'Remote';
    return HtmlSiteType;
}());
exports.HtmlSiteType = HtmlSiteType;
Object.freeze(HtmlSiteType);
var DataFeedType = (function () {
    function DataFeedType() {
    }
    DataFeedType.URLDataFeed = 'URLDataFeed';
    DataFeedType.BSNDataFeed = 'BSNDataFeed';
    DataFeedType.BSNMediaFeed = 'BSNMediaFeed';
    DataFeedType.BSNDynamicPlaylist = 'BSNDynamicPlaylist';
    DataFeedType.BSNTaggedPlaylist = 'BSNTaggedPlaylist';
    return DataFeedType;
}());
exports.DataFeedType = DataFeedType;
Object.freeze(DataFeedType);
var DataFeedUsageType = (function () {
    function DataFeedUsageType() {
    }
    DataFeedUsageType.Text = 'Text';
    DataFeedUsageType.Mrss = 'MRSS';
    DataFeedUsageType.MrssWith4K = 'MRSSWith4K';
    DataFeedUsageType.Content = 'Content';
    return DataFeedUsageType;
}());
exports.DataFeedUsageType = DataFeedUsageType;
Object.freeze(DataFeedUsageType);
var PlayerTagMatchingType = (function () {
    function PlayerTagMatchingType() {
    }
    PlayerTagMatchingType.DoNotMatchTags = 'DoNotMatchTags';
    PlayerTagMatchingType.MatchAllMediaTagsToPlayerTags = 'MatchAllMediaTagsToPlayerTags';
    PlayerTagMatchingType.MatchAllPlayerTagsToMediaTags = 'MatchAllPlayerTagsToMediaTags';
    PlayerTagMatchingType.MatchAnyPlayerAndMediaTags = 'MatchAnyPlayerAndMediaTags';
    return PlayerTagMatchingType;
}());
exports.PlayerTagMatchingType = PlayerTagMatchingType;
Object.freeze(PlayerTagMatchingType);
var TwitterFeedRestrictionType = (function () {
    function TwitterFeedRestrictionType() {
    }
    TwitterFeedRestrictionType.None = 'None';
    TwitterFeedRestrictionType.ByCount = 'ByCount';
    TwitterFeedRestrictionType.ByRecentDays = 'ByRecentDays';
    return TwitterFeedRestrictionType;
}());
exports.TwitterFeedRestrictionType = TwitterFeedRestrictionType;
exports.BsBlack = { a: 255, r: 0, g: 0, b: 0 };
Object.freeze(exports.BsBlack);
function bscIsBsColor(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('r')
        && value.hasOwnProperty('g')
        && value.hasOwnProperty('b')
        && value.hasOwnProperty('a');
}
exports.bscIsBsColor = bscIsBsColor;
function bscIsBsSize(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('height')
        && value.hasOwnProperty('width');
}
exports.bscIsBsSize = bscIsBsSize;
function getEnumKeyOfValue(enumType, value) {
    for (var _i = 0, _a = Object.keys(enumType); _i < _a.length; _i++) {
        var key = _a[_i];
        if (enumType[key] === value) {
            return key;
        }
    }
    return null;
}
exports.getEnumKeyOfValue = getEnumKeyOfValue;
function isInstanceOfEnum(enumType, value) {
    return getEnumKeyOfValue(enumType, value) !== null;
}
exports.isInstanceOfEnum = isInstanceOfEnum;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

module.exports = isString;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscGetBsnFirmwareKeyForPlayerModel = exports.bscPlayerModelToPlayerFamily = exports.bscSerialToPlayerFamily = exports.AllModels = exports.Series2Models = exports.Series3Models = exports.Series4Models = exports.MonacoModels = exports.PumaModels = exports.PantherModels = exports.CheetahModels = exports.BobcatModels = exports.LynxModels = exports.SebringModels = exports.TigerModels = exports.PanteraModels = exports.ImpalaModels = exports.PaganiHDModels = exports.PaganiModels = exports.MalibuModels = exports.PlayerModel = exports.PlayerMachineNameSuffix = exports.PlayerFamily = void 0;
var PlayerFamily = (function () {
    function PlayerFamily() {
    }
    PlayerFamily.Unknown = 'Unknown';
    PlayerFamily.Malibu = 'Malibu';
    PlayerFamily.Pagani = 'Pagani';
    PlayerFamily.Impala = 'Impala';
    PlayerFamily.Pantera = 'Pantera';
    PlayerFamily.Tiger = 'Tiger';
    PlayerFamily.Sebring = 'Sebring';
    PlayerFamily.Lynx = 'Lynx';
    PlayerFamily.Bobcat = 'Bobcat';
    PlayerFamily.Cheetah = 'Cheetah';
    PlayerFamily.Panther = 'Panther';
    PlayerFamily.Puma = 'Puma';
    PlayerFamily.Monaco = 'Monaco';
    return PlayerFamily;
}());
exports.PlayerFamily = PlayerFamily;
Object.freeze(PlayerFamily);
var PlayerMachineNameSuffix = (function () {
    function PlayerMachineNameSuffix() {
    }
    PlayerMachineNameSuffix.SingleDecoder = 'Single_Decoder';
    PlayerMachineNameSuffix.No4K = 'No4K';
    return PlayerMachineNameSuffix;
}());
exports.PlayerMachineNameSuffix = PlayerMachineNameSuffix;
Object.freeze(PlayerMachineNameSuffix);
var PlayerModel = (function () {
    function PlayerModel() {
    }
    PlayerModel.Unknown = 'Unknown';
    PlayerModel.XD1034 = 'XD1034';
    PlayerModel.XD234 = 'XD234';
    PlayerModel.XT1144 = 'XT1144';
    PlayerModel.XT244 = 'XT244';
    PlayerModel.HD1024 = 'HD1024';
    PlayerModel.HD224 = 'HD224';
    PlayerModel.HS144 = 'HS144';
    PlayerModel.LS424 = 'LS424';
    PlayerModel.HS124 = 'HS124';
    PlayerModel.XD1033 = 'XD1033';
    PlayerModel.XD233 = 'XD233';
    PlayerModel.XT1043 = 'XT1043';
    PlayerModel.XT1143 = 'XT1143';
    PlayerModel.XT243 = 'XT243';
    PlayerModel.HD1023 = 'HD1023';
    PlayerModel.HD223 = 'HD223';
    PlayerModel.HS123 = 'HS123';
    PlayerModel.HO523 = 'HO523';
    PlayerModel.LS423 = 'LS423';
    PlayerModel.FK1142 = '4K1142';
    PlayerModel.FK1042 = '4K1042';
    PlayerModel.FK242 = '4K242';
    PlayerModel.AU325 = 'AU325';
    PlayerModel.AU335 = 'AU335';
    PlayerModel.XD1132 = 'XD1132';
    PlayerModel.XD1032 = 'XD1032';
    PlayerModel.XD232 = 'XD232';
    PlayerModel.HD1022 = 'HD1022';
    PlayerModel.HD222 = 'HD222';
    PlayerModel.HD972 = 'HD972';
    PlayerModel.HD922 = 'HD922';
    PlayerModel.XD1230 = 'XD1230';
    PlayerModel.XD1030 = 'XD1030';
    PlayerModel.XD230 = 'XD230';
    PlayerModel.HD1020 = 'HD1020';
    PlayerModel.HD220 = 'HD220';
    PlayerModel.HD120 = 'HD120';
    PlayerModel.LS422 = 'LS422';
    PlayerModel.LS322 = 'LS322';
    PlayerModel.AU320 = 'AU320';
    PlayerModel.HD970 = 'HD970';
    PlayerModel.HD920 = 'HD920';
    PlayerModel.A915 = 'A915';
    PlayerModel.HD917 = 'HD917';
    PlayerModel.HD210 = 'HD210';
    PlayerModel.HD1010 = 'HD1010';
    PlayerModel.TD1012 = 'TD1012';
    return PlayerModel;
}());
exports.PlayerModel = PlayerModel;
var MalibuModelArray = [
    PlayerModel.XD1034,
    PlayerModel.XD234,
    PlayerModel.XT1144,
    PlayerModel.XT244,
];
exports.MalibuModels = new Set(MalibuModelArray);
var PaganiModelArray = [
    PlayerModel.HD1024,
    PlayerModel.HD224,
    PlayerModel.HS144,
];
exports.PaganiModels = new Set(PaganiModelArray);
var PaganiHDModelArray = [
    PlayerModel.LS424,
    PlayerModel.HS124,
];
exports.PaganiHDModels = new Set(PaganiHDModelArray);
var ImpalaModelArray = [
    PlayerModel.XD1033,
    PlayerModel.XD233,
    PlayerModel.XT1043,
    PlayerModel.XT1143,
    PlayerModel.XT243,
];
exports.ImpalaModels = new Set(ImpalaModelArray);
var PanteraModelArray = [
    PlayerModel.HD1023,
    PlayerModel.HD223,
    PlayerModel.HS123,
    PlayerModel.HO523,
    PlayerModel.LS423,
];
exports.PanteraModels = new Set(PanteraModelArray);
var TigerModelArray = [
    PlayerModel.FK1142,
    PlayerModel.FK1042,
    PlayerModel.FK242,
];
exports.TigerModels = new Set(TigerModelArray);
var SebringModelArray = [
    PlayerModel.AU325,
    PlayerModel.AU335,
];
exports.SebringModels = new Set(SebringModelArray);
var LynxModelArray = [
    PlayerModel.XD1132,
    PlayerModel.XD1032,
    PlayerModel.XD232,
];
exports.LynxModels = new Set(LynxModelArray);
var BobcatModelArray = [
    PlayerModel.HD1022,
    PlayerModel.HD222,
    PlayerModel.HD972,
    PlayerModel.HD922,
];
exports.BobcatModels = new Set(BobcatModelArray);
var CheetahModelArray = [
    PlayerModel.XD1230,
    PlayerModel.XD1030,
    PlayerModel.XD230,
];
exports.CheetahModels = new Set(CheetahModelArray);
var PantherModelArray = [
    PlayerModel.HD1020,
    PlayerModel.HD220,
    PlayerModel.HD120,
    PlayerModel.LS422,
    PlayerModel.LS322,
    PlayerModel.AU320,
];
exports.PantherModels = new Set(PantherModelArray);
var PumaModelArray = [
    PlayerModel.HD970,
    PlayerModel.HD920,
    PlayerModel.A915,
    PlayerModel.HD917,
];
exports.PumaModels = new Set(PumaModelArray);
var MonacoModelArray = [
    PlayerModel.HD210,
    PlayerModel.HD1010,
    PlayerModel.TD1012,
];
exports.MonacoModels = new Set(MonacoModelArray);
exports.Series4Models = new Set(MalibuModelArray.concat(PaganiModelArray, PaganiHDModelArray));
exports.Series3Models = new Set(ImpalaModelArray.concat(PanteraModelArray));
exports.Series2Models = new Set(TigerModelArray.concat(LynxModelArray, BobcatModelArray));
exports.AllModels = new Set(MalibuModelArray.concat(PaganiModelArray, PaganiHDModelArray, ImpalaModelArray, PanteraModelArray, TigerModelArray, SebringModelArray, LynxModelArray, BobcatModelArray, CheetahModelArray, PantherModelArray, PumaModelArray, MonacoModelArray));
var PaganiPrefixArray = [
    '24', '25', '42', '43',
    '44', '45', '46', '47',
    '48', '49', '58', '59',
    '64', '65', '66',
];
var PanteraPrefixArray = [
    '31', '33', '35', '38',
    '53', '55', '57', '61',
];
var ImpalaPrefixArray = [
    '62', '63', 'L6', 'L8',
    'L9', 'R1', 'R2', 'R3',
    'R4', 'R6', 'R7',
];
var MalibuPrefixArray = [
    '67', 'D1', 'D2', 'D3',
    'D4', 'D5', 'D6', 'D7',
    'D8', 'D9', 'E1', 'E2',
    'E3', 'E4', 'E5',
];
var TigerPrefixArray = [
    'X3', 'X4', 'X5',
];
var SebringPrefixArray = [
    'AA', 'AC',
];
function bscSerialToPlayerFamily(serialNumber) {
    if (serialNumber && serialNumber.length > 1) {
        var prefix_1 = serialNumber.substring(0, 2);
        if (PaganiPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Pagani;
        }
        if (PanteraPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Pantera;
        }
        if (ImpalaPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Impala;
        }
        if (MalibuPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Malibu;
        }
        if (TigerPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Tiger;
        }
        if (SebringPrefixArray.find(function (p) { return (p === prefix_1); }) !== undefined) {
            return PlayerFamily.Sebring;
        }
    }
    return null;
}
exports.bscSerialToPlayerFamily = bscSerialToPlayerFamily;
function bscPlayerModelToPlayerFamily(model) {
    if (exports.MalibuModels.has(model)) {
        return PlayerFamily.Malibu;
    }
    else if (exports.PaganiModels.has(model) || exports.PaganiHDModels.has(model)) {
        return PlayerFamily.Pagani;
    }
    else if (exports.ImpalaModels.has(model)) {
        return PlayerFamily.Impala;
    }
    else if (exports.PanteraModels.has(model)) {
        return PlayerFamily.Pantera;
    }
    else if (exports.TigerModels.has(model)) {
        return PlayerFamily.Tiger;
    }
    else if (exports.SebringModels.has(model)) {
        return PlayerFamily.Sebring;
    }
    else if (exports.LynxModels.has(model)) {
        return PlayerFamily.Lynx;
    }
    else if (exports.BobcatModels.has(model)) {
        return PlayerFamily.Bobcat;
    }
    else if (exports.CheetahModels.has(model)) {
        return PlayerFamily.Cheetah;
    }
    else if (exports.PantherModels.has(model)) {
        return PlayerFamily.Panther;
    }
    else if (exports.PumaModels.has(model)) {
        return PlayerFamily.Puma;
    }
    else if (exports.MonacoModels.has(model)) {
        return PlayerFamily.Monaco;
    }
    else {
        return PlayerFamily.Unknown;
    }
}
exports.bscPlayerModelToPlayerFamily = bscPlayerModelToPlayerFamily;
function bscGetBsnFirmwareKeyForPlayerModel(model) {
    switch (bscPlayerModelToPlayerFamily(model)) {
        case PlayerFamily.Malibu: return 'xdX34_XTX44Firmware';
        case PlayerFamily.Pagani: return 'hdX4_HSX4_LSX4Firmware';
        case PlayerFamily.Impala: {
            switch (model) {
                case PlayerModel.XD1033:
                case PlayerModel.XD233:
                    return 'xdX33Firmware';
                default:
                    return 'xtX43Firmware';
            }
        }
        case PlayerFamily.Pantera: {
            switch (model) {
                case PlayerModel.HS123:
                    return 'hsX23Firmware';
                case PlayerModel.HO523:
                    return 'hoX23Firmware';
                case PlayerModel.LS423:
                    return 'lsX23Firmware';
                default:
                    return 'hdX23Firmware';
            }
        }
        case PlayerFamily.Tiger: return '4KX42Firmware';
        case PlayerFamily.Lynx: return 'xdX32Firmware';
        case PlayerFamily.Sebring: return 'aux5Firmware';
    }
    return null;
}
exports.bscGetBsnFirmwareKeyForPlayerModel = bscGetBsnFirmwareKeyForPlayerModel;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bscGetBscFileTypeInfo = exports.BsAllFileBasedAssetTypes = exports.bscGetAssetItemFileTypeInfo = exports.styleSheetFileSuffixes = exports.fontFileSuffixes = exports.htmlSiteFileSuffixes = exports.projectBpfFileSuffixes = exports.scheduleFileSuffixes = exports.projectFileFragmentSuffixes = exports.projectFileSuffixes = exports.bscGetFileProjectFragmentExtension = exports.bscGetFileProjectFragmentType = exports.bscStripFileExtension = exports.bscIsAssetItemPlayableContent = exports.bscIsMediaTypePlayable = exports.bscGetFileMediaType = exports.textFileSuffixes = exports.audioFileSuffixes = exports.videoFileSuffixes = exports.imageFileSuffixes = exports.bscIsDefaultAssetItem = exports.bscGetDefaultAssetItem = exports.bscIsNullAssetItem = exports.bscGetNullAssetItem = exports.bscGetBsnAssetLocatorKey = exports.bscGetFtpAssetLocatorKey = exports.bscGetLocalAssetLocatorKey = exports.bscGenerateAssetLocatorKey = exports.bscAssetItemFromBasicAssetInfo = exports.bscGetAssetSpecification = exports.bscAssetLocatorForLocalAsset = exports.bscGetAssetFullPath = exports.bscGetAssetExtension = exports.bscGetAssetName = exports.bscAssetLocatorForBsnAsset = exports.bscAssetLocatorFromAssetItem = exports.bscAssetItemFromAssetLocator = exports.bscAssetItemIsBsnDataFeed = exports.bscIsAssetItem = exports.bscIsAssetLocator = exports.bscIsLocalAssetThumbnail = exports.bscCreateNetworkAssetThumbnail = exports.bscCreateLocalAssetThumbnail = exports.BsProjectFragmentType = exports.bscConvertProbeDataToAvMetadata = exports.bscIsImageData = exports.bscIsAudioData = exports.bscIsVideoData = exports.FtpObjectPermissionGroup = exports.BseChildAssetType = exports.AssetType = exports.AssetLocation = exports.bscIsValidAssetId = exports.BsAssetIdNone = void 0;
var metadata_1 = __webpack_require__(1);
var isomorphic_path_1 = __webpack_require__(25);
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var isUndefined = __webpack_require__(24);
exports.BsAssetIdNone = '0';
function bscIsValidAssetId(id) {
    return typeof id === 'string' && id.length >= 8;
}
exports.bscIsValidAssetId = bscIsValidAssetId;
var AssetLocation = (function () {
    function AssetLocation() {
    }
    AssetLocation.Local = 'Local';
    AssetLocation.Bsn = 'Bsn';
    AssetLocation.Ftp = 'Ftp';
    AssetLocation.Blob = 'Blob';
    return AssetLocation;
}());
exports.AssetLocation = AssetLocation;
Object.freeze(AssetLocation);
var AssetType = (function () {
    function AssetType() {
    }
    AssetType.Content = 'Content';
    AssetType.Project = 'Project';
    AssetType.ProjectBpf = 'ProjectBpf';
    AssetType.ProjectFragment = 'ProjectFragment';
    AssetType.Schedule = 'Schedule';
    AssetType.BrightScript = 'BrightScript';
    AssetType.HtmlSite = 'HtmlSite';
    AssetType.DeviceHtmlSite = 'DeviceHtmlSite';
    AssetType.Folder = 'Folder';
    AssetType.BSNDataFeed = 'BSNDataFeed';
    AssetType.BSNMediaFeed = 'BSNMediaFeed';
    AssetType.BSNDynamicPlaylist = 'BSNDynamicPlaylist';
    AssetType.BSNTaggedPlaylist = 'BSNTaggedPlaylist';
    AssetType.Other = 'Other';
    return AssetType;
}());
exports.AssetType = AssetType;
Object.freeze(AssetType);
var BseChildAssetType = (function (_super) {
    __extends(BseChildAssetType, _super);
    function BseChildAssetType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BseChildAssetType.Asset = 'Asset';
    BseChildAssetType.Component = 'Component';
    return BseChildAssetType;
}(AssetType));
exports.BseChildAssetType = BseChildAssetType;
Object.freeze(BseChildAssetType);
var FtpObjectPermissionGroup;
(function (FtpObjectPermissionGroup) {
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Owner"] = 0] = "Owner";
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Group"] = 1] = "Group";
    FtpObjectPermissionGroup[FtpObjectPermissionGroup["Other"] = 2] = "Other";
})(FtpObjectPermissionGroup = exports.FtpObjectPermissionGroup || (exports.FtpObjectPermissionGroup = {}));
function bscIsVideoData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Video;
}
exports.bscIsVideoData = bscIsVideoData;
function bscIsAudioData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Audio;
}
exports.bscIsAudioData = bscIsAudioData;
function bscIsImageData(mediaData) {
    return !isNil(mediaData) && mediaData.mediaType === metadata_1.MediaType.Image;
}
exports.bscIsImageData = bscIsImageData;
function bscConvertProbeDataToAvMetadata(probeData, mediaType) {
    var getHexNumber = function (v) {
        var n = parseInt(v, 16);
        return isNaN(n) ? 0 : n;
    };
    var getNumber = function (v) {
        var n = parseInt(v, 10);
        return isNaN(n) ? 0 : n;
    };
    var getFloatNumber = function (v) {
        var n = parseFloat(v);
        return isNaN(n) ? 0 : Math.round(n * 1000) / 1000;
    };
    if (mediaType === metadata_1.MediaType.Video || mediaType === metadata_1.MediaType.Audio) {
        var metadata_2 = mediaType === metadata_1.MediaType.Audio ?
            { mediaType: 'Audio' } :
            { mediaType: 'Video', size: { width: -1, height: -1 } };
        var items = probeData.split('|');
        items.forEach(function (item) {
            var pair = item.split('=');
            if (pair.length === 2) {
                var val = pair[1];
                switch (pair[0]) {
                    case 'AB':
                        metadata_2.audioBitrate = getHexNumber(val);
                        break;
                    case 'AC':
                        metadata_2.audioCodec = val;
                        break;
                    case 'ACH':
                        metadata_2.audioChannelCount = getNumber(val);
                        break;
                    case 'AD':
                        metadata_2.audioDuration = getHexNumber(val) / 1000;
                        break;
                    case 'AP':
                        metadata_2.audioPid = getNumber(val);
                        break;
                    case 'ASR':
                        metadata_2.audioSampleRate = getNumber(val);
                        break;
                    case 'CD':
                        metadata_2.colorDepth = getNumber(val);
                        break;
                    case 'D':
                        metadata_2.duration = getHexNumber(val) / 1000;
                        break;
                    case 'FT':
                        metadata_2.firstTimestamp = getNumber(val);
                        break;
                    case 'H':
                        metadata_2.size.height = getNumber(val);
                        break;
                    case 'IX':
                        metadata_2.indexed = val.length > 0 && val[0].toUpperCase() === 'Y';
                        break;
                    case 'PL':
                        metadata_2.packetLen = getNumber(val);
                        break;
                    case 'SL':
                        metadata_2.subtitleLanguage = val;
                        break;
                    case 'SP':
                        metadata_2.subtitlePid = getNumber(val);
                        break;
                    case 'TT':
                        metadata_2.transport = val;
                        break;
                    case 'VC':
                        metadata_2.videoCodec = val;
                        break;
                    case 'VD':
                        metadata_2.videoDuration = getHexNumber(val) / 1000;
                        break;
                    case 'VFR':
                        metadata_2.videoFrameRate = getFloatNumber(val);
                        break;
                    case 'VP':
                        metadata_2.videoPid = getNumber(val);
                        break;
                    case 'W':
                        metadata_2.size.width = getNumber(val);
                        break;
                }
            }
        });
        return metadata_2;
    }
    return {};
}
exports.bscConvertProbeDataToAvMetadata = bscConvertProbeDataToAvMetadata;
var BsProjectFragmentType = (function () {
    function BsProjectFragmentType() {
    }
    BsProjectFragmentType.None = 'None';
    BsProjectFragmentType.MediaStateCopySet = 'MediaStateCopySet';
    BsProjectFragmentType.CommandCopySet = 'CommandCopySet';
    BsProjectFragmentType.LiveTextItemCopySet = 'LiveTextItemCopySet';
    BsProjectFragmentType.UserVariableCopySet = 'UserVariableCopySet';
    BsProjectFragmentType.UserDefinedEventSet = 'UserDefinedEventSet';
    return BsProjectFragmentType;
}());
exports.BsProjectFragmentType = BsProjectFragmentType;
function bscCreateLocalAssetThumbnail(data, type, size, hash) {
    return {
        kind: 'local',
        type: type, data: data,
        size: isNil(size) ? null : size,
        hash: isNil(hash) ? null : hash.toLowerCase(),
    };
}
exports.bscCreateLocalAssetThumbnail = bscCreateLocalAssetThumbnail;
function bscCreateNetworkAssetThumbnail(url, size, hash) {
    return {
        kind: 'network',
        url: url,
        size: isNil(size) ? null : size,
        hash: isNil(hash) ? null : hash.toLowerCase(),
    };
}
exports.bscCreateNetworkAssetThumbnail = bscCreateNetworkAssetThumbnail;
function bscIsLocalAssetThumbnail(assetThumbnail) {
    return assetThumbnail.kind === 'local';
}
exports.bscIsLocalAssetThumbnail = bscIsLocalAssetThumbnail;
function bscIsAssetLocator(item) {
    return item != null
        && typeof item === 'object'
        && item.hasOwnProperty('name')
        && item.hasOwnProperty('assetType')
        && item.hasOwnProperty('location');
}
exports.bscIsAssetLocator = bscIsAssetLocator;
function bscIsAssetItem(item) {
    return bscIsAssetLocator(item) && item.hasOwnProperty('locator');
}
exports.bscIsAssetItem = bscIsAssetItem;
function bscAssetItemIsBsnDataFeed(item) {
    return item.hasOwnProperty('assetType')
        && (item.assetType === AssetType.BSNDataFeed
            || item.assetType === AssetType.BSNMediaFeed
            || item.assetType === AssetType.BSNDynamicPlaylist
            || item.assetType === AssetType.BSNTaggedPlaylist);
}
exports.bscAssetItemIsBsnDataFeed = bscAssetItemIsBsnDataFeed;
function bscAssetItemFromAssetLocator(assetLocator) {
    var assetItem = __assign(__assign({ id: exports.BsAssetIdNone }, assetLocator), { locator: bscGenerateAssetLocatorKey(assetLocator) });
    if (assetItem.assetType === AssetType.Content) {
        assetItem.mediaType = bscGetFileMediaType(assetItem.name);
    }
    return assetItem;
}
exports.bscAssetItemFromAssetLocator = bscAssetItemFromAssetLocator;
function bscAssetLocatorFromAssetItem(assetItem) {
    var name = assetItem.name, path = assetItem.path, location = assetItem.location, assetType = assetItem.assetType, childAssetType = assetItem.childAssetType, networkId = assetItem.networkId, scope = assetItem.scope, origin = assetItem.origin;
    var locator = { name: name, path: path, location: location, assetType: assetType, networkId: networkId, scope: scope };
    if (!isNil(childAssetType)) {
        locator.childAssetType = childAssetType;
    }
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorFromAssetItem = bscAssetLocatorFromAssetItem;
function bscAssetLocatorForBsnAsset(assetType, bsnId, network, name, path, origin) {
    if (network === void 0) { network = ''; }
    if (name === void 0) { name = ''; }
    if (path === void 0) { path = ''; }
    var locator = {
        name: isNil(name) ? '' : name,
        path: isNil(path) ? '' : path,
        location: AssetLocation.Bsn,
        assetType: assetType,
        networkId: bsnId,
        scope: isNil(network) ? '' : network,
    };
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorForBsnAsset = bscAssetLocatorForBsnAsset;
function bscGetAssetName(locator) {
    if (locator.location === AssetLocation.Bsn && locator.assetType !== AssetType.Content) {
        return locator.name;
    }
    return isomorphic_path_1.default.basename(locator.name, isomorphic_path_1.default.extname(locator.name));
}
exports.bscGetAssetName = bscGetAssetName;
function bscGetAssetExtension(locator) {
    if (locator.location === AssetLocation.Local || locator.assetType === AssetType.Content) {
        return isomorphic_path_1.default.extname(locator.name);
    }
    return '';
}
exports.bscGetAssetExtension = bscGetAssetExtension;
var leadingSep = function (path, assetLocation) {
    var sep = isomorphic_path_1.default.sep;
    if (assetLocation === AssetLocation.Bsn || assetLocation === AssetLocation.Ftp) {
        sep = isomorphic_path_1.default.posix.sep;
    }
    return path.charAt(0) === sep ? '' : sep;
};
var trailingSep = function (path, assetLocation) {
    var sep = isomorphic_path_1.default.sep;
    if (assetLocation === AssetLocation.Bsn || assetLocation === AssetLocation.Ftp) {
        sep = isomorphic_path_1.default.posix.sep;
    }
    return !path || path.charAt(path.length - 1) === sep ? '' : sep;
};
function bscGetAssetFullPath(assetSpec) {
    if (assetSpec.location === AssetLocation.Local) {
        return isomorphic_path_1.default.join(assetSpec.path, assetSpec.name);
    }
    return assetSpec.path + trailingSep(assetSpec.path, assetSpec.location) + assetSpec.name;
}
exports.bscGetAssetFullPath = bscGetAssetFullPath;
function bscAssetLocatorForLocalAsset(assetType, fullPath, scope, origin) {
    if (scope === void 0) { scope = ''; }
    var dirName = isomorphic_path_1.default.dirname(fullPath);
    var locator = {
        name: isomorphic_path_1.default.basename(fullPath),
        path: dirName + trailingSep(dirName),
        location: AssetLocation.Local,
        assetType: assetType,
        networkId: 0,
        scope: isNil(scope) ? '' : scope,
    };
    if (!isNil(origin)) {
        locator.origin = origin;
    }
    return locator;
}
exports.bscAssetLocatorForLocalAsset = bscAssetLocatorForLocalAsset;
function bscGetAssetSpecification(location, assetType, path, fileName) {
    var dirName = isNil(fileName) ? isomorphic_path_1.default.dirname(path) : path;
    return {
        name: isNil(fileName) ? isomorphic_path_1.default.basename(path) : fileName,
        path: dirName + trailingSep(dirName, location),
        location: location,
        assetType: assetType,
    };
}
exports.bscGetAssetSpecification = bscGetAssetSpecification;
function bscAssetItemFromBasicAssetInfo(assetType, fileName, fileDirPath, bsnId, mediaType, scope, origin) {
    if (fileDirPath === void 0) { fileDirPath = null; }
    if (bsnId === void 0) { bsnId = 0; }
    if (mediaType === void 0) { mediaType = null; }
    if (scope === void 0) { scope = ''; }
    var assetLocator;
    if (!fileDirPath) {
        fileDirPath = isomorphic_path_1.default.sep;
    }
    if (isNil(scope)) {
        scope = '';
    }
    if (bsnId) {
        assetLocator = bscAssetLocatorForBsnAsset(assetType, bsnId, scope);
        assetLocator.name = fileName;
        assetLocator.path = fileDirPath;
    }
    else if (fileName) {
        var fullPath = isomorphic_path_1.default.join(fileDirPath, fileName);
        assetLocator = bscAssetLocatorForLocalAsset(assetType, fullPath, scope);
    }
    if (assetLocator) {
        if (origin) {
            assetLocator.origin = origin;
        }
        var assetItem = bscAssetItemFromAssetLocator(assetLocator);
        if (assetType === AssetType.Content) {
            assetItem.mediaType = mediaType ? mediaType : bscGetFileMediaType(assetItem.name);
        }
        return assetItem;
    }
    return null;
}
exports.bscAssetItemFromBasicAssetInfo = bscAssetItemFromBasicAssetInfo;
function bscGenerateAssetLocatorKey(item) {
    switch (item.location) {
        case AssetLocation.Local:
        default:
            if (!isUndefined(item.path) && item.name) {
                return 'file://' + leadingSep(item.path) + item.path + trailingSep(item.path) + item.name;
            }
            break;
        case AssetLocation.Bsn:
            if (!isNil(item.assetType)) {
                return bscGetBsnAssetLocatorKey(item.networkId, item.assetType, item.name, item.path);
            }
            break;
        case AssetLocation.Ftp:
            if (!isNil(item.assetType) && !isNil(item.scope)) {
                return bscGetFtpAssetLocatorKey(item.scope, item.path, item.name);
            }
            break;
        case AssetLocation.Blob:
            if (!isNil(item.name)) {
                var key = 'blob://' + item.name + '/';
                if (bscIsAssetItem(item)) {
                    if (!isNil(item.fileSize)) {
                        key = key + item.fileSize;
                    }
                    else {
                        key = key + '0';
                    }
                    if (!isNil(item.lastModifiedDate)) {
                        key = key + '/' + item.lastModifiedDate.toISOString();
                    }
                }
                return key;
            }
    }
    return '';
}
exports.bscGenerateAssetLocatorKey = bscGenerateAssetLocatorKey;
function bscGetLocalAssetLocatorKey(fullPath) {
    return fullPath ? 'file://' + leadingSep(fullPath) + fullPath : '';
}
exports.bscGetLocalAssetLocatorKey = bscGetLocalAssetLocatorKey;
function bscGetFtpAssetLocatorKey(hostname, path, name) {
    var parsedPath = isString(path) ? path : '';
    return 'ftp://' + hostname + leadingSep(parsedPath, AssetLocation.Ftp) + isomorphic_path_1.default.posix.join(path, name);
}
exports.bscGetFtpAssetLocatorKey = bscGetFtpAssetLocatorKey;
function bscGetBsnAssetLocatorKey(bsnId, assetType, name, path) {
    if (bsnId > 0) {
        return 'bsn://' + assetType + '/' + bsnId;
    }
    else if (bsnId < 0 && name) {
        var key = 'bsn://' + name;
        if (path) {
            key = key + leadingSep(path, AssetLocation.Bsn) + path;
        }
        return key;
    }
    return '';
}
exports.bscGetBsnAssetLocatorKey = bscGetBsnAssetLocatorKey;
var NullAssetBaseName = '__null__';
function bscGetNullAssetItem(assetType, assetLocation, mediaType) {
    if (assetLocation === void 0) { assetLocation = AssetLocation.Local; }
    var nullAssetItem = {
        id: exports.BsAssetIdNone,
        name: NullAssetBaseName + assetType,
        path: '',
        location: assetLocation,
        assetType: assetType,
        networkId: -1,
        scope: '',
        locator: '',
    };
    if (assetType === AssetType.Content && mediaType) {
        nullAssetItem.name = NullAssetBaseName + mediaType;
        nullAssetItem.mediaType = mediaType;
    }
    return nullAssetItem;
}
exports.bscGetNullAssetItem = bscGetNullAssetItem;
function bscIsNullAssetItem(assetItem) {
    return bscIsAssetItem(assetItem)
        && assetItem.name.substr(0, NullAssetBaseName.length) === NullAssetBaseName
        && assetItem.networkId === -1;
}
exports.bscIsNullAssetItem = bscIsNullAssetItem;
var DefaultAssetBaseName = '__default__';
function bscGetDefaultAssetItem(assetType, assetLocation, mediaType, name, path, scope) {
    if (assetLocation === void 0) { assetLocation = AssetLocation.Local; }
    var defaultAssetItem = {
        id: exports.BsAssetIdNone,
        name: DefaultAssetBaseName + assetType,
        path: path ? path : '',
        location: assetLocation,
        assetType: assetType,
        networkId: -1,
        scope: scope ? scope : '',
        locator: '',
    };
    if (assetType === AssetType.Content && mediaType) {
        defaultAssetItem.name = DefaultAssetBaseName + mediaType;
        defaultAssetItem.mediaType = mediaType;
    }
    if (name) {
        defaultAssetItem.name = defaultAssetItem.name + '_' + name;
    }
    defaultAssetItem.locator = bscGenerateAssetLocatorKey(defaultAssetItem);
    return defaultAssetItem;
}
exports.bscGetDefaultAssetItem = bscGetDefaultAssetItem;
function bscIsDefaultAssetItem(assetItem) {
    return bscIsAssetItem(assetItem)
        && assetItem.name.substr(0, DefaultAssetBaseName.length) === DefaultAssetBaseName
        && assetItem.networkId === -1;
}
exports.bscIsDefaultAssetItem = bscIsDefaultAssetItem;
exports.imageFileSuffixes = new Set(['jpg', 'jpeg', 'png', 'bmp']);
exports.videoFileSuffixes = new Set(['mov', 'mp4', 'mpg', 'ts', 'vob', 'wmv', 'm2ts', 'mkv']);
exports.audioFileSuffixes = new Set(['mp3', 'wav', 'ogg', 'flac', 'm4a', 'aac', 'ac3', 'eac3', 'ec3']);
exports.textFileSuffixes = new Set(['txt']);
function bscGetFileExt(pathOrFileName) {
    var result = pathOrFileName.match(/\.([A-Z0-9]+)$/i);
    return result ? result[1].toLowerCase() : '';
}
function bscGetFileMediaType(pathOrFileName) {
    if (pathOrFileName) {
        var ext = bscGetFileExt(pathOrFileName);
        if (ext) {
            if (exports.imageFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Image;
            }
            else if (exports.videoFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Video;
            }
            else if (exports.audioFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Audio;
            }
            else if (exports.textFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Text;
            }
            else if (exports.fontFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Font;
            }
            else if (exports.styleSheetFileSuffixes.has(ext)) {
                return metadata_1.MediaType.Css;
            }
        }
    }
    return metadata_1.MediaType.Auxiliary;
}
exports.bscGetFileMediaType = bscGetFileMediaType;
function bscIsMediaTypePlayable(mediaType) {
    return !isNil(mediaType) && metadata_1.PlayableMediaTypes.has(mediaType);
}
exports.bscIsMediaTypePlayable = bscIsMediaTypePlayable;
function bscIsAssetItemPlayableContent(assetItem) {
    return assetItem.assetType === AssetType.Content && bscIsMediaTypePlayable(assetItem.mediaType);
}
exports.bscIsAssetItemPlayableContent = bscIsAssetItemPlayableContent;
function bscStripFileExtension(pathOrFileName) {
    return pathOrFileName.replace(/\.[^/.]+$/, '');
}
exports.bscStripFileExtension = bscStripFileExtension;
var MediaStateCopySetExt = 'bpfx-ms';
var LiveTextItemCopySetExt = 'bpfx-lt';
var CommandCopySetExt = 'bpfx-cm';
var UserVariableCopySetExt = 'bpfx-uv';
var UserDefinedEventSetExt = 'bpfx-ue';
function bscGetFileProjectFragmentType(pathOrFileName) {
    var ext = bscGetFileExt(pathOrFileName).toLowerCase();
    switch (ext) {
        case MediaStateCopySetExt: return BsProjectFragmentType.MediaStateCopySet;
        case LiveTextItemCopySetExt: return BsProjectFragmentType.LiveTextItemCopySet;
        case CommandCopySetExt: return BsProjectFragmentType.CommandCopySet;
        case UserVariableCopySetExt: return BsProjectFragmentType.UserVariableCopySet;
        case UserDefinedEventSetExt: return BsProjectFragmentType.UserDefinedEventSet;
    }
    return BsProjectFragmentType.None;
}
exports.bscGetFileProjectFragmentType = bscGetFileProjectFragmentType;
function bscGetFileProjectFragmentExtension(type) {
    switch (type) {
        case BsProjectFragmentType.MediaStateCopySet: return MediaStateCopySetExt;
        case BsProjectFragmentType.LiveTextItemCopySet: return LiveTextItemCopySetExt;
        case BsProjectFragmentType.CommandCopySet: return CommandCopySetExt;
        case BsProjectFragmentType.UserVariableCopySet: return UserVariableCopySetExt;
        case BsProjectFragmentType.UserDefinedEventSet: return UserDefinedEventSetExt;
    }
    return '';
}
exports.bscGetFileProjectFragmentExtension = bscGetFileProjectFragmentExtension;
exports.projectFileSuffixes = new Set(['bpfx']);
exports.projectFileFragmentSuffixes = new Set([
    MediaStateCopySetExt, LiveTextItemCopySetExt, CommandCopySetExt, UserVariableCopySetExt, UserDefinedEventSetExt
]);
exports.scheduleFileSuffixes = new Set(['bpsx']);
exports.projectBpfFileSuffixes = new Set(['bpf']);
exports.htmlSiteFileSuffixes = new Set(['html', 'htm', 'js']);
exports.fontFileSuffixes = new Set(['ttf', 'otf']);
exports.styleSheetFileSuffixes = new Set(['css']);
function bscGetAssetItemFileTypeInfo(assetItem) {
    var typeInfo = {
        assetType: assetItem.assetType,
        mediaType: isNil(assetItem.mediaType) ? metadata_1.MediaType.Auxiliary : assetItem.mediaType,
    };
    if (assetItem.assetType === AssetType.ProjectFragment) {
        typeInfo.projectFragmentType = bscGetFileProjectFragmentType(assetItem.name);
    }
    return typeInfo;
}
exports.bscGetAssetItemFileTypeInfo = bscGetAssetItemFileTypeInfo;
exports.BsAllFileBasedAssetTypes = [
    AssetType.Content, AssetType.Project, AssetType.ProjectBpf, AssetType.Schedule,
    AssetType.HtmlSite, AssetType.BrightScript,
];
Object.freeze(exports.BsAllFileBasedAssetTypes);
function bscGetBscFileTypeInfo(pathOrFileName) {
    var typeInfo = {
        assetType: AssetType.Content,
        mediaType: bscGetFileMediaType(pathOrFileName),
    };
    if (typeInfo.mediaType === metadata_1.MediaType.Auxiliary) {
        var ext = bscGetFileExt(pathOrFileName);
        if (ext === 'bpfx') {
            typeInfo.assetType = AssetType.Project;
        }
        else if (ext === 'bpf') {
            typeInfo.assetType = AssetType.ProjectBpf;
        }
        else if (ext === 'bpsx') {
            typeInfo.assetType = AssetType.Schedule;
        }
        else if (exports.htmlSiteFileSuffixes.has(ext)) {
            typeInfo.assetType = AssetType.HtmlSite;
        }
        else if (ext === 'brs') {
            typeInfo.assetType = AssetType.BrightScript;
        }
        else if (exports.projectFileFragmentSuffixes.has(ext)) {
            typeInfo.assetType = AssetType.ProjectFragment;
            typeInfo.projectFragmentType = bscGetFileProjectFragmentType(pathOrFileName);
        }
        else {
            typeInfo.assetType = AssetType.Content;
        }
    }
    return typeInfo;
}
exports.bscGetBscFileTypeInfo = bscGetBscFileTypeInfo;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IrRemoteModel = void 0;
var IrRemoteModel = (function () {
    function IrRemoteModel() {
    }
    IrRemoteModel.Unknown = 'Unknown';
    IrRemoteModel.RC1001 = 'RC-1001';
    IrRemoteModel.RC1002 = 'RC-1002';
    return IrRemoteModel;
}());
exports.IrRemoteModel = IrRemoteModel;
Object.freeze(IrRemoteModel);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.bscPlayerModelToPlayerMachineName = exports.bscPlayerModelHasFeature = exports.ModelFeature = void 0;
var playerModel_1 = __webpack_require__(3);
var ModelFeature = (function () {
    function ModelFeature() {
    }
    ModelFeature.Gpio = 'gpio';
    ModelFeature.Networking = 'net';
    ModelFeature.SingleAnalogVolumeLimitation = '1audVol';
    ModelFeature.Hdmi = 'hdmi';
    ModelFeature.HdmiEArc = 'hdmiEArc';
    ModelFeature.VideoStreaming = 'vstrm';
    ModelFeature.AudioStreaming = 'astrm';
    ModelFeature.AudioMixer = 'amix';
    ModelFeature.Audio = 'aud';
    ModelFeature.EnhancedAudio = 'enhaud';
    ModelFeature.Images = 'img';
    ModelFeature.Video = 'vid';
    ModelFeature.Clock = 'clk';
    ModelFeature.GraphicsZOrdering = 'grfZ';
    ModelFeature.VideoZOrdering = 'vidZ';
    ModelFeature.Html5 = 'html5';
    ModelFeature.Html5Camera = 'htmlCam';
    ModelFeature.AudioOutputControl = 'aoctl';
    ModelFeature.Spdif = 'spdif';
    ModelFeature.IrOut = 'ir';
    ModelFeature.Usb = 'usb';
    ModelFeature.Bp = 'bp';
    ModelFeature.Serial = 'ser';
    ModelFeature.Blc400 = 'blc400';
    ModelFeature.HdmiIn = 'hdmiIn';
    ModelFeature.EnhancedSynchronization = 'enhsync';
    ModelFeature.Pronto = 'pronto';
    ModelFeature.ScrollingTicker = 'scrlTic';
    ModelFeature.TenBitColor = '10bit';
    ModelFeature.FourKImages = '4kimg';
    ModelFeature.FullResGraphics = 'fullResGfx';
    ModelFeature.FullResGraphicsHiFR = 'fullResGfxHiFR';
    ModelFeature.DualDecoder = '2dec';
    ModelFeature.MosaicMode = 'mosaic';
    ModelFeature.Bluetooth = 'btle';
    ModelFeature.AudioConfiguration = 'acnf';
    ModelFeature.DedicatedIr = 'dedir';
    ModelFeature.DolbyVision = 'dolby';
    ModelFeature.UsbTap = 'usbTap';
    ModelFeature.ButtonsByGpio = 'buttonsByGpio';
    ModelFeature.LightsByGpio = 'lightsByGpio';
    ModelFeature.BroadcomSupport = 'BroadcomSupport';
    ModelFeature.RfTuner = 'tun';
    ModelFeature.AudioDetect = 'auddet';
    ModelFeature.ExternalAudioDetect = 'extAudDet';
    ModelFeature.SingleOnBoardAnalogChannel = '1aud';
    ModelFeature.ThreeOnBoardAnalogChannels = '3aud';
    ModelFeature.UsbAudio = 'usbAud';
    ModelFeature.PumaUsbAudio = 'pumaAud';
    ModelFeature.BoseUsb = 'boseUsb';
    ModelFeature.AudioIn = 'audIn';
    ModelFeature.AudioDownMix = 'audDMix';
    return ModelFeature;
}());
exports.ModelFeature = ModelFeature;
Object.freeze(ModelFeature);
var ImpalaFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.Html5Camera,
    ModelFeature.AudioOutputControl, ModelFeature.Spdif, ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.FourKImages, ModelFeature.MosaicMode, ModelFeature.Bluetooth, ModelFeature.AudioConfiguration,
    ModelFeature.DedicatedIr, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var ImpalaEnterpriseFeatureArray = __spreadArrays(ImpalaFeatureArray, [ModelFeature.Serial, ModelFeature.Usb,
    ModelFeature.UsbTap, ModelFeature.Bp, ModelFeature.Blc400]);
var XD233Features = new Set(ImpalaFeatureArray);
var XT243Features = new Set(__spreadArrays(ImpalaFeatureArray, [ModelFeature.FullResGraphics, ModelFeature.DualDecoder]));
var XD1033Features = new Set(ImpalaEnterpriseFeatureArray);
var XT1143Features = new Set(__spreadArrays(ImpalaEnterpriseFeatureArray, [ModelFeature.HdmiIn, ModelFeature.FullResGraphics, ModelFeature.DualDecoder]));
var MalibuFeatureArray = __spreadArrays(ImpalaFeatureArray, [ModelFeature.DolbyVision]);
var MalibuEnterpriseFeatureArray = __spreadArrays(ImpalaEnterpriseFeatureArray, [ModelFeature.DolbyVision]);
var XD234Features = new Set(MalibuFeatureArray);
var XT244Features = new Set(__spreadArrays(MalibuFeatureArray, [ModelFeature.FullResGraphics,
    ModelFeature.FullResGraphicsHiFR, ModelFeature.DualDecoder]));
var XD1034Features = new Set(MalibuEnterpriseFeatureArray);
var XT1144Features = new Set(__spreadArrays(MalibuEnterpriseFeatureArray, [ModelFeature.HdmiIn, ModelFeature.FullResGraphics, ModelFeature.FullResGraphicsHiFR, ModelFeature.DualDecoder]));
var PaganiFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.Serial, ModelFeature.Usb, ModelFeature.UsbTap, ModelFeature.Bp, ModelFeature.Blc400,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.Bluetooth, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var HD224Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.Html5Camera, ModelFeature.MosaicMode, ModelFeature.Spdif, ModelFeature.DedicatedIr]));
var HS144Features = HD224Features;
var HD1024Features = HD224Features;
var HS124Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.MosaicMode, ModelFeature.Spdif]));
var LS424Features = new Set(__spreadArrays(PaganiFeatureArray, [ModelFeature.Html5Camera]));
var PanteraFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.Bluetooth, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var PanteraAdvancedFeatureArray = [
    ModelFeature.GraphicsZOrdering, ModelFeature.MosaicMode, ModelFeature.Spdif,
];
var PanteraIoFeatureArray = [
    ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.UsbTap, ModelFeature.Blc400, ModelFeature.Pronto,
];
var HD223Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, [ModelFeature.Html5Camera]));
var HD1023Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera]));
var HS123Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray));
var HO523Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraAdvancedFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera, ModelFeature.DedicatedIr]));
var LS423Features = new Set(__spreadArrays(PanteraFeatureArray, PanteraIoFeatureArray, [ModelFeature.Html5Camera]));
var TigerFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.Html5Camera,
    ModelFeature.AudioOutputControl, ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker, ModelFeature.TenBitColor,
    ModelFeature.FourKImages, ModelFeature.MosaicMode, ModelFeature.DualDecoder, ModelFeature.Bluetooth,
    ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var FK242Features = new Set(TigerFeatureArray);
var FK1042Features = new Set(__spreadArrays(TigerFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif]));
var FK1142Features = new Set(__spreadArrays(TigerFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif,
    ModelFeature.HdmiIn]));
var SebringFeatureArray = [
    ModelFeature.Networking,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.AudioStreaming,
    ModelFeature.Audio,
    ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization,
    ModelFeature.Usb,
    ModelFeature.UsbTap,
];
var AU325Features = new Set(__spreadArrays(SebringFeatureArray, [ModelFeature.ButtonsByGpio, ModelFeature.LightsByGpio]));
var AU335Features = new Set(__spreadArrays(SebringFeatureArray, [ModelFeature.Bp, ModelFeature.HdmiEArc, ModelFeature.Gpio, ModelFeature.Serial]));
var LynxFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.IrOut,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker,
    ModelFeature.MosaicMode, ModelFeature.AudioConfiguration, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var XD232Features = new Set(LynxFeatureArray);
var XD1032Features = new Set(__spreadArrays(LynxFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif]));
var XD1132Features = new Set(__spreadArrays(LynxFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif,
    ModelFeature.HdmiIn]));
var BaseBobcatFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.EnhancedSynchronization, ModelFeature.MosaicMode, ModelFeature.BroadcomSupport,
    ModelFeature.EnhancedAudio,
];
var BobcatFeatureArray = __spreadArrays(BaseBobcatFeatureArray, [ModelFeature.ScrollingTicker, ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.AudioConfiguration]);
var BoseBobcatFeatureArray = __spreadArrays(BaseBobcatFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Pronto,
    ModelFeature.IrOut, ModelFeature.Spdif, ModelFeature.BoseUsb, ModelFeature.AudioIn, ModelFeature.PumaUsbAudio,
    ModelFeature.AudioDetect, ModelFeature.ExternalAudioDetect]);
var HD222Features = new Set(BobcatFeatureArray);
var HD1022Features = new Set(__spreadArrays(BobcatFeatureArray, [ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Pronto]));
var HD922Features = new Set(BoseBobcatFeatureArray);
var HD972Features = new Set(__spreadArrays(BoseBobcatFeatureArray, [ModelFeature.ThreeOnBoardAnalogChannels]));
var CheetahFeatureArray = [
    ModelFeature.Networking, ModelFeature.Hdmi,
    ModelFeature.SingleAnalogVolumeLimitation, ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.GraphicsZOrdering, ModelFeature.VideoZOrdering, ModelFeature.Html5, ModelFeature.AudioOutputControl,
    ModelFeature.IrOut, ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.ScrollingTicker,
    ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var XD230Features = new Set(CheetahFeatureArray);
var XD1030Features = new Set(__spreadArrays(CheetahFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif]));
var XD1230Features = new Set(__spreadArrays(CheetahFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif, ModelFeature.RfTuner, ModelFeature.HdmiIn]));
var BasePantherFeatureArray = [
    ModelFeature.SingleAnalogVolumeLimitation,
    ModelFeature.AudioMixer, ModelFeature.Images, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.AudioOutputControl, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var PantherFeatureArray = __spreadArrays(BasePantherFeatureArray, [ModelFeature.Hdmi, ModelFeature.Networking, ModelFeature.Video,
    ModelFeature.VideoStreaming, ModelFeature.AudioStreaming,
    ModelFeature.EnhancedSynchronization,]);
var HD120Features = new Set(__spreadArrays(BasePantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Hdmi, ModelFeature.Video]));
var HD220Features = new Set(PantherFeatureArray);
var HD1020Features = new Set(__spreadArrays(PantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Pronto]));
var LS322Features = new Set(__spreadArrays(BasePantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Networking, ModelFeature.AudioStreaming,
    ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400, ModelFeature.Spdif, ModelFeature.Pronto]));
var LS422Features = new Set(__spreadArrays(PantherFeatureArray, [ModelFeature.Gpio, ModelFeature.Bp, ModelFeature.Usb, ModelFeature.Blc400,
    ModelFeature.Spdif, ModelFeature.Pronto]));
var AU320Features = new Set([
    ModelFeature.Serial, ModelFeature.Networking, ModelFeature.Bp, ModelFeature.SingleAnalogVolumeLimitation,
    ModelFeature.AudioMixer, ModelFeature.AudioOutputControl, ModelFeature.AudioStreaming, ModelFeature.Usb,
    ModelFeature.Pronto
]);
var PumaFeatureArray = [
    ModelFeature.Gpio, ModelFeature.Serial, ModelFeature.Networking, ModelFeature.Hdmi, ModelFeature.Bp,
    ModelFeature.AudioStreaming, ModelFeature.Images, ModelFeature.Video, ModelFeature.Audio, ModelFeature.Clock,
    ModelFeature.Usb, ModelFeature.AudioOutputControl, ModelFeature.BoseUsb, ModelFeature.IrOut,
    ModelFeature.AudioIn, ModelFeature.PumaUsbAudio, ModelFeature.Blc400, ModelFeature.AudioDetect,
    ModelFeature.EnhancedSynchronization, ModelFeature.Pronto, ModelFeature.BroadcomSupport, ModelFeature.EnhancedAudio,
];
var HD917Features = new Set(PumaFeatureArray);
var A915Features = HD917Features;
var HD920Features = new Set(__spreadArrays(PumaFeatureArray, [ModelFeature.VideoStreaming, ModelFeature.Spdif, ModelFeature.ExternalAudioDetect]));
var HD970Features = new Set(__spreadArrays(PumaFeatureArray, [ModelFeature.VideoStreaming, ModelFeature.Spdif, ModelFeature.ExternalAudioDetect,
    ModelFeature.ThreeOnBoardAnalogChannels]));
var FeaturesByPlayerModel = (_a = {},
    _a[playerModel_1.PlayerModel.XD1034] = XD1034Features,
    _a[playerModel_1.PlayerModel.XD234] = XD234Features,
    _a[playerModel_1.PlayerModel.XT1144] = XT1144Features,
    _a[playerModel_1.PlayerModel.XT244] = XT244Features,
    _a[playerModel_1.PlayerModel.HD1024] = HD1024Features,
    _a[playerModel_1.PlayerModel.HD224] = HD224Features,
    _a[playerModel_1.PlayerModel.HS144] = HS144Features,
    _a[playerModel_1.PlayerModel.HS124] = HS124Features,
    _a[playerModel_1.PlayerModel.LS424] = LS424Features,
    _a[playerModel_1.PlayerModel.AU335] = AU335Features,
    _a[playerModel_1.PlayerModel.AU325] = AU325Features,
    _a[playerModel_1.PlayerModel.XD1033] = XD1033Features,
    _a[playerModel_1.PlayerModel.XD233] = XD233Features,
    _a[playerModel_1.PlayerModel.XT1143] = XT1143Features,
    _a[playerModel_1.PlayerModel.XT243] = XT243Features,
    _a[playerModel_1.PlayerModel.HD1023] = HD1023Features,
    _a[playerModel_1.PlayerModel.HD223] = HD223Features,
    _a[playerModel_1.PlayerModel.HS123] = HS123Features,
    _a[playerModel_1.PlayerModel.HO523] = HO523Features,
    _a[playerModel_1.PlayerModel.LS423] = LS423Features,
    _a[playerModel_1.PlayerModel.FK1142] = FK1142Features,
    _a[playerModel_1.PlayerModel.FK1042] = FK1042Features,
    _a[playerModel_1.PlayerModel.FK242] = FK242Features,
    _a[playerModel_1.PlayerModel.XD1132] = XD1132Features,
    _a[playerModel_1.PlayerModel.XD1032] = XD1032Features,
    _a[playerModel_1.PlayerModel.XD232] = XD232Features,
    _a[playerModel_1.PlayerModel.HD1022] = HD1022Features,
    _a[playerModel_1.PlayerModel.HD222] = HD222Features,
    _a[playerModel_1.PlayerModel.HD972] = HD972Features,
    _a[playerModel_1.PlayerModel.HD922] = HD922Features,
    _a[playerModel_1.PlayerModel.XD1230] = XD1230Features,
    _a[playerModel_1.PlayerModel.XD1030] = XD1030Features,
    _a[playerModel_1.PlayerModel.XD230] = XD230Features,
    _a[playerModel_1.PlayerModel.HD1020] = HD1020Features,
    _a[playerModel_1.PlayerModel.HD220] = HD220Features,
    _a[playerModel_1.PlayerModel.HD120] = HD120Features,
    _a[playerModel_1.PlayerModel.LS422] = LS422Features,
    _a[playerModel_1.PlayerModel.LS322] = LS322Features,
    _a[playerModel_1.PlayerModel.AU320] = AU320Features,
    _a[playerModel_1.PlayerModel.HD970] = HD970Features,
    _a[playerModel_1.PlayerModel.HD920] = HD920Features,
    _a[playerModel_1.PlayerModel.HD917] = HD917Features,
    _a[playerModel_1.PlayerModel.A915] = A915Features,
    _a);
function bscPlayerModelHasFeature(model, feature) {
    var featureSet = FeaturesByPlayerModel[model];
    if (featureSet) {
        return featureSet.has(feature);
    }
    return false;
}
exports.bscPlayerModelHasFeature = bscPlayerModelHasFeature;
function bscPlayerModelToPlayerMachineName(model) {
    var name = playerModel_1.bscPlayerModelToPlayerFamily(model);
    if (name === playerModel_1.PlayerFamily.Pagani) {
        if (playerModel_1.PaganiHDModels.has(model)) {
            name = name + ':' + playerModel_1.PlayerMachineNameSuffix.No4K;
        }
    }
    else if (name === playerModel_1.PlayerFamily.Malibu || name === playerModel_1.PlayerFamily.Impala) {
        if (!bscPlayerModelHasFeature(model, ModelFeature.DualDecoder)) {
            name = name + ':' + playerModel_1.PlayerMachineNameSuffix.SingleDecoder;
        }
    }
    return name.toUpperCase();
}
exports.bscPlayerModelToPlayerMachineName = bscPlayerModelToPlayerMachineName;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProbePlayableStatus = exports.ImagePlayableStatus = exports.DecoderName = exports.ProbeContentResolutionType = void 0;
var ProbeContentResolutionType = (function () {
    function ProbeContentResolutionType() {
    }
    ProbeContentResolutionType.NA = 'N/A';
    ProbeContentResolutionType.FK = '4K';
    ProbeContentResolutionType.HD = 'HD';
    ProbeContentResolutionType.SD = 'SD';
    ProbeContentResolutionType.CIF = 'CIF';
    ProbeContentResolutionType.QCIF = 'QCIF';
    return ProbeContentResolutionType;
}());
exports.ProbeContentResolutionType = ProbeContentResolutionType;
Object.freeze(ProbeContentResolutionType);
var DecoderName = (function () {
    function DecoderName() {
    }
    DecoderName.HD1 = 'HD1';
    DecoderName.HD2 = 'HD2';
    DecoderName.FK = '4K';
    DecoderName.FK2 = '4K2';
    return DecoderName;
}());
exports.DecoderName = DecoderName;
Object.freeze(DecoderName);
var ImagePlayableStatus = (function () {
    function ImagePlayableStatus() {
    }
    ImagePlayableStatus.playable = 'playable';
    ImagePlayableStatus.playableSeamlessly = 'playableSeamlessly';
    ImagePlayableStatus.noMedia = 'noMedia';
    ImagePlayableStatus.imageSizeExceeded = 'imageSizeExceeded';
    ImagePlayableStatus.imageSizeUnknown = 'imageSizeUnknown';
    ImagePlayableStatus.imageIsCmyk = 'imageIsCmyk';
    return ImagePlayableStatus;
}());
exports.ImagePlayableStatus = ImagePlayableStatus;
Object.freeze(ImagePlayableStatus);
var ProbePlayableStatus = (function () {
    function ProbePlayableStatus() {
    }
    ProbePlayableStatus.cpPlayable = 0;
    ProbePlayableStatus.cpPlayableSeamlessly = 1;
    ProbePlayableStatus.cpPlayableMax = 99;
    ProbePlayableStatus.cpProbString = 100;
    ProbePlayableStatus.cpContainer = 200;
    ProbePlayableStatus.cpNoMedia = 300;
    ProbePlayableStatus.cpAudioSampleRate = 400;
    ProbePlayableStatus.cpAudioType = 401;
    ProbePlayableStatus.cpAudioChannels = 402;
    ProbePlayableStatus.cpVideoType = 501;
    ProbePlayableStatus.cpVideoResolution = 502;
    ProbePlayableStatus.cpVideoH265 = 503;
    return ProbePlayableStatus;
}());
exports.ProbePlayableStatus = ProbePlayableStatus;
Object.freeze(ProbePlayableStatus);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BsRectFull = exports.bscGetPercentageRectForWidthAndHeight = exports.bscGetPercentageRectForVideoMode = exports.bscGetAbsoluteRectForWidthAndHeight = exports.bscGetAbsoluteRectForVideoMode = exports.bscScaleAbsoluteRect = exports.bscCreateAbsoluteRect = exports.bscCreatePercentageRect = void 0;
var main_1 = __webpack_require__(9);
function bscCreatePercentageRect(x, y, width, height) {
    return { x: x, y: y, width: width, height: height, pct: true };
}
exports.bscCreatePercentageRect = bscCreatePercentageRect;
function bscCreateAbsoluteRect(x, y, width, height) {
    return { x: x, y: y, width: width, height: height, pct: false };
}
exports.bscCreateAbsoluteRect = bscCreateAbsoluteRect;
function bscScaleAbsoluteRect(rect, increase, scaleFactorX, scaleFactorY) {
    var doScale = function (value, scaleFactor) {
        return scaleFactor === 2 ? (increase ? value << 1 : value >> 1) :
            (scaleFactor === 4 ? (increase ? value << 2 : value >> 2) :
                (increase ? Math.round(value * scaleFactor) : Math.round(value / scaleFactor)));
    };
    var scaleY = scaleFactorY ? scaleFactorY : scaleFactorX;
    if (!rect.pct && scaleFactorX > 0) {
        return {
            x: doScale(rect.x, scaleFactorX),
            y: doScale(rect.y, scaleY),
            width: doScale(rect.width, scaleFactorX),
            height: doScale(rect.height, scaleY),
            pct: false,
        };
    }
    return rect;
}
exports.bscScaleAbsoluteRect = bscScaleAbsoluteRect;
function bscGetAbsoluteRectForVideoMode(rect, mode) {
    var _a = main_1.bscParseVideoModeComponents(mode), width = _a.width, height = _a.height;
    return bscGetAbsoluteRectForWidthAndHeight(rect, { width: width, height: height });
}
exports.bscGetAbsoluteRectForVideoMode = bscGetAbsoluteRectForVideoMode;
function bscGetAbsoluteRectForWidthAndHeight(rect, size) {
    var returnRect = rect;
    if (rect.pct) {
        returnRect = bscCreateAbsoluteRect(Math.round(rect.x * size.width / 100), Math.round(rect.y * size.height / 100), Math.round(rect.width * size.width / 100), Math.round(rect.height * size.height / 100));
    }
    return returnRect;
}
exports.bscGetAbsoluteRectForWidthAndHeight = bscGetAbsoluteRectForWidthAndHeight;
function bscGetPercentageRectForVideoMode(rect, mode) {
    var _a = main_1.bscParseVideoModeComponents(mode), width = _a.width, height = _a.height;
    return bscGetPercentageRectForWidthAndHeight(rect, { width: width, height: height });
}
exports.bscGetPercentageRectForVideoMode = bscGetPercentageRectForVideoMode;
function bscGetPercentageRectForWidthAndHeight(rect, size) {
    var returnRect = rect;
    if (!rect.pct) {
        if (!(size.width && size.height)) {
            returnRect = bscCreatePercentageRect(0, 0, 0, 0);
        }
        else {
            returnRect = bscCreatePercentageRect(Math.round(rect.x * 10000 / size.width) / 100, Math.round(rect.y * 10000 / size.height) / 100, Math.round(rect.width * 10000 / size.width) / 100, Math.round(rect.height * 10000 / size.height) / 100);
        }
    }
    return returnRect;
}
exports.bscGetPercentageRectForWidthAndHeight = bscGetPercentageRectForWidthAndHeight;
exports.BsRectFull = { x: 0, y: 0, width: 100, height: 100, pct: true };
Object.freeze(exports.BsRectFull);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(__webpack_require__(1), exports);
__exportStar(__webpack_require__(3), exports);
__exportStar(__webpack_require__(6), exports);
__exportStar(__webpack_require__(17), exports);
__exportStar(__webpack_require__(22), exports);
__exportStar(__webpack_require__(18), exports);
__exportStar(__webpack_require__(8), exports);
__exportStar(__webpack_require__(4), exports);
__exportStar(__webpack_require__(20), exports);
__exportStar(__webpack_require__(7), exports);
__exportStar(__webpack_require__(19), exports);
__exportStar(__webpack_require__(11), exports);
__exportStar(__webpack_require__(10), exports);
__exportStar(__webpack_require__(14), exports);
__exportStar(__webpack_require__(12), exports);
__exportStar(__webpack_require__(13), exports);
__exportStar(__webpack_require__(16), exports);
__exportStar(__webpack_require__(21), exports);
__exportStar(__webpack_require__(5), exports);
__exportStar(__webpack_require__(15), exports);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BDeploySortType = void 0;
var BDeploySortType = (function () {
    function BDeploySortType() {
    }
    BDeploySortType.ASC = 1;
    BDeploySortType.DESC = -1;
    return BDeploySortType;
}());
exports.BDeploySortType = BDeploySortType;
Object.freeze(BDeploySortType);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bscIsTaggedListSpecification = exports.bscCreateTaggedListSpecification = exports.bscIsTagSortSpecification = exports.bscCreateTagSortSpecification = exports.bscIsBsnFilterSpecification = exports.bscCreateBsnFilterSpecification = exports.bscIsValidBsnFilterComponent = exports.bscCreateTagFilterComponent = exports.bscGetBsnFilterTypeForTagDataType = exports.bscCreateFilterComponent = exports.bscIsTimeSpanFilterParam = exports.BsnFilterCombineType = exports.bscGetOperatorListForTagDataType = exports.bscGetOperatorListForFilterType = exports.BsnArrayFilterOperator = exports.BsnBooleanFilterOperator = exports.BsnDateFilterOperator = exports.BsnNumberFilterOperator = exports.BsnStringFilterOperator = exports.BsnTimeUnits = exports.BsnFilterType = exports.bscIsBsnObjectUserPermission = exports.bscCreateBsnObjectUserPermission = exports.bscIsBsnObjectRolePermission = exports.bscCreateBsnObjectRolePermission = exports.BsnObjectPermissionType = exports.BsnPresentationReferenceType = exports.BsnPresentationStatus = exports.BsnPresentationType = exports.BsnTagType = exports.BsnTagDataType = exports.BsnTaggedPlaylistItemStatus = void 0;
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var BsnTaggedPlaylistItemStatus = (function () {
    function BsnTaggedPlaylistItemStatus() {
    }
    BsnTaggedPlaylistItemStatus.Approved = 'Approved';
    BsnTaggedPlaylistItemStatus.PendingAddition = 'PendingAddition';
    BsnTaggedPlaylistItemStatus.PendingDeletion = 'PendingDeletion';
    BsnTaggedPlaylistItemStatus.Pending = 'Pending';
    return BsnTaggedPlaylistItemStatus;
}());
exports.BsnTaggedPlaylistItemStatus = BsnTaggedPlaylistItemStatus;
Object.freeze(BsnTaggedPlaylistItemStatus);
var BsnTagDataType = (function () {
    function BsnTagDataType() {
    }
    BsnTagDataType.String = 'string';
    BsnTagDataType.Number = 'number';
    BsnTagDataType.Boolean = 'boolean';
    BsnTagDataType.DateTime = 'dateTime';
    BsnTagDataType.NumericArray = 'numericArray';
    BsnTagDataType.StringArray = 'stringArray';
    return BsnTagDataType;
}());
exports.BsnTagDataType = BsnTagDataType;
Object.freeze(BsnTagDataType);
var BsnTagType = (function () {
    function BsnTagType() {
    }
    BsnTagType.SystemDevice = '[sys].[Device]';
    BsnTagType.SystemContent = '[sys].[Content]';
    BsnTagType.Device = '[Device]';
    BsnTagType.Content = '[Content]';
    return BsnTagType;
}());
exports.BsnTagType = BsnTagType;
Object.freeze(BsnTagType);
var BsnPresentationType = (function () {
    function BsnPresentationType() {
    }
    BsnPresentationType.Simple = 'Simple';
    BsnPresentationType.Complete = 'Complete';
    return BsnPresentationType;
}());
exports.BsnPresentationType = BsnPresentationType;
Object.freeze(BsnPresentationType);
var BsnPresentationStatus = (function () {
    function BsnPresentationStatus() {
    }
    BsnPresentationStatus.Draft = 'Draft';
    BsnPresentationStatus.Published = 'Published';
    return BsnPresentationStatus;
}());
exports.BsnPresentationStatus = BsnPresentationStatus;
Object.freeze(BsnPresentationStatus);
var BsnPresentationReferenceType = (function () {
    function BsnPresentationReferenceType() {
    }
    BsnPresentationReferenceType.Presentation = 'Presentation';
    BsnPresentationReferenceType.BrightWallPresentation = 'BrightWallPresentation';
    return BsnPresentationReferenceType;
}());
exports.BsnPresentationReferenceType = BsnPresentationReferenceType;
Object.freeze(BsnPresentationReferenceType);
var BsnObjectPermissionType = (function () {
    function BsnObjectPermissionType() {
    }
    BsnObjectPermissionType.Role = 'Role';
    BsnObjectPermissionType.User = 'User';
    return BsnObjectPermissionType;
}());
exports.BsnObjectPermissionType = BsnObjectPermissionType;
Object.freeze(BsnObjectPermissionType);
function bscCreateBsnObjectRolePermission(roleName, operationUid, isAllowed) {
    return {
        type: 'Role',
        roleName: roleName,
        operationUid: operationUid,
        isAllowed: isAllowed,
    };
}
exports.bscCreateBsnObjectRolePermission = bscCreateBsnObjectRolePermission;
function bscIsBsnObjectRolePermission(permission) {
    return !isNil(permission) && permission.type === BsnObjectPermissionType.Role;
}
exports.bscIsBsnObjectRolePermission = bscIsBsnObjectRolePermission;
function bscCreateBsnObjectUserPermission(login, operationUid, isAllowed) {
    return {
        type: 'User',
        login: login,
        operationUid: operationUid,
        isAllowed: isAllowed,
    };
}
exports.bscCreateBsnObjectUserPermission = bscCreateBsnObjectUserPermission;
function bscIsBsnObjectUserPermission(permission) {
    return !isNil(permission) && permission.type === BsnObjectPermissionType.User;
}
exports.bscIsBsnObjectUserPermission = bscIsBsnObjectUserPermission;
var BsnFilterType = (function () {
    function BsnFilterType() {
    }
    BsnFilterType.string = 'string';
    BsnFilterType.enum = 'enum';
    BsnFilterType.number = 'number';
    BsnFilterType.dateTime = 'dateTime';
    BsnFilterType.boolean = 'boolean';
    BsnFilterType.stringArray = 'stringArray';
    BsnFilterType.numericArray = 'numericArray';
    return BsnFilterType;
}());
exports.BsnFilterType = BsnFilterType;
Object.freeze(BsnFilterType);
var BsnTimeUnits = (function () {
    function BsnTimeUnits() {
    }
    BsnTimeUnits.years = 'years';
    BsnTimeUnits.months = 'months';
    BsnTimeUnits.days = 'days';
    return BsnTimeUnits;
}());
exports.BsnTimeUnits = BsnTimeUnits;
var BsnStringFilterOperator = (function () {
    function BsnStringFilterOperator() {
    }
    BsnStringFilterOperator.Is = 'IS';
    BsnStringFilterOperator.IsNot = 'IS NOT';
    BsnStringFilterOperator.BeginsWith = 'BEGINS WITH';
    BsnStringFilterOperator.EndsWith = 'ENDS WITH';
    BsnStringFilterOperator.Contains = 'CONTAINS';
    BsnStringFilterOperator.ContainsAll = 'CONTAINS ALL';
    BsnStringFilterOperator.ContainsAny = 'CONTAINS ANY';
    BsnStringFilterOperator.DoesNotContain = 'DOES NOT CONTAIN';
    BsnStringFilterOperator.IsIn = 'IS IN';
    BsnStringFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnStringFilterOperator;
}());
exports.BsnStringFilterOperator = BsnStringFilterOperator;
Object.freeze(BsnStringFilterOperator);
var BsnNumberFilterOperator = (function () {
    function BsnNumberFilterOperator() {
    }
    BsnNumberFilterOperator.Is = 'IS';
    BsnNumberFilterOperator.IsNot = 'IS NOT';
    BsnNumberFilterOperator.IsGreaterThan = 'IS GREATER THAN';
    BsnNumberFilterOperator.IsLessThan = 'IS LESS THAN';
    BsnNumberFilterOperator.IsInTheRange = 'IS IN THE RANGE';
    BsnNumberFilterOperator.IsNotInTheRange = 'IS NOT IN THE RANGE';
    BsnNumberFilterOperator.IsIn = 'IS IN';
    BsnNumberFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnNumberFilterOperator;
}());
exports.BsnNumberFilterOperator = BsnNumberFilterOperator;
Object.freeze(BsnNumberFilterOperator);
var BsnDateFilterOperator = (function () {
    function BsnDateFilterOperator() {
    }
    BsnDateFilterOperator.Is = 'IS';
    BsnDateFilterOperator.IsNot = 'IS NOT';
    BsnDateFilterOperator.IsAfter = 'IS AFTER';
    BsnDateFilterOperator.IsBefore = 'IS BEFORE';
    BsnDateFilterOperator.InTheLast = 'IN THE LAST';
    BsnDateFilterOperator.NotInTheLast = 'NOT IN THE LAST';
    BsnDateFilterOperator.IsInTheRange = 'IS IN THE RANGE';
    BsnDateFilterOperator.IsNotInTheRange = 'IS NOT IN THE RANGE';
    BsnDateFilterOperator.IsIn = 'IS IN';
    BsnDateFilterOperator.IsNotIn = 'IS NOT IN';
    return BsnDateFilterOperator;
}());
exports.BsnDateFilterOperator = BsnDateFilterOperator;
Object.freeze(BsnDateFilterOperator);
var BsnBooleanFilterOperator = (function () {
    function BsnBooleanFilterOperator() {
    }
    BsnBooleanFilterOperator.Is = 'IS';
    return BsnBooleanFilterOperator;
}());
exports.BsnBooleanFilterOperator = BsnBooleanFilterOperator;
Object.freeze(BsnBooleanFilterOperator);
var BsnArrayFilterOperator = (function () {
    function BsnArrayFilterOperator() {
    }
    BsnArrayFilterOperator.Contains = 'CONTAINS';
    BsnArrayFilterOperator.ContainsAll = 'CONTAINS ALL';
    BsnArrayFilterOperator.ContainsAny = 'CONTAINS ANY';
    return BsnArrayFilterOperator;
}());
exports.BsnArrayFilterOperator = BsnArrayFilterOperator;
Object.freeze(BsnArrayFilterOperator);
var commonFilterOperators = [
    BsnStringFilterOperator.Is, BsnStringFilterOperator.IsNot,
    BsnStringFilterOperator.IsIn, BsnStringFilterOperator.IsNotIn,
];
var stringFilterOperators = __spreadArrays(commonFilterOperators, [BsnStringFilterOperator.BeginsWith, BsnStringFilterOperator.EndsWith,
    BsnStringFilterOperator.Contains, BsnStringFilterOperator.ContainsAll, BsnStringFilterOperator.ContainsAny,]);
var numberFilterOperators = __spreadArrays(commonFilterOperators, [BsnNumberFilterOperator.IsGreaterThan, BsnNumberFilterOperator.IsLessThan,
    BsnNumberFilterOperator.IsInTheRange, BsnNumberFilterOperator.IsNotInTheRange,]);
var dateTimeFilterOperators = __spreadArrays(commonFilterOperators, [BsnDateFilterOperator.IsAfter, BsnDateFilterOperator.IsBefore,
    BsnDateFilterOperator.InTheLast, BsnDateFilterOperator.NotInTheLast,
    BsnDateFilterOperator.IsInTheRange, BsnDateFilterOperator.IsNotInTheRange,]);
var arrayFilterOperators = [
    BsnArrayFilterOperator.Contains, BsnArrayFilterOperator.ContainsAll, BsnArrayFilterOperator.ContainsAny,
];
function bscGetOperatorListForFilterType(type) {
    switch (type) {
        default:
        case BsnFilterType.string:
        case BsnFilterType.enum:
            return stringFilterOperators;
        case BsnFilterType.number:
            return numberFilterOperators;
        case BsnFilterType.dateTime:
            return dateTimeFilterOperators;
        case BsnFilterType.boolean:
            return [BsnBooleanFilterOperator.Is];
        case BsnFilterType.stringArray:
        case BsnFilterType.numericArray:
            return arrayFilterOperators;
    }
}
exports.bscGetOperatorListForFilterType = bscGetOperatorListForFilterType;
function bscGetOperatorListForTagDataType(dataType) {
    switch (dataType) {
        default:
        case BsnTagDataType.String:
            return stringFilterOperators;
        case BsnTagDataType.Number:
            return numberFilterOperators;
        case BsnTagDataType.DateTime:
            return dateTimeFilterOperators;
        case BsnTagDataType.Boolean:
            return [BsnBooleanFilterOperator.Is];
        case BsnTagDataType.StringArray:
        case BsnTagDataType.NumericArray:
            return arrayFilterOperators;
    }
}
exports.bscGetOperatorListForTagDataType = bscGetOperatorListForTagDataType;
var BsnFilterCombineType = (function () {
    function BsnFilterCombineType() {
    }
    BsnFilterCombineType.All = 'AND';
    BsnFilterCombineType.Any = 'OR';
    return BsnFilterCombineType;
}());
exports.BsnFilterCombineType = BsnFilterCombineType;
Object.freeze(BsnFilterCombineType);
function bscIsTimeSpanFilterParam(param) {
    return !isNil(param)
        && typeof param === 'object'
        && param.hasOwnProperty('units')
        && param.hasOwnProperty('length')
        && param.hasOwnProperty('dateTime');
}
exports.bscIsTimeSpanFilterParam = bscIsTimeSpanFilterParam;
function bscCreateFilterComponent(type, property, operator, values) {
    var getBoolValue = function (val) {
        if (isString(val)) {
            return val.length > 0 && val[0].toUpperCase() === 'T' ? 'TRUE' : 'FALSE';
        }
        else {
            return Boolean(val) ? 'TRUE' : 'FALSE';
        }
    };
    var params;
    if (Array.isArray(values)) {
        if (type === BsnFilterType.boolean) {
            params = [getBoolValue(values[0])];
        }
        else {
            params = values;
        }
    }
    else {
        switch (type) {
            default:
            case BsnFilterType.boolean:
                params = [getBoolValue(values)];
                break;
            case BsnFilterType.enum:
            case BsnFilterType.stringArray:
            case BsnFilterType.string:
                params = [values];
                break;
            case BsnFilterType.numericArray:
            case BsnFilterType.number:
                params = [values];
                break;
            case BsnFilterType.dateTime: {
                if (operator === BsnDateFilterOperator.InTheLast || operator === BsnDateFilterOperator.NotInTheLast) {
                    if (bscIsTimeSpanFilterParam(values)) {
                        params = __assign({}, values);
                    }
                    else {
                        params = { units: BsnTimeUnits.days, length: 0, dateTime: new Date(0) };
                    }
                }
                else {
                    params = [values];
                }
                break;
            }
        }
    }
    return { type: type, property: property, operator: operator, params: params };
}
exports.bscCreateFilterComponent = bscCreateFilterComponent;
function bscGetBsnFilterTypeForTagDataType(dataType) {
    switch (dataType) {
        default:
        case BsnTagDataType.String:
            return BsnFilterType.string;
        case BsnTagDataType.Number:
            return BsnFilterType.number;
        case BsnTagDataType.DateTime:
            return BsnFilterType.dateTime;
        case BsnTagDataType.Boolean:
            return BsnFilterType.boolean;
        case BsnTagDataType.StringArray:
            return BsnFilterType.stringArray;
        case BsnTagDataType.NumericArray:
            return BsnFilterType.numericArray;
    }
}
exports.bscGetBsnFilterTypeForTagDataType = bscGetBsnFilterTypeForTagDataType;
function bscCreateTagFilterComponent(tagKey, operator, values) {
    var validOperators = bscGetOperatorListForTagDataType(tagKey.dataType);
    if (validOperators.indexOf(operator) >= 0) {
        var type = bscGetBsnFilterTypeForTagDataType(tagKey.dataType);
        return bscCreateFilterComponent(type, tagKey.name, operator, values);
    }
    return null;
}
exports.bscCreateTagFilterComponent = bscCreateTagFilterComponent;
function bscIsValidBsnFilterComponent(comp) {
    var isNumberArray = function (array) {
        return Array.isArray(array) && !array.some(function (el) { return typeof el !== 'number'; });
    };
    var isStringArray = function (array) {
        return Array.isArray(array) && !array.some(function (el) { return !isString(el); });
    };
    var ops = bscGetOperatorListForFilterType(comp.type);
    if (ops.indexOf(comp.operator) >= 0) {
        switch (comp.type) {
            case BsnFilterType.string:
            case BsnFilterType.enum:
                return isStringArray(comp.params);
            case BsnFilterType.stringArray:
                return isStringArray(comp.params) && comp.params.length <= 10;
            case BsnFilterType.number:
                return isNumberArray(comp.params);
            case BsnFilterType.numericArray:
                return isNumberArray(comp.params) && comp.params.length <= 10;
            case BsnFilterType.dateTime:
                if (comp.operator === BsnDateFilterOperator.InTheLast || comp.operator === BsnDateFilterOperator.NotInTheLast) {
                    return bscIsTimeSpanFilterParam(comp.params);
                }
                return Array.isArray(comp.params) && !comp.params.some(function (el) { return !(el instanceof Date); });
            case BsnFilterType.boolean:
                return Array.isArray(comp.params) && (comp.params[0] === 'TRUE' || comp.params[0] === 'FALSE');
        }
    }
    return false;
}
exports.bscIsValidBsnFilterComponent = bscIsValidBsnFilterComponent;
function bscCreateBsnFilterSpecification(components, combineType) {
    if (combineType === void 0) { combineType = BsnFilterCombineType.All; }
    return {
        components: Array.isArray(components) ? components : [components],
        combineType: combineType,
    };
}
exports.bscCreateBsnFilterSpecification = bscCreateBsnFilterSpecification;
function bscIsBsnFilterSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('components')
        && Array.isArray(value.components)
        && value.hasOwnProperty('combineType');
}
exports.bscIsBsnFilterSpecification = bscIsBsnFilterSpecification;
function bscCreateTagSortSpecification(sortTagName, sortDescending) {
    if (sortTagName === void 0) { sortTagName = null; }
    if (sortDescending === void 0) { sortDescending = false; }
    return { sortTagName: sortTagName, sortDescending: sortDescending };
}
exports.bscCreateTagSortSpecification = bscCreateTagSortSpecification;
function bscIsTagSortSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('sortTagName')
        && value.hasOwnProperty('sortDescending');
}
exports.bscIsTagSortSpecification = bscIsTagSortSpecification;
function bscCreateTaggedListSpecification(filterSpec, sortTagName, sortDescending) {
    if (sortTagName === void 0) { sortTagName = null; }
    if (sortDescending === void 0) { sortDescending = false; }
    return { filterSpec: filterSpec, sortTagName: sortTagName, sortDescending: sortDescending };
}
exports.bscCreateTaggedListSpecification = bscCreateTaggedListSpecification;
function bscIsTaggedListSpecification(value) {
    return !isNil(value)
        && typeof value === 'object'
        && value.hasOwnProperty('filterSpec')
        && (value.filterSpec === null || bscIsBsnFilterSpecification(value.filterSpec))
        && value.hasOwnProperty('sortTagName')
        && value.hasOwnProperty('sortDescending');
}
exports.bscIsTaggedListSpecification = bscIsTaggedListSpecification;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceSetupProperties = exports.BsDsLwsConfiguration = exports.TimeZone = exports.UnitNamingMethod = exports.DeviceNetworkingConfiguration = void 0;
var DeviceNetworkingConfiguration = (function () {
    function DeviceNetworkingConfiguration() {
    }
    DeviceNetworkingConfiguration.Standalone = 'standalone';
    DeviceNetworkingConfiguration.LocalFileNetworking = 'lfn';
    DeviceNetworkingConfiguration.LegacyLocalFileNetworking = 'legacyLfn';
    DeviceNetworkingConfiguration.SimpleFileNetworking = 'sfn';
    DeviceNetworkingConfiguration.BrightSignNetworking = 'bsn';
    DeviceNetworkingConfiguration.LocalToBrightSignNetworking = 'localToBsn';
    DeviceNetworkingConfiguration.PartnerApplication = 'partnerApplication';
    return DeviceNetworkingConfiguration;
}());
exports.DeviceNetworkingConfiguration = DeviceNetworkingConfiguration;
Object.freeze(DeviceNetworkingConfiguration);
var UnitNamingMethod = (function () {
    function UnitNamingMethod() {
    }
    UnitNamingMethod.UnitNameOnly = 'unitNameOnly';
    UnitNamingMethod.AppendUnitId = 'appendUnitIDToUnitName';
    return UnitNamingMethod;
}());
exports.UnitNamingMethod = UnitNamingMethod;
Object.freeze(UnitNamingMethod);
var TimeZone = (function () {
    function TimeZone() {
    }
    TimeZone.EST = 'EST';
    TimeZone.PST = 'PST';
    TimeZone.CST = 'CST';
    TimeZone.JST = 'JST';
    TimeZone.MST = 'MST';
    TimeZone.GMTBST = 'GMTBST';
    TimeZone.WET = 'WET';
    TimeZone.CET = 'CET';
    TimeZone.EET = 'EET';
    TimeZone.MSK = 'MSK';
    TimeZone.AWST = 'AWST';
    TimeZone.AWST1 = 'AWST1';
    TimeZone.ACST = 'ACST';
    TimeZone.ACST1 = 'ACST1';
    TimeZone.AEST = 'AEST';
    TimeZone.AEST1 = 'AEST1';
    TimeZone.NFT = 'NFT';
    TimeZone.NZST = 'NZST';
    TimeZone.GMT = 'GMT';
    TimeZone.AKST = 'AKST';
    TimeZone.HST = 'HST';
    TimeZone.HST1 = 'HST1';
    TimeZone.MST1 = 'MST1';
    TimeZone.EST1 = 'EST1';
    TimeZone.AST = 'AST';
    TimeZone.CST2 = 'CST2';
    TimeZone.MST2 = 'MST2';
    TimeZone.PST2 = 'PST2';
    TimeZone.BRT = 'BRT';
    TimeZone.NST = 'NST';
    TimeZone.AZOT = 'AZOT';
    TimeZone.SAMT = 'SAMT';
    TimeZone.YEKT = 'YEKT';
    TimeZone.IST = 'IST';
    TimeZone.NPT = 'NPT';
    TimeZone.OMST = 'OMST';
    TimeZone.CXT = 'CXT';
    TimeZone.GMTMINUSONE = 'GMT-1';
    TimeZone.GMTMINUSTWO = 'GMT-2';
    TimeZone.GMTMINUSTHREE = 'GMT-3';
    TimeZone.GMTMINUSFOUR = 'GMT-4';
    TimeZone.GMTMINUSFIVE = 'GMT-5';
    TimeZone.GMTMINUSSIX = 'GMT-6';
    TimeZone.GMTMINUSSEVEN = 'GMT-7';
    TimeZone.GMTMINUSEIGHT = 'GMT-8';
    TimeZone.GMTMINUSNINE = 'GMT-9';
    TimeZone.GMTMINUSTEN = 'GMT-10';
    TimeZone.GMTMINUSELEVEN = 'GMT-11';
    TimeZone.GMTMINUSTWELEVE = 'GMT-12';
    TimeZone.GMTMINUSTHIRTEEN = 'GMT-13';
    TimeZone.GMTMINUSFOURTEEN = 'GMT-14';
    TimeZone.GMTPLUSONE = 'GMT+1';
    TimeZone.GMTPLUSTWO = 'GMT+2';
    TimeZone.GMTPLUSTHREE = 'GMT+3';
    TimeZone.GMTPLUSFOUR = 'GMT+4';
    TimeZone.GMTPLUSFIVE = 'GMT+5';
    TimeZone.GMTPLUSSIX = 'GMT+6';
    TimeZone.GMTPLUSSEVEN = 'GMT+7';
    TimeZone.GMTPLUSEIGHT = 'GMT+8';
    TimeZone.GMTPLUSNINE = 'GMT+9';
    TimeZone.GMTPLUSNINEHALF = 'GMT+9:30';
    TimeZone.GMTPLUSTEN = 'GMT+10';
    TimeZone.GMTPLUSELEVEN = 'GMT+11';
    TimeZone.GMTPLUSTWELEVE = 'GMT+12';
    TimeZone.GMTPLUSTHIRTEEN = 'GMT+13';
    TimeZone.GMTPLUSFOURTEEN = 'GMT+14';
    return TimeZone;
}());
exports.TimeZone = TimeZone;
Object.freeze(TimeZone);
var BsDsLwsConfiguration = (function () {
    function BsDsLwsConfiguration() {
    }
    BsDsLwsConfiguration.Content = 'content';
    BsDsLwsConfiguration.Status = 'status';
    BsDsLwsConfiguration.None = 'none';
    return BsDsLwsConfiguration;
}());
exports.BsDsLwsConfiguration = BsDsLwsConfiguration;
Object.freeze(BsDsLwsConfiguration);
var DeviceSetupProperties = (function () {
    function DeviceSetupProperties() {
    }
    DeviceSetupProperties.DeviceName = 'deviceName';
    DeviceSetupProperties.DeviceDescription = 'deviceDescription';
    DeviceSetupProperties.UnitNamingMethod = 'unitNamingMethod';
    DeviceSetupProperties.TimeZone = 'timeZone';
    DeviceSetupProperties.IdleScreenColor = 'idleScreenColor';
    DeviceSetupProperties.SetupType = 'setupType';
    DeviceSetupProperties.BsnDeviceRegistrationTokenEntity = 'bsnDeviceRegistrationTokenEntity';
    DeviceSetupProperties.BDeploy = 'bDeploy';
    DeviceSetupProperties.BsnGroupName = 'bsnGroupName';
    DeviceSetupProperties.TimeBetweenContentChecks = 'timeBetweenNetConnects';
    DeviceSetupProperties.TimeBetweenHeartbeats = 'timeBetweenHeartbeats';
    DeviceSetupProperties.SfnWebFolderUrl = 'sfnWebFolderUrl';
    DeviceSetupProperties.SfnUserName = 'sfnUserName';
    DeviceSetupProperties.SfnPassword = 'sfnPassword';
    DeviceSetupProperties.SfnEnableBasicAuthentication = 'sfnEnableBasicAuthentication';
    DeviceSetupProperties.TimeServer = 'timeServer';
    DeviceSetupProperties.UseWireless = 'useWireless';
    DeviceSetupProperties.SSID = 'ssid';
    DeviceSetupProperties.Passphrase = 'passphrase';
    DeviceSetupProperties.RemoteDwsEnabled = 'remoteDwsEnabled';
    DeviceSetupProperties.DwsEnabled = 'dwsEnabled';
    DeviceSetupProperties.DwsPassword = 'dwsPassword';
    DeviceSetupProperties.LwsEnabled = 'lwsEnabled';
    DeviceSetupProperties.LwsUserName = 'lwsUserName';
    DeviceSetupProperties.LwsPassword = 'lwsPassword';
    DeviceSetupProperties.LwsEnableUpdateNotifications = 'lwsEnableUpdateNotifications';
    DeviceSetupProperties.LwsConfig = 'lwsConfig';
    DeviceSetupProperties.BsnCloudEnabled = 'bsnCloudEnabled';
    DeviceSetupProperties.PlaybackLoggingEnabled = 'playbackLoggingEnabled';
    DeviceSetupProperties.EventLoggingEnabled = 'eventLoggingEnabled';
    DeviceSetupProperties.DiagnosticLoggingEnabled = 'diagnosticLoggingEnabled';
    DeviceSetupProperties.StateLoggingEnabled = 'stateLoggingEnabled';
    DeviceSetupProperties.VariableLoggingEnabled = 'variableLoggingEnabled';
    DeviceSetupProperties.UploadLogFilesAtBoot = 'uploadLogFilesAtBoot';
    DeviceSetupProperties.UploadLogFilesAtSpecificTime = 'uploadLogFilesAtSpecificTime';
    DeviceSetupProperties.UploadLogFilesTime = 'uploadLogFilesTime';
    DeviceSetupProperties.LogHandlerUrl = 'logHandlerUrl';
    DeviceSetupProperties.EnableRemoteSnapshot = 'enableRemoteSnapshot';
    DeviceSetupProperties.RemoteSnapshotInterval = 'remoteSnapshotInterval';
    DeviceSetupProperties.RemoteSnapshotMaxImages = 'remoteSnapshotMaxImages';
    DeviceSetupProperties.RemoteSnapshotJpegQualityLevel = 'remoteSnapshotJpegQualityLevel';
    DeviceSetupProperties.RemoteSnapshotScreenOrientation = 'remoteSnapshotScreenOrientation';
    DeviceSetupProperties.RemoteSnapshotHandlerUrl = 'remoteSnapshotHandlerUrl';
    DeviceSetupProperties.EnableSerialDebugging = 'enableSerialDebugging';
    DeviceSetupProperties.EnableSystemLogDebugging = 'enableSystemLogDebugging';
    DeviceSetupProperties.ContentDataTypeEnabledWired = 'contentDataTypeEnabledWired';
    DeviceSetupProperties.TextFeedsDataTypeEnabledWired = 'textFeedsDataTypeEnabledWired';
    DeviceSetupProperties.HealthDataTypeEnabledWired = 'healthDataTypeEnabledWired';
    DeviceSetupProperties.MediaFeedsDataTypeEnabledWired = 'mediaFeedsDataTypeEnabledWired';
    DeviceSetupProperties.LogUploadsXfersEnabledWired = 'logUploadsXfersEnabledWired';
    DeviceSetupProperties.ContentDataTypeEnabledWireless = 'contentDataTypeEnabledWireless';
    DeviceSetupProperties.TextFeedsDataTypeEnabledWireless = 'textFeedsDataTypeEnabledWireless';
    DeviceSetupProperties.HealthDataTypeEnabledWireless = 'healthDataTypeEnabledWireless';
    DeviceSetupProperties.MediaFeedsDataTypeEnabledWireless = 'mediaFeedsDataTypeEnabledWireless';
    DeviceSetupProperties.LogUploadsXfersEnabledWireless = 'logUploadsXfersEnabledWireless';
    DeviceSetupProperties.UseDhcp = 'useDHCP';
    DeviceSetupProperties.StaticIpAddress = 'staticIPAddress';
    DeviceSetupProperties.SubnetMask = 'subnetMask';
    DeviceSetupProperties.Gateway = 'gateway';
    DeviceSetupProperties.Dns1 = 'dns1';
    DeviceSetupProperties.Dns2 = 'dns2';
    DeviceSetupProperties.Dns3 = 'dns3';
    DeviceSetupProperties.RateLimitModeOutsideWindow = 'rateLimitModeOutsideWindow';
    DeviceSetupProperties.RateLimitRateOutsideWindow = 'rateLimitRateOutsideWindow';
    DeviceSetupProperties.RateLimitModeInWindow = 'rateLimitModeInWindow';
    DeviceSetupProperties.RateLimitRateInWindow = 'rateLimitRateInWindow';
    DeviceSetupProperties.RateLimitModeInitialDownloads = 'rateLimitModeInitialDownloads';
    DeviceSetupProperties.RateLimitRateInitialDownloads = 'rateLimitRateInitialDownloads';
    DeviceSetupProperties.UseDhcp2 = 'useDHCP_2';
    DeviceSetupProperties.StaticIpAddress2 = 'staticIPAddress_2';
    DeviceSetupProperties.SubnetMask2 = 'subnetMask_2';
    DeviceSetupProperties.Gateway2 = 'gateway_2';
    DeviceSetupProperties.Dns12 = 'dns1_2';
    DeviceSetupProperties.Dns22 = 'dns2_2';
    DeviceSetupProperties.Dns32 = 'dns3_2';
    DeviceSetupProperties.RateLimitModeOutsideWindow2 = 'rateLimitModeOutsideWindow_2';
    DeviceSetupProperties.RateLimitRateOutsideWindow2 = 'rateLimitRateOutsideWindow_2';
    DeviceSetupProperties.RateLimitModeInWindow2 = 'rateLimitModeInWindow_2';
    DeviceSetupProperties.RateLimitRateInWindow2 = 'rateLimitRateInWindow_2';
    DeviceSetupProperties.RateLimitModeInitialDownloads2 = 'rateLimitModeInitialDownloads_2';
    DeviceSetupProperties.RateLimitRateInitialDownloads2 = 'rateLimitRateInitialDownloads_2';
    DeviceSetupProperties.NetworkConnectionPriority = 'networkConnectionPriority';
    DeviceSetupProperties.SpecifyHostname = 'specifyHostname';
    DeviceSetupProperties.Hostname = 'hostname';
    DeviceSetupProperties.UseProxy = 'useProxy';
    DeviceSetupProperties.ProxyAddress = 'proxyAddress';
    DeviceSetupProperties.ProxyPort = 'proxyPort';
    DeviceSetupProperties.NetworkHosts = 'networkHosts';
    DeviceSetupProperties.NetworkDiagnosticsEnabled = 'networkDiagnosticsEnabled';
    DeviceSetupProperties.TestEthernetEnabled = 'testEthernetEnabled';
    DeviceSetupProperties.TestWirelessEnabled = 'testWirelessEnabled';
    DeviceSetupProperties.TestInternetEnabled = 'testInternetEnabled';
    DeviceSetupProperties.UseCustomSplashScreen = 'useCustomSplashScreen';
    DeviceSetupProperties.ContentDownloadsRestricted = 'contentDownloadsRestricted';
    DeviceSetupProperties.ContentDownloadRangeStart = 'contentDownloadRangeStart';
    DeviceSetupProperties.ContentDownloadRangeEnd = 'contentDownloadRangeEnd';
    DeviceSetupProperties.HeartbeatsRestricted = 'heartbeatsRestricted';
    DeviceSetupProperties.HeartbeatsRangeStart = 'heartbeatsRangeStart';
    DeviceSetupProperties.HeartbeatsRangeEnd = 'heartbeatsRangeEnd';
    DeviceSetupProperties.BrightWallNameKey = 'BrightWallName';
    DeviceSetupProperties.BrightWallScreenNumberKey = 'BrightWallScreenNumber';
    DeviceSetupProperties.UsbUpdatePassword = 'usbUpdatePassword';
    DeviceSetupProperties.EnablePhysicalLan = 'enablePhysicalLan';
    DeviceSetupProperties.Vlans = 'vlans';
    DeviceSetupProperties.InheritNetworkProperties = 'inheritNetworkProperties';
    DeviceSetupProperties.InternalCaArtifacts = 'internalCaArtifacts';
    return DeviceSetupProperties;
}());
exports.DeviceSetupProperties = DeviceSetupProperties;
Object.freeze(DeviceSetupProperties);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscValidateSerialNumber = void 0;
var isString = __webpack_require__(2);
var isNil = __webpack_require__(0);
var isNaN = __webpack_require__(23);
var convertFromBase31 = function (codePoint) {
    codePoint = codePoint % 31;
    if (codePoint < 10) {
        return String.fromCharCode(codePoint + 48);
    }
    if (codePoint === 10) {
        return 'A';
    }
    if (codePoint >= 11 && codePoint <= 16) {
        return String.fromCharCode(codePoint + 67 - 11);
    }
    if (codePoint >= 17 && codePoint <= 21) {
        return String.fromCharCode(codePoint + 74 - 17);
    }
    if (codePoint === 22) {
        return 'P';
    }
    if (codePoint >= 23 && codePoint <= 830) {
        return String.fromCharCode(codePoint + 82 - 23);
    }
    return null;
};
var convertToBase31 = function (infoUC, index) {
    if (isNil(index)) {
        index = 0;
    }
    var charVal = infoUC.charCodeAt(index);
    if (charVal >= 48 && charVal <= 57) {
        return charVal - 48;
    }
    if (charVal === 65) {
        return 10;
    }
    if (charVal >= 67 && charVal <= 72) {
        return charVal - 67 + 11;
    }
    if (charVal >= 74 && charVal <= 78) {
        return charVal - 74 + 17;
    }
    if (charVal === 80) {
        return 22;
    }
    if (charVal >= 82 && charVal <= 89) {
        return charVal - 82 + 23;
    }
    return NaN;
};
var getCheckChar = function (infoUC) {
    var i;
    var x;
    var valArray = [];
    for (i = 0; i < 12; i++) {
        x = convertToBase31(infoUC, i);
        if (isNaN(x)) {
            return null;
        }
        if (i !== 5) {
            valArray.push(x);
        }
    }
    for (i = 0; i < 11; i += 2) {
        x = valArray[i] * 2;
        if (x > 30) {
            x = (x % 31) + 1;
        }
        valArray[i] = x;
    }
    var sum = valArray.reduce(function (previousValue, currentValue) {
        return currentValue + previousValue;
    });
    return convertFromBase31(31 - sum % 31);
};
function bscValidateSerialNumber(serial) {
    if (!isString(serial)) {
        return false;
    }
    if (serial.length !== 12) {
        return false;
    }
    var upperCaseInfo = serial.toUpperCase();
    var checkChar = getCheckChar(upperCaseInfo);
    if (checkChar !== upperCaseInfo.charAt(5)) {
        return false;
    }
    return true;
}
exports.bscValidateSerialNumber = bscValidateSerialNumber;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscCreatePublishFirmware = exports.bscGetFirmwareSourceUrl = exports.bscGetFirmwareFileName = exports.bscGetFirmwareUpdateTargetFileName = exports.FirmwareUpdateType = exports.FirmwareUpdateSource = void 0;
var isNil = __webpack_require__(0);
var FirmwareUpdateSource = (function () {
    function FirmwareUpdateSource() {
    }
    FirmwareUpdateSource.Production = 'production';
    FirmwareUpdateSource.Beta = 'beta';
    FirmwareUpdateSource.MinimumCompatible = 'compatible';
    FirmwareUpdateSource.SpecificFile = 'specific';
    FirmwareUpdateSource.SpecificUrl = 'specificUrl';
    FirmwareUpdateSource.None = 'none';
    FirmwareUpdateSource.Existing = 'existing';
    return FirmwareUpdateSource;
}());
exports.FirmwareUpdateSource = FirmwareUpdateSource;
Object.freeze(FirmwareUpdateSource);
var FirmwareUpdateType = (function () {
    function FirmwareUpdateType() {
    }
    FirmwareUpdateType.Standard = 'standard';
    FirmwareUpdateType.Different = 'different';
    FirmwareUpdateType.Newer = 'newer';
    FirmwareUpdateType.Save = 'save';
    return FirmwareUpdateType;
}());
exports.FirmwareUpdateType = FirmwareUpdateType;
Object.freeze(FirmwareUpdateType);
function bscGetFirmwareUpdateTargetFileName(firmWare, firmwareUpdateType) {
    switch (firmwareUpdateType) {
        case FirmwareUpdateType.Different:
            return firmWare.firmwareUpdateDifferentTargetFileName;
        case FirmwareUpdateType.Newer:
            return firmWare.firmwareUpdateNewerTargetFileName;
        case FirmwareUpdateType.Save:
            return firmWare.firmwareUpdateSaveTargetFileName;
        case FirmwareUpdateType.Standard:
        default:
            return firmWare.firmwareUpdateStandardTargetFileName;
    }
}
exports.bscGetFirmwareUpdateTargetFileName = bscGetFirmwareUpdateTargetFileName;
function bscGetFirmwareFileName(firmWare, firmwareUpdateType) {
    switch (firmwareUpdateType) {
        case FirmwareUpdateType.Different:
            return firmWare.firmwareUpdateDifferentTargetFileName;
        case FirmwareUpdateType.Newer:
            return firmWare.firmwareUpdateNewerTargetFileName;
        case FirmwareUpdateType.Save:
            return firmWare.firmwareUpdateSaveTargetFileName;
        case FirmwareUpdateType.Standard:
        default:
            return firmWare.firmwareUpdateStandardTargetFileName;
    }
}
exports.bscGetFirmwareFileName = bscGetFirmwareFileName;
function bscGetFirmwareSourceUrl(firmWare) {
    switch (firmWare.firmwareUpdateSource) {
        case FirmwareUpdateSource.Production:
        default: {
            return firmWare.productionReleaseURL;
        }
        case FirmwareUpdateSource.Beta: {
            return firmWare.betaReleaseURL;
        }
        case FirmwareUpdateSource.SpecificFile: {
            return firmWare.firmwareUpdateSourceFilePath;
        }
        case FirmwareUpdateSource.MinimumCompatible: {
            return firmWare.compatibleReleaseURL;
        }
        case FirmwareUpdateSource.SpecificUrl: {
            return firmWare.firmwareUpdateSourceUrl;
        }
    }
}
exports.bscGetFirmwareSourceUrl = bscGetFirmwareSourceUrl;
function bscCreatePublishFirmware(props) {
    if (!isNil(props)) {
        return {
            firmwareUpdateSource: !isNil(props.firmwareUpdateSource) ? props.firmwareUpdateSource : null,
            firmwareUpdateSourceFilePath: !isNil(props.firmwareUpdateSourceFilePath) ? props.firmwareUpdateSourceFilePath : '',
            firmwareUpdateSourceUrl: !isNil(props.firmwareUpdateSourceUrl) ? props.firmwareUpdateSourceUrl : '',
            firmwareUpdateStandardTargetFileName: !isNil(props.firmwareUpdateStandardTargetFileName) ? props.firmwareUpdateStandardTargetFileName : '',
            firmwareUpdateDifferentTargetFileName: !isNil(props.firmwareUpdateDifferentTargetFileName) ? props.firmwareUpdateDifferentTargetFileName : '',
            firmwareUpdateNewerTargetFileName: !isNil(props.firmwareUpdateNewerTargetFileName) ? props.firmwareUpdateNewerTargetFileName : '',
            firmwareUpdateSaveTargetFileName: !isNil(props.firmwareUpdateSaveTargetFileName) ? props.firmwareUpdateSaveTargetFileName : '',
            firmwareUpdateVersion: !isNil(props.firmwareUpdateVersion) ? props.firmwareUpdateVersion : '',
            productionReleaseURL: !isNil(props.productionReleaseURL) ? props.productionReleaseURL : '',
            betaReleaseURL: !isNil(props.betaReleaseURL) ? props.betaReleaseURL : '',
            compatibleReleaseURL: !isNil(props.compatibleReleaseURL) ? props.compatibleReleaseURL : '',
            productionVersion: !isNil(props.productionVersion) ? props.productionVersion : '',
            betaVersion: !isNil(props.betaVersion) ? props.betaVersion : '',
            compatibleVersion: !isNil(props.compatibleVersion) ? props.compatibleVersion : '',
            productionVersionNumber: !isNil(props.productionVersionNumber) ? props.productionVersionNumber : -1,
            betaVersionNumber: !isNil(props.betaVersionNumber) ? props.betaVersionNumber : -1,
            compatibleVersionNumber: !isNil(props.compatibleVersionNumber) ? props.compatibleVersionNumber : -1,
            productionReleaseSHA1: !isNil(props.productionReleaseSHA1) ? props.productionReleaseSHA1 : '',
            betaReleaseSHA1: !isNil(props.betaReleaseSHA1) ? props.betaReleaseSHA1 : '',
            compatibleReleaseSHA1: !isNil(props.compatibleReleaseSHA1) ? props.compatibleReleaseSHA1 : '',
            productionReleaseFileLength: !isNil(props.productionReleaseFileLength) ? props.productionReleaseFileLength : -1,
            betaReleaseFileLength: !isNil(props.betaReleaseFileLength) ? props.betaReleaseFileLength : -1,
            compatibleReleaseFileLength: !isNil(props.compatibleReleaseFileLength) ? props.compatibleReleaseFileLength : -1,
            existingFWContentID: !isNil(props.existingFWContentID) ? props.existingFWContentID : '',
        };
    }
    else {
        return {
            firmwareUpdateSource: null,
            firmwareUpdateSourceFilePath: '',
            firmwareUpdateSourceUrl: '',
            firmwareUpdateStandardTargetFileName: '',
            firmwareUpdateDifferentTargetFileName: '',
            firmwareUpdateNewerTargetFileName: '',
            firmwareUpdateSaveTargetFileName: '',
            firmwareUpdateVersion: '',
            productionReleaseURL: '',
            betaReleaseURL: '',
            compatibleReleaseURL: '',
            productionVersion: '',
            betaVersion: '',
            compatibleVersion: '',
            productionVersionNumber: -1,
            betaVersionNumber: -1,
            compatibleVersionNumber: -1,
            productionReleaseSHA1: '',
            betaReleaseSHA1: '',
            compatibleReleaseSHA1: '',
            productionReleaseFileLength: -1,
            betaReleaseFileLength: -1,
            compatibleReleaseFileLength: -1,
            existingFWContentID: '',
        };
    }
}
exports.bscCreatePublishFirmware = bscCreatePublishFirmware;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscGetIrRemoteControl = void 0;
var irRemoteModel_1 = __webpack_require__(5);
function bscGetIrRemoteControl(irRemoteModel) {
    var _a, _b;
    switch (irRemoteModel) {
        case irRemoteModel_1.IrRemoteModel.RC1001:
        default:
            return {
                id: 'RC-1001',
                encoding: 'NEC',
                manufacturerCode: 0x6F90,
                buttons: (_a = {},
                    _a[0x16] = { buttonCode: 0x16, buttonDescription: 'Power' },
                    _a[0x42] = { buttonCode: 0x42, buttonDescription: 'Brightness' },
                    _a[0x17] = { buttonCode: 0x17, buttonDescription: 'Home' },
                    _a[0x18] = { buttonCode: 0x18, buttonDescription: 'Search' },
                    _a[0x15] = { buttonCode: 0x15, buttonDescription: 'Back' },
                    _a[0x12] = { buttonCode: 0x12, buttonDescription: 'Up' },
                    _a[0x11] = { buttonCode: 0x11, buttonDescription: 'Right' },
                    _a[0x13] = { buttonCode: 0x13, buttonDescription: 'Down' },
                    _a[0x10] = { buttonCode: 0x10, buttonDescription: 'Left' },
                    _a[0x14] = { buttonCode: 0x14, buttonDescription: 'Ok' },
                    _a[0x1b] = { buttonCode: 0x1b, buttonDescription: 'Rewind' },
                    _a[0x19] = { buttonCode: 0x19, buttonDescription: 'Play' },
                    _a[0x1a] = { buttonCode: 0x1a, buttonDescription: 'Fast Forward' },
                    _a[0x1c] = { buttonCode: 0x1c, buttonDescription: 'Pause' },
                    _a[0x1e] = { buttonCode: 0x1e, buttonDescription: 'Shuffle' },
                    _a[0x1d] = { buttonCode: 0x1d, buttonDescription: 'Add' },
                    _a[0x1f] = { buttonCode: 0x1f, buttonDescription: 'Repeat' },
                    _a[0x40] = { buttonCode: 0x40, buttonDescription: 'Volume Up' },
                    _a[0x41] = { buttonCode: 0x41, buttonDescription: 'Volume Down' },
                    _a),
            };
        case irRemoteModel_1.IrRemoteModel.RC1002:
            return {
                id: 'RC-1002',
                encoding: 'NEC',
                manufacturerCode: 0x6F90,
                buttons: (_b = {},
                    _b[0x16] = { buttonCode: 0x16, buttonDescription: 'Power' },
                    _b[0x42] = { buttonCode: 0x42, buttonDescription: 'Brightness' },
                    _b[0x17] = { buttonCode: 0x17, buttonDescription: 'Home' },
                    _b[0x18] = { buttonCode: 0x18, buttonDescription: 'Search' },
                    _b[0x15] = { buttonCode: 0x15, buttonDescription: 'Back' },
                    _b[0x12] = { buttonCode: 0x12, buttonDescription: 'Up' },
                    _b[0x11] = { buttonCode: 0x11, buttonDescription: 'Right' },
                    _b[0x13] = { buttonCode: 0x13, buttonDescription: 'Down' },
                    _b[0x10] = { buttonCode: 0x10, buttonDescription: 'Left' },
                    _b[0x14] = { buttonCode: 0x14, buttonDescription: 'Ok' },
                    _b[0x1b] = { buttonCode: 0x1b, buttonDescription: 'Rewind' },
                    _b[0x19] = { buttonCode: 0x19, buttonDescription: 'Play' },
                    _b[0x1a] = { buttonCode: 0x1a, buttonDescription: 'Fast Forward' },
                    _b[0x1c] = { buttonCode: 0x1c, buttonDescription: 'Pause' },
                    _b[0x1e] = { buttonCode: 0x1e, buttonDescription: 'Shuffle' },
                    _b[0x1d] = { buttonCode: 0x1d, buttonDescription: 'Add' },
                    _b[0x1f] = { buttonCode: 0x1f, buttonDescription: 'Repeat' },
                    _b[0x40] = { buttonCode: 0x40, buttonDescription: 'Volume Up' },
                    _b[0x41] = { buttonCode: 0x41, buttonDescription: 'Volume Down' },
                    _b[0x43] = { buttonCode: 0x43, buttonDescription: 'Info' },
                    _b[0x0B] = { buttonCode: 0x0B, buttonDescription: 'Channel Up' },
                    _b[0x0D] = { buttonCode: 0x0D, buttonDescription: 'Channel Down' },
                    _b[0x0F] = { buttonCode: 0x0F, buttonDescription: 'Mute' },
                    _b[0x01] = { buttonCode: 0x01, buttonDescription: '1' },
                    _b[0x02] = { buttonCode: 0x02, buttonDescription: '2' },
                    _b[0x03] = { buttonCode: 0x03, buttonDescription: '3' },
                    _b[0x04] = { buttonCode: 0x04, buttonDescription: '4' },
                    _b[0x05] = { buttonCode: 0x05, buttonDescription: '5' },
                    _b[0x06] = { buttonCode: 0x06, buttonDescription: '6' },
                    _b[0x07] = { buttonCode: 0x07, buttonDescription: '7' },
                    _b[0x08] = { buttonCode: 0x08, buttonDescription: '8' },
                    _b[0x09] = { buttonCode: 0x09, buttonDescription: '9' },
                    _b[0x45] = { buttonCode: 0x45, buttonDescription: '0' },
                    _b[0x0C] = { buttonCode: 0x0C, buttonDescription: 'Period "."' },
                    _b[0x47] = { buttonCode: 0x47, buttonDescription: 'Last' },
                    _b[0x00] = { buttonCode: 0x00, buttonDescription: 'Option' },
                    _b[0x0E] = { buttonCode: 0x0E, buttonDescription: 'Source' },
                    _b[0x0A] = { buttonCode: 0x0A, buttonDescription: 'Exit' },
                    _b[0x46] = { buttonCode: 0x46, buttonDescription: 'Stop' },
                    _b[0x53] = { buttonCode: 0x53, buttonDescription: 'Red' },
                    _b[0x44] = { buttonCode: 0x44, buttonDescription: 'Green' },
                    _b[0x57] = { buttonCode: 0x57, buttonDescription: 'Yellow' },
                    _b[0x54] = { buttonCode: 0x54, buttonDescription: 'Blue' },
                    _b),
            };
    }
}
exports.bscGetIrRemoteControl = bscGetIrRemoteControl;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscIsUsbHidCommunicationDevice = exports.bscIsUsbNetworkedDevice = exports.bscIsUsbAudioDevice = exports.bscDisplayUsbPortNames = exports.EolType = exports.CommandLibrarySupportType = exports.BMapProtocolType = exports.TapProtocolType = void 0;
var isNil = __webpack_require__(0);
var isString = __webpack_require__(2);
var TapProtocolType = (function () {
    function TapProtocolType() {
    }
    TapProtocolType.Serial = 'SERIAL';
    TapProtocolType.Cdc = 'CDC';
    TapProtocolType.Hid = 'HID';
    return TapProtocolType;
}());
exports.TapProtocolType = TapProtocolType;
Object.freeze(TapProtocolType);
var BMapProtocolType = (function () {
    function BMapProtocolType() {
    }
    BMapProtocolType.Hid = 'HID';
    BMapProtocolType.None = 'None';
    return BMapProtocolType;
}());
exports.BMapProtocolType = BMapProtocolType;
Object.freeze(BMapProtocolType);
var CommandLibrarySupportType = (function () {
    function CommandLibrarySupportType() {
    }
    CommandLibrarySupportType.Bmap = 'BMAP';
    CommandLibrarySupportType.Riviera = 'Riviera';
    CommandLibrarySupportType.None = 'None';
    return CommandLibrarySupportType;
}());
exports.CommandLibrarySupportType = CommandLibrarySupportType;
Object.freeze(CommandLibrarySupportType);
var EolType = (function () {
    function EolType() {
    }
    EolType.CR = 'CR';
    EolType.LF = 'LF';
    EolType.CRLF = 'CR+LF';
    return EolType;
}());
exports.EolType = EolType;
Object.freeze(EolType);
function bscDisplayUsbPortNames(partnerProduct) {
    return (bscIsUsbAudioDevice(partnerProduct)
        || bscIsUsbNetworkedDevice(partnerProduct)
        || bscIsUsbHidCommunicationDevice(partnerProduct));
}
exports.bscDisplayUsbPortNames = bscDisplayUsbPortNames;
function bscIsUsbAudioDevice(partnerProduct) {
    return (!isNil(partnerProduct.usbAudioInterfaceIndex) &&
        isString(partnerProduct.usbAudioInterfaceIndex) && partnerProduct.usbAudioInterfaceIndex.length > 0);
}
exports.bscIsUsbAudioDevice = bscIsUsbAudioDevice;
function bscIsUsbNetworkedDevice(partnerProduct) {
    return (!isNil(partnerProduct.usbNetInterfaceIndex) &&
        isString(partnerProduct.usbNetInterfaceIndex) && partnerProduct.usbNetInterfaceIndex.length > 0);
}
exports.bscIsUsbNetworkedDevice = bscIsUsbNetworkedDevice;
function bscIsUsbHidCommunicationDevice(partnerProduct) {
    return (!isNil(partnerProduct.tapProtocol) &&
        partnerProduct.tapProtocol === TapProtocolType.Hid);
}
exports.bscIsUsbHidCommunicationDevice = bscIsUsbHidCommunicationDevice;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscGetPlayerCapabilities = void 0;
var playerModel_1 = __webpack_require__(3);
var metadata_1 = __webpack_require__(1);
var probe_1 = __webpack_require__(7);
function bscGetPlayerCapabilities(model) {
    switch (model) {
        case playerModel_1.PlayerModel.XT1144:
        case playerModel_1.PlayerModel.XT1143:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 2,
                videoPlaneCount: 2,
                maxImageSize: { width: 4096, height: 2160 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.XT244:
        case playerModel_1.PlayerModel.XT243:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 2,
                videoPlaneCount: 2,
                maxImageSize: { width: 4096, height: 2160 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.XT1043:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.FK1142:
        case playerModel_1.PlayerModel.FK1042:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.FK242:
            return {
                videoDecoderCount: 2,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.XD1034:
        case playerModel_1.PlayerModel.XD1033:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.XD234:
        case playerModel_1.PlayerModel.XD233:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 2,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.HD1024:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 1,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HD224:
        case playerModel_1.PlayerModel.HS144:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 1,
                videoPlaneCount: 1,
                maxImageSize: { width: 2048, height: 1080 },
                maxVideoSize: { width: 4096, height: 2160 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.FK,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.LS424:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HD1023:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeA, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.HS124:
        case playerModel_1.PlayerModel.HD223:
        case playerModel_1.PlayerModel.HS123:
        case playerModel_1.PlayerModel.HO523:
        default:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [],
            };
        case playerModel_1.PlayerModel.LS423:
            return {
                videoDecoderCount: 1,
                videoDecoder4kCount: 0,
                videoPlaneCount: 1,
                maxImageSize: { width: 1920, height: 1080 },
                maxVideoSize: { width: 1920, height: 1200 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.HD,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC, metadata_1.UsbConnectorName.Usb700_1,
                    metadata_1.UsbConnectorName.Usb700_2, metadata_1.UsbConnectorName.Usb700_3, metadata_1.UsbConnectorName.Usb700_4,
                    metadata_1.UsbConnectorName.Usb700_5, metadata_1.UsbConnectorName.Usb700_6, metadata_1.UsbConnectorName.Usb700_7],
            };
        case playerModel_1.PlayerModel.AU325:
            return {
                videoDecoderCount: 0,
                videoDecoder4kCount: 0,
                videoPlaneCount: 0,
                maxImageSize: { width: 0, height: 0 },
                maxVideoSize: { width: 0, height: 0 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.NA,
                audioDecoderCount: 3,
                usbConnectorNames: [
                    metadata_1.UsbConnectorName.Usb_1,
                    metadata_1.UsbConnectorName.Usb_2,
                    metadata_1.UsbConnectorName.Usb_3,
                    metadata_1.UsbConnectorName.Usb_4,
                    metadata_1.UsbConnectorName.Usb_5,
                    metadata_1.UsbConnectorName.Usb_6,
                ],
            };
        case playerModel_1.PlayerModel.AU335:
            return {
                videoDecoderCount: 0,
                videoDecoder4kCount: 0,
                videoPlaneCount: 0,
                maxImageSize: { width: 0, height: 0 },
                maxVideoSize: { width: 0, height: 0 },
                maxVideoContentResolution: probe_1.ProbeContentResolutionType.NA,
                audioDecoderCount: 3,
                usbConnectorNames: [metadata_1.UsbConnectorName.UsbTypeC],
            };
    }
}
exports.bscGetPlayerCapabilities = bscGetPlayerCapabilities;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PublishDataKeys = exports.StorageSpaceLimitUnits = exports.ScheduleRecurrencePattern = void 0;
var ScheduleRecurrencePattern = (function () {
    function ScheduleRecurrencePattern() {
    }
    ScheduleRecurrencePattern.AllDays = 'AllDays';
    ScheduleRecurrencePattern.Weekends = 'Weekends';
    ScheduleRecurrencePattern.Weekdays = 'Weekdays';
    ScheduleRecurrencePattern.Custom = 'Custom';
    return ScheduleRecurrencePattern;
}());
exports.ScheduleRecurrencePattern = ScheduleRecurrencePattern;
Object.freeze(ScheduleRecurrencePattern);
var StorageSpaceLimitUnits = (function () {
    function StorageSpaceLimitUnits() {
    }
    StorageSpaceLimitUnits.Percentage = 'Percentage';
    StorageSpaceLimitUnits.Megabyte = 'Megabyte';
    return StorageSpaceLimitUnits;
}());
exports.StorageSpaceLimitUnits = StorageSpaceLimitUnits;
exports.PublishDataKeys = [
    'hdX23Firmware', 'lsX23Firmware',
    'hsX23Firmware', 'hoX23Firmware',
    'xdX33Firmware', 'xtX43Firmware',
    'xdX34_XTX44Firmware', 'hdX4_HSX4_LSX4Firmware',
    '4KX42Firmware', 'aux5Firmware',
    'enableSerialDebugging', 'enableSystemLogDebugging', 'enableStorageSpaceLimit',
    'storageSpaceLimitUnits', 'publishedDataSizeLimit', 'dynamicDataSizeLimit',
    'htmlDataSizeLimit', 'htmlLocalStorageSizeLimit', 'webDatabaseSizeLimit',
];


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscGetMimeTypeForFileExtension = exports.bscGetFileExtensionForMimeType = exports.bscIsLocalFileBuffer = exports.bscCreateLocalFileBuffer = exports.BsUploadItemStatus = void 0;
var BsUploadItemStatus = (function () {
    function BsUploadItemStatus() {
    }
    BsUploadItemStatus.Pending = 'Pending';
    BsUploadItemStatus.Uploading = 'Uploading';
    BsUploadItemStatus.Uploaded = 'Uploaded';
    BsUploadItemStatus.Matched = 'Matched';
    BsUploadItemStatus.Cancelled = 'Cancelled';
    BsUploadItemStatus.Failed = 'Failed';
    return BsUploadItemStatus;
}());
exports.BsUploadItemStatus = BsUploadItemStatus;
Object.freeze(BsUploadItemStatus);
function bscCreateLocalFileBuffer(name, data, type, lastModifiedDate, hash) {
    var obj = {
        name: name, data: data,
        type: type.toLowerCase(),
        lastModifiedDate: lastModifiedDate ? lastModifiedDate : new Date(),
    };
    if (hash) {
        obj.hash = hash;
    }
    return obj;
}
exports.bscCreateLocalFileBuffer = bscCreateLocalFileBuffer;
function bscIsLocalFileBuffer(obj) {
    return obj != null
        && typeof obj === 'object'
        && obj.hasOwnProperty('name') && typeof obj.name === 'string'
        && obj.hasOwnProperty('data') && (obj.data instanceof Uint8Array)
        && obj.hasOwnProperty('type') && typeof obj.name === 'string';
}
exports.bscIsLocalFileBuffer = bscIsLocalFileBuffer;
var mimeTypeExtensionMap = {
    'image/jpeg': 'jpg',
    'image/jpg': 'jpg',
    'image/png': 'png',
    'image/bmp': 'bmp',
    'image/svg+xml': 'svg',
    'video/mp4': 'mp4',
    'video/h264': 'mp4',
    'video/h265': 'mp4',
    'video/quicktime': 'mov',
    'video/mpeg': 'mpg',
    'video/mp2t': 'ts',
    'video/x-ms-vob': 'vob',
    'video/x-ms-wmv': 'wmv',
    'video/x-matroska': 'mkv',
    'audio/mp3': 'mp3',
    'audio/wav': 'wav',
    'audio/x-wav': 'wav',
    'audio/mp4': 'm4a',
    'audio/x-m4a': 'm4a',
    'audio/x-aiff': 'aiff',
    'audio/aac': 'aac',
    'text/plain': 'txt',
    'text/html': 'html',
    'text/xml': 'xml',
    'text/css': 'css',
    'text/javascript': 'js',
    'text/brightscript': 'brs',
    'font/ttf': 'ttf',
    'font/otf': 'otf',
    'application/bpfx': 'bpfx',
    'application/bpf': 'bpf',
};
function bscGetFileExtensionForMimeType(mimeType) {
    var ext = mimeTypeExtensionMap[mimeType];
    return ext ? '.' + ext : null;
}
exports.bscGetFileExtensionForMimeType = bscGetFileExtensionForMimeType;
var extensionMimeTypeMap;
var buildExtMap = function () {
    extensionMimeTypeMap = {};
    Object.keys(mimeTypeExtensionMap).forEach(function (mimeType) {
        var ext = mimeTypeExtensionMap[mimeType];
        if (!extensionMimeTypeMap[ext]) {
            extensionMimeTypeMap[ext] = mimeType;
        }
    });
    extensionMimeTypeMap['htm'] = extensionMimeTypeMap['html'];
};
function bscGetMimeTypeForFileExtension(extension) {
    if (!extensionMimeTypeMap) {
        buildExtMap();
    }
    if (extension.charAt(0) === '.') {
        extension = extension.slice(1);
    }
    var type = extensionMimeTypeMap[extension];
    return type ? type : 'application/octet-stream';
}
exports.bscGetMimeTypeForFileExtension = bscGetMimeTypeForFileExtension;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscIsNumericArray = exports.bscImageOrientationToRotationType = exports.bscTimeSpanStringFromSeconds = exports.bscTimeSpanStringToSeconds = exports.bscReplaceTimeZoneWithUTC = void 0;
var metadata_1 = __webpack_require__(1);
var isString = __webpack_require__(2);
var isNil = __webpack_require__(0);
function bscReplaceTimeZoneWithUTC(time) {
    return new Date(Date.UTC(time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()));
}
exports.bscReplaceTimeZoneWithUTC = bscReplaceTimeZoneWithUTC;
function bscTimeSpanStringToSeconds(ts) {
    if (!isNil(ts)) {
        var matchResult = ts.match(/(?:(\d+)\.)?(\d\d):(\d\d):(\d\d)(\.\d+)?/);
        if (matchResult != null && matchResult.length === 6) {
            try {
                var seconds = (Number(matchResult[2]) * 3600)
                    + (Number(matchResult[3]) * 60)
                    + (Number(matchResult[4]));
                if (typeof (matchResult[1]) !== 'undefined') {
                    seconds += Number(matchResult[1]) * 86400;
                }
                if (typeof (matchResult[5]) !== 'undefined') {
                    seconds += Math.round(Number(matchResult[5]) * 1000) / 1000;
                }
                return seconds;
            }
            catch (e) {
                return 0;
            }
        }
    }
    return 0;
}
exports.bscTimeSpanStringToSeconds = bscTimeSpanStringToSeconds;
function bscTimeSpanStringFromSeconds(totalSeconds) {
    var days = Math.trunc(totalSeconds / 86400);
    var rem = totalSeconds - (days * 86400);
    var hours = Math.trunc(rem / 3600);
    rem -= (hours * 3600);
    var minutes = Math.trunc(rem / 60);
    var seconds = rem - (minutes * 60);
    var wholeSeconds = Math.floor(seconds);
    var fraction = seconds - Math.floor(seconds);
    var fractionString = fraction > 0 ? fraction.toFixed(3).substring(1) : '';
    return (days > 0 ? days.toString() + '.' : '') +
        ('00' + hours.toString()).slice(-2) + ':' +
        ('00' + minutes.toString()).slice(-2) + ':' +
        ('00' + wholeSeconds.toString()).slice(-2) + fractionString;
}
exports.bscTimeSpanStringFromSeconds = bscTimeSpanStringFromSeconds;
function bscImageOrientationToRotationType(orientation) {
    switch (orientation) {
        case metadata_1.ImageOrientationType.BottomRight:
        case metadata_1.ImageOrientationType.BottomLeft:
            return metadata_1.RotationType.rot180;
        case metadata_1.ImageOrientationType.RightTop:
        case metadata_1.ImageOrientationType.RightBottom:
            return metadata_1.RotationType.rot270;
        case metadata_1.ImageOrientationType.LeftBottom:
        case metadata_1.ImageOrientationType.LeftTop:
            return metadata_1.RotationType.rot90;
    }
    return metadata_1.RotationType.rot0;
}
exports.bscImageOrientationToRotationType = bscImageOrientationToRotationType;
function bscIsNumericArray(strArray) {
    var regEx = /\s*\d+(?:\s*-\d+)*\s*/;
    return !strArray.some(function (str) { return !(isString(str) && regEx.test(str)); });
}
exports.bscIsNumericArray = bscIsNumericArray;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.bscIsFullResGraphicScalingNeeded = exports.bscScaleRectangleFromFullResolutionCoordinates = exports.bscScaleRectangleToFullResolutionCoordinates = exports.bscGetGraphicsResolution = exports.bscIsFullResGraphicsSupported = exports.bscIsHDVideoResolutionOrSmaller = exports.bscParseVideoModeResolutionAndRate = exports.bscParseVideoModeComponents = exports.bscIsValidFrameRate = exports.bscIsValidResolution = exports.bscGetFrameRates = exports.bscGetPlayerVideoModeSpecs = exports.bscIsValidConnectorType = exports.bscGetPlayerVideoConnectorTypes = exports.HdmiVideoConnectorTypeSpec = exports.AllVideoConnectorTypeSpec = exports.BobcatVgaVideoModeSpec = exports.BobcatComponentVideoModeSpec = exports.BobcatHdmiVideoModeSpec = exports.LynxVgaVideoModeSpec = exports.LynxComponentVideoModeSpec = exports.LynxHdmiVideoModeSpec = exports.PanteraVideoModeSpec = exports.FourKVideoModeSpec = exports.bscGetVideoMode = exports.VideoMode = exports.VideoFrameRate = exports.VideoResolution = void 0;
var playerModel_1 = __webpack_require__(3);
var playerFeature_1 = __webpack_require__(6);
var metadata_1 = __webpack_require__(1);
var rectangle_1 = __webpack_require__(8);
var VideoResolution = (function () {
    function VideoResolution() {
    }
    VideoResolution.v4096x2160 = '4096x2160';
    VideoResolution.v3840x2160 = '3840x2160';
    VideoResolution.v3840x1080 = '3840x1080';
    VideoResolution.v3840x600 = '3840x600';
    VideoResolution.v3440x1440 = '3440x1440';
    VideoResolution.v2560x1600 = '2560x1600';
    VideoResolution.v2560x1440 = '2560x1440';
    VideoResolution.v2560x1080 = '2560x1080';
    VideoResolution.v2560x960 = '2560x960';
    VideoResolution.v2376x288 = '2376x288';
    VideoResolution.v2048x1152 = '2048x1152';
    VideoResolution.v1920x1920 = '1920x1920';
    VideoResolution.v1920x1200 = '1920x1200';
    VideoResolution.v1920x1080 = '1920x1080';
    VideoResolution.v1920x540 = '1920x540';
    VideoResolution.v1792x1344 = '1792x1344';
    VideoResolution.v1680x1050 = '1680x1050';
    VideoResolution.v1600x1200 = '1600x1200';
    VideoResolution.v1600x900 = '1600x900';
    VideoResolution.v1440x1088 = '1440x1088';
    VideoResolution.v1440x1080 = '1440x1080';
    VideoResolution.v1440x900 = '1440x900';
    VideoResolution.v1400x1050 = '1400x1050';
    VideoResolution.v1366x768 = '1366x768';
    VideoResolution.v1360x768 = '1360x768';
    VideoResolution.v1280x1024 = '1280x1024';
    VideoResolution.v1280x960 = '1280x960';
    VideoResolution.v1280x800 = '1280x800';
    VideoResolution.v1280x768 = '1280x768';
    VideoResolution.v1280x720 = '1280x720';
    VideoResolution.v1200x1920 = '1200x1920';
    VideoResolution.v1024x768 = '1024x768';
    VideoResolution.v960x960 = '960x960';
    VideoResolution.v848x480 = '848x480';
    VideoResolution.v800x1280 = '800x1280';
    VideoResolution.v800x600 = '800x600';
    VideoResolution.v720x576 = '720x576';
    VideoResolution.v720x480 = '720x480';
    VideoResolution.v640x480 = '640x480';
    VideoResolution.vNtscComponent = 'NTSC-COMPONENT';
    VideoResolution.vNtscM = 'NTSC-M';
    VideoResolution.vNtscMJpn = 'NTSC-M-JPN';
    VideoResolution.vPalComponent = 'PAL-COMPONENT';
    VideoResolution.vPalI = 'PAL-I';
    VideoResolution.vPalBG = 'PAL-BG';
    VideoResolution.vPalN = 'PAL-N';
    VideoResolution.vPalNC = 'PAL-NC';
    VideoResolution.vPalM = 'PAL-M';
    VideoResolution.vSecam = 'SECAM';
    VideoResolution.None = '0x0';
    return VideoResolution;
}());
exports.VideoResolution = VideoResolution;
var VideoFrameRate = (function () {
    function VideoFrameRate() {
    }
    VideoFrameRate.r75p = '75p';
    VideoFrameRate.r60p = '60p';
    VideoFrameRate.r59p = '59.94p';
    VideoFrameRate.r57p = '57p';
    VideoFrameRate.r50p = '50p';
    VideoFrameRate.r30p = '30p';
    VideoFrameRate.r29p = '29.97p';
    VideoFrameRate.r25p = '25p';
    VideoFrameRate.r24p = '24p';
    VideoFrameRate.r23p = '23.976p';
    VideoFrameRate.r60i = '60i';
    VideoFrameRate.r59i = '59.94i';
    VideoFrameRate.r50i = '50i';
    VideoFrameRate.None = '0p';
    return VideoFrameRate;
}());
exports.VideoFrameRate = VideoFrameRate;
var VideoMode = (function () {
    function VideoMode() {
    }
    VideoMode.v4096x2160x60p = '4096x2160x60p';
    VideoMode.v4096x2160x59p = '4096x2160x59.94p';
    VideoMode.v4096x2160x50p = '4096x2160x50p';
    VideoMode.v4096x2160x30p = '4096x2160x30p';
    VideoMode.v4096x2160x29p = '4096x2160x29.97p';
    VideoMode.v4096x2160x25p = '4096x2160x25p';
    VideoMode.v4096x2160x24p = '4096x2160x24p';
    VideoMode.v4096x2160x23p = '4096x2160x23.976p';
    VideoMode.v3840x2160x60p = '3840x2160x60p';
    VideoMode.v3840x2160x59p = '3840x2160x59.94p';
    VideoMode.v3840x2160x50p = '3840x2160x50p';
    VideoMode.v3840x2160x30p = '3840x2160x30p';
    VideoMode.v3840x2160x29p = '3840x2160x29.97p';
    VideoMode.v3840x2160x25p = '3840x2160x25p';
    VideoMode.v3840x2160x24p = '3840x2160x24p';
    VideoMode.v3840x2160x23p = '3840x2160x23.976p';
    VideoMode.v3840x1080x60p = '3840x1080x60p';
    VideoMode.v3840x1080x50p = '3840x1080x50p';
    VideoMode.v3840x1080x30p = '3840x1080x30p';
    VideoMode.v3840x1080x25p = '3840x1080x25p';
    VideoMode.v3840x600x60p = '3840x600x60p';
    VideoMode.v3440x1440x60p = '3440x1440x60p';
    VideoMode.v3440x1440x50p = '3440x1440x50p';
    VideoMode.v3440x1440x30p = '3440x1440x30p';
    VideoMode.v2560x1600x60p = '2560x1600x60p';
    VideoMode.v2560x1440x60p = '2560x1440x60p';
    VideoMode.v2560x1440x30p = '2560x1440x30p';
    VideoMode.v2560x1080x60p = '2560x1080x60p';
    VideoMode.v2560x960x60p = '2560x960x60p';
    VideoMode.v2376x288x60p = '2376x288x60p';
    VideoMode.v2048x1152x60p = '2048x1152x60p';
    VideoMode.v1920x1920x60p = '1920x1920x60p';
    VideoMode.v1920x1200x60p = '1920x1200x60p';
    VideoMode.v1920x1200x50p = '1920x1200x50p';
    VideoMode.v1920x1080x60p = '1920x1080x60p';
    VideoMode.v1920x1080x59p = '1920x1080x59.94p';
    VideoMode.v1920x1080x50p = '1920x1080x50p';
    VideoMode.v1920x1080x30p = '1920x1080x30p';
    VideoMode.v1920x1080x29p = '1920x1080x29.97p';
    VideoMode.v1920x1080x25p = '1920x1080x25p';
    VideoMode.v1920x1080x24p = '1920x1080x24p';
    VideoMode.v1920x1080x23p = '1920x1080x23.976p';
    VideoMode.v1920x1080x60i = '1920x1080x60i';
    VideoMode.v1920x1080x59i = '1920x1080x59.94i';
    VideoMode.v1920x1080x50i = '1920x1080x50i';
    VideoMode.v1920x540x60p = '1920x540x60p';
    VideoMode.v1792x1344x60p = '1792x1344x60p';
    VideoMode.v1680x1050x60p = '1680x1050x60p';
    VideoMode.v1600x1200x60p = '1600x1200x60p';
    VideoMode.v1600x900x60p = '1600x900x60p';
    VideoMode.v1440x1088x57p = '1440x1088x57p';
    VideoMode.v1440x1080x60p = '1440x1080x60p';
    VideoMode.v1440x900x75p = '1440x900x75p';
    VideoMode.v1440x900x60p = '1440x900x60p';
    VideoMode.v1400x1050x75p = '1400x1050x75p';
    VideoMode.v1400x1050x60p = '1400x1050x60p';
    VideoMode.v1366x768x60p = '1366x768x60p';
    VideoMode.v1360x768x60p = '1360x768x60p';
    VideoMode.v1280x1024x75p = '1280x1024x75p';
    VideoMode.v1280x1024x60p = '1280x1024x60p';
    VideoMode.v1280x960x60p = '1280x960x60p';
    VideoMode.v1280x800x75p = '1280x800x75p';
    VideoMode.v1280x800x60p = '1280x800x60p';
    VideoMode.v1280x768x60p = '1280x768x60p';
    VideoMode.v1280x720x60p = '1280x720x60p';
    VideoMode.v1280x720x59p = '1280x720x59.94p';
    VideoMode.v1280x720x50p = '1280x720x50p';
    VideoMode.v1280x720x25p = '1280x720x25p';
    VideoMode.v1280x720x24p = '1280x720x24p';
    VideoMode.v1280x720x23p = '1280x720x23.976p';
    VideoMode.v1200x1920x60p = '1200x1920x60p';
    VideoMode.v1024x768x75p = '1024x768x75p';
    VideoMode.v1024x768x60p = '1024x768x60p';
    VideoMode.v960x960x60p = '960x960x60p';
    VideoMode.v848x480x60p = '848x480x60p';
    VideoMode.v800x1280x60p = '800x1280x60p';
    VideoMode.v800x600x75p = '800x600x75p';
    VideoMode.v800x600x60p = '800x600x60p';
    VideoMode.v720x576x50p = '720x576x50p';
    VideoMode.v720x576x50i = '720x576x50i';
    VideoMode.v720x480x60p = '720x480x60p';
    VideoMode.v720x480x59p = '720x480x59.94p';
    VideoMode.v720x480x60i = '720x480x60i';
    VideoMode.v640x480x60p = '640x480x60p';
    VideoMode.vNtscComponent = 'NTSC-COMPONENT';
    VideoMode.vNtscM = 'NTSC-M';
    VideoMode.vNtscMJpn = 'NTSC-M-JPN';
    VideoMode.vPalComponent = 'PAL-COMPONENT';
    VideoMode.vPalI = 'PAL-I';
    VideoMode.vPalBG = 'PAL-BG';
    VideoMode.vPalN = 'PAL-N';
    VideoMode.vPalNC = 'PAL-NC';
    VideoMode.vPalM = 'PAL-M';
    VideoMode.vSecam = 'SECAM';
    VideoMode.None = '0x0x0p';
    return VideoMode;
}());
exports.VideoMode = VideoMode;
function bscGetVideoMode(resolution, frameRate) {
    if (resolution[0] === 'N' || resolution[0] === 'P' || resolution[0] === 'S') {
        return resolution;
    }
    else {
        return resolution + 'x' + frameRate;
    }
}
exports.bscGetVideoMode = bscGetVideoMode;
exports.FourKVideoModeSpec = [
    { resolution: VideoResolution.v4096x2160, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v3840x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r25p
        ] },
    { resolution: VideoResolution.v3840x600, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v3440x1440, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r50p, VideoFrameRate.r30p
        ] },
    { resolution: VideoResolution.v2560x1600, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2560x1440, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r30p] },
    { resolution: VideoResolution.v2560x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2560x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2376x288, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v2048x1152, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1920x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x900, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1088, availableRates: [VideoFrameRate.r57p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1366x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1200x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x1280, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p
        ] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.PanteraVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x900, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1088, availableRates: [VideoFrameRate.r57p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1366x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1200x1920, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x1280, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p
        ] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.LynxHdmiVideoModeSpec = [
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r30p, VideoFrameRate.r29p, VideoFrameRate.r25p, VideoFrameRate.r24p
        ] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.vSecam, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscM, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vNtscMJpn, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalI, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalBG, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalN, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalNC, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalM, availableRates: [VideoFrameRate.r59i] },
];
exports.LynxComponentVideoModeSpec = [
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1792x1344, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
];
exports.LynxVgaVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1400x1050, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.BobcatHdmiVideoModeSpec = [
    { resolution: VideoResolution.v3840x2160, availableRates: [
            VideoFrameRate.r30p, VideoFrameRate.r29p, VideoFrameRate.r25p, VideoFrameRate.r24p
        ] },
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1920x540, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x1024, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v960x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v848x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p, VideoFrameRate.r50i] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r60i, VideoFrameRate.r59p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.vSecam, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vNtscM, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vNtscMJpn, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalI, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalBG, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalN, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalNC, availableRates: [VideoFrameRate.r50i] },
    { resolution: VideoResolution.vPalM, availableRates: [VideoFrameRate.r59i] },
];
exports.BobcatComponentVideoModeSpec = [
    { resolution: VideoResolution.v1920x1080, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p, VideoFrameRate.r30p, VideoFrameRate.r29p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p,
            VideoFrameRate.r60i, VideoFrameRate.r59i, VideoFrameRate.r50i
        ] },
    { resolution: VideoResolution.v1280x720, availableRates: [
            VideoFrameRate.r60p, VideoFrameRate.r59p, VideoFrameRate.r50p,
            VideoFrameRate.r25p, VideoFrameRate.r24p, VideoFrameRate.r23p
        ] },
    { resolution: VideoResolution.v720x576, availableRates: [VideoFrameRate.r50p] },
    { resolution: VideoResolution.v720x480, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r59p] },
    { resolution: VideoResolution.vNtscComponent, availableRates: [VideoFrameRate.r59i] },
    { resolution: VideoResolution.vPalComponent, availableRates: [VideoFrameRate.r50i] },
];
exports.BobcatVgaVideoModeSpec = [
    { resolution: VideoResolution.v1920x1200, availableRates: [VideoFrameRate.r60p, VideoFrameRate.r50p] },
    { resolution: VideoResolution.v1680x1050, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1600x1200, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x1080, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1440x900, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1360x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x960, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x800, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1280x768, availableRates: [VideoFrameRate.r60p] },
    { resolution: VideoResolution.v1024x768, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v800x600, availableRates: [VideoFrameRate.r75p, VideoFrameRate.r60p] },
    { resolution: VideoResolution.v640x480, availableRates: [VideoFrameRate.r60p] },
];
exports.AllVideoConnectorTypeSpec = [
    metadata_1.VideoConnectorType.Hdmi,
    metadata_1.VideoConnectorType.Vga,
    metadata_1.VideoConnectorType.Component,
];
exports.HdmiVideoConnectorTypeSpec = [
    metadata_1.VideoConnectorType.Hdmi,
];
function bscGetPlayerVideoConnectorTypes(model) {
    switch (true) {
        case playerModel_1.Series4Models.has(model):
        case playerModel_1.Series3Models.has(model):
        case playerModel_1.TigerModels.has(model):
            return exports.HdmiVideoConnectorTypeSpec;
        case playerModel_1.LynxModels.has(model):
        case playerModel_1.BobcatModels.has(model):
        case playerModel_1.CheetahModels.has(model):
            return exports.AllVideoConnectorTypeSpec;
        case playerModel_1.PantherModels.has(model): {
            if (model !== playerModel_1.PlayerModel.LS322 && model !== playerModel_1.PlayerModel.AU320) {
                return model !== playerModel_1.PlayerModel.LS422 ? exports.AllVideoConnectorTypeSpec : exports.HdmiVideoConnectorTypeSpec;
            }
            else {
                return null;
            }
        }
        case playerModel_1.PumaModels.has(model): {
            if (model === playerModel_1.PlayerModel.HD920 || model === playerModel_1.PlayerModel.HD970) {
                return exports.AllVideoConnectorTypeSpec;
            }
            else {
                return exports.HdmiVideoConnectorTypeSpec;
            }
        }
        default:
            return null;
    }
}
exports.bscGetPlayerVideoConnectorTypes = bscGetPlayerVideoConnectorTypes;
function bscIsValidConnectorType(model, connectorType) {
    var validConnectorTypes = bscGetPlayerVideoConnectorTypes(model);
    if (validConnectorTypes !== null) {
        return validConnectorTypes.indexOf(connectorType) > -1;
    }
    else {
        return false;
    }
}
exports.bscIsValidConnectorType = bscIsValidConnectorType;
function bscGetPlayerVideoModeSpecs(model, connectorType) {
    switch (true) {
        case playerModel_1.MalibuModels.has(model):
        case playerModel_1.PaganiModels.has(model):
        case playerModel_1.ImpalaModels.has(model):
        case playerModel_1.TigerModels.has(model):
            return exports.FourKVideoModeSpec;
        case playerModel_1.PaganiHDModels.has(model):
        case playerModel_1.PanteraModels.has(model):
            return exports.PanteraVideoModeSpec;
        case playerModel_1.LynxModels.has(model): {
            switch (connectorType) {
                case metadata_1.VideoConnectorType.Hdmi: return exports.LynxHdmiVideoModeSpec;
                case metadata_1.VideoConnectorType.Vga: return exports.LynxVgaVideoModeSpec;
                case metadata_1.VideoConnectorType.Component: return exports.LynxComponentVideoModeSpec;
                default: return null;
            }
        }
        case playerModel_1.BobcatModels.has(model): {
            switch (connectorType) {
                case metadata_1.VideoConnectorType.Hdmi: return exports.BobcatHdmiVideoModeSpec;
                case metadata_1.VideoConnectorType.Vga: return exports.BobcatVgaVideoModeSpec;
                case metadata_1.VideoConnectorType.Component: return exports.BobcatComponentVideoModeSpec;
                default: return null;
            }
        }
        default:
            return null;
    }
}
exports.bscGetPlayerVideoModeSpecs = bscGetPlayerVideoModeSpecs;
function bscGetFrameRates(model, connectorType, resolution) {
    var videoModeOptions = bscGetPlayerVideoModeSpecs(model, connectorType);
    if (videoModeOptions !== null) {
        for (var _i = 0, videoModeOptions_1 = videoModeOptions; _i < videoModeOptions_1.length; _i++) {
            var videoModeOption = videoModeOptions_1[_i];
            if (resolution === videoModeOption.resolution) {
                return videoModeOption.availableRates;
            }
        }
    }
    return null;
}
exports.bscGetFrameRates = bscGetFrameRates;
function bscIsValidResolution(model, connectorType, resolution) {
    return bscGetFrameRates(model, connectorType, resolution) !== null;
}
exports.bscIsValidResolution = bscIsValidResolution;
function bscIsValidFrameRate(model, connectorType, resolution, frameRate) {
    var validFrameRates = bscGetFrameRates(model, connectorType, resolution);
    if (validFrameRates !== null) {
        return validFrameRates.indexOf(frameRate) > -1;
    }
    else {
        return false;
    }
}
exports.bscIsValidFrameRate = bscIsValidFrameRate;
function bscParseVideoModeComponents(mode) {
    var components = { width: 0, height: 0, frameRate: 0, interlaced: false };
    var matchResult = mode.match(/(\d*)x(\d*)x(.*|.*\..*)([ip])/);
    if (matchResult != null && matchResult.length === 5) {
        components.width = Number(matchResult[1]);
        components.height = Number(matchResult[2]);
        components.frameRate = Number(matchResult[3]);
        components.interlaced = matchResult[4] === 'i';
    }
    else if (mode.match(/NTSC/) || mode.match(/PAL-M/)) {
        components.width = 720;
        components.height = 480;
        components.frameRate = 59.94;
        components.interlaced = true;
    }
    else if (mode.match(/PAL/) || mode.match(/SECAM/)) {
        components.width = 720;
        components.height = 576;
        components.frameRate = 50;
        components.interlaced = true;
    }
    return components;
}
exports.bscParseVideoModeComponents = bscParseVideoModeComponents;
function bscParseVideoModeResolutionAndRate(mode) {
    var result = {
        resolution: VideoResolution.v1920x1080,
        frameRate: VideoFrameRate.r60p,
    };
    var matchResult = mode.match(/(\d*x\d*)x(.*|.*\..*[ip])/);
    if (matchResult != null && matchResult.length === 3) {
        result.resolution = matchResult[1];
        result.frameRate = matchResult[2];
    }
    else if (mode.match(/NTSC/) || mode.match(/PAL-M/)) {
        result.resolution = mode;
        result.frameRate = VideoFrameRate.r59i;
    }
    else if (mode.match(/PAL/) || mode.match(/SECAM/)) {
        result.resolution = mode;
        result.frameRate = VideoFrameRate.r50i;
    }
    else {
        return null;
    }
    return result;
}
exports.bscParseVideoModeResolutionAndRate = bscParseVideoModeResolutionAndRate;
function bscIsHDVideoResolutionOrSmaller(mode) {
    var components = bscParseVideoModeComponents(mode);
    return components.width <= 1920 && components.height <= 1080;
}
exports.bscIsHDVideoResolutionOrSmaller = bscIsHDVideoResolutionOrSmaller;
var FiveMPix = 5242880;
var TwoPFiveMPix = 2621440;
var MaxHiResGfxFrameRate = 30;
function bscIsFullResGraphicsSupported(model, videoMode) {
    var supported = false;
    if (playerFeature_1.bscPlayerModelHasFeature(model, playerFeature_1.ModelFeature.FullResGraphics)) {
        var videoModeComponents = bscParseVideoModeComponents(videoMode);
        if (!videoModeComponents.interlaced) {
            var totalPixels = videoModeComponents.width * videoModeComponents.height;
            supported = playerFeature_1.bscPlayerModelHasFeature(model, playerFeature_1.ModelFeature.FullResGraphicsHiFR)
                || (totalPixels > TwoPFiveMPix && totalPixels <= FiveMPix)
                || (totalPixels > FiveMPix && videoModeComponents.frameRate <= MaxHiResGfxFrameRate);
        }
    }
    return supported;
}
exports.bscIsFullResGraphicsSupported = bscIsFullResGraphicsSupported;
var VideoModesForFullResGraphicScaling = new Set([
    VideoMode.v4096x2160x60p, VideoMode.v4096x2160x59p, VideoMode.v4096x2160x50p, VideoMode.v4096x2160x30p,
    VideoMode.v4096x2160x29p, VideoMode.v4096x2160x25p, VideoMode.v4096x2160x24p, VideoMode.v4096x2160x23p,
    VideoMode.v3840x2160x60p, VideoMode.v3840x2160x59p, VideoMode.v3840x2160x50p, VideoMode.v3840x2160x23p,
    VideoMode.v3840x2160x30p, VideoMode.v3840x2160x29p, VideoMode.v3840x2160x25p, VideoMode.v3840x2160x24p,
    VideoMode.v3840x1080x60p, VideoMode.v3840x1080x50p, VideoMode.v3840x1080x30p, VideoMode.v3840x1080x25p,
    VideoMode.v3840x600x60p, VideoMode.v3440x1440x60p, VideoMode.v3440x1440x50p, VideoMode.v3440x1440x30p,
    VideoMode.v2560x1600x60p, VideoMode.v2560x1440x60p, VideoMode.v2560x1440x30p, VideoMode.v2560x1080x60p,
    VideoMode.v2560x960x60p, VideoMode.v2048x1152x60p, VideoMode.v1920x1920x60p, VideoMode.v1792x1344x60p,
]);
function bscGetGraphicsResolution(mode, fullResGraphics) {
    var videoModeComponents = bscParseVideoModeComponents(mode);
    if (!fullResGraphics && VideoModesForFullResGraphicScaling.has(mode)) {
        return {
            height: videoModeComponents.height / 2,
            width: videoModeComponents.width / 2,
        };
    }
    return {
        height: videoModeComponents.height,
        width: videoModeComponents.width,
    };
}
exports.bscGetGraphicsResolution = bscGetGraphicsResolution;
function bscScaleRectangleToFullResolutionCoordinates(rect, mode, fullResGraphics) {
    if (bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) && !rect.pct) {
        return rectangle_1.bscScaleAbsoluteRect(rect, true, 2, 2);
    }
    return rect;
}
exports.bscScaleRectangleToFullResolutionCoordinates = bscScaleRectangleToFullResolutionCoordinates;
function bscScaleRectangleFromFullResolutionCoordinates(rect, mode, fullResGraphics) {
    if (bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) && !rect.pct) {
        return rectangle_1.bscScaleAbsoluteRect(rect, false, 2, 2);
    }
    return rect;
}
exports.bscScaleRectangleFromFullResolutionCoordinates = bscScaleRectangleFromFullResolutionCoordinates;
function bscIsFullResGraphicScalingNeeded(mode, fullResGraphics) {
    return !fullResGraphics && VideoModesForFullResGraphicScaling.has(mode);
}
exports.bscIsFullResGraphicScalingNeeded = bscIsFullResGraphicScalingNeeded;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

/**
 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
 * which returns `true` for `undefined` and other non-numeric values.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 * as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && objectToString.call(value) == numberTag);
}

module.exports = isNaN;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

/**
 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern modularize exports="npm" -o ./`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = __webpack_require__(4);

/***/ })
/******/ ]);
});
//# sourceMappingURL=bscore.js.map

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(7);
__exportStar(__webpack_require__(3), exports);
__exportStar(__webpack_require__(2), exports);
__exportStar(__webpack_require__(6), exports);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getDecoderTimeSliceMaxCount = exports.getDecoderName = exports.canPlayProbeData = exports.canPlayFile = exports.getFileProbeData = exports.parseProbeString = void 0;
var isNil = __webpack_require__(18);
var bscore_1 = __webpack_require__(15);
var error_1 = __webpack_require__(0);
var lastStdout = [];
var lastStderr = [];
var cwrap = {};
var out = {
    print: function (text) { return lastStdout.push(text); },
    printErr: function (text) { return lastStderr.push(text); },
};
var probeLibrary = __webpack_require__(14);
probeLibrary = probeLibrary(out);
probeLibrary.then(function (module) {
    probeLibrary = module;
    cwrap.free = probeLibrary.cwrap('free', 'number', ['number']);
    cwrap.malloc = probeLibrary.cwrap('malloc', 'number', ['number']);
});
function mountFilesystem(filePath) {
    var utf8Length = probeLibrary.lengthBytesUTF8(filePath) + 1;
    var buffer = cwrap.malloc(utf8Length);
    probeLibrary.stringToUTF8(filePath, buffer, utf8Length);
    probeLibrary.ccall('mountDataFilepath', 'void', ['number'], [buffer]);
    cwrap.free(buffer);
}
function parseProbeString(probeString) {
    var params = probeString.split('|');
    var result = { version: 0, data: {} };
    var longName = {
        TT: { name: 'transport' },
        PL: { name: 'packetLen', isInt: true },
        IX: { name: 'indexed' },
        AP: { name: 'audioPid', isInt: true },
        AC: { name: 'audioCodec' },
        ACH: { name: 'audioChannelCount', isInt: true },
        ASR: { name: 'audioSampleRate', isInt: true },
        AD: { name: 'audioDuration', isHex: true },
        AB: { name: 'audioBitrate', isHex: true },
        VP: { name: 'videoPid', isInt: true },
        VC: { name: 'videoCodec' },
        W: { name: 'width', isInt: true },
        H: { name: 'height', isInt: true },
        VD: { name: 'videoDuration', isHex: true },
        CD: { name: 'colorDepth', isInt: true },
        VFR: { name: 'videoFrameRate', isFloat: true },
        D: { name: 'duration', isHex: true },
        FT: { name: 'firstTimestamp', isInt: true },
        SP: { name: 'SubtitlePid', isInt: true },
        SL: { name: 'SubtitleLanguage' },
        CS: { name: 'CaptionService', isInt: true },
        CL: { name: 'CaptionLanguage' },
    };
    params.forEach(function (p) {
        var nameValue = p.split('=');
        if (nameValue.length === 1) {
            result.version = parseInt(p, 10);
        }
        else {
            var mappingName = nameValue[0];
            if (isNil(longName[mappingName])) {
                var errorMessage = 'cannot convert unknown probe string key: ' + mappingName;
                throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
            }
            var value = nameValue[1];
            if (longName[mappingName].isInt === true) {
                result.data[longName[mappingName].name] = parseInt(value, 10);
            }
            else if (longName[mappingName].isHex === true) {
                result.data[longName[mappingName].name] = parseInt(value, 16);
            }
            else if (longName[mappingName].isFloat === true) {
                result.data[longName[mappingName].name] = parseFloat(value);
            }
            else {
                result.data[longName[mappingName].name] = value;
            }
        }
    });
    return result;
}
exports.parseProbeString = parseProbeString;
function getFileProbeData(filePath) {
    var pathEnd = filePath.lastIndexOf('/');
    var fullPath = pathEnd === -1 ? '.' : filePath.substr(0, pathEnd);
    var filename = pathEnd === -1 ? filePath : filePath.substr(pathEnd + 1);
    mountFilesystem(fullPath);
    filename = 'data/' + filename;
    lastStdout = [];
    lastStderr = [];
    var bufferSize = 1024;
    var buffer = cwrap.malloc(bufferSize);
    var result = probeLibrary.ccall('ProbeFileEx', 'number', ['string', 'number', 'number', 'number'], [filename, buffer, bufferSize, 0]);
    var resultText = probeLibrary.UTF8ToString(buffer);
    cwrap.free(buffer);
    probeLibrary.ccall('unmountDataFilepath', 'void', [], []);
    switch (result) {
        case -1: {
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, 'PROBE_FILE_PATH (-1) : Could not find file ' + filePath);
        }
        case -2: {
            var errorMessage = 'PROBE_FILE_PROBE (-2) : Could not understand the file, due to'
                + ' failure in bmedia_probe_parse. Is it really a video?';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
        case -3: {
            var errorMessage = 'PROBE_STREAM_TYPE (-3) : Could not find any probe information'
                + ' in the file, so exited at InspectProbeStream';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
        case -4: {
            var errorMessage = 'PROBE_BUFFER_SIZE (-4) : Buffer is not long enough for'
                + ' description. Currently ${buffer_size} bytes';
            throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
        }
    }
    return { data: resultText, stdout: lastStdout, stderr: lastStderr };
}
exports.getFileProbeData = getFileProbeData;
function canPlayFile(filePath, model, timeSliceMode) {
    var data = getFileProbeData(filePath);
    var probeData = data.data;
    return canPlayProbeData(probeData, model, timeSliceMode);
}
exports.canPlayFile = canPlayFile;
function canPlayProbeData(probeData, model, timeSliceMode) {
    var bufferSize = 128;
    var buffer = cwrap.malloc(bufferSize);
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('CanPlayFileJS', 'number', ['string', 'string', 'string', 'number', 'number'], [probeData, machineName, timeSliceMode, buffer, bufferSize]);
    var cpResult = probeLibrary.UTF8ToString(buffer);
    cpResult = JSON.parse(cpResult);
    var canPlayToString = function (value) {
        var canPlayResult = probeLibrary.ccall('CanPlayToString', 'number', ['number'], [value]);
        return probeLibrary.UTF8ToString(canPlayResult);
    };
    var playable = false;
    if (cpResult.cp_result >= bscore_1.ProbePlayableStatus.cpPlayable && cpResult.cp_result <= bscore_1.ProbePlayableStatus.cpPlayableMax) {
        playable = true;
    }
    var canPlay = {
        playable: playable,
        playableResult: cpResult.cp_result,
        playableMsg: canPlayToString(cpResult.cp_result),
        isSeamless: cpResult.cp_result === bscore_1.ProbePlayableStatus.cpPlayableSeamlessly,
        video: cpResult.video,
        videoMsg: canPlayToString(cpResult.video),
        audio: cpResult.audio,
        audioMsg: canPlayToString(cpResult.audio),
    };
    cwrap.free(buffer);
    return canPlay;
}
exports.canPlayProbeData = canPlayProbeData;
function getDecoderName(model, index) {
    var bufferSize = 128;
    var buffer = cwrap.malloc(bufferSize);
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('GetDecoderName', 'number', ['string', 'number', 'number', 'number'], [machineName, index, buffer, bufferSize]);
    var name = result === -1 ? '' : probeLibrary.UTF8ToString(buffer);
    cwrap.free(buffer);
    if (result === -1) {
        var errorMessage = 'getDecoderName (-1) : Could not find decode for ' + model + ', index ' + index;
        throw new error_1.FsError(error_1.FsErrorType.invalidParameters, errorMessage);
    }
    return name;
}
exports.getDecoderName = getDecoderName;
function getDecoderTimeSliceMaxCount(model, index, timeSliceMode) {
    var machineName = bscore_1.bscPlayerModelToPlayerMachineName(model);
    var result = probeLibrary.ccall('GetDecoderTimesliceMaxCount', 'number', ['string', 'number', 'string'], [machineName, index, timeSliceMode]);
    return result;
}
exports.getDecoderTimeSliceMaxCount = getDecoderTimeSliceMaxCount;


/***/ }),
/* 18 */
/***/ (function(module, exports) {

/**
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__dirname) {(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Promise
 *
 * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>
 *
 * @param {Function} handler   Called as handler(resolve: Function, reject: Function)
 * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout
 */
function Promise(handler, parent) {
  var me = this;

  if (!(this instanceof Promise)) {
    throw new SyntaxError('Constructor must be called with the new operator');
  }

  if (typeof handler !== 'function') {
    throw new SyntaxError('Function parameter handler(resolve, reject) missing');
  }

  var _onSuccess = [];
  var _onFail = [];

  // status
  this.resolved = false;
  this.rejected = false;
  this.pending = true;

  /**
   * Process onSuccess and onFail callbacks: add them to the queue.
   * Once the promise is resolve, the function _promise is replace.
   * @param {Function} onSuccess
   * @param {Function} onFail
   * @private
   */
  var _process = function (onSuccess, onFail) {
    _onSuccess.push(onSuccess);
    _onFail.push(onFail);
  };

  /**
   * Add an onSuccess callback and optionally an onFail callback to the Promise
   * @param {Function} onSuccess
   * @param {Function} [onFail]
   * @returns {Promise} promise
   */
  this.then = function (onSuccess, onFail) {
    return new Promise(function (resolve, reject) {
      var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;
      var f = onFail    ? _then(onFail,    resolve, reject) : reject;

      _process(s, f);
    }, me);
  };

  /**
   * Resolve the promise
   * @param {*} result
   * @type {Function}
   */
  var _resolve = function (result) {
    // update status
    me.resolved = true;
    me.rejected = false;
    me.pending = false;

    _onSuccess.forEach(function (fn) {
      fn(result);
    });

    _process = function (onSuccess, onFail) {
      onSuccess(result);
    };

    _resolve = _reject = function () {
      throw new Error('Promise is already resolved');
    };

    return me;
  };

  /**
   * Reject the promise
   * @param {Error} error
   * @type {Function}
   */
  var _reject = function (error) {
    // update status
    me.resolved = false;
    me.rejected = true;
    me.pending = false;

    _onFail.forEach(function (fn) {
      fn(error);
    });

    _process = function (onSuccess, onFail) {
      onFail(error);
    };

    _resolve = _reject = function () {
      throw new Error('Promise is already resolved');
    };

    return me;
  };

  /**
   * Cancel te promise. This will reject the promise with a CancellationError
   * @returns {Promise} self
   */
  this.cancel = function () {
    if (parent) {
      parent.cancel();
    }
    else {
      _reject(new CancellationError());
    }

    return me;
  };

  /**
   * Set a timeout for the promise. If the promise is not resolved within
   * the time, the promise will be cancelled and a TimeoutError is thrown.
   * If the promise is resolved in time, the timeout is removed.
   * @param {number} delay     Delay in milliseconds
   * @returns {Promise} self
   */
  this.timeout = function (delay) {
    if (parent) {
      parent.timeout(delay);
    }
    else {
      var timer = setTimeout(function () {
        _reject(new TimeoutError('Promise timed out after ' + delay + ' ms'));
      }, delay);

      me.always(function () {
        clearTimeout(timer);
      });
    }

    return me;
  };

  // attach handler passing the resolve and reject functions
  handler(function (result) {
    _resolve(result);
  }, function (error) {
    _reject(error);
  });
}

/**
 * Execute given callback, then call resolve/reject based on the returned result
 * @param {Function} callback
 * @param {Function} resolve
 * @param {Function} reject
 * @returns {Function}
 * @private
 */
function _then(callback, resolve, reject) {
  return function (result) {
    try {
      var res = callback(result);
      if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {
        // method returned a promise
        res.then(resolve, reject);
      }
      else {
        resolve(res);
      }
    }
    catch (error) {
      reject(error);
    }
  }
}

/**
 * Add an onFail callback to the Promise
 * @param {Function} onFail
 * @returns {Promise} promise
 */
Promise.prototype['catch'] = function (onFail) {
  return this.then(null, onFail);
};

// TODO: add support for Promise.catch(Error, callback)
// TODO: add support for Promise.catch(Error, Error, callback)

/**
 * Execute given callback when the promise either resolves or rejects.
 * @param {Function} fn
 * @returns {Promise} promise
 */
Promise.prototype.always = function (fn) {
  return this.then(fn, fn);
};

/**
 * Create a promise which resolves when all provided promises are resolved,
 * and fails when any of the promises resolves.
 * @param {Promise[]} promises
 * @returns {Promise} promise
 */
Promise.all = function (promises){
  return new Promise(function (resolve, reject) {
    var remaining = promises.length,
        results = [];

    if (remaining) {
      promises.forEach(function (p, i) {
        p.then(function (result) {
          results[i] = result;
          remaining--;
          if (remaining == 0) {
            resolve(results);
          }
        }, function (error) {
          remaining = 0;
          reject(error);
        });
      });
    }
    else {
      resolve(results);
    }
  });
};

/**
 * Create a promise resolver
 * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver
 */
Promise.defer = function () {
  var resolver = {};

  resolver.promise = new Promise(function (resolve, reject) {
    resolver.resolve = resolve;
    resolver.reject = reject;
  });

  return resolver;
};

/**
 * Create a cancellation error
 * @param {String} [message]
 * @extends Error
 */
function CancellationError(message) {
  this.message = message || 'promise cancelled';
  this.stack = (new Error()).stack;
}

CancellationError.prototype = new Error();
CancellationError.prototype.constructor = Error;
CancellationError.prototype.name = 'CancellationError';

Promise.CancellationError = CancellationError;


/**
 * Create a timeout error
 * @param {String} [message]
 * @extends Error
 */
function TimeoutError(message) {
  this.message = message || 'timeout exceeded';
  this.stack = (new Error()).stack;
}

TimeoutError.prototype = new Error();
TimeoutError.prototype.constructor = Error;
TimeoutError.prototype.name = 'TimeoutError';

Promise.TimeoutError = TimeoutError;


module.exports = Promise;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// used to prevent webpack from resolving requires on node libs

// determines the JavaScript platform: browser or node
module.exports.platform = "browser";
// determines whether the code is running in main thread or not
module.exports.isMainThread = module.exports.platform === 'browser' ? typeof Window !== 'undefined' : !process.connected;

// determines the number of cpus available

if(true){
  module.exports.cpus = self.navigator.hardwareConcurrency;
} else {
  module.exports.cpus = require('os').cpus().length;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var Promise = __webpack_require__(0);
var WorkerHandler = __webpack_require__(6);
var environment = __webpack_require__(1);

/**
 * A pool to manage workers
 * @param {String} [script]   Optional worker script
 * @param {Object} [options]  Available options: maxWorkers: Number
 * @constructor
 */
function Pool(script, options) {
  if (typeof script === 'string') {
    this.script = script || null;
  }
  else {
    this.script = null;
    options = script;
  }

  this.workers = [];  // queue with all workers
  this.tasks = [];    // queue with tasks awaiting execution

  options = options || {};

  this.forkArgs = options.forkArgs || [];
  this.forkOpts = options.forkOpts || {};
  this.debugPortStart = options.debugPortStart || 43210;

  // configuration
  if (options && 'maxWorkers' in options) {
    validateMaxWorkers(options.maxWorkers);
    this.maxWorkers = options.maxWorkers;
  }
  else {
    this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);
  }

  if (options && 'minWorkers' in options) {
    if(options.minWorkers === 'max') {
      this.minWorkers = Math.max((environment.cpus || 4) - 1, 1);
    } else {
      validateMinWorkers(options.minWorkers);
      this.minWorkers = options.minWorkers;
      this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers);     // in case minWorkers is higher than maxWorkers
    }
    this._ensureMinWorkers();
  }
}

/**
 * Execute a function on a worker.
 *
 * Example usage:
 *
 *   var pool = new Pool()
 *
 *   // call a function available on the worker
 *   pool.exec('fibonacci', [6])
 *
 *   // offload a function
 *   function add(a, b) {
 *     return a + b
 *   };
 *   pool.exec(add, [2, 4])
 *       .then(function (result) {
 *         console.log(result); // outputs 6
 *       })
 *       .catch(function(error) {
 *         console.log(error);
 *       });
 *
 * @param {String | Function} method  Function name or function.
 *                                    If `method` is a string, the corresponding
 *                                    method on the worker will be executed
 *                                    If `method` is a Function, the function
 *                                    will be stringified and executed via the
 *                                    workers built-in function `run(fn, args)`.
 * @param {Array} [params]  Function arguments applied when calling the function
 * @return {Promise.<*, Error>} result
 */
Pool.prototype.exec = function (method, params) {
  // validate type of arguments
  if (params && !Array.isArray(params)) {
    throw new TypeError('Array expected as argument "params"');
  }

  if (typeof method === 'string') {
    var resolver = Promise.defer();

    // add a new task to the queue
    var tasks = this.tasks;
    var task = {
      method:  method,
      params:  params,
      resolver: resolver,
      timeout: null
    };
    tasks.push(task);

    // replace the timeout method of the Promise with our own,
    // which starts the timer as soon as the task is actually started
    var originalTimeout = resolver.promise.timeout
    resolver.promise.timeout = function timeout (delay) {
      if (tasks.indexOf(task) !== -1) {
        // task is still queued -> start the timer later on
        task.timeout = delay;
        return resolver.promise;
      }
      else {
        // task is already being executed -> start timer immediately
        return originalTimeout.call(resolver.promise, delay);
      }
    }

    // trigger task execution
    this._next();

    return resolver.promise;
  }
  else if (typeof method === 'function') {
    // send stringified function and function arguments to worker
    return this.exec('run', [String(method), params]);
  }
  else {
    throw new TypeError('Function or string expected as argument "method"');
  }
};

/**
 * Create a proxy for current worker. Returns an object containing all
 * methods available on the worker. The methods always return a promise.
 *
 * @return {Promise.<Object, Error>} proxy
 */
Pool.prototype.proxy = function () {
  if (arguments.length > 0) {
    throw new Error('No arguments expected');
  }

  var pool = this;
  return this.exec('methods')
      .then(function (methods) {
        var proxy = {};

        methods.forEach(function (method) {
          proxy[method] = function () {
            return pool.exec(method, Array.prototype.slice.call(arguments));
          }
        });

        return proxy;
      });
};

/**
 * Creates new array with the results of calling a provided callback function
 * on every element in this array.
 * @param {Array} array
 * @param {function} callback  Function taking two arguments:
 *                             `callback(currentValue, index)`
 * @return {Promise.<Array>} Returns a promise which resolves  with an Array
 *                           containing the results of the callback function
 *                           executed for each of the array elements.
 */
/* TODO: implement map
Pool.prototype.map = function (array, callback) {
};
*/

/**
 * Grab the first task from the queue, find a free worker, and assign the
 * worker to the task.
 * @protected
 */
Pool.prototype._next = function () {
  if (this.tasks.length > 0) {
    // there are tasks in the queue

    // find an available worker
    var worker = this._getWorker();
    if (worker) {
      // get the first task from the queue
      var me = this;
      var task = this.tasks.shift();

      // check if the task is still pending (and not cancelled -> promise rejected)
      if (task.resolver.promise.pending) {
        // send the request to the worker
        var promise = worker.exec(task.method, task.params, task.resolver)
          .then(function () {
            me._next(); // trigger next task in the queue
          })
          .catch(function () {
            // if the worker crashed and terminated, remove it from the pool
            if (worker.terminated) {
              me._removeWorker(worker);
              // If minWorkers set, spin up new workers to replace the crashed ones
              me._ensureMinWorkers();
            }
            me._next(); // trigger next task in the queue
          });

        // start queued timer now
        if (typeof task.timeout === 'number') {
          promise.timeout(task.timeout);
        }
      }
    }
  }
};

/**
 * Get an available worker. If no worker is available and the maximum number
 * of workers isn't yet reached, a new worker will be created and returned.
 * If no worker is available and the maximum number of workers is reached,
 * null will be returned.
 *
 * @return {WorkerHandler | null} worker
 * @private
 */
Pool.prototype._getWorker = function() {
  // find a non-busy worker
  for (var i = 0, ii = this.workers.length; i < ii; i++) {
    var worker = this.workers[i];
    if (!worker.busy()) {
      return worker;
    }
  }

  if (this.workers.length < this.maxWorkers) {
    // create a new worker
    worker = new WorkerHandler(this.script, {
      forkArgs: this.forkArgs,
      forkOpts: this.forkOpts,
      debugPort: this.debugPortStart + this.workers.length
    });
    this.workers.push(worker);
    return worker;
  }

  return null;
};

/**
 * Remove a worker from the pool. For example after a worker terminated for
 * whatever reason
 * @param {WorkerHandler} worker
 * @protected
 */
Pool.prototype._removeWorker = function(worker) {
  // terminate the worker (if not already terminated)
  worker.terminate();
  this._removeWorkerFromList(worker);
};

/**
 * Remove a worker from the pool list.
 * @param {WorkerHandler} worker
 * @protected
 */
Pool.prototype._removeWorkerFromList = function(worker) {
  // remove from the list with workers
  var index = this.workers.indexOf(worker);
  if (index != -1) {
    this.workers.splice(index, 1);
  }
};

/**
 * Close all active workers. Tasks currently being executed will be finished first.
 * @param {boolean} [force=false]   If false (default), the workers are terminated
 *                                  after finishing all tasks currently in
 *                                  progress. If true, the workers will be
 *                                  terminated immediately.
 * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected
 *                                  after timeout if worker process has not been terminated.
 * @return {Promise.<void, Error>}
 */
Pool.prototype.terminate = function (force, timeout) {
  var f = function (worker) {
    this._removeWorkerFromList(worker);
  };
  var removeWorker = f.bind(this);

  var promises = [];
  var workers = this.workers.slice();
  workers.forEach(function (worker) {
    var termPromise = worker.terminateAndNotify(force, timeout)
      .then(removeWorker);
    promises.push(termPromise);
  });
  return Promise.all(promises);
};

// DEPRECATED
/**
 * Close all active workers. Unlike terminate, this function does not return a promise.
 * @param force
 */
Pool.prototype.clear = function (force) {
  this.terminate(force);
};

/**
 * Retrieve statistics on tasks and workers.
 * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics
 */
Pool.prototype.stats = function () {
  var totalWorkers = this.workers.length;
  var busyWorkers = this.workers.filter(function (worker) {
    return worker.busy();
  }).length;

  return {
    totalWorkers:  totalWorkers,
    busyWorkers:   busyWorkers,
    idleWorkers:   totalWorkers - busyWorkers,

    pendingTasks:  this.tasks.length,
    activeTasks:   busyWorkers
  };
};

/**
 * Ensures that a minimum of minWorkers is up and running
 * @protected
 */
Pool.prototype._ensureMinWorkers = function() {
  if (this.minWorkers) {
    for(var i = this.workers.length; i < this.minWorkers; i++) {
      this.workers.push(new WorkerHandler(this.script, {
        forkArgs: this.forkArgs,
        forkOpts: this.forkOpts,
        debugPort: this.debugPortStart + i
      }));
    }
  }
};

/**
 * Ensure that the maxWorkers option is an integer >= 1
 * @param {*} maxWorkers
 * @returns {boolean} returns true maxWorkers has a valid value
 */
function validateMaxWorkers(maxWorkers) {
  if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {
    throw new TypeError('Option maxWorkers must be an integer number >= 1');
  }
}

/**
 * Ensure that the minWorkers option is an integer >= 0
 * @param {*} minWorkers
 * @returns {boolean} returns true when minWorkers has a valid value
 */
function validateMinWorkers(minWorkers) {
  if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {
    throw new TypeError('Option minWorkers must be an integer number >= 0');
  }
}

/**
 * Test whether a variable is a number
 * @param {*} value
 * @returns {boolean} returns true when value is a number
 */
function isNumber(value) {
  return typeof value === 'number';
}

/**
 * Test whether a number is an integer
 * @param {number} value
 * @returns {boolean} Returns true if value is an integer
 */
function isInteger(value) {
  return Math.round(value) == value;
}

module.exports = Pool;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * worker must be started as a child process or a web worker.
 * It listens for RPC messages from the parent process.
 */

// create a worker API for sending and receiving messages which works both on
// node.js and in the browser
var worker = {};
if (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {
  // worker in the browser
  worker.on = function (event, callback) {
    addEventListener(event, function (message) {
      callback(message.data);
    })
  };
  worker.send = function (message) {
    postMessage(message);
  };
}
else if (typeof process !== 'undefined') {
  // node.js
  worker.on = process.on.bind(process);
  worker.send = process.send.bind(process);
}
else {
  throw new Error('Script must be executed as a worker');
}

function convertError(error) {
  return Object.getOwnPropertyNames(error).reduce(function(product, name) {
    return Object.defineProperty(product, name, {
	value: error[name],
	enumerable: true
    });
  }, {});
}

/**
 * Test whether a value is a Promise via duck typing.
 * @param {*} value
 * @returns {boolean} Returns true when given value is an object
 *                    having functions `then` and `catch`.
 */
function isPromise(value) {
  return value && (typeof value.then === 'function') && (typeof value.catch === 'function');
}

// functions available externally
worker.methods = {};

/**
 * Execute a function with provided arguments
 * @param {String} fn     Stringified function
 * @param {Array} [args]  Function arguments
 * @returns {*}
 */
worker.methods.run = function run(fn, args) {
  var f = eval('(' + fn + ')');
  return f.apply(f, args);
};

/**
 * Get a list with methods available on this worker
 * @return {String[]} methods
 */
worker.methods.methods = function methods() {
  return Object.keys(worker.methods);
};

worker.on('message', function (request) {
  try {
    var method = worker.methods[request.method];

    if (method) {
      // execute the function
      var result = method.apply(method, request.params);

      if (isPromise(result)) {
        // promise returned, resolve this and then return
        result
            .then(function (result) {
              worker.send({
                id: request.id,
                result: result,
                error: null
              });
            })
            .catch(function (err) {
              worker.send({
                id: request.id,
                result: null,
                error: convertError(err)
              });
            });
      }
      else {
        // immediate result
        worker.send({
          id: request.id,
          result: result,
          error: null
        });
      }
    }
    else {
      throw new Error('Unknown method "' + request.method + '"');
    }
  }
  catch (err) {
    worker.send({
      id: request.id,
      result: null,
      error: convertError(err)
    });
  }
});

/**
 * Register methods to the worker
 * @param {Object} methods
 */
worker.register = function (methods) {

  if (methods) {
    for (var name in methods) {
      if (methods.hasOwnProperty(name)) {
        worker.methods[name] = methods[name];
      }
    }
  }

  worker.send('ready');

};

if (true) {
  exports.add = worker.register;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var environment = __webpack_require__(1);

/**
 * Create a new worker pool
 * @param {Object} [options]
 * @returns {Pool} pool
 */
exports.pool = function pool(script, options) {
  var Pool = __webpack_require__(3);

  return new Pool(script, options);
};

/**
 * Create a worker and optionally register a set of methods to the worker.
 * @param {Object} [methods]
 */
exports.worker = function worker(methods) {
  var worker = __webpack_require__(4);
  worker.add(methods);
};

/**
 * Create a promise.
 * @type {Promise} promise
 */
exports.Promise = __webpack_require__(0);

exports.platform = environment.platform;
exports.isMainThread = environment.isMainThread;
exports.cpus = environment.cpus;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var Promise = __webpack_require__(0);
var assign = __webpack_require__(8);

// determine environment
var environment = __webpack_require__(1);

// get the default worker script
function getDefaultWorker() {
  if (environment.platform == 'browser') {
    // test whether the browser supports all features that we need
    if (typeof Blob === 'undefined') {
      throw new Error('Blob not supported by the browser');
    }
    if (!window.URL || typeof window.URL.createObjectURL !== 'function') {
      throw new Error('URL.createObjectURL not supported by the browser');
    }

    // use embedded worker.js
    var blob = new Blob([__webpack_require__(7)], {type: 'text/javascript'});
    return window.URL.createObjectURL(blob);
  }
  else {
    // use external worker.js in current directory
    return __dirname + '/worker.js';
  }
}

// add debug flags to child processes if the node inspector is active
function resolveForkOptions(opts) {
  opts = opts || {};

  var processExecArgv = process.execArgv.join(' ');
  var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;
  var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;

  var execArgv = [];
  if (inspectorActive) {
    execArgv.push('--inspect=' + opts.debugPort);

    if (debugBrk) {
      execArgv.push('--debug-brk');
    }
  }

  return assign({}, opts, {
    forkArgs: opts.forkArgs,
    forkOpts: assign({}, opts.forkOpts, {
      execArgv: (opts.forkOpts && opts.forkOpts.execArgv || [])
        .concat(execArgv)
    })
  });
}

/**
 * Converts a serialized error to Error
 * @param {Object} obj Error that has been serialized and parsed to object
 * @return {Error} The equivalent Error.
 */
function objectToError (obj) {
  var temp = new Error('')
  var props = Object.keys(obj)

  for (var i = 0; i < props.length; i++) {
    temp[props[i]] = obj[props[i]]
  }

  return temp
}

/**
 * A WorkerHandler controls a single worker. This worker can be a child process
 * on node.js or a WebWorker in a browser environment.
 * @param {String} [script] If no script is provided, a default worker with a
 *                          function run will be created.
 * @constructor
 */
function WorkerHandler(script, options) {
  this.script = script || getDefaultWorker();

  var forkOptions;

  if (true) {
    // check whether Worker is supported by the browser
    // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534
    if (typeof Worker !== 'function' && (typeof Worker !== 'object' || typeof Worker.prototype.constructor !== 'function')) {
      throw new Error('Web workers not supported by the browser');
    }

    // create the web worker
    this.worker = new Worker(this.script);

    // add node.js API to the web worker
    this.worker.on = function (event, callback) {
      this.addEventListener(event, function (message) {
        callback(message.data);
      });
    };
    this.worker.send = function (message) {
      this.postMessage(message);
    };
  }
  else {
    // on node.js, create a child process
    forkOptions = resolveForkOptions(options);

    // call node.require to prevent child_process to be required when loading with AMD
    this.worker = require('child_process').fork(
      this.script,
      forkOptions.forkArgs,
      forkOptions.forkOpts
    );
  }

  var me = this;

  // The ready message is only sent if the worker.add method is called (And the default script is not used)
  if (!script) {
    this.worker.ready = true;
  }

  // queue for requests that are received before the worker is ready
  this.requestQueue = [];
  this.worker.on('message', function (response) {
    if (typeof response === 'string' && response === 'ready') {
      me.worker.ready = true;
      dispatchQueuedRequests();
    } else {
      // find the task from the processing queue, and run the tasks callback
      var id = response.id;
      var task = me.processing[id];
      if (task) {
        // remove the task from the queue
        delete me.processing[id];

        // test if we need to terminate
        if (me.terminating) {
          // complete worker termination if all tasks are finished
          me.terminate();
        }

        // resolve the task's promise
        if (response.error) {
          task.resolver.reject(objectToError(response.error));
        }
        else {
          task.resolver.resolve(response.result);
        }
      }
    }
  });

  // reject all running tasks on worker error
  function onError(error) {
    me.terminated = true;
    if (me.terminating && me.terminationHandler) {
      me.terminationHandler(me);
    }
    me.terminating = false;

    for (var id in me.processing) {
      if (me.processing.hasOwnProperty(id)) {
        me.processing[id].resolver.reject(error);
      }
    }
    me.processing = {};
  }

  // send all queued requests to worker
  function dispatchQueuedRequests()
  {
    me.requestQueue.forEach(me.worker.send.bind(me.worker));
    me.requestQueue = [];
  }

  // listen for worker messages error and exit
  this.worker.on('error', onError);
  this.worker.on('exit', function () {
    var error = new Error('Worker terminated unexpectedly');
    onError(error);
  });

  this.processing = {}; // queue with tasks currently in progress

  this.terminating = false;
  this.terminated = false;
  this.terminationHandler = null;
  this.lastId = 0;
}

/**
 * Get a list with methods available on the worker.
 * @return {Promise.<String[], Error>} methods
 */
WorkerHandler.prototype.methods = function () {
  return this.exec('methods');
};

/**
 * Execute a method with given parameters on the worker
 * @param {String} method
 * @param {Array} [params]
 * @param {{resolve: Function, reject: Function}} [resolver]
 * @return {Promise.<*, Error>} result
 */
WorkerHandler.prototype.exec = function(method, params, resolver) {
  if (!resolver) {
    resolver = Promise.defer();
  }

  // generate a unique id for the task
  var id = ++this.lastId;

  // register a new task as being in progress
  this.processing[id] = {
    id: id,
    resolver: resolver
  };

  // build a JSON-RPC request
  var request = {
    id: id,
    method: method,
    params: params
  };

  if (this.terminated) {
    resolver.reject(new Error('Worker is terminated'));
  } else if (this.worker.ready) {
    // send the request to the worker
    this.worker.send(request);
  } else {
    this.requestQueue.push(request);
  }

  // on cancellation, force the worker to terminate
  var me = this;
  resolver.promise
      .catch(function (error) {
        if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {
          // remove this task from the queue. It is already rejected (hence this
          // catch event), and else it will be rejected again when terminating
          delete me.processing[id];

          // terminate worker
          me.terminate(true);
        }
      });

  return resolver.promise;
};

/**
 * Test whether the worker is working or not
 * @return {boolean} Returns true if the worker is busy
 */
WorkerHandler.prototype.busy = function () {
  return Object.keys(this.processing).length > 0;
};

/**
 * Terminate the worker.
 * @param {boolean} [force=false]   If false (default), the worker is terminated
 *                                  after finishing all tasks currently in
 *                                  progress. If true, the worker will be
 *                                  terminated immediately.
 * @param {function} [callback=null] If provided, will be called when process terminates.
 */
WorkerHandler.prototype.terminate = function (force, callback) {
  if (force) {
    // cancel all tasks in progress
    for (var id in this.processing) {
      if (this.processing.hasOwnProperty(id)) {
        this.processing[id].resolver.reject(new Error('Worker terminated'));
      }
    }
    this.processing = {};
  }

  if (typeof callback === 'function') {
    this.terminationHandler = callback;
  }
  if (!this.busy()) {
    // all tasks are finished. kill the worker
    if (this.worker) {
      if (typeof this.worker.kill === 'function') {
        this.worker.kill();  // child process
      }
      else if (typeof this.worker.terminate === 'function') {
        this.worker.terminate(); // web worker
      }
      else {
        throw new Error('Failed to terminate worker');
      }
      this.worker = null;
    }
    this.terminating = false;
    this.terminated = true;
    if (this.terminationHandler) {
      this.terminationHandler(this);
    }
  }
  else {
    // we can't terminate immediately, there are still tasks being executed
    this.terminating = true;
  }
};

/**
 * Terminate the worker, returning a Promise that resolves when the termination has been done.
 * @param {boolean} [force=false]   If false (default), the worker is terminated
 *                                  after finishing all tasks currently in
 *                                  progress. If true, the worker will be
 *                                  terminated immediately.
 * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected
 *                                  after timeout if worker process has not been terminated.
 * @return {Promise.<WorkerHandler, Error>}
 */
WorkerHandler.prototype.terminateAndNotify = function (force, timeout) {
  var resolver = Promise.defer();
  if (timeout) {
    resolver.promise.timeout = timeout;
  }
  this.terminate(force, function(worker) {
    resolver.resolve(worker);
  });
  return resolver.promise;
};

module.exports = WorkerHandler;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

/**
 * embeddedWorker.js contains an embedded version of worker.js.
 * This file is automatically generated,
 * changes made in this file will be overwritten.
 */
module.exports = "!function(r){function e(n){if(o[n])return o[n].exports;var t=o[n]={exports:{},id:n,loaded:!1};return r[n].call(t.exports,t,t.exports,e),t.loaded=!0,t.exports}var o={};e.m=r,e.c=o,e.p=\"\",e(0)}([function(module,exports,__webpack_require__){function convertError(r){return Object.getOwnPropertyNames(r).reduce(function(e,o){return Object.defineProperty(e,o,{value:r[o],enumerable:!0})},{})}function isPromise(r){return r&&\"function\"==typeof r.then&&\"function\"==typeof r.catch}var worker={};if(\"undefined\"!=typeof self&&\"function\"==typeof postMessage&&\"function\"==typeof addEventListener)worker.on=function(r,e){addEventListener(r,function(r){e(r.data)})},worker.send=function(r){postMessage(r)};else{if(\"undefined\"==typeof process)throw new Error(\"Script must be executed as a worker\");worker.on=process.on.bind(process),worker.send=process.send.bind(process)}worker.methods={},worker.methods.run=function run(fn,args){var f=eval(\"(\"+fn+\")\");return f.apply(f,args)},worker.methods.methods=function(){return Object.keys(worker.methods)},worker.on(\"message\",function(r){try{var e=worker.methods[r.method];if(!e)throw new Error('Unknown method \"'+r.method+'\"');var o=e.apply(e,r.params);isPromise(o)?o.then(function(e){worker.send({id:r.id,result:e,error:null})}).catch(function(e){worker.send({id:r.id,result:null,error:convertError(e)})}):worker.send({id:r.id,result:o,error:null})}catch(e){worker.send({id:r.id,result:null,error:convertError(e)})}}),worker.register=function(r){if(r)for(var e in r)r.hasOwnProperty(e)&&(worker.methods[e]=r[e]);worker.send(\"ready\")},exports.add=worker.register}]);";


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ })
/******/ ]);
});
/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ })
/******/ ]);
});
//# sourceMappingURL=fsmetadata-browser.js.map